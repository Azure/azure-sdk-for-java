// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Defines a delta health policy used to evaluate the health of an application or one of its child entities when
 * upgrading the cluster.
 */
@Fluent
public final class ApplicationDeltaHealthPolicy implements JsonSerializable<ApplicationDeltaHealthPolicy> {
    /*
     * The delta health policy used by default to evaluate the health of a service type when upgrading the cluster.
     */
    private ServiceTypeDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy;

    /*
     * The map with service type delta health policy per service type name. The map is empty by default.
     */
    private Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies;

    /**
     * Creates an instance of ApplicationDeltaHealthPolicy class.
     */
    public ApplicationDeltaHealthPolicy() {
    }

    /**
     * Get the defaultServiceTypeDeltaHealthPolicy property: The delta health policy used by default to evaluate the
     * health of a service type when upgrading the cluster.
     * 
     * @return the defaultServiceTypeDeltaHealthPolicy value.
     */
    public ServiceTypeDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy() {
        return this.defaultServiceTypeDeltaHealthPolicy;
    }

    /**
     * Set the defaultServiceTypeDeltaHealthPolicy property: The delta health policy used by default to evaluate the
     * health of a service type when upgrading the cluster.
     * 
     * @param defaultServiceTypeDeltaHealthPolicy the defaultServiceTypeDeltaHealthPolicy value to set.
     * @return the ApplicationDeltaHealthPolicy object itself.
     */
    public ApplicationDeltaHealthPolicy
        withDefaultServiceTypeDeltaHealthPolicy(ServiceTypeDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy) {
        this.defaultServiceTypeDeltaHealthPolicy = defaultServiceTypeDeltaHealthPolicy;
        return this;
    }

    /**
     * Get the serviceTypeDeltaHealthPolicies property: The map with service type delta health policy per service type
     * name. The map is empty by default.
     * 
     * @return the serviceTypeDeltaHealthPolicies value.
     */
    public Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies() {
        return this.serviceTypeDeltaHealthPolicies;
    }

    /**
     * Set the serviceTypeDeltaHealthPolicies property: The map with service type delta health policy per service type
     * name. The map is empty by default.
     * 
     * @param serviceTypeDeltaHealthPolicies the serviceTypeDeltaHealthPolicies value to set.
     * @return the ApplicationDeltaHealthPolicy object itself.
     */
    public ApplicationDeltaHealthPolicy
        withServiceTypeDeltaHealthPolicies(Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies) {
        this.serviceTypeDeltaHealthPolicies = serviceTypeDeltaHealthPolicies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultServiceTypeDeltaHealthPolicy() != null) {
            defaultServiceTypeDeltaHealthPolicy().validate();
        }
        if (serviceTypeDeltaHealthPolicies() != null) {
            serviceTypeDeltaHealthPolicies().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("defaultServiceTypeDeltaHealthPolicy", this.defaultServiceTypeDeltaHealthPolicy);
        jsonWriter.writeMapField("serviceTypeDeltaHealthPolicies", this.serviceTypeDeltaHealthPolicies,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationDeltaHealthPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationDeltaHealthPolicy if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationDeltaHealthPolicy.
     */
    public static ApplicationDeltaHealthPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationDeltaHealthPolicy deserializedApplicationDeltaHealthPolicy = new ApplicationDeltaHealthPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("defaultServiceTypeDeltaHealthPolicy".equals(fieldName)) {
                    deserializedApplicationDeltaHealthPolicy.defaultServiceTypeDeltaHealthPolicy
                        = ServiceTypeDeltaHealthPolicy.fromJson(reader);
                } else if ("serviceTypeDeltaHealthPolicies".equals(fieldName)) {
                    Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies
                        = reader.readMap(reader1 -> ServiceTypeDeltaHealthPolicy.fromJson(reader1));
                    deserializedApplicationDeltaHealthPolicy.serviceTypeDeltaHealthPolicies
                        = serviceTypeDeltaHealthPolicies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationDeltaHealthPolicy;
        });
    }
}
