// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicefabric.ServiceFabricManager;
import com.azure.resourcemanager.servicefabric.fluent.models.ManagedClusterInner;
import com.azure.resourcemanager.servicefabric.models.AzureActiveDirectory;
import com.azure.resourcemanager.servicefabric.models.ClientCertificate;
import com.azure.resourcemanager.servicefabric.models.ClusterState;
import com.azure.resourcemanager.servicefabric.models.LoadBalancingRule;
import com.azure.resourcemanager.servicefabric.models.ManagedCluster;
import com.azure.resourcemanager.servicefabric.models.ManagedClusterAddOnFeature;
import com.azure.resourcemanager.servicefabric.models.ManagedClusterUpdateParameters;
import com.azure.resourcemanager.servicefabric.models.ManagedResourceProvisioningState;
import com.azure.resourcemanager.servicefabric.models.SettingsSectionDescription;
import com.azure.resourcemanager.servicefabric.models.Sku;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class ManagedClusterImpl implements ManagedCluster, ManagedCluster.Definition, ManagedCluster.Update {
    private ManagedClusterInner innerObject;

    private final ServiceFabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public String dnsName() {
        return this.innerModel().dnsName();
    }

    public String fqdn() {
        return this.innerModel().fqdn();
    }

    public String clusterId() {
        return this.innerModel().clusterId();
    }

    public ClusterState clusterState() {
        return this.innerModel().clusterState();
    }

    public String clusterCertificateThumbprint() {
        return this.innerModel().clusterCertificateThumbprint();
    }

    public Integer clientConnectionPort() {
        return this.innerModel().clientConnectionPort();
    }

    public Integer httpGatewayConnectionPort() {
        return this.innerModel().httpGatewayConnectionPort();
    }

    public String adminUsername() {
        return this.innerModel().adminUsername();
    }

    public String adminPassword() {
        return this.innerModel().adminPassword();
    }

    public List<LoadBalancingRule> loadBalancingRules() {
        List<LoadBalancingRule> inner = this.innerModel().loadBalancingRules();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<ClientCertificate> clients() {
        List<ClientCertificate> inner = this.innerModel().clients();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public AzureActiveDirectory azureActiveDirectory() {
        return this.innerModel().azureActiveDirectory();
    }

    public List<SettingsSectionDescription> fabricSettings() {
        List<SettingsSectionDescription> inner = this.innerModel().fabricSettings();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ManagedResourceProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String clusterCodeVersion() {
        return this.innerModel().clusterCodeVersion();
    }

    public List<ManagedClusterAddOnFeature> addonFeatures() {
        List<ManagedClusterAddOnFeature> inner = this.innerModel().addonFeatures();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ManagedClusterInner innerModel() {
        return this.innerObject;
    }

    private ServiceFabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String clusterName;

    private ManagedClusterUpdateParameters updateParameters;

    public ManagedClusterImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ManagedCluster create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .createOrUpdate(resourceGroupName, clusterName, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedCluster create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .createOrUpdate(resourceGroupName, clusterName, this.innerModel(), context);
        return this;
    }

    ManagedClusterImpl(String name, ServiceFabricManager serviceManager) {
        this.innerObject = new ManagedClusterInner();
        this.serviceManager = serviceManager;
        this.clusterName = name;
    }

    public ManagedClusterImpl update() {
        this.updateParameters = new ManagedClusterUpdateParameters();
        return this;
    }

    public ManagedCluster apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .update(resourceGroupName, clusterName, updateParameters, Context.NONE);
        return this;
    }

    public ManagedCluster apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .update(resourceGroupName, clusterName, updateParameters, context);
        return this;
    }

    ManagedClusterImpl(ManagedClusterInner innerObject, ServiceFabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.clusterName = Utils.getValueFromIdByName(innerObject.id(), "managedClusters");
    }

    public ManagedCluster refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, Context.NONE)
                .getValue();
        return this;
    }

    public ManagedCluster refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedClusters()
                .getByResourceGroupWithResponse(resourceGroupName, clusterName, context)
                .getValue();
        return this;
    }

    public ManagedClusterImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedClusterImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedClusterImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ManagedClusterImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public ManagedClusterImpl withDnsName(String dnsName) {
        this.innerModel().withDnsName(dnsName);
        return this;
    }

    public ManagedClusterImpl withClientConnectionPort(Integer clientConnectionPort) {
        if (isInCreateMode()) {
            this.innerModel().withClientConnectionPort(clientConnectionPort);
            return this;
        } else {
            this.updateParameters.withClientConnectionPort(clientConnectionPort);
            return this;
        }
    }

    public ManagedClusterImpl withHttpGatewayConnectionPort(Integer httpGatewayConnectionPort) {
        if (isInCreateMode()) {
            this.innerModel().withHttpGatewayConnectionPort(httpGatewayConnectionPort);
            return this;
        } else {
            this.updateParameters.withHttpGatewayConnectionPort(httpGatewayConnectionPort);
            return this;
        }
    }

    public ManagedClusterImpl withAdminUsername(String adminUsername) {
        this.innerModel().withAdminUsername(adminUsername);
        return this;
    }

    public ManagedClusterImpl withAdminPassword(String adminPassword) {
        this.innerModel().withAdminPassword(adminPassword);
        return this;
    }

    public ManagedClusterImpl withLoadBalancingRules(List<LoadBalancingRule> loadBalancingRules) {
        if (isInCreateMode()) {
            this.innerModel().withLoadBalancingRules(loadBalancingRules);
            return this;
        } else {
            this.updateParameters.withLoadBalancingRules(loadBalancingRules);
            return this;
        }
    }

    public ManagedClusterImpl withClients(List<ClientCertificate> clients) {
        if (isInCreateMode()) {
            this.innerModel().withClients(clients);
            return this;
        } else {
            this.updateParameters.withClients(clients);
            return this;
        }
    }

    public ManagedClusterImpl withAzureActiveDirectory(AzureActiveDirectory azureActiveDirectory) {
        if (isInCreateMode()) {
            this.innerModel().withAzureActiveDirectory(azureActiveDirectory);
            return this;
        } else {
            this.updateParameters.withAzureActiveDirectory(azureActiveDirectory);
            return this;
        }
    }

    public ManagedClusterImpl withFabricSettings(List<SettingsSectionDescription> fabricSettings) {
        if (isInCreateMode()) {
            this.innerModel().withFabricSettings(fabricSettings);
            return this;
        } else {
            this.updateParameters.withFabricSettings(fabricSettings);
            return this;
        }
    }

    public ManagedClusterImpl withClusterCodeVersion(String clusterCodeVersion) {
        if (isInCreateMode()) {
            this.innerModel().withClusterCodeVersion(clusterCodeVersion);
            return this;
        } else {
            this.updateParameters.withClusterCodeVersion(clusterCodeVersion);
            return this;
        }
    }

    public ManagedClusterImpl withAddonFeatures(List<ManagedClusterAddOnFeature> addonFeatures) {
        if (isInCreateMode()) {
            this.innerModel().withAddonFeatures(addonFeatures);
            return this;
        } else {
            this.updateParameters.withAddonFeatures(addonFeatures);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
