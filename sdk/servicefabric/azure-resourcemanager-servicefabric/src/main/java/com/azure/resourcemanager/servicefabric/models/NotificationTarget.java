// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes the notification target properties.
 */
@Fluent
public final class NotificationTarget implements JsonSerializable<NotificationTarget> {
    /*
     * The notification channel indicates the type of receivers subscribed to the notification, either user or
     * subscription.
     */
    private NotificationChannel notificationChannel;

    /*
     * List of targets that subscribe to the notification.
     */
    private List<String> receivers;

    /**
     * Creates an instance of NotificationTarget class.
     */
    public NotificationTarget() {
    }

    /**
     * Get the notificationChannel property: The notification channel indicates the type of receivers subscribed to the
     * notification, either user or subscription.
     * 
     * @return the notificationChannel value.
     */
    public NotificationChannel notificationChannel() {
        return this.notificationChannel;
    }

    /**
     * Set the notificationChannel property: The notification channel indicates the type of receivers subscribed to the
     * notification, either user or subscription.
     * 
     * @param notificationChannel the notificationChannel value to set.
     * @return the NotificationTarget object itself.
     */
    public NotificationTarget withNotificationChannel(NotificationChannel notificationChannel) {
        this.notificationChannel = notificationChannel;
        return this;
    }

    /**
     * Get the receivers property: List of targets that subscribe to the notification.
     * 
     * @return the receivers value.
     */
    public List<String> receivers() {
        return this.receivers;
    }

    /**
     * Set the receivers property: List of targets that subscribe to the notification.
     * 
     * @param receivers the receivers value to set.
     * @return the NotificationTarget object itself.
     */
    public NotificationTarget withReceivers(List<String> receivers) {
        this.receivers = receivers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (notificationChannel() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property notificationChannel in model NotificationTarget"));
        }
        if (receivers() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property receivers in model NotificationTarget"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(NotificationTarget.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("notificationChannel",
            this.notificationChannel == null ? null : this.notificationChannel.toString());
        jsonWriter.writeArrayField("receivers", this.receivers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationTarget if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NotificationTarget.
     */
    public static NotificationTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationTarget deserializedNotificationTarget = new NotificationTarget();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationChannel".equals(fieldName)) {
                    deserializedNotificationTarget.notificationChannel
                        = NotificationChannel.fromString(reader.getString());
                } else if ("receivers".equals(fieldName)) {
                    List<String> receivers = reader.readArray(reader1 -> reader1.getString());
                    deserializedNotificationTarget.receivers = receivers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationTarget;
        });
    }
}
