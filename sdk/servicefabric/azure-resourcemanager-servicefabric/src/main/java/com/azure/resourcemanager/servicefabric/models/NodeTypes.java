// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of NodeTypes. */
public interface NodeTypes {
    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    PagedIterable<NodeType> listByManagedClusters(String resourceGroupName, String clusterName);

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    PagedIterable<NodeType> listByManagedClusters(String resourceGroupName, String clusterName, Context context);

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters);

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context);

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters);

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void reimage(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context);

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteNode(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters);

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteNode(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context);

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    NodeType get(String resourceGroupName, String clusterName, String nodeTypeName);

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    Response<NodeType> getWithResponse(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String clusterName, String nodeTypeName);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String clusterName, String nodeTypeName, Context context);

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    NodeType getById(String id);

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    Response<NodeType> getByIdWithResponse(String id, Context context);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new NodeType resource.
     *
     * @param name resource name.
     * @return the first stage of the new NodeType definition.
     */
    NodeType.DefinitionStages.Blank define(String name);
}
