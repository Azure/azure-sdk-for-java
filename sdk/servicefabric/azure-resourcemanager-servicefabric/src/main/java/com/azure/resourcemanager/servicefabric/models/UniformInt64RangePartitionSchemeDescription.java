// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.
 */
@Fluent
public final class UniformInt64RangePartitionSchemeDescription extends PartitionSchemeDescription {
    /*
     * Specifies how the service is partitioned.
     */
    private PartitionScheme partitionScheme = PartitionScheme.UNIFORM_INT64RANGE;

    /*
     * The number of partitions.
     */
    private int count;

    /*
     * String indicating the lower bound of the partition key range that
     * should be split between the partition ‘count’
     */
    private String lowKey;

    /*
     * String indicating the upper bound of the partition key range that
     * should be split between the partition ‘count’
     */
    private String highKey;

    /**
     * Creates an instance of UniformInt64RangePartitionSchemeDescription class.
     */
    public UniformInt64RangePartitionSchemeDescription() {
    }

    /**
     * Get the partitionScheme property: Specifies how the service is partitioned.
     * 
     * @return the partitionScheme value.
     */
    @Override
    public PartitionScheme partitionScheme() {
        return this.partitionScheme;
    }

    /**
     * Get the count property: The number of partitions.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Set the count property: The number of partitions.
     * 
     * @param count the count value to set.
     * @return the UniformInt64RangePartitionSchemeDescription object itself.
     */
    public UniformInt64RangePartitionSchemeDescription withCount(int count) {
        this.count = count;
        return this;
    }

    /**
     * Get the lowKey property: String indicating the lower bound of the partition key range that
     * should be split between the partition ‘count’.
     * 
     * @return the lowKey value.
     */
    public String lowKey() {
        return this.lowKey;
    }

    /**
     * Set the lowKey property: String indicating the lower bound of the partition key range that
     * should be split between the partition ‘count’.
     * 
     * @param lowKey the lowKey value to set.
     * @return the UniformInt64RangePartitionSchemeDescription object itself.
     */
    public UniformInt64RangePartitionSchemeDescription withLowKey(String lowKey) {
        this.lowKey = lowKey;
        return this;
    }

    /**
     * Get the highKey property: String indicating the upper bound of the partition key range that
     * should be split between the partition ‘count’.
     * 
     * @return the highKey value.
     */
    public String highKey() {
        return this.highKey;
    }

    /**
     * Set the highKey property: String indicating the upper bound of the partition key range that
     * should be split between the partition ‘count’.
     * 
     * @param highKey the highKey value to set.
     * @return the UniformInt64RangePartitionSchemeDescription object itself.
     */
    public UniformInt64RangePartitionSchemeDescription withHighKey(String highKey) {
        this.highKey = highKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (lowKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lowKey in model UniformInt64RangePartitionSchemeDescription"));
        }
        if (highKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property highKey in model UniformInt64RangePartitionSchemeDescription"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UniformInt64RangePartitionSchemeDescription.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("count", this.count);
        jsonWriter.writeStringField("lowKey", this.lowKey);
        jsonWriter.writeStringField("highKey", this.highKey);
        jsonWriter.writeStringField("partitionScheme",
            this.partitionScheme == null ? null : this.partitionScheme.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UniformInt64RangePartitionSchemeDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UniformInt64RangePartitionSchemeDescription if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UniformInt64RangePartitionSchemeDescription.
     */
    public static UniformInt64RangePartitionSchemeDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UniformInt64RangePartitionSchemeDescription deserializedUniformInt64RangePartitionSchemeDescription
                = new UniformInt64RangePartitionSchemeDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("count".equals(fieldName)) {
                    deserializedUniformInt64RangePartitionSchemeDescription.count = reader.getInt();
                } else if ("lowKey".equals(fieldName)) {
                    deserializedUniformInt64RangePartitionSchemeDescription.lowKey = reader.getString();
                } else if ("highKey".equals(fieldName)) {
                    deserializedUniformInt64RangePartitionSchemeDescription.highKey = reader.getString();
                } else if ("partitionScheme".equals(fieldName)) {
                    deserializedUniformInt64RangePartitionSchemeDescription.partitionScheme
                        = PartitionScheme.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUniformInt64RangePartitionSchemeDescription;
        });
    }
}
