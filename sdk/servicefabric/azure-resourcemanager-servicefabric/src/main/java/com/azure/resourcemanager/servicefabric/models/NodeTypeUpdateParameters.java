// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Node type update request. */
@JsonFlatten
@Fluent
public class NodeTypeUpdateParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NodeTypeUpdateParameters.class);

    /*
     * Node type update parameters
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * The number of nodes in the node type.
     */
    @JsonProperty(value = "properties.vmInstanceCount")
    private Integer vmInstanceCount;

    /*
     * The placement tags applied to nodes in the node type, which can be used
     * to indicate where certain services (workload) should run.
     */
    @JsonProperty(value = "properties.placementProperties")
    private Map<String, String> placementProperties;

    /*
     * The capacity tags applied to the nodes in the node type, the cluster
     * resource manager uses these tags to understand how much resource a node
     * has.
     */
    @JsonProperty(value = "properties.capacities")
    private Map<String, String> capacities;

    /*
     * The range of ports from which cluster assigned port to Service Fabric
     * applications.
     */
    @JsonProperty(value = "properties.applicationPorts")
    private EndpointRangeDescription applicationPorts;

    /*
     * The range of ephemeral ports that nodes in this node type should be
     * configured with.
     */
    @JsonProperty(value = "properties.ephemeralPorts")
    private EndpointRangeDescription ephemeralPorts;

    /*
     * The secrets to install in the virtual machines.
     */
    @JsonProperty(value = "properties.vmSecrets")
    private List<VaultSecretGroup> vmSecrets;

    /*
     * Set of extensions that should be installed onto the virtual machines.
     */
    @JsonProperty(value = "properties.vmExtensions")
    private List<VmssExtension> vmExtensions;

    /**
     * Get the tags property: Node type update parameters.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Node type update parameters.
     *
     * @param tags the tags value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the vmInstanceCount property: The number of nodes in the node type.
     *
     * @return the vmInstanceCount value.
     */
    public Integer vmInstanceCount() {
        return this.vmInstanceCount;
    }

    /**
     * Set the vmInstanceCount property: The number of nodes in the node type.
     *
     * @param vmInstanceCount the vmInstanceCount value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withVmInstanceCount(Integer vmInstanceCount) {
        this.vmInstanceCount = vmInstanceCount;
        return this;
    }

    /**
     * Get the placementProperties property: The placement tags applied to nodes in the node type, which can be used to
     * indicate where certain services (workload) should run.
     *
     * @return the placementProperties value.
     */
    public Map<String, String> placementProperties() {
        return this.placementProperties;
    }

    /**
     * Set the placementProperties property: The placement tags applied to nodes in the node type, which can be used to
     * indicate where certain services (workload) should run.
     *
     * @param placementProperties the placementProperties value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withPlacementProperties(Map<String, String> placementProperties) {
        this.placementProperties = placementProperties;
        return this;
    }

    /**
     * Get the capacities property: The capacity tags applied to the nodes in the node type, the cluster resource
     * manager uses these tags to understand how much resource a node has.
     *
     * @return the capacities value.
     */
    public Map<String, String> capacities() {
        return this.capacities;
    }

    /**
     * Set the capacities property: The capacity tags applied to the nodes in the node type, the cluster resource
     * manager uses these tags to understand how much resource a node has.
     *
     * @param capacities the capacities value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withCapacities(Map<String, String> capacities) {
        this.capacities = capacities;
        return this;
    }

    /**
     * Get the applicationPorts property: The range of ports from which cluster assigned port to Service Fabric
     * applications.
     *
     * @return the applicationPorts value.
     */
    public EndpointRangeDescription applicationPorts() {
        return this.applicationPorts;
    }

    /**
     * Set the applicationPorts property: The range of ports from which cluster assigned port to Service Fabric
     * applications.
     *
     * @param applicationPorts the applicationPorts value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withApplicationPorts(EndpointRangeDescription applicationPorts) {
        this.applicationPorts = applicationPorts;
        return this;
    }

    /**
     * Get the ephemeralPorts property: The range of ephemeral ports that nodes in this node type should be configured
     * with.
     *
     * @return the ephemeralPorts value.
     */
    public EndpointRangeDescription ephemeralPorts() {
        return this.ephemeralPorts;
    }

    /**
     * Set the ephemeralPorts property: The range of ephemeral ports that nodes in this node type should be configured
     * with.
     *
     * @param ephemeralPorts the ephemeralPorts value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withEphemeralPorts(EndpointRangeDescription ephemeralPorts) {
        this.ephemeralPorts = ephemeralPorts;
        return this;
    }

    /**
     * Get the vmSecrets property: The secrets to install in the virtual machines.
     *
     * @return the vmSecrets value.
     */
    public List<VaultSecretGroup> vmSecrets() {
        return this.vmSecrets;
    }

    /**
     * Set the vmSecrets property: The secrets to install in the virtual machines.
     *
     * @param vmSecrets the vmSecrets value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withVmSecrets(List<VaultSecretGroup> vmSecrets) {
        this.vmSecrets = vmSecrets;
        return this;
    }

    /**
     * Get the vmExtensions property: Set of extensions that should be installed onto the virtual machines.
     *
     * @return the vmExtensions value.
     */
    public List<VmssExtension> vmExtensions() {
        return this.vmExtensions;
    }

    /**
     * Set the vmExtensions property: Set of extensions that should be installed onto the virtual machines.
     *
     * @param vmExtensions the vmExtensions value to set.
     * @return the NodeTypeUpdateParameters object itself.
     */
    public NodeTypeUpdateParameters withVmExtensions(List<VmssExtension> vmExtensions) {
        this.vmExtensions = vmExtensions;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationPorts() != null) {
            applicationPorts().validate();
        }
        if (ephemeralPorts() != null) {
            ephemeralPorts().validate();
        }
        if (vmSecrets() != null) {
            vmSecrets().forEach(e -> e.validate());
        }
        if (vmExtensions() != null) {
            vmExtensions().forEach(e -> e.validate());
        }
    }
}
