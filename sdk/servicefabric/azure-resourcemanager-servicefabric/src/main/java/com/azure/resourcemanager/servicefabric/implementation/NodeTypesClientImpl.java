// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicefabric.fluent.NodeTypesClient;
import com.azure.resourcemanager.servicefabric.fluent.models.NodeTypeInner;
import com.azure.resourcemanager.servicefabric.models.NodeTypeActionParameters;
import com.azure.resourcemanager.servicefabric.models.NodeTypeListResult;
import com.azure.resourcemanager.servicefabric.models.NodeTypeUpdateParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in NodeTypesClient. */
public final class NodeTypesClientImpl implements NodeTypesClient {
    private final ClientLogger logger = new ClientLogger(NodeTypesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final NodeTypesService service;

    /** The service client containing this operation class. */
    private final ServiceFabricManagementClientImpl client;

    /**
     * Initializes an instance of NodeTypesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    NodeTypesClientImpl(ServiceFabricManagementClientImpl client) {
        this.service =
            RestProxy.create(NodeTypesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricManagementClientNodeTypes to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricManagem")
    private interface NodeTypesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeTypeListResult>> listByManagedClusters(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("clusterName") String clusterName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}/restart")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> restart(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NodeTypeActionParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}/reimage")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> reimage(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NodeTypeActionParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}/deleteNode")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> deleteNode(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NodeTypeActionParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeTypeInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NodeTypeInner parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") NodeTypeUpdateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric"
                + "/managedClusters/{clusterName}/nodeTypes/{nodeTypeName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("clusterName") String clusterName,
            @PathParam("nodeTypeName") String nodeTypeName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NodeTypeListResult>> listByManagedClustersNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeTypeInner>> listByManagedClustersSinglePageAsync(
        String resourceGroupName, String clusterName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByManagedClusters(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            this.client.getSubscriptionId(),
                            clusterName,
                            apiVersion,
                            accept,
                            context))
            .<PagedResponse<NodeTypeInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeTypeInner>> listByManagedClustersSinglePageAsync(
        String resourceGroupName, String clusterName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByManagedClusters(
                this.client.getEndpoint(),
                resourceGroupName,
                this.client.getSubscriptionId(),
                clusterName,
                apiVersion,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NodeTypeInner> listByManagedClustersAsync(String resourceGroupName, String clusterName) {
        return new PagedFlux<>(
            () -> listByManagedClustersSinglePageAsync(resourceGroupName, clusterName),
            nextLink -> listByManagedClustersNextSinglePageAsync(nextLink));
    }

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NodeTypeInner> listByManagedClustersAsync(
        String resourceGroupName, String clusterName, Context context) {
        return new PagedFlux<>(
            () -> listByManagedClustersSinglePageAsync(resourceGroupName, clusterName, context),
            nextLink -> listByManagedClustersNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeTypeInner> listByManagedClusters(String resourceGroupName, String clusterName) {
        return new PagedIterable<>(listByManagedClustersAsync(resourceGroupName, clusterName));
    }

    /**
     * Gets all Node types of the specified managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Node types of the specified managed cluster.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NodeTypeInner> listByManagedClusters(
        String resourceGroupName, String clusterName, Context context) {
        return new PagedIterable<>(listByManagedClustersAsync(resourceGroupName, clusterName, context));
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restart(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> restartWithResponseAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .restart(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                parameters,
                accept,
                context);
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginRestartAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            restartWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginRestartAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            restartWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        return beginRestartAsync(resourceGroupName, clusterName, nodeTypeName, parameters).getSyncPoller();
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginRestart(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        return beginRestartAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).getSyncPoller();
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        return beginRestartAsync(resourceGroupName, clusterName, nodeTypeName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restartAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        return beginRestartAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        restartAsync(resourceGroupName, clusterName, nodeTypeName, parameters).block();
    }

    /**
     * Restarts one or more nodes on the node type. It will disable the fabric nodes, trigger a restart on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for restart action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        restartAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).block();
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reimageWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .reimage(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reimageWithResponseAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .reimage(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                parameters,
                accept,
                context);
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginReimageAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            reimageWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginReimageAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            reimageWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginReimage(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        return beginReimageAsync(resourceGroupName, clusterName, nodeTypeName, parameters).getSyncPoller();
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginReimage(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        return beginReimageAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).getSyncPoller();
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> reimageAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        return beginReimageAsync(resourceGroupName, clusterName, nodeTypeName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> reimageAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        return beginReimageAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimage(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        reimageAsync(resourceGroupName, clusterName, nodeTypeName, parameters).block();
    }

    /**
     * Reimages one or more nodes on the node type. It will disable the fabric nodes, trigger a reimage on the VMs and
     * activate the nodes back again.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for reimage action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reimage(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        reimageAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).block();
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteNodeWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .deleteNode(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteNodeWithResponseAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .deleteNode(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                parameters,
                accept,
                context);
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteNodeAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteNodeWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteNodeAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteNodeWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDeleteNode(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        return beginDeleteNodeAsync(resourceGroupName, clusterName, nodeTypeName, parameters).getSyncPoller();
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDeleteNode(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        return beginDeleteNodeAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).getSyncPoller();
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteNodeAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        return beginDeleteNodeAsync(resourceGroupName, clusterName, nodeTypeName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteNodeAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        return beginDeleteNodeAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNode(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        deleteNodeAsync(resourceGroupName, clusterName, nodeTypeName, parameters).block();
    }

    /**
     * Deletes one or more nodes on the node type. It will disable the fabric nodes, trigger a delete on the VMs and
     * removes the state from the cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters parameters for delete action.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteNode(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        deleteNodeAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).block();
    }

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NodeTypeInner>> getWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NodeTypeInner>> getWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeTypeInner> getAsync(String resourceGroupName, String clusterName, String nodeTypeName) {
        return getWithResponseAsync(resourceGroupName, clusterName, nodeTypeName)
            .flatMap(
                (Response<NodeTypeInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeTypeInner get(String resourceGroupName, String clusterName, String nodeTypeName) {
        return getAsync(resourceGroupName, clusterName, nodeTypeName).block();
    }

    /**
     * Get a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Service Fabric node type of a given managed cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NodeTypeInner> getWithResponse(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        return getWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, context).block();
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                parameters,
                accept,
                context);
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<NodeTypeInner>, NodeTypeInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters);
        return this
            .client
            .<NodeTypeInner, NodeTypeInner>getLroResult(
                mono, this.client.getHttpPipeline(), NodeTypeInner.class, NodeTypeInner.class, Context.NONE);
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<NodeTypeInner>, NodeTypeInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context);
        return this
            .client
            .<NodeTypeInner, NodeTypeInner>getLroResult(
                mono, this.client.getHttpPipeline(), NodeTypeInner.class, NodeTypeInner.class, context);
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters).getSyncPoller();
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginCreateOrUpdate(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeTypeInner> createOrUpdateAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeTypeInner> createOrUpdateAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeTypeInner createOrUpdate(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters) {
        return createOrUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters).block();
    }

    /**
     * Create or update a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The node type resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeTypeInner createOrUpdate(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeInner parameters, Context context) {
        return createOrUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).block();
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeUpdateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeUpdateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                parameters,
                accept,
                context);
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<NodeTypeInner>, NodeTypeInner> beginUpdateAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeUpdateParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters);
        return this
            .client
            .<NodeTypeInner, NodeTypeInner>getLroResult(
                mono, this.client.getHttpPipeline(), NodeTypeInner.class, NodeTypeInner.class, Context.NONE);
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<NodeTypeInner>, NodeTypeInner> beginUpdateAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeUpdateParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context);
        return this
            .client
            .<NodeTypeInner, NodeTypeInner>getLroResult(
                mono, this.client.getHttpPipeline(), NodeTypeInner.class, NodeTypeInner.class, context);
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginUpdate(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeUpdateParameters parameters) {
        return beginUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters).getSyncPoller();
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<NodeTypeInner>, NodeTypeInner> beginUpdate(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeUpdateParameters parameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).getSyncPoller();
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeTypeInner> updateAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeUpdateParameters parameters) {
        return beginUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NodeTypeInner> updateAsync(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeUpdateParameters parameters,
        Context context) {
        return beginUpdateAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeTypeInner update(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeUpdateParameters parameters) {
        return updateAsync(resourceGroupName, clusterName, nodeTypeName, parameters).block();
    }

    /**
     * Update the configuration of a node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param parameters The parameters to update the node type configuration.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NodeTypeInner update(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeUpdateParameters parameters,
        Context context) {
        return updateAsync(resourceGroupName, clusterName, nodeTypeName, parameters, context).block();
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            clusterName,
                            nodeTypeName,
                            apiVersion,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (clusterName == null) {
            return Mono.error(new IllegalArgumentException("Parameter clusterName is required and cannot be null."));
        }
        if (nodeTypeName == null) {
            return Mono.error(new IllegalArgumentException("Parameter nodeTypeName is required and cannot be null."));
        }
        final String apiVersion = "2020-01-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                clusterName,
                nodeTypeName,
                apiVersion,
                accept,
                context);
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String clusterName, String nodeTypeName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, clusterName, nodeTypeName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, clusterName, nodeTypeName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String clusterName, String nodeTypeName) {
        return beginDeleteAsync(resourceGroupName, clusterName, nodeTypeName).getSyncPoller();
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        return beginDeleteAsync(resourceGroupName, clusterName, nodeTypeName, context).getSyncPoller();
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, String nodeTypeName) {
        return beginDeleteAsync(resourceGroupName, clusterName, nodeTypeName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        return beginDeleteAsync(resourceGroupName, clusterName, nodeTypeName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, String nodeTypeName) {
        deleteAsync(resourceGroupName, clusterName, nodeTypeName).block();
    }

    /**
     * Delete a Service Fabric node type of a given managed cluster.
     *
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster resource.
     * @param nodeTypeName The name of the node type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        deleteAsync(resourceGroupName, clusterName, nodeTypeName, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return node type list results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeTypeInner>> listByManagedClustersNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByManagedClustersNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<NodeTypeInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return node type list results.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NodeTypeInner>> listByManagedClustersNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByManagedClustersNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
