// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Managed cluster update request. */
@JsonFlatten
@Fluent
public class ManagedClusterUpdateParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedClusterUpdateParameters.class);

    /*
     * Managed cluster update parameters
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * The port used for client connections to the cluster.
     */
    @JsonProperty(value = "properties.clientConnectionPort")
    private Integer clientConnectionPort;

    /*
     * The port used for http connections to the cluster.
     */
    @JsonProperty(value = "properties.httpGatewayConnectionPort")
    private Integer httpGatewayConnectionPort;

    /*
     * Describes load balancing rules.
     */
    @JsonProperty(value = "properties.loadBalancingRules")
    private List<LoadBalancingRule> loadBalancingRules;

    /*
     * client certificates for the cluster.
     */
    @JsonProperty(value = "properties.clients")
    private List<ClientCertificate> clients;

    /*
     * Azure active directory.
     */
    @JsonProperty(value = "properties.azureActiveDirectory")
    private AzureActiveDirectory azureActiveDirectory;

    /*
     * The list of custom fabric settings to configure the cluster.
     */
    @JsonProperty(value = "properties.fabricSettings")
    private List<SettingsSectionDescription> fabricSettings;

    /*
     * The Service Fabric runtime version of the cluster. This property can
     * only by set the user when **upgradeMode** is set to 'Manual'. To get
     * list of available Service Fabric versions for new clusters use
     * [ClusterVersion API](./ClusterVersion.md). To get the list of available
     * version for existing clusters use **availableClusterVersions**.
     */
    @JsonProperty(value = "properties.clusterCodeVersion")
    private String clusterCodeVersion;

    /*
     * client certificates for the cluster.
     */
    @JsonProperty(value = "properties.addonFeatures")
    private List<ManagedClusterAddOnFeature> addonFeatures;

    /**
     * Get the tags property: Managed cluster update parameters.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Managed cluster update parameters.
     *
     * @param tags the tags value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the clientConnectionPort property: The port used for client connections to the cluster.
     *
     * @return the clientConnectionPort value.
     */
    public Integer clientConnectionPort() {
        return this.clientConnectionPort;
    }

    /**
     * Set the clientConnectionPort property: The port used for client connections to the cluster.
     *
     * @param clientConnectionPort the clientConnectionPort value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withClientConnectionPort(Integer clientConnectionPort) {
        this.clientConnectionPort = clientConnectionPort;
        return this;
    }

    /**
     * Get the httpGatewayConnectionPort property: The port used for http connections to the cluster.
     *
     * @return the httpGatewayConnectionPort value.
     */
    public Integer httpGatewayConnectionPort() {
        return this.httpGatewayConnectionPort;
    }

    /**
     * Set the httpGatewayConnectionPort property: The port used for http connections to the cluster.
     *
     * @param httpGatewayConnectionPort the httpGatewayConnectionPort value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withHttpGatewayConnectionPort(Integer httpGatewayConnectionPort) {
        this.httpGatewayConnectionPort = httpGatewayConnectionPort;
        return this;
    }

    /**
     * Get the loadBalancingRules property: Describes load balancing rules.
     *
     * @return the loadBalancingRules value.
     */
    public List<LoadBalancingRule> loadBalancingRules() {
        return this.loadBalancingRules;
    }

    /**
     * Set the loadBalancingRules property: Describes load balancing rules.
     *
     * @param loadBalancingRules the loadBalancingRules value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withLoadBalancingRules(List<LoadBalancingRule> loadBalancingRules) {
        this.loadBalancingRules = loadBalancingRules;
        return this;
    }

    /**
     * Get the clients property: client certificates for the cluster.
     *
     * @return the clients value.
     */
    public List<ClientCertificate> clients() {
        return this.clients;
    }

    /**
     * Set the clients property: client certificates for the cluster.
     *
     * @param clients the clients value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withClients(List<ClientCertificate> clients) {
        this.clients = clients;
        return this;
    }

    /**
     * Get the azureActiveDirectory property: Azure active directory.
     *
     * @return the azureActiveDirectory value.
     */
    public AzureActiveDirectory azureActiveDirectory() {
        return this.azureActiveDirectory;
    }

    /**
     * Set the azureActiveDirectory property: Azure active directory.
     *
     * @param azureActiveDirectory the azureActiveDirectory value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withAzureActiveDirectory(AzureActiveDirectory azureActiveDirectory) {
        this.azureActiveDirectory = azureActiveDirectory;
        return this;
    }

    /**
     * Get the fabricSettings property: The list of custom fabric settings to configure the cluster.
     *
     * @return the fabricSettings value.
     */
    public List<SettingsSectionDescription> fabricSettings() {
        return this.fabricSettings;
    }

    /**
     * Set the fabricSettings property: The list of custom fabric settings to configure the cluster.
     *
     * @param fabricSettings the fabricSettings value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withFabricSettings(List<SettingsSectionDescription> fabricSettings) {
        this.fabricSettings = fabricSettings;
        return this;
    }

    /**
     * Get the clusterCodeVersion property: The Service Fabric runtime version of the cluster. This property can only by
     * set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new
     * clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing
     * clusters use **availableClusterVersions**.
     *
     * @return the clusterCodeVersion value.
     */
    public String clusterCodeVersion() {
        return this.clusterCodeVersion;
    }

    /**
     * Set the clusterCodeVersion property: The Service Fabric runtime version of the cluster. This property can only by
     * set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new
     * clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing
     * clusters use **availableClusterVersions**.
     *
     * @param clusterCodeVersion the clusterCodeVersion value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withClusterCodeVersion(String clusterCodeVersion) {
        this.clusterCodeVersion = clusterCodeVersion;
        return this;
    }

    /**
     * Get the addonFeatures property: client certificates for the cluster.
     *
     * @return the addonFeatures value.
     */
    public List<ManagedClusterAddOnFeature> addonFeatures() {
        return this.addonFeatures;
    }

    /**
     * Set the addonFeatures property: client certificates for the cluster.
     *
     * @param addonFeatures the addonFeatures value to set.
     * @return the ManagedClusterUpdateParameters object itself.
     */
    public ManagedClusterUpdateParameters withAddonFeatures(List<ManagedClusterAddOnFeature> addonFeatures) {
        this.addonFeatures = addonFeatures;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (loadBalancingRules() != null) {
            loadBalancingRules().forEach(e -> e.validate());
        }
        if (clients() != null) {
            clients().forEach(e -> e.validate());
        }
        if (azureActiveDirectory() != null) {
            azureActiveDirectory().validate();
        }
        if (fabricSettings() != null) {
            fabricSettings().forEach(e -> e.validate());
        }
    }
}
