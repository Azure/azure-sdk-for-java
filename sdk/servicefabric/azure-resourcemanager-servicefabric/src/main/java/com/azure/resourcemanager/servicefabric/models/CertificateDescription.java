// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the certificate details.
 */
@Fluent
public final class CertificateDescription implements JsonSerializable<CertificateDescription> {
    /*
     * Thumbprint of the primary certificate.
     */
    private String thumbprint;

    /*
     * Thumbprint of the secondary certificate.
     */
    private String thumbprintSecondary;

    /*
     * The local certificate store location.
     */
    private StoreName x509StoreName;

    /**
     * Creates an instance of CertificateDescription class.
     */
    public CertificateDescription() {
    }

    /**
     * Get the thumbprint property: Thumbprint of the primary certificate.
     * 
     * @return the thumbprint value.
     */
    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Set the thumbprint property: Thumbprint of the primary certificate.
     * 
     * @param thumbprint the thumbprint value to set.
     * @return the CertificateDescription object itself.
     */
    public CertificateDescription withThumbprint(String thumbprint) {
        this.thumbprint = thumbprint;
        return this;
    }

    /**
     * Get the thumbprintSecondary property: Thumbprint of the secondary certificate.
     * 
     * @return the thumbprintSecondary value.
     */
    public String thumbprintSecondary() {
        return this.thumbprintSecondary;
    }

    /**
     * Set the thumbprintSecondary property: Thumbprint of the secondary certificate.
     * 
     * @param thumbprintSecondary the thumbprintSecondary value to set.
     * @return the CertificateDescription object itself.
     */
    public CertificateDescription withThumbprintSecondary(String thumbprintSecondary) {
        this.thumbprintSecondary = thumbprintSecondary;
        return this;
    }

    /**
     * Get the x509StoreName property: The local certificate store location.
     * 
     * @return the x509StoreName value.
     */
    public StoreName x509StoreName() {
        return this.x509StoreName;
    }

    /**
     * Set the x509StoreName property: The local certificate store location.
     * 
     * @param x509StoreName the x509StoreName value to set.
     * @return the CertificateDescription object itself.
     */
    public CertificateDescription withX509StoreName(StoreName x509StoreName) {
        this.x509StoreName = x509StoreName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (thumbprint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property thumbprint in model CertificateDescription"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertificateDescription.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("thumbprint", this.thumbprint);
        jsonWriter.writeStringField("thumbprintSecondary", this.thumbprintSecondary);
        jsonWriter.writeStringField("x509StoreName", this.x509StoreName == null ? null : this.x509StoreName.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertificateDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertificateDescription if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertificateDescription.
     */
    public static CertificateDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertificateDescription deserializedCertificateDescription = new CertificateDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("thumbprint".equals(fieldName)) {
                    deserializedCertificateDescription.thumbprint = reader.getString();
                } else if ("thumbprintSecondary".equals(fieldName)) {
                    deserializedCertificateDescription.thumbprintSecondary = reader.getString();
                } else if ("x509StoreName".equals(fieldName)) {
                    deserializedCertificateDescription.x509StoreName = StoreName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertificateDescription;
        });
    }
}
