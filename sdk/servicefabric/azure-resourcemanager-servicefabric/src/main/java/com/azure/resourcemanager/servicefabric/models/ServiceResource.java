// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.servicefabric.fluent.models.ServiceResourceInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of ServiceResource. */
public interface ServiceResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the placementConstraints property: The placement constraints as a string. Placement constraints are boolean
     * expressions on node properties and allow for restricting a service to particular nodes based on the service
     * requirements. For example, to place a service on nodes where NodeType is blue specify the following: "NodeColor
     * == blue)".
     *
     * @return the placementConstraints value.
     */
    String placementConstraints();

    /**
     * Gets the correlationScheme property: A list that describes the correlation of the service with other services.
     *
     * @return the correlationScheme value.
     */
    List<ServiceCorrelationDescription> correlationScheme();

    /**
     * Gets the serviceLoadMetrics property: The service load metrics is given as an array of
     * ServiceLoadMetricDescription objects.
     *
     * @return the serviceLoadMetrics value.
     */
    List<ServiceLoadMetricDescription> serviceLoadMetrics();

    /**
     * Gets the servicePlacementPolicies property: A list that describes the correlation of the service with other
     * services.
     *
     * @return the servicePlacementPolicies value.
     */
    List<ServicePlacementPolicyDescription> servicePlacementPolicies();

    /**
     * Gets the defaultMoveCost property: Specifies the move cost for the service.
     *
     * @return the defaultMoveCost value.
     */
    MoveCost defaultMoveCost();

    /**
     * Gets the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the serviceTypeName property: The name of the service type.
     *
     * @return the serviceTypeName value.
     */
    String serviceTypeName();

    /**
     * Gets the partitionDescription property: Describes how the service is partitioned.
     *
     * @return the partitionDescription value.
     */
    PartitionSchemeDescription partitionDescription();

    /**
     * Gets the servicePackageActivationMode property: The activation Mode of the service package.
     *
     * @return the servicePackageActivationMode value.
     */
    ArmServicePackageActivationMode servicePackageActivationMode();

    /**
     * Gets the location property: It will be deprecated in New API, resource location depends on the parent resource.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Azure resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: Azure resource etag.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.servicefabric.fluent.models.ServiceResourceInner object.
     *
     * @return the inner object.
     */
    ServiceResourceInner innerModel();

    /** The entirety of the ServiceResource definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The ServiceResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the ServiceResource definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the ServiceResource definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, clusterName, applicationName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param clusterName The name of the cluster resource.
             * @param applicationName The name of the application resource.
             * @return the next definition stage.
             */
            WithCreate withExistingApplication(String resourceGroupName, String clusterName, String applicationName);
        }
        /**
         * The stage of the ServiceResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithLocation,
                DefinitionStages.WithTags,
                DefinitionStages.WithPlacementConstraints,
                DefinitionStages.WithCorrelationScheme,
                DefinitionStages.WithServiceLoadMetrics,
                DefinitionStages.WithServicePlacementPolicies,
                DefinitionStages.WithDefaultMoveCost,
                DefinitionStages.WithServiceTypeName,
                DefinitionStages.WithPartitionDescription,
                DefinitionStages.WithServicePackageActivationMode {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ServiceResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ServiceResource create(Context context);
        }
        /** The stage of the ServiceResource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location It will be deprecated in New API, resource location depends on the parent resource.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location It will be deprecated in New API, resource location depends on the parent resource.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the ServiceResource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Azure resource tags..
             *
             * @param tags Azure resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ServiceResource definition allowing to specify placementConstraints. */
        interface WithPlacementConstraints {
            /**
             * Specifies the placementConstraints property: The placement constraints as a string. Placement constraints
             * are boolean expressions on node properties and allow for restricting a service to particular nodes based
             * on the service requirements. For example, to place a service on nodes where NodeType is blue specify the
             * following: "NodeColor == blue)"..
             *
             * @param placementConstraints The placement constraints as a string. Placement constraints are boolean
             *     expressions on node properties and allow for restricting a service to particular nodes based on the
             *     service requirements. For example, to place a service on nodes where NodeType is blue specify the
             *     following: "NodeColor == blue)".
             * @return the next definition stage.
             */
            WithCreate withPlacementConstraints(String placementConstraints);
        }
        /** The stage of the ServiceResource definition allowing to specify correlationScheme. */
        interface WithCorrelationScheme {
            /**
             * Specifies the correlationScheme property: A list that describes the correlation of the service with other
             * services..
             *
             * @param correlationScheme A list that describes the correlation of the service with other services.
             * @return the next definition stage.
             */
            WithCreate withCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme);
        }
        /** The stage of the ServiceResource definition allowing to specify serviceLoadMetrics. */
        interface WithServiceLoadMetrics {
            /**
             * Specifies the serviceLoadMetrics property: The service load metrics is given as an array of
             * ServiceLoadMetricDescription objects..
             *
             * @param serviceLoadMetrics The service load metrics is given as an array of ServiceLoadMetricDescription
             *     objects.
             * @return the next definition stage.
             */
            WithCreate withServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics);
        }
        /** The stage of the ServiceResource definition allowing to specify servicePlacementPolicies. */
        interface WithServicePlacementPolicies {
            /**
             * Specifies the servicePlacementPolicies property: A list that describes the correlation of the service
             * with other services..
             *
             * @param servicePlacementPolicies A list that describes the correlation of the service with other services.
             * @return the next definition stage.
             */
            WithCreate withServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies);
        }
        /** The stage of the ServiceResource definition allowing to specify defaultMoveCost. */
        interface WithDefaultMoveCost {
            /**
             * Specifies the defaultMoveCost property: Specifies the move cost for the service..
             *
             * @param defaultMoveCost Specifies the move cost for the service.
             * @return the next definition stage.
             */
            WithCreate withDefaultMoveCost(MoveCost defaultMoveCost);
        }
        /** The stage of the ServiceResource definition allowing to specify serviceTypeName. */
        interface WithServiceTypeName {
            /**
             * Specifies the serviceTypeName property: The name of the service type.
             *
             * @param serviceTypeName The name of the service type.
             * @return the next definition stage.
             */
            WithCreate withServiceTypeName(String serviceTypeName);
        }
        /** The stage of the ServiceResource definition allowing to specify partitionDescription. */
        interface WithPartitionDescription {
            /**
             * Specifies the partitionDescription property: Describes how the service is partitioned..
             *
             * @param partitionDescription Describes how the service is partitioned.
             * @return the next definition stage.
             */
            WithCreate withPartitionDescription(PartitionSchemeDescription partitionDescription);
        }
        /** The stage of the ServiceResource definition allowing to specify servicePackageActivationMode. */
        interface WithServicePackageActivationMode {
            /**
             * Specifies the servicePackageActivationMode property: The activation Mode of the service package.
             *
             * @param servicePackageActivationMode The activation Mode of the service package.
             * @return the next definition stage.
             */
            WithCreate withServicePackageActivationMode(ArmServicePackageActivationMode servicePackageActivationMode);
        }
    }
    /**
     * Begins update for the ServiceResource resource.
     *
     * @return the stage of resource update.
     */
    ServiceResource.Update update();

    /** The template for ServiceResource update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithPlacementConstraints,
            UpdateStages.WithCorrelationScheme,
            UpdateStages.WithServiceLoadMetrics,
            UpdateStages.WithServicePlacementPolicies,
            UpdateStages.WithDefaultMoveCost {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ServiceResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ServiceResource apply(Context context);
    }
    /** The ServiceResource update stages. */
    interface UpdateStages {
        /** The stage of the ServiceResource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Azure resource tags..
             *
             * @param tags Azure resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the ServiceResource update allowing to specify placementConstraints. */
        interface WithPlacementConstraints {
            /**
             * Specifies the placementConstraints property: The placement constraints as a string. Placement constraints
             * are boolean expressions on node properties and allow for restricting a service to particular nodes based
             * on the service requirements. For example, to place a service on nodes where NodeType is blue specify the
             * following: "NodeColor == blue)"..
             *
             * @param placementConstraints The placement constraints as a string. Placement constraints are boolean
             *     expressions on node properties and allow for restricting a service to particular nodes based on the
             *     service requirements. For example, to place a service on nodes where NodeType is blue specify the
             *     following: "NodeColor == blue)".
             * @return the next definition stage.
             */
            Update withPlacementConstraints(String placementConstraints);
        }
        /** The stage of the ServiceResource update allowing to specify correlationScheme. */
        interface WithCorrelationScheme {
            /**
             * Specifies the correlationScheme property: A list that describes the correlation of the service with other
             * services..
             *
             * @param correlationScheme A list that describes the correlation of the service with other services.
             * @return the next definition stage.
             */
            Update withCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme);
        }
        /** The stage of the ServiceResource update allowing to specify serviceLoadMetrics. */
        interface WithServiceLoadMetrics {
            /**
             * Specifies the serviceLoadMetrics property: The service load metrics is given as an array of
             * ServiceLoadMetricDescription objects..
             *
             * @param serviceLoadMetrics The service load metrics is given as an array of ServiceLoadMetricDescription
             *     objects.
             * @return the next definition stage.
             */
            Update withServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics);
        }
        /** The stage of the ServiceResource update allowing to specify servicePlacementPolicies. */
        interface WithServicePlacementPolicies {
            /**
             * Specifies the servicePlacementPolicies property: A list that describes the correlation of the service
             * with other services..
             *
             * @param servicePlacementPolicies A list that describes the correlation of the service with other services.
             * @return the next definition stage.
             */
            Update withServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies);
        }
        /** The stage of the ServiceResource update allowing to specify defaultMoveCost. */
        interface WithDefaultMoveCost {
            /**
             * Specifies the defaultMoveCost property: Specifies the move cost for the service..
             *
             * @param defaultMoveCost Specifies the move cost for the service.
             * @return the next definition stage.
             */
            Update withDefaultMoveCost(MoveCost defaultMoveCost);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ServiceResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ServiceResource refresh(Context context);
}
