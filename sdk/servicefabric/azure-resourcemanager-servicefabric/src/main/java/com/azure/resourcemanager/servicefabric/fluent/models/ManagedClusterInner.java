// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabric.models.AzureActiveDirectory;
import com.azure.resourcemanager.servicefabric.models.ClientCertificate;
import com.azure.resourcemanager.servicefabric.models.ClusterState;
import com.azure.resourcemanager.servicefabric.models.LoadBalancingRule;
import com.azure.resourcemanager.servicefabric.models.ManagedClusterAddOnFeature;
import com.azure.resourcemanager.servicefabric.models.ManagedResourceProvisioningState;
import com.azure.resourcemanager.servicefabric.models.SettingsSectionDescription;
import com.azure.resourcemanager.servicefabric.models.Sku;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The manged cluster resource. */
@JsonFlatten
@Fluent
public class ManagedClusterInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedClusterInner.class);

    /*
     * The sku of the managed cluster
     */
    @JsonProperty(value = "sku")
    private Sku sku;

    /*
     * The cluster dns name.
     */
    @JsonProperty(value = "properties.dnsName")
    private String dnsName;

    /*
     * the cluster Fully qualified domain name.
     */
    @JsonProperty(value = "properties.fqdn", access = JsonProperty.Access.WRITE_ONLY)
    private String fqdn;

    /*
     * A service generated unique identifier for the cluster resource.
     */
    @JsonProperty(value = "properties.clusterId", access = JsonProperty.Access.WRITE_ONLY)
    private String clusterId;

    /*
     * The current state of the cluster.
     */
    @JsonProperty(value = "properties.clusterState", access = JsonProperty.Access.WRITE_ONLY)
    private ClusterState clusterState;

    /*
     * The cluster certificate thumbprint used node to node communication.
     */
    @JsonProperty(value = "properties.clusterCertificateThumbprint", access = JsonProperty.Access.WRITE_ONLY)
    private String clusterCertificateThumbprint;

    /*
     * The port used for client connections to the cluster.
     */
    @JsonProperty(value = "properties.clientConnectionPort")
    private Integer clientConnectionPort;

    /*
     * The port used for http connections to the cluster.
     */
    @JsonProperty(value = "properties.httpGatewayConnectionPort")
    private Integer httpGatewayConnectionPort;

    /*
     * vm admin user name.
     */
    @JsonProperty(value = "properties.adminUserName")
    private String adminUsername;

    /*
     * vm admin user password.
     */
    @JsonProperty(value = "properties.adminPassword")
    private String adminPassword;

    /*
     * Describes load balancing rules.
     */
    @JsonProperty(value = "properties.loadBalancingRules")
    private List<LoadBalancingRule> loadBalancingRules;

    /*
     * client certificates for the cluster.
     */
    @JsonProperty(value = "properties.clients")
    private List<ClientCertificate> clients;

    /*
     * Azure active directory.
     */
    @JsonProperty(value = "properties.azureActiveDirectory")
    private AzureActiveDirectory azureActiveDirectory;

    /*
     * The list of custom fabric settings to configure the cluster.
     */
    @JsonProperty(value = "properties.fabricSettings")
    private List<SettingsSectionDescription> fabricSettings;

    /*
     * The provisioning state of the managed cluster resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ManagedResourceProvisioningState provisioningState;

    /*
     * The Service Fabric runtime version of the cluster. This property can
     * only by set the user when **upgradeMode** is set to 'Manual'. To get
     * list of available Service Fabric versions for new clusters use
     * [ClusterVersion API](./ClusterVersion.md). To get the list of available
     * version for existing clusters use **availableClusterVersions**.
     */
    @JsonProperty(value = "properties.clusterCodeVersion")
    private String clusterCodeVersion;

    /*
     * client certificates for the cluster.
     */
    @JsonProperty(value = "properties.addonFeatures")
    private List<ManagedClusterAddOnFeature> addonFeatures;

    /*
     * Azure resource etag.
     */
    @JsonProperty(value = "etag", access = JsonProperty.Access.WRITE_ONLY)
    private String etag;

    /**
     * Get the sku property: The sku of the managed cluster.
     *
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The sku of the managed cluster.
     *
     * @param sku the sku value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the dnsName property: The cluster dns name.
     *
     * @return the dnsName value.
     */
    public String dnsName() {
        return this.dnsName;
    }

    /**
     * Set the dnsName property: The cluster dns name.
     *
     * @param dnsName the dnsName value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withDnsName(String dnsName) {
        this.dnsName = dnsName;
        return this;
    }

    /**
     * Get the fqdn property: the cluster Fully qualified domain name.
     *
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the clusterId property: A service generated unique identifier for the cluster resource.
     *
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Get the clusterState property: The current state of the cluster.
     *
     * @return the clusterState value.
     */
    public ClusterState clusterState() {
        return this.clusterState;
    }

    /**
     * Get the clusterCertificateThumbprint property: The cluster certificate thumbprint used node to node
     * communication.
     *
     * @return the clusterCertificateThumbprint value.
     */
    public String clusterCertificateThumbprint() {
        return this.clusterCertificateThumbprint;
    }

    /**
     * Get the clientConnectionPort property: The port used for client connections to the cluster.
     *
     * @return the clientConnectionPort value.
     */
    public Integer clientConnectionPort() {
        return this.clientConnectionPort;
    }

    /**
     * Set the clientConnectionPort property: The port used for client connections to the cluster.
     *
     * @param clientConnectionPort the clientConnectionPort value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withClientConnectionPort(Integer clientConnectionPort) {
        this.clientConnectionPort = clientConnectionPort;
        return this;
    }

    /**
     * Get the httpGatewayConnectionPort property: The port used for http connections to the cluster.
     *
     * @return the httpGatewayConnectionPort value.
     */
    public Integer httpGatewayConnectionPort() {
        return this.httpGatewayConnectionPort;
    }

    /**
     * Set the httpGatewayConnectionPort property: The port used for http connections to the cluster.
     *
     * @param httpGatewayConnectionPort the httpGatewayConnectionPort value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withHttpGatewayConnectionPort(Integer httpGatewayConnectionPort) {
        this.httpGatewayConnectionPort = httpGatewayConnectionPort;
        return this;
    }

    /**
     * Get the adminUsername property: vm admin user name.
     *
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Set the adminUsername property: vm admin user name.
     *
     * @param adminUsername the adminUsername value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
        return this;
    }

    /**
     * Get the adminPassword property: vm admin user password.
     *
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: vm admin user password.
     *
     * @param adminPassword the adminPassword value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the loadBalancingRules property: Describes load balancing rules.
     *
     * @return the loadBalancingRules value.
     */
    public List<LoadBalancingRule> loadBalancingRules() {
        return this.loadBalancingRules;
    }

    /**
     * Set the loadBalancingRules property: Describes load balancing rules.
     *
     * @param loadBalancingRules the loadBalancingRules value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withLoadBalancingRules(List<LoadBalancingRule> loadBalancingRules) {
        this.loadBalancingRules = loadBalancingRules;
        return this;
    }

    /**
     * Get the clients property: client certificates for the cluster.
     *
     * @return the clients value.
     */
    public List<ClientCertificate> clients() {
        return this.clients;
    }

    /**
     * Set the clients property: client certificates for the cluster.
     *
     * @param clients the clients value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withClients(List<ClientCertificate> clients) {
        this.clients = clients;
        return this;
    }

    /**
     * Get the azureActiveDirectory property: Azure active directory.
     *
     * @return the azureActiveDirectory value.
     */
    public AzureActiveDirectory azureActiveDirectory() {
        return this.azureActiveDirectory;
    }

    /**
     * Set the azureActiveDirectory property: Azure active directory.
     *
     * @param azureActiveDirectory the azureActiveDirectory value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withAzureActiveDirectory(AzureActiveDirectory azureActiveDirectory) {
        this.azureActiveDirectory = azureActiveDirectory;
        return this;
    }

    /**
     * Get the fabricSettings property: The list of custom fabric settings to configure the cluster.
     *
     * @return the fabricSettings value.
     */
    public List<SettingsSectionDescription> fabricSettings() {
        return this.fabricSettings;
    }

    /**
     * Set the fabricSettings property: The list of custom fabric settings to configure the cluster.
     *
     * @param fabricSettings the fabricSettings value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withFabricSettings(List<SettingsSectionDescription> fabricSettings) {
        this.fabricSettings = fabricSettings;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the managed cluster resource.
     *
     * @return the provisioningState value.
     */
    public ManagedResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the clusterCodeVersion property: The Service Fabric runtime version of the cluster. This property can only by
     * set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new
     * clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing
     * clusters use **availableClusterVersions**.
     *
     * @return the clusterCodeVersion value.
     */
    public String clusterCodeVersion() {
        return this.clusterCodeVersion;
    }

    /**
     * Set the clusterCodeVersion property: The Service Fabric runtime version of the cluster. This property can only by
     * set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new
     * clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing
     * clusters use **availableClusterVersions**.
     *
     * @param clusterCodeVersion the clusterCodeVersion value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withClusterCodeVersion(String clusterCodeVersion) {
        this.clusterCodeVersion = clusterCodeVersion;
        return this;
    }

    /**
     * Get the addonFeatures property: client certificates for the cluster.
     *
     * @return the addonFeatures value.
     */
    public List<ManagedClusterAddOnFeature> addonFeatures() {
        return this.addonFeatures;
    }

    /**
     * Set the addonFeatures property: client certificates for the cluster.
     *
     * @param addonFeatures the addonFeatures value to set.
     * @return the ManagedClusterInner object itself.
     */
    public ManagedClusterInner withAddonFeatures(List<ManagedClusterAddOnFeature> addonFeatures) {
        this.addonFeatures = addonFeatures;
        return this;
    }

    /**
     * Get the etag property: Azure resource etag.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedClusterInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ManagedClusterInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (loadBalancingRules() != null) {
            loadBalancingRules().forEach(e -> e.validate());
        }
        if (clients() != null) {
            clients().forEach(e -> e.validate());
        }
        if (azureActiveDirectory() != null) {
            azureActiveDirectory().validate();
        }
        if (fabricSettings() != null) {
            fabricSettings().forEach(e -> e.validate());
        }
    }
}
