// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes a load balancing rule. */
@Fluent
public final class LoadBalancingRule {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LoadBalancingRule.class);

    /*
     * The port for the external endpoint. Port numbers for each rule must be
     * unique within the Load Balancer. Acceptable values are between 1 and
     * 65534.
     */
    @JsonProperty(value = "frontendPort", required = true)
    private int frontendPort;

    /*
     * The port used for internal connections on the endpoint. Acceptable
     * values are between 1 and 65535.
     */
    @JsonProperty(value = "backendPort", required = true)
    private int backendPort;

    /*
     * The reference to the transport protocol used by the load balancing rule.
     */
    @JsonProperty(value = "protocol", required = true)
    private Protocol protocol;

    /*
     * the reference to the load balancer probe used by the load balancing
     * rule.
     */
    @JsonProperty(value = "probeProtocol", required = true)
    private ProbeProtocol probeProtocol;

    /*
     * The probe request path. Only supported for HTTP/HTTPS probes.
     */
    @JsonProperty(value = "probeRequestPath")
    private String probeRequestPath;

    /**
     * Get the frontendPort property: The port for the external endpoint. Port numbers for each rule must be unique
     * within the Load Balancer. Acceptable values are between 1 and 65534.
     *
     * @return the frontendPort value.
     */
    public int frontendPort() {
        return this.frontendPort;
    }

    /**
     * Set the frontendPort property: The port for the external endpoint. Port numbers for each rule must be unique
     * within the Load Balancer. Acceptable values are between 1 and 65534.
     *
     * @param frontendPort the frontendPort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withFrontendPort(int frontendPort) {
        this.frontendPort = frontendPort;
        return this;
    }

    /**
     * Get the backendPort property: The port used for internal connections on the endpoint. Acceptable values are
     * between 1 and 65535.
     *
     * @return the backendPort value.
     */
    public int backendPort() {
        return this.backendPort;
    }

    /**
     * Set the backendPort property: The port used for internal connections on the endpoint. Acceptable values are
     * between 1 and 65535.
     *
     * @param backendPort the backendPort value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withBackendPort(int backendPort) {
        this.backendPort = backendPort;
        return this;
    }

    /**
     * Get the protocol property: The reference to the transport protocol used by the load balancing rule.
     *
     * @return the protocol value.
     */
    public Protocol protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The reference to the transport protocol used by the load balancing rule.
     *
     * @param protocol the protocol value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProtocol(Protocol protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the probeProtocol property: the reference to the load balancer probe used by the load balancing rule.
     *
     * @return the probeProtocol value.
     */
    public ProbeProtocol probeProtocol() {
        return this.probeProtocol;
    }

    /**
     * Set the probeProtocol property: the reference to the load balancer probe used by the load balancing rule.
     *
     * @param probeProtocol the probeProtocol value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProbeProtocol(ProbeProtocol probeProtocol) {
        this.probeProtocol = probeProtocol;
        return this;
    }

    /**
     * Get the probeRequestPath property: The probe request path. Only supported for HTTP/HTTPS probes.
     *
     * @return the probeRequestPath value.
     */
    public String probeRequestPath() {
        return this.probeRequestPath;
    }

    /**
     * Set the probeRequestPath property: The probe request path. Only supported for HTTP/HTTPS probes.
     *
     * @param probeRequestPath the probeRequestPath value to set.
     * @return the LoadBalancingRule object itself.
     */
    public LoadBalancingRule withProbeRequestPath(String probeRequestPath) {
        this.probeRequestPath = probeRequestPath;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (protocol() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property protocol in model LoadBalancingRule"));
        }
        if (probeProtocol() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property probeProtocol in model LoadBalancingRule"));
        }
    }
}
