// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.
 */
@Fluent
public final class ArmServiceTypeHealthPolicy implements JsonSerializable<ArmServiceTypeHealthPolicy> {
    /*
     * The maximum percentage of services allowed to be unhealthy before your application is considered in error.
     */
    private Integer maxPercentUnhealthyServices;

    /*
     * The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in
     * error.
     */
    private Integer maxPercentUnhealthyPartitionsPerService;

    /*
     * The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in
     * error.
     */
    private Integer maxPercentUnhealthyReplicasPerPartition;

    /**
     * Creates an instance of ArmServiceTypeHealthPolicy class.
     */
    public ArmServiceTypeHealthPolicy() {
    }

    /**
     * Get the maxPercentUnhealthyServices property: The maximum percentage of services allowed to be unhealthy before
     * your application is considered in error.
     * 
     * @return the maxPercentUnhealthyServices value.
     */
    public Integer maxPercentUnhealthyServices() {
        return this.maxPercentUnhealthyServices;
    }

    /**
     * Set the maxPercentUnhealthyServices property: The maximum percentage of services allowed to be unhealthy before
     * your application is considered in error.
     * 
     * @param maxPercentUnhealthyServices the maxPercentUnhealthyServices value to set.
     * @return the ArmServiceTypeHealthPolicy object itself.
     */
    public ArmServiceTypeHealthPolicy withMaxPercentUnhealthyServices(Integer maxPercentUnhealthyServices) {
        this.maxPercentUnhealthyServices = maxPercentUnhealthyServices;
        return this;
    }

    /**
     * Get the maxPercentUnhealthyPartitionsPerService property: The maximum percentage of partitions per service
     * allowed to be unhealthy before your application is considered in error.
     * 
     * @return the maxPercentUnhealthyPartitionsPerService value.
     */
    public Integer maxPercentUnhealthyPartitionsPerService() {
        return this.maxPercentUnhealthyPartitionsPerService;
    }

    /**
     * Set the maxPercentUnhealthyPartitionsPerService property: The maximum percentage of partitions per service
     * allowed to be unhealthy before your application is considered in error.
     * 
     * @param maxPercentUnhealthyPartitionsPerService the maxPercentUnhealthyPartitionsPerService value to set.
     * @return the ArmServiceTypeHealthPolicy object itself.
     */
    public ArmServiceTypeHealthPolicy
        withMaxPercentUnhealthyPartitionsPerService(Integer maxPercentUnhealthyPartitionsPerService) {
        this.maxPercentUnhealthyPartitionsPerService = maxPercentUnhealthyPartitionsPerService;
        return this;
    }

    /**
     * Get the maxPercentUnhealthyReplicasPerPartition property: The maximum percentage of replicas per partition
     * allowed to be unhealthy before your application is considered in error.
     * 
     * @return the maxPercentUnhealthyReplicasPerPartition value.
     */
    public Integer maxPercentUnhealthyReplicasPerPartition() {
        return this.maxPercentUnhealthyReplicasPerPartition;
    }

    /**
     * Set the maxPercentUnhealthyReplicasPerPartition property: The maximum percentage of replicas per partition
     * allowed to be unhealthy before your application is considered in error.
     * 
     * @param maxPercentUnhealthyReplicasPerPartition the maxPercentUnhealthyReplicasPerPartition value to set.
     * @return the ArmServiceTypeHealthPolicy object itself.
     */
    public ArmServiceTypeHealthPolicy
        withMaxPercentUnhealthyReplicasPerPartition(Integer maxPercentUnhealthyReplicasPerPartition) {
        this.maxPercentUnhealthyReplicasPerPartition = maxPercentUnhealthyReplicasPerPartition;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxPercentUnhealthyServices", this.maxPercentUnhealthyServices);
        jsonWriter.writeNumberField("maxPercentUnhealthyPartitionsPerService",
            this.maxPercentUnhealthyPartitionsPerService);
        jsonWriter.writeNumberField("maxPercentUnhealthyReplicasPerPartition",
            this.maxPercentUnhealthyReplicasPerPartition);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArmServiceTypeHealthPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArmServiceTypeHealthPolicy if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArmServiceTypeHealthPolicy.
     */
    public static ArmServiceTypeHealthPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArmServiceTypeHealthPolicy deserializedArmServiceTypeHealthPolicy = new ArmServiceTypeHealthPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxPercentUnhealthyServices".equals(fieldName)) {
                    deserializedArmServiceTypeHealthPolicy.maxPercentUnhealthyServices
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxPercentUnhealthyPartitionsPerService".equals(fieldName)) {
                    deserializedArmServiceTypeHealthPolicy.maxPercentUnhealthyPartitionsPerService
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxPercentUnhealthyReplicasPerPartition".equals(fieldName)) {
                    deserializedArmServiceTypeHealthPolicy.maxPercentUnhealthyReplicasPerPartition
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArmServiceTypeHealthPolicy;
        });
    }
}
