// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabric.ServiceFabricManager;
import com.azure.resourcemanager.servicefabric.fluent.NodeTypesClient;
import com.azure.resourcemanager.servicefabric.fluent.models.NodeTypeInner;
import com.azure.resourcemanager.servicefabric.models.NodeType;
import com.azure.resourcemanager.servicefabric.models.NodeTypeActionParameters;
import com.azure.resourcemanager.servicefabric.models.NodeTypes;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class NodeTypesImpl implements NodeTypes {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NodeTypesImpl.class);

    private final NodeTypesClient innerClient;

    private final ServiceFabricManager serviceManager;

    public NodeTypesImpl(NodeTypesClient innerClient, ServiceFabricManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<NodeType> listByManagedClusters(String resourceGroupName, String clusterName) {
        PagedIterable<NodeTypeInner> inner = this.serviceClient().listByManagedClusters(resourceGroupName, clusterName);
        return inner.mapPage(inner1 -> new NodeTypeImpl(inner1, this.manager()));
    }

    public PagedIterable<NodeType> listByManagedClusters(
        String resourceGroupName, String clusterName, Context context) {
        PagedIterable<NodeTypeInner> inner =
            this.serviceClient().listByManagedClusters(resourceGroupName, clusterName, context);
        return inner.mapPage(inner1 -> new NodeTypeImpl(inner1, this.manager()));
    }

    public void restart(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        this.serviceClient().restart(resourceGroupName, clusterName, nodeTypeName, parameters);
    }

    public void restart(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        this.serviceClient().restart(resourceGroupName, clusterName, nodeTypeName, parameters, context);
    }

    public void reimage(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        this.serviceClient().reimage(resourceGroupName, clusterName, nodeTypeName, parameters);
    }

    public void reimage(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        this.serviceClient().reimage(resourceGroupName, clusterName, nodeTypeName, parameters, context);
    }

    public void deleteNode(
        String resourceGroupName, String clusterName, String nodeTypeName, NodeTypeActionParameters parameters) {
        this.serviceClient().deleteNode(resourceGroupName, clusterName, nodeTypeName, parameters);
    }

    public void deleteNode(
        String resourceGroupName,
        String clusterName,
        String nodeTypeName,
        NodeTypeActionParameters parameters,
        Context context) {
        this.serviceClient().deleteNode(resourceGroupName, clusterName, nodeTypeName, parameters, context);
    }

    public NodeType get(String resourceGroupName, String clusterName, String nodeTypeName) {
        NodeTypeInner inner = this.serviceClient().get(resourceGroupName, clusterName, nodeTypeName);
        if (inner != null) {
            return new NodeTypeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NodeType> getWithResponse(
        String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        Response<NodeTypeInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, clusterName, nodeTypeName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NodeTypeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String clusterName, String nodeTypeName) {
        this.serviceClient().delete(resourceGroupName, clusterName, nodeTypeName);
    }

    public void delete(String resourceGroupName, String clusterName, String nodeTypeName, Context context) {
        this.serviceClient().delete(resourceGroupName, clusterName, nodeTypeName, context);
    }

    public NodeType getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "managedClusters");
        if (clusterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String nodeTypeName = Utils.getValueFromIdByName(id, "nodeTypes");
        if (nodeTypeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'nodeTypes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, nodeTypeName, Context.NONE).getValue();
    }

    public Response<NodeType> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "managedClusters");
        if (clusterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String nodeTypeName = Utils.getValueFromIdByName(id, "nodeTypes");
        if (nodeTypeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'nodeTypes'.", id)));
        }
        return this.getWithResponse(resourceGroupName, clusterName, nodeTypeName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "managedClusters");
        if (clusterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String nodeTypeName = Utils.getValueFromIdByName(id, "nodeTypes");
        if (nodeTypeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'nodeTypes'.", id)));
        }
        this.delete(resourceGroupName, clusterName, nodeTypeName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String clusterName = Utils.getValueFromIdByName(id, "managedClusters");
        if (clusterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedClusters'.", id)));
        }
        String nodeTypeName = Utils.getValueFromIdByName(id, "nodeTypes");
        if (nodeTypeName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'nodeTypes'.", id)));
        }
        this.delete(resourceGroupName, clusterName, nodeTypeName, context);
    }

    private NodeTypesClient serviceClient() {
        return this.innerClient;
    }

    private ServiceFabricManager manager() {
        return this.serviceManager;
    }

    public NodeTypeImpl define(String name) {
        return new NodeTypeImpl(name, this.manager());
    }
}
