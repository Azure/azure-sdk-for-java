// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabric.models.EndpointRangeDescription;
import com.azure.resourcemanager.servicefabric.models.ManagedProxyResource;
import com.azure.resourcemanager.servicefabric.models.ManagedResourceProvisioningState;
import com.azure.resourcemanager.servicefabric.models.VaultSecretGroup;
import com.azure.resourcemanager.servicefabric.models.VmssExtension;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Describes a node type in the cluster, each node type represents sub set of nodes in the cluster. */
@JsonFlatten
@Fluent
public class NodeTypeInner extends ManagedProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NodeTypeInner.class);

    /*
     * The node type on which system services will run. Only one node type
     * should be marked as primary. Primary node type cannot be deleted or
     * changed for existing clusters.
     */
    @JsonProperty(value = "properties.isPrimary")
    private Boolean isPrimary;

    /*
     * The number of nodes in the node type.
     */
    @JsonProperty(value = "properties.vmInstanceCount")
    private Integer vmInstanceCount;

    /*
     * Disk size for each vm in the node type in GBs.
     */
    @JsonProperty(value = "properties.dataDiskSizeGB")
    private Integer dataDiskSizeGB;

    /*
     * The placement tags applied to nodes in the node type, which can be used
     * to indicate where certain services (workload) should run.
     */
    @JsonProperty(value = "properties.placementProperties")
    private Map<String, String> placementProperties;

    /*
     * The capacity tags applied to the nodes in the node type, the cluster
     * resource manager uses these tags to understand how much resource a node
     * has.
     */
    @JsonProperty(value = "properties.capacities")
    private Map<String, String> capacities;

    /*
     * The range of ports from which cluster assigned port to Service Fabric
     * applications.
     */
    @JsonProperty(value = "properties.applicationPorts")
    private EndpointRangeDescription applicationPorts;

    /*
     * The range of ephemeral ports that nodes in this node type should be
     * configured with.
     */
    @JsonProperty(value = "properties.ephemeralPorts")
    private EndpointRangeDescription ephemeralPorts;

    /*
     * The size of virtual machines in the pool. All virtual machines in a pool
     * are the same size. For example, Standard_D3.
     */
    @JsonProperty(value = "properties.vmSize")
    private String vmSize;

    /*
     * The publisher of the Azure Virtual Machines Marketplace image. For
     * example, Canonical or MicrosoftWindowsServer.
     */
    @JsonProperty(value = "properties.vmImagePublisher")
    private String vmImagePublisher;

    /*
     * The offer type of the Azure Virtual Machines Marketplace image. For
     * example, UbuntuServer or WindowsServer.
     */
    @JsonProperty(value = "properties.vmImageOffer")
    private String vmImageOffer;

    /*
     * The SKU of the Azure Virtual Machines Marketplace image. For example,
     * 14.04.0-LTS or 2012-R2-Datacenter.
     */
    @JsonProperty(value = "properties.vmImageSku")
    private String vmImageSku;

    /*
     * The version of the Azure Virtual Machines Marketplace image. A value of
     * 'latest' can be specified to select the latest version of an image. If
     * omitted, the default is 'latest'.
     */
    @JsonProperty(value = "properties.vmImageVersion")
    private String vmImageVersion;

    /*
     * The secrets to install in the virtual machines.
     */
    @JsonProperty(value = "properties.vmSecrets")
    private List<VaultSecretGroup> vmSecrets;

    /*
     * Set of extensions that should be installed onto the virtual machines.
     */
    @JsonProperty(value = "properties.vmExtensions")
    private List<VmssExtension> vmExtensions;

    /*
     * The provisioning state of the managed cluster resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ManagedResourceProvisioningState provisioningState;

    /**
     * Get the isPrimary property: The node type on which system services will run. Only one node type should be marked
     * as primary. Primary node type cannot be deleted or changed for existing clusters.
     *
     * @return the isPrimary value.
     */
    public Boolean isPrimary() {
        return this.isPrimary;
    }

    /**
     * Set the isPrimary property: The node type on which system services will run. Only one node type should be marked
     * as primary. Primary node type cannot be deleted or changed for existing clusters.
     *
     * @param isPrimary the isPrimary value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withIsPrimary(Boolean isPrimary) {
        this.isPrimary = isPrimary;
        return this;
    }

    /**
     * Get the vmInstanceCount property: The number of nodes in the node type.
     *
     * @return the vmInstanceCount value.
     */
    public Integer vmInstanceCount() {
        return this.vmInstanceCount;
    }

    /**
     * Set the vmInstanceCount property: The number of nodes in the node type.
     *
     * @param vmInstanceCount the vmInstanceCount value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmInstanceCount(Integer vmInstanceCount) {
        this.vmInstanceCount = vmInstanceCount;
        return this;
    }

    /**
     * Get the dataDiskSizeGB property: Disk size for each vm in the node type in GBs.
     *
     * @return the dataDiskSizeGB value.
     */
    public Integer dataDiskSizeGB() {
        return this.dataDiskSizeGB;
    }

    /**
     * Set the dataDiskSizeGB property: Disk size for each vm in the node type in GBs.
     *
     * @param dataDiskSizeGB the dataDiskSizeGB value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withDataDiskSizeGB(Integer dataDiskSizeGB) {
        this.dataDiskSizeGB = dataDiskSizeGB;
        return this;
    }

    /**
     * Get the placementProperties property: The placement tags applied to nodes in the node type, which can be used to
     * indicate where certain services (workload) should run.
     *
     * @return the placementProperties value.
     */
    public Map<String, String> placementProperties() {
        return this.placementProperties;
    }

    /**
     * Set the placementProperties property: The placement tags applied to nodes in the node type, which can be used to
     * indicate where certain services (workload) should run.
     *
     * @param placementProperties the placementProperties value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withPlacementProperties(Map<String, String> placementProperties) {
        this.placementProperties = placementProperties;
        return this;
    }

    /**
     * Get the capacities property: The capacity tags applied to the nodes in the node type, the cluster resource
     * manager uses these tags to understand how much resource a node has.
     *
     * @return the capacities value.
     */
    public Map<String, String> capacities() {
        return this.capacities;
    }

    /**
     * Set the capacities property: The capacity tags applied to the nodes in the node type, the cluster resource
     * manager uses these tags to understand how much resource a node has.
     *
     * @param capacities the capacities value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withCapacities(Map<String, String> capacities) {
        this.capacities = capacities;
        return this;
    }

    /**
     * Get the applicationPorts property: The range of ports from which cluster assigned port to Service Fabric
     * applications.
     *
     * @return the applicationPorts value.
     */
    public EndpointRangeDescription applicationPorts() {
        return this.applicationPorts;
    }

    /**
     * Set the applicationPorts property: The range of ports from which cluster assigned port to Service Fabric
     * applications.
     *
     * @param applicationPorts the applicationPorts value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withApplicationPorts(EndpointRangeDescription applicationPorts) {
        this.applicationPorts = applicationPorts;
        return this;
    }

    /**
     * Get the ephemeralPorts property: The range of ephemeral ports that nodes in this node type should be configured
     * with.
     *
     * @return the ephemeralPorts value.
     */
    public EndpointRangeDescription ephemeralPorts() {
        return this.ephemeralPorts;
    }

    /**
     * Set the ephemeralPorts property: The range of ephemeral ports that nodes in this node type should be configured
     * with.
     *
     * @param ephemeralPorts the ephemeralPorts value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withEphemeralPorts(EndpointRangeDescription ephemeralPorts) {
        this.ephemeralPorts = ephemeralPorts;
        return this;
    }

    /**
     * Get the vmSize property: The size of virtual machines in the pool. All virtual machines in a pool are the same
     * size. For example, Standard_D3.
     *
     * @return the vmSize value.
     */
    public String vmSize() {
        return this.vmSize;
    }

    /**
     * Set the vmSize property: The size of virtual machines in the pool. All virtual machines in a pool are the same
     * size. For example, Standard_D3.
     *
     * @param vmSize the vmSize value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmSize(String vmSize) {
        this.vmSize = vmSize;
        return this;
    }

    /**
     * Get the vmImagePublisher property: The publisher of the Azure Virtual Machines Marketplace image. For example,
     * Canonical or MicrosoftWindowsServer.
     *
     * @return the vmImagePublisher value.
     */
    public String vmImagePublisher() {
        return this.vmImagePublisher;
    }

    /**
     * Set the vmImagePublisher property: The publisher of the Azure Virtual Machines Marketplace image. For example,
     * Canonical or MicrosoftWindowsServer.
     *
     * @param vmImagePublisher the vmImagePublisher value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmImagePublisher(String vmImagePublisher) {
        this.vmImagePublisher = vmImagePublisher;
        return this;
    }

    /**
     * Get the vmImageOffer property: The offer type of the Azure Virtual Machines Marketplace image. For example,
     * UbuntuServer or WindowsServer.
     *
     * @return the vmImageOffer value.
     */
    public String vmImageOffer() {
        return this.vmImageOffer;
    }

    /**
     * Set the vmImageOffer property: The offer type of the Azure Virtual Machines Marketplace image. For example,
     * UbuntuServer or WindowsServer.
     *
     * @param vmImageOffer the vmImageOffer value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmImageOffer(String vmImageOffer) {
        this.vmImageOffer = vmImageOffer;
        return this;
    }

    /**
     * Get the vmImageSku property: The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or
     * 2012-R2-Datacenter.
     *
     * @return the vmImageSku value.
     */
    public String vmImageSku() {
        return this.vmImageSku;
    }

    /**
     * Set the vmImageSku property: The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or
     * 2012-R2-Datacenter.
     *
     * @param vmImageSku the vmImageSku value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmImageSku(String vmImageSku) {
        this.vmImageSku = vmImageSku;
        return this;
    }

    /**
     * Get the vmImageVersion property: The version of the Azure Virtual Machines Marketplace image. A value of 'latest'
     * can be specified to select the latest version of an image. If omitted, the default is 'latest'.
     *
     * @return the vmImageVersion value.
     */
    public String vmImageVersion() {
        return this.vmImageVersion;
    }

    /**
     * Set the vmImageVersion property: The version of the Azure Virtual Machines Marketplace image. A value of 'latest'
     * can be specified to select the latest version of an image. If omitted, the default is 'latest'.
     *
     * @param vmImageVersion the vmImageVersion value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmImageVersion(String vmImageVersion) {
        this.vmImageVersion = vmImageVersion;
        return this;
    }

    /**
     * Get the vmSecrets property: The secrets to install in the virtual machines.
     *
     * @return the vmSecrets value.
     */
    public List<VaultSecretGroup> vmSecrets() {
        return this.vmSecrets;
    }

    /**
     * Set the vmSecrets property: The secrets to install in the virtual machines.
     *
     * @param vmSecrets the vmSecrets value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmSecrets(List<VaultSecretGroup> vmSecrets) {
        this.vmSecrets = vmSecrets;
        return this;
    }

    /**
     * Get the vmExtensions property: Set of extensions that should be installed onto the virtual machines.
     *
     * @return the vmExtensions value.
     */
    public List<VmssExtension> vmExtensions() {
        return this.vmExtensions;
    }

    /**
     * Set the vmExtensions property: Set of extensions that should be installed onto the virtual machines.
     *
     * @param vmExtensions the vmExtensions value to set.
     * @return the NodeTypeInner object itself.
     */
    public NodeTypeInner withVmExtensions(List<VmssExtension> vmExtensions) {
        this.vmExtensions = vmExtensions;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the managed cluster resource.
     *
     * @return the provisioningState value.
     */
    public ManagedResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public NodeTypeInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (applicationPorts() != null) {
            applicationPorts().validate();
        }
        if (ephemeralPorts() != null) {
            ephemeralPorts().validate();
        }
        if (vmSecrets() != null) {
            vmSecrets().forEach(e -> e.validate());
        }
        if (vmExtensions() != null) {
            vmExtensions().forEach(e -> e.validate());
        }
    }
}
