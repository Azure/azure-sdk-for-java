// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationResourceUpdateProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The application resource for patch operations.
 */
@Fluent
public final class ApplicationResourceUpdate extends ProxyResource {
    /*
     * The application resource properties for patch operations.
     */
    private ApplicationResourceUpdateProperties innerProperties;

    /*
     * It will be deprecated in New API, resource location depends on the parent resource.
     */
    private String location;

    /*
     * Azure resource tags.
     */
    private Map<String, String> tags;

    /*
     * Azure resource etag.
     */
    private String etag;

    /*
     * Metadata pertaining to creation and last modification of the resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ApplicationResourceUpdate class.
     */
    public ApplicationResourceUpdate() {
    }

    /**
     * Get the innerProperties property: The application resource properties for patch operations.
     * 
     * @return the innerProperties value.
     */
    private ApplicationResourceUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the location property: It will be deprecated in New API, resource location depends on the parent resource.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: It will be deprecated in New API, resource location depends on the parent resource.
     * 
     * @param location the location value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: Azure resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Azure resource tags.
     * 
     * @param tags the tags value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the etag property: Azure resource etag.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the systemData property: Metadata pertaining to creation and last modification of the resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the typeVersion property: The version of the application type as defined in the application manifest.
     * 
     * @return the typeVersion value.
     */
    public String typeVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().typeVersion();
    }

    /**
     * Set the typeVersion property: The version of the application type as defined in the application manifest.
     * 
     * @param typeVersion the typeVersion value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withTypeVersion(String typeVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withTypeVersion(typeVersion);
        return this;
    }

    /**
     * Get the parameters property: List of application parameters with overridden values from their default values
     * specified in the application manifest.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.innerProperties() == null ? null : this.innerProperties().parameters();
    }

    /**
     * Set the parameters property: List of application parameters with overridden values from their default values
     * specified in the application manifest.
     * 
     * @param parameters the parameters value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withParameters(Map<String, String> parameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withParameters(parameters);
        return this;
    }

    /**
     * Get the upgradePolicy property: Describes the policy for a monitored application upgrade.
     * 
     * @return the upgradePolicy value.
     */
    public ApplicationUpgradePolicy upgradePolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().upgradePolicy();
    }

    /**
     * Set the upgradePolicy property: Describes the policy for a monitored application upgrade.
     * 
     * @param upgradePolicy the upgradePolicy value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withUpgradePolicy(ApplicationUpgradePolicy upgradePolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withUpgradePolicy(upgradePolicy);
        return this;
    }

    /**
     * Get the minimumNodes property: The minimum number of nodes where Service Fabric will reserve capacity for this
     * application. Note that this does not mean that the services of this application will be placed on all of those
     * nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more
     * than the value of the MaximumNodes property.
     * 
     * @return the minimumNodes value.
     */
    public Long minimumNodes() {
        return this.innerProperties() == null ? null : this.innerProperties().minimumNodes();
    }

    /**
     * Set the minimumNodes property: The minimum number of nodes where Service Fabric will reserve capacity for this
     * application. Note that this does not mean that the services of this application will be placed on all of those
     * nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more
     * than the value of the MaximumNodes property.
     * 
     * @param minimumNodes the minimumNodes value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withMinimumNodes(Long minimumNodes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withMinimumNodes(minimumNodes);
        return this;
    }

    /**
     * Get the maximumNodes property: The maximum number of nodes where Service Fabric will reserve capacity for this
     * application. Note that this does not mean that the services of this application will be placed on all of those
     * nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
     * @return the maximumNodes value.
     */
    public Long maximumNodes() {
        return this.innerProperties() == null ? null : this.innerProperties().maximumNodes();
    }

    /**
     * Set the maximumNodes property: The maximum number of nodes where Service Fabric will reserve capacity for this
     * application. Note that this does not mean that the services of this application will be placed on all of those
     * nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
     * 
     * @param maximumNodes the maximumNodes value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withMaximumNodes(Long maximumNodes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withMaximumNodes(maximumNodes);
        return this;
    }

    /**
     * Get the removeApplicationCapacity property: Remove the current application capacity settings.
     * 
     * @return the removeApplicationCapacity value.
     */
    public Boolean removeApplicationCapacity() {
        return this.innerProperties() == null ? null : this.innerProperties().removeApplicationCapacity();
    }

    /**
     * Set the removeApplicationCapacity property: Remove the current application capacity settings.
     * 
     * @param removeApplicationCapacity the removeApplicationCapacity value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withRemoveApplicationCapacity(Boolean removeApplicationCapacity) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withRemoveApplicationCapacity(removeApplicationCapacity);
        return this;
    }

    /**
     * Get the metrics property: List of application capacity metric description.
     * 
     * @return the metrics value.
     */
    public List<ApplicationMetricDescription> metrics() {
        return this.innerProperties() == null ? null : this.innerProperties().metrics();
    }

    /**
     * Set the metrics property: List of application capacity metric description.
     * 
     * @param metrics the metrics value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withMetrics(List<ApplicationMetricDescription> metrics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withMetrics(metrics);
        return this;
    }

    /**
     * Get the managedIdentities property: List of user assigned identities for the application, each mapped to a
     * friendly name.
     * 
     * @return the managedIdentities value.
     */
    public List<ApplicationUserAssignedIdentity> managedIdentities() {
        return this.innerProperties() == null ? null : this.innerProperties().managedIdentities();
    }

    /**
     * Set the managedIdentities property: List of user assigned identities for the application, each mapped to a
     * friendly name.
     * 
     * @param managedIdentities the managedIdentities value to set.
     * @return the ApplicationResourceUpdate object itself.
     */
    public ApplicationResourceUpdate withManagedIdentities(List<ApplicationUserAssignedIdentity> managedIdentities) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceUpdateProperties();
        }
        this.innerProperties().withManagedIdentities(managedIdentities);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationResourceUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationResourceUpdate if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationResourceUpdate.
     */
    public static ApplicationResourceUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationResourceUpdate deserializedApplicationResourceUpdate = new ApplicationResourceUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.innerProperties
                        = ApplicationResourceUpdateProperties.fromJson(reader);
                } else if ("location".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.location = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedApplicationResourceUpdate.tags = tags;
                } else if ("etag".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.etag = reader.getString();
                } else if ("systemData".equals(fieldName)) {
                    deserializedApplicationResourceUpdate.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationResourceUpdate;
        });
    }
}
