// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The UpgradableVersionsDescription model.
 */
@Fluent
public final class UpgradableVersionsDescription implements JsonSerializable<UpgradableVersionsDescription> {
    /*
     * The target code version.
     */
    private String targetVersion;

    /**
     * Creates an instance of UpgradableVersionsDescription class.
     */
    public UpgradableVersionsDescription() {
    }

    /**
     * Get the targetVersion property: The target code version.
     * 
     * @return the targetVersion value.
     */
    public String targetVersion() {
        return this.targetVersion;
    }

    /**
     * Set the targetVersion property: The target code version.
     * 
     * @param targetVersion the targetVersion value to set.
     * @return the UpgradableVersionsDescription object itself.
     */
    public UpgradableVersionsDescription withTargetVersion(String targetVersion) {
        this.targetVersion = targetVersion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (targetVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetVersion in model UpgradableVersionsDescription"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpgradableVersionsDescription.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetVersion", this.targetVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpgradableVersionsDescription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpgradableVersionsDescription if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpgradableVersionsDescription.
     */
    public static UpgradableVersionsDescription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpgradableVersionsDescription deserializedUpgradableVersionsDescription
                = new UpgradableVersionsDescription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetVersion".equals(fieldName)) {
                    deserializedUpgradableVersionsDescription.targetVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpgradableVersionsDescription;
        });
    }
}
