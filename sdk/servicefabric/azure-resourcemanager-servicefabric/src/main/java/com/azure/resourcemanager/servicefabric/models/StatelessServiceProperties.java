// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a stateless service resource.
 */
@Fluent
public final class StatelessServiceProperties extends ServiceResourceProperties {
    /*
     * The kind of service (Stateless or Stateful).
     */
    private ServiceKind serviceKind = ServiceKind.STATELESS;

    /*
     * The instance count.
     */
    private Integer instanceCount;

    /*
     * Delay duration for RequestDrain feature to ensures that the endpoint advertised by the stateless instance is
     * removed before the delay starts prior to closing the instance. This delay enables existing requests to drain
     * gracefully before the instance actually goes down
     * (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-
     * connection-drops-during-stateless-service-planned-downtime-preview). It is represented in ISO 8601 format
     * (hh:mm:ss.s).
     */
    private String instanceCloseDelayDuration;

    /*
     * The current deployment or provisioning state, which only appears in the response
     */
    private String provisioningState;

    /**
     * Creates an instance of StatelessServiceProperties class.
     */
    public StatelessServiceProperties() {
    }

    /**
     * Get the serviceKind property: The kind of service (Stateless or Stateful).
     * 
     * @return the serviceKind value.
     */
    @Override
    public ServiceKind serviceKind() {
        return this.serviceKind;
    }

    /**
     * Get the instanceCount property: The instance count.
     * 
     * @return the instanceCount value.
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * Set the instanceCount property: The instance count.
     * 
     * @param instanceCount the instanceCount value to set.
     * @return the StatelessServiceProperties object itself.
     */
    public StatelessServiceProperties withInstanceCount(Integer instanceCount) {
        this.instanceCount = instanceCount;
        return this;
    }

    /**
     * Get the instanceCloseDelayDuration property: Delay duration for RequestDrain feature to ensures that the endpoint
     * advertised by the stateless instance is removed before the delay starts prior to closing the instance. This delay
     * enables existing requests to drain gracefully before the instance actually goes down
     * (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview).
     * It is represented in ISO 8601 format (hh:mm:ss.s).
     * 
     * @return the instanceCloseDelayDuration value.
     */
    public String instanceCloseDelayDuration() {
        return this.instanceCloseDelayDuration;
    }

    /**
     * Set the instanceCloseDelayDuration property: Delay duration for RequestDrain feature to ensures that the endpoint
     * advertised by the stateless instance is removed before the delay starts prior to closing the instance. This delay
     * enables existing requests to drain gracefully before the instance actually goes down
     * (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview).
     * It is represented in ISO 8601 format (hh:mm:ss.s).
     * 
     * @param instanceCloseDelayDuration the instanceCloseDelayDuration value to set.
     * @return the StatelessServiceProperties object itself.
     */
    public StatelessServiceProperties withInstanceCloseDelayDuration(String instanceCloseDelayDuration) {
        this.instanceCloseDelayDuration = instanceCloseDelayDuration;
        return this;
    }

    /**
     * Get the provisioningState property: The current deployment or provisioning state, which only appears in the
     * response.
     * 
     * @return the provisioningState value.
     */
    @Override
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withServiceTypeName(String serviceTypeName) {
        super.withServiceTypeName(serviceTypeName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withPartitionDescription(PartitionSchemeDescription partitionDescription) {
        super.withPartitionDescription(partitionDescription);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties
        withServicePackageActivationMode(ArmServicePackageActivationMode servicePackageActivationMode) {
        super.withServicePackageActivationMode(servicePackageActivationMode);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withServiceDnsName(String serviceDnsName) {
        super.withServiceDnsName(serviceDnsName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withPlacementConstraints(String placementConstraints) {
        super.withPlacementConstraints(placementConstraints);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme) {
        super.withCorrelationScheme(correlationScheme);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics) {
        super.withServiceLoadMetrics(serviceLoadMetrics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties
        withServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies) {
        super.withServicePlacementPolicies(servicePlacementPolicies);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatelessServiceProperties withDefaultMoveCost(MoveCost defaultMoveCost) {
        super.withDefaultMoveCost(defaultMoveCost);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (correlationScheme() != null) {
            correlationScheme().forEach(e -> e.validate());
        }
        if (serviceLoadMetrics() != null) {
            serviceLoadMetrics().forEach(e -> e.validate());
        }
        if (servicePlacementPolicies() != null) {
            servicePlacementPolicies().forEach(e -> e.validate());
        }
        if (partitionDescription() != null) {
            partitionDescription().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("placementConstraints", placementConstraints());
        jsonWriter.writeArrayField("correlationScheme", correlationScheme(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("serviceLoadMetrics", serviceLoadMetrics(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("servicePlacementPolicies", servicePlacementPolicies(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("defaultMoveCost", defaultMoveCost() == null ? null : defaultMoveCost().toString());
        jsonWriter.writeStringField("serviceTypeName", serviceTypeName());
        jsonWriter.writeJsonField("partitionDescription", partitionDescription());
        jsonWriter.writeStringField("servicePackageActivationMode",
            servicePackageActivationMode() == null ? null : servicePackageActivationMode().toString());
        jsonWriter.writeStringField("serviceDnsName", serviceDnsName());
        jsonWriter.writeStringField("serviceKind", this.serviceKind == null ? null : this.serviceKind.toString());
        jsonWriter.writeNumberField("instanceCount", this.instanceCount);
        jsonWriter.writeStringField("instanceCloseDelayDuration", this.instanceCloseDelayDuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatelessServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatelessServiceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatelessServiceProperties.
     */
    public static StatelessServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatelessServiceProperties deserializedStatelessServiceProperties = new StatelessServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("placementConstraints".equals(fieldName)) {
                    deserializedStatelessServiceProperties.withPlacementConstraints(reader.getString());
                } else if ("correlationScheme".equals(fieldName)) {
                    List<ServiceCorrelationDescription> correlationScheme
                        = reader.readArray(reader1 -> ServiceCorrelationDescription.fromJson(reader1));
                    deserializedStatelessServiceProperties.withCorrelationScheme(correlationScheme);
                } else if ("serviceLoadMetrics".equals(fieldName)) {
                    List<ServiceLoadMetricDescription> serviceLoadMetrics
                        = reader.readArray(reader1 -> ServiceLoadMetricDescription.fromJson(reader1));
                    deserializedStatelessServiceProperties.withServiceLoadMetrics(serviceLoadMetrics);
                } else if ("servicePlacementPolicies".equals(fieldName)) {
                    List<ServicePlacementPolicyDescription> servicePlacementPolicies
                        = reader.readArray(reader1 -> ServicePlacementPolicyDescription.fromJson(reader1));
                    deserializedStatelessServiceProperties.withServicePlacementPolicies(servicePlacementPolicies);
                } else if ("defaultMoveCost".equals(fieldName)) {
                    deserializedStatelessServiceProperties.withDefaultMoveCost(MoveCost.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStatelessServiceProperties.provisioningState = reader.getString();
                } else if ("serviceTypeName".equals(fieldName)) {
                    deserializedStatelessServiceProperties.withServiceTypeName(reader.getString());
                } else if ("partitionDescription".equals(fieldName)) {
                    deserializedStatelessServiceProperties
                        .withPartitionDescription(PartitionSchemeDescription.fromJson(reader));
                } else if ("servicePackageActivationMode".equals(fieldName)) {
                    deserializedStatelessServiceProperties.withServicePackageActivationMode(
                        ArmServicePackageActivationMode.fromString(reader.getString()));
                } else if ("serviceDnsName".equals(fieldName)) {
                    deserializedStatelessServiceProperties.withServiceDnsName(reader.getString());
                } else if ("serviceKind".equals(fieldName)) {
                    deserializedStatelessServiceProperties.serviceKind = ServiceKind.fromString(reader.getString());
                } else if ("instanceCount".equals(fieldName)) {
                    deserializedStatelessServiceProperties.instanceCount = reader.getNullable(JsonReader::getInt);
                } else if ("instanceCloseDelayDuration".equals(fieldName)) {
                    deserializedStatelessServiceProperties.instanceCloseDelayDuration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatelessServiceProperties;
        });
    }
}
