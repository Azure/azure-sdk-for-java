// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the client certificate details using thumbprint.
 */
@Fluent
public final class ClientCertificateThumbprint implements JsonSerializable<ClientCertificateThumbprint> {
    /*
     * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only
     * operations on the cluster.
     */
    private boolean isAdmin;

    /*
     * The thumbprint of the client certificate.
     */
    private String certificateThumbprint;

    /**
     * Creates an instance of ClientCertificateThumbprint class.
     */
    public ClientCertificateThumbprint() {
    }

    /**
     * Get the isAdmin property: Indicates if the client certificate has admin access to the cluster. Non admin clients
     * can perform only read only operations on the cluster.
     * 
     * @return the isAdmin value.
     */
    public boolean isAdmin() {
        return this.isAdmin;
    }

    /**
     * Set the isAdmin property: Indicates if the client certificate has admin access to the cluster. Non admin clients
     * can perform only read only operations on the cluster.
     * 
     * @param isAdmin the isAdmin value to set.
     * @return the ClientCertificateThumbprint object itself.
     */
    public ClientCertificateThumbprint withIsAdmin(boolean isAdmin) {
        this.isAdmin = isAdmin;
        return this;
    }

    /**
     * Get the certificateThumbprint property: The thumbprint of the client certificate.
     * 
     * @return the certificateThumbprint value.
     */
    public String certificateThumbprint() {
        return this.certificateThumbprint;
    }

    /**
     * Set the certificateThumbprint property: The thumbprint of the client certificate.
     * 
     * @param certificateThumbprint the certificateThumbprint value to set.
     * @return the ClientCertificateThumbprint object itself.
     */
    public ClientCertificateThumbprint withCertificateThumbprint(String certificateThumbprint) {
        this.certificateThumbprint = certificateThumbprint;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (certificateThumbprint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property certificateThumbprint in model ClientCertificateThumbprint"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ClientCertificateThumbprint.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("isAdmin", this.isAdmin);
        jsonWriter.writeStringField("certificateThumbprint", this.certificateThumbprint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientCertificateThumbprint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientCertificateThumbprint if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClientCertificateThumbprint.
     */
    public static ClientCertificateThumbprint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClientCertificateThumbprint deserializedClientCertificateThumbprint = new ClientCertificateThumbprint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isAdmin".equals(fieldName)) {
                    deserializedClientCertificateThumbprint.isAdmin = reader.getBoolean();
                } else if ("certificateThumbprint".equals(fieldName)) {
                    deserializedClientCertificateThumbprint.certificateThumbprint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClientCertificateThumbprint;
        });
    }
}
