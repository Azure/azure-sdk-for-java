// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes a list of server certificates referenced by common name that are used to secure the cluster.
 */
@Fluent
public final class ServerCertificateCommonNames implements JsonSerializable<ServerCertificateCommonNames> {
    /*
     * The list of server certificates referenced by common name that are used to secure the cluster.
     */
    private List<ServerCertificateCommonName> commonNames;

    /*
     * The local certificate store location.
     */
    private StoreName x509StoreName;

    /**
     * Creates an instance of ServerCertificateCommonNames class.
     */
    public ServerCertificateCommonNames() {
    }

    /**
     * Get the commonNames property: The list of server certificates referenced by common name that are used to secure
     * the cluster.
     * 
     * @return the commonNames value.
     */
    public List<ServerCertificateCommonName> commonNames() {
        return this.commonNames;
    }

    /**
     * Set the commonNames property: The list of server certificates referenced by common name that are used to secure
     * the cluster.
     * 
     * @param commonNames the commonNames value to set.
     * @return the ServerCertificateCommonNames object itself.
     */
    public ServerCertificateCommonNames withCommonNames(List<ServerCertificateCommonName> commonNames) {
        this.commonNames = commonNames;
        return this;
    }

    /**
     * Get the x509StoreName property: The local certificate store location.
     * 
     * @return the x509StoreName value.
     */
    public StoreName x509StoreName() {
        return this.x509StoreName;
    }

    /**
     * Set the x509StoreName property: The local certificate store location.
     * 
     * @param x509StoreName the x509StoreName value to set.
     * @return the ServerCertificateCommonNames object itself.
     */
    public ServerCertificateCommonNames withX509StoreName(StoreName x509StoreName) {
        this.x509StoreName = x509StoreName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (commonNames() != null) {
            commonNames().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("commonNames", this.commonNames, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("x509StoreName", this.x509StoreName == null ? null : this.x509StoreName.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerCertificateCommonNames from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerCertificateCommonNames if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerCertificateCommonNames.
     */
    public static ServerCertificateCommonNames fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerCertificateCommonNames deserializedServerCertificateCommonNames = new ServerCertificateCommonNames();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("commonNames".equals(fieldName)) {
                    List<ServerCertificateCommonName> commonNames
                        = reader.readArray(reader1 -> ServerCertificateCommonName.fromJson(reader1));
                    deserializedServerCertificateCommonNames.commonNames = commonNames;
                } else if ("x509StoreName".equals(fieldName)) {
                    deserializedServerCertificateCommonNames.x509StoreName = StoreName.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerCertificateCommonNames;
        });
    }
}
