// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The list of intermediate cluster code versions for an upgrade or downgrade. Or minimum and maximum upgradable version
 * if no target was given.
 */
@Fluent
public final class UpgradableVersionPathResultInner implements JsonSerializable<UpgradableVersionPathResultInner> {
    /*
     * The supportedPath property.
     */
    private List<String> supportedPath;

    /**
     * Creates an instance of UpgradableVersionPathResultInner class.
     */
    public UpgradableVersionPathResultInner() {
    }

    /**
     * Get the supportedPath property: The supportedPath property.
     * 
     * @return the supportedPath value.
     */
    public List<String> supportedPath() {
        return this.supportedPath;
    }

    /**
     * Set the supportedPath property: The supportedPath property.
     * 
     * @param supportedPath the supportedPath value to set.
     * @return the UpgradableVersionPathResultInner object itself.
     */
    public UpgradableVersionPathResultInner withSupportedPath(List<String> supportedPath) {
        this.supportedPath = supportedPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("supportedPath", this.supportedPath,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpgradableVersionPathResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpgradableVersionPathResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpgradableVersionPathResultInner.
     */
    public static UpgradableVersionPathResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpgradableVersionPathResultInner deserializedUpgradableVersionPathResultInner
                = new UpgradableVersionPathResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("supportedPath".equals(fieldName)) {
                    List<String> supportedPath = reader.readArray(reader1 -> reader1.getString());
                    deserializedUpgradableVersionPathResultInner.supportedPath = supportedPath;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpgradableVersionPathResultInner;
        });
    }
}
