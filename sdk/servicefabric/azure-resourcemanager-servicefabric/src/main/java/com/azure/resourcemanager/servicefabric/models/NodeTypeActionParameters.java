// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Parameters for Node type action. */
@Fluent
public final class NodeTypeActionParameters {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NodeTypeActionParameters.class);

    /*
     * List of node names from the node type.
     */
    @JsonProperty(value = "nodes", required = true)
    private List<String> nodes;

    /*
     * Force the action to go through.
     */
    @JsonProperty(value = "force")
    private Boolean force;

    /**
     * Get the nodes property: List of node names from the node type.
     *
     * @return the nodes value.
     */
    public List<String> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: List of node names from the node type.
     *
     * @param nodes the nodes value to set.
     * @return the NodeTypeActionParameters object itself.
     */
    public NodeTypeActionParameters withNodes(List<String> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Get the force property: Force the action to go through.
     *
     * @return the force value.
     */
    public Boolean force() {
        return this.force;
    }

    /**
     * Set the force property: Force the action to go through.
     *
     * @param force the force value to set.
     * @return the NodeTypeActionParameters object itself.
     */
    public NodeTypeActionParameters withForce(Boolean force) {
        this.force = force;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property nodes in model NodeTypeActionParameters"));
        }
    }
}
