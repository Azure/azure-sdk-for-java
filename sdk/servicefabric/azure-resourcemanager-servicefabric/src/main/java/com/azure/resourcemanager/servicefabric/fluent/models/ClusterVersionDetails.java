// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.servicefabric.models.ClusterEnvironment;
import java.io.IOException;

/**
 * The detail of the Service Fabric runtime version result.
 */
@Fluent
public final class ClusterVersionDetails implements JsonSerializable<ClusterVersionDetails> {
    /*
     * The Service Fabric runtime version of the cluster.
     */
    private String codeVersion;

    /*
     * The date of expiry of support of the version.
     */
    private String supportExpiryUtc;

    /*
     * Indicates if this version is for Windows or Linux operating system.
     */
    private ClusterEnvironment environment;

    /**
     * Creates an instance of ClusterVersionDetails class.
     */
    public ClusterVersionDetails() {
    }

    /**
     * Get the codeVersion property: The Service Fabric runtime version of the cluster.
     * 
     * @return the codeVersion value.
     */
    public String codeVersion() {
        return this.codeVersion;
    }

    /**
     * Set the codeVersion property: The Service Fabric runtime version of the cluster.
     * 
     * @param codeVersion the codeVersion value to set.
     * @return the ClusterVersionDetails object itself.
     */
    public ClusterVersionDetails withCodeVersion(String codeVersion) {
        this.codeVersion = codeVersion;
        return this;
    }

    /**
     * Get the supportExpiryUtc property: The date of expiry of support of the version.
     * 
     * @return the supportExpiryUtc value.
     */
    public String supportExpiryUtc() {
        return this.supportExpiryUtc;
    }

    /**
     * Set the supportExpiryUtc property: The date of expiry of support of the version.
     * 
     * @param supportExpiryUtc the supportExpiryUtc value to set.
     * @return the ClusterVersionDetails object itself.
     */
    public ClusterVersionDetails withSupportExpiryUtc(String supportExpiryUtc) {
        this.supportExpiryUtc = supportExpiryUtc;
        return this;
    }

    /**
     * Get the environment property: Indicates if this version is for Windows or Linux operating system.
     * 
     * @return the environment value.
     */
    public ClusterEnvironment environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Indicates if this version is for Windows or Linux operating system.
     * 
     * @param environment the environment value to set.
     * @return the ClusterVersionDetails object itself.
     */
    public ClusterVersionDetails withEnvironment(ClusterEnvironment environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("codeVersion", this.codeVersion);
        jsonWriter.writeStringField("supportExpiryUtc", this.supportExpiryUtc);
        jsonWriter.writeStringField("environment", this.environment == null ? null : this.environment.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterVersionDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterVersionDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterVersionDetails.
     */
    public static ClusterVersionDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterVersionDetails deserializedClusterVersionDetails = new ClusterVersionDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("codeVersion".equals(fieldName)) {
                    deserializedClusterVersionDetails.codeVersion = reader.getString();
                } else if ("supportExpiryUtc".equals(fieldName)) {
                    deserializedClusterVersionDetails.supportExpiryUtc = reader.getString();
                } else if ("environment".equals(fieldName)) {
                    deserializedClusterVersionDetails.environment = ClusterEnvironment.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterVersionDetails;
        });
    }
}
