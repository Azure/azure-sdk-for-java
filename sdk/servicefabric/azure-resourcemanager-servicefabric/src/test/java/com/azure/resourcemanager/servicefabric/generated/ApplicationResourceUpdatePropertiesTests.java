// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationResourceUpdateProperties;
import com.azure.resourcemanager.servicefabric.models.ApplicationMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabric.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabric.models.ArmApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmRollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmUpgradeFailureAction;
import com.azure.resourcemanager.servicefabric.models.RollingUpgradeMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceUpdateProperties model = BinaryData.fromString(
            "{\"typeVersion\":\"mwlxk\",\"parameters\":{\"n\":\"fhzovawjvzunluth\",\"pjzu\":\"rnxipei\",\"xdult\":\"e\",\"umveekgpwozuhkf\":\"kzbbtd\"},\"upgradePolicy\":{\"upgradeReplicaSetCheckTimeout\":\"jyofdxluusdtto\",\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"qvkelnsm\",\"healthCheckStableDuration\":\"xwyjsflhhc\",\"healthCheckRetryTimeout\":\"lnjixisxya\",\"upgradeTimeout\":\"oyaqcslyjpkiid\",\"upgradeDomainTimeout\":\"exznelixhnr\"},\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":434458515,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":681203122,\"maxPercentUnhealthyPartitionsPerService\":245214837,\"maxPercentUnhealthyReplicasPerPartition\":1615716441},\"serviceTypeHealthPolicyMap\":{\"tpnapnyiropuhpig\":{\"maxPercentUnhealthyServices\":703973266,\"maxPercentUnhealthyPartitionsPerService\":1181953038,\"maxPercentUnhealthyReplicasPerPartition\":1784168921},\"git\":{\"maxPercentUnhealthyServices\":2140009722,\"maxPercentUnhealthyPartitionsPerService\":882329549,\"maxPercentUnhealthyReplicasPerPartition\":2050375248},\"slynqwwnc\":{\"maxPercentUnhealthyServices\":613009021,\"maxPercentUnhealthyPartitionsPerService\":793940530,\"maxPercentUnhealthyReplicasPerPartition\":119641642},\"trmgucnapkte\":{\"maxPercentUnhealthyServices\":960001198,\"maxPercentUnhealthyPartitionsPerService\":668336306,\"maxPercentUnhealthyReplicasPerPartition\":953152084}}},\"upgradeMode\":\"UnmonitoredAuto\",\"recreateApplication\":false},\"minimumNodes\":890292148209334382,\"maximumNodes\":6017861895471041953,\"removeApplicationCapacity\":true,\"metrics\":[{\"name\":\"ac\",\"maximumCapacity\":5643404182194544806,\"reservationCapacity\":5106866103000080845,\"totalApplicationCapacity\":8003552029695467607}],\"managedIdentities\":[{\"name\":\"pppcqeqxo\",\"principalId\":\"z\"},{\"name\":\"ahzxctobgbk\",\"principalId\":\"moizpos\"}]}")
            .toObject(ApplicationResourceUpdateProperties.class);
        Assertions.assertEquals("mwlxk", model.typeVersion());
        Assertions.assertEquals("fhzovawjvzunluth", model.parameters().get("n"));
        Assertions.assertEquals("jyofdxluusdtto", model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.ROLLBACK,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("qvkelnsm",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("xwyjsflhhc",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("lnjixisxya",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("oyaqcslyjpkiid",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("exznelixhnr",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(false, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(434458515,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(681203122, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(245214837, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1615716441, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(703973266, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("tpnapnyiropuhpig").maxPercentUnhealthyServices());
        Assertions.assertEquals(1181953038, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("tpnapnyiropuhpig").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1784168921, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("tpnapnyiropuhpig").maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(false, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals(890292148209334382L, model.minimumNodes());
        Assertions.assertEquals(6017861895471041953L, model.maximumNodes());
        Assertions.assertEquals(true, model.removeApplicationCapacity());
        Assertions.assertEquals("ac", model.metrics().get(0).name());
        Assertions.assertEquals(5643404182194544806L, model.metrics().get(0).maximumCapacity());
        Assertions.assertEquals(5106866103000080845L, model.metrics().get(0).reservationCapacity());
        Assertions.assertEquals(8003552029695467607L, model.metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("pppcqeqxo", model.managedIdentities().get(0).name());
        Assertions.assertEquals("z", model.managedIdentities().get(0).principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceUpdateProperties model = new ApplicationResourceUpdateProperties().withTypeVersion("mwlxk")
            .withParameters(
                mapOf("n", "fhzovawjvzunluth", "pjzu", "rnxipei", "xdult", "e", "umveekgpwozuhkf", "kzbbtd"))
            .withUpgradePolicy(new ApplicationUpgradePolicy().withUpgradeReplicaSetCheckTimeout("jyofdxluusdtto")
                .withForceRestart(false)
                .withRollingUpgradeMonitoringPolicy(new ArmRollingUpgradeMonitoringPolicy()
                    .withFailureAction(ArmUpgradeFailureAction.ROLLBACK).withHealthCheckWaitDuration("qvkelnsm")
                    .withHealthCheckStableDuration("xwyjsflhhc").withHealthCheckRetryTimeout("lnjixisxya")
                    .withUpgradeTimeout("oyaqcslyjpkiid").withUpgradeDomainTimeout("exznelixhnr"))
                .withApplicationHealthPolicy(new ArmApplicationHealthPolicy().withConsiderWarningAsError(false)
                    .withMaxPercentUnhealthyDeployedApplications(434458515)
                    .withDefaultServiceTypeHealthPolicy(
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(681203122)
                            .withMaxPercentUnhealthyPartitionsPerService(245214837)
                            .withMaxPercentUnhealthyReplicasPerPartition(1615716441))
                    .withServiceTypeHealthPolicyMap(mapOf("tpnapnyiropuhpig",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(703973266)
                            .withMaxPercentUnhealthyPartitionsPerService(1181953038)
                            .withMaxPercentUnhealthyReplicasPerPartition(1784168921),
                        "git",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2140009722)
                            .withMaxPercentUnhealthyPartitionsPerService(882329549)
                            .withMaxPercentUnhealthyReplicasPerPartition(2050375248),
                        "slynqwwnc",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(613009021)
                            .withMaxPercentUnhealthyPartitionsPerService(793940530)
                            .withMaxPercentUnhealthyReplicasPerPartition(119641642),
                        "trmgucnapkte",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(960001198)
                            .withMaxPercentUnhealthyPartitionsPerService(668336306)
                            .withMaxPercentUnhealthyReplicasPerPartition(953152084))))
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_AUTO).withRecreateApplication(false))
            .withMinimumNodes(890292148209334382L).withMaximumNodes(6017861895471041953L)
            .withRemoveApplicationCapacity(true)
            .withMetrics(Arrays
                .asList(new ApplicationMetricDescription().withName("ac").withMaximumCapacity(5643404182194544806L)
                    .withReservationCapacity(5106866103000080845L).withTotalApplicationCapacity(8003552029695467607L)))
            .withManagedIdentities(
                Arrays.asList(new ApplicationUserAssignedIdentity().withName("pppcqeqxo").withPrincipalId("z"),
                    new ApplicationUserAssignedIdentity().withName("ahzxctobgbk").withPrincipalId("moizpos")));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceUpdateProperties.class);
        Assertions.assertEquals("mwlxk", model.typeVersion());
        Assertions.assertEquals("fhzovawjvzunluth", model.parameters().get("n"));
        Assertions.assertEquals("jyofdxluusdtto", model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.ROLLBACK,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("qvkelnsm",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("xwyjsflhhc",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("lnjixisxya",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("oyaqcslyjpkiid",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("exznelixhnr",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(false, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(434458515,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(681203122, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(245214837, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1615716441, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(703973266, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("tpnapnyiropuhpig").maxPercentUnhealthyServices());
        Assertions.assertEquals(1181953038, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("tpnapnyiropuhpig").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1784168921, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("tpnapnyiropuhpig").maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(false, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals(890292148209334382L, model.minimumNodes());
        Assertions.assertEquals(6017861895471041953L, model.maximumNodes());
        Assertions.assertEquals(true, model.removeApplicationCapacity());
        Assertions.assertEquals("ac", model.metrics().get(0).name());
        Assertions.assertEquals(5643404182194544806L, model.metrics().get(0).maximumCapacity());
        Assertions.assertEquals(5106866103000080845L, model.metrics().get(0).reservationCapacity());
        Assertions.assertEquals(8003552029695467607L, model.metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("pppcqeqxo", model.managedIdentities().get(0).name());
        Assertions.assertEquals("z", model.managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
