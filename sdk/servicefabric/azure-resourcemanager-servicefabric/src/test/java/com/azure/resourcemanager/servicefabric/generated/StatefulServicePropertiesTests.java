// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.PartitionSchemeDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.StatefulServiceProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatefulServicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatefulServiceProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"Stateful\",\"hasPersistedState\":true,\"targetReplicaSetSize\":1117462910,\"minReplicaSetSize\":394204922,\"replicaRestartWaitDuration\":\"2021-08-30T01:40:48Z\",\"quorumLossWaitDuration\":\"2021-03-14T13:52:20Z\",\"standByReplicaKeepDuration\":\"2021-09-22T23:43:14Z\",\"provisioningState\":\"ystawfsdjpvkvp\",\"serviceTypeName\":\"xbkzbzkdvncj\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"r\",\"placementConstraints\":\"akmokzhjjklf\",\"correlationScheme\":[{\"scheme\":\"Invalid\",\"serviceName\":\"uwqlgzrfzeey\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"izikayuhq\"},{\"scheme\":\"Affinity\",\"serviceName\":\"jbsybbqw\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"t\"}],\"serviceLoadMetrics\":[{\"name\":\"mfpgv\",\"weight\":\"High\",\"primaryDefaultLoad\":299337354,\"secondaryDefaultLoad\":1000390440,\"defaultLoad\":753407395},{\"name\":\"aqfxss\",\"weight\":\"Zero\",\"primaryDefaultLoad\":1174161651,\"secondaryDefaultLoad\":1781178234,\"defaultLoad\":1417218644}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Medium\"}")
            .toObject(StatefulServiceProperties.class);
        Assertions.assertEquals("akmokzhjjklf", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("uwqlgzrfzeey", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("mfpgv", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(299337354, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1000390440, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(753407395, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
        Assertions.assertEquals("xbkzbzkdvncj", model.serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.servicePackageActivationMode());
        Assertions.assertEquals("r", model.serviceDnsName());
        Assertions.assertEquals(true, model.hasPersistedState());
        Assertions.assertEquals(1117462910, model.targetReplicaSetSize());
        Assertions.assertEquals(394204922, model.minReplicaSetSize());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T01:40:48Z"), model.replicaRestartWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-14T13:52:20Z"), model.quorumLossWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T23:43:14Z"), model.standByReplicaKeepDuration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatefulServiceProperties model = new StatefulServiceProperties().withPlacementConstraints("akmokzhjjklf")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.INVALID)
                    .withServiceName("uwqlgzrfzeey"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY)
                    .withServiceName("izikayuhq"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY)
                    .withServiceName("jbsybbqw"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("t")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetricDescription().withName("mfpgv").withWeight(ServiceLoadMetricWeight.HIGH)
                    .withPrimaryDefaultLoad(299337354).withSecondaryDefaultLoad(1000390440).withDefaultLoad(753407395),
                new ServiceLoadMetricDescription().withName("aqfxss").withWeight(ServiceLoadMetricWeight.ZERO)
                    .withPrimaryDefaultLoad(1174161651).withSecondaryDefaultLoad(1781178234)
                    .withDefaultLoad(1417218644)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
            .withDefaultMoveCost(MoveCost.MEDIUM).withServiceTypeName("xbkzbzkdvncj")
            .withPartitionDescription(new PartitionSchemeDescription())
            .withServicePackageActivationMode(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS).withServiceDnsName("r")
            .withHasPersistedState(true).withTargetReplicaSetSize(1117462910).withMinReplicaSetSize(394204922)
            .withReplicaRestartWaitDuration(OffsetDateTime.parse("2021-08-30T01:40:48Z"))
            .withQuorumLossWaitDuration(OffsetDateTime.parse("2021-03-14T13:52:20Z"))
            .withStandByReplicaKeepDuration(OffsetDateTime.parse("2021-09-22T23:43:14Z"));
        model = BinaryData.fromObject(model).toObject(StatefulServiceProperties.class);
        Assertions.assertEquals("akmokzhjjklf", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("uwqlgzrfzeey", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("mfpgv", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(299337354, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1000390440, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(753407395, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.defaultMoveCost());
        Assertions.assertEquals("xbkzbzkdvncj", model.serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.servicePackageActivationMode());
        Assertions.assertEquals("r", model.serviceDnsName());
        Assertions.assertEquals(true, model.hasPersistedState());
        Assertions.assertEquals(1117462910, model.targetReplicaSetSize());
        Assertions.assertEquals(394204922, model.minReplicaSetSize());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T01:40:48Z"), model.replicaRestartWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-14T13:52:20Z"), model.quorumLossWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-22T23:43:14Z"), model.standByReplicaKeepDuration());
    }
}
