// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ServiceResourceInner;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.PartitionSchemeDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceResourceList;
import com.azure.resourcemanager.servicefabric.models.ServiceResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"koowtl\",\"serviceTypeName\":\"guxawqaldsyuuxi\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"obwyznkb\",\"placementConstraints\":\"utwpfhp\",\"correlationScheme\":[{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"r\"}],\"serviceLoadMetrics\":[{\"name\":\"snfdsdoakgtdl\",\"weight\":\"High\",\"primaryDefaultLoad\":1323542271,\"secondaryDefaultLoad\":1591125890,\"defaultLoad\":973934778},{\"name\":\"ewpusdsttwvogvb\",\"weight\":\"Low\",\"primaryDefaultLoad\":1690092543,\"secondaryDefaultLoad\":764265895,\"defaultLoad\":963593520},{\"name\":\"m\",\"weight\":\"Low\",\"primaryDefaultLoad\":840228808,\"secondaryDefaultLoad\":127978460,\"defaultLoad\":328261823},{\"name\":\"rwr\",\"weight\":\"Medium\",\"primaryDefaultLoad\":739471239,\"secondaryDefaultLoad\":354795976,\"defaultLoad\":130436359}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Medium\"},\"location\":\"bminrfdwoyuhhzi\",\"tags\":{\"rmaequ\":\"fozbhdmsmlmzqhof\",\"icslfaoq\":\"ah\",\"kaivwit\":\"piyylhalnswhccsp\"},\"etag\":\"cywuggwol\",\"id\":\"czbwemhairsbr\",\"name\":\"z\",\"type\":\"wmsweypqwd\"},{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"icccn\",\"serviceTypeName\":\"huexmk\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"vlz\",\"placementConstraints\":\"emhzrncsdtc\",\"correlationScheme\":[{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"ypbsfgytguslfead\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"gq\"}],\"serviceLoadMetrics\":[{\"name\":\"hejhzisx\",\"weight\":\"Low\",\"primaryDefaultLoad\":843863757,\"secondaryDefaultLoad\":196039433,\"defaultLoad\":517582343},{\"name\":\"vk\",\"weight\":\"High\",\"primaryDefaultLoad\":500405809,\"secondaryDefaultLoad\":900186733,\"defaultLoad\":653973034},{\"name\":\"aehtwd\",\"weight\":\"High\",\"primaryDefaultLoad\":1438579727,\"secondaryDefaultLoad\":767551661,\"defaultLoad\":1720208183}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Zero\"},\"location\":\"h\",\"tags\":{\"c\":\"wpracstwitykhev\",\"jc\":\"edcpnmdyodnwzxl\",\"vvwxqi\":\"nhltiugcxn\"},\"etag\":\"qunyowxwlmdjr\",\"id\":\"fgbvfvpdbo\",\"name\":\"acizsjqlhkrr\",\"type\":\"bdeibqipqk\"}],\"nextLink\":\"vxndz\"}")
            .toObject(ServiceResourceList.class);
        Assertions.assertEquals("utwpfhp", model.value().get(0).properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY,
            model.value().get(0).properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("r", model.value().get(0).properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("snfdsdoakgtdl", model.value().get(0).properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH,
            model.value().get(0).properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1323542271,
            model.value().get(0).properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1591125890,
            model.value().get(0).properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(973934778, model.value().get(0).properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.value().get(0).properties().defaultMoveCost());
        Assertions.assertEquals("guxawqaldsyuuxi", model.value().get(0).properties().serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.SHARED_PROCESS,
            model.value().get(0).properties().servicePackageActivationMode());
        Assertions.assertEquals("obwyznkb", model.value().get(0).properties().serviceDnsName());
        Assertions.assertEquals("bminrfdwoyuhhzi", model.value().get(0).location());
        Assertions.assertEquals("fozbhdmsmlmzqhof", model.value().get(0).tags().get("rmaequ"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceList model = new ServiceResourceList().withValue(Arrays.asList(new ServiceResourceInner()
            .withProperties(new ServiceResourceProperties().withPlacementConstraints("utwpfhp")
                .withCorrelationScheme(Arrays.asList(new ServiceCorrelationDescription()
                    .withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY).withServiceName("r")))
                .withServiceLoadMetrics(Arrays.asList(
                    new ServiceLoadMetricDescription().withName("snfdsdoakgtdl")
                        .withWeight(ServiceLoadMetricWeight.HIGH).withPrimaryDefaultLoad(1323542271)
                        .withSecondaryDefaultLoad(1591125890).withDefaultLoad(973934778),
                    new ServiceLoadMetricDescription().withName("ewpusdsttwvogvb")
                        .withWeight(ServiceLoadMetricWeight.LOW).withPrimaryDefaultLoad(1690092543)
                        .withSecondaryDefaultLoad(764265895).withDefaultLoad(963593520),
                    new ServiceLoadMetricDescription().withName("m").withWeight(ServiceLoadMetricWeight.LOW)
                        .withPrimaryDefaultLoad(840228808).withSecondaryDefaultLoad(127978460)
                        .withDefaultLoad(328261823),
                    new ServiceLoadMetricDescription().withName("rwr").withWeight(ServiceLoadMetricWeight.MEDIUM)
                        .withPrimaryDefaultLoad(739471239).withSecondaryDefaultLoad(354795976)
                        .withDefaultLoad(130436359)))
                .withServicePlacementPolicies(
                    Arrays.asList(new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
                .withDefaultMoveCost(MoveCost.MEDIUM).withServiceTypeName("guxawqaldsyuuxi")
                .withPartitionDescription(
                    new PartitionSchemeDescription())
                .withServicePackageActivationMode(ArmServicePackageActivationMode.SHARED_PROCESS)
                .withServiceDnsName("obwyznkb"))
            .withLocation("bminrfdwoyuhhzi")
            .withTags(mapOf("rmaequ", "fozbhdmsmlmzqhof", "icslfaoq", "ah", "kaivwit", "piyylhalnswhccsp")),
            new ServiceResourceInner()
                .withProperties(new ServiceResourceProperties().withPlacementConstraints("emhzrncsdtc")
                    .withCorrelationScheme(Arrays.asList(
                        new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                            .withServiceName("ypbsfgytguslfead"),
                        new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY)
                            .withServiceName("gq")))
                    .withServiceLoadMetrics(Arrays.asList(
                        new ServiceLoadMetricDescription().withName("hejhzisx").withWeight(ServiceLoadMetricWeight.LOW)
                            .withPrimaryDefaultLoad(843863757).withSecondaryDefaultLoad(196039433)
                            .withDefaultLoad(517582343),
                        new ServiceLoadMetricDescription().withName("vk").withWeight(ServiceLoadMetricWeight.HIGH)
                            .withPrimaryDefaultLoad(500405809).withSecondaryDefaultLoad(900186733)
                            .withDefaultLoad(653973034),
                        new ServiceLoadMetricDescription().withName("aehtwd").withWeight(ServiceLoadMetricWeight.HIGH)
                            .withPrimaryDefaultLoad(1438579727).withSecondaryDefaultLoad(767551661)
                            .withDefaultLoad(1720208183)))
                    .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicyDescription()))
                    .withDefaultMoveCost(MoveCost.ZERO).withServiceTypeName("huexmk")
                    .withPartitionDescription(new PartitionSchemeDescription())
                    .withServicePackageActivationMode(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS)
                    .withServiceDnsName("vlz"))
                .withLocation("h")
                .withTags(mapOf("c", "wpracstwitykhev", "jc", "edcpnmdyodnwzxl", "vvwxqi", "nhltiugcxn"))));
        model = BinaryData.fromObject(model).toObject(ServiceResourceList.class);
        Assertions.assertEquals("utwpfhp", model.value().get(0).properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY,
            model.value().get(0).properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("r", model.value().get(0).properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("snfdsdoakgtdl", model.value().get(0).properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH,
            model.value().get(0).properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1323542271,
            model.value().get(0).properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1591125890,
            model.value().get(0).properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(973934778, model.value().get(0).properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.value().get(0).properties().defaultMoveCost());
        Assertions.assertEquals("guxawqaldsyuuxi", model.value().get(0).properties().serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.SHARED_PROCESS,
            model.value().get(0).properties().servicePackageActivationMode());
        Assertions.assertEquals("obwyznkb", model.value().get(0).properties().serviceDnsName());
        Assertions.assertEquals("bminrfdwoyuhhzi", model.value().get(0).location());
        Assertions.assertEquals("fozbhdmsmlmzqhof", model.value().get(0).tags().get("rmaequ"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
