// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ArmApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ArmApplicationHealthPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArmApplicationHealthPolicy model = BinaryData.fromString(
            "{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1553831435,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1616367631,\"maxPercentUnhealthyPartitionsPerService\":1933405011,\"maxPercentUnhealthyReplicasPerPartition\":1057432086},\"serviceTypeHealthPolicyMap\":{\"vwpm\":{\"maxPercentUnhealthyServices\":1948356330,\"maxPercentUnhealthyPartitionsPerService\":2126872967,\"maxPercentUnhealthyReplicasPerPartition\":1133541665},\"jmkcjhwqytj\":{\"maxPercentUnhealthyServices\":1787439694,\"maxPercentUnhealthyPartitionsPerService\":930552751,\"maxPercentUnhealthyReplicasPerPartition\":477944589},\"wgdrjervnaenqp\":{\"maxPercentUnhealthyServices\":778428037,\"maxPercentUnhealthyPartitionsPerService\":385457826,\"maxPercentUnhealthyReplicasPerPartition\":524895743},\"gmifthnzd\":{\"maxPercentUnhealthyServices\":1479768723,\"maxPercentUnhealthyPartitionsPerService\":681452902,\"maxPercentUnhealthyReplicasPerPartition\":895776000}}}")
            .toObject(ArmApplicationHealthPolicy.class);
        Assertions.assertEquals(true, model.considerWarningAsError());
        Assertions.assertEquals(1553831435, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1616367631, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1933405011,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1057432086,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1948356330,
            model.serviceTypeHealthPolicyMap().get("vwpm").maxPercentUnhealthyServices());
        Assertions.assertEquals(2126872967,
            model.serviceTypeHealthPolicyMap().get("vwpm").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1133541665,
            model.serviceTypeHealthPolicyMap().get("vwpm").maxPercentUnhealthyReplicasPerPartition());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArmApplicationHealthPolicy model = new ArmApplicationHealthPolicy().withConsiderWarningAsError(true)
            .withMaxPercentUnhealthyDeployedApplications(1553831435)
            .withDefaultServiceTypeHealthPolicy(new ArmServiceTypeHealthPolicy()
                .withMaxPercentUnhealthyServices(1616367631).withMaxPercentUnhealthyPartitionsPerService(1933405011)
                .withMaxPercentUnhealthyReplicasPerPartition(1057432086))
            .withServiceTypeHealthPolicyMap(mapOf("vwpm",
                new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1948356330)
                    .withMaxPercentUnhealthyPartitionsPerService(2126872967)
                    .withMaxPercentUnhealthyReplicasPerPartition(1133541665),
                "jmkcjhwqytj",
                new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1787439694)
                    .withMaxPercentUnhealthyPartitionsPerService(930552751)
                    .withMaxPercentUnhealthyReplicasPerPartition(477944589),
                "wgdrjervnaenqp",
                new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(778428037)
                    .withMaxPercentUnhealthyPartitionsPerService(385457826)
                    .withMaxPercentUnhealthyReplicasPerPartition(524895743),
                "gmifthnzd",
                new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1479768723)
                    .withMaxPercentUnhealthyPartitionsPerService(681452902)
                    .withMaxPercentUnhealthyReplicasPerPartition(895776000)));
        model = BinaryData.fromObject(model).toObject(ArmApplicationHealthPolicy.class);
        Assertions.assertEquals(true, model.considerWarningAsError());
        Assertions.assertEquals(1553831435, model.maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1616367631, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1933405011,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1057432086,
            model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1948356330,
            model.serviceTypeHealthPolicyMap().get("vwpm").maxPercentUnhealthyServices());
        Assertions.assertEquals(2126872967,
            model.serviceTypeHealthPolicyMap().get("vwpm").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(1133541665,
            model.serviceTypeHealthPolicyMap().get("vwpm").maxPercentUnhealthyReplicasPerPartition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
