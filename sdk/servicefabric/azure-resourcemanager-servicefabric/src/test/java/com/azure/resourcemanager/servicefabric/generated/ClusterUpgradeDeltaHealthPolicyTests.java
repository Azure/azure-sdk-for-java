// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ApplicationDeltaHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ClusterUpgradeDeltaHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ServiceTypeDeltaHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterUpgradeDeltaHealthPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterUpgradeDeltaHealthPolicy model = BinaryData.fromString(
            "{\"maxPercentDeltaUnhealthyNodes\":1154463022,\"maxPercentUpgradeDomainDeltaUnhealthyNodes\":595941541,\"maxPercentDeltaUnhealthyApplications\":1356626713,\"applicationDeltaHealthPolicies\":{\"vmgxsab\":{\"defaultServiceTypeDeltaHealthPolicy\":{\"maxPercentDeltaUnhealthyServices\":461040275},\"serviceTypeDeltaHealthPolicies\":{\"ljfmppee\":{\"maxPercentDeltaUnhealthyServices\":347858915}}},\"dkvwrwjfe\":{\"defaultServiceTypeDeltaHealthPolicy\":{\"maxPercentDeltaUnhealthyServices\":1160647104},\"serviceTypeDeltaHealthPolicies\":{\"tcj\":{\"maxPercentDeltaUnhealthyServices\":2066308678},\"zevndhkrwpdappds\":{\"maxPercentDeltaUnhealthyServices\":372276294}}},\"tqxhocdgeab\":{\"defaultServiceTypeDeltaHealthPolicy\":{\"maxPercentDeltaUnhealthyServices\":1102727938},\"serviceTypeDeltaHealthPolicies\":{\"ltmrldh\":{\"maxPercentDeltaUnhealthyServices\":1936335434},\"zzd\":{\"maxPercentDeltaUnhealthyServices\":885785432}}},\"aozwyiftyhxhu\":{\"defaultServiceTypeDeltaHealthPolicy\":{\"maxPercentDeltaUnhealthyServices\":743985587},\"serviceTypeDeltaHealthPolicies\":{\"ndv\":{\"maxPercentDeltaUnhealthyServices\":1962929741}}}}}")
            .toObject(ClusterUpgradeDeltaHealthPolicy.class);
        Assertions.assertEquals(1154463022, model.maxPercentDeltaUnhealthyNodes());
        Assertions.assertEquals(595941541, model.maxPercentUpgradeDomainDeltaUnhealthyNodes());
        Assertions.assertEquals(1356626713, model.maxPercentDeltaUnhealthyApplications());
        Assertions.assertEquals(461040275, model.applicationDeltaHealthPolicies().get("vmgxsab")
            .defaultServiceTypeDeltaHealthPolicy().maxPercentDeltaUnhealthyServices());
        Assertions.assertEquals(347858915, model.applicationDeltaHealthPolicies().get("vmgxsab")
            .serviceTypeDeltaHealthPolicies().get("ljfmppee").maxPercentDeltaUnhealthyServices());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterUpgradeDeltaHealthPolicy model = new ClusterUpgradeDeltaHealthPolicy()
            .withMaxPercentDeltaUnhealthyNodes(1154463022).withMaxPercentUpgradeDomainDeltaUnhealthyNodes(595941541)
            .withMaxPercentDeltaUnhealthyApplications(1356626713)
            .withApplicationDeltaHealthPolicies(mapOf("vmgxsab",
                new ApplicationDeltaHealthPolicy()
                    .withDefaultServiceTypeDeltaHealthPolicy(
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(461040275))
                    .withServiceTypeDeltaHealthPolicies(mapOf("ljfmppee",
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(347858915))),
                "dkvwrwjfe",
                new ApplicationDeltaHealthPolicy()
                    .withDefaultServiceTypeDeltaHealthPolicy(
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(1160647104))
                    .withServiceTypeDeltaHealthPolicies(mapOf("tcj",
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(2066308678),
                        "zevndhkrwpdappds",
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(372276294))),
                "tqxhocdgeab",
                new ApplicationDeltaHealthPolicy()
                    .withDefaultServiceTypeDeltaHealthPolicy(
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(1102727938))
                    .withServiceTypeDeltaHealthPolicies(mapOf("ltmrldh",
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(1936335434), "zzd",
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(885785432))),
                "aozwyiftyhxhu",
                new ApplicationDeltaHealthPolicy()
                    .withDefaultServiceTypeDeltaHealthPolicy(
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(743985587))
                    .withServiceTypeDeltaHealthPolicies(mapOf("ndv",
                        new ServiceTypeDeltaHealthPolicy().withMaxPercentDeltaUnhealthyServices(1962929741)))));
        model = BinaryData.fromObject(model).toObject(ClusterUpgradeDeltaHealthPolicy.class);
        Assertions.assertEquals(1154463022, model.maxPercentDeltaUnhealthyNodes());
        Assertions.assertEquals(595941541, model.maxPercentUpgradeDomainDeltaUnhealthyNodes());
        Assertions.assertEquals(1356626713, model.maxPercentDeltaUnhealthyApplications());
        Assertions.assertEquals(461040275, model.applicationDeltaHealthPolicies().get("vmgxsab")
            .defaultServiceTypeDeltaHealthPolicy().maxPercentDeltaUnhealthyServices());
        Assertions.assertEquals(347858915, model.applicationDeltaHealthPolicies().get("vmgxsab")
            .serviceTypeDeltaHealthPolicies().get("ljfmppee").maxPercentDeltaUnhealthyServices());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
