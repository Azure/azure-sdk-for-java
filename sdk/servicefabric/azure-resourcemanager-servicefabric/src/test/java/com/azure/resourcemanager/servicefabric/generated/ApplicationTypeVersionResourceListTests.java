// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationTypeVersionResourceInner;
import com.azure.resourcemanager.servicefabric.models.ApplicationTypeVersionResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationTypeVersionResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationTypeVersionResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"nbpoczvyifqrvkdv\",\"appPackageUrl\":\"sllr\",\"defaultParameterList\":{\"watkpnpulexxb\":\"d\",\"yokacspkw\":\"zwtruwiqzbqjvsov\",\"rkcciwwzjuqk\":\"hzdobpxjmflbvvnc\"}},\"location\":\"sa\",\"tags\":{\"foskghsauuimj\":\"ku\",\"rfbyaosvexcso\":\"vxieduugidyj\",\"vleggzfbuhfmvfax\":\"pclhocohslk\",\"hl\":\"ffeii\"},\"etag\":\"ez\",\"id\":\"shxmzsbbzoggigrx\",\"name\":\"burvjxxjnspy\",\"type\":\"ptkoenkoukn\"},{\"properties\":{\"provisioningState\":\"wtiukbldn\",\"appPackageUrl\":\"kpoc\",\"defaultParameterList\":{\"xoegukgjnpiucgy\":\"z\",\"zcdrqjsdpydnfyhx\":\"evqzntypmrbp\",\"ifsjttgzfbishcb\":\"eoejzic\"}},\"location\":\"ajdeyeamdphaga\",\"tags\":{\"ow\":\"uxwgipwho\",\"injep\":\"gshwankixz\"},\"etag\":\"tmryw\",\"id\":\"zoqftiyqzrnkcqvy\",\"name\":\"lwh\",\"type\":\"lsicohoqqnwv\"},{\"properties\":{\"provisioningState\":\"avwhheunm\",\"appPackageUrl\":\"qhgyxzkonocukok\",\"defaultParameterList\":{\"szfkbe\":\"xuconu\",\"jmwvvj\":\"pewr\"}},\"location\":\"tcxsenhwlrs\",\"tags\":{\"qdqgbi\":\"zpwv\",\"fcivfsnkym\":\"ylihkaetckt\",\"jf\":\"ctq\",\"fuwutttxf\":\"ebrjcxe\"},\"etag\":\"rbirphxe\",\"id\":\"yva\",\"name\":\"fnljky\",\"type\":\"xjvuujqgidokg\"},{\"properties\":{\"provisioningState\":\"yoxgvcltbgsnc\",\"appPackageUrl\":\"hkjeszzhbi\",\"defaultParameterList\":{\"mpvecxgodebfqk\":\"xfvgxbfsmxne\",\"flz\":\"rbmpukgri\"}},\"location\":\"bxzpuzycisp\",\"tags\":{\"y\":\"ahmgkbrp\",\"rgvtqag\":\"hibnuqqkpika\",\"bfs\":\"buynhijggm\",\"rcvpnazzmhjrunmp\":\"arbu\"},\"etag\":\"tdbhrbnla\",\"id\":\"xmyskp\",\"name\":\"henbtkcxywnytn\",\"type\":\"synlqidybyxczfc\"}],\"nextLink\":\"aaxdbabphlwrq\"}")
            .toObject(ApplicationTypeVersionResourceList.class);
        Assertions.assertEquals("sa", model.value().get(0).location());
        Assertions.assertEquals("ku", model.value().get(0).tags().get("foskghsauuimj"));
        Assertions.assertEquals("sllr", model.value().get(0).appPackageUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationTypeVersionResourceList model = new ApplicationTypeVersionResourceList().withValue(Arrays.asList(
            new ApplicationTypeVersionResourceInner().withLocation("sa")
                .withTags(mapOf("foskghsauuimj", "ku", "rfbyaosvexcso", "vxieduugidyj", "vleggzfbuhfmvfax",
                    "pclhocohslk", "hl", "ffeii"))
                .withAppPackageUrl("sllr"),
            new ApplicationTypeVersionResourceInner().withLocation("ajdeyeamdphaga")
                .withTags(mapOf("ow", "uxwgipwho", "injep", "gshwankixz")).withAppPackageUrl("kpoc"),
            new ApplicationTypeVersionResourceInner().withLocation("tcxsenhwlrs")
                .withTags(mapOf("qdqgbi", "zpwv", "fcivfsnkym", "ylihkaetckt", "jf", "ctq", "fuwutttxf", "ebrjcxe"))
                .withAppPackageUrl("qhgyxzkonocukok"),
            new ApplicationTypeVersionResourceInner().withLocation("bxzpuzycisp")
                .withTags(
                    mapOf("y", "ahmgkbrp", "rgvtqag", "hibnuqqkpika", "bfs", "buynhijggm", "rcvpnazzmhjrunmp", "arbu"))
                .withAppPackageUrl("hkjeszzhbi")));
        model = BinaryData.fromObject(model).toObject(ApplicationTypeVersionResourceList.class);
        Assertions.assertEquals("sa", model.value().get(0).location());
        Assertions.assertEquals("ku", model.value().get(0).tags().get("foskghsauuimj"));
        Assertions.assertEquals("sllr", model.value().get(0).appPackageUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
