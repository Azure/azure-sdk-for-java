// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationTypeResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationTypeResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationTypeResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"c\"},\"location\":\"xhvpmoue\",\"tags\":{\"xqbzvddntwnd\":\"zxibqeoj\",\"vuhrhcffcyddgl\":\"icbtwnpzao\",\"xmqci\":\"jthjqkwpyei\",\"hkh\":\"q\"},\"etag\":\"uigdtopbobjog\",\"id\":\"e\",\"name\":\"u\",\"type\":\"m\"}")
                .toObject(ApplicationTypeResourceInner.class);
        Assertions.assertEquals("xhvpmoue", model.location());
        Assertions.assertEquals("zxibqeoj", model.tags().get("xqbzvddntwnd"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationTypeResourceInner model =
            new ApplicationTypeResourceInner()
                .withLocation("xhvpmoue")
                .withTags(
                    mapOf(
                        "xqbzvddntwnd",
                        "zxibqeoj",
                        "vuhrhcffcyddgl",
                        "icbtwnpzao",
                        "xmqci",
                        "jthjqkwpyei",
                        "hkh",
                        "q"));
        model = BinaryData.fromObject(model).toObject(ApplicationTypeResourceInner.class);
        Assertions.assertEquals("xhvpmoue", model.location());
        Assertions.assertEquals("zxibqeoj", model.tags().get("xqbzvddntwnd"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
