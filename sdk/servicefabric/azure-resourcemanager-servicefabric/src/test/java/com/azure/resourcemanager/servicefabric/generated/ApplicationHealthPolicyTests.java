// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ServiceTypeHealthPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationHealthPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationHealthPolicy model = BinaryData.fromString(
            "{\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":186594005},\"serviceTypeHealthPolicies\":{\"bkzgcwrwclx\":{\"maxPercentUnhealthyServices\":2049117618},\"ljdousk\":{\"maxPercentUnhealthyServices\":562899344},\"kocrcjdkwtnhx\":{\"maxPercentUnhealthyServices\":874345897},\"biksq\":{\"maxPercentUnhealthyServices\":1299495603}}}")
            .toObject(ApplicationHealthPolicy.class);
        Assertions.assertEquals(186594005, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(2049117618,
            model.serviceTypeHealthPolicies().get("bkzgcwrwclx").maxPercentUnhealthyServices());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationHealthPolicy model
            = new ApplicationHealthPolicy()
                .withDefaultServiceTypeHealthPolicy(
                    new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(186594005))
                .withServiceTypeHealthPolicies(
                    mapOf("bkzgcwrwclx", new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2049117618),
                        "ljdousk", new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(562899344),
                        "kocrcjdkwtnhx", new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(874345897),
                        "biksq", new ServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1299495603)));
        model = BinaryData.fromObject(model).toObject(ApplicationHealthPolicy.class);
        Assertions.assertEquals(186594005, model.defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(2049117618,
            model.serviceTypeHealthPolicies().get("bkzgcwrwclx").maxPercentUnhealthyServices());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
