// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationResourceProperties;
import com.azure.resourcemanager.servicefabric.models.ApplicationMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabric.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabric.models.ArmApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmRollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmUpgradeFailureAction;
import com.azure.resourcemanager.servicefabric.models.RollingUpgradeMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"cugicjoox\",\"typeName\":\"ebwpucwwfvo\",\"typeVersion\":\"vmeueci\",\"parameters\":{\"ueiotwmcdyt\":\"zceuojgjrw\",\"it\":\"x\",\"hniskxfbkpyc\":\"nrjawgqwg\",\"l\":\"klwndnhjdauwhv\"},\"upgradePolicy\":{\"upgradeReplicaSetCheckTimeout\":\"tdhxujznbmpowuwp\",\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"alupjm\",\"healthCheckStableDuration\":\"fxobbcsws\",\"healthCheckRetryTimeout\":\"jriplrbpbewtghf\",\"upgradeTimeout\":\"lcgwxzvlvqh\",\"upgradeDomainTimeout\":\"begibtnmxiebwwa\"},\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":193613480,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":1214313613,\"maxPercentUnhealthyPartitionsPerService\":1999029226,\"maxPercentUnhealthyReplicasPerPartition\":350152394},\"serviceTypeHealthPolicyMap\":{\"xongmtsavjcbpwxq\":{\"maxPercentUnhealthyServices\":580617744,\"maxPercentUnhealthyPartitionsPerService\":1773507503,\"maxPercentUnhealthyReplicasPerPartition\":957944639},\"guvriuhprwmd\":{\"maxPercentUnhealthyServices\":2036529105,\"maxPercentUnhealthyPartitionsPerService\":899256068,\"maxPercentUnhealthyReplicasPerPartition\":168456950}}},\"upgradeMode\":\"UnmonitoredManual\",\"recreateApplication\":true},\"minimumNodes\":2034996394765032908,\"maximumNodes\":1536045625796396557,\"removeApplicationCapacity\":false,\"metrics\":[{\"name\":\"exrmcqibycnojvk\",\"maximumCapacity\":35726863806871709,\"reservationCapacity\":5974438687973844921,\"totalApplicationCapacity\":2641489064592308886}],\"managedIdentities\":[{\"name\":\"pjyzhpv\",\"principalId\":\"qzcjrvxdj\"}]}")
            .toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("vmeueci", model.typeVersion());
        Assertions.assertEquals("zceuojgjrw", model.parameters().get("ueiotwmcdyt"));
        Assertions.assertEquals("tdhxujznbmpowuwp", model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("alupjm",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("fxobbcsws",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("jriplrbpbewtghf",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("lcgwxzvlvqh", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("begibtnmxiebwwa",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(193613480,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1214313613, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1999029226, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(350152394, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(580617744, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("xongmtsavjcbpwxq").maxPercentUnhealthyServices());
        Assertions.assertEquals(1773507503, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("xongmtsavjcbpwxq").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(957944639, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("xongmtsavjcbpwxq").maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_MANUAL, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(true, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals(2034996394765032908L, model.minimumNodes());
        Assertions.assertEquals(1536045625796396557L, model.maximumNodes());
        Assertions.assertEquals(false, model.removeApplicationCapacity());
        Assertions.assertEquals("exrmcqibycnojvk", model.metrics().get(0).name());
        Assertions.assertEquals(35726863806871709L, model.metrics().get(0).maximumCapacity());
        Assertions.assertEquals(5974438687973844921L, model.metrics().get(0).reservationCapacity());
        Assertions.assertEquals(2641489064592308886L, model.metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("pjyzhpv", model.managedIdentities().get(0).name());
        Assertions.assertEquals("qzcjrvxdj", model.managedIdentities().get(0).principalId());
        Assertions.assertEquals("ebwpucwwfvo", model.typeName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceProperties model = new ApplicationResourceProperties().withTypeVersion("vmeueci")
            .withParameters(
                mapOf("ueiotwmcdyt", "zceuojgjrw", "it", "x", "hniskxfbkpyc", "nrjawgqwg", "l", "klwndnhjdauwhv"))
            .withUpgradePolicy(new ApplicationUpgradePolicy().withUpgradeReplicaSetCheckTimeout("tdhxujznbmpowuwp")
                .withForceRestart(true)
                .withRollingUpgradeMonitoringPolicy(new ArmRollingUpgradeMonitoringPolicy()
                    .withFailureAction(ArmUpgradeFailureAction.MANUAL).withHealthCheckWaitDuration("alupjm")
                    .withHealthCheckStableDuration("fxobbcsws").withHealthCheckRetryTimeout("jriplrbpbewtghf")
                    .withUpgradeTimeout("lcgwxzvlvqh").withUpgradeDomainTimeout("begibtnmxiebwwa"))
                .withApplicationHealthPolicy(new ArmApplicationHealthPolicy().withConsiderWarningAsError(true)
                    .withMaxPercentUnhealthyDeployedApplications(193613480)
                    .withDefaultServiceTypeHealthPolicy(
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1214313613)
                            .withMaxPercentUnhealthyPartitionsPerService(1999029226)
                            .withMaxPercentUnhealthyReplicasPerPartition(350152394))
                    .withServiceTypeHealthPolicyMap(mapOf("xongmtsavjcbpwxq",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(580617744)
                            .withMaxPercentUnhealthyPartitionsPerService(1773507503)
                            .withMaxPercentUnhealthyReplicasPerPartition(957944639),
                        "guvriuhprwmd",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(2036529105)
                            .withMaxPercentUnhealthyPartitionsPerService(899256068)
                            .withMaxPercentUnhealthyReplicasPerPartition(168456950))))
                .withUpgradeMode(RollingUpgradeMode.UNMONITORED_MANUAL).withRecreateApplication(true))
            .withMinimumNodes(2034996394765032908L).withMaximumNodes(1536045625796396557L)
            .withRemoveApplicationCapacity(false)
            .withMetrics(Arrays.asList(
                new ApplicationMetricDescription().withName("exrmcqibycnojvk").withMaximumCapacity(35726863806871709L)
                    .withReservationCapacity(5974438687973844921L).withTotalApplicationCapacity(2641489064592308886L)))
            .withManagedIdentities(
                Arrays.asList(new ApplicationUserAssignedIdentity().withName("pjyzhpv").withPrincipalId("qzcjrvxdj")))
            .withTypeName("ebwpucwwfvo");
        model = BinaryData.fromObject(model).toObject(ApplicationResourceProperties.class);
        Assertions.assertEquals("vmeueci", model.typeVersion());
        Assertions.assertEquals("zceuojgjrw", model.parameters().get("ueiotwmcdyt"));
        Assertions.assertEquals("tdhxujznbmpowuwp", model.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.MANUAL,
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("alupjm",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("fxobbcsws",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("jriplrbpbewtghf",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("lcgwxzvlvqh", model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("begibtnmxiebwwa",
            model.upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(true, model.upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(193613480,
            model.upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(1214313613, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1999029226, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(350152394, model.upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(580617744, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("xongmtsavjcbpwxq").maxPercentUnhealthyServices());
        Assertions.assertEquals(1773507503, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("xongmtsavjcbpwxq").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(957944639, model.upgradePolicy().applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("xongmtsavjcbpwxq").maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_MANUAL, model.upgradePolicy().upgradeMode());
        Assertions.assertEquals(true, model.upgradePolicy().recreateApplication());
        Assertions.assertEquals(2034996394765032908L, model.minimumNodes());
        Assertions.assertEquals(1536045625796396557L, model.maximumNodes());
        Assertions.assertEquals(false, model.removeApplicationCapacity());
        Assertions.assertEquals("exrmcqibycnojvk", model.metrics().get(0).name());
        Assertions.assertEquals(35726863806871709L, model.metrics().get(0).maximumCapacity());
        Assertions.assertEquals(5974438687973844921L, model.metrics().get(0).reservationCapacity());
        Assertions.assertEquals(2641489064592308886L, model.metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("pjyzhpv", model.managedIdentities().get(0).name());
        Assertions.assertEquals("qzcjrvxdj", model.managedIdentities().get(0).principalId());
        Assertions.assertEquals("ebwpucwwfvo", model.typeName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
