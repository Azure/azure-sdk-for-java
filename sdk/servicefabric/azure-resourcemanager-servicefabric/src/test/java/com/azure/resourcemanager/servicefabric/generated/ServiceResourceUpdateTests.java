// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceResourceUpdate;
import com.azure.resourcemanager.servicefabric.models.ServiceResourceUpdateProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceUpdate model = BinaryData.fromString(
            "{\"properties\":{\"serviceKind\":\"ServiceResourceUpdateProperties\",\"placementConstraints\":\"priolx\",\"correlationScheme\":[{\"scheme\":\"Affinity\",\"serviceName\":\"lt\"},{\"scheme\":\"Affinity\",\"serviceName\":\"mncwsobqwcsdb\"},{\"scheme\":\"NonAlignedAffinity\",\"serviceName\":\"dcfhucqdpf\"}],\"serviceLoadMetrics\":[{\"name\":\"lsbjjcanvxbv\",\"weight\":\"Low\",\"primaryDefaultLoad\":1741162391,\"secondaryDefaultLoad\":1347837415,\"defaultLoad\":1940918804},{\"name\":\"rmrlxqtvcof\",\"weight\":\"Zero\",\"primaryDefaultLoad\":573023383,\"secondaryDefaultLoad\":360831817,\"defaultLoad\":264333959}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Medium\"},\"location\":\"nqvsaznqnto\",\"tags\":{\"uwjuetaeburuvdmo\":\"sgsahmkycgr\"},\"etag\":\"mz\",\"id\":\"wabm\",\"name\":\"oefki\",\"type\":\"rvtp\"}")
            .toObject(ServiceResourceUpdate.class);
        Assertions.assertEquals("priolx", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.AFFINITY,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("lt", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("lsbjjcanvxbv", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1741162391, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1347837415, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1940918804, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.properties().defaultMoveCost());
        Assertions.assertEquals("nqvsaznqnto", model.location());
        Assertions.assertEquals("sgsahmkycgr", model.tags().get("uwjuetaeburuvdmo"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceUpdate model = new ServiceResourceUpdate().withProperties(new ServiceResourceUpdateProperties()
            .withPlacementConstraints("priolx")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY).withServiceName("lt"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY)
                    .withServiceName("mncwsobqwcsdb"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.NON_ALIGNED_AFFINITY)
                    .withServiceName("dcfhucqdpf")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetricDescription().withName("lsbjjcanvxbv").withWeight(ServiceLoadMetricWeight.LOW)
                    .withPrimaryDefaultLoad(1741162391).withSecondaryDefaultLoad(1347837415)
                    .withDefaultLoad(1940918804),
                new ServiceLoadMetricDescription().withName("rmrlxqtvcof").withWeight(ServiceLoadMetricWeight.ZERO)
                    .withPrimaryDefaultLoad(573023383).withSecondaryDefaultLoad(360831817).withDefaultLoad(264333959)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
            .withDefaultMoveCost(MoveCost.MEDIUM)).withLocation("nqvsaznqnto")
            .withTags(mapOf("uwjuetaeburuvdmo", "sgsahmkycgr"));
        model = BinaryData.fromObject(model).toObject(ServiceResourceUpdate.class);
        Assertions.assertEquals("priolx", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.AFFINITY,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("lt", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("lsbjjcanvxbv", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1741162391, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1347837415, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1940918804, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.properties().defaultMoveCost());
        Assertions.assertEquals("nqvsaznqnto", model.location());
        Assertions.assertEquals("sgsahmkycgr", model.tags().get("uwjuetaeburuvdmo"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
