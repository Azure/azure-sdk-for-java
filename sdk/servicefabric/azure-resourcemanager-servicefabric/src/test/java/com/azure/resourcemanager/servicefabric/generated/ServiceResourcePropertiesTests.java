// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.PartitionSchemeDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceResourceProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourcePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"iilivpdtiirqtd\",\"serviceTypeName\":\"axoruzfgsquy\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"l\",\"placementConstraints\":\"tramxjez\",\"correlationScheme\":[{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"wxuqlcvydypatdoo\"},{\"scheme\":\"Affinity\",\"serviceName\":\"jkniodko\"},{\"scheme\":\"Affinity\",\"serviceName\":\"bw\"}],\"serviceLoadMetrics\":[{\"name\":\"hemms\",\"weight\":\"Low\",\"primaryDefaultLoad\":145685509,\"secondaryDefaultLoad\":1224512622,\"defaultLoad\":1242300027},{\"name\":\"jinfw\",\"weight\":\"Low\",\"primaryDefaultLoad\":1139569570,\"secondaryDefaultLoad\":2134484633,\"defaultLoad\":1895840108}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Low\"}")
            .toObject(ServiceResourceProperties.class);
        Assertions.assertEquals("tramxjez", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("wxuqlcvydypatdoo", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("hemms", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(145685509, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1224512622, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1242300027, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, model.defaultMoveCost());
        Assertions.assertEquals("axoruzfgsquy", model.serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.SHARED_PROCESS, model.servicePackageActivationMode());
        Assertions.assertEquals("l", model.serviceDnsName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceProperties model = new ServiceResourceProperties().withPlacementConstraints("tramxjez")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY)
                    .withServiceName("wxuqlcvydypatdoo"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY)
                    .withServiceName("jkniodko"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY)
                    .withServiceName("bw")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetricDescription().withName("hemms").withWeight(ServiceLoadMetricWeight.LOW)
                    .withPrimaryDefaultLoad(145685509).withSecondaryDefaultLoad(1224512622).withDefaultLoad(1242300027),
                new ServiceLoadMetricDescription().withName("jinfw").withWeight(ServiceLoadMetricWeight.LOW)
                    .withPrimaryDefaultLoad(1139569570).withSecondaryDefaultLoad(2134484633)
                    .withDefaultLoad(1895840108)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
            .withDefaultMoveCost(MoveCost.LOW).withServiceTypeName("axoruzfgsquy")
            .withPartitionDescription(new PartitionSchemeDescription())
            .withServicePackageActivationMode(ArmServicePackageActivationMode.SHARED_PROCESS).withServiceDnsName("l");
        model = BinaryData.fromObject(model).toObject(ServiceResourceProperties.class);
        Assertions.assertEquals("tramxjez", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.ALIGNED_AFFINITY, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("wxuqlcvydypatdoo", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("hemms", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(145685509, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1224512622, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1242300027, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, model.defaultMoveCost());
        Assertions.assertEquals("axoruzfgsquy", model.serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.SHARED_PROCESS, model.servicePackageActivationMode());
        Assertions.assertEquals("l", model.serviceDnsName());
    }
}
