// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.StatefulServiceUpdateProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatefulServiceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatefulServiceUpdateProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"Stateful\",\"targetReplicaSetSize\":481709550,\"minReplicaSetSize\":1948740846,\"replicaRestartWaitDuration\":\"2021-09-27T12:02:20Z\",\"quorumLossWaitDuration\":\"2021-10-12T10:01:16Z\",\"standByReplicaKeepDuration\":\"2020-12-23T03:39:10Z\",\"placementConstraints\":\"wyt\",\"correlationScheme\":[{\"scheme\":\"Invalid\",\"serviceName\":\"ircgpikpz\"}],\"serviceLoadMetrics\":[{\"name\":\"j\",\"weight\":\"Medium\",\"primaryDefaultLoad\":108512766,\"secondaryDefaultLoad\":453149058,\"defaultLoad\":386879497},{\"name\":\"vrmbzono\",\"weight\":\"High\",\"primaryDefaultLoad\":485732763,\"secondaryDefaultLoad\":1432241544,\"defaultLoad\":749799353}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Zero\"}")
            .toObject(StatefulServiceUpdateProperties.class);
        Assertions.assertEquals("wyt", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("ircgpikpz", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("j", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(108512766, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(453149058, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(386879497, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.ZERO, model.defaultMoveCost());
        Assertions.assertEquals(481709550, model.targetReplicaSetSize());
        Assertions.assertEquals(1948740846, model.minReplicaSetSize());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-27T12:02:20Z"), model.replicaRestartWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T10:01:16Z"), model.quorumLossWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T03:39:10Z"), model.standByReplicaKeepDuration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatefulServiceUpdateProperties model = new StatefulServiceUpdateProperties().withPlacementConstraints("wyt")
            .withCorrelationScheme(Arrays.asList(new ServiceCorrelationDescription()
                .withScheme(ServiceCorrelationScheme.INVALID).withServiceName("ircgpikpz")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetricDescription().withName("j").withWeight(ServiceLoadMetricWeight.MEDIUM)
                    .withPrimaryDefaultLoad(108512766).withSecondaryDefaultLoad(453149058).withDefaultLoad(386879497),
                new ServiceLoadMetricDescription().withName("vrmbzono").withWeight(ServiceLoadMetricWeight.HIGH)
                    .withPrimaryDefaultLoad(485732763).withSecondaryDefaultLoad(1432241544).withDefaultLoad(749799353)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
            .withDefaultMoveCost(MoveCost.ZERO).withTargetReplicaSetSize(481709550).withMinReplicaSetSize(1948740846)
            .withReplicaRestartWaitDuration(OffsetDateTime.parse("2021-09-27T12:02:20Z"))
            .withQuorumLossWaitDuration(OffsetDateTime.parse("2021-10-12T10:01:16Z"))
            .withStandByReplicaKeepDuration(OffsetDateTime.parse("2020-12-23T03:39:10Z"));
        model = BinaryData.fromObject(model).toObject(StatefulServiceUpdateProperties.class);
        Assertions.assertEquals("wyt", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("ircgpikpz", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("j", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(108512766, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(453149058, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(386879497, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.ZERO, model.defaultMoveCost());
        Assertions.assertEquals(481709550, model.targetReplicaSetSize());
        Assertions.assertEquals(1948740846, model.minReplicaSetSize());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-27T12:02:20Z"), model.replicaRestartWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-12T10:01:16Z"), model.quorumLossWaitDuration());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T03:39:10Z"), model.standByReplicaKeepDuration());
    }
}
