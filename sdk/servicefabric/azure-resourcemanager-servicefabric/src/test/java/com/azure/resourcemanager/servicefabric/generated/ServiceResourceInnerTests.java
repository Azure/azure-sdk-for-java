// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ServiceResourceInner;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.PartitionSchemeDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceResourceProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServiceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"varmywdmj\",\"serviceTypeName\":\"q\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"x\",\"placementConstraints\":\"wlycoduhpkxkg\",\"correlationScheme\":[{\"scheme\":\"Invalid\",\"serviceName\":\"eqnajxqugjhkycu\"},{\"scheme\":\"AlignedAffinity\",\"serviceName\":\"ddg\"}],\"serviceLoadMetrics\":[{\"name\":\"fwqmzqalkrmn\",\"weight\":\"Low\",\"primaryDefaultLoad\":988494266,\"secondaryDefaultLoad\":1400063393,\"defaultLoad\":935480812}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Medium\"},\"location\":\"yxbaaabjyvayf\",\"tags\":{\"evfdnwnwm\":\"rzrtuzqogsex\"},\"etag\":\"zsyyceuzso\",\"id\":\"judpfrxt\",\"name\":\"thzvaytdwkqbrqu\",\"type\":\"paxh\"}")
            .toObject(ServiceResourceInner.class);
        Assertions.assertEquals("wlycoduhpkxkg", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("eqnajxqugjhkycu", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("fwqmzqalkrmn", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(988494266, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1400063393, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(935480812, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.properties().defaultMoveCost());
        Assertions.assertEquals("q", model.properties().serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.properties().servicePackageActivationMode());
        Assertions.assertEquals("x", model.properties().serviceDnsName());
        Assertions.assertEquals("yxbaaabjyvayf", model.location());
        Assertions.assertEquals("rzrtuzqogsex", model.tags().get("evfdnwnwm"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceResourceInner model = new ServiceResourceInner().withProperties(new ServiceResourceProperties()
            .withPlacementConstraints("wlycoduhpkxkg")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.INVALID)
                    .withServiceName("eqnajxqugjhkycu"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.ALIGNED_AFFINITY)
                    .withServiceName("ddg")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetricDescription().withName("fwqmzqalkrmn").withWeight(ServiceLoadMetricWeight.LOW)
                    .withPrimaryDefaultLoad(988494266).withSecondaryDefaultLoad(1400063393).withDefaultLoad(935480812)))
            .withServicePlacementPolicies(
                Arrays.asList(new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription(),
                    new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
            .withDefaultMoveCost(MoveCost.MEDIUM).withServiceTypeName("q")
            .withPartitionDescription(new PartitionSchemeDescription())
            .withServicePackageActivationMode(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS)
            .withServiceDnsName("x")).withLocation("yxbaaabjyvayf").withTags(mapOf("evfdnwnwm", "rzrtuzqogsex"));
        model = BinaryData.fromObject(model).toObject(ServiceResourceInner.class);
        Assertions.assertEquals("wlycoduhpkxkg", model.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID,
            model.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("eqnajxqugjhkycu", model.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("fwqmzqalkrmn", model.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.LOW, model.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(988494266, model.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1400063393, model.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(935480812, model.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.MEDIUM, model.properties().defaultMoveCost());
        Assertions.assertEquals("q", model.properties().serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.properties().servicePackageActivationMode());
        Assertions.assertEquals("x", model.properties().serviceDnsName());
        Assertions.assertEquals("yxbaaabjyvayf", model.location());
        Assertions.assertEquals("rzrtuzqogsex", model.tags().get("evfdnwnwm"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
