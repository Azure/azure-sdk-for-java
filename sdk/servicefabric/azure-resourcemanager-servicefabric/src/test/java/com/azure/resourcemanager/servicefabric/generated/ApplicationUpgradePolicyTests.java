// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabric.models.ArmApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmRollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmUpgradeFailureAction;
import com.azure.resourcemanager.servicefabric.models.RollingUpgradeMode;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationUpgradePolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationUpgradePolicy model = BinaryData.fromString(
            "{\"upgradeReplicaSetCheckTimeout\":\"grcfb\",\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"hhkxbp\",\"healthCheckStableDuration\":\"ymjhxxjyngudivkr\",\"healthCheckRetryTimeout\":\"wbxqzvszjfau\",\"upgradeTimeout\":\"fdxxivetvtcqaqtd\",\"upgradeDomainTimeout\":\"mcbxvwvxysl\"},\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":263048903,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":693295515,\"maxPercentUnhealthyPartitionsPerService\":527643920,\"maxPercentUnhealthyReplicasPerPartition\":2053949685},\"serviceTypeHealthPolicyMap\":{\"bkrvrnsvshqj\":{\"maxPercentUnhealthyServices\":1336387683,\"maxPercentUnhealthyPartitionsPerService\":1562521656,\"maxPercentUnhealthyReplicasPerPartition\":520113589}}},\"upgradeMode\":\"Invalid\",\"recreateApplication\":true}")
            .toObject(ApplicationUpgradePolicy.class);
        Assertions.assertEquals("grcfb", model.upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.MANUAL, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("hhkxbp", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ymjhxxjyngudivkr", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("wbxqzvszjfau", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("fdxxivetvtcqaqtd", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("mcbxvwvxysl", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(false, model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(263048903, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(693295515,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(527643920,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2053949685,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1336387683, model.applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("bkrvrnsvshqj").maxPercentUnhealthyServices());
        Assertions.assertEquals(1562521656, model.applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("bkrvrnsvshqj").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(520113589, model.applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("bkrvrnsvshqj").maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.INVALID, model.upgradeMode());
        Assertions.assertEquals(true, model.recreateApplication());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationUpgradePolicy model
            = new ApplicationUpgradePolicy().withUpgradeReplicaSetCheckTimeout("grcfb").withForceRestart(true)
                .withRollingUpgradeMonitoringPolicy(new ArmRollingUpgradeMonitoringPolicy()
                    .withFailureAction(ArmUpgradeFailureAction.MANUAL).withHealthCheckWaitDuration("hhkxbp")
                    .withHealthCheckStableDuration("ymjhxxjyngudivkr").withHealthCheckRetryTimeout("wbxqzvszjfau")
                    .withUpgradeTimeout("fdxxivetvtcqaqtd").withUpgradeDomainTimeout("mcbxvwvxysl"))
                .withApplicationHealthPolicy(new ArmApplicationHealthPolicy().withConsiderWarningAsError(false)
                    .withMaxPercentUnhealthyDeployedApplications(263048903)
                    .withDefaultServiceTypeHealthPolicy(
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(693295515)
                            .withMaxPercentUnhealthyPartitionsPerService(527643920)
                            .withMaxPercentUnhealthyReplicasPerPartition(2053949685))
                    .withServiceTypeHealthPolicyMap(mapOf("bkrvrnsvshqj",
                        new ArmServiceTypeHealthPolicy().withMaxPercentUnhealthyServices(1336387683)
                            .withMaxPercentUnhealthyPartitionsPerService(1562521656)
                            .withMaxPercentUnhealthyReplicasPerPartition(520113589))))
                .withUpgradeMode(RollingUpgradeMode.INVALID).withRecreateApplication(true);
        model = BinaryData.fromObject(model).toObject(ApplicationUpgradePolicy.class);
        Assertions.assertEquals("grcfb", model.upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.MANUAL, model.rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("hhkxbp", model.rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ymjhxxjyngudivkr", model.rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("wbxqzvszjfau", model.rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("fdxxivetvtcqaqtd", model.rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("mcbxvwvxysl", model.rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(false, model.applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(263048903, model.applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(693295515,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(527643920,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(2053949685,
            model.applicationHealthPolicy().defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(1336387683, model.applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("bkrvrnsvshqj").maxPercentUnhealthyServices());
        Assertions.assertEquals(1562521656, model.applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("bkrvrnsvshqj").maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(520113589, model.applicationHealthPolicy().serviceTypeHealthPolicyMap()
            .get("bkrvrnsvshqj").maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.INVALID, model.upgradeMode());
        Assertions.assertEquals(true, model.recreateApplication());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
