// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationResourceInner;
import com.azure.resourcemanager.servicefabric.models.ApplicationMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ApplicationResourceList;
import com.azure.resourcemanager.servicefabric.models.ApplicationUpgradePolicy;
import com.azure.resourcemanager.servicefabric.models.ApplicationUserAssignedIdentity;
import com.azure.resourcemanager.servicefabric.models.ArmApplicationHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmRollingUpgradeMonitoringPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmServiceTypeHealthPolicy;
import com.azure.resourcemanager.servicefabric.models.ArmUpgradeFailureAction;
import com.azure.resourcemanager.servicefabric.models.ManagedIdentity;
import com.azure.resourcemanager.servicefabric.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabric.models.RollingUpgradeMode;
import com.azure.resourcemanager.servicefabric.models.UserAssignedIdentity;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationResourceList model = BinaryData.fromString(
            "{\"value\":[{\"identity\":{\"principalId\":\"tiiswacffg\",\"tenantId\":\"zzewkfvhqcrai\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"nedgfbc\":{\"principalId\":\"fuflrwdmhdlx\",\"clientId\":\"rxsagafcnihgwqa\"},\"pcjwv\":{\"principalId\":\"cvqvpkeqdcv\",\"clientId\":\"hvoodsotbobzd\"}}},\"properties\":{\"provisioningState\":\"ld\",\"typeName\":\"gx\",\"typeVersion\":\"rslpmutwuoeg\",\"parameters\":{\"dggkzzlvmbmpa\":\"hjwniyqsluic\",\"yhrfouyftaakcpw\":\"modfvuefywsbpfvm\"},\"upgradePolicy\":{\"upgradeReplicaSetCheckTimeout\":\"vqtmnub\",\"forceRestart\":true,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"mond\",\"healthCheckStableDuration\":\"quxvypomgkop\",\"healthCheckRetryTimeout\":\"hojvpajqgxysmocm\",\"upgradeTimeout\":\"fqvm\",\"upgradeDomainTimeout\":\"xozap\"},\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1480663750,\"defaultServiceTypeHealthPolicy\":{},\"serviceTypeHealthPolicyMap\":{\"yat\":{}}},\"upgradeMode\":\"Invalid\",\"recreateApplication\":true},\"minimumNodes\":1605920653761823709,\"maximumNodes\":7850386713816708447,\"removeApplicationCapacity\":false,\"metrics\":[{\"name\":\"qibrhosxsdqrhzoy\",\"maximumCapacity\":3759620620672585271,\"reservationCapacity\":4538636180382407268,\"totalApplicationCapacity\":5977240495404401854},{\"name\":\"wfluszdt\",\"maximumCapacity\":2447311563304363726,\"reservationCapacity\":2614637191948743156,\"totalApplicationCapacity\":5459563894986340273},{\"name\":\"qacpiex\",\"maximumCapacity\":1588065972663705215,\"reservationCapacity\":4540666018291396484,\"totalApplicationCapacity\":8211205854755134512}],\"managedIdentities\":[{\"name\":\"ashrt\",\"principalId\":\"tkcnqxwb\"},{\"name\":\"okulpiujwa\",\"principalId\":\"sipqii\"}]},\"location\":\"yuq\",\"tags\":{\"bdbutauvf\":\"qlpqwcciuq\",\"afnn\":\"tkuwhhmhykojo\"},\"etag\":\"pichkoymkcdy\",\"id\":\"pkkpw\",\"name\":\"reqnovvqfov\",\"type\":\"jxywsuws\"},{\"identity\":{\"principalId\":\"ndsytgadg\",\"tenantId\":\"aeaeneqnzarrw\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ibwwiftohqkv\":{\"principalId\":\"fqka\",\"clientId\":\"wiipfpub\"},\"ntorzihleosjswsr\":{\"principalId\":\"vksgplsaknynfsy\",\"clientId\":\"jphuopxodlqi\"},\"zynkedya\":{\"principalId\":\"lyzrpzbchckqqzqi\",\"clientId\":\"iysui\"},\"pcdpumnz\":{\"principalId\":\"wyhqmibzyhwits\",\"clientId\":\"pyy\"}}},\"properties\":{\"provisioningState\":\"z\",\"typeName\":\"abikns\",\"typeVersion\":\"gj\",\"parameters\":{\"kdmtncvokotll\":\"ldtlwwr\",\"h\":\"d\"},\"upgradePolicy\":{\"upgradeReplicaSetCheckTimeout\":\"ocogj\",\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Rollback\",\"healthCheckWaitDuration\":\"hadoocrk\",\"healthCheckStableDuration\":\"ikhnvpamqgxqq\",\"healthCheckRetryTimeout\":\"zikywgg\",\"upgradeTimeout\":\"allatmelwuipic\",\"upgradeDomainTimeout\":\"zkzivgvvcnay\"},\"applicationHealthPolicy\":{\"considerWarningAsError\":true,\"maxPercentUnhealthyDeployedApplications\":1925040131,\"defaultServiceTypeHealthPolicy\":{},\"serviceTypeHealthPolicyMap\":{\"eedndrdvstkwqqtc\":{},\"ealmfmtdaaygdvwv\":{},\"piohgwxrtfu\":{}}},\"upgradeMode\":\"UnmonitoredManual\",\"recreateApplication\":false},\"minimumNodes\":8172843567981740181,\"maximumNodes\":2498438211029299669,\"removeApplicationCapacity\":true,\"metrics\":[{\"name\":\"k\",\"maximumCapacity\":8969085063650197756,\"reservationCapacity\":3507174744748509441,\"totalApplicationCapacity\":2732082136167741922},{\"name\":\"wi\",\"maximumCapacity\":4495232285451293451,\"reservationCapacity\":7729076180734759194,\"totalApplicationCapacity\":6240929679987561692},{\"name\":\"zk\",\"maximumCapacity\":7589435135200737860,\"reservationCapacity\":1171909706909522221,\"totalApplicationCapacity\":8338807266312513089},{\"name\":\"kf\",\"maximumCapacity\":6566365320530486008,\"reservationCapacity\":488040231209258224,\"totalApplicationCapacity\":2753110503115800438}],\"managedIdentities\":[{\"name\":\"elpcirelsfeaenwa\",\"principalId\":\"fatkld\"}]},\"location\":\"bjhwuaan\",\"tags\":{\"jrvxaglrv\":\"osphyoul\"},\"etag\":\"jwosytxitcskfck\",\"id\":\"umiekkezzi\",\"name\":\"hlyfjhdgqgg\",\"type\":\"bdunygaeqid\"}],\"nextLink\":\"fatpxllrxcyjmoa\"}")
            .toObject(ApplicationResourceList.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("yuq", model.value().get(0).location());
        Assertions.assertEquals("qlpqwcciuq", model.value().get(0).tags().get("bdbutauvf"));
        Assertions.assertEquals("gx", model.value().get(0).typeName());
        Assertions.assertEquals("rslpmutwuoeg", model.value().get(0).typeVersion());
        Assertions.assertEquals("hjwniyqsluic", model.value().get(0).parameters().get("dggkzzlvmbmpa"));
        Assertions.assertEquals("vqtmnub", model.value().get(0).upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.value().get(0).upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.ROLLBACK,
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("mond",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("quxvypomgkop",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("hojvpajqgxysmocm",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("fqvm",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("xozap",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(true,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1480663750,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(RollingUpgradeMode.INVALID, model.value().get(0).upgradePolicy().upgradeMode());
        Assertions.assertEquals(true, model.value().get(0).upgradePolicy().recreateApplication());
        Assertions.assertEquals(1605920653761823709L, model.value().get(0).minimumNodes());
        Assertions.assertEquals(7850386713816708447L, model.value().get(0).maximumNodes());
        Assertions.assertEquals(false, model.value().get(0).removeApplicationCapacity());
        Assertions.assertEquals("qibrhosxsdqrhzoy", model.value().get(0).metrics().get(0).name());
        Assertions.assertEquals(3759620620672585271L, model.value().get(0).metrics().get(0).maximumCapacity());
        Assertions.assertEquals(4538636180382407268L, model.value().get(0).metrics().get(0).reservationCapacity());
        Assertions.assertEquals(5977240495404401854L, model.value().get(0).metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("ashrt", model.value().get(0).managedIdentities().get(0).name());
        Assertions.assertEquals("tkcnqxwb", model.value().get(0).managedIdentities().get(0).principalId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationResourceList model
            = new ApplicationResourceList()
                .withValue(
                    Arrays
                        .asList(
                            new ApplicationResourceInner()
                                .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.USER_ASSIGNED)
                                    .withUserAssignedIdentities(mapOf("nedgfbc", new UserAssignedIdentity(), "pcjwv",
                                        new UserAssignedIdentity())))
                                .withLocation("yuq").withTags(
                                    mapOf("bdbutauvf", "qlpqwcciuq", "afnn", "tkuwhhmhykojo"))
                                .withTypeName("gx").withTypeVersion("rslpmutwuoeg")
                                .withParameters(
                                    mapOf("dggkzzlvmbmpa", "hjwniyqsluic", "yhrfouyftaakcpw", "modfvuefywsbpfvm"))
                                .withUpgradePolicy(new ApplicationUpgradePolicy()
                                    .withUpgradeReplicaSetCheckTimeout("vqtmnub").withForceRestart(true)
                                    .withRollingUpgradeMonitoringPolicy(new ArmRollingUpgradeMonitoringPolicy()
                                        .withFailureAction(ArmUpgradeFailureAction.ROLLBACK)
                                        .withHealthCheckWaitDuration("mond")
                                        .withHealthCheckStableDuration("quxvypomgkop")
                                        .withHealthCheckRetryTimeout("hojvpajqgxysmocm").withUpgradeTimeout("fqvm")
                                        .withUpgradeDomainTimeout("xozap"))
                                    .withApplicationHealthPolicy(new ArmApplicationHealthPolicy()
                                        .withConsiderWarningAsError(true)
                                        .withMaxPercentUnhealthyDeployedApplications(1480663750)
                                        .withDefaultServiceTypeHealthPolicy(new ArmServiceTypeHealthPolicy())
                                        .withServiceTypeHealthPolicyMap(mapOf("yat", new ArmServiceTypeHealthPolicy())))
                                    .withUpgradeMode(RollingUpgradeMode.INVALID).withRecreateApplication(true))
                                .withMinimumNodes(1605920653761823709L).withMaximumNodes(7850386713816708447L)
                                .withRemoveApplicationCapacity(false)
                                .withMetrics(Arrays.asList(
                                    new ApplicationMetricDescription().withName("qibrhosxsdqrhzoy")
                                        .withMaximumCapacity(3759620620672585271L)
                                        .withReservationCapacity(4538636180382407268L)
                                        .withTotalApplicationCapacity(5977240495404401854L),
                                    new ApplicationMetricDescription().withName("wfluszdt")
                                        .withMaximumCapacity(2447311563304363726L)
                                        .withReservationCapacity(2614637191948743156L)
                                        .withTotalApplicationCapacity(5459563894986340273L),
                                    new ApplicationMetricDescription().withName("qacpiex")
                                        .withMaximumCapacity(1588065972663705215L)
                                        .withReservationCapacity(4540666018291396484L)
                                        .withTotalApplicationCapacity(8211205854755134512L)))
                                .withManagedIdentities(Arrays.asList(
                                    new ApplicationUserAssignedIdentity().withName("ashrt").withPrincipalId("tkcnqxwb"),
                                    new ApplicationUserAssignedIdentity().withName("okulpiujwa")
                                        .withPrincipalId("sipqii"))),
                            new ApplicationResourceInner()
                                .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                                    .withUserAssignedIdentities(mapOf("ibwwiftohqkv", new UserAssignedIdentity(),
                                        "ntorzihleosjswsr", new UserAssignedIdentity(), "zynkedya",
                                        new UserAssignedIdentity(), "pcdpumnz", new UserAssignedIdentity())))
                                .withLocation("bjhwuaan").withTags(mapOf("jrvxaglrv", "osphyoul"))
                                .withTypeName("abikns").withTypeVersion("gj")
                                .withParameters(mapOf("kdmtncvokotll", "ldtlwwr", "h", "d"))
                                .withUpgradePolicy(new ApplicationUpgradePolicy()
                                    .withUpgradeReplicaSetCheckTimeout("ocogj").withForceRestart(false)
                                    .withRollingUpgradeMonitoringPolicy(new ArmRollingUpgradeMonitoringPolicy()
                                        .withFailureAction(ArmUpgradeFailureAction.ROLLBACK)
                                        .withHealthCheckWaitDuration("hadoocrk")
                                        .withHealthCheckStableDuration("ikhnvpamqgxqq")
                                        .withHealthCheckRetryTimeout("zikywgg").withUpgradeTimeout("allatmelwuipic")
                                        .withUpgradeDomainTimeout("zkzivgvvcnay"))
                                    .withApplicationHealthPolicy(
                                        new ArmApplicationHealthPolicy().withConsiderWarningAsError(true)
                                            .withMaxPercentUnhealthyDeployedApplications(1925040131)
                                            .withDefaultServiceTypeHealthPolicy(new ArmServiceTypeHealthPolicy())
                                            .withServiceTypeHealthPolicyMap(
                                                mapOf("eedndrdvstkwqqtc", new ArmServiceTypeHealthPolicy(),
                                                    "ealmfmtdaaygdvwv", new ArmServiceTypeHealthPolicy(), "piohgwxrtfu",
                                                    new ArmServiceTypeHealthPolicy())))
                                    .withUpgradeMode(RollingUpgradeMode.UNMONITORED_MANUAL)
                                    .withRecreateApplication(false))
                                .withMinimumNodes(8172843567981740181L).withMaximumNodes(2498438211029299669L)
                                .withRemoveApplicationCapacity(true)
                                .withMetrics(Arrays.asList(
                                    new ApplicationMetricDescription().withName("k")
                                        .withMaximumCapacity(8969085063650197756L)
                                        .withReservationCapacity(3507174744748509441L)
                                        .withTotalApplicationCapacity(2732082136167741922L),
                                    new ApplicationMetricDescription().withName("wi")
                                        .withMaximumCapacity(4495232285451293451L)
                                        .withReservationCapacity(7729076180734759194L)
                                        .withTotalApplicationCapacity(6240929679987561692L),
                                    new ApplicationMetricDescription().withName("zk")
                                        .withMaximumCapacity(7589435135200737860L)
                                        .withReservationCapacity(1171909706909522221L)
                                        .withTotalApplicationCapacity(8338807266312513089L),
                                    new ApplicationMetricDescription().withName("kf")
                                        .withMaximumCapacity(6566365320530486008L)
                                        .withReservationCapacity(488040231209258224L)
                                        .withTotalApplicationCapacity(2753110503115800438L)))
                                .withManagedIdentities(Arrays.asList(new ApplicationUserAssignedIdentity()
                                    .withName("elpcirelsfeaenwa").withPrincipalId("fatkld")))));
        model = BinaryData.fromObject(model).toObject(ApplicationResourceList.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("yuq", model.value().get(0).location());
        Assertions.assertEquals("qlpqwcciuq", model.value().get(0).tags().get("bdbutauvf"));
        Assertions.assertEquals("gx", model.value().get(0).typeName());
        Assertions.assertEquals("rslpmutwuoeg", model.value().get(0).typeVersion());
        Assertions.assertEquals("hjwniyqsluic", model.value().get(0).parameters().get("dggkzzlvmbmpa"));
        Assertions.assertEquals("vqtmnub", model.value().get(0).upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, model.value().get(0).upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.ROLLBACK,
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("mond",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("quxvypomgkop",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("hojvpajqgxysmocm",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("fqvm",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("xozap",
            model.value().get(0).upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(true,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(1480663750,
            model.value().get(0).upgradePolicy().applicationHealthPolicy().maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(RollingUpgradeMode.INVALID, model.value().get(0).upgradePolicy().upgradeMode());
        Assertions.assertEquals(true, model.value().get(0).upgradePolicy().recreateApplication());
        Assertions.assertEquals(1605920653761823709L, model.value().get(0).minimumNodes());
        Assertions.assertEquals(7850386713816708447L, model.value().get(0).maximumNodes());
        Assertions.assertEquals(false, model.value().get(0).removeApplicationCapacity());
        Assertions.assertEquals("qibrhosxsdqrhzoy", model.value().get(0).metrics().get(0).name());
        Assertions.assertEquals(3759620620672585271L, model.value().get(0).metrics().get(0).maximumCapacity());
        Assertions.assertEquals(4538636180382407268L, model.value().get(0).metrics().get(0).reservationCapacity());
        Assertions.assertEquals(5977240495404401854L, model.value().get(0).metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("ashrt", model.value().get(0).managedIdentities().get(0).name());
        Assertions.assertEquals("tkcnqxwb", model.value().get(0).managedIdentities().get(0).principalId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
