// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.PartitionSchemeDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.StatelessServiceProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatelessServicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatelessServiceProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"Stateless\",\"instanceCount\":1656770527,\"instanceCloseDelayDuration\":\"zszrnwoiindfpw\",\"provisioningState\":\"ylwbtlhflsjcdhsz\",\"serviceTypeName\":\"vfbgofeljagrqmqh\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"iiojnal\",\"placementConstraints\":\"fk\",\"correlationScheme\":[{\"scheme\":\"Affinity\",\"serviceName\":\"ex\"},{\"scheme\":\"Affinity\",\"serviceName\":\"wueluqhhahhxv\"},{\"scheme\":\"Invalid\",\"serviceName\":\"mzkwpjg\"}],\"serviceLoadMetrics\":[{\"name\":\"pughftqsxh\",\"weight\":\"Medium\",\"primaryDefaultLoad\":318834407,\"secondaryDefaultLoad\":649615996,\"defaultLoad\":1485711526},{\"name\":\"xdigrjg\",\"weight\":\"Zero\",\"primaryDefaultLoad\":1159016951,\"secondaryDefaultLoad\":1563611736,\"defaultLoad\":1621102365},{\"name\":\"tfih\",\"weight\":\"High\",\"primaryDefaultLoad\":720488968,\"secondaryDefaultLoad\":1701702807,\"defaultLoad\":867678631}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Zero\"}")
            .toObject(StatelessServiceProperties.class);
        Assertions.assertEquals("fk", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.AFFINITY, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("ex", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("pughftqsxh", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(318834407, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(649615996, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1485711526, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.ZERO, model.defaultMoveCost());
        Assertions.assertEquals("vfbgofeljagrqmqh", model.serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.servicePackageActivationMode());
        Assertions.assertEquals("iiojnal", model.serviceDnsName());
        Assertions.assertEquals(1656770527, model.instanceCount());
        Assertions.assertEquals("zszrnwoiindfpw", model.instanceCloseDelayDuration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatelessServiceProperties model = new StatelessServiceProperties().withPlacementConstraints("fk")
            .withCorrelationScheme(Arrays.asList(
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY).withServiceName("ex"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY)
                    .withServiceName("wueluqhhahhxv"),
                new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.INVALID)
                    .withServiceName("mzkwpjg")))
            .withServiceLoadMetrics(Arrays.asList(
                new ServiceLoadMetricDescription().withName("pughftqsxh").withWeight(ServiceLoadMetricWeight.MEDIUM)
                    .withPrimaryDefaultLoad(318834407).withSecondaryDefaultLoad(649615996).withDefaultLoad(1485711526),
                new ServiceLoadMetricDescription().withName("xdigrjg").withWeight(ServiceLoadMetricWeight.ZERO)
                    .withPrimaryDefaultLoad(1159016951).withSecondaryDefaultLoad(1563611736)
                    .withDefaultLoad(1621102365),
                new ServiceLoadMetricDescription().withName("tfih").withWeight(ServiceLoadMetricWeight.HIGH)
                    .withPrimaryDefaultLoad(720488968).withSecondaryDefaultLoad(1701702807).withDefaultLoad(867678631)))
            .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicyDescription()))
            .withDefaultMoveCost(MoveCost.ZERO).withServiceTypeName("vfbgofeljagrqmqh")
            .withPartitionDescription(new PartitionSchemeDescription())
            .withServicePackageActivationMode(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS)
            .withServiceDnsName("iiojnal").withInstanceCount(1656770527)
            .withInstanceCloseDelayDuration("zszrnwoiindfpw");
        model = BinaryData.fromObject(model).toObject(StatelessServiceProperties.class);
        Assertions.assertEquals("fk", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.AFFINITY, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("ex", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("pughftqsxh", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.MEDIUM, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(318834407, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(649615996, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(1485711526, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.ZERO, model.defaultMoveCost());
        Assertions.assertEquals("vfbgofeljagrqmqh", model.serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
            model.servicePackageActivationMode());
        Assertions.assertEquals("iiojnal", model.serviceDnsName());
        Assertions.assertEquals(1656770527, model.instanceCount());
        Assertions.assertEquals("zszrnwoiindfpw", model.instanceCloseDelayDuration());
    }
}
