// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricDescription;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServicePlacementPolicyDescription;
import com.azure.resourcemanager.servicefabric.models.StatelessServiceUpdateProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StatelessServiceUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StatelessServiceUpdateProperties model = BinaryData.fromString(
            "{\"serviceKind\":\"Stateless\",\"instanceCount\":313573135,\"instanceCloseDelayDuration\":\"szqzudphqamv\",\"placementConstraints\":\"fwynwcvtbvkay\",\"correlationScheme\":[{\"scheme\":\"Invalid\",\"serviceName\":\"vyqia\"},{\"scheme\":\"Affinity\",\"serviceName\":\"zwpcnpwzcjaesg\"},{\"scheme\":\"Invalid\",\"serviceName\":\"sccyajguqf\"}],\"serviceLoadMetrics\":[{\"name\":\"gzlvdnkfxu\",\"weight\":\"High\",\"primaryDefaultLoad\":1547666647,\"secondaryDefaultLoad\":252265287,\"defaultLoad\":372421736}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Low\"}")
            .toObject(StatelessServiceUpdateProperties.class);
        Assertions.assertEquals("fwynwcvtbvkay", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("vyqia", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("gzlvdnkfxu", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1547666647, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(252265287, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(372421736, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, model.defaultMoveCost());
        Assertions.assertEquals(313573135, model.instanceCount());
        Assertions.assertEquals("szqzudphqamv", model.instanceCloseDelayDuration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StatelessServiceUpdateProperties model
            = new StatelessServiceUpdateProperties().withPlacementConstraints("fwynwcvtbvkay")
                .withCorrelationScheme(Arrays.asList(
                    new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.INVALID)
                        .withServiceName("vyqia"),
                    new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.AFFINITY)
                        .withServiceName("zwpcnpwzcjaesg"),
                    new ServiceCorrelationDescription().withScheme(ServiceCorrelationScheme.INVALID)
                        .withServiceName("sccyajguqf")))
                .withServiceLoadMetrics(Arrays.asList(new ServiceLoadMetricDescription().withName("gzlvdnkfxu")
                    .withWeight(ServiceLoadMetricWeight.HIGH).withPrimaryDefaultLoad(1547666647)
                    .withSecondaryDefaultLoad(252265287).withDefaultLoad(372421736)))
                .withServicePlacementPolicies(Arrays.asList(new ServicePlacementPolicyDescription(),
                    new ServicePlacementPolicyDescription(), new ServicePlacementPolicyDescription()))
                .withDefaultMoveCost(MoveCost.LOW).withInstanceCount(313573135)
                .withInstanceCloseDelayDuration("szqzudphqamv");
        model = BinaryData.fromObject(model).toObject(StatelessServiceUpdateProperties.class);
        Assertions.assertEquals("fwynwcvtbvkay", model.placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID, model.correlationScheme().get(0).scheme());
        Assertions.assertEquals("vyqia", model.correlationScheme().get(0).serviceName());
        Assertions.assertEquals("gzlvdnkfxu", model.serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.HIGH, model.serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1547666647, model.serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(252265287, model.serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(372421736, model.serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, model.defaultMoveCost());
        Assertions.assertEquals(313573135, model.instanceCount());
        Assertions.assertEquals("szqzudphqamv", model.instanceCloseDelayDuration());
    }
}
