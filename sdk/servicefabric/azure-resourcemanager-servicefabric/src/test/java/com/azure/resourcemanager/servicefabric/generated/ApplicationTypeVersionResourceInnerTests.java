// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicefabric.fluent.models.ApplicationTypeVersionResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicationTypeVersionResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicationTypeVersionResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"menevfyexfwh\",\"appPackageUrl\":\"bcibvyvdcsitynn\",\"defaultParameterList\":{\"eypvhezrkg\":\"dectehfiqsc\",\"sle\":\"hcjrefovgmk\",\"cattpngjcrcczsq\":\"yvxyqjp\",\"mdajv\":\"jh\"}},\"location\":\"sounqecanoaeu\",\"tags\":{\"tuo\":\"yhltrpmopjmcm\"},\"etag\":\"hfuiuaodsfc\",\"id\":\"vxodpu\",\"name\":\"zmyzydagf\",\"type\":\"axbezyiuo\"}")
                .toObject(ApplicationTypeVersionResourceInner.class);
        Assertions.assertEquals("sounqecanoaeu", model.location());
        Assertions.assertEquals("yhltrpmopjmcm", model.tags().get("tuo"));
        Assertions.assertEquals("bcibvyvdcsitynn", model.appPackageUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicationTypeVersionResourceInner model =
            new ApplicationTypeVersionResourceInner()
                .withLocation("sounqecanoaeu")
                .withTags(mapOf("tuo", "yhltrpmopjmcm"))
                .withAppPackageUrl("bcibvyvdcsitynn");
        model = BinaryData.fromObject(model).toObject(ApplicationTypeVersionResourceInner.class);
        Assertions.assertEquals("sounqecanoaeu", model.location());
        Assertions.assertEquals("yhltrpmopjmcm", model.tags().get("tuo"));
        Assertions.assertEquals("bcibvyvdcsitynn", model.appPackageUrl());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
