// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.servicefabric.ServiceFabricManager;
import com.azure.resourcemanager.servicefabric.models.ApplicationResource;
import com.azure.resourcemanager.servicefabric.models.ArmUpgradeFailureAction;
import com.azure.resourcemanager.servicefabric.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabric.models.RollingUpgradeMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApplicationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"cvizqzdwlvw\",\"tenantId\":\"oupfgfb\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ahbqactxtgzuk\":{\"principalId\":\"hgkfmin\",\"clientId\":\"owzfttsttkt\"},\"azivjlfrqttbajl\":{\"principalId\":\"tmmqtgqqqxhrn\",\"clientId\":\"xcpjuisavokqdzf\"},\"igovi\":{\"principalId\":\"tnwxy\",\"clientId\":\"pidkqqfkuvscxkdm\"}}},\"properties\":{\"provisioningState\":\"kpmloa\",\"typeName\":\"ruocbgo\",\"typeVersion\":\"bteoybf\",\"parameters\":{\"mywwtkgkxnyed\":\"akvvjgslordi\",\"yvudtjuewbci\":\"b\",\"xccybvpa\":\"xuuwhcj\"},\"upgradePolicy\":{\"upgradeReplicaSetCheckTimeout\":\"kudzpxgwj\",\"forceRestart\":false,\"rollingUpgradeMonitoringPolicy\":{\"failureAction\":\"Manual\",\"healthCheckWaitDuration\":\"cyohpfkyrkdbd\",\"healthCheckStableDuration\":\"ogsjkmnwqjno\",\"healthCheckRetryTimeout\":\"iyhddvi\",\"upgradeTimeout\":\"egfnmntfpmvmemfn\",\"upgradeDomainTimeout\":\"dwvvba\"},\"applicationHealthPolicy\":{\"considerWarningAsError\":false,\"maxPercentUnhealthyDeployedApplications\":677641870,\"defaultServiceTypeHealthPolicy\":{\"maxPercentUnhealthyServices\":984375294,\"maxPercentUnhealthyPartitionsPerService\":1628077523,\"maxPercentUnhealthyReplicasPerPartition\":482170286},\"serviceTypeHealthPolicyMap\":{\"rdnhfuku\":{}}},\"upgradeMode\":\"UnmonitoredAuto\",\"recreateApplication\":false},\"minimumNodes\":5191466923245315601,\"maximumNodes\":4557398891396675269,\"removeApplicationCapacity\":true,\"metrics\":[{\"name\":\"pfcvlerchpqbmfp\",\"maximumCapacity\":6598038620342743533,\"reservationCapacity\":8640705401011653724,\"totalApplicationCapacity\":5480146714072551724},{\"name\":\"spuunnoxyhkxgq\",\"maximumCapacity\":8879508928062968266,\"reservationCapacity\":5499837573865267014,\"totalApplicationCapacity\":5674487456112843436}],\"managedIdentities\":[{\"name\":\"a\",\"principalId\":\"wdaomdjvlpjxxkzb\"},{\"name\":\"msgeivsiykzk\",\"principalId\":\"ncj\"},{\"name\":\"xonbzoggculapz\",\"principalId\":\"y\"}]},\"location\":\"gogtqxepnylbf\",\"tags\":{\"vofqzhvfc\":\"lyjt\",\"jpvd\":\"byfmowuxr\",\"vwzjbhyz\":\"xfzwi\"},\"etag\":\"jrkambtrnegvmnv\",\"id\":\"eqvldspast\",\"name\":\"bkkd\",\"type\":\"flvestmjlxrrilo\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        ServiceFabricManager manager = ServiceFabricManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ApplicationResource> response
            = manager.applications().list("ksbpimlqoljx", "cgxxlxs", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("gogtqxepnylbf", response.iterator().next().location());
        Assertions.assertEquals("lyjt", response.iterator().next().tags().get("vofqzhvfc"));
        Assertions.assertEquals("ruocbgo", response.iterator().next().typeName());
        Assertions.assertEquals("bteoybf", response.iterator().next().typeVersion());
        Assertions.assertEquals("akvvjgslordi", response.iterator().next().parameters().get("mywwtkgkxnyed"));
        Assertions.assertEquals("kudzpxgwj",
            response.iterator().next().upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(false, response.iterator().next().upgradePolicy().forceRestart());
        Assertions.assertEquals(ArmUpgradeFailureAction.MANUAL,
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().failureAction());
        Assertions.assertEquals("cyohpfkyrkdbd",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckWaitDuration());
        Assertions.assertEquals("ogsjkmnwqjno",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckStableDuration());
        Assertions.assertEquals("iyhddvi",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().healthCheckRetryTimeout());
        Assertions.assertEquals("egfnmntfpmvmemfn",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeTimeout());
        Assertions.assertEquals("dwvvba",
            response.iterator().next().upgradePolicy().rollingUpgradeMonitoringPolicy().upgradeDomainTimeout());
        Assertions.assertEquals(false,
            response.iterator().next().upgradePolicy().applicationHealthPolicy().considerWarningAsError());
        Assertions.assertEquals(677641870, response.iterator().next().upgradePolicy().applicationHealthPolicy()
            .maxPercentUnhealthyDeployedApplications());
        Assertions.assertEquals(984375294, response.iterator().next().upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyServices());
        Assertions.assertEquals(1628077523, response.iterator().next().upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyPartitionsPerService());
        Assertions.assertEquals(482170286, response.iterator().next().upgradePolicy().applicationHealthPolicy()
            .defaultServiceTypeHealthPolicy().maxPercentUnhealthyReplicasPerPartition());
        Assertions.assertEquals(RollingUpgradeMode.UNMONITORED_AUTO,
            response.iterator().next().upgradePolicy().upgradeMode());
        Assertions.assertEquals(false, response.iterator().next().upgradePolicy().recreateApplication());
        Assertions.assertEquals(5191466923245315601L, response.iterator().next().minimumNodes());
        Assertions.assertEquals(4557398891396675269L, response.iterator().next().maximumNodes());
        Assertions.assertEquals(true, response.iterator().next().removeApplicationCapacity());
        Assertions.assertEquals("pfcvlerchpqbmfp", response.iterator().next().metrics().get(0).name());
        Assertions.assertEquals(6598038620342743533L, response.iterator().next().metrics().get(0).maximumCapacity());
        Assertions.assertEquals(8640705401011653724L,
            response.iterator().next().metrics().get(0).reservationCapacity());
        Assertions.assertEquals(5480146714072551724L,
            response.iterator().next().metrics().get(0).totalApplicationCapacity());
        Assertions.assertEquals("a", response.iterator().next().managedIdentities().get(0).name());
        Assertions.assertEquals("wdaomdjvlpjxxkzb",
            response.iterator().next().managedIdentities().get(0).principalId());
    }
}
