// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.servicefabric.ServiceFabricManager;
import com.azure.resourcemanager.servicefabric.models.ApplicationResource;
import com.azure.resourcemanager.servicefabric.models.ManagedIdentityType;
import com.azure.resourcemanager.servicefabric.models.RollingUpgradeMode;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApplicationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"identity\":{\"principalId\":\"wmd\",\"tenantId\":\"wpklvxw\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"provisioningState\":\"pqchiszep\",\"typeName\":\"bjcrxgibbdaxco\",\"typeVersion\":\"ozauorsukokwb\",\"parameters\":{\"hw\":\"hlvnuuepzlr\"},\"upgradePolicy\":{\"upgradeReplicaSetCheckTimeout\":\"l\",\"forceRestart\":true,\"upgradeMode\":\"Monitored\",\"recreateApplication\":true},\"minimumNodes\":5989129131388506545,\"maximumNodes\":5393338414335842082,\"removeApplicationCapacity\":false,\"metrics\":[],\"managedIdentities\":[]},\"location\":\"alywjhhgdn\",\"tags\":{\"ggdufiqndieu\":\"sivfomilo\"},\"etag\":\"ofjchvcyyysf\",\"id\":\"otcubi\",\"name\":\"p\",\"type\":\"ipwoqonmacjek\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ServiceFabricManager manager =
            ServiceFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ApplicationResource response =
            manager
                .applications()
                .getWithResponse("enr", "sutujba", "pjuohminyfl", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("alywjhhgdn", response.location());
        Assertions.assertEquals("sivfomilo", response.tags().get("ggdufiqndieu"));
        Assertions.assertEquals("bjcrxgibbdaxco", response.typeName());
        Assertions.assertEquals("ozauorsukokwb", response.typeVersion());
        Assertions.assertEquals("hlvnuuepzlr", response.parameters().get("hw"));
        Assertions.assertEquals("l", response.upgradePolicy().upgradeReplicaSetCheckTimeout());
        Assertions.assertEquals(true, response.upgradePolicy().forceRestart());
        Assertions.assertEquals(RollingUpgradeMode.MONITORED, response.upgradePolicy().upgradeMode());
        Assertions.assertEquals(true, response.upgradePolicy().recreateApplication());
        Assertions.assertEquals(5989129131388506545L, response.minimumNodes());
        Assertions.assertEquals(5393338414335842082L, response.maximumNodes());
        Assertions.assertEquals(false, response.removeApplicationCapacity());
    }
}
