// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.servicefabric.ServiceFabricManager;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.ServiceResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"kudzpxgwj\",\"serviceTypeName\":\"mag\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"ExclusiveProcess\",\"serviceDnsName\":\"hpfkyrkdbdgi\",\"placementConstraints\":\"sjkmnwqj\",\"correlationScheme\":[],\"serviceLoadMetrics\":[],\"servicePlacementPolicies\":[],\"defaultMoveCost\":\"Zero\"},\"location\":\"iacegfnmn\",\"tags\":{\"vvbalx\":\"mvmemfnczd\",\"chp\":\"l\",\"evwrdnhfuk\":\"db\",\"fcvlerch\":\"vsjcswsmystuluqy\"},\"etag\":\"bm\",\"id\":\"jbabwidf\",\"name\":\"xsspuunnoxyhk\",\"type\":\"g\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ServiceFabricManager manager =
            ServiceFabricManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ServiceResource response =
            manager
                .services()
                .getWithResponse("b", "yvudtjuewbci", "xuuwhcj", "xccybvpa", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("sjkmnwqj", response.properties().placementConstraints());
        Assertions.assertEquals(MoveCost.ZERO, response.properties().defaultMoveCost());
        Assertions.assertEquals("mag", response.properties().serviceTypeName());
        Assertions
            .assertEquals(
                ArmServicePackageActivationMode.EXCLUSIVE_PROCESS,
                response.properties().servicePackageActivationMode());
        Assertions.assertEquals("hpfkyrkdbdgi", response.properties().serviceDnsName());
        Assertions.assertEquals("iacegfnmn", response.location());
        Assertions.assertEquals("mvmemfnczd", response.tags().get("vvbalx"));
    }
}
