// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabric.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicefabric.ServiceFabricManager;
import com.azure.resourcemanager.servicefabric.models.ArmServicePackageActivationMode;
import com.azure.resourcemanager.servicefabric.models.MoveCost;
import com.azure.resourcemanager.servicefabric.models.ServiceCorrelationScheme;
import com.azure.resourcemanager.servicefabric.models.ServiceLoadMetricWeight;
import com.azure.resourcemanager.servicefabric.models.ServiceResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"serviceKind\":\"ServiceResourceProperties\",\"provisioningState\":\"rqzz\",\"serviceTypeName\":\"jvpglydzgk\",\"partitionDescription\":{\"partitionScheme\":\"PartitionSchemeDescription\"},\"servicePackageActivationMode\":\"SharedProcess\",\"serviceDnsName\":\"vtoepryutnw\",\"placementConstraints\":\"pzdm\",\"correlationScheme\":[{\"scheme\":\"Invalid\",\"serviceName\":\"fvaawzqa\"},{\"scheme\":\"Invalid\",\"serviceName\":\"lgzurig\"}],\"serviceLoadMetrics\":[{\"name\":\"cx\",\"weight\":\"Zero\",\"primaryDefaultLoad\":1221508981,\"secondaryDefaultLoad\":1691117977,\"defaultLoad\":675680646}],\"servicePlacementPolicies\":[{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"},{\"type\":\"ServicePlacementPolicyDescription\"}],\"defaultMoveCost\":\"Low\"},\"location\":\"mldgxobfirc\",\"tags\":{\"khyawfvjlboxqv\":\"kciayzri\"},\"etag\":\"lmxhomdyn\",\"id\":\"wdigumbnraauz\",\"name\":\"p\",\"type\":\"jazysdzhezwwvaiq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ServiceFabricManager manager = ServiceFabricManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServiceResource response = manager.services()
            .getWithResponse("apeewchpxlkt", "kuziycsle", "ufuztcktyhjtq", "dcgzul", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pzdm", response.properties().placementConstraints());
        Assertions.assertEquals(ServiceCorrelationScheme.INVALID,
            response.properties().correlationScheme().get(0).scheme());
        Assertions.assertEquals("fvaawzqa", response.properties().correlationScheme().get(0).serviceName());
        Assertions.assertEquals("cx", response.properties().serviceLoadMetrics().get(0).name());
        Assertions.assertEquals(ServiceLoadMetricWeight.ZERO,
            response.properties().serviceLoadMetrics().get(0).weight());
        Assertions.assertEquals(1221508981, response.properties().serviceLoadMetrics().get(0).primaryDefaultLoad());
        Assertions.assertEquals(1691117977, response.properties().serviceLoadMetrics().get(0).secondaryDefaultLoad());
        Assertions.assertEquals(675680646, response.properties().serviceLoadMetrics().get(0).defaultLoad());
        Assertions.assertEquals(MoveCost.LOW, response.properties().defaultMoveCost());
        Assertions.assertEquals("jvpglydzgk", response.properties().serviceTypeName());
        Assertions.assertEquals(ArmServicePackageActivationMode.SHARED_PROCESS,
            response.properties().servicePackageActivationMode());
        Assertions.assertEquals("vtoepryutnw", response.properties().serviceDnsName());
        Assertions.assertEquals("mldgxobfirc", response.location());
        Assertions.assertEquals("kciayzri", response.tags().get("khyawfvjlboxqv"));
    }
}
