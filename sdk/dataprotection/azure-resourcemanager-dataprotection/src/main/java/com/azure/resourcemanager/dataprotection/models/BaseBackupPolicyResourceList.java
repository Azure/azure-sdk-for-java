// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dataprotection.fluent.models.BaseBackupPolicyResourceInner;
import java.io.IOException;
import java.util.List;

/**
 * BaseBackupPolicyResourceList
 * 
 * List of BaseBackupPolicy resources.
 */
@Fluent
public final class BaseBackupPolicyResourceList extends DppResourceList {
    /*
     * List of resources.
     */
    private List<BaseBackupPolicyResourceInner> value;

    /**
     * Creates an instance of BaseBackupPolicyResourceList class.
     */
    public BaseBackupPolicyResourceList() {
    }

    /**
     * Get the value property: List of resources.
     * 
     * @return the value value.
     */
    public List<BaseBackupPolicyResourceInner> value() {
        return this.value;
    }

    /**
     * Set the value property: List of resources.
     * 
     * @param value the value value to set.
     * @return the BaseBackupPolicyResourceList object itself.
     */
    public BaseBackupPolicyResourceList withValue(List<BaseBackupPolicyResourceInner> value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BaseBackupPolicyResourceList withNextLink(String nextLink) {
        super.withNextLink(nextLink);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nextLink", nextLink());
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BaseBackupPolicyResourceList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BaseBackupPolicyResourceList if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BaseBackupPolicyResourceList.
     */
    public static BaseBackupPolicyResourceList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BaseBackupPolicyResourceList deserializedBaseBackupPolicyResourceList = new BaseBackupPolicyResourceList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nextLink".equals(fieldName)) {
                    deserializedBaseBackupPolicyResourceList.withNextLink(reader.getString());
                } else if ("value".equals(fieldName)) {
                    List<BaseBackupPolicyResourceInner> value
                        = reader.readArray(reader1 -> BaseBackupPolicyResourceInner.fromJson(reader1));
                    deserializedBaseBackupPolicyResourceList.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBaseBackupPolicyResourceList;
        });
    }
}
