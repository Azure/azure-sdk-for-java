// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Elements class for feature request.
 */
@Fluent
public final class SupportedFeature implements JsonSerializable<SupportedFeature> {
    /*
     * support feature type.
     */
    private String featureName;

    /*
     * feature support status
     */
    private FeatureSupportStatus supportStatus;

    /*
     * support feature type.
     */
    private List<String> exposureControlledFeatures;

    /**
     * Creates an instance of SupportedFeature class.
     */
    public SupportedFeature() {
    }

    /**
     * Get the featureName property: support feature type.
     * 
     * @return the featureName value.
     */
    public String featureName() {
        return this.featureName;
    }

    /**
     * Set the featureName property: support feature type.
     * 
     * @param featureName the featureName value to set.
     * @return the SupportedFeature object itself.
     */
    public SupportedFeature withFeatureName(String featureName) {
        this.featureName = featureName;
        return this;
    }

    /**
     * Get the supportStatus property: feature support status.
     * 
     * @return the supportStatus value.
     */
    public FeatureSupportStatus supportStatus() {
        return this.supportStatus;
    }

    /**
     * Set the supportStatus property: feature support status.
     * 
     * @param supportStatus the supportStatus value to set.
     * @return the SupportedFeature object itself.
     */
    public SupportedFeature withSupportStatus(FeatureSupportStatus supportStatus) {
        this.supportStatus = supportStatus;
        return this;
    }

    /**
     * Get the exposureControlledFeatures property: support feature type.
     * 
     * @return the exposureControlledFeatures value.
     */
    public List<String> exposureControlledFeatures() {
        return this.exposureControlledFeatures;
    }

    /**
     * Set the exposureControlledFeatures property: support feature type.
     * 
     * @param exposureControlledFeatures the exposureControlledFeatures value to set.
     * @return the SupportedFeature object itself.
     */
    public SupportedFeature withExposureControlledFeatures(List<String> exposureControlledFeatures) {
        this.exposureControlledFeatures = exposureControlledFeatures;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("featureName", this.featureName);
        jsonWriter.writeStringField("supportStatus", this.supportStatus == null ? null : this.supportStatus.toString());
        jsonWriter.writeArrayField("exposureControlledFeatures", this.exposureControlledFeatures,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SupportedFeature from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SupportedFeature if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SupportedFeature.
     */
    public static SupportedFeature fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SupportedFeature deserializedSupportedFeature = new SupportedFeature();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("featureName".equals(fieldName)) {
                    deserializedSupportedFeature.featureName = reader.getString();
                } else if ("supportStatus".equals(fieldName)) {
                    deserializedSupportedFeature.supportStatus = FeatureSupportStatus.fromString(reader.getString());
                } else if ("exposureControlledFeatures".equals(fieldName)) {
                    List<String> exposureControlledFeatures = reader.readArray(reader1 -> reader1.getString());
                    deserializedSupportedFeature.exposureControlledFeatures = exposureControlledFeatures;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSupportedFeature;
        });
    }
}
