// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AzureBackupParams
 * 
 * Azure backup parameters.
 */
@Fluent
public final class AzureBackupParams extends BackupParameters {
    /*
     * Type of the specific object - used for deserializing
     */
    private String objectType = "AzureBackupParams";

    /*
     * BackupType ; Full/Incremental etc
     */
    private String backupType;

    /**
     * Creates an instance of AzureBackupParams class.
     */
    public AzureBackupParams() {
    }

    /**
     * Get the objectType property: Type of the specific object - used for deserializing.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the backupType property: BackupType ; Full/Incremental etc.
     * 
     * @return the backupType value.
     */
    public String backupType() {
        return this.backupType;
    }

    /**
     * Set the backupType property: BackupType ; Full/Incremental etc.
     * 
     * @param backupType the backupType value to set.
     * @return the AzureBackupParams object itself.
     */
    public AzureBackupParams withBackupType(String backupType) {
        this.backupType = backupType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (backupType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property backupType in model AzureBackupParams"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureBackupParams.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("backupType", this.backupType);
        jsonWriter.writeStringField("objectType", this.objectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBackupParams from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBackupParams if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureBackupParams.
     */
    public static AzureBackupParams fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBackupParams deserializedAzureBackupParams = new AzureBackupParams();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupType".equals(fieldName)) {
                    deserializedAzureBackupParams.backupType = reader.getString();
                } else if ("objectType".equals(fieldName)) {
                    deserializedAzureBackupParams.objectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBackupParams;
        });
    }
}
