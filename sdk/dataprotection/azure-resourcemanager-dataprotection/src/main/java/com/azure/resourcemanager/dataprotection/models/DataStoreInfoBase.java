// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataStoreInfoBase
 * 
 * DataStoreInfo base.
 */
@Fluent
public final class DataStoreInfoBase implements JsonSerializable<DataStoreInfoBase> {
    /*
     * type of datastore; Operational/Vault/Archive
     */
    private DataStoreTypes dataStoreType;

    /*
     * Type of Datasource object, used to initialize the right inherited type
     */
    private String objectType;

    /**
     * Creates an instance of DataStoreInfoBase class.
     */
    public DataStoreInfoBase() {
    }

    /**
     * Get the dataStoreType property: type of datastore; Operational/Vault/Archive.
     * 
     * @return the dataStoreType value.
     */
    public DataStoreTypes dataStoreType() {
        return this.dataStoreType;
    }

    /**
     * Set the dataStoreType property: type of datastore; Operational/Vault/Archive.
     * 
     * @param dataStoreType the dataStoreType value to set.
     * @return the DataStoreInfoBase object itself.
     */
    public DataStoreInfoBase withDataStoreType(DataStoreTypes dataStoreType) {
        this.dataStoreType = dataStoreType;
        return this;
    }

    /**
     * Get the objectType property: Type of Datasource object, used to initialize the right inherited type.
     * 
     * @return the objectType value.
     */
    public String objectType() {
        return this.objectType;
    }

    /**
     * Set the objectType property: Type of Datasource object, used to initialize the right inherited type.
     * 
     * @param objectType the objectType value to set.
     * @return the DataStoreInfoBase object itself.
     */
    public DataStoreInfoBase withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataStoreType() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property dataStoreType in model DataStoreInfoBase"));
        }
        if (objectType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property objectType in model DataStoreInfoBase"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataStoreInfoBase.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("dataStoreType", this.dataStoreType == null ? null : this.dataStoreType.toString());
        jsonWriter.writeStringField("objectType", this.objectType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataStoreInfoBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataStoreInfoBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataStoreInfoBase.
     */
    public static DataStoreInfoBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataStoreInfoBase deserializedDataStoreInfoBase = new DataStoreInfoBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataStoreType".equals(fieldName)) {
                    deserializedDataStoreInfoBase.dataStoreType = DataStoreTypes.fromString(reader.getString());
                } else if ("objectType".equals(fieldName)) {
                    deserializedDataStoreInfoBase.objectType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataStoreInfoBase;
        });
    }
}
