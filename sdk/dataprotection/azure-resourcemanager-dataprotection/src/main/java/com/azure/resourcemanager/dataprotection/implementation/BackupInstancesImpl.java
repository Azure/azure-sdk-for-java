// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.fluent.BackupInstancesClient;
import com.azure.resourcemanager.dataprotection.fluent.models.BackupInstanceResourceInner;
import com.azure.resourcemanager.dataprotection.fluent.models.OperationJobExtendedInfoInner;
import com.azure.resourcemanager.dataprotection.models.AzureBackupRehydrationRequest;
import com.azure.resourcemanager.dataprotection.models.AzureBackupRestoreRequest;
import com.azure.resourcemanager.dataprotection.models.BackupInstanceResource;
import com.azure.resourcemanager.dataprotection.models.BackupInstances;
import com.azure.resourcemanager.dataprotection.models.OperationJobExtendedInfo;
import com.azure.resourcemanager.dataprotection.models.TriggerBackupRequest;
import com.azure.resourcemanager.dataprotection.models.ValidateForBackupRequest;
import com.azure.resourcemanager.dataprotection.models.ValidateRestoreRequestObject;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class BackupInstancesImpl implements BackupInstances {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BackupInstancesImpl.class);

    private final BackupInstancesClient innerClient;

    private final com.azure.resourcemanager.dataprotection.DataProtectionManager serviceManager;

    public BackupInstancesImpl(
        BackupInstancesClient innerClient,
        com.azure.resourcemanager.dataprotection.DataProtectionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BackupInstanceResource> list(String vaultName, String resourceGroupName) {
        PagedIterable<BackupInstanceResourceInner> inner = this.serviceClient().list(vaultName, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new BackupInstanceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupInstanceResource> list(String vaultName, String resourceGroupName, Context context) {
        PagedIterable<BackupInstanceResourceInner> inner =
            this.serviceClient().list(vaultName, resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new BackupInstanceResourceImpl(inner1, this.manager()));
    }

    public BackupInstanceResource get(String vaultName, String resourceGroupName, String backupInstanceName) {
        BackupInstanceResourceInner inner = this.serviceClient().get(vaultName, resourceGroupName, backupInstanceName);
        if (inner != null) {
            return new BackupInstanceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupInstanceResource> getWithResponse(
        String vaultName, String resourceGroupName, String backupInstanceName, Context context) {
        Response<BackupInstanceResourceInner> inner =
            this.serviceClient().getWithResponse(vaultName, resourceGroupName, backupInstanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupInstanceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String vaultName, String resourceGroupName, String backupInstanceName) {
        this.serviceClient().delete(vaultName, resourceGroupName, backupInstanceName);
    }

    public void delete(String vaultName, String resourceGroupName, String backupInstanceName, Context context) {
        this.serviceClient().delete(vaultName, resourceGroupName, backupInstanceName, context);
    }

    public OperationJobExtendedInfo adhocBackup(
        String vaultName, String resourceGroupName, String backupInstanceName, TriggerBackupRequest parameters) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().adhocBackup(vaultName, resourceGroupName, backupInstanceName, parameters);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationJobExtendedInfo adhocBackup(
        String vaultName,
        String resourceGroupName,
        String backupInstanceName,
        TriggerBackupRequest parameters,
        Context context) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().adhocBackup(vaultName, resourceGroupName, backupInstanceName, parameters, context);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationJobExtendedInfo validateForBackup(
        String vaultName, String resourceGroupName, ValidateForBackupRequest parameters) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().validateForBackup(vaultName, resourceGroupName, parameters);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationJobExtendedInfo validateForBackup(
        String vaultName, String resourceGroupName, ValidateForBackupRequest parameters, Context context) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().validateForBackup(vaultName, resourceGroupName, parameters, context);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void triggerRehydrate(
        String resourceGroupName,
        String vaultName,
        String backupInstanceName,
        AzureBackupRehydrationRequest parameters) {
        this.serviceClient().triggerRehydrate(resourceGroupName, vaultName, backupInstanceName, parameters);
    }

    public void triggerRehydrate(
        String resourceGroupName,
        String vaultName,
        String backupInstanceName,
        AzureBackupRehydrationRequest parameters,
        Context context) {
        this.serviceClient().triggerRehydrate(resourceGroupName, vaultName, backupInstanceName, parameters, context);
    }

    public OperationJobExtendedInfo triggerRestore(
        String vaultName, String resourceGroupName, String backupInstanceName, AzureBackupRestoreRequest parameters) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().triggerRestore(vaultName, resourceGroupName, backupInstanceName, parameters);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationJobExtendedInfo triggerRestore(
        String vaultName,
        String resourceGroupName,
        String backupInstanceName,
        AzureBackupRestoreRequest parameters,
        Context context) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().triggerRestore(vaultName, resourceGroupName, backupInstanceName, parameters, context);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationJobExtendedInfo validateForRestore(
        String vaultName,
        String resourceGroupName,
        String backupInstanceName,
        ValidateRestoreRequestObject parameters) {
        OperationJobExtendedInfoInner inner =
            this.serviceClient().validateForRestore(vaultName, resourceGroupName, backupInstanceName, parameters);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public OperationJobExtendedInfo validateForRestore(
        String vaultName,
        String resourceGroupName,
        String backupInstanceName,
        ValidateRestoreRequestObject parameters,
        Context context) {
        OperationJobExtendedInfoInner inner =
            this
                .serviceClient()
                .validateForRestore(vaultName, resourceGroupName, backupInstanceName, parameters, context);
        if (inner != null) {
            return new OperationJobExtendedInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public BackupInstanceResource getById(String id) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupInstanceName = Utils.getValueFromIdByName(id, "backupInstances");
        if (backupInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupInstances'.", id)));
        }
        return this.getWithResponse(vaultName, resourceGroupName, backupInstanceName, Context.NONE).getValue();
    }

    public Response<BackupInstanceResource> getByIdWithResponse(String id, Context context) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupInstanceName = Utils.getValueFromIdByName(id, "backupInstances");
        if (backupInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupInstances'.", id)));
        }
        return this.getWithResponse(vaultName, resourceGroupName, backupInstanceName, context);
    }

    public void deleteById(String id) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupInstanceName = Utils.getValueFromIdByName(id, "backupInstances");
        if (backupInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupInstances'.", id)));
        }
        this.delete(vaultName, resourceGroupName, backupInstanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupInstanceName = Utils.getValueFromIdByName(id, "backupInstances");
        if (backupInstanceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupInstances'.", id)));
        }
        this.delete(vaultName, resourceGroupName, backupInstanceName, context);
    }

    private BackupInstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dataprotection.DataProtectionManager manager() {
        return this.serviceManager;
    }

    public BackupInstanceResourceImpl define(String name) {
        return new BackupInstanceResourceImpl(name, this.manager());
    }
}
