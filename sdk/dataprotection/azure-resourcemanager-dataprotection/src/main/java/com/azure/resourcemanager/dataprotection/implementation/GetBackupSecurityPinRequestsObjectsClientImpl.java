// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.fluent.GetBackupSecurityPinRequestsObjectsClient;
import com.azure.resourcemanager.dataprotection.fluent.models.DppBaseResourceInner;
import com.azure.resourcemanager.dataprotection.implementation.models.DppBaseResourceList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GetBackupSecurityPinRequestsObjectsClient.
 */
public final class GetBackupSecurityPinRequestsObjectsClientImpl implements GetBackupSecurityPinRequestsObjectsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GetBackupSecurityPinRequestsObjectsService service;

    /**
     * The service client containing this operation class.
     */
    private final DataProtectionManagementClientImpl client;

    /**
     * Initializes an instance of GetBackupSecurityPinRequestsObjectsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GetBackupSecurityPinRequestsObjectsClientImpl(DataProtectionManagementClientImpl client) {
        this.service = RestProxy.create(GetBackupSecurityPinRequestsObjectsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataProtectionManagementClientGetBackupSecurityPinRequestsObjects to
     * be used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DataProtectionManagementClientGetBackupSecurityPinRequestsObjects")
    public interface GetBackupSecurityPinRequestsObjectsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/getBackupSecurityPINRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DppBaseResourceList>> getBackupSecurityPINRequestsObjects(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGuardsName") String resourceGuardsName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/getBackupSecurityPINRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DppBaseResourceList> getBackupSecurityPINRequestsObjectsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceGuardsName") String resourceGuardsName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DppBaseResourceList>> getBackupSecurityPINRequestsObjectsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DppBaseResourceList> getBackupSecurityPINRequestsObjectsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
     * resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of the ResourceGuardResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DppBaseResourceInner>>
        getBackupSecurityPINRequestsObjectsSinglePageAsync(String resourceGroupName, String resourceGuardsName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceGuardsName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGuardsName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBackupSecurityPINRequestsObjects(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, resourceGuardsName,
                accept, context))
            .<PagedResponse<DppBaseResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
     * resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of the ResourceGuardResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DppBaseResourceInner> getBackupSecurityPINRequestsObjectsAsync(String resourceGroupName,
        String resourceGuardsName) {
        return new PagedFlux<>(
            () -> getBackupSecurityPINRequestsObjectsSinglePageAsync(resourceGroupName, resourceGuardsName),
            nextLink -> getBackupSecurityPINRequestsObjectsNextSinglePageAsync(nextLink));
    }

    /**
     * Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
     * resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of the ResourceGuardResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DppBaseResourceInner> getBackupSecurityPINRequestsObjectsSinglePage(String resourceGroupName,
        String resourceGuardsName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceGuardsName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGuardsName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DppBaseResourceList> res
            = service.getBackupSecurityPINRequestsObjectsSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, resourceGuardsName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
     * resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of the ResourceGuardResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DppBaseResourceInner> getBackupSecurityPINRequestsObjectsSinglePage(String resourceGroupName,
        String resourceGuardsName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceGuardsName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGuardsName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DppBaseResourceList> res
            = service.getBackupSecurityPINRequestsObjectsSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, resourceGuardsName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
     * resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of the ResourceGuardResource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DppBaseResourceInner> getBackupSecurityPINRequestsObjects(String resourceGroupName,
        String resourceGuardsName) {
        return new PagedIterable<>(
            () -> getBackupSecurityPINRequestsObjectsSinglePage(resourceGroupName, resourceGuardsName),
            nextLink -> getBackupSecurityPINRequestsObjectsNextSinglePage(nextLink));
    }

    /**
     * Returns collection of operation request objects for a critical operation protected by the given ResourceGuard
     * resource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of the ResourceGuardResource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DppBaseResourceInner> getBackupSecurityPINRequestsObjects(String resourceGroupName,
        String resourceGuardsName, Context context) {
        return new PagedIterable<>(
            () -> getBackupSecurityPINRequestsObjectsSinglePage(resourceGroupName, resourceGuardsName, context),
            nextLink -> getBackupSecurityPINRequestsObjectsNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DppBaseResourceInner>>
        getBackupSecurityPINRequestsObjectsNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBackupSecurityPINRequestsObjectsNext(nextLink, this.client.getEndpoint(),
                accept, context))
            .<PagedResponse<DppBaseResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DppBaseResourceInner> getBackupSecurityPINRequestsObjectsNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DppBaseResourceList> res = service.getBackupSecurityPINRequestsObjectsNextSync(nextLink,
            this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base for all lists of V2 resources along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DppBaseResourceInner> getBackupSecurityPINRequestsObjectsNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DppBaseResourceList> res
            = service.getBackupSecurityPINRequestsObjectsNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(GetBackupSecurityPinRequestsObjectsClientImpl.class);
}
