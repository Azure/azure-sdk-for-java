// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Class encapsulating restore target parameters.
 */
@Fluent
public final class RestoreTargetInfo extends RestoreTargetInfoBase {
    /*
     * Type of Datasource object, used to initialize the right inherited type
     */
    private String objectType = "RestoreTargetInfo";

    /*
     * Information of target DS
     */
    private Datasource datasourceInfo;

    /*
     * Information of target DS Set
     */
    private DatasourceSet datasourceSetInfo;

    /*
     * Credentials to use to authenticate with data source provider.
     */
    private AuthCredentials datasourceAuthCredentials;

    /**
     * Creates an instance of RestoreTargetInfo class.
     */
    public RestoreTargetInfo() {
    }

    /**
     * Get the objectType property: Type of Datasource object, used to initialize the right inherited type.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the datasourceInfo property: Information of target DS.
     * 
     * @return the datasourceInfo value.
     */
    public Datasource datasourceInfo() {
        return this.datasourceInfo;
    }

    /**
     * Set the datasourceInfo property: Information of target DS.
     * 
     * @param datasourceInfo the datasourceInfo value to set.
     * @return the RestoreTargetInfo object itself.
     */
    public RestoreTargetInfo withDatasourceInfo(Datasource datasourceInfo) {
        this.datasourceInfo = datasourceInfo;
        return this;
    }

    /**
     * Get the datasourceSetInfo property: Information of target DS Set.
     * 
     * @return the datasourceSetInfo value.
     */
    public DatasourceSet datasourceSetInfo() {
        return this.datasourceSetInfo;
    }

    /**
     * Set the datasourceSetInfo property: Information of target DS Set.
     * 
     * @param datasourceSetInfo the datasourceSetInfo value to set.
     * @return the RestoreTargetInfo object itself.
     */
    public RestoreTargetInfo withDatasourceSetInfo(DatasourceSet datasourceSetInfo) {
        this.datasourceSetInfo = datasourceSetInfo;
        return this;
    }

    /**
     * Get the datasourceAuthCredentials property: Credentials to use to authenticate with data source provider.
     * 
     * @return the datasourceAuthCredentials value.
     */
    public AuthCredentials datasourceAuthCredentials() {
        return this.datasourceAuthCredentials;
    }

    /**
     * Set the datasourceAuthCredentials property: Credentials to use to authenticate with data source provider.
     * 
     * @param datasourceAuthCredentials the datasourceAuthCredentials value to set.
     * @return the RestoreTargetInfo object itself.
     */
    public RestoreTargetInfo withDatasourceAuthCredentials(AuthCredentials datasourceAuthCredentials) {
        this.datasourceAuthCredentials = datasourceAuthCredentials;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreTargetInfo withRecoveryOption(RecoveryOption recoveryOption) {
        super.withRecoveryOption(recoveryOption);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RestoreTargetInfo withRestoreLocation(String restoreLocation) {
        super.withRestoreLocation(restoreLocation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (datasourceInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property datasourceInfo in model RestoreTargetInfo"));
        } else {
            datasourceInfo().validate();
        }
        if (datasourceSetInfo() != null) {
            datasourceSetInfo().validate();
        }
        if (datasourceAuthCredentials() != null) {
            datasourceAuthCredentials().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RestoreTargetInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recoveryOption", recoveryOption() == null ? null : recoveryOption().toString());
        jsonWriter.writeStringField("restoreLocation", restoreLocation());
        jsonWriter.writeJsonField("datasourceInfo", this.datasourceInfo);
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeJsonField("datasourceSetInfo", this.datasourceSetInfo);
        jsonWriter.writeJsonField("datasourceAuthCredentials", this.datasourceAuthCredentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RestoreTargetInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RestoreTargetInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RestoreTargetInfo.
     */
    public static RestoreTargetInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RestoreTargetInfo deserializedRestoreTargetInfo = new RestoreTargetInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recoveryOption".equals(fieldName)) {
                    deserializedRestoreTargetInfo.withRecoveryOption(RecoveryOption.fromString(reader.getString()));
                } else if ("restoreLocation".equals(fieldName)) {
                    deserializedRestoreTargetInfo.withRestoreLocation(reader.getString());
                } else if ("datasourceInfo".equals(fieldName)) {
                    deserializedRestoreTargetInfo.datasourceInfo = Datasource.fromJson(reader);
                } else if ("objectType".equals(fieldName)) {
                    deserializedRestoreTargetInfo.objectType = reader.getString();
                } else if ("datasourceSetInfo".equals(fieldName)) {
                    deserializedRestoreTargetInfo.datasourceSetInfo = DatasourceSet.fromJson(reader);
                } else if ("datasourceAuthCredentials".equals(fieldName)) {
                    deserializedRestoreTargetInfo.datasourceAuthCredentials = AuthCredentials.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRestoreTargetInfo;
        });
    }
}
