// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * TargetCopySetting
 * 
 * Target copy settings.
 */
@Fluent
public final class TargetCopySetting implements JsonSerializable<TargetCopySetting> {
    /*
     * It can be CustomCopyOption or ImmediateCopyOption.
     */
    private CopyOption copyAfter;

    /*
     * Info of target datastore
     */
    private DataStoreInfoBase dataStore;

    /**
     * Creates an instance of TargetCopySetting class.
     */
    public TargetCopySetting() {
    }

    /**
     * Get the copyAfter property: It can be CustomCopyOption or ImmediateCopyOption.
     * 
     * @return the copyAfter value.
     */
    public CopyOption copyAfter() {
        return this.copyAfter;
    }

    /**
     * Set the copyAfter property: It can be CustomCopyOption or ImmediateCopyOption.
     * 
     * @param copyAfter the copyAfter value to set.
     * @return the TargetCopySetting object itself.
     */
    public TargetCopySetting withCopyAfter(CopyOption copyAfter) {
        this.copyAfter = copyAfter;
        return this;
    }

    /**
     * Get the dataStore property: Info of target datastore.
     * 
     * @return the dataStore value.
     */
    public DataStoreInfoBase dataStore() {
        return this.dataStore;
    }

    /**
     * Set the dataStore property: Info of target datastore.
     * 
     * @param dataStore the dataStore value to set.
     * @return the TargetCopySetting object itself.
     */
    public TargetCopySetting withDataStore(DataStoreInfoBase dataStore) {
        this.dataStore = dataStore;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (copyAfter() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property copyAfter in model TargetCopySetting"));
        } else {
            copyAfter().validate();
        }
        if (dataStore() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dataStore in model TargetCopySetting"));
        } else {
            dataStore().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetCopySetting.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("copyAfter", this.copyAfter);
        jsonWriter.writeJsonField("dataStore", this.dataStore);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetCopySetting from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetCopySetting if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetCopySetting.
     */
    public static TargetCopySetting fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetCopySetting deserializedTargetCopySetting = new TargetCopySetting();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("copyAfter".equals(fieldName)) {
                    deserializedTargetCopySetting.copyAfter = CopyOption.fromJson(reader);
                } else if ("dataStore".equals(fieldName)) {
                    deserializedTargetCopySetting.dataStore = DataStoreInfoBase.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetCopySetting;
        });
    }
}
