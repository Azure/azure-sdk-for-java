// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * ScheduleBasedBackupCriteria
 * 
 * Schedule based backup criteria.
 */
@Fluent
public final class ScheduleBasedBackupCriteria extends BackupCriteria {
    /*
     * Type of the specific object - used for deserializing
     */
    private String objectType = "ScheduleBasedBackupCriteria";

    /*
     * it contains absolute values like "AllBackup" / "FirstOfDay" / "FirstOfWeek" / "FirstOfMonth"
     * and should be part of AbsoluteMarker enum
     */
    private List<AbsoluteMarker> absoluteCriteria;

    /*
     * This is day of the month from 1 to 28 other wise last of month
     */
    private List<Day> daysOfMonth;

    /*
     * It should be Sunday/Monday/T..../Saturday
     */
    private List<DayOfWeek> daysOfTheWeek;

    /*
     * It should be January/February/....../December
     */
    private List<Month> monthsOfYear;

    /*
     * List of schedule times for backup
     */
    private List<OffsetDateTime> scheduleTimes;

    /*
     * It should be First/Second/Third/Fourth/Last
     */
    private List<WeekNumber> weeksOfTheMonth;

    /**
     * Creates an instance of ScheduleBasedBackupCriteria class.
     */
    public ScheduleBasedBackupCriteria() {
    }

    /**
     * Get the objectType property: Type of the specific object - used for deserializing.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the absoluteCriteria property: it contains absolute values like "AllBackup" / "FirstOfDay" / "FirstOfWeek" /
     * "FirstOfMonth"
     * and should be part of AbsoluteMarker enum.
     * 
     * @return the absoluteCriteria value.
     */
    public List<AbsoluteMarker> absoluteCriteria() {
        return this.absoluteCriteria;
    }

    /**
     * Set the absoluteCriteria property: it contains absolute values like "AllBackup" / "FirstOfDay" / "FirstOfWeek" /
     * "FirstOfMonth"
     * and should be part of AbsoluteMarker enum.
     * 
     * @param absoluteCriteria the absoluteCriteria value to set.
     * @return the ScheduleBasedBackupCriteria object itself.
     */
    public ScheduleBasedBackupCriteria withAbsoluteCriteria(List<AbsoluteMarker> absoluteCriteria) {
        this.absoluteCriteria = absoluteCriteria;
        return this;
    }

    /**
     * Get the daysOfMonth property: This is day of the month from 1 to 28 other wise last of month.
     * 
     * @return the daysOfMonth value.
     */
    public List<Day> daysOfMonth() {
        return this.daysOfMonth;
    }

    /**
     * Set the daysOfMonth property: This is day of the month from 1 to 28 other wise last of month.
     * 
     * @param daysOfMonth the daysOfMonth value to set.
     * @return the ScheduleBasedBackupCriteria object itself.
     */
    public ScheduleBasedBackupCriteria withDaysOfMonth(List<Day> daysOfMonth) {
        this.daysOfMonth = daysOfMonth;
        return this;
    }

    /**
     * Get the daysOfTheWeek property: It should be Sunday/Monday/T..../Saturday.
     * 
     * @return the daysOfTheWeek value.
     */
    public List<DayOfWeek> daysOfTheWeek() {
        return this.daysOfTheWeek;
    }

    /**
     * Set the daysOfTheWeek property: It should be Sunday/Monday/T..../Saturday.
     * 
     * @param daysOfTheWeek the daysOfTheWeek value to set.
     * @return the ScheduleBasedBackupCriteria object itself.
     */
    public ScheduleBasedBackupCriteria withDaysOfTheWeek(List<DayOfWeek> daysOfTheWeek) {
        this.daysOfTheWeek = daysOfTheWeek;
        return this;
    }

    /**
     * Get the monthsOfYear property: It should be January/February/....../December.
     * 
     * @return the monthsOfYear value.
     */
    public List<Month> monthsOfYear() {
        return this.monthsOfYear;
    }

    /**
     * Set the monthsOfYear property: It should be January/February/....../December.
     * 
     * @param monthsOfYear the monthsOfYear value to set.
     * @return the ScheduleBasedBackupCriteria object itself.
     */
    public ScheduleBasedBackupCriteria withMonthsOfYear(List<Month> monthsOfYear) {
        this.monthsOfYear = monthsOfYear;
        return this;
    }

    /**
     * Get the scheduleTimes property: List of schedule times for backup.
     * 
     * @return the scheduleTimes value.
     */
    public List<OffsetDateTime> scheduleTimes() {
        return this.scheduleTimes;
    }

    /**
     * Set the scheduleTimes property: List of schedule times for backup.
     * 
     * @param scheduleTimes the scheduleTimes value to set.
     * @return the ScheduleBasedBackupCriteria object itself.
     */
    public ScheduleBasedBackupCriteria withScheduleTimes(List<OffsetDateTime> scheduleTimes) {
        this.scheduleTimes = scheduleTimes;
        return this;
    }

    /**
     * Get the weeksOfTheMonth property: It should be First/Second/Third/Fourth/Last.
     * 
     * @return the weeksOfTheMonth value.
     */
    public List<WeekNumber> weeksOfTheMonth() {
        return this.weeksOfTheMonth;
    }

    /**
     * Set the weeksOfTheMonth property: It should be First/Second/Third/Fourth/Last.
     * 
     * @param weeksOfTheMonth the weeksOfTheMonth value to set.
     * @return the ScheduleBasedBackupCriteria object itself.
     */
    public ScheduleBasedBackupCriteria withWeeksOfTheMonth(List<WeekNumber> weeksOfTheMonth) {
        this.weeksOfTheMonth = weeksOfTheMonth;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (daysOfMonth() != null) {
            daysOfMonth().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeArrayField("absoluteCriteria", this.absoluteCriteria,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("daysOfMonth", this.daysOfMonth, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("daysOfTheWeek", this.daysOfTheWeek,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("monthsOfYear", this.monthsOfYear,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("scheduleTimes", this.scheduleTimes, (writer, element) -> writer
            .writeString(element == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(element)));
        jsonWriter.writeArrayField("weeksOfTheMonth", this.weeksOfTheMonth,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleBasedBackupCriteria from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleBasedBackupCriteria if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScheduleBasedBackupCriteria.
     */
    public static ScheduleBasedBackupCriteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleBasedBackupCriteria deserializedScheduleBasedBackupCriteria = new ScheduleBasedBackupCriteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("objectType".equals(fieldName)) {
                    deserializedScheduleBasedBackupCriteria.objectType = reader.getString();
                } else if ("absoluteCriteria".equals(fieldName)) {
                    List<AbsoluteMarker> absoluteCriteria
                        = reader.readArray(reader1 -> AbsoluteMarker.fromString(reader1.getString()));
                    deserializedScheduleBasedBackupCriteria.absoluteCriteria = absoluteCriteria;
                } else if ("daysOfMonth".equals(fieldName)) {
                    List<Day> daysOfMonth = reader.readArray(reader1 -> Day.fromJson(reader1));
                    deserializedScheduleBasedBackupCriteria.daysOfMonth = daysOfMonth;
                } else if ("daysOfTheWeek".equals(fieldName)) {
                    List<DayOfWeek> daysOfTheWeek
                        = reader.readArray(reader1 -> DayOfWeek.fromString(reader1.getString()));
                    deserializedScheduleBasedBackupCriteria.daysOfTheWeek = daysOfTheWeek;
                } else if ("monthsOfYear".equals(fieldName)) {
                    List<Month> monthsOfYear = reader.readArray(reader1 -> Month.fromString(reader1.getString()));
                    deserializedScheduleBasedBackupCriteria.monthsOfYear = monthsOfYear;
                } else if ("scheduleTimes".equals(fieldName)) {
                    List<OffsetDateTime> scheduleTimes = reader.readArray(reader1 -> reader1
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                    deserializedScheduleBasedBackupCriteria.scheduleTimes = scheduleTimes;
                } else if ("weeksOfTheMonth".equals(fieldName)) {
                    List<WeekNumber> weeksOfTheMonth
                        = reader.readArray(reader1 -> WeekNumber.fromString(reader1.getString()));
                    deserializedScheduleBasedBackupCriteria.weeksOfTheMonth = weeksOfTheMonth;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleBasedBackupCriteria;
        });
    }
}
