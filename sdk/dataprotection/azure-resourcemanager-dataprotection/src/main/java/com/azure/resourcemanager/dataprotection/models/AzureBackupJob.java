// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * AzureBackup Job Class.
 */
@Immutable
public final class AzureBackupJob implements JsonSerializable<AzureBackupJob> {
    /*
     * Job Activity Id
     */
    private String activityId;

    /*
     * Name of the Backup Instance
     */
    private String backupInstanceFriendlyName;

    /*
     * ARM ID of the Backup Instance
     */
    private String backupInstanceId;

    /*
     * ARM ID of the DataSource
     */
    private String dataSourceId;

    /*
     * Location of the DataSource
     */
    private String dataSourceLocation;

    /*
     * User Friendly Name of the DataSource
     */
    private String dataSourceName;

    /*
     * Data Source Set Name of the DataSource
     */
    private String dataSourceSetName;

    /*
     * Type of DataSource
     */
    private String dataSourceType;

    /*
     * Total run time of the job. ISO 8601 format.
     */
    private String duration;

    /*
     * EndTime of the job(in UTC)
     */
    private OffsetDateTime endTime;

    /*
     * A List, detailing the errors related to the job
     */
    private List<UserFacingError> errorDetails;

    /*
     * Extended Information about the job
     */
    private JobExtendedInfo extendedInfo;

    /*
     * Indicated that whether the job is adhoc(true) or scheduled(false)
     */
    private boolean isUserTriggered;

    /*
     * It indicates the type of Job i.e. Backup:full/log/diff ;Restore:ALR/OLR; Tiering:Backup/Archive ;
     * Management:ConfigureProtection/UnConfigure
     */
    private String operation;

    /*
     * It indicates the type of Job i.e. Backup/Restore/Tiering/Management
     */
    private String operationCategory;

    /*
     * ARM ID of the policy
     */
    private String policyId;

    /*
     * Name of the policy
     */
    private String policyName;

    /*
     * Indicated whether progress is enabled for the job
     */
    private boolean progressEnabled;

    /*
     * Url which contains job's progress
     */
    private String progressUrl;

    /*
     * Priority to be used for rehydration
     */
    private String rehydrationPriority;

    /*
     * It indicates the sub type of operation i.e. in case of Restore it can be ALR/OLR
     */
    private String restoreType;

    /*
     * Resource Group Name of the Datasource
     */
    private String sourceResourceGroup;

    /*
     * SubscriptionId corresponding to the DataSource
     */
    private String sourceSubscriptionId;

    /*
     * StartTime of the job(in UTC)
     */
    private OffsetDateTime startTime;

    /*
     * Status of the job like InProgress/Completed/Failed/Cancelled/CompletedWithWarnings/Cancelling/Paused
     */
    private String status;

    /*
     * Subscription Id of the corresponding backup vault
     */
    private String subscriptionId;

    /*
     * List of supported actions
     */
    private List<String> supportedActions;

    /*
     * Name of the vault
     */
    private String vaultName;

    /*
     * The etag property.
     */
    private String etag;

    /*
     * The sourceDataStoreName property.
     */
    private String sourceDataStoreName;

    /*
     * The destinationDataStoreName property.
     */
    private String destinationDataStoreName;

    /**
     * Creates an instance of AzureBackupJob class.
     */
    private AzureBackupJob() {
    }

    /**
     * Get the activityId property: Job Activity Id.
     * 
     * @return the activityId value.
     */
    public String activityId() {
        return this.activityId;
    }

    /**
     * Get the backupInstanceFriendlyName property: Name of the Backup Instance.
     * 
     * @return the backupInstanceFriendlyName value.
     */
    public String backupInstanceFriendlyName() {
        return this.backupInstanceFriendlyName;
    }

    /**
     * Get the backupInstanceId property: ARM ID of the Backup Instance.
     * 
     * @return the backupInstanceId value.
     */
    public String backupInstanceId() {
        return this.backupInstanceId;
    }

    /**
     * Get the dataSourceId property: ARM ID of the DataSource.
     * 
     * @return the dataSourceId value.
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Get the dataSourceLocation property: Location of the DataSource.
     * 
     * @return the dataSourceLocation value.
     */
    public String dataSourceLocation() {
        return this.dataSourceLocation;
    }

    /**
     * Get the dataSourceName property: User Friendly Name of the DataSource.
     * 
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Get the dataSourceSetName property: Data Source Set Name of the DataSource.
     * 
     * @return the dataSourceSetName value.
     */
    public String dataSourceSetName() {
        return this.dataSourceSetName;
    }

    /**
     * Get the dataSourceType property: Type of DataSource.
     * 
     * @return the dataSourceType value.
     */
    public String dataSourceType() {
        return this.dataSourceType;
    }

    /**
     * Get the duration property: Total run time of the job. ISO 8601 format.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Get the endTime property: EndTime of the job(in UTC).
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the errorDetails property: A List, detailing the errors related to the job.
     * 
     * @return the errorDetails value.
     */
    public List<UserFacingError> errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the extendedInfo property: Extended Information about the job.
     * 
     * @return the extendedInfo value.
     */
    public JobExtendedInfo extendedInfo() {
        return this.extendedInfo;
    }

    /**
     * Get the isUserTriggered property: Indicated that whether the job is adhoc(true) or scheduled(false).
     * 
     * @return the isUserTriggered value.
     */
    public boolean isUserTriggered() {
        return this.isUserTriggered;
    }

    /**
     * Get the operation property: It indicates the type of Job i.e. Backup:full/log/diff ;Restore:ALR/OLR;
     * Tiering:Backup/Archive ; Management:ConfigureProtection/UnConfigure.
     * 
     * @return the operation value.
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Get the operationCategory property: It indicates the type of Job i.e. Backup/Restore/Tiering/Management.
     * 
     * @return the operationCategory value.
     */
    public String operationCategory() {
        return this.operationCategory;
    }

    /**
     * Get the policyId property: ARM ID of the policy.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Get the policyName property: Name of the policy.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Get the progressEnabled property: Indicated whether progress is enabled for the job.
     * 
     * @return the progressEnabled value.
     */
    public boolean progressEnabled() {
        return this.progressEnabled;
    }

    /**
     * Get the progressUrl property: Url which contains job's progress.
     * 
     * @return the progressUrl value.
     */
    public String progressUrl() {
        return this.progressUrl;
    }

    /**
     * Get the rehydrationPriority property: Priority to be used for rehydration.
     * 
     * @return the rehydrationPriority value.
     */
    public String rehydrationPriority() {
        return this.rehydrationPriority;
    }

    /**
     * Get the restoreType property: It indicates the sub type of operation i.e. in case of Restore it can be ALR/OLR.
     * 
     * @return the restoreType value.
     */
    public String restoreType() {
        return this.restoreType;
    }

    /**
     * Get the sourceResourceGroup property: Resource Group Name of the Datasource.
     * 
     * @return the sourceResourceGroup value.
     */
    public String sourceResourceGroup() {
        return this.sourceResourceGroup;
    }

    /**
     * Get the sourceSubscriptionId property: SubscriptionId corresponding to the DataSource.
     * 
     * @return the sourceSubscriptionId value.
     */
    public String sourceSubscriptionId() {
        return this.sourceSubscriptionId;
    }

    /**
     * Get the startTime property: StartTime of the job(in UTC).
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the status property: Status of the job like
     * InProgress/Completed/Failed/Cancelled/CompletedWithWarnings/Cancelling/Paused.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the subscriptionId property: Subscription Id of the corresponding backup vault.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the supportedActions property: List of supported actions.
     * 
     * @return the supportedActions value.
     */
    public List<String> supportedActions() {
        return this.supportedActions;
    }

    /**
     * Get the vaultName property: Name of the vault.
     * 
     * @return the vaultName value.
     */
    public String vaultName() {
        return this.vaultName;
    }

    /**
     * Get the etag property: The etag property.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the sourceDataStoreName property: The sourceDataStoreName property.
     * 
     * @return the sourceDataStoreName value.
     */
    public String sourceDataStoreName() {
        return this.sourceDataStoreName;
    }

    /**
     * Get the destinationDataStoreName property: The destinationDataStoreName property.
     * 
     * @return the destinationDataStoreName value.
     */
    public String destinationDataStoreName() {
        return this.destinationDataStoreName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("activityID", this.activityId);
        jsonWriter.writeStringField("backupInstanceFriendlyName", this.backupInstanceFriendlyName);
        jsonWriter.writeStringField("dataSourceId", this.dataSourceId);
        jsonWriter.writeStringField("dataSourceLocation", this.dataSourceLocation);
        jsonWriter.writeStringField("dataSourceName", this.dataSourceName);
        jsonWriter.writeStringField("dataSourceType", this.dataSourceType);
        jsonWriter.writeBooleanField("isUserTriggered", this.isUserTriggered);
        jsonWriter.writeStringField("operation", this.operation);
        jsonWriter.writeStringField("operationCategory", this.operationCategory);
        jsonWriter.writeBooleanField("progressEnabled", this.progressEnabled);
        jsonWriter.writeStringField("sourceResourceGroup", this.sourceResourceGroup);
        jsonWriter.writeStringField("sourceSubscriptionID", this.sourceSubscriptionId);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeArrayField("supportedActions", this.supportedActions,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("vaultName", this.vaultName);
        jsonWriter.writeStringField("dataSourceSetName", this.dataSourceSetName);
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeStringField("etag", this.etag);
        jsonWriter.writeStringField("sourceDataStoreName", this.sourceDataStoreName);
        jsonWriter.writeStringField("destinationDataStoreName", this.destinationDataStoreName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBackupJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBackupJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureBackupJob.
     */
    public static AzureBackupJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBackupJob deserializedAzureBackupJob = new AzureBackupJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("activityID".equals(fieldName)) {
                    deserializedAzureBackupJob.activityId = reader.getString();
                } else if ("backupInstanceFriendlyName".equals(fieldName)) {
                    deserializedAzureBackupJob.backupInstanceFriendlyName = reader.getString();
                } else if ("dataSourceId".equals(fieldName)) {
                    deserializedAzureBackupJob.dataSourceId = reader.getString();
                } else if ("dataSourceLocation".equals(fieldName)) {
                    deserializedAzureBackupJob.dataSourceLocation = reader.getString();
                } else if ("dataSourceName".equals(fieldName)) {
                    deserializedAzureBackupJob.dataSourceName = reader.getString();
                } else if ("dataSourceType".equals(fieldName)) {
                    deserializedAzureBackupJob.dataSourceType = reader.getString();
                } else if ("isUserTriggered".equals(fieldName)) {
                    deserializedAzureBackupJob.isUserTriggered = reader.getBoolean();
                } else if ("operation".equals(fieldName)) {
                    deserializedAzureBackupJob.operation = reader.getString();
                } else if ("operationCategory".equals(fieldName)) {
                    deserializedAzureBackupJob.operationCategory = reader.getString();
                } else if ("progressEnabled".equals(fieldName)) {
                    deserializedAzureBackupJob.progressEnabled = reader.getBoolean();
                } else if ("sourceResourceGroup".equals(fieldName)) {
                    deserializedAzureBackupJob.sourceResourceGroup = reader.getString();
                } else if ("sourceSubscriptionID".equals(fieldName)) {
                    deserializedAzureBackupJob.sourceSubscriptionId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedAzureBackupJob.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedAzureBackupJob.status = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedAzureBackupJob.subscriptionId = reader.getString();
                } else if ("supportedActions".equals(fieldName)) {
                    List<String> supportedActions = reader.readArray(reader1 -> reader1.getString());
                    deserializedAzureBackupJob.supportedActions = supportedActions;
                } else if ("vaultName".equals(fieldName)) {
                    deserializedAzureBackupJob.vaultName = reader.getString();
                } else if ("backupInstanceId".equals(fieldName)) {
                    deserializedAzureBackupJob.backupInstanceId = reader.getString();
                } else if ("dataSourceSetName".equals(fieldName)) {
                    deserializedAzureBackupJob.dataSourceSetName = reader.getString();
                } else if ("duration".equals(fieldName)) {
                    deserializedAzureBackupJob.duration = reader.getString();
                } else if ("endTime".equals(fieldName)) {
                    deserializedAzureBackupJob.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("errorDetails".equals(fieldName)) {
                    List<UserFacingError> errorDetails = reader.readArray(reader1 -> UserFacingError.fromJson(reader1));
                    deserializedAzureBackupJob.errorDetails = errorDetails;
                } else if ("extendedInfo".equals(fieldName)) {
                    deserializedAzureBackupJob.extendedInfo = JobExtendedInfo.fromJson(reader);
                } else if ("policyId".equals(fieldName)) {
                    deserializedAzureBackupJob.policyId = reader.getString();
                } else if ("policyName".equals(fieldName)) {
                    deserializedAzureBackupJob.policyName = reader.getString();
                } else if ("progressUrl".equals(fieldName)) {
                    deserializedAzureBackupJob.progressUrl = reader.getString();
                } else if ("rehydrationPriority".equals(fieldName)) {
                    deserializedAzureBackupJob.rehydrationPriority = reader.getString();
                } else if ("restoreType".equals(fieldName)) {
                    deserializedAzureBackupJob.restoreType = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    deserializedAzureBackupJob.etag = reader.getString();
                } else if ("sourceDataStoreName".equals(fieldName)) {
                    deserializedAzureBackupJob.sourceDataStoreName = reader.getString();
                } else if ("destinationDataStoreName".equals(fieldName)) {
                    deserializedAzureBackupJob.destinationDataStoreName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBackupJob;
        });
    }
}
