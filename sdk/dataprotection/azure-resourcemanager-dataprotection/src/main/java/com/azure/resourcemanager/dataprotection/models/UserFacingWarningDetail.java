// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Warning object used by layers that have access to localized content, and propagate that to user.
 */
@Fluent
public final class UserFacingWarningDetail implements JsonSerializable<UserFacingWarningDetail> {
    /*
     * Name of resource for which warning is raised.
     */
    private String resourceName;

    /*
     * Error details for the warning.
     */
    private UserFacingError warning;

    /**
     * Creates an instance of UserFacingWarningDetail class.
     */
    public UserFacingWarningDetail() {
    }

    /**
     * Get the resourceName property: Name of resource for which warning is raised.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Set the resourceName property: Name of resource for which warning is raised.
     * 
     * @param resourceName the resourceName value to set.
     * @return the UserFacingWarningDetail object itself.
     */
    public UserFacingWarningDetail withResourceName(String resourceName) {
        this.resourceName = resourceName;
        return this;
    }

    /**
     * Get the warning property: Error details for the warning.
     * 
     * @return the warning value.
     */
    public UserFacingError warning() {
        return this.warning;
    }

    /**
     * Set the warning property: Error details for the warning.
     * 
     * @param warning the warning value to set.
     * @return the UserFacingWarningDetail object itself.
     */
    public UserFacingWarningDetail withWarning(UserFacingError warning) {
        this.warning = warning;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (warning() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property warning in model UserFacingWarningDetail"));
        } else {
            warning().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserFacingWarningDetail.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("warning", this.warning);
        jsonWriter.writeStringField("resourceName", this.resourceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserFacingWarningDetail from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserFacingWarningDetail if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserFacingWarningDetail.
     */
    public static UserFacingWarningDetail fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserFacingWarningDetail deserializedUserFacingWarningDetail = new UserFacingWarningDetail();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("warning".equals(fieldName)) {
                    deserializedUserFacingWarningDetail.warning = UserFacingError.fromJson(reader);
                } else if ("resourceName".equals(fieldName)) {
                    deserializedUserFacingWarningDetail.resourceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserFacingWarningDetail;
        });
    }
}
