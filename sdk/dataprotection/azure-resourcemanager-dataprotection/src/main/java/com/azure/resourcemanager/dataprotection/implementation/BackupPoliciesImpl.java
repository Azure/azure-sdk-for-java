// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.fluent.BackupPoliciesClient;
import com.azure.resourcemanager.dataprotection.fluent.models.BaseBackupPolicyResourceInner;
import com.azure.resourcemanager.dataprotection.models.BackupPolicies;
import com.azure.resourcemanager.dataprotection.models.BaseBackupPolicyResource;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class BackupPoliciesImpl implements BackupPolicies {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(BackupPoliciesImpl.class);

    private final BackupPoliciesClient innerClient;

    private final DataProtectionManager serviceManager;

    public BackupPoliciesImpl(BackupPoliciesClient innerClient, DataProtectionManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BaseBackupPolicyResource> list(String vaultName, String resourceGroupName) {
        PagedIterable<BaseBackupPolicyResourceInner> inner = this.serviceClient().list(vaultName, resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new BaseBackupPolicyResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BaseBackupPolicyResource> list(String vaultName, String resourceGroupName, Context context) {
        PagedIterable<BaseBackupPolicyResourceInner> inner =
            this.serviceClient().list(vaultName, resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new BaseBackupPolicyResourceImpl(inner1, this.manager()));
    }

    public BaseBackupPolicyResource get(String vaultName, String resourceGroupName, String backupPolicyName) {
        BaseBackupPolicyResourceInner inner = this.serviceClient().get(vaultName, resourceGroupName, backupPolicyName);
        if (inner != null) {
            return new BaseBackupPolicyResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BaseBackupPolicyResource> getWithResponse(
        String vaultName, String resourceGroupName, String backupPolicyName, Context context) {
        Response<BaseBackupPolicyResourceInner> inner =
            this.serviceClient().getWithResponse(vaultName, resourceGroupName, backupPolicyName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BaseBackupPolicyResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String vaultName, String resourceGroupName, String backupPolicyName) {
        this.serviceClient().delete(vaultName, resourceGroupName, backupPolicyName);
    }

    public Response<Void> deleteWithResponse(
        String vaultName, String resourceGroupName, String backupPolicyName, Context context) {
        return this.serviceClient().deleteWithResponse(vaultName, resourceGroupName, backupPolicyName, context);
    }

    public BaseBackupPolicyResource getById(String id) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupPolicyName = Utils.getValueFromIdByName(id, "backupPolicies");
        if (backupPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupPolicies'.", id)));
        }
        return this.getWithResponse(vaultName, resourceGroupName, backupPolicyName, Context.NONE).getValue();
    }

    public Response<BaseBackupPolicyResource> getByIdWithResponse(String id, Context context) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupPolicyName = Utils.getValueFromIdByName(id, "backupPolicies");
        if (backupPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupPolicies'.", id)));
        }
        return this.getWithResponse(vaultName, resourceGroupName, backupPolicyName, context);
    }

    public void deleteById(String id) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupPolicyName = Utils.getValueFromIdByName(id, "backupPolicies");
        if (backupPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupPolicies'.", id)));
        }
        this.deleteWithResponse(vaultName, resourceGroupName, backupPolicyName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String vaultName = Utils.getValueFromIdByName(id, "backupVaults");
        if (vaultName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'backupVaults'.", id)));
        }
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String backupPolicyName = Utils.getValueFromIdByName(id, "backupPolicies");
        if (backupPolicyName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'backupPolicies'.", id)));
        }
        return this.deleteWithResponse(vaultName, resourceGroupName, backupPolicyName, context);
    }

    private BackupPoliciesClient serviceClient() {
        return this.innerClient;
    }

    private DataProtectionManager manager() {
        return this.serviceManager;
    }

    public BaseBackupPolicyResourceImpl define(String name) {
        return new BaseBackupPolicyResourceImpl(name, this.manager());
    }
}
