// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.fluent.DataProtectionsClient;
import com.azure.resourcemanager.dataprotection.fluent.models.FeatureValidationResponseBaseInner;
import com.azure.resourcemanager.dataprotection.models.FeatureValidationRequestBase;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DataProtectionsClient.
 */
public final class DataProtectionsClientImpl implements DataProtectionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DataProtectionsService service;

    /**
     * The service client containing this operation class.
     */
    private final DataProtectionManagementClientImpl client;

    /**
     * Initializes an instance of DataProtectionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DataProtectionsClientImpl(DataProtectionManagementClientImpl client) {
        this.service
            = RestProxy.create(DataProtectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataProtectionManagementClientDataProtections to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DataProtectionManagementClientDataProtections")
    public interface DataProtectionsService {
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/locations/{location}/checkFeatureSupport")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<FeatureValidationResponseBaseInner>> checkFeatureSupport(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") FeatureValidationRequestBase parameters, Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/locations/{location}/checkFeatureSupport")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<FeatureValidationResponseBaseInner> checkFeatureSupportSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") FeatureValidationRequestBase parameters, Context context);
    }

    /**
     * Validates if a feature is supported.
     * 
     * @param location The location name.
     * @param parameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base class for Backup Feature support along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<FeatureValidationResponseBaseInner>> checkFeatureSupportWithResponseAsync(String location,
        FeatureValidationRequestBase parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.checkFeatureSupport(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, contentType, accept, parameters, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Validates if a feature is supported.
     * 
     * @param location The location name.
     * @param parameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base class for Backup Feature support on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<FeatureValidationResponseBaseInner> checkFeatureSupportAsync(String location,
        FeatureValidationRequestBase parameters) {
        return checkFeatureSupportWithResponseAsync(location, parameters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Validates if a feature is supported.
     * 
     * @param location The location name.
     * @param parameters The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base class for Backup Feature support along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FeatureValidationResponseBaseInner> checkFeatureSupportWithResponse(String location,
        FeatureValidationRequestBase parameters, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.checkFeatureSupportSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), location, contentType, accept, parameters, context);
    }

    /**
     * Validates if a feature is supported.
     * 
     * @param location The location name.
     * @param parameters The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return base class for Backup Feature support.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FeatureValidationResponseBaseInner checkFeatureSupport(String location,
        FeatureValidationRequestBase parameters) {
        return checkFeatureSupportWithResponse(location, parameters, Context.NONE).getValue();
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataProtectionsClientImpl.class);
}
