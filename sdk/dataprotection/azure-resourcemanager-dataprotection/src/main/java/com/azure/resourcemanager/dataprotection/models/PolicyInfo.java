// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * PolicyInfo
 * 
 * Policy Info in backupInstance.
 */
@Fluent
public final class PolicyInfo implements JsonSerializable<PolicyInfo> {
    /*
     * The policyId property.
     */
    private String policyId;

    /*
     * The policyVersion property.
     */
    private String policyVersion;

    /*
     * Policy parameters for the backup instance
     */
    private PolicyParameters policyParameters;

    /**
     * Creates an instance of PolicyInfo class.
     */
    public PolicyInfo() {
    }

    /**
     * Get the policyId property: The policyId property.
     * 
     * @return the policyId value.
     */
    public String policyId() {
        return this.policyId;
    }

    /**
     * Set the policyId property: The policyId property.
     * 
     * @param policyId the policyId value to set.
     * @return the PolicyInfo object itself.
     */
    public PolicyInfo withPolicyId(String policyId) {
        this.policyId = policyId;
        return this;
    }

    /**
     * Get the policyVersion property: The policyVersion property.
     * 
     * @return the policyVersion value.
     */
    public String policyVersion() {
        return this.policyVersion;
    }

    /**
     * Get the policyParameters property: Policy parameters for the backup instance.
     * 
     * @return the policyParameters value.
     */
    public PolicyParameters policyParameters() {
        return this.policyParameters;
    }

    /**
     * Set the policyParameters property: Policy parameters for the backup instance.
     * 
     * @param policyParameters the policyParameters value to set.
     * @return the PolicyInfo object itself.
     */
    public PolicyInfo withPolicyParameters(PolicyParameters policyParameters) {
        this.policyParameters = policyParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property policyId in model PolicyInfo"));
        }
        if (policyParameters() != null) {
            policyParameters().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PolicyInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("policyId", this.policyId);
        jsonWriter.writeJsonField("policyParameters", this.policyParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyInfo if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PolicyInfo.
     */
    public static PolicyInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyInfo deserializedPolicyInfo = new PolicyInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyId".equals(fieldName)) {
                    deserializedPolicyInfo.policyId = reader.getString();
                } else if ("policyVersion".equals(fieldName)) {
                    deserializedPolicyInfo.policyVersion = reader.getString();
                } else if ("policyParameters".equals(fieldName)) {
                    deserializedPolicyInfo.policyParameters = PolicyParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyInfo;
        });
    }
}
