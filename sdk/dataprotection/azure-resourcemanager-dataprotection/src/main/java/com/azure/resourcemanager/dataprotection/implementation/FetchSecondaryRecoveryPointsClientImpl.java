// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dataprotection.fluent.FetchSecondaryRecoveryPointsClient;
import com.azure.resourcemanager.dataprotection.fluent.models.AzureBackupRecoveryPointResourceInner;
import com.azure.resourcemanager.dataprotection.implementation.models.AzureBackupRecoveryPointResourceList;
import com.azure.resourcemanager.dataprotection.models.FetchSecondaryRPsRequestParameters;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in FetchSecondaryRecoveryPointsClient.
 */
public final class FetchSecondaryRecoveryPointsClientImpl implements FetchSecondaryRecoveryPointsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FetchSecondaryRecoveryPointsService service;

    /**
     * The service client containing this operation class.
     */
    private final DataProtectionManagementClientImpl client;

    /**
     * Initializes an instance of FetchSecondaryRecoveryPointsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    FetchSecondaryRecoveryPointsClientImpl(DataProtectionManagementClientImpl client) {
        this.service = RestProxy.create(FetchSecondaryRecoveryPointsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataProtectionManagementClientFetchSecondaryRecoveryPoints to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DataProtectionManagementClientFetchSecondaryRecoveryPoints")
    public interface FetchSecondaryRecoveryPointsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/locations/{location}/fetchSecondaryRecoveryPoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AzureBackupRecoveryPointResourceList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @QueryParam("$filter") String filter, @QueryParam("$skipToken") String skipToken,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") FetchSecondaryRPsRequestParameters parameters, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/locations/{location}/fetchSecondaryRecoveryPoints")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AzureBackupRecoveryPointResourceList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("location") String location,
            @QueryParam("$filter") String filter, @QueryParam("$skipToken") String skipToken,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") FetchSecondaryRPsRequestParameters parameters, Context context);
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @param filter OData filter options.
     * @param skipToken skipToken Filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AzureBackupRecoveryPointResourceInner>> listSinglePageAsync(String resourceGroupName,
        String location, FetchSecondaryRPsRequestParameters parameters, String filter, String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, location, filter, skipToken, accept, parameters,
                context))
            .<PagedResponse<AzureBackupRecoveryPointResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @param filter OData filter options.
     * @param skipToken skipToken Filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AzureBackupRecoveryPointResourceInner> listAsync(String resourceGroupName, String location,
        FetchSecondaryRPsRequestParameters parameters, String filter, String skipToken) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, location, parameters, filter, skipToken));
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AzureBackupRecoveryPointResourceInner> listAsync(String resourceGroupName, String location,
        FetchSecondaryRPsRequestParameters parameters) {
        final String filter = null;
        final String skipToken = null;
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, location, parameters, filter, skipToken));
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @param filter OData filter options.
     * @param skipToken skipToken Filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AzureBackupRecoveryPointResourceInner> listSinglePage(String resourceGroupName,
        String location, FetchSecondaryRPsRequestParameters parameters, String filter, String skipToken) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        Response<AzureBackupRecoveryPointResourceList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, location, filter, skipToken, accept, parameters, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            null, null);
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @param filter OData filter options.
     * @param skipToken skipToken Filter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AzureBackupRecoveryPointResourceInner> listSinglePage(String resourceGroupName,
        String location, FetchSecondaryRPsRequestParameters parameters, String filter, String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (parameters == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        Response<AzureBackupRecoveryPointResourceList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, location, filter, skipToken, accept, parameters, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            null, null);
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AzureBackupRecoveryPointResourceInner> list(String resourceGroupName, String location,
        FetchSecondaryRPsRequestParameters parameters) {
        final String filter = null;
        final String skipToken = null;
        return new PagedIterable<>(() -> listSinglePage(resourceGroupName, location, parameters, filter, skipToken));
    }

    /**
     * Returns a list of Secondary Recovery Points for a DataSource in a vault, that can be used for Cross Region
     * Restore.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The name of the Azure region.
     * @param parameters Request body for operation.
     * @param filter OData filter options.
     * @param skipToken skipToken Filter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return azure backup recoveryPoint resource list as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AzureBackupRecoveryPointResourceInner> list(String resourceGroupName, String location,
        FetchSecondaryRPsRequestParameters parameters, String filter, String skipToken, Context context) {
        return new PagedIterable<>(
            () -> listSinglePage(resourceGroupName, location, parameters, filter, skipToken, context));
    }

    private static final ClientLogger LOGGER = new ClientLogger(FetchSecondaryRecoveryPointsClientImpl.class);
}
