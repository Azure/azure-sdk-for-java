// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Soft delete related settings.
 */
@Fluent
public final class SoftDeleteSettings implements JsonSerializable<SoftDeleteSettings> {
    /*
     * State of soft delete
     */
    private SoftDeleteState state;

    /*
     * Soft delete retention duration
     */
    private Double retentionDurationInDays;

    /**
     * Creates an instance of SoftDeleteSettings class.
     */
    public SoftDeleteSettings() {
    }

    /**
     * Get the state property: State of soft delete.
     * 
     * @return the state value.
     */
    public SoftDeleteState state() {
        return this.state;
    }

    /**
     * Set the state property: State of soft delete.
     * 
     * @param state the state value to set.
     * @return the SoftDeleteSettings object itself.
     */
    public SoftDeleteSettings withState(SoftDeleteState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the retentionDurationInDays property: Soft delete retention duration.
     * 
     * @return the retentionDurationInDays value.
     */
    public Double retentionDurationInDays() {
        return this.retentionDurationInDays;
    }

    /**
     * Set the retentionDurationInDays property: Soft delete retention duration.
     * 
     * @param retentionDurationInDays the retentionDurationInDays value to set.
     * @return the SoftDeleteSettings object itself.
     */
    public SoftDeleteSettings withRetentionDurationInDays(Double retentionDurationInDays) {
        this.retentionDurationInDays = retentionDurationInDays;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeNumberField("retentionDurationInDays", this.retentionDurationInDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SoftDeleteSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SoftDeleteSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SoftDeleteSettings.
     */
    public static SoftDeleteSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SoftDeleteSettings deserializedSoftDeleteSettings = new SoftDeleteSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedSoftDeleteSettings.state = SoftDeleteState.fromString(reader.getString());
                } else if ("retentionDurationInDays".equals(fieldName)) {
                    deserializedSoftDeleteSettings.retentionDurationInDays = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSoftDeleteSettings;
        });
    }
}
