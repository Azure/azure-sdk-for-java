// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SourceLifeCycle
 * 
 * Source LifeCycle.
 */
@Fluent
public final class SourceLifeCycle implements JsonSerializable<SourceLifeCycle> {
    /*
     * Delete Option
     */
    private DeleteOption deleteAfter;

    /*
     * DataStoreInfo base
     */
    private DataStoreInfoBase sourceDataStore;

    /*
     * The targetDataStoreCopySettings property.
     */
    private List<TargetCopySetting> targetDataStoreCopySettings;

    /**
     * Creates an instance of SourceLifeCycle class.
     */
    public SourceLifeCycle() {
    }

    /**
     * Get the deleteAfter property: Delete Option.
     * 
     * @return the deleteAfter value.
     */
    public DeleteOption deleteAfter() {
        return this.deleteAfter;
    }

    /**
     * Set the deleteAfter property: Delete Option.
     * 
     * @param deleteAfter the deleteAfter value to set.
     * @return the SourceLifeCycle object itself.
     */
    public SourceLifeCycle withDeleteAfter(DeleteOption deleteAfter) {
        this.deleteAfter = deleteAfter;
        return this;
    }

    /**
     * Get the sourceDataStore property: DataStoreInfo base.
     * 
     * @return the sourceDataStore value.
     */
    public DataStoreInfoBase sourceDataStore() {
        return this.sourceDataStore;
    }

    /**
     * Set the sourceDataStore property: DataStoreInfo base.
     * 
     * @param sourceDataStore the sourceDataStore value to set.
     * @return the SourceLifeCycle object itself.
     */
    public SourceLifeCycle withSourceDataStore(DataStoreInfoBase sourceDataStore) {
        this.sourceDataStore = sourceDataStore;
        return this;
    }

    /**
     * Get the targetDataStoreCopySettings property: The targetDataStoreCopySettings property.
     * 
     * @return the targetDataStoreCopySettings value.
     */
    public List<TargetCopySetting> targetDataStoreCopySettings() {
        return this.targetDataStoreCopySettings;
    }

    /**
     * Set the targetDataStoreCopySettings property: The targetDataStoreCopySettings property.
     * 
     * @param targetDataStoreCopySettings the targetDataStoreCopySettings value to set.
     * @return the SourceLifeCycle object itself.
     */
    public SourceLifeCycle withTargetDataStoreCopySettings(List<TargetCopySetting> targetDataStoreCopySettings) {
        this.targetDataStoreCopySettings = targetDataStoreCopySettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deleteAfter() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property deleteAfter in model SourceLifeCycle"));
        } else {
            deleteAfter().validate();
        }
        if (sourceDataStore() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property sourceDataStore in model SourceLifeCycle"));
        } else {
            sourceDataStore().validate();
        }
        if (targetDataStoreCopySettings() != null) {
            targetDataStoreCopySettings().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SourceLifeCycle.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("deleteAfter", this.deleteAfter);
        jsonWriter.writeJsonField("sourceDataStore", this.sourceDataStore);
        jsonWriter.writeArrayField("targetDataStoreCopySettings", this.targetDataStoreCopySettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SourceLifeCycle from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SourceLifeCycle if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SourceLifeCycle.
     */
    public static SourceLifeCycle fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SourceLifeCycle deserializedSourceLifeCycle = new SourceLifeCycle();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deleteAfter".equals(fieldName)) {
                    deserializedSourceLifeCycle.deleteAfter = DeleteOption.fromJson(reader);
                } else if ("sourceDataStore".equals(fieldName)) {
                    deserializedSourceLifeCycle.sourceDataStore = DataStoreInfoBase.fromJson(reader);
                } else if ("targetDataStoreCopySettings".equals(fieldName)) {
                    List<TargetCopySetting> targetDataStoreCopySettings
                        = reader.readArray(reader1 -> TargetCopySetting.fromJson(reader1));
                    deserializedSourceLifeCycle.targetDataStoreCopySettings = targetDataStoreCopySettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSourceLifeCycle;
        });
    }
}
