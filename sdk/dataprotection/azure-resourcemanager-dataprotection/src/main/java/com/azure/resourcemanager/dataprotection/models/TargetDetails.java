// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Class encapsulating target details, used where the destination is not a datasource.
 */
@Fluent
public final class TargetDetails implements JsonSerializable<TargetDetails> {
    /*
     * Restore operation may create multiple files inside location pointed by Url
     * Below will be the common prefix for all of them
     */
    private String filePrefix;

    /*
     * Denotes the target location where the data will be restored,
     * string value for the enum
     * {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}
     */
    private RestoreTargetLocationType restoreTargetLocationType;

    /*
     * Url denoting the restore destination. It can point to container / file share etc
     */
    private String url;

    /*
     * Full ARM Id denoting the restore destination. It is the ARM Id pointing to container / file share
     * This is optional if the target subscription can be identified with the URL field. If not
     * then this is needed if CrossSubscriptionRestore field of BackupVault is in any of the disabled states
     */
    private String targetResourceArmId;

    /**
     * Creates an instance of TargetDetails class.
     */
    public TargetDetails() {
    }

    /**
     * Get the filePrefix property: Restore operation may create multiple files inside location pointed by Url
     * Below will be the common prefix for all of them.
     * 
     * @return the filePrefix value.
     */
    public String filePrefix() {
        return this.filePrefix;
    }

    /**
     * Set the filePrefix property: Restore operation may create multiple files inside location pointed by Url
     * Below will be the common prefix for all of them.
     * 
     * @param filePrefix the filePrefix value to set.
     * @return the TargetDetails object itself.
     */
    public TargetDetails withFilePrefix(String filePrefix) {
        this.filePrefix = filePrefix;
        return this;
    }

    /**
     * Get the restoreTargetLocationType property: Denotes the target location where the data will be restored,
     * string value for the enum
     * {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}.
     * 
     * @return the restoreTargetLocationType value.
     */
    public RestoreTargetLocationType restoreTargetLocationType() {
        return this.restoreTargetLocationType;
    }

    /**
     * Set the restoreTargetLocationType property: Denotes the target location where the data will be restored,
     * string value for the enum
     * {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}.
     * 
     * @param restoreTargetLocationType the restoreTargetLocationType value to set.
     * @return the TargetDetails object itself.
     */
    public TargetDetails withRestoreTargetLocationType(RestoreTargetLocationType restoreTargetLocationType) {
        this.restoreTargetLocationType = restoreTargetLocationType;
        return this;
    }

    /**
     * Get the url property: Url denoting the restore destination. It can point to container / file share etc.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: Url denoting the restore destination. It can point to container / file share etc.
     * 
     * @param url the url value to set.
     * @return the TargetDetails object itself.
     */
    public TargetDetails withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the targetResourceArmId property: Full ARM Id denoting the restore destination. It is the ARM Id pointing to
     * container / file share
     * This is optional if the target subscription can be identified with the URL field. If not
     * then this is needed if CrossSubscriptionRestore field of BackupVault is in any of the disabled states.
     * 
     * @return the targetResourceArmId value.
     */
    public String targetResourceArmId() {
        return this.targetResourceArmId;
    }

    /**
     * Set the targetResourceArmId property: Full ARM Id denoting the restore destination. It is the ARM Id pointing to
     * container / file share
     * This is optional if the target subscription can be identified with the URL field. If not
     * then this is needed if CrossSubscriptionRestore field of BackupVault is in any of the disabled states.
     * 
     * @param targetResourceArmId the targetResourceArmId value to set.
     * @return the TargetDetails object itself.
     */
    public TargetDetails withTargetResourceArmId(String targetResourceArmId) {
        this.targetResourceArmId = targetResourceArmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filePrefix() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property filePrefix in model TargetDetails"));
        }
        if (restoreTargetLocationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property restoreTargetLocationType in model TargetDetails"));
        }
        if (url() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property url in model TargetDetails"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TargetDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("filePrefix", this.filePrefix);
        jsonWriter.writeStringField("restoreTargetLocationType",
            this.restoreTargetLocationType == null ? null : this.restoreTargetLocationType.toString());
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("targetResourceArmId", this.targetResourceArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TargetDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TargetDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TargetDetails.
     */
    public static TargetDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TargetDetails deserializedTargetDetails = new TargetDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filePrefix".equals(fieldName)) {
                    deserializedTargetDetails.filePrefix = reader.getString();
                } else if ("restoreTargetLocationType".equals(fieldName)) {
                    deserializedTargetDetails.restoreTargetLocationType
                        = RestoreTargetLocationType.fromString(reader.getString());
                } else if ("url".equals(fieldName)) {
                    deserializedTargetDetails.url = reader.getString();
                } else if ("targetResourceArmId".equals(fieldName)) {
                    deserializedTargetDetails.targetResourceArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTargetDetails;
        });
    }
}
