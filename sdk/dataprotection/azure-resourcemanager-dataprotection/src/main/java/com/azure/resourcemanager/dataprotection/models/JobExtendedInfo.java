// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Extended Information about the job.
 */
@Fluent
public final class JobExtendedInfo implements JsonSerializable<JobExtendedInfo> {
    /*
     * Job's Additional Details
     */
    private Map<String, String> additionalDetails;

    /*
     * State of the Backup Instance
     */
    private String backupInstanceState;

    /*
     * Number of bytes transferred
     */
    private Double dataTransferredInBytes;

    /*
     * Destination where restore is done
     */
    private String recoveryDestination;

    /*
     * Details of the Source Recovery Point
     */
    private RestoreJobRecoveryPointDetails sourceRecoverPoint;

    /*
     * List of Sub Tasks of the job
     */
    private List<JobSubTask> subTasks;

    /*
     * Details of the Target Recovery Point
     */
    private RestoreJobRecoveryPointDetails targetRecoverPoint;

    /*
     * A List, detailing the warnings related to the job
     */
    private List<UserFacingWarningDetail> warningDetails;

    /**
     * Creates an instance of JobExtendedInfo class.
     */
    public JobExtendedInfo() {
    }

    /**
     * Get the additionalDetails property: Job's Additional Details.
     * 
     * @return the additionalDetails value.
     */
    public Map<String, String> additionalDetails() {
        return this.additionalDetails;
    }

    /**
     * Set the additionalDetails property: Job's Additional Details.
     * 
     * @param additionalDetails the additionalDetails value to set.
     * @return the JobExtendedInfo object itself.
     */
    public JobExtendedInfo withAdditionalDetails(Map<String, String> additionalDetails) {
        this.additionalDetails = additionalDetails;
        return this;
    }

    /**
     * Get the backupInstanceState property: State of the Backup Instance.
     * 
     * @return the backupInstanceState value.
     */
    public String backupInstanceState() {
        return this.backupInstanceState;
    }

    /**
     * Get the dataTransferredInBytes property: Number of bytes transferred.
     * 
     * @return the dataTransferredInBytes value.
     */
    public Double dataTransferredInBytes() {
        return this.dataTransferredInBytes;
    }

    /**
     * Get the recoveryDestination property: Destination where restore is done.
     * 
     * @return the recoveryDestination value.
     */
    public String recoveryDestination() {
        return this.recoveryDestination;
    }

    /**
     * Get the sourceRecoverPoint property: Details of the Source Recovery Point.
     * 
     * @return the sourceRecoverPoint value.
     */
    public RestoreJobRecoveryPointDetails sourceRecoverPoint() {
        return this.sourceRecoverPoint;
    }

    /**
     * Get the subTasks property: List of Sub Tasks of the job.
     * 
     * @return the subTasks value.
     */
    public List<JobSubTask> subTasks() {
        return this.subTasks;
    }

    /**
     * Get the targetRecoverPoint property: Details of the Target Recovery Point.
     * 
     * @return the targetRecoverPoint value.
     */
    public RestoreJobRecoveryPointDetails targetRecoverPoint() {
        return this.targetRecoverPoint;
    }

    /**
     * Get the warningDetails property: A List, detailing the warnings related to the job.
     * 
     * @return the warningDetails value.
     */
    public List<UserFacingWarningDetail> warningDetails() {
        return this.warningDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceRecoverPoint() != null) {
            sourceRecoverPoint().validate();
        }
        if (subTasks() != null) {
            subTasks().forEach(e -> e.validate());
        }
        if (targetRecoverPoint() != null) {
            targetRecoverPoint().validate();
        }
        if (warningDetails() != null) {
            warningDetails().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("additionalDetails", this.additionalDetails,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JobExtendedInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JobExtendedInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JobExtendedInfo.
     */
    public static JobExtendedInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JobExtendedInfo deserializedJobExtendedInfo = new JobExtendedInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("additionalDetails".equals(fieldName)) {
                    Map<String, String> additionalDetails = reader.readMap(reader1 -> reader1.getString());
                    deserializedJobExtendedInfo.additionalDetails = additionalDetails;
                } else if ("backupInstanceState".equals(fieldName)) {
                    deserializedJobExtendedInfo.backupInstanceState = reader.getString();
                } else if ("dataTransferredInBytes".equals(fieldName)) {
                    deserializedJobExtendedInfo.dataTransferredInBytes = reader.getNullable(JsonReader::getDouble);
                } else if ("recoveryDestination".equals(fieldName)) {
                    deserializedJobExtendedInfo.recoveryDestination = reader.getString();
                } else if ("sourceRecoverPoint".equals(fieldName)) {
                    deserializedJobExtendedInfo.sourceRecoverPoint = RestoreJobRecoveryPointDetails.fromJson(reader);
                } else if ("subTasks".equals(fieldName)) {
                    List<JobSubTask> subTasks = reader.readArray(reader1 -> JobSubTask.fromJson(reader1));
                    deserializedJobExtendedInfo.subTasks = subTasks;
                } else if ("targetRecoverPoint".equals(fieldName)) {
                    deserializedJobExtendedInfo.targetRecoverPoint = RestoreJobRecoveryPointDetails.fromJson(reader);
                } else if ("warningDetails".equals(fieldName)) {
                    List<UserFacingWarningDetail> warningDetails
                        = reader.readArray(reader1 -> UserFacingWarningDetail.fromJson(reader1));
                    deserializedJobExtendedInfo.warningDetails = warningDetails;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJobExtendedInfo;
        });
    }
}
