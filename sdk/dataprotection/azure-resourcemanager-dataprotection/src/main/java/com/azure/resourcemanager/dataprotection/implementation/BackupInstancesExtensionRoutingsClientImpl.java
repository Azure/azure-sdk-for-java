// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.dataprotection.fluent.BackupInstancesExtensionRoutingsClient;
import com.azure.resourcemanager.dataprotection.fluent.models.BackupInstanceResourceInner;
import com.azure.resourcemanager.dataprotection.implementation.models.BackupInstanceResourceList;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BackupInstancesExtensionRoutingsClient.
 */
public final class BackupInstancesExtensionRoutingsClientImpl implements BackupInstancesExtensionRoutingsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BackupInstancesExtensionRoutingsService service;

    /**
     * The service client containing this operation class.
     */
    private final DataProtectionManagementClientImpl client;

    /**
     * Initializes an instance of BackupInstancesExtensionRoutingsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BackupInstancesExtensionRoutingsClientImpl(DataProtectionManagementClientImpl client) {
        this.service = RestProxy.create(BackupInstancesExtensionRoutingsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DataProtectionManagementClientBackupInstancesExtensionRoutings to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DataProtectionManagementClientBackupInstancesExtensionRoutings")
    public interface BackupInstancesExtensionRoutingsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceId}/providers/Microsoft.DataProtection/backupInstances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BackupInstanceResourceList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceId}/providers/Microsoft.DataProtection/backupInstances")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BackupInstanceResourceList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceId", encoded = true) String resourceId, @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets a list of backup instances associated with a tracked resource.
     * 
     * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of backup instances associated with a tracked resource along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BackupInstanceResourceInner>> listSinglePageAsync(String resourceId) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), resourceId,
                accept, context))
            .<PagedResponse<BackupInstanceResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of backup instances associated with a tracked resource.
     * 
     * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of backup instances associated with a tracked resource as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<BackupInstanceResourceInner> listAsync(String resourceId) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceId));
    }

    /**
     * Gets a list of backup instances associated with a tracked resource.
     * 
     * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of backup instances associated with a tracked resource along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BackupInstanceResourceInner> listSinglePage(String resourceId) {
        final String accept = "application/json";
        Response<BackupInstanceResourceList> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), resourceId, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            null, null);
    }

    /**
     * Gets a list of backup instances associated with a tracked resource.
     * 
     * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of backup instances associated with a tracked resource along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BackupInstanceResourceInner> listSinglePage(String resourceId, Context context) {
        final String accept = "application/json";
        Response<BackupInstanceResourceList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), resourceId, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            null, null);
    }

    /**
     * Gets a list of backup instances associated with a tracked resource.
     * 
     * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of backup instances associated with a tracked resource as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupInstanceResourceInner> list(String resourceId) {
        return new PagedIterable<>(() -> listSinglePage(resourceId));
    }

    /**
     * Gets a list of backup instances associated with a tracked resource.
     * 
     * @param resourceId ARM path of the resource to be protected using Microsoft.DataProtection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of backup instances associated with a tracked resource as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupInstanceResourceInner> list(String resourceId, Context context) {
        return new PagedIterable<>(() -> listSinglePage(resourceId, context));
    }
}
