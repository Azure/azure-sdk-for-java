// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AzureBackupRule
 * 
 * Azure backup rule.
 */
@Fluent
public final class AzureBackupRule extends BasePolicyRule {
    /*
     * The objectType property.
     */
    private String objectType = "AzureBackupRule";

    /*
     * BackupParameters base
     */
    private BackupParameters backupParameters;

    /*
     * DataStoreInfo base
     */
    private DataStoreInfoBase dataStore;

    /*
     * Trigger context
     */
    private TriggerContext trigger;

    /**
     * Creates an instance of AzureBackupRule class.
     */
    public AzureBackupRule() {
    }

    /**
     * Get the objectType property: The objectType property.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the backupParameters property: BackupParameters base.
     * 
     * @return the backupParameters value.
     */
    public BackupParameters backupParameters() {
        return this.backupParameters;
    }

    /**
     * Set the backupParameters property: BackupParameters base.
     * 
     * @param backupParameters the backupParameters value to set.
     * @return the AzureBackupRule object itself.
     */
    public AzureBackupRule withBackupParameters(BackupParameters backupParameters) {
        this.backupParameters = backupParameters;
        return this;
    }

    /**
     * Get the dataStore property: DataStoreInfo base.
     * 
     * @return the dataStore value.
     */
    public DataStoreInfoBase dataStore() {
        return this.dataStore;
    }

    /**
     * Set the dataStore property: DataStoreInfo base.
     * 
     * @param dataStore the dataStore value to set.
     * @return the AzureBackupRule object itself.
     */
    public AzureBackupRule withDataStore(DataStoreInfoBase dataStore) {
        this.dataStore = dataStore;
        return this;
    }

    /**
     * Get the trigger property: Trigger context.
     * 
     * @return the trigger value.
     */
    public TriggerContext trigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: Trigger context.
     * 
     * @param trigger the trigger value to set.
     * @return the AzureBackupRule object itself.
     */
    public AzureBackupRule withTrigger(TriggerContext trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AzureBackupRule withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (backupParameters() != null) {
            backupParameters().validate();
        }
        if (dataStore() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dataStore in model AzureBackupRule"));
        } else {
            dataStore().validate();
        }
        if (trigger() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property trigger in model AzureBackupRule"));
        } else {
            trigger().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureBackupRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeJsonField("dataStore", this.dataStore);
        jsonWriter.writeJsonField("trigger", this.trigger);
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeJsonField("backupParameters", this.backupParameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBackupRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBackupRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureBackupRule.
     */
    public static AzureBackupRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBackupRule deserializedAzureBackupRule = new AzureBackupRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAzureBackupRule.withName(reader.getString());
                } else if ("dataStore".equals(fieldName)) {
                    deserializedAzureBackupRule.dataStore = DataStoreInfoBase.fromJson(reader);
                } else if ("trigger".equals(fieldName)) {
                    deserializedAzureBackupRule.trigger = TriggerContext.fromJson(reader);
                } else if ("objectType".equals(fieldName)) {
                    deserializedAzureBackupRule.objectType = reader.getString();
                } else if ("backupParameters".equals(fieldName)) {
                    deserializedAzureBackupRule.backupParameters = BackupParameters.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBackupRule;
        });
    }
}
