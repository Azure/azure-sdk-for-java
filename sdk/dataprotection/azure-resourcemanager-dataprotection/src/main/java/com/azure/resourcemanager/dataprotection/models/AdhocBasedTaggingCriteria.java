// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AdhocBasedTaggingCriteria
 * 
 * Adhoc backup tagging criteria.
 */
@Fluent
public final class AdhocBasedTaggingCriteria implements JsonSerializable<AdhocBasedTaggingCriteria> {
    /*
     * Retention tag information
     */
    private RetentionTag tagInfo;

    /**
     * Creates an instance of AdhocBasedTaggingCriteria class.
     */
    public AdhocBasedTaggingCriteria() {
    }

    /**
     * Get the tagInfo property: Retention tag information.
     * 
     * @return the tagInfo value.
     */
    public RetentionTag tagInfo() {
        return this.tagInfo;
    }

    /**
     * Set the tagInfo property: Retention tag information.
     * 
     * @param tagInfo the tagInfo value to set.
     * @return the AdhocBasedTaggingCriteria object itself.
     */
    public AdhocBasedTaggingCriteria withTagInfo(RetentionTag tagInfo) {
        this.tagInfo = tagInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tagInfo() != null) {
            tagInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("tagInfo", this.tagInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdhocBasedTaggingCriteria from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdhocBasedTaggingCriteria if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdhocBasedTaggingCriteria.
     */
    public static AdhocBasedTaggingCriteria fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdhocBasedTaggingCriteria deserializedAdhocBasedTaggingCriteria = new AdhocBasedTaggingCriteria();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tagInfo".equals(fieldName)) {
                    deserializedAdhocBasedTaggingCriteria.tagInfo = RetentionTag.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdhocBasedTaggingCriteria;
        });
    }
}
