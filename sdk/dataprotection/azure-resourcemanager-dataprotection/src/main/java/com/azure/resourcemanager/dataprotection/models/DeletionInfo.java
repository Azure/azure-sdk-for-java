// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Deletion Info.
 */
@Immutable
public final class DeletionInfo implements JsonSerializable<DeletionInfo> {
    /*
     * Specifies time of deletion
     */
    private String deletionTime;

    /*
     * Specifies billing end date
     */
    private String billingEndDate;

    /*
     * Specifies purge time
     */
    private String scheduledPurgeTime;

    /*
     * Delete activity ID for troubleshooting purpose
     */
    private String deleteActivityId;

    /**
     * Creates an instance of DeletionInfo class.
     */
    public DeletionInfo() {
    }

    /**
     * Get the deletionTime property: Specifies time of deletion.
     * 
     * @return the deletionTime value.
     */
    public String deletionTime() {
        return this.deletionTime;
    }

    /**
     * Get the billingEndDate property: Specifies billing end date.
     * 
     * @return the billingEndDate value.
     */
    public String billingEndDate() {
        return this.billingEndDate;
    }

    /**
     * Get the scheduledPurgeTime property: Specifies purge time.
     * 
     * @return the scheduledPurgeTime value.
     */
    public String scheduledPurgeTime() {
        return this.scheduledPurgeTime;
    }

    /**
     * Get the deleteActivityId property: Delete activity ID for troubleshooting purpose.
     * 
     * @return the deleteActivityId value.
     */
    public String deleteActivityId() {
        return this.deleteActivityId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeletionInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeletionInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeletionInfo.
     */
    public static DeletionInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeletionInfo deserializedDeletionInfo = new DeletionInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deletionTime".equals(fieldName)) {
                    deserializedDeletionInfo.deletionTime = reader.getString();
                } else if ("billingEndDate".equals(fieldName)) {
                    deserializedDeletionInfo.billingEndDate = reader.getString();
                } else if ("scheduledPurgeTime".equals(fieldName)) {
                    deserializedDeletionInfo.scheduledPurgeTime = reader.getString();
                } else if ("deleteActivityID".equals(fieldName)) {
                    deserializedDeletionInfo.deleteActivityId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeletionInfo;
        });
    }
}
