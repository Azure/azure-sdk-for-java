// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Error object used by layers that have access to localized content, and propagate that to user.
 */
@Immutable
public final class UserFacingError implements JsonSerializable<UserFacingError> {
    /*
     * Unique code for this error
     */
    private String code;

    /*
     * Additional related Errors
     */
    private List<UserFacingError> details;

    /*
     * Inner Error
     */
    private InnerError innerError;

    /*
     * Whether the operation will be retryable or not
     */
    private Boolean isRetryable;

    /*
     * Whether the operation is due to a user error or service error
     */
    private Boolean isUserError;

    /*
     * Any key value pairs that can be injected inside error object
     */
    private Map<String, String> properties;

    /*
     * The message property.
     */
    private String message;

    /*
     * RecommendedAction � localized.
     */
    private List<String> recommendedAction;

    /*
     * Target of the error.
     */
    private String target;

    /**
     * Creates an instance of UserFacingError class.
     */
    private UserFacingError() {
    }

    /**
     * Get the code property: Unique code for this error.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the details property: Additional related Errors.
     * 
     * @return the details value.
     */
    public List<UserFacingError> details() {
        return this.details;
    }

    /**
     * Get the innerError property: Inner Error.
     * 
     * @return the innerError value.
     */
    public InnerError innerError() {
        return this.innerError;
    }

    /**
     * Get the isRetryable property: Whether the operation will be retryable or not.
     * 
     * @return the isRetryable value.
     */
    public Boolean isRetryable() {
        return this.isRetryable;
    }

    /**
     * Get the isUserError property: Whether the operation is due to a user error or service error.
     * 
     * @return the isUserError value.
     */
    public Boolean isUserError() {
        return this.isUserError;
    }

    /**
     * Get the properties property: Any key value pairs that can be injected inside error object.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Get the message property: The message property.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the recommendedAction property: RecommendedAction � localized.
     * 
     * @return the recommendedAction value.
     */
    public List<String> recommendedAction() {
        return this.recommendedAction;
    }

    /**
     * Get the target property: Target of the error.
     * 
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeArrayField("details", this.details, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("innerError", this.innerError);
        jsonWriter.writeBooleanField("isRetryable", this.isRetryable);
        jsonWriter.writeBooleanField("isUserError", this.isUserError);
        jsonWriter.writeMapField("properties", this.properties, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeArrayField("recommendedAction", this.recommendedAction,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("target", this.target);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserFacingError from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserFacingError if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserFacingError.
     */
    public static UserFacingError fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserFacingError deserializedUserFacingError = new UserFacingError();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedUserFacingError.code = reader.getString();
                } else if ("details".equals(fieldName)) {
                    List<UserFacingError> details = reader.readArray(reader1 -> UserFacingError.fromJson(reader1));
                    deserializedUserFacingError.details = details;
                } else if ("innerError".equals(fieldName)) {
                    deserializedUserFacingError.innerError = InnerError.fromJson(reader);
                } else if ("isRetryable".equals(fieldName)) {
                    deserializedUserFacingError.isRetryable = reader.getNullable(JsonReader::getBoolean);
                } else if ("isUserError".equals(fieldName)) {
                    deserializedUserFacingError.isUserError = reader.getNullable(JsonReader::getBoolean);
                } else if ("properties".equals(fieldName)) {
                    Map<String, String> properties = reader.readMap(reader1 -> reader1.getString());
                    deserializedUserFacingError.properties = properties;
                } else if ("message".equals(fieldName)) {
                    deserializedUserFacingError.message = reader.getString();
                } else if ("recommendedAction".equals(fieldName)) {
                    List<String> recommendedAction = reader.readArray(reader1 -> reader1.getString());
                    deserializedUserFacingError.recommendedAction = recommendedAction;
                } else if ("target".equals(fieldName)) {
                    deserializedUserFacingError.target = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserFacingError;
        });
    }
}
