// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Azure backup discrete RecoveryPoint.
 */
@Immutable
public final class AzureBackupDiscreteRecoveryPoint extends AzureBackupRecoveryPoint {
    /*
     * The objectType property.
     */
    private String objectType = "AzureBackupDiscreteRecoveryPoint";

    /*
     * The friendlyName property.
     */
    private String friendlyName;

    /*
     * The recoveryPointDataStoresDetails property.
     */
    private List<RecoveryPointDataStoreDetails> recoveryPointDataStoresDetails;

    /*
     * The recoveryPointTime property.
     */
    private OffsetDateTime recoveryPointTime;

    /*
     * The policyName property.
     */
    private String policyName;

    /*
     * The policyVersion property.
     */
    private String policyVersion;

    /*
     * The recoveryPointId property.
     */
    private String recoveryPointId;

    /*
     * The recoveryPointType property.
     */
    private String recoveryPointType;

    /*
     * The retentionTagName property.
     */
    private String retentionTagName;

    /*
     * The retentionTagVersion property.
     */
    private String retentionTagVersion;

    /*
     * The expiryTime property.
     */
    private OffsetDateTime expiryTime;

    /*
     * Specifies recovery point completeness. Partial (i.e., only some of the intended items were backed up), or
     * Completed (i.e., ALL intended items were backed up).
     */
    private RecoveryPointCompletionState recoveryPointState;

    /**
     * Creates an instance of AzureBackupDiscreteRecoveryPoint class.
     */
    private AzureBackupDiscreteRecoveryPoint() {
    }

    /**
     * Get the objectType property: The objectType property.
     * 
     * @return the objectType value.
     */
    @Override
    public String objectType() {
        return this.objectType;
    }

    /**
     * Get the friendlyName property: The friendlyName property.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Get the recoveryPointDataStoresDetails property: The recoveryPointDataStoresDetails property.
     * 
     * @return the recoveryPointDataStoresDetails value.
     */
    public List<RecoveryPointDataStoreDetails> recoveryPointDataStoresDetails() {
        return this.recoveryPointDataStoresDetails;
    }

    /**
     * Get the recoveryPointTime property: The recoveryPointTime property.
     * 
     * @return the recoveryPointTime value.
     */
    public OffsetDateTime recoveryPointTime() {
        return this.recoveryPointTime;
    }

    /**
     * Get the policyName property: The policyName property.
     * 
     * @return the policyName value.
     */
    public String policyName() {
        return this.policyName;
    }

    /**
     * Get the policyVersion property: The policyVersion property.
     * 
     * @return the policyVersion value.
     */
    public String policyVersion() {
        return this.policyVersion;
    }

    /**
     * Get the recoveryPointId property: The recoveryPointId property.
     * 
     * @return the recoveryPointId value.
     */
    public String recoveryPointId() {
        return this.recoveryPointId;
    }

    /**
     * Get the recoveryPointType property: The recoveryPointType property.
     * 
     * @return the recoveryPointType value.
     */
    public String recoveryPointType() {
        return this.recoveryPointType;
    }

    /**
     * Get the retentionTagName property: The retentionTagName property.
     * 
     * @return the retentionTagName value.
     */
    public String retentionTagName() {
        return this.retentionTagName;
    }

    /**
     * Get the retentionTagVersion property: The retentionTagVersion property.
     * 
     * @return the retentionTagVersion value.
     */
    public String retentionTagVersion() {
        return this.retentionTagVersion;
    }

    /**
     * Get the expiryTime property: The expiryTime property.
     * 
     * @return the expiryTime value.
     */
    public OffsetDateTime expiryTime() {
        return this.expiryTime;
    }

    /**
     * Get the recoveryPointState property: Specifies recovery point completeness. Partial (i.e., only some of the
     * intended items were backed up), or Completed (i.e., ALL intended items were backed up).
     * 
     * @return the recoveryPointState value.
     */
    public RecoveryPointCompletionState recoveryPointState() {
        return this.recoveryPointState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recoveryPointTime",
            this.recoveryPointTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.recoveryPointTime));
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeArrayField("recoveryPointDataStoresDetails", this.recoveryPointDataStoresDetails,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("policyName", this.policyName);
        jsonWriter.writeStringField("policyVersion", this.policyVersion);
        jsonWriter.writeStringField("recoveryPointId", this.recoveryPointId);
        jsonWriter.writeStringField("recoveryPointType", this.recoveryPointType);
        jsonWriter.writeStringField("retentionTagName", this.retentionTagName);
        jsonWriter.writeStringField("retentionTagVersion", this.retentionTagVersion);
        jsonWriter.writeStringField("recoveryPointState",
            this.recoveryPointState == null ? null : this.recoveryPointState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureBackupDiscreteRecoveryPoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureBackupDiscreteRecoveryPoint if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureBackupDiscreteRecoveryPoint.
     */
    public static AzureBackupDiscreteRecoveryPoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureBackupDiscreteRecoveryPoint deserializedAzureBackupDiscreteRecoveryPoint
                = new AzureBackupDiscreteRecoveryPoint();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recoveryPointTime".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.recoveryPointTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("objectType".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.objectType = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.friendlyName = reader.getString();
                } else if ("recoveryPointDataStoresDetails".equals(fieldName)) {
                    List<RecoveryPointDataStoreDetails> recoveryPointDataStoresDetails
                        = reader.readArray(reader1 -> RecoveryPointDataStoreDetails.fromJson(reader1));
                    deserializedAzureBackupDiscreteRecoveryPoint.recoveryPointDataStoresDetails
                        = recoveryPointDataStoresDetails;
                } else if ("policyName".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.policyName = reader.getString();
                } else if ("policyVersion".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.policyVersion = reader.getString();
                } else if ("recoveryPointId".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.recoveryPointId = reader.getString();
                } else if ("recoveryPointType".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.recoveryPointType = reader.getString();
                } else if ("retentionTagName".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.retentionTagName = reader.getString();
                } else if ("retentionTagVersion".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.retentionTagVersion = reader.getString();
                } else if ("expiryTime".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.expiryTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("recoveryPointState".equals(fieldName)) {
                    deserializedAzureBackupDiscreteRecoveryPoint.recoveryPointState
                        = RecoveryPointCompletionState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureBackupDiscreteRecoveryPoint;
        });
    }
}
