// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** BackupVault Backup Vault. */
@Fluent
public final class BackupVault {
    /*
     * Provisioning state of the BackupVault resource
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * Resource move state for backup vault
     */
    @JsonProperty(value = "resourceMoveState", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceMoveState resourceMoveState;

    /*
     * Resource move details for backup vault
     */
    @JsonProperty(value = "resourceMoveDetails", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceMoveDetails resourceMoveDetails;

    /*
     * Storage Settings
     */
    @JsonProperty(value = "storageSettings", required = true)
    private List<StorageSetting> storageSettings;

    /*
     * Monitoring Settings
     */
    @JsonProperty(value = "monitoringSettings")
    private MonitoringSettings monitoringSettings;

    /**
     * Get the provisioningState property: Provisioning state of the BackupVault resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceMoveState property: Resource move state for backup vault.
     *
     * @return the resourceMoveState value.
     */
    public ResourceMoveState resourceMoveState() {
        return this.resourceMoveState;
    }

    /**
     * Get the resourceMoveDetails property: Resource move details for backup vault.
     *
     * @return the resourceMoveDetails value.
     */
    public ResourceMoveDetails resourceMoveDetails() {
        return this.resourceMoveDetails;
    }

    /**
     * Get the storageSettings property: Storage Settings.
     *
     * @return the storageSettings value.
     */
    public List<StorageSetting> storageSettings() {
        return this.storageSettings;
    }

    /**
     * Set the storageSettings property: Storage Settings.
     *
     * @param storageSettings the storageSettings value to set.
     * @return the BackupVault object itself.
     */
    public BackupVault withStorageSettings(List<StorageSetting> storageSettings) {
        this.storageSettings = storageSettings;
        return this;
    }

    /**
     * Get the monitoringSettings property: Monitoring Settings.
     *
     * @return the monitoringSettings value.
     */
    public MonitoringSettings monitoringSettings() {
        return this.monitoringSettings;
    }

    /**
     * Set the monitoringSettings property: Monitoring Settings.
     *
     * @param monitoringSettings the monitoringSettings value to set.
     * @return the BackupVault object itself.
     */
    public BackupVault withMonitoringSettings(MonitoringSettings monitoringSettings) {
        this.monitoringSettings = monitoringSettings;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceMoveDetails() != null) {
            resourceMoveDetails().validate();
        }
        if (storageSettings() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property storageSettings in model BackupVault"));
        } else {
            storageSettings().forEach(e -> e.validate());
        }
        if (monitoringSettings() != null) {
            monitoringSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BackupVault.class);
}
