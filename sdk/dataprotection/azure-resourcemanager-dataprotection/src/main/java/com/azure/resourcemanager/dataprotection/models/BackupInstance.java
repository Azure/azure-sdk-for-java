// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Backup Instance.
 */
@Fluent
public class BackupInstance implements JsonSerializable<BackupInstance> {
    /*
     * Gets or sets the Backup Instance friendly name.
     */
    private String friendlyName;

    /*
     * Gets or sets the data source information.
     */
    private Datasource dataSourceInfo;

    /*
     * Gets or sets the data source set information.
     */
    private DatasourceSet dataSourceSetInfo;

    /*
     * Gets or sets the policy information.
     */
    private PolicyInfo policyInfo;

    /*
     * ResourceGuardOperationRequests on which LAC check will be performed
     */
    private List<String> resourceGuardOperationRequests;

    /*
     * Specifies the protection status of the resource
     */
    private ProtectionStatusDetails protectionStatus;

    /*
     * Specifies the current protection state of the resource
     */
    private CurrentProtectionState currentProtectionState;

    /*
     * Specifies the protection error of the resource
     */
    private UserFacingError protectionErrorDetails;

    /*
     * Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed
     */
    private String provisioningState;

    /*
     * Credentials to use to authenticate with data source provider.
     */
    private AuthCredentials datasourceAuthCredentials;

    /*
     * Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run
     * again.
     */
    private ValidationType validationType;

    /*
     * Contains information of the Identity Details for the BI.
     * If it is null, default will be considered as System Assigned.
     */
    private IdentityDetails identityDetails;

    /*
     * The objectType property.
     */
    private String objectType;

    /**
     * Creates an instance of BackupInstance class.
     */
    public BackupInstance() {
    }

    /**
     * Get the friendlyName property: Gets or sets the Backup Instance friendly name.
     * 
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Gets or sets the Backup Instance friendly name.
     * 
     * @param friendlyName the friendlyName value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the dataSourceInfo property: Gets or sets the data source information.
     * 
     * @return the dataSourceInfo value.
     */
    public Datasource dataSourceInfo() {
        return this.dataSourceInfo;
    }

    /**
     * Set the dataSourceInfo property: Gets or sets the data source information.
     * 
     * @param dataSourceInfo the dataSourceInfo value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withDataSourceInfo(Datasource dataSourceInfo) {
        this.dataSourceInfo = dataSourceInfo;
        return this;
    }

    /**
     * Get the dataSourceSetInfo property: Gets or sets the data source set information.
     * 
     * @return the dataSourceSetInfo value.
     */
    public DatasourceSet dataSourceSetInfo() {
        return this.dataSourceSetInfo;
    }

    /**
     * Set the dataSourceSetInfo property: Gets or sets the data source set information.
     * 
     * @param dataSourceSetInfo the dataSourceSetInfo value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withDataSourceSetInfo(DatasourceSet dataSourceSetInfo) {
        this.dataSourceSetInfo = dataSourceSetInfo;
        return this;
    }

    /**
     * Get the policyInfo property: Gets or sets the policy information.
     * 
     * @return the policyInfo value.
     */
    public PolicyInfo policyInfo() {
        return this.policyInfo;
    }

    /**
     * Set the policyInfo property: Gets or sets the policy information.
     * 
     * @param policyInfo the policyInfo value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withPolicyInfo(PolicyInfo policyInfo) {
        this.policyInfo = policyInfo;
        return this;
    }

    /**
     * Get the resourceGuardOperationRequests property: ResourceGuardOperationRequests on which LAC check will be
     * performed.
     * 
     * @return the resourceGuardOperationRequests value.
     */
    public List<String> resourceGuardOperationRequests() {
        return this.resourceGuardOperationRequests;
    }

    /**
     * Set the resourceGuardOperationRequests property: ResourceGuardOperationRequests on which LAC check will be
     * performed.
     * 
     * @param resourceGuardOperationRequests the resourceGuardOperationRequests value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withResourceGuardOperationRequests(List<String> resourceGuardOperationRequests) {
        this.resourceGuardOperationRequests = resourceGuardOperationRequests;
        return this;
    }

    /**
     * Get the protectionStatus property: Specifies the protection status of the resource.
     * 
     * @return the protectionStatus value.
     */
    public ProtectionStatusDetails protectionStatus() {
        return this.protectionStatus;
    }

    /**
     * Set the protectionStatus property: Specifies the protection status of the resource.
     * 
     * @param protectionStatus the protectionStatus value to set.
     * @return the BackupInstance object itself.
     */
    BackupInstance withProtectionStatus(ProtectionStatusDetails protectionStatus) {
        this.protectionStatus = protectionStatus;
        return this;
    }

    /**
     * Get the currentProtectionState property: Specifies the current protection state of the resource.
     * 
     * @return the currentProtectionState value.
     */
    public CurrentProtectionState currentProtectionState() {
        return this.currentProtectionState;
    }

    /**
     * Set the currentProtectionState property: Specifies the current protection state of the resource.
     * 
     * @param currentProtectionState the currentProtectionState value to set.
     * @return the BackupInstance object itself.
     */
    BackupInstance withCurrentProtectionState(CurrentProtectionState currentProtectionState) {
        this.currentProtectionState = currentProtectionState;
        return this;
    }

    /**
     * Get the protectionErrorDetails property: Specifies the protection error of the resource.
     * 
     * @return the protectionErrorDetails value.
     */
    public UserFacingError protectionErrorDetails() {
        return this.protectionErrorDetails;
    }

    /**
     * Set the protectionErrorDetails property: Specifies the protection error of the resource.
     * 
     * @param protectionErrorDetails the protectionErrorDetails value to set.
     * @return the BackupInstance object itself.
     */
    BackupInstance withProtectionErrorDetails(UserFacingError protectionErrorDetails) {
        this.protectionErrorDetails = protectionErrorDetails;
        return this;
    }

    /**
     * Get the provisioningState property: Specifies the provisioning state of the resource i.e.
     * provisioning/updating/Succeeded/Failed.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Specifies the provisioning state of the resource i.e.
     * provisioning/updating/Succeeded/Failed.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the BackupInstance object itself.
     */
    BackupInstance withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the datasourceAuthCredentials property: Credentials to use to authenticate with data source provider.
     * 
     * @return the datasourceAuthCredentials value.
     */
    public AuthCredentials datasourceAuthCredentials() {
        return this.datasourceAuthCredentials;
    }

    /**
     * Set the datasourceAuthCredentials property: Credentials to use to authenticate with data source provider.
     * 
     * @param datasourceAuthCredentials the datasourceAuthCredentials value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withDatasourceAuthCredentials(AuthCredentials datasourceAuthCredentials) {
        this.datasourceAuthCredentials = datasourceAuthCredentials;
        return this;
    }

    /**
     * Get the validationType property: Specifies the type of validation. In case of DeepValidation, all validations
     * from /validateForBackup API will run again.
     * 
     * @return the validationType value.
     */
    public ValidationType validationType() {
        return this.validationType;
    }

    /**
     * Set the validationType property: Specifies the type of validation. In case of DeepValidation, all validations
     * from /validateForBackup API will run again.
     * 
     * @param validationType the validationType value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withValidationType(ValidationType validationType) {
        this.validationType = validationType;
        return this;
    }

    /**
     * Get the identityDetails property: Contains information of the Identity Details for the BI.
     * If it is null, default will be considered as System Assigned.
     * 
     * @return the identityDetails value.
     */
    public IdentityDetails identityDetails() {
        return this.identityDetails;
    }

    /**
     * Set the identityDetails property: Contains information of the Identity Details for the BI.
     * If it is null, default will be considered as System Assigned.
     * 
     * @param identityDetails the identityDetails value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withIdentityDetails(IdentityDetails identityDetails) {
        this.identityDetails = identityDetails;
        return this;
    }

    /**
     * Get the objectType property: The objectType property.
     * 
     * @return the objectType value.
     */
    public String objectType() {
        return this.objectType;
    }

    /**
     * Set the objectType property: The objectType property.
     * 
     * @param objectType the objectType value to set.
     * @return the BackupInstance object itself.
     */
    public BackupInstance withObjectType(String objectType) {
        this.objectType = objectType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataSourceInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dataSourceInfo in model BackupInstance"));
        } else {
            dataSourceInfo().validate();
        }
        if (dataSourceSetInfo() != null) {
            dataSourceSetInfo().validate();
        }
        if (policyInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property policyInfo in model BackupInstance"));
        } else {
            policyInfo().validate();
        }
        if (protectionStatus() != null) {
            protectionStatus().validate();
        }
        if (protectionErrorDetails() != null) {
            protectionErrorDetails().validate();
        }
        if (datasourceAuthCredentials() != null) {
            datasourceAuthCredentials().validate();
        }
        if (identityDetails() != null) {
            identityDetails().validate();
        }
        if (objectType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property objectType in model BackupInstance"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BackupInstance.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("dataSourceInfo", this.dataSourceInfo);
        jsonWriter.writeJsonField("policyInfo", this.policyInfo);
        jsonWriter.writeStringField("objectType", this.objectType);
        jsonWriter.writeStringField("friendlyName", this.friendlyName);
        jsonWriter.writeJsonField("dataSourceSetInfo", this.dataSourceSetInfo);
        jsonWriter.writeArrayField("resourceGuardOperationRequests", this.resourceGuardOperationRequests,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("datasourceAuthCredentials", this.datasourceAuthCredentials);
        jsonWriter.writeStringField("validationType",
            this.validationType == null ? null : this.validationType.toString());
        jsonWriter.writeJsonField("identityDetails", this.identityDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackupInstance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackupInstance if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BackupInstance.
     */
    public static BackupInstance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackupInstance deserializedBackupInstance = new BackupInstance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataSourceInfo".equals(fieldName)) {
                    deserializedBackupInstance.dataSourceInfo = Datasource.fromJson(reader);
                } else if ("policyInfo".equals(fieldName)) {
                    deserializedBackupInstance.policyInfo = PolicyInfo.fromJson(reader);
                } else if ("objectType".equals(fieldName)) {
                    deserializedBackupInstance.objectType = reader.getString();
                } else if ("friendlyName".equals(fieldName)) {
                    deserializedBackupInstance.friendlyName = reader.getString();
                } else if ("dataSourceSetInfo".equals(fieldName)) {
                    deserializedBackupInstance.dataSourceSetInfo = DatasourceSet.fromJson(reader);
                } else if ("resourceGuardOperationRequests".equals(fieldName)) {
                    List<String> resourceGuardOperationRequests = reader.readArray(reader1 -> reader1.getString());
                    deserializedBackupInstance.resourceGuardOperationRequests = resourceGuardOperationRequests;
                } else if ("protectionStatus".equals(fieldName)) {
                    deserializedBackupInstance.protectionStatus = ProtectionStatusDetails.fromJson(reader);
                } else if ("currentProtectionState".equals(fieldName)) {
                    deserializedBackupInstance.currentProtectionState
                        = CurrentProtectionState.fromString(reader.getString());
                } else if ("protectionErrorDetails".equals(fieldName)) {
                    deserializedBackupInstance.protectionErrorDetails = UserFacingError.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBackupInstance.provisioningState = reader.getString();
                } else if ("datasourceAuthCredentials".equals(fieldName)) {
                    deserializedBackupInstance.datasourceAuthCredentials = AuthCredentials.fromJson(reader);
                } else if ("validationType".equals(fieldName)) {
                    deserializedBackupInstance.validationType = ValidationType.fromString(reader.getString());
                } else if ("identityDetails".equals(fieldName)) {
                    deserializedBackupInstance.identityDetails = IdentityDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackupInstance;
        });
    }
}
