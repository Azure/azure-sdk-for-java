// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * RetentionTag
 * 
 * Retention tag.
 */
@Fluent
public final class RetentionTag implements JsonSerializable<RetentionTag> {
    /*
     * Retention Tag version.
     */
    private String etag;

    /*
     * Retention Tag version.
     */
    private String id;

    /*
     * Retention Tag Name to relate it to retention rule.
     */
    private String tagName;

    /**
     * Creates an instance of RetentionTag class.
     */
    public RetentionTag() {
    }

    /**
     * Get the etag property: Retention Tag version.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Get the id property: Retention Tag version.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the tagName property: Retention Tag Name to relate it to retention rule.
     * 
     * @return the tagName value.
     */
    public String tagName() {
        return this.tagName;
    }

    /**
     * Set the tagName property: Retention Tag Name to relate it to retention rule.
     * 
     * @param tagName the tagName value to set.
     * @return the RetentionTag object itself.
     */
    public RetentionTag withTagName(String tagName) {
        this.tagName = tagName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tagName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property tagName in model RetentionTag"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RetentionTag.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tagName", this.tagName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetentionTag from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetentionTag if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RetentionTag.
     */
    public static RetentionTag fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RetentionTag deserializedRetentionTag = new RetentionTag();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tagName".equals(fieldName)) {
                    deserializedRetentionTag.tagName = reader.getString();
                } else if ("eTag".equals(fieldName)) {
                    deserializedRetentionTag.etag = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedRetentionTag.id = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRetentionTag;
        });
    }
}
