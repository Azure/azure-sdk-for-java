// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The details of the managed identity used for CMK.
 */
@Fluent
public final class CmkKekIdentity implements JsonSerializable<CmkKekIdentity> {
    /*
     * The identity type. 'SystemAssigned' and 'UserAssigned' are mutually exclusive. 'SystemAssigned' will use
     * implicitly created managed identity.
     */
    private IdentityType identityType;

    /*
     * The managed identity to be used which has access permissions to the Key Vault. Provide a value here in case
     * identity types: 'UserAssigned' only.
     */
    private String identityId;

    /**
     * Creates an instance of CmkKekIdentity class.
     */
    public CmkKekIdentity() {
    }

    /**
     * Get the identityType property: The identity type. 'SystemAssigned' and 'UserAssigned' are mutually exclusive.
     * 'SystemAssigned' will use implicitly created managed identity.
     * 
     * @return the identityType value.
     */
    public IdentityType identityType() {
        return this.identityType;
    }

    /**
     * Set the identityType property: The identity type. 'SystemAssigned' and 'UserAssigned' are mutually exclusive.
     * 'SystemAssigned' will use implicitly created managed identity.
     * 
     * @param identityType the identityType value to set.
     * @return the CmkKekIdentity object itself.
     */
    public CmkKekIdentity withIdentityType(IdentityType identityType) {
        this.identityType = identityType;
        return this;
    }

    /**
     * Get the identityId property: The managed identity to be used which has access permissions to the Key Vault.
     * Provide a value here in case identity types: 'UserAssigned' only.
     * 
     * @return the identityId value.
     */
    public String identityId() {
        return this.identityId;
    }

    /**
     * Set the identityId property: The managed identity to be used which has access permissions to the Key Vault.
     * Provide a value here in case identity types: 'UserAssigned' only.
     * 
     * @param identityId the identityId value to set.
     * @return the CmkKekIdentity object itself.
     */
    public CmkKekIdentity withIdentityId(String identityId) {
        this.identityId = identityId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("identityType", this.identityType == null ? null : this.identityType.toString());
        jsonWriter.writeStringField("identityId", this.identityId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CmkKekIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CmkKekIdentity if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CmkKekIdentity.
     */
    public static CmkKekIdentity fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CmkKekIdentity deserializedCmkKekIdentity = new CmkKekIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identityType".equals(fieldName)) {
                    deserializedCmkKekIdentity.identityType = IdentityType.fromString(reader.getString());
                } else if ("identityId".equals(fieldName)) {
                    deserializedCmkKekIdentity.identityId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCmkKekIdentity;
        });
    }
}
