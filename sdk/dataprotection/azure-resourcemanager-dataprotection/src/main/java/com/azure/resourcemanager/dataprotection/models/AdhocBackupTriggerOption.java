// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AdhocBackupTriggerOption
 * 
 * Adhoc backup trigger option.
 */
@Fluent
public final class AdhocBackupTriggerOption implements JsonSerializable<AdhocBackupTriggerOption> {
    /*
     * The retentionTagOverride property.
     */
    private String retentionTagOverride;

    /**
     * Creates an instance of AdhocBackupTriggerOption class.
     */
    public AdhocBackupTriggerOption() {
    }

    /**
     * Get the retentionTagOverride property: The retentionTagOverride property.
     * 
     * @return the retentionTagOverride value.
     */
    public String retentionTagOverride() {
        return this.retentionTagOverride;
    }

    /**
     * Set the retentionTagOverride property: The retentionTagOverride property.
     * 
     * @param retentionTagOverride the retentionTagOverride value to set.
     * @return the AdhocBackupTriggerOption object itself.
     */
    public AdhocBackupTriggerOption withRetentionTagOverride(String retentionTagOverride) {
        this.retentionTagOverride = retentionTagOverride;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("retentionTagOverride", this.retentionTagOverride);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdhocBackupTriggerOption from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdhocBackupTriggerOption if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdhocBackupTriggerOption.
     */
    public static AdhocBackupTriggerOption fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdhocBackupTriggerOption deserializedAdhocBackupTriggerOption = new AdhocBackupTriggerOption();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retentionTagOverride".equals(fieldName)) {
                    deserializedAdhocBackupTriggerOption.retentionTagOverride = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdhocBackupTriggerOption;
        });
    }
}
