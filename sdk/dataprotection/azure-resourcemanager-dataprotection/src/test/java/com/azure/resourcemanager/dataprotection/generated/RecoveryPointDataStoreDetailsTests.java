// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.RecoveryPointDataStoreDetails;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class RecoveryPointDataStoreDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecoveryPointDataStoreDetails model = BinaryData.fromString(
            "{\"creationTime\":\"2021-02-04T11:13:35Z\",\"expiryTime\":\"2021-02-26T15:24:40Z\",\"id\":\"qrvqq\",\"metaData\":\"t\",\"state\":\"nrvgoupmfiibfgg\",\"type\":\"ool\",\"visible\":true,\"rehydrationExpiryTime\":\"2021-01-31T00:57:49Z\",\"rehydrationStatus\":\"COMPLETED\"}")
            .toObject(RecoveryPointDataStoreDetails.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T11:13:35Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T15:24:40Z"), model.expiryTime());
        Assertions.assertEquals("qrvqq", model.id());
        Assertions.assertEquals("t", model.metadata());
        Assertions.assertEquals("nrvgoupmfiibfgg", model.state());
        Assertions.assertEquals("ool", model.type());
        Assertions.assertTrue(model.visible());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecoveryPointDataStoreDetails model
            = new RecoveryPointDataStoreDetails().withCreationTime(OffsetDateTime.parse("2021-02-04T11:13:35Z"))
                .withExpiryTime(OffsetDateTime.parse("2021-02-26T15:24:40Z"))
                .withId("qrvqq")
                .withMetadata("t")
                .withState("nrvgoupmfiibfgg")
                .withType("ool")
                .withVisible(true);
        model = BinaryData.fromObject(model).toObject(RecoveryPointDataStoreDetails.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T11:13:35Z"), model.creationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T15:24:40Z"), model.expiryTime());
        Assertions.assertEquals("qrvqq", model.id());
        Assertions.assertEquals("t", model.metadata());
        Assertions.assertEquals("nrvgoupmfiibfgg", model.state());
        Assertions.assertEquals("ool", model.type());
        Assertions.assertTrue(model.visible());
    }
}
