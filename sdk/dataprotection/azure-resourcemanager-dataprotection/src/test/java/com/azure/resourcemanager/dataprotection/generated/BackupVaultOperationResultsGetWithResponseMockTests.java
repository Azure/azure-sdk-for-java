// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultOperationResultsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Enabled\"}},\"provisioningState\":\"Provisioning\",\"resourceMoveState\":\"CommitFailed\",\"resourceMoveDetails\":{\"operationId\":\"bxv\",\"startTimeUtc\":\"itvtzeexavo\",\"completionTimeUtc\":\"fglecdmdqbwp\",\"sourceResourcePath\":\"q\",\"targetResourcePath\":\"sfj\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"On\",\"retentionDurationInDays\":68.567210748465},\"immutabilitySettings\":{\"state\":\"Disabled\"}},\"storageSettings\":[{\"datastoreType\":\"VaultStore\",\"type\":\"LocallyRedundant\"},{\"datastoreType\":\"ArchiveStore\",\"type\":\"LocallyRedundant\"},{\"datastoreType\":\"ArchiveStore\",\"type\":\"LocallyRedundant\"}],\"isVaultProtectedByResourceGuard\":false,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"Enabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Disabled\"}},\"secureScore\":\"None\",\"replicatedRegions\":[\"rcxfailcfxwmdb\",\"xdfgsftufqobr\",\"lnacgcc\",\"knh\"]},\"identity\":{\"principalId\":\"zvytnrzvuljraaer\",\"tenantId\":\"okqgukkjq\",\"type\":\"broyla\",\"userAssignedIdentities\":{\"disdosfjbjsvgj\":{\"principalId\":\"f87b8c63-b372-43b1-8f70-a5c613432ddd\",\"clientId\":\"760f38e0-8587-4c21-af39-e33abac819cd\"},\"r\":{\"principalId\":\"b267ddc0-ec52-4855-b929-1b184d040089\",\"clientId\":\"58f7b1c2-a664-44dd-ac29-72fb09afe547\"},\"cytdclxgccknfnwm\":{\"principalId\":\"752bfb3c-bac7-4129-9ea5-e8394c06124d\",\"clientId\":\"30efefcb-9d68-49f5-a56f-a5f3b684cef8\"}}},\"eTag\":\"mvpdvjdhttzaef\",\"location\":\"x\",\"tags\":{\"dfzpbgtgkylkdg\":\"hrphkmcrjdqn\"},\"id\":\"rjeuut\",\"name\":\"wxezwzhok\",\"type\":\"bwnhhtql\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataProtectionManager manager = DataProtectionManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupVaultResource response = manager.backupVaultOperationResults()
            .getWithResponse("vecuijpx", "xs", "wprtu", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("x", response.location());
        Assertions.assertEquals("hrphkmcrjdqn", response.tags().get("dfzpbgtgkylkdg"));
        Assertions.assertEquals("mvpdvjdhttzaef", response.etag());
        Assertions.assertEquals("broyla", response.identity().type());
        Assertions.assertEquals(AlertsState.ENABLED,
            response.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions.assertEquals(SoftDeleteState.ON,
            response.properties().securitySettings().softDeleteSettings().state());
        Assertions.assertEquals(68.567210748465D,
            response.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions.assertEquals(ImmutabilityState.DISABLED,
            response.properties().securitySettings().immutabilitySettings().state());
        Assertions.assertEquals(StorageSettingStoreTypes.VAULT_STORE,
            response.properties().storageSettings().get(0).datastoreType());
        Assertions.assertEquals(StorageSettingTypes.LOCALLY_REDUNDANT,
            response.properties().storageSettings().get(0).type());
        Assertions.assertEquals(CrossSubscriptionRestoreState.ENABLED,
            response.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions.assertEquals(CrossRegionRestoreState.DISABLED,
            response.properties().featureSettings().crossRegionRestoreSettings().state());
        Assertions.assertEquals("rcxfailcfxwmdb", response.properties().replicatedRegions().get(0));
    }
}
