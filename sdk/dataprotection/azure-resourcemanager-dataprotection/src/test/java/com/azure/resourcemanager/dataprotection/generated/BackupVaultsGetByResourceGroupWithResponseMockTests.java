// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Disabled\"}},\"provisioningState\":\"Failed\",\"resourceMoveState\":\"CommitFailed\",\"resourceMoveDetails\":{\"operationId\":\"bunzozudh\",\"startTimeUtc\":\"gkmoyxcdyuibhmfd\",\"completionTimeUtc\":\"zydvfvf\",\"sourceResourcePath\":\"naeo\",\"targetResourcePath\":\"rvhmgor\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"On\",\"retentionDurationInDays\":71.74888692263151},\"immutabilitySettings\":{\"state\":\"Unlocked\"}},\"storageSettings\":[{\"datastoreType\":\"OperationalStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"ArchiveStore\",\"type\":\"GeoRedundant\"}],\"isVaultProtectedByResourceGuard\":false,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"PermanentlyDisabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Enabled\"}},\"secureScore\":\"Adequate\"},\"identity\":{\"principalId\":\"jfzqlqhycavodgg\",\"tenantId\":\"beesmieknlra\",\"type\":\"aawiuagydwqfb\",\"userAssignedIdentities\":{\"giagtcojo\":{\"principalId\":\"4c1b70df-e96d-4ef6-8c3e-2c9f8b042761\",\"clientId\":\"d69abbb5-dfe3-4eb5-a402-a6c2fb14a9f5\"}}},\"eTag\":\"wogfnzjvu\",\"location\":\"zldmozuxy\",\"tags\":{\"grjqctojcmi\":\"btkadpysownbtgkb\",\"eypefojyqd\":\"of\",\"hlhzdsqtzbsrgno\":\"cuplcplcwkhih\",\"teyowclu\":\"cjhfgmvecactxmw\"},\"id\":\"ovekqvgqouwi\",\"name\":\"zmpjwyiv\",\"type\":\"ikf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataProtectionManager manager =
            DataProtectionManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupVaultResource response =
            manager
                .backupVaults()
                .getByResourceGroupWithResponse("khocxvdfffwaf", "roud", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("zldmozuxy", response.location());
        Assertions.assertEquals("btkadpysownbtgkb", response.tags().get("grjqctojcmi"));
        Assertions.assertEquals("wogfnzjvu", response.etag());
        Assertions.assertEquals("aawiuagydwqfb", response.identity().type());
        Assertions
            .assertEquals(
                AlertsState.DISABLED,
                response.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions
            .assertEquals(SoftDeleteState.ON, response.properties().securitySettings().softDeleteSettings().state());
        Assertions
            .assertEquals(
                71.74888692263151D,
                response.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions
            .assertEquals(
                ImmutabilityState.UNLOCKED, response.properties().securitySettings().immutabilitySettings().state());
        Assertions
            .assertEquals(
                StorageSettingStoreTypes.OPERATIONAL_STORE,
                response.properties().storageSettings().get(0).datastoreType());
        Assertions
            .assertEquals(StorageSettingTypes.ZONE_REDUNDANT, response.properties().storageSettings().get(0).type());
        Assertions
            .assertEquals(
                CrossSubscriptionRestoreState.PERMANENTLY_DISABLED,
                response.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions
            .assertEquals(
                CrossRegionRestoreState.ENABLED,
                response.properties().featureSettings().crossRegionRestoreSettings().state());
    }
}
