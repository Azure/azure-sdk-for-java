// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Disabled\"}},\"provisioningState\":\"Succeeded\",\"resourceMoveState\":\"CommitFailed\",\"resourceMoveDetails\":{\"operationId\":\"wafqroud\",\"startTimeUtc\":\"pavehhr\",\"completionTimeUtc\":\"bunzozudh\",\"sourceResourcePath\":\"gkmoyxcdyuibhmfd\",\"targetResourcePath\":\"zydvfvf\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"AlwaysOn\",\"retentionDurationInDays\":36.76075011838522},\"immutabilitySettings\":{\"state\":\"Locked\"}},\"storageSettings\":[{\"datastoreType\":\"ArchiveStore\",\"type\":\"LocallyRedundant\"},{\"datastoreType\":\"OperationalStore\",\"type\":\"LocallyRedundant\"},{\"datastoreType\":\"OperationalStore\",\"type\":\"GeoRedundant\"}],\"isVaultProtectedByResourceGuard\":true,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"Disabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Disabled\"}},\"secureScore\":\"None\",\"replicatedRegions\":[\"l\",\"btgn\",\"nzeyqxtjj\",\"zqlqhyc\"]},\"identity\":{\"principalId\":\"dggxdbeesmi\",\"tenantId\":\"nlrariaawiuagy\",\"type\":\"qfby\",\"userAssignedIdentities\":{\"iagtc\":{\"principalId\":\"a8e09e4f-4730-4ddf-a7d1-5f08ede19489\",\"clientId\":\"4643c6cc-b942-4d14-8109-37004d2b19d5\"}}},\"eTag\":\"ocqwogfnzjvus\",\"location\":\"ld\",\"tags\":{\"own\":\"uxylfsbtkadpy\",\"isofieypefojyqd\":\"tgkbugrjqctojc\",\"hlhzdsqtzbsrgno\":\"cuplcplcwkhih\",\"teyowclu\":\"cjhfgmvecactxmw\"},\"id\":\"ovekqvgqouwi\",\"name\":\"zmpjwyiv\",\"type\":\"ikf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataProtectionManager manager = DataProtectionManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupVaultResource response = manager.backupVaults()
            .getByResourceGroupWithResponse("ymbrnysuxmpraf", "g", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("ld", response.location());
        Assertions.assertEquals("uxylfsbtkadpy", response.tags().get("own"));
        Assertions.assertEquals("ocqwogfnzjvus", response.etag());
        Assertions.assertEquals("qfby", response.identity().type());
        Assertions.assertEquals(AlertsState.DISABLED,
            response.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions.assertEquals(SoftDeleteState.ALWAYS_ON,
            response.properties().securitySettings().softDeleteSettings().state());
        Assertions.assertEquals(36.76075011838522D,
            response.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions.assertEquals(ImmutabilityState.LOCKED,
            response.properties().securitySettings().immutabilitySettings().state());
        Assertions.assertEquals(StorageSettingStoreTypes.ARCHIVE_STORE,
            response.properties().storageSettings().get(0).datastoreType());
        Assertions.assertEquals(StorageSettingTypes.LOCALLY_REDUNDANT,
            response.properties().storageSettings().get(0).type());
        Assertions.assertEquals(CrossSubscriptionRestoreState.DISABLED,
            response.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions.assertEquals(CrossRegionRestoreState.DISABLED,
            response.properties().featureSettings().crossRegionRestoreSettings().state());
        Assertions.assertEquals("l", response.properties().replicatedRegions().get(0));
    }
}
