// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Enabled\"}},\"provisioningState\":\"Succeeded\",\"resourceMoveState\":\"MoveSucceeded\",\"resourceMoveDetails\":{\"operationId\":\"bf\",\"startTimeUtc\":\"clnpkci\",\"completionTimeUtc\":\"zriykhy\",\"sourceResourcePath\":\"fvjlboxqvkjlmx\",\"targetResourcePath\":\"mdy\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"Off\",\"retentionDurationInDays\":92.44657852084777},\"immutabilitySettings\":{\"state\":\"Disabled\"}},\"storageSettings\":[{\"datastoreType\":\"ArchiveStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"LocallyRedundant\"}],\"isVaultProtectedByResourceGuard\":false,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"Disabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Disabled\"}},\"secureScore\":\"Adequate\"},\"identity\":{\"principalId\":\"iqyuvvfo\",\"tenantId\":\"p\",\"type\":\"qyikvy\",\"userAssignedIdentities\":{\"vluwmncsttij\":{\"principalId\":\"46ce289c-67d0-4d4e-aadc-f17d8b1a6765\",\"clientId\":\"5eaeb323-8fd2-4284-8614-65268c9cfa0b\"}}},\"eTag\":\"bvpoekrsgsgbdhu\",\"location\":\"gnjdgkynscliqhz\",\"tags\":{\"mtk\":\"nk\",\"ppnvdxz\":\"bo\",\"hlfkqojpy\":\"hihfrbbcevqagtlt\"},\"id\":\"vgtrdcnifmzzs\",\"name\":\"ymbrnysuxmpraf\",\"type\":\"g\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataProtectionManager manager =
            DataProtectionManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BackupVaultResource> response =
            manager.backupVaults().listByResourceGroup("cokpv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gnjdgkynscliqhz", response.iterator().next().location());
        Assertions.assertEquals("nk", response.iterator().next().tags().get("mtk"));
        Assertions.assertEquals("bvpoekrsgsgbdhu", response.iterator().next().etag());
        Assertions.assertEquals("qyikvy", response.iterator().next().identity().type());
        Assertions
            .assertEquals(
                AlertsState.ENABLED,
                response
                    .iterator()
                    .next()
                    .properties()
                    .monitoringSettings()
                    .azureMonitorAlertSettings()
                    .alertsForAllJobFailures());
        Assertions
            .assertEquals(
                SoftDeleteState.OFF,
                response.iterator().next().properties().securitySettings().softDeleteSettings().state());
        Assertions
            .assertEquals(
                92.44657852084777D,
                response
                    .iterator()
                    .next()
                    .properties()
                    .securitySettings()
                    .softDeleteSettings()
                    .retentionDurationInDays());
        Assertions
            .assertEquals(
                ImmutabilityState.DISABLED,
                response.iterator().next().properties().securitySettings().immutabilitySettings().state());
        Assertions
            .assertEquals(
                StorageSettingStoreTypes.ARCHIVE_STORE,
                response.iterator().next().properties().storageSettings().get(0).datastoreType());
        Assertions
            .assertEquals(
                StorageSettingTypes.ZONE_REDUNDANT,
                response.iterator().next().properties().storageSettings().get(0).type());
        Assertions
            .assertEquals(
                CrossSubscriptionRestoreState.DISABLED,
                response.iterator().next().properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions
            .assertEquals(
                CrossRegionRestoreState.DISABLED,
                response.iterator().next().properties().featureSettings().crossRegionRestoreSettings().state());
    }
}
