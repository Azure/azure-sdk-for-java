// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.ResourceGuard;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ResourceGuardsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Updating\",\"allowAutoApprovals\":false,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"ch\",\"requestResourceType\":\"sjlpjrtwszhv\"}],\"vaultCriticalOperationExclusionList\":[\"c\",\"hvtrrmhwrbfdpyf\",\"ubhvj\"],\"description\":\"r\"},\"eTag\":\"uyzlw\",\"location\":\"memhooclutnpq\",\"tags\":{\"mmyky\":\"czj\",\"rye\":\"jxsglhsr\"},\"id\":\"ylmbkzudni\",\"name\":\"rfih\",\"type\":\"tjewlpxuzzj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataProtectionManager manager = DataProtectionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ResourceGuardResource response = manager.resourceGuards()
            .define("clgsc")
            .withRegion("vwgf")
            .withExistingResourceGroup("whoqhnlbqnbldxe")
            .withTags(mapOf("aoaf", "hqykizmdk", "gc", "luqvoxmycjimryv", "hecbvopwndyq", "wpbmzgwesydsxwef"))
            .withEtag("wlkjxn")
            .withProperties(new ResourceGuard().withVaultCriticalOperationExclusionList(Arrays.asList("hlvbmxu")))
            .create();

        Assertions.assertEquals("memhooclutnpq", response.location());
        Assertions.assertEquals("czj", response.tags().get("mmyky"));
        Assertions.assertEquals("uyzlw", response.etag());
        Assertions.assertEquals("c", response.properties().vaultCriticalOperationExclusionList().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
