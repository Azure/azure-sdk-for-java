// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.ResourceGuard;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ResourceGuardsPutWithResponseMockTests {
    @Test
    public void testPutWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Updating\",\"allowAutoApprovals\":false,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"ciqdsme\",\"requestResourceType\":\"itdfuxtyasiib\"},{\"vaultCriticalOperation\":\"ybnnustg\",\"requestResourceType\":\"jh\"},{\"vaultCriticalOperation\":\"g\",\"requestResourceType\":\"hcmavmqfo\"},{\"vaultCriticalOperation\":\"or\",\"requestResourceType\":\"gyyprotwy\"}],\"vaultCriticalOperationExclusionList\":[\"d\"],\"description\":\"xhugcm\"},\"eTag\":\"avlg\",\"location\":\"bmftpmdt\",\"tags\":{\"yj\":\"ltfvnz\",\"opv\":\"otp\",\"qgqqihedsvqwthmk\":\"bdb\",\"dhohsdtmcdzsuf\":\"ibcysihsgqc\"},\"id\":\"ohdxbzlmcmu\",\"name\":\"pcvhdbevwqqxeys\",\"type\":\"onqzinkfkbgbzbow\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataProtectionManager manager = DataProtectionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ResourceGuardResource response = manager.resourceGuards()
            .define("ihrraiouaub")
            .withRegion("hsgz")
            .withExistingResourceGroup("oxjumvqqo")
            .withTags(mapOf("gleohi", "bgomfgbegl", "eebtijvacvb", "etnluankrrfx", "evehjkuyxoaf", "qzbqqxlajrnwxa"))
            .withProperties(new ResourceGuard().withVaultCriticalOperationExclusionList(Arrays.asList("i")))
            .withETag("eevy")
            .create();

        Assertions.assertEquals("bmftpmdt", response.location());
        Assertions.assertEquals("ltfvnz", response.tags().get("yj"));
        Assertions.assertEquals("d", response.properties().vaultCriticalOperationExclusionList().get(0));
        Assertions.assertEquals("avlg", response.eTag());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
