// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.DppTrackedResource;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppTrackedResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppTrackedResource model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"wlokjyem\",\"tenantId\":\"vnipjox\",\"type\":\"nchgej\",\"userAssignedIdentities\":{\"ailzydehojwyahu\":{\"principalId\":\"111ecbf3-c364-4fe2-9ad0-40b324e96d54\",\"clientId\":\"d955da79-481c-4bf6-b708-db1a242a1d10\"},\"pmqnja\":{\"principalId\":\"2ac43ce6-533d-41fc-a260-8eed7cb77929\",\"clientId\":\"55cdfce4-8897-4c8b-9a0d-3d55ef137a3c\"},\"xj\":{\"principalId\":\"adaf6ac4-1ded-438a-b528-2ab54fe90ba6\",\"clientId\":\"edf04646-e216-45f8-966c-9a3b0a74294b\"}}},\"eTag\":\"r\",\"location\":\"vcputegj\",\"tags\":{\"dvpjhulsuuvmk\":\"fdatsc\",\"jdpvwryo\":\"ozkrwfndiodjpslw\",\"hbcryffdfdosyge\":\"psoacctazakljl\"},\"id\":\"paojakhmsbzjh\",\"name\":\"rzevdphlxaol\",\"type\":\"hqtrgqjbpf\"}")
            .toObject(DppTrackedResource.class);
        Assertions.assertEquals("vcputegj", model.location());
        Assertions.assertEquals("fdatsc", model.tags().get("dvpjhulsuuvmk"));
        Assertions.assertEquals("r", model.etag());
        Assertions.assertEquals("nchgej", model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppTrackedResource model = new DppTrackedResource().withLocation("vcputegj")
            .withTags(
                mapOf("dvpjhulsuuvmk", "fdatsc", "jdpvwryo", "ozkrwfndiodjpslw", "hbcryffdfdosyge", "psoacctazakljl"))
            .withEtag("r")
            .withIdentity(new DppIdentityDetails().withType("nchgej")
                .withUserAssignedIdentities(mapOf("ailzydehojwyahu", new UserAssignedIdentity(), "pmqnja",
                    new UserAssignedIdentity(), "xj", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(DppTrackedResource.class);
        Assertions.assertEquals("vcputegj", model.location());
        Assertions.assertEquals("fdatsc", model.tags().get("dvpjhulsuuvmk"));
        Assertions.assertEquals("r", model.etag());
        Assertions.assertEquals("nchgej", model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
