// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardOperationDetail;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardProxyBase;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardProxyBaseResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DppResourceGuardProxiesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"resourceGuardResourceId\":\"hguynuchlgmltxdw\",\"resourceGuardOperationDetails\":[{\"vaultCriticalOperation\":\"us\",\"defaultResourceRequest\":\"vlnsnnjz\"},{\"vaultCriticalOperation\":\"afolpymwamxqzrag\",\"defaultResourceRequest\":\"dphtv\"}],\"lastUpdatedTime\":\"lajv\",\"description\":\"jchcsrlzknmzla\"},\"id\":\"updwv\",\"name\":\"phcnzqtpj\",\"type\":\"mqrhvthl\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataProtectionManager manager =
            DataProtectionManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ResourceGuardProxyBaseResource response =
            manager
                .dppResourceGuardProxies()
                .define("jpu")
                .withExistingBackupVault("zrvjfnmjmvlwyzgi", "lkujrllfojui")
                .withProperties(
                    new ResourceGuardProxyBase()
                        .withResourceGuardResourceId("ucejikzoeovvtz")
                        .withResourceGuardOperationDetails(
                            Arrays
                                .asList(
                                    new ResourceGuardOperationDetail()
                                        .withVaultCriticalOperation("jklntikyj")
                                        .withDefaultResourceRequest("k")))
                        .withLastUpdatedTime("qzolxrzvhqjw")
                        .withDescription("htgv"))
                .create();

        Assertions.assertEquals("hguynuchlgmltxdw", response.properties().resourceGuardResourceId());
        Assertions
            .assertEquals("us", response.properties().resourceGuardOperationDetails().get(0).vaultCriticalOperation());
        Assertions
            .assertEquals(
                "vlnsnnjz", response.properties().resourceGuardOperationDetails().get(0).defaultResourceRequest());
        Assertions.assertEquals("lajv", response.properties().lastUpdatedTime());
        Assertions.assertEquals("jchcsrlzknmzla", response.properties().description());
    }
}
