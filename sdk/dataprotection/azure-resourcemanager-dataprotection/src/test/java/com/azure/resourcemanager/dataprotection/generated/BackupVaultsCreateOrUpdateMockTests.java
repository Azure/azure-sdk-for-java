// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.AzureMonitorAlertSettings;
import com.azure.resourcemanager.dataprotection.models.BackupVault;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreSettings;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreSettings;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.FeatureSettings;
import com.azure.resourcemanager.dataprotection.models.ImmutabilitySettings;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.MonitoringSettings;
import com.azure.resourcemanager.dataprotection.models.SecuritySettings;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteSettings;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSetting;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Enabled\"}},\"provisioningState\":\"Succeeded\",\"resourceMoveState\":\"PartialSuccess\",\"resourceMoveDetails\":{\"operationId\":\"vyi\",\"startTimeUtc\":\"qodfvp\",\"completionTimeUtc\":\"hoxgsgbpf\",\"sourceResourcePath\":\"djtxvzflbq\",\"targetResourcePath\":\"aqvlgafcqusr\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"Off\",\"retentionDurationInDays\":73.27288317818137},\"immutabilitySettings\":{\"state\":\"Unlocked\"}},\"storageSettings\":[{\"datastoreType\":\"VaultStore\",\"type\":\"LocallyRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"GeoRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"GeoRedundant\"},{\"datastoreType\":\"OperationalStore\",\"type\":\"ZoneRedundant\"}],\"isVaultProtectedByResourceGuard\":true,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"PermanentlyDisabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Enabled\"}},\"secureScore\":\"None\",\"replicatedRegions\":[\"jjxundxgke\",\"wzhhzjhfjmhvvmuv\",\"pmuneqsx\",\"mhfbuzjy\"]},\"identity\":{\"principalId\":\"as\",\"tenantId\":\"udypohyuems\",\"type\":\"nsqyrpfoobrltt\",\"userAssignedIdentities\":{\"ygqdnfwqzdz\":{\"principalId\":\"a0e66c7f-bcb9-496b-acfd-610bcf21842a\",\"clientId\":\"a649ec7b-d20e-4ad5-b0b5-8ef55dde535b\"},\"la\":{\"principalId\":\"34c38179-caa4-44b4-966a-9c9dd3b0f8df\",\"clientId\":\"6b37486d-63f3-4a4e-a274-9964486bc29f\"},\"fhqlyvi\":{\"principalId\":\"715effa6-25f5-4c74-8fb2-e77c5a05b93c\",\"clientId\":\"ae3f6e04-f2e1-4a41-9a79-861fb020d499\"},\"wivkxo\":{\"principalId\":\"905cc609-8449-4da8-96de-a76b0f2b076c\",\"clientId\":\"45b74c75-7c3e-4927-8970-4e2d63bc4a34\"}}},\"eTag\":\"un\",\"location\":\"xxrtikvc\",\"tags\":{\"tso\":\"gclrci\",\"pdnqqskawaoqvmmb\":\"frkenxpmyyefrp\"},\"id\":\"pqfrtqlkz\",\"name\":\"egnitg\",\"type\":\"kxlzyqdrfeg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataProtectionManager manager = DataProtectionManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupVaultResource response = manager.backupVaults().define("zhyrpeto").withRegion("gncxykxhdj")
            .withExistingResourceGroup("qseypxiutcxa")
            .withProperties(new BackupVault()
                .withMonitoringSettings(new MonitoringSettings().withAzureMonitorAlertSettings(
                    new AzureMonitorAlertSettings().withAlertsForAllJobFailures(AlertsState.ENABLED)))
                .withSecuritySettings(new SecuritySettings()
                    .withSoftDeleteSettings(new SoftDeleteSettings().withState(SoftDeleteState.ALWAYS_ON)
                        .withRetentionDurationInDays(29.275683310623478D))
                    .withImmutabilitySettings(new ImmutabilitySettings().withState(ImmutabilityState.UNLOCKED)))
                .withStorageSettings(Arrays.asList(
                    new StorageSetting().withDatastoreType(StorageSettingStoreTypes.OPERATIONAL_STORE)
                        .withType(StorageSettingTypes.ZONE_REDUNDANT),
                    new StorageSetting().withDatastoreType(StorageSettingStoreTypes.ARCHIVE_STORE)
                        .withType(StorageSettingTypes.ZONE_REDUNDANT),
                    new StorageSetting().withDatastoreType(StorageSettingStoreTypes.ARCHIVE_STORE)
                        .withType(StorageSettingTypes.GEO_REDUNDANT),
                    new StorageSetting().withDatastoreType(StorageSettingStoreTypes.VAULT_STORE)
                        .withType(StorageSettingTypes.LOCALLY_REDUNDANT)))
                .withFeatureSettings(new FeatureSettings()
                    .withCrossSubscriptionRestoreSettings(
                        new CrossSubscriptionRestoreSettings().withState(CrossSubscriptionRestoreState.ENABLED))
                    .withCrossRegionRestoreSettings(
                        new CrossRegionRestoreSettings().withState(CrossRegionRestoreState.ENABLED)))
                .withReplicatedRegions(Arrays.asList("ulkb", "wpfaj", "jwltlwtjjgu")))
            .withTags(mapOf("rxvxcjzh", "mmbcxfhbcp", "qscjavftjuh", "izxfpxt")).withEtag("l")
            .withIdentity(new DppIdentityDetails().withType("azul")
                .withUserAssignedIdentities(mapOf("wwnpj", new UserAssignedIdentity(), "zswpchwa",
                    new UserAssignedIdentity(), "ousnfepgfewe", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("xxrtikvc", response.location());
        Assertions.assertEquals("gclrci", response.tags().get("tso"));
        Assertions.assertEquals("un", response.etag());
        Assertions.assertEquals("nsqyrpfoobrltt", response.identity().type());
        Assertions.assertEquals(AlertsState.ENABLED,
            response.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions.assertEquals(SoftDeleteState.OFF,
            response.properties().securitySettings().softDeleteSettings().state());
        Assertions.assertEquals(73.27288317818137D,
            response.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions.assertEquals(ImmutabilityState.UNLOCKED,
            response.properties().securitySettings().immutabilitySettings().state());
        Assertions.assertEquals(StorageSettingStoreTypes.VAULT_STORE,
            response.properties().storageSettings().get(0).datastoreType());
        Assertions.assertEquals(StorageSettingTypes.LOCALLY_REDUNDANT,
            response.properties().storageSettings().get(0).type());
        Assertions.assertEquals(CrossSubscriptionRestoreState.PERMANENTLY_DISABLED,
            response.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions.assertEquals(CrossRegionRestoreState.ENABLED,
            response.properties().featureSettings().crossRegionRestoreSettings().state());
        Assertions.assertEquals("jjxundxgke", response.properties().replicatedRegions().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
