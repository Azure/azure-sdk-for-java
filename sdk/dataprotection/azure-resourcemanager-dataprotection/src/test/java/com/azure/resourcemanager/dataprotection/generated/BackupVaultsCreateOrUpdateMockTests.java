// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.BackupVault;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.FeatureSettings;
import com.azure.resourcemanager.dataprotection.models.MonitoringSettings;
import com.azure.resourcemanager.dataprotection.models.SecuritySettings;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"monitoringSettings\":{},\"provisioningState\":\"Succeeded\",\"resourceMoveState\":\"PrepareTimedout\",\"resourceMoveDetails\":{\"operationId\":\"goo\",\"startTimeUtc\":\"kqfqjbvl\",\"completionTimeUtc\":\"rfmluiqtq\",\"sourceResourcePath\":\"avyvnqqyba\",\"targetResourcePath\":\"euayjkqabqgzsles\"},\"securitySettings\":{},\"storageSettings\":[],\"isVaultProtectedByResourceGuard\":false,\"featureSettings\":{}},\"identity\":{\"principalId\":\"w\",\"tenantId\":\"cv\",\"type\":\"uwrbehwagoh\"},\"eTag\":\"f\",\"location\":\"mrqemvvhmx\",\"tags\":{\"ewzcjznmwcp\":\"jfutacoebj\",\"v\":\"guaadraufactkahz\"},\"id\":\"jjziuxxpsh\",\"name\":\"eekulfgslqubkwd\",\"type\":\"enr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataProtectionManager manager =
            DataProtectionManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupVaultResource response =
            manager
                .backupVaults()
                .define("qfzgemjdftul")
                .withRegion("zibt")
                .withExistingResourceGroup("lvtno")
                .withProperties(
                    new BackupVault()
                        .withMonitoringSettings(new MonitoringSettings())
                        .withSecuritySettings(new SecuritySettings())
                        .withStorageSettings(Arrays.asList())
                        .withFeatureSettings(new FeatureSettings()))
                .withTags(mapOf("stvdxeclz", "tgk", "kdl", "dqbcvhzlhplod"))
                .withEtag("yklyhpluodpvruud")
                .withIdentity(new DppIdentityDetails().withType("rc"))
                .create();

        Assertions.assertEquals("mrqemvvhmx", response.location());
        Assertions.assertEquals("jfutacoebj", response.tags().get("ewzcjznmwcp"));
        Assertions.assertEquals("f", response.etag());
        Assertions.assertEquals("uwrbehwagoh", response.identity().type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
