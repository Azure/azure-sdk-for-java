// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.AzureMonitorAlertSettings;
import com.azure.resourcemanager.dataprotection.models.BackupVault;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreSettings;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreSettings;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.FeatureSettings;
import com.azure.resourcemanager.dataprotection.models.ImmutabilitySettings;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.MonitoringSettings;
import com.azure.resourcemanager.dataprotection.models.SecuritySettings;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteSettings;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSetting;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Enabled\"}},\"provisioningState\":\"Succeeded\",\"resourceMoveState\":\"PrepareTimedout\",\"resourceMoveDetails\":{\"operationId\":\"euvyinzqodfvpgs\",\"startTimeUtc\":\"xgsg\",\"completionTimeUtc\":\"fgzdjtxvz\",\"sourceResourcePath\":\"bqvgaqv\",\"targetResourcePath\":\"a\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"Off\",\"retentionDurationInDays\":38.97441720807582},\"immutabilitySettings\":{\"state\":\"Disabled\"}},\"storageSettings\":[{\"datastoreType\":\"ArchiveStore\",\"type\":\"LocallyRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"OperationalStore\",\"type\":\"ZoneRedundant\"}],\"isVaultProtectedByResourceGuard\":true,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"Disabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Enabled\"}},\"secureScore\":\"Maximum\"},\"identity\":{\"principalId\":\"ekdxuku\",\"tenantId\":\"sjjxundxgketw\",\"type\":\"hzjhf\",\"userAssignedIdentities\":{\"muvgp\":{\"principalId\":\"064ceadf-b7bc-483a-8d61-390687b5d81b\",\"clientId\":\"85611a6f-fcb4-4efe-861b-27c047302e8f\"},\"eqsx\":{\"principalId\":\"909a84f7-be3b-4d49-8cb4-0ac272d4e6e8\",\"clientId\":\"8a858bc1-79db-49fe-a83c-f5b10c9c7123\"},\"fbuzjyihs\":{\"principalId\":\"019798cb-4757-4158-b694-546f00104f54\",\"clientId\":\"b8867c5b-b012-4e72-83aa-935b136deae0\"}}},\"eTag\":\"bhu\",\"location\":\"pohyuemslynsqyr\",\"tags\":{\"msjnygqdnfw\":\"obrltt\",\"ijouwivkxoyzunb\":\"zdzgtilaxhnfhqly\",\"wpgclrcivt\":\"xxrtikvc\"},\"id\":\"oxfrkenxpmyyefr\",\"name\":\"mpdnqqskawa\",\"type\":\"qvmmbn\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataProtectionManager manager =
            DataProtectionManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        BackupVaultResource response =
            manager
                .backupVaults()
                .define("zhyrpeto")
                .withRegion("bousn")
                .withExistingResourceGroup("qseypxiutcxa")
                .withProperties(
                    new BackupVault()
                        .withMonitoringSettings(
                            new MonitoringSettings()
                                .withAzureMonitorAlertSettings(
                                    new AzureMonitorAlertSettings().withAlertsForAllJobFailures(AlertsState.ENABLED)))
                        .withSecuritySettings(
                            new SecuritySettings()
                                .withSoftDeleteSettings(
                                    new SoftDeleteSettings()
                                        .withState(SoftDeleteState.ALWAYS_ON)
                                        .withRetentionDurationInDays(29.275683310623478D))
                                .withImmutabilitySettings(
                                    new ImmutabilitySettings().withState(ImmutabilityState.UNLOCKED)))
                        .withStorageSettings(
                            Arrays
                                .asList(
                                    new StorageSetting()
                                        .withDatastoreType(StorageSettingStoreTypes.OPERATIONAL_STORE)
                                        .withType(StorageSettingTypes.ZONE_REDUNDANT),
                                    new StorageSetting()
                                        .withDatastoreType(StorageSettingStoreTypes.ARCHIVE_STORE)
                                        .withType(StorageSettingTypes.ZONE_REDUNDANT),
                                    new StorageSetting()
                                        .withDatastoreType(StorageSettingStoreTypes.ARCHIVE_STORE)
                                        .withType(StorageSettingTypes.GEO_REDUNDANT),
                                    new StorageSetting()
                                        .withDatastoreType(StorageSettingStoreTypes.VAULT_STORE)
                                        .withType(StorageSettingTypes.LOCALLY_REDUNDANT)))
                        .withFeatureSettings(
                            new FeatureSettings()
                                .withCrossSubscriptionRestoreSettings(
                                    new CrossSubscriptionRestoreSettings()
                                        .withState(CrossSubscriptionRestoreState.ENABLED))
                                .withCrossRegionRestoreSettings(
                                    new CrossRegionRestoreSettings().withState(CrossRegionRestoreState.ENABLED))))
                .withTags(mapOf("ykxhdjh", "gfewetwlyxgnc", "h", "immbcx", "qizxfpxtgqscjavf", "cporxvxcjz"))
                .withEtag("pchwa")
                .withIdentity(
                    new DppIdentityDetails()
                        .withType("ktalhsnvkcdmxz")
                        .withUserAssignedIdentities(
                            mapOf(
                                "mlnwiaaomylweazu",
                                new UserAssignedIdentity(),
                                "ethwwnpjhlfz",
                                new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("pohyuemslynsqyr", response.location());
        Assertions.assertEquals("obrltt", response.tags().get("msjnygqdnfw"));
        Assertions.assertEquals("bhu", response.etag());
        Assertions.assertEquals("hzjhf", response.identity().type());
        Assertions
            .assertEquals(
                AlertsState.ENABLED,
                response.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions
            .assertEquals(SoftDeleteState.OFF, response.properties().securitySettings().softDeleteSettings().state());
        Assertions
            .assertEquals(
                38.97441720807582D,
                response.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions
            .assertEquals(
                ImmutabilityState.DISABLED, response.properties().securitySettings().immutabilitySettings().state());
        Assertions
            .assertEquals(
                StorageSettingStoreTypes.ARCHIVE_STORE, response.properties().storageSettings().get(0).datastoreType());
        Assertions
            .assertEquals(StorageSettingTypes.LOCALLY_REDUNDANT, response.properties().storageSettings().get(0).type());
        Assertions
            .assertEquals(
                CrossSubscriptionRestoreState.DISABLED,
                response.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions
            .assertEquals(
                CrossRegionRestoreState.ENABLED,
                response.properties().featureSettings().crossRegionRestoreSettings().state());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
