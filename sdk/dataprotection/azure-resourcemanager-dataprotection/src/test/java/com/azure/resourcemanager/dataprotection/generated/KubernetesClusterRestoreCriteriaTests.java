// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterRestoreCriteria\",\"includeClusterScopeResources\":true,\"includedNamespaces\":[\"qchiszep\",\"nb\",\"crxgibb\"],\"excludedNamespaces\":[\"confozauors\",\"kokwbqplhlvnu\",\"epzl\"],\"includedResourceTypes\":[\"wzsoldweyuqdunv\"],\"excludedResourceTypes\":[\"rwrbi\",\"rk\",\"alywjhhgdn\"],\"labelSelectors\":[\"sivfomilo\"],\"persistentVolumeRestoreMode\":\"RestoreWithVolumeData\",\"conflictPolicy\":\"Patch\",\"namespaceMappings\":{\"dieuzaofj\":\"q\",\"otcubi\":\"hvcyyysfg\",\"ipwoqonmacjek\":\"p\"},\"restoreHookReferences\":[{\"name\":\"hqvcimpevfgmblr\",\"namespace\":\"lbywdxsm\"}],\"resourceModifierReference\":{\"name\":\"wrwfscjfnyns\",\"namespace\":\"ujiz\"}}")
            .toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertTrue(model.includeClusterScopeResources());
        Assertions.assertEquals("qchiszep", model.includedNamespaces().get(0));
        Assertions.assertEquals("confozauors", model.excludedNamespaces().get(0));
        Assertions.assertEquals("wzsoldweyuqdunv", model.includedResourceTypes().get(0));
        Assertions.assertEquals("rwrbi", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("sivfomilo", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("q", model.namespaceMappings().get("dieuzaofj"));
        Assertions.assertEquals("hqvcimpevfgmblr", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("lbywdxsm", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("wrwfscjfnyns", model.resourceModifierReference().name());
        Assertions.assertEquals("ujiz", model.resourceModifierReference().namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterRestoreCriteria model = new KubernetesClusterRestoreCriteria()
            .withIncludeClusterScopeResources(true)
            .withIncludedNamespaces(Arrays.asList("qchiszep", "nb", "crxgibb"))
            .withExcludedNamespaces(Arrays.asList("confozauors", "kokwbqplhlvnu", "epzl"))
            .withIncludedResourceTypes(Arrays.asList("wzsoldweyuqdunv"))
            .withExcludedResourceTypes(Arrays.asList("rwrbi", "rk", "alywjhhgdn"))
            .withLabelSelectors(Arrays.asList("sivfomilo"))
            .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA)
            .withConflictPolicy(ExistingResourcePolicy.PATCH)
            .withNamespaceMappings(mapOf("dieuzaofj", "q", "otcubi", "hvcyyysfg", "ipwoqonmacjek", "p"))
            .withRestoreHookReferences(
                Arrays.asList(new NamespacedNameResource().withName("hqvcimpevfgmblr").withNamespace("lbywdxsm")))
            .withResourceModifierReference(new NamespacedNameResource().withName("wrwfscjfnyns").withNamespace("ujiz"));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertTrue(model.includeClusterScopeResources());
        Assertions.assertEquals("qchiszep", model.includedNamespaces().get(0));
        Assertions.assertEquals("confozauors", model.excludedNamespaces().get(0));
        Assertions.assertEquals("wzsoldweyuqdunv", model.includedResourceTypes().get(0));
        Assertions.assertEquals("rwrbi", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("sivfomilo", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("q", model.namespaceMappings().get("dieuzaofj"));
        Assertions.assertEquals("hqvcimpevfgmblr", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("lbywdxsm", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("wrwfscjfnyns", model.resourceModifierReference().name());
        Assertions.assertEquals("ujiz", model.resourceModifierReference().namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
