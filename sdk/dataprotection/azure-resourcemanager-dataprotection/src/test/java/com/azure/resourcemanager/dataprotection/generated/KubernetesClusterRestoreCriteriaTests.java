// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterRestoreCriteria\",\"includeClusterScopeResources\":false,\"includedNamespaces\":[\"oookkqfq\"],\"excludedNamespaces\":[\"leorfmluiqtqz\"],\"includedResourceTypes\":[\"yvnqqybaryeuay\",\"kq\"],\"excludedResourceTypes\":[\"gzslesjcbhernnti\",\"w\"],\"labelSelectors\":[\"vbquwr\"],\"persistentVolumeRestoreMode\":\"RestoreWithoutVolumeData\",\"conflictPolicy\":\"Skip\",\"namespaceMappings\":{\"mvvhmxtdrjfuta\":\"hbuffkmrq\"},\"restoreHookReferences\":[{\"name\":\"jvewzcjznmwcp\",\"namespace\":\"uaadraufactkahzo\"},{\"name\":\"jjziuxxpsh\",\"namespace\":\"e\"},{\"name\":\"lfg\",\"namespace\":\"qubkw\"}]}")
            .toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("oookkqfq", model.includedNamespaces().get(0));
        Assertions.assertEquals("leorfmluiqtqz", model.excludedNamespaces().get(0));
        Assertions.assertEquals("yvnqqybaryeuay", model.includedResourceTypes().get(0));
        Assertions.assertEquals("gzslesjcbhernnti", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("vbquwr", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.SKIP, model.conflictPolicy());
        Assertions.assertEquals("hbuffkmrq", model.namespaceMappings().get("mvvhmxtdrjfuta"));
        Assertions.assertEquals("jvewzcjznmwcp", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("uaadraufactkahzo", model.restoreHookReferences().get(0).namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterRestoreCriteria model = new KubernetesClusterRestoreCriteria()
            .withIncludeClusterScopeResources(false).withIncludedNamespaces(Arrays.asList("oookkqfq"))
            .withExcludedNamespaces(Arrays.asList("leorfmluiqtqz"))
            .withIncludedResourceTypes(Arrays.asList("yvnqqybaryeuay", "kq"))
            .withExcludedResourceTypes(Arrays.asList("gzslesjcbhernnti", "w"))
            .withLabelSelectors(Arrays.asList("vbquwr"))
            .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA)
            .withConflictPolicy(ExistingResourcePolicy.SKIP).withNamespaceMappings(mapOf("mvvhmxtdrjfuta", "hbuffkmrq"))
            .withRestoreHookReferences(
                Arrays.asList(new NamespacedNameResource().withName("jvewzcjznmwcp").withNamespace("uaadraufactkahzo"),
                    new NamespacedNameResource().withName("jjziuxxpsh").withNamespace("e"),
                    new NamespacedNameResource().withName("lfg").withNamespace("qubkw")));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("oookkqfq", model.includedNamespaces().get(0));
        Assertions.assertEquals("leorfmluiqtqz", model.excludedNamespaces().get(0));
        Assertions.assertEquals("yvnqqybaryeuay", model.includedResourceTypes().get(0));
        Assertions.assertEquals("gzslesjcbhernnti", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("vbquwr", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.SKIP, model.conflictPolicy());
        Assertions.assertEquals("hbuffkmrq", model.namespaceMappings().get("mvvhmxtdrjfuta"));
        Assertions.assertEquals("jvewzcjznmwcp", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("uaadraufactkahzo", model.restoreHookReferences().get(0).namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
