// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterRestoreCriteria\",\"includeClusterScopeResources\":true,\"includedNamespaces\":[\"oenkouknvudwti\"],\"excludedNamespaces\":[\"ldngkpoci\",\"azyxoegukg\",\"npiucgygevqznty\"],\"includedResourceTypes\":[\"bpizcdrqjsdpydn\",\"yhxdeoejzicwi\"],\"excludedResourceTypes\":[\"ttgzfbis\",\"cbkhajdeyeamdph\"],\"labelSelectors\":[\"lpbuxwgipwhonowk\",\"shwankixzbinje\",\"uttmrywnuzoqft\",\"yqzrnkcqvyxlw\"],\"persistentVolumeRestoreMode\":\"RestoreWithoutVolumeData\",\"conflictPolicy\":\"Patch\",\"namespaceMappings\":{\"avwhheunm\":\"hoqqnwvlr\",\"yaxuconuqszfkb\":\"qhgyxzkonocukok\",\"xsenhwlr\":\"ypewrmjmwvvjekt\",\"ihkaetcktvfc\":\"ffrzpwvlqdqgbiqy\"},\"restoreHookReferences\":[{\"name\":\"nkymuctqhjfbebrj\",\"namespace\":\"erfuwuttt\"},{\"name\":\"vjrbirphxepcyvah\",\"namespace\":\"ljkyqxjvuuj\"},{\"name\":\"idokgjlj\",\"namespace\":\"xgvcl\"}],\"resourceModifierReference\":{\"name\":\"sncghkjeszz\",\"namespace\":\"ijhtxf\"}}")
            .toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertTrue(model.includeClusterScopeResources());
        Assertions.assertEquals("oenkouknvudwti", model.includedNamespaces().get(0));
        Assertions.assertEquals("ldngkpoci", model.excludedNamespaces().get(0));
        Assertions.assertEquals("bpizcdrqjsdpydn", model.includedResourceTypes().get(0));
        Assertions.assertEquals("ttgzfbis", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("lpbuxwgipwhonowk", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("hoqqnwvlr", model.namespaceMappings().get("avwhheunm"));
        Assertions.assertEquals("nkymuctqhjfbebrj", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("erfuwuttt", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("sncghkjeszz", model.resourceModifierReference().name());
        Assertions.assertEquals("ijhtxf", model.resourceModifierReference().namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterRestoreCriteria model = new KubernetesClusterRestoreCriteria()
            .withIncludeClusterScopeResources(true)
            .withIncludedNamespaces(Arrays.asList("oenkouknvudwti"))
            .withExcludedNamespaces(Arrays.asList("ldngkpoci", "azyxoegukg", "npiucgygevqznty"))
            .withIncludedResourceTypes(Arrays.asList("bpizcdrqjsdpydn", "yhxdeoejzicwi"))
            .withExcludedResourceTypes(Arrays.asList("ttgzfbis", "cbkhajdeyeamdph"))
            .withLabelSelectors(Arrays.asList("lpbuxwgipwhonowk", "shwankixzbinje", "uttmrywnuzoqft", "yqzrnkcqvyxlw"))
            .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA)
            .withConflictPolicy(ExistingResourcePolicy.PATCH)
            .withNamespaceMappings(mapOf("avwhheunm", "hoqqnwvlr", "yaxuconuqszfkb", "qhgyxzkonocukok", "xsenhwlr",
                "ypewrmjmwvvjekt", "ihkaetcktvfc", "ffrzpwvlqdqgbiqy"))
            .withRestoreHookReferences(
                Arrays.asList(new NamespacedNameResource().withName("nkymuctqhjfbebrj").withNamespace("erfuwuttt"),
                    new NamespacedNameResource().withName("vjrbirphxepcyvah").withNamespace("ljkyqxjvuuj"),
                    new NamespacedNameResource().withName("idokgjlj").withNamespace("xgvcl")))
            .withResourceModifierReference(
                new NamespacedNameResource().withName("sncghkjeszz").withNamespace("ijhtxf"));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertTrue(model.includeClusterScopeResources());
        Assertions.assertEquals("oenkouknvudwti", model.includedNamespaces().get(0));
        Assertions.assertEquals("ldngkpoci", model.excludedNamespaces().get(0));
        Assertions.assertEquals("bpizcdrqjsdpydn", model.includedResourceTypes().get(0));
        Assertions.assertEquals("ttgzfbis", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("lpbuxwgipwhonowk", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("hoqqnwvlr", model.namespaceMappings().get("avwhheunm"));
        Assertions.assertEquals("nkymuctqhjfbebrj", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("erfuwuttt", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("sncghkjeszz", model.resourceModifierReference().name());
        Assertions.assertEquals("ijhtxf", model.resourceModifierReference().namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
