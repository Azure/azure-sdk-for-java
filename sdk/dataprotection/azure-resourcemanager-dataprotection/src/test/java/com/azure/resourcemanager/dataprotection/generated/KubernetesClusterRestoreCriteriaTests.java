// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterRestoreCriteria model =
            BinaryData
                .fromString(
                    "{\"objectType\":\"KubernetesClusterRestoreCriteria\",\"includeClusterScopeResources\":false,\"includedNamespaces\":[\"nrwrbiork\",\"alywjhhgdn\",\"xmsivfomiloxggdu\"],\"excludedNamespaces\":[\"ndieuzaofj\"],\"includedResourceTypes\":[\"cyyysfgdot\"],\"excludedResourceTypes\":[\"iipuipwoqonm\",\"cje\"],\"labelSelectors\":[\"zshq\"],\"persistentVolumeRestoreMode\":\"RestoreWithVolumeData\",\"conflictPolicy\":\"Skip\",\"namespaceMappings\":{\"ccwr\":\"fgmblrrilbywdxsm\",\"dvoqyt\":\"fscjfnynszquji\",\"hjoxo\":\"byowbblgyavutp\"},\"restoreHookReferences\":[{\"name\":\"ksbpimlqoljx\",\"namespace\":\"gxxlxsffgcvizq\"},{\"name\":\"wlvwlyoupf\",\"namespace\":\"bkjubdyhgkfmins\"}]}")
                .toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("nrwrbiork", model.includedNamespaces().get(0));
        Assertions.assertEquals("ndieuzaofj", model.excludedNamespaces().get(0));
        Assertions.assertEquals("cyyysfgdot", model.includedResourceTypes().get(0));
        Assertions.assertEquals("iipuipwoqonm", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("zshq", model.labelSelectors().get(0));
        Assertions
            .assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA, model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.SKIP, model.conflictPolicy());
        Assertions.assertEquals("fgmblrrilbywdxsm", model.namespaceMappings().get("ccwr"));
        Assertions.assertEquals("ksbpimlqoljx", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("gxxlxsffgcvizq", model.restoreHookReferences().get(0).namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterRestoreCriteria model =
            new KubernetesClusterRestoreCriteria()
                .withIncludeClusterScopeResources(false)
                .withIncludedNamespaces(Arrays.asList("nrwrbiork", "alywjhhgdn", "xmsivfomiloxggdu"))
                .withExcludedNamespaces(Arrays.asList("ndieuzaofj"))
                .withIncludedResourceTypes(Arrays.asList("cyyysfgdot"))
                .withExcludedResourceTypes(Arrays.asList("iipuipwoqonm", "cje"))
                .withLabelSelectors(Arrays.asList("zshq"))
                .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA)
                .withConflictPolicy(ExistingResourcePolicy.SKIP)
                .withNamespaceMappings(
                    mapOf("ccwr", "fgmblrrilbywdxsm", "dvoqyt", "fscjfnynszquji", "hjoxo", "byowbblgyavutp"))
                .withRestoreHookReferences(
                    Arrays
                        .asList(
                            new NamespacedNameResource().withName("ksbpimlqoljx").withNamespace("gxxlxsffgcvizq"),
                            new NamespacedNameResource().withName("wlvwlyoupf").withNamespace("bkjubdyhgkfmins")));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("nrwrbiork", model.includedNamespaces().get(0));
        Assertions.assertEquals("ndieuzaofj", model.excludedNamespaces().get(0));
        Assertions.assertEquals("cyyysfgdot", model.includedResourceTypes().get(0));
        Assertions.assertEquals("iipuipwoqonm", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("zshq", model.labelSelectors().get(0));
        Assertions
            .assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA, model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.SKIP, model.conflictPolicy());
        Assertions.assertEquals("fgmblrrilbywdxsm", model.namespaceMappings().get("ccwr"));
        Assertions.assertEquals("ksbpimlqoljx", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("gxxlxsffgcvizq", model.restoreHookReferences().get(0).namespace());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
