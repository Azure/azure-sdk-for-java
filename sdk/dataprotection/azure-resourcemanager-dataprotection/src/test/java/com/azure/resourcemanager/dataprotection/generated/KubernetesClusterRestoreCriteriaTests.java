// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterRestoreCriteria\",\"includeClusterScopeResources\":false,\"includedNamespaces\":[\"fhir\"],\"excludedNamespaces\":[\"moxoftpi\",\"iwyczuh\",\"a\",\"pqjlihhyusps\"],\"includedResourceTypes\":[\"dvlmfwdgzxul\",\"cvpa\",\"rsre\",\"zvxurisjnhny\"],\"excludedResourceTypes\":[\"fq\",\"zgxmr\"],\"labelSelectors\":[\"lw\",\"cesutrgjupauut\",\"woqhihe\"],\"persistentVolumeRestoreMode\":\"RestoreWithVolumeData\",\"conflictPolicy\":\"Patch\",\"namespaceMappings\":{\"xjvfoimwksl\":\"fqntcyp\"},\"restoreHookReferences\":[{\"name\":\"zjxvydfcea\",\"namespace\":\"lhvygdyftu\"},{\"name\":\"twnawjslbiwkojgc\",\"namespace\":\"tsf\"},{\"name\":\"nbaeqphchqn\",\"namespace\":\"rpxeh\"},{\"name\":\"rykqgaifmvikl\",\"namespace\":\"dvk\"}],\"resourceModifierReference\":{\"name\":\"jdz\",\"namespace\":\"cvdsrhnj\"}}")
            .toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("fhir", model.includedNamespaces().get(0));
        Assertions.assertEquals("moxoftpi", model.excludedNamespaces().get(0));
        Assertions.assertEquals("dvlmfwdgzxul", model.includedResourceTypes().get(0));
        Assertions.assertEquals("fq", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("lw", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("fqntcyp", model.namespaceMappings().get("xjvfoimwksl"));
        Assertions.assertEquals("zjxvydfcea", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("lhvygdyftu", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("jdz", model.resourceModifierReference().name());
        Assertions.assertEquals("cvdsrhnj", model.resourceModifierReference().namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterRestoreCriteria model
            = new KubernetesClusterRestoreCriteria().withIncludeClusterScopeResources(false)
                .withIncludedNamespaces(Arrays.asList("fhir"))
                .withExcludedNamespaces(Arrays.asList("moxoftpi", "iwyczuh", "a", "pqjlihhyusps"))
                .withIncludedResourceTypes(Arrays.asList("dvlmfwdgzxul", "cvpa", "rsre", "zvxurisjnhny"))
                .withExcludedResourceTypes(Arrays.asList("fq", "zgxmr"))
                .withLabelSelectors(Arrays.asList("lw", "cesutrgjupauut", "woqhihe"))
                .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA)
                .withConflictPolicy(ExistingResourcePolicy.PATCH)
                .withNamespaceMappings(mapOf("xjvfoimwksl", "fqntcyp"))
                .withRestoreHookReferences(
                    Arrays.asList(new NamespacedNameResource().withName("zjxvydfcea").withNamespace("lhvygdyftu"),
                        new NamespacedNameResource().withName("twnawjslbiwkojgc").withNamespace("tsf"),
                        new NamespacedNameResource().withName("nbaeqphchqn").withNamespace("rpxeh"),
                        new NamespacedNameResource().withName("rykqgaifmvikl").withNamespace("dvk")))
                .withResourceModifierReference(new NamespacedNameResource().withName("jdz").withNamespace("cvdsrhnj"));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("fhir", model.includedNamespaces().get(0));
        Assertions.assertEquals("moxoftpi", model.excludedNamespaces().get(0));
        Assertions.assertEquals("dvlmfwdgzxul", model.includedResourceTypes().get(0));
        Assertions.assertEquals("fq", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("lw", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("fqntcyp", model.namespaceMappings().get("xjvfoimwksl"));
        Assertions.assertEquals("zjxvydfcea", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("lhvygdyftu", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("jdz", model.resourceModifierReference().name());
        Assertions.assertEquals("cvdsrhnj", model.resourceModifierReference().namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
