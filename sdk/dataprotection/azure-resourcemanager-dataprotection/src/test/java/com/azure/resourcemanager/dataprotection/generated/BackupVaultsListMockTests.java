// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dataprotection.DataProtectionManager;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.BackupVaultResource;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.StorageSettingStoreTypes;
import com.azure.resourcemanager.dataprotection.models.StorageSettingTypes;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class BackupVaultsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Enabled\"}},\"provisioningState\":\"Provisioning\",\"resourceMoveState\":\"InProgress\",\"resourceMoveDetails\":{\"operationId\":\"bwidfcxsspuunn\",\"startTimeUtc\":\"yhkx\",\"completionTimeUtc\":\"ddrihpf\",\"sourceResourcePath\":\"qcaaewdaomdjvl\",\"targetResourcePath\":\"x\"},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"On\",\"retentionDurationInDays\":46.72517302586675},\"immutabilitySettings\":{\"state\":\"Unlocked\"}},\"storageSettings\":[{\"datastoreType\":\"VaultStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"OperationalStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"ZoneRedundant\"},{\"datastoreType\":\"VaultStore\",\"type\":\"GeoRedundant\"}],\"isVaultProtectedByResourceGuard\":false,\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"Disabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Enabled\"}},\"secureScore\":\"None\",\"replicatedRegions\":[\"ogtqxepnylbf\",\"ajlyjtlvofqzhv\",\"cib\",\"fmo\"]},\"identity\":{\"principalId\":\"rkjpvdwxfzwii\",\"tenantId\":\"zjb\",\"type\":\"zsxjrkambtrneg\",\"userAssignedIdentities\":{\"q\":{\"principalId\":\"2ca83a84-3890-43c5-a6d5-b0f537c39ad5\",\"clientId\":\"564cb2da-a5df-40a2-bb83-cbe2bb31303c\"},\"lds\":{\"principalId\":\"892e63a1-be8f-449b-9114-e23187ffc888\",\"clientId\":\"8fa67f50-62a1-4aad-995d-d7bb46f8e525\"},\"tjb\":{\"principalId\":\"fa53a877-9cd2-4a68-adb8-abb54f512fc6\",\"clientId\":\"08cd702f-3daa-45dd-a29e-b4b11a8c2ea8\"}}},\"eTag\":\"dmflv\",\"location\":\"tmjlx\",\"tags\":{\"wk\":\"lozapeewchpxlk\",\"yhjtqedcgzu\":\"ziycslevufuztck\",\"zrrjvpgly\":\"wmmrq\",\"vtoepryutnw\":\"zgkrvqe\"},\"id\":\"tpzdmovzvfvaawzq\",\"name\":\"dflgzuri\",\"type\":\"laecxndticok\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        DataProtectionManager manager = DataProtectionManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<BackupVaultResource> response = manager.backupVaults().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tmjlx", response.iterator().next().location());
        Assertions.assertEquals("lozapeewchpxlk", response.iterator().next().tags().get("wk"));
        Assertions.assertEquals("dmflv", response.iterator().next().etag());
        Assertions.assertEquals("zsxjrkambtrneg", response.iterator().next().identity().type());
        Assertions.assertEquals(AlertsState.ENABLED, response.iterator().next().properties().monitoringSettings()
            .azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions.assertEquals(SoftDeleteState.ON,
            response.iterator().next().properties().securitySettings().softDeleteSettings().state());
        Assertions.assertEquals(46.72517302586675D,
            response.iterator().next().properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions.assertEquals(ImmutabilityState.UNLOCKED,
            response.iterator().next().properties().securitySettings().immutabilitySettings().state());
        Assertions.assertEquals(StorageSettingStoreTypes.VAULT_STORE,
            response.iterator().next().properties().storageSettings().get(0).datastoreType());
        Assertions.assertEquals(StorageSettingTypes.ZONE_REDUNDANT,
            response.iterator().next().properties().storageSettings().get(0).type());
        Assertions.assertEquals(CrossSubscriptionRestoreState.DISABLED,
            response.iterator().next().properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions.assertEquals(CrossRegionRestoreState.ENABLED,
            response.iterator().next().properties().featureSettings().crossRegionRestoreSettings().state());
        Assertions.assertEquals("ogtqxepnylbf", response.iterator().next().properties().replicatedRegions().get(0));
    }
}
