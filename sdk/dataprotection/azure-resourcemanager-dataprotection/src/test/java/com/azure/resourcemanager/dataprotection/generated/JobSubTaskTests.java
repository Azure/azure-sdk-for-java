// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.JobSubTask;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class JobSubTaskTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JobSubTask model = BinaryData.fromString(
            "{\"additionalDetails\":{\"lrbpbewtghfgbl\":\"cswsrtjri\",\"zvlvqhjkbegib\":\"gw\"},\"taskId\":1806292295,\"taskName\":\"mxiebw\",\"taskProgress\":\"loayqcgw\",\"taskStatus\":\"tzjuzgwyzmhtxo\"}")
            .toObject(JobSubTask.class);
        Assertions.assertEquals("cswsrtjri", model.additionalDetails().get("lrbpbewtghfgbl"));
        Assertions.assertEquals(1806292295, model.taskId());
        Assertions.assertEquals("mxiebw", model.taskName());
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.taskStatus());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JobSubTask model
            = new JobSubTask().withAdditionalDetails(mapOf("lrbpbewtghfgbl", "cswsrtjri", "zvlvqhjkbegib", "gw"))
                .withTaskId(1806292295)
                .withTaskName("mxiebw")
                .withTaskStatus("tzjuzgwyzmhtxo");
        model = BinaryData.fromObject(model).toObject(JobSubTask.class);
        Assertions.assertEquals("cswsrtjri", model.additionalDetails().get("lrbpbewtghfgbl"));
        Assertions.assertEquals(1806292295, model.taskId());
        Assertions.assertEquals("mxiebw", model.taskName());
        Assertions.assertEquals("tzjuzgwyzmhtxo", model.taskStatus());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
