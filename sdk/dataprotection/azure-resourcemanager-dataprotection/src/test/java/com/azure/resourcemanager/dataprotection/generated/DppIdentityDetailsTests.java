// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppIdentityDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppIdentityDetails model = BinaryData.fromString(
            "{\"principalId\":\"s\",\"tenantId\":\"zgvfcjrwz\",\"type\":\"xjtfelluwfzit\",\"userAssignedIdentities\":{\"fpjkjlxofp\":{\"principalId\":\"74975f80-cca0-4810-999b-70b4489e601f\",\"clientId\":\"39575fdc-2523-4285-adfd-9f26fad4bf14\"},\"pfxxy\":{\"principalId\":\"5f6840f7-f790-4203-8fe7-e7c199da0b71\",\"clientId\":\"079b1117-dc33-4080-9f97-ff3be16601b5\"},\"i\":{\"principalId\":\"5b16ecec-ea88-42bc-8961-98f779f5c254\",\"clientId\":\"d9cd4d87-8dca-4b0a-9c18-bd2938801077\"}}}")
            .toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppIdentityDetails model = new DppIdentityDetails().withType("xjtfelluwfzit")
            .withUserAssignedIdentities(mapOf("fpjkjlxofp", new UserAssignedIdentity(), "pfxxy",
                new UserAssignedIdentity(), "i", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
