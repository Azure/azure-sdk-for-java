// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppIdentityDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppIdentityDetails model = BinaryData.fromString(
            "{\"principalId\":\"s\",\"tenantId\":\"zgvfcjrwz\",\"type\":\"xjtfelluwfzit\",\"userAssignedIdentities\":{\"fpjkjlxofp\":{\"principalId\":\"8bb659e2-2ce2-4de5-bc14-a4cde36bd913\",\"clientId\":\"16abffdb-8073-4e68-83de-878b11556247\"},\"pfxxy\":{\"principalId\":\"ccd32279-3aa9-4385-a4be-44ea0615327c\",\"clientId\":\"1ce8837f-bd3b-444f-936c-1e677a497b6c\"},\"i\":{\"principalId\":\"ff25809d-ad5c-450f-8ca7-b006cf8031ea\",\"clientId\":\"68e687d2-eb59-411d-8f9e-b5fcd4753f22\"}}}")
            .toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppIdentityDetails model = new DppIdentityDetails().withType("xjtfelluwfzit")
            .withUserAssignedIdentities(mapOf("fpjkjlxofp", new UserAssignedIdentity(), "pfxxy",
                new UserAssignedIdentity(), "i", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
