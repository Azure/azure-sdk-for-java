// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppIdentityDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppIdentityDetails model = BinaryData.fromString(
            "{\"principalId\":\"s\",\"tenantId\":\"zgvfcjrwz\",\"type\":\"xjtfelluwfzit\",\"userAssignedIdentities\":{\"fpjkjlxofp\":{\"principalId\":\"c45133a7-0da3-4e63-a8aa-d005a6828655\",\"clientId\":\"87f7ed67-5338-43c4-890c-e085a56553a6\"},\"pfxxy\":{\"principalId\":\"2bba4815-f762-4e5a-abb2-a9f16a333ee9\",\"clientId\":\"1c09cafa-6cc0-4c36-82b8-9bcbf1c38b59\"},\"i\":{\"principalId\":\"8aaca17e-531a-4ffc-95b6-e8999d2f97e8\",\"clientId\":\"192da926-c5e2-467c-bafa-edab389e26de\"}}}")
            .toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppIdentityDetails model = new DppIdentityDetails().withType("xjtfelluwfzit")
            .withUserAssignedIdentities(mapOf("fpjkjlxofp", new UserAssignedIdentity(), "pfxxy",
                new UserAssignedIdentity(), "i", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
