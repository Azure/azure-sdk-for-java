// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppIdentityDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppIdentityDetails model = BinaryData.fromString(
            "{\"principalId\":\"s\",\"tenantId\":\"zgvfcjrwz\",\"type\":\"xjtfelluwfzit\",\"userAssignedIdentities\":{\"fpjkjlxofp\":{\"principalId\":\"403cdbb8-d6ad-41f9-b5e1-7b7e9dbe2a6b\",\"clientId\":\"573b167b-3685-4257-8c3a-d840ff82a02c\"},\"pfxxy\":{\"principalId\":\"ca5957b5-6063-4d96-9a4d-079a4e23f755\",\"clientId\":\"efb60069-15a7-41c4-bb5c-eaad40cd334f\"},\"i\":{\"principalId\":\"ef575624-9e34-4e8d-a134-2354aed65847\",\"clientId\":\"24aced4e-984c-492e-94c4-56b80f737c66\"}}}")
            .toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppIdentityDetails model = new DppIdentityDetails().withType("xjtfelluwfzit")
            .withUserAssignedIdentities(mapOf("fpjkjlxofp", new UserAssignedIdentity(), "pfxxy",
                new UserAssignedIdentity(), "i", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(DppIdentityDetails.class);
        Assertions.assertEquals("xjtfelluwfzit", model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
