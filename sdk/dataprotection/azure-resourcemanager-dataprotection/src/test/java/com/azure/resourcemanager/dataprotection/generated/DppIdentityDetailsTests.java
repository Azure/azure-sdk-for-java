// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppIdentityDetailsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppIdentityDetails model = BinaryData.fromString(
            "{\"principalId\":\"c\",\"tenantId\":\"ierhhbcsglummaj\",\"type\":\"aodxo\",\"userAssignedIdentities\":{\"k\":{\"principalId\":\"64673725-a9c3-4792-a4b1-8ac11af8d4a3\",\"clientId\":\"79a33259-e20a-4103-8832-12998b0c0901\"},\"okaj\":{\"principalId\":\"8b1639ec-c51a-40fb-ba1b-cba29db1e846\",\"clientId\":\"07bdac1c-c940-4d96-af28-19ef452b6437\"},\"pimexgstxgcpodg\":{\"principalId\":\"3648e896-1f03-45a0-b82e-78632739f390\",\"clientId\":\"9d917ee2-48ae-46f7-9b5b-9dc99c4bf9ee\"}}}")
            .toObject(DppIdentityDetails.class);
        Assertions.assertEquals("aodxo", model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppIdentityDetails model = new DppIdentityDetails().withType("aodxo")
            .withUserAssignedIdentities(mapOf("k", new UserAssignedIdentity(), "okaj", new UserAssignedIdentity(),
                "pimexgstxgcpodg", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(DppIdentityDetails.class);
        Assertions.assertEquals("aodxo", model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
