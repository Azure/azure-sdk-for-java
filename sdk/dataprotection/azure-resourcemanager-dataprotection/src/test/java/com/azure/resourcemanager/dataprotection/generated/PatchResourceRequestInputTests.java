// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.AlertsState;
import com.azure.resourcemanager.dataprotection.models.AzureMonitorAlertSettings;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreSettings;
import com.azure.resourcemanager.dataprotection.models.CrossRegionRestoreState;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreSettings;
import com.azure.resourcemanager.dataprotection.models.CrossSubscriptionRestoreState;
import com.azure.resourcemanager.dataprotection.models.DppIdentityDetails;
import com.azure.resourcemanager.dataprotection.models.FeatureSettings;
import com.azure.resourcemanager.dataprotection.models.ImmutabilitySettings;
import com.azure.resourcemanager.dataprotection.models.ImmutabilityState;
import com.azure.resourcemanager.dataprotection.models.MonitoringSettings;
import com.azure.resourcemanager.dataprotection.models.PatchBackupVaultInput;
import com.azure.resourcemanager.dataprotection.models.PatchResourceRequestInput;
import com.azure.resourcemanager.dataprotection.models.SecuritySettings;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteSettings;
import com.azure.resourcemanager.dataprotection.models.SoftDeleteState;
import com.azure.resourcemanager.dataprotection.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PatchResourceRequestInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchResourceRequestInput model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"u\",\"tenantId\":\"a\",\"type\":\"rzayv\",\"userAssignedIdentities\":{\"dfgiot\":{\"principalId\":\"61c33379-4e60-48c3-baf6-ff913a1c4bc7\",\"clientId\":\"e39fca87-3d49-4efc-aa3e-903f192fc6ab\"},\"utqxlngx\":{\"principalId\":\"63d4184d-0791-40e0-9eb6-54e216d0016b\",\"clientId\":\"ef22771b-0d83-48a8-9978-f1b142297b29\"}}},\"properties\":{\"monitoringSettings\":{\"azureMonitorAlertSettings\":{\"alertsForAllJobFailures\":\"Disabled\"}},\"securitySettings\":{\"softDeleteSettings\":{\"state\":\"Off\",\"retentionDurationInDays\":41.63738367235476},\"immutabilitySettings\":{\"state\":\"Unlocked\"}},\"featureSettings\":{\"crossSubscriptionRestoreSettings\":{\"state\":\"Disabled\"},\"crossRegionRestoreSettings\":{\"state\":\"Enabled\"}}},\"tags\":{\"ehoqfbowskan\":\"abhjybi\",\"ywgndrv\":\"ktzlcuiywg\",\"ocpecfvmmco\":\"nhzgpphrcgyn\"}}")
            .toObject(PatchResourceRequestInput.class);
        Assertions.assertEquals("rzayv", model.identity().type());
        Assertions.assertEquals(AlertsState.DISABLED,
            model.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions.assertEquals(SoftDeleteState.OFF,
            model.properties().securitySettings().softDeleteSettings().state());
        Assertions.assertEquals(41.63738367235476D,
            model.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions.assertEquals(ImmutabilityState.UNLOCKED,
            model.properties().securitySettings().immutabilitySettings().state());
        Assertions.assertEquals(CrossSubscriptionRestoreState.DISABLED,
            model.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions.assertEquals(CrossRegionRestoreState.ENABLED,
            model.properties().featureSettings().crossRegionRestoreSettings().state());
        Assertions.assertEquals("abhjybi", model.tags().get("ehoqfbowskan"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchResourceRequestInput model = new PatchResourceRequestInput()
            .withIdentity(new DppIdentityDetails().withType("rzayv").withUserAssignedIdentities(
                mapOf("dfgiot", new UserAssignedIdentity(), "utqxlngx", new UserAssignedIdentity())))
            .withProperties(new PatchBackupVaultInput()
                .withMonitoringSettings(new MonitoringSettings().withAzureMonitorAlertSettings(
                    new AzureMonitorAlertSettings().withAlertsForAllJobFailures(AlertsState.DISABLED)))
                .withSecuritySettings(new SecuritySettings()
                    .withSoftDeleteSettings(new SoftDeleteSettings().withState(SoftDeleteState.OFF)
                        .withRetentionDurationInDays(41.63738367235476D))
                    .withImmutabilitySettings(new ImmutabilitySettings().withState(ImmutabilityState.UNLOCKED)))
                .withFeatureSettings(new FeatureSettings()
                    .withCrossSubscriptionRestoreSettings(
                        new CrossSubscriptionRestoreSettings().withState(CrossSubscriptionRestoreState.DISABLED))
                    .withCrossRegionRestoreSettings(
                        new CrossRegionRestoreSettings().withState(CrossRegionRestoreState.ENABLED))))
            .withTags(mapOf("ehoqfbowskan", "abhjybi", "ywgndrv", "ktzlcuiywg", "ocpecfvmmco", "nhzgpphrcgyn"));
        model = BinaryData.fromObject(model).toObject(PatchResourceRequestInput.class);
        Assertions.assertEquals("rzayv", model.identity().type());
        Assertions.assertEquals(AlertsState.DISABLED,
            model.properties().monitoringSettings().azureMonitorAlertSettings().alertsForAllJobFailures());
        Assertions.assertEquals(SoftDeleteState.OFF,
            model.properties().securitySettings().softDeleteSettings().state());
        Assertions.assertEquals(41.63738367235476D,
            model.properties().securitySettings().softDeleteSettings().retentionDurationInDays());
        Assertions.assertEquals(ImmutabilityState.UNLOCKED,
            model.properties().securitySettings().immutabilitySettings().state());
        Assertions.assertEquals(CrossSubscriptionRestoreState.DISABLED,
            model.properties().featureSettings().crossSubscriptionRestoreSettings().state());
        Assertions.assertEquals(CrossRegionRestoreState.ENABLED,
            model.properties().featureSettings().crossRegionRestoreSettings().state());
        Assertions.assertEquals("abhjybi", model.tags().get("ehoqfbowskan"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
