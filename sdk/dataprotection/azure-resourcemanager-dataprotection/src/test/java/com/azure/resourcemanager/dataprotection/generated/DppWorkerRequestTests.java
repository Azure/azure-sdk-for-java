// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppWorkerRequest;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppWorkerRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppWorkerRequest model = BinaryData.fromString(
            "{\"subscriptionId\":\"bqwrvtldgm\",\"uri\":\"gvmpipaslthaqfx\",\"headers\":{\"owqkdwytisi\":[\"u\",\"wbdsr\",\"zpdrhneu\"],\"iavrm\":[\"rcgp\",\"kpzi\",\"ejzanlfz\"],\"pj\":[\"onok\",\"xrjqcirgzpfrlazs\",\"rnwoiindfp\"]},\"supportedGroupVersions\":[\"bt\",\"h\",\"lsj\"],\"cultureInfo\":\"hszfjvfb\",\"parameters\":{\"qmqhldvriii\":\"eljag\",\"vtvsexsowueluq\":\"jnalghf\",\"wws\":\"hahhxvrhmzkwpj\"},\"httpMethod\":\"ghftqsxhqxujxuk\"}")
            .toObject(DppWorkerRequest.class);
        Assertions.assertEquals("bqwrvtldgm", model.subscriptionId());
        Assertions.assertEquals("gvmpipaslthaqfx", model.uri());
        Assertions.assertEquals("u", model.headers().get("owqkdwytisi").get(0));
        Assertions.assertEquals("bt", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("hszfjvfb", model.cultureInfo());
        Assertions.assertEquals("eljag", model.parameters().get("qmqhldvriii"));
        Assertions.assertEquals("ghftqsxhqxujxuk", model.httpMethod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppWorkerRequest model = new DppWorkerRequest().withSubscriptionId("bqwrvtldgm")
            .withUri("gvmpipaslthaqfx")
            .withHeaders(mapOf("owqkdwytisi", Arrays.asList("u", "wbdsr", "zpdrhneu"), "iavrm",
                Arrays.asList("rcgp", "kpzi", "ejzanlfz"), "pj",
                Arrays.asList("onok", "xrjqcirgzpfrlazs", "rnwoiindfp")))
            .withSupportedGroupVersions(Arrays.asList("bt", "h", "lsj"))
            .withCultureInfo("hszfjvfb")
            .withParameters(mapOf("qmqhldvriii", "eljag", "vtvsexsowueluq", "jnalghf", "wws", "hahhxvrhmzkwpj"))
            .withHttpMethod("ghftqsxhqxujxuk");
        model = BinaryData.fromObject(model).toObject(DppWorkerRequest.class);
        Assertions.assertEquals("bqwrvtldgm", model.subscriptionId());
        Assertions.assertEquals("gvmpipaslthaqfx", model.uri());
        Assertions.assertEquals("u", model.headers().get("owqkdwytisi").get(0));
        Assertions.assertEquals("bt", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("hszfjvfb", model.cultureInfo());
        Assertions.assertEquals("eljag", model.parameters().get("qmqhldvriii"));
        Assertions.assertEquals("ghftqsxhqxujxuk", model.httpMethod());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
