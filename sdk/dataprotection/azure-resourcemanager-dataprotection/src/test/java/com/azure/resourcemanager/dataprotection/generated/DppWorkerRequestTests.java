// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.DppWorkerRequest;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DppWorkerRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DppWorkerRequest model =
            BinaryData
                .fromString(
                    "{\"subscriptionId\":\"fffiak\",\"uri\":\"pqqmted\",\"headers\":{\"mdscwxqupev\":[\"jihy\",\"ozphvwauyqncygu\",\"kvi\"]},\"supportedGroupVersions\":[\"stotxh\"],\"cultureInfo\":\"ujbypelmcuvhixb\",\"parameters\":{\"yl\":\"fw\",\"ujrywvtyl\":\"coolsttpkiwkkb\"},\"httpMethod\":\"pncur\"}")
                .toObject(DppWorkerRequest.class);
        Assertions.assertEquals("fffiak", model.subscriptionId());
        Assertions.assertEquals("pqqmted", model.uri());
        Assertions.assertEquals("jihy", model.headers().get("mdscwxqupev").get(0));
        Assertions.assertEquals("stotxh", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("ujbypelmcuvhixb", model.cultureInfo());
        Assertions.assertEquals("fw", model.parameters().get("yl"));
        Assertions.assertEquals("pncur", model.httpMethod());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DppWorkerRequest model =
            new DppWorkerRequest()
                .withSubscriptionId("fffiak")
                .withUri("pqqmted")
                .withHeaders(mapOf("mdscwxqupev", Arrays.asList("jihy", "ozphvwauyqncygu", "kvi")))
                .withSupportedGroupVersions(Arrays.asList("stotxh"))
                .withCultureInfo("ujbypelmcuvhixb")
                .withParameters(mapOf("yl", "fw", "ujrywvtyl", "coolsttpkiwkkb"))
                .withHttpMethod("pncur");
        model = BinaryData.fromObject(model).toObject(DppWorkerRequest.class);
        Assertions.assertEquals("fffiak", model.subscriptionId());
        Assertions.assertEquals("pqqmted", model.uri());
        Assertions.assertEquals("jihy", model.headers().get("mdscwxqupev").get(0));
        Assertions.assertEquals("stotxh", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("ujbypelmcuvhixb", model.cultureInfo());
        Assertions.assertEquals("fw", model.parameters().get("yl"));
        Assertions.assertEquals("pncur", model.httpMethod());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
