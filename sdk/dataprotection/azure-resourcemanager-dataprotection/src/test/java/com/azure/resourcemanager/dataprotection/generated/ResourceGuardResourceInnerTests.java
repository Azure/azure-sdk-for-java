// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.fluent.models.ResourceGuardResourceInner;
import com.azure.resourcemanager.dataprotection.models.ResourceGuard;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceGuardResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceGuardResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"allowAutoApprovals\":false,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"bdunygaeqid\",\"requestResourceType\":\"fatpxllrxcyjmoa\"},{\"vaultCriticalOperation\":\"uvarmywdmjsjq\",\"requestResourceType\":\"hhyxxrw\"},{\"vaultCriticalOperation\":\"co\",\"requestResourceType\":\"hp\"}],\"vaultCriticalOperationExclusionList\":[\"gymare\",\"n\",\"jxqugjhky\",\"ubeddg\"],\"description\":\"ofwq\"},\"eTag\":\"qal\",\"location\":\"mnjijpxacqqudf\",\"tags\":{\"yffimrzrtuzqogs\":\"xbaaabjyv\",\"mewzsyyc\":\"xnevfdnwn\",\"judpfrxt\":\"uzsoi\",\"paxh\":\"thzvaytdwkqbrqu\"},\"id\":\"xiilivpdtiirqt\",\"name\":\"qoaxoruzfgs\",\"type\":\"uyfxrxxleptramxj\"}")
            .toObject(ResourceGuardResourceInner.class);
        Assertions.assertEquals("mnjijpxacqqudf", model.location());
        Assertions.assertEquals("xbaaabjyv", model.tags().get("yffimrzrtuzqogs"));
        Assertions.assertEquals("qal", model.etag());
        Assertions.assertEquals("gymare", model.properties().vaultCriticalOperationExclusionList().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceGuardResourceInner model = new ResourceGuardResourceInner().withLocation("mnjijpxacqqudf")
            .withTags(mapOf("yffimrzrtuzqogs", "xbaaabjyv", "mewzsyyc", "xnevfdnwn", "judpfrxt", "uzsoi", "paxh",
                "thzvaytdwkqbrqu"))
            .withEtag("qal").withProperties(new ResourceGuard()
                .withVaultCriticalOperationExclusionList(Arrays.asList("gymare", "n", "jxqugjhky", "ubeddg")));
        model = BinaryData.fromObject(model).toObject(ResourceGuardResourceInner.class);
        Assertions.assertEquals("mnjijpxacqqudf", model.location());
        Assertions.assertEquals("xbaaabjyv", model.tags().get("yffimrzrtuzqogs"));
        Assertions.assertEquals("qal", model.etag());
        Assertions.assertEquals("gymare", model.properties().vaultCriticalOperationExclusionList().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
