// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.fluent.models.ResourceGuardResourceInner;
import com.azure.resourcemanager.dataprotection.models.ResourceGuard;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceGuardResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceGuardResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Provisioning\",\"allowAutoApprovals\":true,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"jinfw\",\"requestResourceType\":\"fltkacjv\"},{\"vaultCriticalOperation\":\"kdlfoa\",\"requestResourceType\":\"gkfpaga\"}],\"vaultCriticalOperationExclusionList\":[\"ulpqblylsyxkqjn\",\"jervtia\",\"xsdszuempsb\",\"kfzbeyvpnqicvi\"],\"description\":\"kjj\"},\"eTag\":\"xrbuukzclew\",\"location\":\"mlwpazt\",\"tags\":{\"ckw\":\"fn\",\"whxxbuyqax\":\"fz\",\"or\":\"feqztppriol\",\"ncwsob\":\"altol\"},\"id\":\"wcsdbnwdcfhucq\",\"name\":\"pfuvglsbjjca\",\"type\":\"vxb\"}")
            .toObject(ResourceGuardResourceInner.class);
        Assertions.assertEquals("mlwpazt", model.location());
        Assertions.assertEquals("fn", model.tags().get("ckw"));
        Assertions.assertEquals("xrbuukzclew", model.etag());
        Assertions.assertEquals("ulpqblylsyxkqjn", model.properties().vaultCriticalOperationExclusionList().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceGuardResourceInner model = new ResourceGuardResourceInner().withLocation("mlwpazt")
            .withTags(mapOf("ckw", "fn", "whxxbuyqax", "fz", "or", "feqztppriol", "ncwsob", "altol"))
            .withEtag("xrbuukzclew")
            .withProperties(new ResourceGuard().withVaultCriticalOperationExclusionList(
                Arrays.asList("ulpqblylsyxkqjn", "jervtia", "xsdszuempsb", "kfzbeyvpnqicvi")));
        model = BinaryData.fromObject(model).toObject(ResourceGuardResourceInner.class);
        Assertions.assertEquals("mlwpazt", model.location());
        Assertions.assertEquals("fn", model.tags().get("ckw"));
        Assertions.assertEquals("xrbuukzclew", model.etag());
        Assertions.assertEquals("ulpqblylsyxkqjn", model.properties().vaultCriticalOperationExclusionList().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
