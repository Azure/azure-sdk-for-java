// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.AzureBackupFindRestorableTimeRangesRequest;
import com.azure.resourcemanager.dataprotection.models.AzureBackupFindRestorableTimeRangesRequestResource;
import com.azure.resourcemanager.dataprotection.models.RestoreSourceDataStoreType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBackupFindRestorableTimeRangesRequestResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBackupFindRestorableTimeRangesRequestResource model = BinaryData.fromString(
            "{\"content\":{\"sourceDataStoreType\":\"VaultStore\",\"startTime\":\"llqwjygvjayvblmh\",\"endTime\":\"zuhbxvvyhgsopb\"},\"subscriptionId\":\"qufegxuvwzfbn\",\"uri\":\"mctlpdngitv\",\"headers\":{\"pna\":[\"rixkwmyijejve\",\"rh\"],\"vrvmtgjqppyost\":[\"exccbdreaxhcexd\",\"rvqahqkghtpwi\",\"nhyjsv\",\"ycxzbfvoo\"],\"hgfipnsxkmcw\":[\"nzm\"],\"gumhjglikkxws\":[\"krrjrea\",\"xt\"]},\"supportedGroupVersions\":[\"bq\",\"vuzlm\",\"felfktg\",\"lcrpw\"],\"cultureInfo\":\"eznoig\",\"parameters\":{\"zejjoqk\":\"jwmwkpnbs\",\"aa\":\"gfhsxttaugzxn\",\"jlwuenvrkp\":\"pxdtnkdmkq\",\"ibreb\":\"ou\"},\"httpMethod\":\"aysjkixqtnqttez\"}")
            .toObject(AzureBackupFindRestorableTimeRangesRequestResource.class);
        Assertions.assertEquals("qufegxuvwzfbn", model.subscriptionId());
        Assertions.assertEquals("mctlpdngitv", model.uri());
        Assertions.assertEquals("rixkwmyijejve", model.headers().get("pna").get(0));
        Assertions.assertEquals("bq", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("eznoig", model.cultureInfo());
        Assertions.assertEquals("jwmwkpnbs", model.parameters().get("zejjoqk"));
        Assertions.assertEquals("aysjkixqtnqttez", model.httpMethod());
        Assertions.assertEquals(RestoreSourceDataStoreType.VAULT_STORE, model.content().sourceDataStoreType());
        Assertions.assertEquals("llqwjygvjayvblmh", model.content().startTime());
        Assertions.assertEquals("zuhbxvvyhgsopb", model.content().endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBackupFindRestorableTimeRangesRequestResource model
            = new AzureBackupFindRestorableTimeRangesRequestResource().withSubscriptionId("qufegxuvwzfbn")
                .withUri("mctlpdngitv")
                .withHeaders(mapOf("pna", Arrays.asList("rixkwmyijejve", "rh"), "vrvmtgjqppyost",
                    Arrays.asList("exccbdreaxhcexd", "rvqahqkghtpwi", "nhyjsv", "ycxzbfvoo"), "hgfipnsxkmcw",
                    Arrays.asList("nzm"), "gumhjglikkxws", Arrays.asList("krrjrea", "xt")))
                .withSupportedGroupVersions(Arrays.asList("bq", "vuzlm", "felfktg", "lcrpw"))
                .withCultureInfo("eznoig")
                .withParameters(
                    mapOf("zejjoqk", "jwmwkpnbs", "aa", "gfhsxttaugzxn", "jlwuenvrkp", "pxdtnkdmkq", "ibreb", "ou"))
                .withHttpMethod("aysjkixqtnqttez")
                .withContent(new AzureBackupFindRestorableTimeRangesRequest()
                    .withSourceDataStoreType(RestoreSourceDataStoreType.VAULT_STORE)
                    .withStartTime("llqwjygvjayvblmh")
                    .withEndTime("zuhbxvvyhgsopb"));
        model = BinaryData.fromObject(model).toObject(AzureBackupFindRestorableTimeRangesRequestResource.class);
        Assertions.assertEquals("qufegxuvwzfbn", model.subscriptionId());
        Assertions.assertEquals("mctlpdngitv", model.uri());
        Assertions.assertEquals("rixkwmyijejve", model.headers().get("pna").get(0));
        Assertions.assertEquals("bq", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("eznoig", model.cultureInfo());
        Assertions.assertEquals("jwmwkpnbs", model.parameters().get("zejjoqk"));
        Assertions.assertEquals("aysjkixqtnqttez", model.httpMethod());
        Assertions.assertEquals(RestoreSourceDataStoreType.VAULT_STORE, model.content().sourceDataStoreType());
        Assertions.assertEquals("llqwjygvjayvblmh", model.content().startTime());
        Assertions.assertEquals("zuhbxvvyhgsopb", model.content().endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
