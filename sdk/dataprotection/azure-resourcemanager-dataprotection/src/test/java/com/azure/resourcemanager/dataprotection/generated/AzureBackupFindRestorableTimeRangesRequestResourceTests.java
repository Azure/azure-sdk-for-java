// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.AzureBackupFindRestorableTimeRangesRequest;
import com.azure.resourcemanager.dataprotection.models.AzureBackupFindRestorableTimeRangesRequestResource;
import com.azure.resourcemanager.dataprotection.models.RestoreSourceDataStoreType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBackupFindRestorableTimeRangesRequestResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBackupFindRestorableTimeRangesRequestResource model = BinaryData.fromString(
            "{\"content\":{\"sourceDataStoreType\":\"ArchiveStore\",\"startTime\":\"tmdvypgikdgs\",\"endTime\":\"w\"},\"subscriptionId\":\"irryuzhlh\",\"uri\":\"oqrvqqaatjin\",\"headers\":{\"tkkgllqwjy\":[\"upmfiibfg\",\"jioolvrwxk\"],\"l\":[\"jayvblmhv\",\"zuhbxvvyhgsopb\",\"rqufegxuvwz\",\"bnhlmc\"],\"ijejvegrhbpn\":[\"ngitvgbmhrixkwm\"]},\"supportedGroupVersions\":[\"exccbdreaxhcexd\",\"rvqahqkghtpwi\",\"nhyjsv\",\"ycxzbfvoo\"],\"cultureInfo\":\"rvmtgjq\",\"parameters\":{\"yhgfipnsx\":\"ostronz\"},\"httpMethod\":\"cwaekrrjre\"}")
            .toObject(AzureBackupFindRestorableTimeRangesRequestResource.class);
        Assertions.assertEquals("irryuzhlh", model.subscriptionId());
        Assertions.assertEquals("oqrvqqaatjin", model.uri());
        Assertions.assertEquals("upmfiibfg", model.headers().get("tkkgllqwjy").get(0));
        Assertions.assertEquals("exccbdreaxhcexd", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("rvmtgjq", model.cultureInfo());
        Assertions.assertEquals("ostronz", model.parameters().get("yhgfipnsx"));
        Assertions.assertEquals("cwaekrrjre", model.httpMethod());
        Assertions.assertEquals(RestoreSourceDataStoreType.ARCHIVE_STORE, model.content().sourceDataStoreType());
        Assertions.assertEquals("tmdvypgikdgs", model.content().startTime());
        Assertions.assertEquals("w", model.content().endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBackupFindRestorableTimeRangesRequestResource model
            = new AzureBackupFindRestorableTimeRangesRequestResource().withSubscriptionId("irryuzhlh")
                .withUri("oqrvqqaatjin")
                .withHeaders(mapOf("tkkgllqwjy", Arrays.asList("upmfiibfg", "jioolvrwxk"), "l",
                    Arrays.asList("jayvblmhv", "zuhbxvvyhgsopb", "rqufegxuvwz", "bnhlmc"), "ijejvegrhbpn",
                    Arrays.asList("ngitvgbmhrixkwm")))
                .withSupportedGroupVersions(Arrays.asList("exccbdreaxhcexd", "rvqahqkghtpwi", "nhyjsv", "ycxzbfvoo"))
                .withCultureInfo("rvmtgjq").withParameters(mapOf("yhgfipnsx", "ostronz")).withHttpMethod("cwaekrrjre")
                .withContent(new AzureBackupFindRestorableTimeRangesRequest()
                    .withSourceDataStoreType(RestoreSourceDataStoreType.ARCHIVE_STORE).withStartTime("tmdvypgikdgs")
                    .withEndTime("w"));
        model = BinaryData.fromObject(model).toObject(AzureBackupFindRestorableTimeRangesRequestResource.class);
        Assertions.assertEquals("irryuzhlh", model.subscriptionId());
        Assertions.assertEquals("oqrvqqaatjin", model.uri());
        Assertions.assertEquals("upmfiibfg", model.headers().get("tkkgllqwjy").get(0));
        Assertions.assertEquals("exccbdreaxhcexd", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("rvmtgjq", model.cultureInfo());
        Assertions.assertEquals("ostronz", model.parameters().get("yhgfipnsx"));
        Assertions.assertEquals("cwaekrrjre", model.httpMethod());
        Assertions.assertEquals(RestoreSourceDataStoreType.ARCHIVE_STORE, model.content().sourceDataStoreType());
        Assertions.assertEquals("tmdvypgikdgs", model.content().startTime());
        Assertions.assertEquals("w", model.content().endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
