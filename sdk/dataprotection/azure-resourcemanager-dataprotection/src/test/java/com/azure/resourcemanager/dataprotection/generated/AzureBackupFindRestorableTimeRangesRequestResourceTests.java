// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.AzureBackupFindRestorableTimeRangesRequest;
import com.azure.resourcemanager.dataprotection.models.AzureBackupFindRestorableTimeRangesRequestResource;
import com.azure.resourcemanager.dataprotection.models.RestoreSourceDataStoreType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureBackupFindRestorableTimeRangesRequestResourceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureBackupFindRestorableTimeRangesRequestResource model = BinaryData.fromString(
            "{\"content\":{\"sourceDataStoreType\":\"OperationalStore\",\"startTime\":\"ehtwdwrft\",\"endTime\":\"iby\"},\"subscriptionId\":\"dl\",\"uri\":\"shfwpracstwity\",\"headers\":{\"ltiugcxnavv\":[\"xccedcpnmdyodn\",\"zxltjcvn\"],\"unyowxwl\":[\"qiby\"],\"rwkq\":[\"jrkvfgbvfvpdbo\",\"acizsjqlhkrr\",\"bdeibqipqk\",\"hvxndzwmkrefajpj\"]},\"supportedGroupVersions\":[\"gbijtjivfx\",\"sjabibs\"],\"cultureInfo\":\"tawfsdjpvkvp\",\"parameters\":{\"ncj\":\"bkzbzkd\",\"zhjjklffhmouwq\":\"budurgkakmo\",\"eeyebi\":\"gzrf\"},\"httpMethod\":\"kayuhqlbjbs\"}")
            .toObject(AzureBackupFindRestorableTimeRangesRequestResource.class);
        Assertions.assertEquals("dl", model.subscriptionId());
        Assertions.assertEquals("shfwpracstwity", model.uri());
        Assertions.assertEquals("xccedcpnmdyodn", model.headers().get("ltiugcxnavv").get(0));
        Assertions.assertEquals("gbijtjivfx", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("tawfsdjpvkvp", model.cultureInfo());
        Assertions.assertEquals("bkzbzkd", model.parameters().get("ncj"));
        Assertions.assertEquals("kayuhqlbjbs", model.httpMethod());
        Assertions.assertEquals(RestoreSourceDataStoreType.OPERATIONAL_STORE, model.content().sourceDataStoreType());
        Assertions.assertEquals("ehtwdwrft", model.content().startTime());
        Assertions.assertEquals("iby", model.content().endTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureBackupFindRestorableTimeRangesRequestResource model
            = new AzureBackupFindRestorableTimeRangesRequestResource().withSubscriptionId("dl")
                .withUri("shfwpracstwity")
                .withHeaders(
                    mapOf("ltiugcxnavv", Arrays.asList("xccedcpnmdyodn", "zxltjcvn"), "unyowxwl", Arrays.asList("qiby"),
                        "rwkq", Arrays.asList("jrkvfgbvfvpdbo", "acizsjqlhkrr", "bdeibqipqk", "hvxndzwmkrefajpj")))
                .withSupportedGroupVersions(Arrays.asList("gbijtjivfx", "sjabibs"))
                .withCultureInfo("tawfsdjpvkvp")
                .withParameters(mapOf("ncj", "bkzbzkd", "zhjjklffhmouwq", "budurgkakmo", "eeyebi", "gzrf"))
                .withHttpMethod("kayuhqlbjbs")
                .withContent(new AzureBackupFindRestorableTimeRangesRequest()
                    .withSourceDataStoreType(RestoreSourceDataStoreType.OPERATIONAL_STORE)
                    .withStartTime("ehtwdwrft")
                    .withEndTime("iby"));
        model = BinaryData.fromObject(model).toObject(AzureBackupFindRestorableTimeRangesRequestResource.class);
        Assertions.assertEquals("dl", model.subscriptionId());
        Assertions.assertEquals("shfwpracstwity", model.uri());
        Assertions.assertEquals("xccedcpnmdyodn", model.headers().get("ltiugcxnavv").get(0));
        Assertions.assertEquals("gbijtjivfx", model.supportedGroupVersions().get(0));
        Assertions.assertEquals("tawfsdjpvkvp", model.cultureInfo());
        Assertions.assertEquals("bkzbzkd", model.parameters().get("ncj"));
        Assertions.assertEquals("kayuhqlbjbs", model.httpMethod());
        Assertions.assertEquals(RestoreSourceDataStoreType.OPERATIONAL_STORE, model.content().sourceDataStoreType());
        Assertions.assertEquals("ehtwdwrft", model.content().startTime());
        Assertions.assertEquals("iby", model.content().endTime());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
