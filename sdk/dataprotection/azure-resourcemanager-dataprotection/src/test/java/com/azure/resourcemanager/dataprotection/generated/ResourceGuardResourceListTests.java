// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.fluent.models.ResourceGuardResourceInner;
import com.azure.resourcemanager.dataprotection.models.ResourceGuard;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceGuardResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceGuardResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Unknown\",\"allowAutoApprovals\":true,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"tdaaygdvwvg\",\"requestResourceType\":\"ohgwxrtfudxepxg\"},{\"vaultCriticalOperation\":\"agvrvmnpkuk\",\"requestResourceType\":\"i\"},{\"vaultCriticalOperation\":\"blxgwimf\",\"requestResourceType\":\"hfjx\"},{\"vaultCriticalOperation\":\"szkkfoqre\",\"requestResourceType\":\"kzikfjawneaivxwc\"}],\"vaultCriticalOperationExclusionList\":[\"pcirelsfeaen\",\"abfatkl\",\"dxbjhwuaanozj\"],\"description\":\"ph\"},\"eTag\":\"ulpjr\",\"location\":\"ag\",\"tags\":{\"itc\":\"imjwosyt\",\"ekkezzikhlyfjh\":\"kfcktqum\"},\"id\":\"gqggebdunygae\",\"name\":\"idb\",\"type\":\"fatpxllrxcyjmoa\"},{\"properties\":{\"provisioningState\":\"Unknown\",\"allowAutoApprovals\":false,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"dmjsjqb\",\"requestResourceType\":\"hyxxrwlycoduhpk\"},{\"vaultCriticalOperation\":\"gymare\",\"requestResourceType\":\"ajxq\"},{\"vaultCriticalOperation\":\"jhkycub\",\"requestResourceType\":\"dgssofwqmzqal\"}],\"vaultCriticalOperationExclusionList\":[\"njijpxacqqudf\",\"byxbaaabjy\",\"ayffim\",\"zrtuzq\"],\"description\":\"sexnevfdnw\"},\"eTag\":\"mewzsyyc\",\"location\":\"zsoibjudpfrxtr\",\"tags\":{\"bpaxhexiilivpdt\":\"vaytdwkqbrq\",\"oruzfgsquyfxrxx\":\"irqtdqoa\",\"xje\":\"eptra\"},\"id\":\"wlwnwxuqlcv\",\"name\":\"dy\",\"type\":\"atdooaojkniod\"}],\"nextLink\":\"oebwnujhemms\"}")
            .toObject(ResourceGuardResourceList.class);
        Assertions.assertEquals("oebwnujhemms", model.nextLink());
        Assertions.assertEquals("ag", model.value().get(0).location());
        Assertions.assertEquals("imjwosyt", model.value().get(0).tags().get("itc"));
        Assertions.assertEquals("ulpjr", model.value().get(0).etag());
        Assertions.assertEquals("pcirelsfeaen",
            model.value().get(0).properties().vaultCriticalOperationExclusionList().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceGuardResourceList model = new ResourceGuardResourceList().withNextLink("oebwnujhemms")
            .withValue(Arrays.asList(
                new ResourceGuardResourceInner().withLocation("ag")
                    .withTags(mapOf("itc", "imjwosyt", "ekkezzikhlyfjh", "kfcktqum"))
                    .withEtag("ulpjr")
                    .withProperties(new ResourceGuard().withVaultCriticalOperationExclusionList(
                        Arrays.asList("pcirelsfeaen", "abfatkl", "dxbjhwuaanozj"))),
                new ResourceGuardResourceInner().withLocation("zsoibjudpfrxtr")
                    .withTags(mapOf("bpaxhexiilivpdt", "vaytdwkqbrq", "oruzfgsquyfxrxx", "irqtdqoa", "xje", "eptra"))
                    .withEtag("mewzsyyc")
                    .withProperties(new ResourceGuard().withVaultCriticalOperationExclusionList(
                        Arrays.asList("njijpxacqqudf", "byxbaaabjy", "ayffim", "zrtuzq")))));
        model = BinaryData.fromObject(model).toObject(ResourceGuardResourceList.class);
        Assertions.assertEquals("oebwnujhemms", model.nextLink());
        Assertions.assertEquals("ag", model.value().get(0).location());
        Assertions.assertEquals("imjwosyt", model.value().get(0).tags().get("itc"));
        Assertions.assertEquals("ulpjr", model.value().get(0).etag());
        Assertions.assertEquals("pcirelsfeaen",
            model.value().get(0).properties().vaultCriticalOperationExclusionList().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
