// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.fluent.models.ResourceGuardResourceInner;
import com.azure.resourcemanager.dataprotection.models.ResourceGuard;
import com.azure.resourcemanager.dataprotection.models.ResourceGuardResourceList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceGuardResourceListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceGuardResourceList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"allowAutoApprovals\":true,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"dtkcnqxwbpokulp\",\"requestResourceType\":\"jwaa\"},{\"vaultCriticalOperation\":\"pqiiobyuqe\",\"requestResourceType\":\"qlpqwcciuq\"},{\"vaultCriticalOperation\":\"dbutauvfbtkuwhh\",\"requestResourceType\":\"ykojoxafnndlpic\"}],\"vaultCriticalOperationExclusionList\":[\"ymkcdyhb\"],\"description\":\"kpw\"},\"eTag\":\"eqnovvqfovl\",\"location\":\"ywsuwsy\",\"tags\":{\"ea\":\"dsytgadgvr\",\"arrwlquu\":\"neqn\",\"e\":\"jfqka\"},\"id\":\"iipfpubj\",\"name\":\"bwwift\",\"type\":\"hqkvpuvksgplsak\"},{\"properties\":{\"provisioningState\":\"Failed\",\"allowAutoApprovals\":false,\"resourceGuardOperations\":[{\"vaultCriticalOperation\":\"ph\",\"requestResourceType\":\"pxodlqiyntorzih\"},{\"vaultCriticalOperation\":\"osjswsr\",\"requestResourceType\":\"lyzrpzbchckqqzqi\"},{\"vaultCriticalOperation\":\"iysui\",\"requestResourceType\":\"ynkedyatrwyhqmib\"}],\"vaultCriticalOperationExclusionList\":[\"wit\"],\"description\":\"ypyynpcdpumnzg\"},\"eTag\":\"z\",\"location\":\"abikns\",\"tags\":{\"lwwrl\":\"jhxbld\"},\"id\":\"dmtnc\",\"name\":\"ok\",\"type\":\"tllxdyhgsyocogj\"}],\"nextLink\":\"dtbnnha\"}")
            .toObject(ResourceGuardResourceList.class);
        Assertions.assertEquals("dtbnnha", model.nextLink());
        Assertions.assertEquals("ywsuwsy", model.value().get(0).location());
        Assertions.assertEquals("dsytgadgvr", model.value().get(0).tags().get("ea"));
        Assertions.assertEquals("eqnovvqfovl", model.value().get(0).etag());
        Assertions.assertEquals("ymkcdyhb",
            model.value().get(0).properties().vaultCriticalOperationExclusionList().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceGuardResourceList model = new ResourceGuardResourceList().withNextLink("dtbnnha")
            .withValue(Arrays.asList(new ResourceGuardResourceInner().withLocation("ywsuwsy")
                .withTags(mapOf("ea", "dsytgadgvr", "arrwlquu", "neqn", "e", "jfqka"))
                .withEtag("eqnovvqfovl")
                .withProperties(new ResourceGuard().withVaultCriticalOperationExclusionList(Arrays.asList("ymkcdyhb"))),
                new ResourceGuardResourceInner().withLocation("abikns")
                    .withTags(mapOf("lwwrl", "jhxbld"))
                    .withEtag("z")
                    .withProperties(
                        new ResourceGuard().withVaultCriticalOperationExclusionList(Arrays.asList("wit")))));
        model = BinaryData.fromObject(model).toObject(ResourceGuardResourceList.class);
        Assertions.assertEquals("dtbnnha", model.nextLink());
        Assertions.assertEquals("ywsuwsy", model.value().get(0).location());
        Assertions.assertEquals("dsytgadgvr", model.value().get(0).tags().get("ea"));
        Assertions.assertEquals("eqnovvqfovl", model.value().get(0).etag());
        Assertions.assertEquals("ymkcdyhb",
            model.value().get(0).properties().vaultCriticalOperationExclusionList().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
