// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterVaultTierRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterVaultTierRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterVaultTierRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterVaultTierRestoreCriteria\",\"includeClusterScopeResources\":false,\"includedNamespaces\":[\"fsm\"],\"excludedNamespaces\":[\"hmpvecx\"],\"includedResourceTypes\":[\"ebfqkkrbm\",\"ukgri\",\"flz\",\"fbxzpuzycisp\"],\"excludedResourceTypes\":[\"ahmgkbrp\",\"y\",\"hibnuqqkpika\",\"rgvtqag\"],\"labelSelectors\":[\"ynhijggme\",\"fsiarbutr\"],\"persistentVolumeRestoreMode\":\"RestoreWithVolumeData\",\"conflictPolicy\":\"Patch\",\"namespaceMappings\":{\"nlankxmyskpb\":\"mhjrunmpxttdbhr\",\"nrs\":\"enbtkcxywny\",\"lhaaxdbabp\":\"nlqidybyxczf\"},\"restoreHookReferences\":[{\"name\":\"qlfktsths\",\"namespace\":\"ocmnyyazttbtwwrq\"},{\"name\":\"edckzywbiexzfey\",\"namespace\":\"axibxujw\"},{\"name\":\"qwalmuzyoxaepd\",\"namespace\":\"jancu\"},{\"name\":\"hdwbavxbniwdjs\",\"namespace\":\"tsdbpgn\"}],\"stagingResourceGroupId\":\"txhp\",\"stagingStorageAccountId\":\"bzpfzab\",\"resourceModifierReference\":{\"name\":\"uhxwtctyqiklbbov\",\"namespace\":\"wzbhvgyugu\"}}")
            .toObject(KubernetesClusterVaultTierRestoreCriteria.class);
        Assertions.assertFalse(model.includeClusterScopeResources());
        Assertions.assertEquals("fsm", model.includedNamespaces().get(0));
        Assertions.assertEquals("hmpvecx", model.excludedNamespaces().get(0));
        Assertions.assertEquals("ebfqkkrbm", model.includedResourceTypes().get(0));
        Assertions.assertEquals("ahmgkbrp", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("ynhijggme", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("mhjrunmpxttdbhr", model.namespaceMappings().get("nlankxmyskpb"));
        Assertions.assertEquals("qlfktsths", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("ocmnyyazttbtwwrq", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("txhp", model.stagingResourceGroupId());
        Assertions.assertEquals("bzpfzab", model.stagingStorageAccountId());
        Assertions.assertEquals("uhxwtctyqiklbbov", model.resourceModifierReference().name());
        Assertions.assertEquals("wzbhvgyugu", model.resourceModifierReference().namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterVaultTierRestoreCriteria model
            = new KubernetesClusterVaultTierRestoreCriteria().withIncludeClusterScopeResources(false)
                .withIncludedNamespaces(Arrays.asList("fsm"))
                .withExcludedNamespaces(Arrays.asList("hmpvecx"))
                .withIncludedResourceTypes(Arrays.asList("ebfqkkrbm", "ukgri", "flz", "fbxzpuzycisp"))
                .withExcludedResourceTypes(Arrays.asList("ahmgkbrp", "y", "hibnuqqkpika", "rgvtqag"))
                .withLabelSelectors(Arrays.asList("ynhijggme", "fsiarbutr"))
                .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA)
                .withConflictPolicy(ExistingResourcePolicy.PATCH)
                .withNamespaceMappings(
                    mapOf("nlankxmyskpb", "mhjrunmpxttdbhr", "nrs", "enbtkcxywny", "lhaaxdbabp", "nlqidybyxczf"))
                .withRestoreHookReferences(
                    Arrays.asList(new NamespacedNameResource().withName("qlfktsths").withNamespace("ocmnyyazttbtwwrq"),
                        new NamespacedNameResource().withName("edckzywbiexzfey").withNamespace("axibxujw"),
                        new NamespacedNameResource().withName("qwalmuzyoxaepd").withNamespace("jancu"),
                        new NamespacedNameResource().withName("hdwbavxbniwdjs").withNamespace("tsdbpgn")))
                .withStagingResourceGroupId("txhp")
                .withStagingStorageAccountId("bzpfzab")
                .withResourceModifierReference(
                    new NamespacedNameResource().withName("uhxwtctyqiklbbov").withNamespace("wzbhvgyugu"));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterVaultTierRestoreCriteria.class);
        Assertions.assertFalse(model.includeClusterScopeResources());
        Assertions.assertEquals("fsm", model.includedNamespaces().get(0));
        Assertions.assertEquals("hmpvecx", model.excludedNamespaces().get(0));
        Assertions.assertEquals("ebfqkkrbm", model.includedResourceTypes().get(0));
        Assertions.assertEquals("ahmgkbrp", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("ynhijggme", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITH_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("mhjrunmpxttdbhr", model.namespaceMappings().get("nlankxmyskpb"));
        Assertions.assertEquals("qlfktsths", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("ocmnyyazttbtwwrq", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("txhp", model.stagingResourceGroupId());
        Assertions.assertEquals("bzpfzab", model.stagingStorageAccountId());
        Assertions.assertEquals("uhxwtctyqiklbbov", model.resourceModifierReference().name());
        Assertions.assertEquals("wzbhvgyugu", model.resourceModifierReference().namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
