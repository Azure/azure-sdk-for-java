// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterVaultTierRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterVaultTierRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterVaultTierRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterVaultTierRestoreCriteria\",\"includeClusterScopeResources\":false,\"includedNamespaces\":[\"v\",\"novqfzge\"],\"excludedNamespaces\":[\"ftul\",\"ltducea\",\"tmczuomejwcwwqi\"],\"includedResourceTypes\":[\"ssxmojms\",\"p\",\"jpr\"],\"excludedResourceTypes\":[\"cfzq\",\"jyxgtczh\",\"ydbsd\"],\"labelSelectors\":[\"kx\"],\"persistentVolumeRestoreMode\":\"RestoreWithoutVolumeData\",\"conflictPolicy\":\"Patch\",\"namespaceMappings\":{\"iplt\":\"xu\",\"tbaxk\":\"n\"},\"restoreHookReferences\":[{\"name\":\"rc\",\"namespace\":\"yklyhpluodpvruud\"},{\"name\":\"zibt\",\"namespace\":\"stgktst\"}],\"stagingResourceGroupId\":\"xeclzedqbcvhzlhp\",\"stagingStorageAccountId\":\"dqkdlwwqfbu\",\"resourceModifierReference\":{\"name\":\"xtrqjfs\",\"namespace\":\"mbtxhwgf\"}}")
            .toObject(KubernetesClusterVaultTierRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("v", model.includedNamespaces().get(0));
        Assertions.assertEquals("ftul", model.excludedNamespaces().get(0));
        Assertions.assertEquals("ssxmojms", model.includedResourceTypes().get(0));
        Assertions.assertEquals("cfzq", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("kx", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("xu", model.namespaceMappings().get("iplt"));
        Assertions.assertEquals("rc", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("yklyhpluodpvruud", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("xeclzedqbcvhzlhp", model.stagingResourceGroupId());
        Assertions.assertEquals("dqkdlwwqfbu", model.stagingStorageAccountId());
        Assertions.assertEquals("xtrqjfs", model.resourceModifierReference().name());
        Assertions.assertEquals("mbtxhwgf", model.resourceModifierReference().namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterVaultTierRestoreCriteria model = new KubernetesClusterVaultTierRestoreCriteria()
            .withIncludeClusterScopeResources(false)
            .withIncludedNamespaces(Arrays.asList("v", "novqfzge"))
            .withExcludedNamespaces(Arrays.asList("ftul", "ltducea", "tmczuomejwcwwqi"))
            .withIncludedResourceTypes(Arrays.asList("ssxmojms", "p", "jpr"))
            .withExcludedResourceTypes(Arrays.asList("cfzq", "jyxgtczh", "ydbsd"))
            .withLabelSelectors(Arrays.asList("kx"))
            .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA)
            .withConflictPolicy(ExistingResourcePolicy.PATCH)
            .withNamespaceMappings(mapOf("iplt", "xu", "tbaxk", "n"))
            .withRestoreHookReferences(
                Arrays.asList(new NamespacedNameResource().withName("rc").withNamespace("yklyhpluodpvruud"),
                    new NamespacedNameResource().withName("zibt").withNamespace("stgktst")))
            .withStagingResourceGroupId("xeclzedqbcvhzlhp")
            .withStagingStorageAccountId("dqkdlwwqfbu")
            .withResourceModifierReference(new NamespacedNameResource().withName("xtrqjfs").withNamespace("mbtxhwgf"));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterVaultTierRestoreCriteria.class);
        Assertions.assertEquals(false, model.includeClusterScopeResources());
        Assertions.assertEquals("v", model.includedNamespaces().get(0));
        Assertions.assertEquals("ftul", model.excludedNamespaces().get(0));
        Assertions.assertEquals("ssxmojms", model.includedResourceTypes().get(0));
        Assertions.assertEquals("cfzq", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("kx", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.PATCH, model.conflictPolicy());
        Assertions.assertEquals("xu", model.namespaceMappings().get("iplt"));
        Assertions.assertEquals("rc", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("yklyhpluodpvruud", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("xeclzedqbcvhzlhp", model.stagingResourceGroupId());
        Assertions.assertEquals("dqkdlwwqfbu", model.stagingStorageAccountId());
        Assertions.assertEquals("xtrqjfs", model.resourceModifierReference().name());
        Assertions.assertEquals("mbtxhwgf", model.resourceModifierReference().namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
