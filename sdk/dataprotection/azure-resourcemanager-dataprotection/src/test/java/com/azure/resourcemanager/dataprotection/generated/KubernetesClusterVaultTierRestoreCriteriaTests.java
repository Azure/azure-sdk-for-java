// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dataprotection.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dataprotection.models.ExistingResourcePolicy;
import com.azure.resourcemanager.dataprotection.models.KubernetesClusterVaultTierRestoreCriteria;
import com.azure.resourcemanager.dataprotection.models.NamespacedNameResource;
import com.azure.resourcemanager.dataprotection.models.PersistentVolumeRestoreMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KubernetesClusterVaultTierRestoreCriteriaTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KubernetesClusterVaultTierRestoreCriteria model = BinaryData.fromString(
            "{\"objectType\":\"KubernetesClusterVaultTierRestoreCriteria\",\"includeClusterScopeResources\":false,\"includedNamespaces\":[\"ytibyow\",\"blgyavutpthj\",\"xoi\",\"msksbp\"],\"excludedNamespaces\":[\"qolj\"],\"includedResourceTypes\":[\"gxxlxsffgcvizq\",\"dwl\"],\"excludedResourceTypes\":[\"youpfgfbkj\",\"bdyhgkfminsgowz\",\"ttsttktlahbqact\"],\"labelSelectors\":[\"zukxitmmqtgqq\",\"x\",\"rnxrxcpj\"],\"persistentVolumeRestoreMode\":\"RestoreWithoutVolumeData\",\"conflictPolicy\":\"Skip\",\"namespaceMappings\":{\"ajlkatnw\":\"qdzfvazivjlfrqtt\"},\"restoreHookReferences\":[{\"name\":\"pidkqqfkuvscxkdm\",\"namespace\":\"govibrxkpmloazu\"},{\"name\":\"ocbgoorbteoyb\",\"namespace\":\"jxakv\"}],\"stagingResourceGroupId\":\"gslordilmyww\",\"stagingStorageAccountId\":\"gkxnyedabg\",\"resourceModifierReference\":{\"name\":\"dtj\",\"namespace\":\"wbcihxuuwh\"}}")
            .toObject(KubernetesClusterVaultTierRestoreCriteria.class);
        Assertions.assertFalse(model.includeClusterScopeResources());
        Assertions.assertEquals("ytibyow", model.includedNamespaces().get(0));
        Assertions.assertEquals("qolj", model.excludedNamespaces().get(0));
        Assertions.assertEquals("gxxlxsffgcvizq", model.includedResourceTypes().get(0));
        Assertions.assertEquals("youpfgfbkj", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("zukxitmmqtgqq", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.SKIP, model.conflictPolicy());
        Assertions.assertEquals("qdzfvazivjlfrqtt", model.namespaceMappings().get("ajlkatnw"));
        Assertions.assertEquals("pidkqqfkuvscxkdm", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("govibrxkpmloazu", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("gslordilmyww", model.stagingResourceGroupId());
        Assertions.assertEquals("gkxnyedabg", model.stagingStorageAccountId());
        Assertions.assertEquals("dtj", model.resourceModifierReference().name());
        Assertions.assertEquals("wbcihxuuwh", model.resourceModifierReference().namespace());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KubernetesClusterVaultTierRestoreCriteria model
            = new KubernetesClusterVaultTierRestoreCriteria().withIncludeClusterScopeResources(false)
                .withIncludedNamespaces(Arrays.asList("ytibyow", "blgyavutpthj", "xoi", "msksbp"))
                .withExcludedNamespaces(Arrays.asList("qolj"))
                .withIncludedResourceTypes(Arrays.asList("gxxlxsffgcvizq", "dwl"))
                .withExcludedResourceTypes(Arrays.asList("youpfgfbkj", "bdyhgkfminsgowz", "ttsttktlahbqact"))
                .withLabelSelectors(Arrays.asList("zukxitmmqtgqq", "x", "rnxrxcpj"))
                .withPersistentVolumeRestoreMode(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA)
                .withConflictPolicy(ExistingResourcePolicy.SKIP)
                .withNamespaceMappings(mapOf("ajlkatnw", "qdzfvazivjlfrqtt"))
                .withRestoreHookReferences(Arrays.asList(
                    new NamespacedNameResource().withName("pidkqqfkuvscxkdm").withNamespace("govibrxkpmloazu"),
                    new NamespacedNameResource().withName("ocbgoorbteoyb").withNamespace("jxakv")))
                .withStagingResourceGroupId("gslordilmyww")
                .withStagingStorageAccountId("gkxnyedabg")
                .withResourceModifierReference(
                    new NamespacedNameResource().withName("dtj").withNamespace("wbcihxuuwh"));
        model = BinaryData.fromObject(model).toObject(KubernetesClusterVaultTierRestoreCriteria.class);
        Assertions.assertFalse(model.includeClusterScopeResources());
        Assertions.assertEquals("ytibyow", model.includedNamespaces().get(0));
        Assertions.assertEquals("qolj", model.excludedNamespaces().get(0));
        Assertions.assertEquals("gxxlxsffgcvizq", model.includedResourceTypes().get(0));
        Assertions.assertEquals("youpfgfbkj", model.excludedResourceTypes().get(0));
        Assertions.assertEquals("zukxitmmqtgqq", model.labelSelectors().get(0));
        Assertions.assertEquals(PersistentVolumeRestoreMode.RESTORE_WITHOUT_VOLUME_DATA,
            model.persistentVolumeRestoreMode());
        Assertions.assertEquals(ExistingResourcePolicy.SKIP, model.conflictPolicy());
        Assertions.assertEquals("qdzfvazivjlfrqtt", model.namespaceMappings().get("ajlkatnw"));
        Assertions.assertEquals("pidkqqfkuvscxkdm", model.restoreHookReferences().get(0).name());
        Assertions.assertEquals("govibrxkpmloazu", model.restoreHookReferences().get(0).namespace());
        Assertions.assertEquals("gslordilmyww", model.stagingResourceGroupId());
        Assertions.assertEquals("gkxnyedabg", model.stagingStorageAccountId());
        Assertions.assertEquals("dtj", model.resourceModifierReference().name());
        Assertions.assertEquals("wbcihxuuwh", model.resourceModifierReference().namespace());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
