// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentity;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.MarketplaceDetails;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OfferDetails;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationProperties;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.PartnerProperties;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Organizations CreateOrUpdate.
 */
public final class OrganizationsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-10-01/Organizations_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Organizations_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ArizeAIObservabilityEvalManager.
     */
    public static void organizationsCreateOrUpdateGeneratedByMaximumSetRule(
        com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager manager) {
        manager.organizations()
            .define("test-org-1")
            .withRegion("East US")
            .withExistingResourceGroup("yashika-rg-arize")
            .withTags(mapOf())
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("61641157-140c-4b97-b365-30ff76d9f82e")
                    .withOfferDetails(new OfferDetails().withPublisherId("arizeai1657829589668")
                        .withOfferId("arize-liftr-0")
                        .withPlanId("liftr-test-0")
                        .withPlanName("Liftr Test 0")
                        .withTermUnit("P1M")
                        .withTermId("gmz7xq9ge3py")))
                .withUser(new UserDetails().withFirstName("")
                    .withLastName("")
                    .withEmailAddress("yashikajain@microsoft.com")
                    .withUpn("yashikajain@microsoft.com")
                    .withPhoneNumber("akbqdbs"))
                .withPartnerProperties(new PartnerProperties().withDescription("this is a great description"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.SAML)
                    .withState(SingleSignOnStates.INITIAL)
                    .withEnterpriseAppId("kqykskeuqffsslmpjryzggphhpeh")
                    .withUrl("ihidsswbeahnsjjxxqntz")
                    .withAadDomains(Arrays.asList("tyjdvljasl"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf()))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
