// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationResource;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"cciw\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"uqkhrsajiwku\",\"offerId\":\"foskghsauuimj\",\"planId\":\"vxieduugidyj\",\"planName\":\"f\",\"termUnit\":\"aos\",\"termId\":\"xc\"}},\"user\":{\"firstName\":\"npc\",\"lastName\":\"ocohslkevleg\",\"emailAddress\":\"fbuhfmvfaxkffe\",\"upn\":\"th\",\"phoneNumber\":\"m\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"description\":\"v\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Enable\",\"enterpriseAppId\":\"bbzoggig\",\"url\":\"wburvjxxjnspydpt\",\"aadDomains\":[\"nkoukn\",\"udwtiukbl\",\"ngkpocipazy\"]}},\"identity\":{\"principalId\":\"gukgjnpiucgygevq\",\"tenantId\":\"typmrbpizcdrqjsd\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"ishc\":{\"principalId\":\"yhxdeoejzicwi\",\"clientId\":\"jttgzf\"},\"shwankixzbinje\":{\"principalId\":\"hajdeyeamdpha\",\"clientId\":\"lpbuxwgipwhonowk\"}}},\"location\":\"ttmrywnuzoqf\",\"tags\":{\"sicohoqqnwvlry\":\"qzrnkcqvyxlwhz\",\"konocu\":\"vwhheunmmqhgyx\",\"zf\":\"oklyaxuconuq\",\"vjektcxsenh\":\"beypewrmjmw\"},\"id\":\"lrsf\",\"name\":\"rzpwvlqdqgbiq\",\"type\":\"lihkaetcktvfc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .getByResourceGroupWithResponse("yokacspkw", "hzdobpxjmflbvvnc", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ttmrywnuzoqf", response.location());
        Assertions.assertEquals("qzrnkcqvyxlwhz", response.tags().get("sicohoqqnwvlry"));
        Assertions.assertEquals("cciw", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("uqkhrsajiwku", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("foskghsauuimj", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("vxieduugidyj", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("f", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("aos", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("xc", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("npc", response.properties().user().firstName());
        Assertions.assertEquals("ocohslkevleg", response.properties().user().lastName());
        Assertions.assertEquals("fbuhfmvfaxkffe", response.properties().user().emailAddress());
        Assertions.assertEquals("th", response.properties().user().upn());
        Assertions.assertEquals("m", response.properties().user().phoneNumber());
        Assertions.assertEquals("v", response.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("bbzoggig", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("wburvjxxjnspydpt", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("nkoukn", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }
}
