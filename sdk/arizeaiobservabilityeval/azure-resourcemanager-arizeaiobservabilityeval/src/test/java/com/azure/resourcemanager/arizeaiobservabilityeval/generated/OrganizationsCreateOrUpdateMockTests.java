// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentity;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.MarketplaceDetails;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OfferDetails;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationProperties;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationResource;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.PartnerProperties;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.UserAssignedIdentity;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"zuhkfpbsjyof\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"uusdttouwa\",\"offerId\":\"oekqvk\",\"planId\":\"lns\",\"planName\":\"bxwyjsflhhcaa\",\"termUnit\":\"jixisxyawjoyaqcs\",\"termId\":\"jpkiidzyexznelix\"}},\"user\":{\"firstName\":\"rzt\",\"lastName\":\"lhbnxkna\",\"emailAddress\":\"ulppggdtpnapnyir\",\"upn\":\"uhpigvp\",\"phoneNumber\":\"lgqg\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"medjvcslynqwwncw\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Enable\",\"enterpriseAppId\":\"trmgucnapkte\",\"url\":\"llwptfdy\",\"aadDomains\":[\"qbuaceopzfqr\",\"huaoppp\",\"qeqxo\"]}},\"identity\":{\"principalId\":\"ahzxctobgbk\",\"tenantId\":\"oizpostmgrcfbun\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"swbxqz\":{\"principalId\":\"hhkxbp\",\"clientId\":\"ymjhxxjyngudivkr\"},\"ivetvtcq\":{\"principalId\":\"zjf\",\"clientId\":\"vjfdx\"},\"fxoblytkb\":{\"principalId\":\"tdo\",\"clientId\":\"cbxvwvxyslqbh\"}}},\"location\":\"pe\",\"tags\":{\"q\":\"fbkrvrnsvs\",\"rruvwbhsq\":\"ohxcrsbfova\",\"gjb\":\"sub\"},\"id\":\"rxbpyb\",\"name\":\"rfbjf\",\"type\":\"twss\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .define("hspkdeemao")
            .withRegion("ww")
            .withExistingResourceGroup("ehhseyvjusrts")
            .withTags(mapOf("mcqibycnojv", "qbex", "zhpvgqzcjrvxd", "nmefqsgzvahapj", "vawjvzunlu", "zlmwlxkvugfhz",
                "xipeilpjzuaejx", "hnnpr"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("ag")
                    .withOfferDetails(new OfferDetails().withPublisherId("melmqkrha")
                        .withOfferId("vljua")
                        .withPlanId("aquhcdhm")
                        .withPlanName("alaexqpvfadmwsrc")
                        .withTermUnit("vxpvgomz")
                        .withTermId("misgwbnb")))
                .withUser(new UserDetails().withFirstName("ldawkzbaliourqha")
                    .withLastName("uhashsfwx")
                    .withEmailAddress("owzxcu")
                    .withUpn("cjooxdjebwpucwwf")
                    .withPhoneNumber("vbvmeu"))
                .withPartnerProperties(new PartnerProperties().withDescription("vyhzceuojgjrwj"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.DISABLE)
                    .withEnterpriseAppId("mcdytdxwitxnrj")
                    .withUrl("gqwgxhniskxfbkp")
                    .withAadDomains(Arrays.asList("klwndnhjdauwhv", "l"))))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("xzvlvqhjkbegib", new UserAssignedIdentity(), "tzjuzgwyzmhtxo",
                    new UserAssignedIdentity(), "rwmdyvxqtay", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("pe", response.location());
        Assertions.assertEquals("fbkrvrnsvs", response.tags().get("q"));
        Assertions.assertEquals("zuhkfpbsjyof", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("uusdttouwa", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("oekqvk", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("lns", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("bxwyjsflhhcaa", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("jixisxyawjoyaqcs", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("jpkiidzyexznelix", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("rzt", response.properties().user().firstName());
        Assertions.assertEquals("lhbnxkna", response.properties().user().lastName());
        Assertions.assertEquals("ulppggdtpnapnyir", response.properties().user().emailAddress());
        Assertions.assertEquals("uhpigvp", response.properties().user().upn());
        Assertions.assertEquals("lgqg", response.properties().user().phoneNumber());
        Assertions.assertEquals("medjvcslynqwwncw", response.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.SAML, response.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE, response.properties().singleSignOnProperties().state());
        Assertions.assertEquals("trmgucnapkte", response.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("llwptfdy", response.properties().singleSignOnProperties().url());
        Assertions.assertEquals("qbuaceopzfqr", response.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
