// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationResource;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"uhxwtctyqiklbbov\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"zbhvgyuguosv\",\"offerId\":\"kfssxqukkf\",\"planId\":\"l\",\"planName\":\"gsxnkjzkdeslpv\",\"termUnit\":\"pwiyig\",\"termId\":\"pkdwzbai\"}},\"user\":{\"firstName\":\"bbaumnyquped\",\"lastName\":\"jn\",\"emailAddress\":\"ckhsmtxpsieb\",\"upn\":\"hvpesapskrdqm\",\"phoneNumber\":\"jdhtldwkyzxu\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"ncwscwsvlxoto\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"qsx\",\"url\":\"micykvceoveilo\",\"aadDomains\":[\"tyfjfcnjbkcnxdhb\"]}},\"identity\":{\"principalId\":\"phywpnvj\",\"tenantId\":\"qnermclfplphoxu\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"gxywpmue\":{\"principalId\":\"bgyepsbj\",\"clientId\":\"zq\"},\"jidsuyonobglaoc\":{\"principalId\":\"jzwf\",\"clientId\":\"q\"}}},\"location\":\"tcc\",\"tags\":{\"wfudwpzntxhdzhl\":\"udxytlmoyrx\",\"hckfrlhrx\":\"qj\",\"ca\":\"bkyvp\"},\"id\":\"uzbpzkafku\",\"name\":\"b\",\"type\":\"rnwb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tcc", response.iterator().next().location());
        Assertions.assertEquals("udxytlmoyrx", response.iterator().next().tags().get("wfudwpzntxhdzhl"));
        Assertions.assertEquals("uhxwtctyqiklbbov",
            response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("zbhvgyuguosv",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("kfssxqukkf",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("l", response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("gsxnkjzkdeslpv",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("pwiyig",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("pkdwzbai",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("bbaumnyquped", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("jn", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("ckhsmtxpsieb", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("hvpesapskrdqm", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("jdhtldwkyzxu", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("ncwscwsvlxoto",
            response.iterator().next().properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("qsx",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("micykvceoveilo",
            response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("tyfjfcnjbkcnxdhb",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
