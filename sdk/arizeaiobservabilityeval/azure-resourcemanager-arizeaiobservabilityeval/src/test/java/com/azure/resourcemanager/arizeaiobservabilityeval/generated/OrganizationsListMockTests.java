// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationResource;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ivfsnk\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"ctq\",\"offerId\":\"jf\",\"planId\":\"ebrjcxe\",\"planName\":\"uwutttxfvjrbi\",\"termUnit\":\"hxepcyvahfnlj\",\"termId\":\"qxj\"}},\"user\":{\"firstName\":\"ujqgidok\",\"lastName\":\"ljyoxgvcltb\",\"emailAddress\":\"ncghkje\",\"upn\":\"zhbijhtxfv\",\"phoneNumber\":\"bfs\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"hmpvecx\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Initial\",\"enterpriseAppId\":\"qkkrb\",\"url\":\"ukgri\",\"aadDomains\":[\"zlfbxzpuzycispnq\",\"ahmgkbrp\",\"y\"]}},\"identity\":{\"principalId\":\"bnuqqkpik\",\"tenantId\":\"rgvtqag\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"zzmhjrunmpxttd\":{\"clientId\":\"hijggme\",\"principalId\":\"siarbutrcvpn\"},\"nrs\":{\"clientId\":\"rbnlankxmyskp\",\"principalId\":\"enbtkcxywny\"},\"aaxdbabphlwrq\":{\"clientId\":\"lqidyby\",\"principalId\":\"zfcl\"}}},\"location\":\"ktsthsucocmny\",\"tags\":{\"bt\":\"t\"},\"id\":\"wrqpue\",\"name\":\"ckzywbiexzfeyue\",\"type\":\"xibxujwbhqwalm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ktsthsucocmny", response.iterator().next().location());
        Assertions.assertEquals("t", response.iterator().next().tags().get("bt"));
        Assertions.assertEquals("ivfsnk", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("ctq",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("jf", response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("ebrjcxe",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("uwutttxfvjrbi",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hxepcyvahfnlj",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("qxj", response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("ujqgidok", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("ljyoxgvcltb", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("ncghkje", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("zhbijhtxfv", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("bfs", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("hmpvecx", response.iterator().next().properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.INITIAL,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("qkkrb",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("ukgri", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("zlfbxzpuzycispnq",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
