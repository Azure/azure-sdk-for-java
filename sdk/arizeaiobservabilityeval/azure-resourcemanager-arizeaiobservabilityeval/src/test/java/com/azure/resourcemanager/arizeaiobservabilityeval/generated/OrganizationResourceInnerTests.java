// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.arizeaiobservabilityeval.fluent.models.OrganizationResourceInner;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentity;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.MarketplaceDetails;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OfferDetails;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationProperties;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.PartnerProperties;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnPropertiesV2;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.UserAssignedIdentity;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.UserDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"jbpzvgnwzsymg\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"fcyzkohdbihanufh\",\"offerId\":\"cbjy\",\"planId\":\"a\",\"planName\":\"th\",\"termUnit\":\"hab\",\"termId\":\"pikxwczbyscnpqxu\"}},\"user\":{\"firstName\":\"vyq\",\"lastName\":\"wby\",\"emailAddress\":\"k\",\"upn\":\"dumjgrtfwvuk\",\"phoneNumber\":\"audccsnhs\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"yejhk\"},\"singleSignOnProperties\":{\"type\":\"OpenId\",\"state\":\"Disable\",\"enterpriseAppId\":\"pczwlo\",\"url\":\"yemkkvnip\",\"aadDomains\":[\"z\",\"nchgej\",\"podmailzydehojwy\"]}},\"identity\":{\"principalId\":\"xinpmqnjaq\",\"tenantId\":\"xj\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"u\":{\"principalId\":\"vcputegj\",\"clientId\":\"mfdatscmdvpj\"},\"jdpvwryo\":{\"principalId\":\"uuvmkjozkrwfnd\",\"clientId\":\"djpslw\"}}},\"location\":\"soacctazakl\",\"tags\":{\"paojakhmsbzjh\":\"hbcryffdfdosyge\"},\"id\":\"rzevdphlxaol\",\"name\":\"hqtrgqjbpf\",\"type\":\"fsinzgvfcjrwzoxx\"}")
            .toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("soacctazakl", model.location());
        Assertions.assertEquals("hbcryffdfdosyge", model.tags().get("paojakhmsbzjh"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals("fcyzkohdbihanufh", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("cbjy", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("a", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("th", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hab", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("vyq", model.properties().user().firstName());
        Assertions.assertEquals("wby", model.properties().user().lastName());
        Assertions.assertEquals("k", model.properties().user().emailAddress());
        Assertions.assertEquals("dumjgrtfwvuk", model.properties().user().upn());
        Assertions.assertEquals("audccsnhs", model.properties().user().phoneNumber());
        Assertions.assertEquals("yejhk", model.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, model.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, model.properties().singleSignOnProperties().state());
        Assertions.assertEquals("pczwlo", model.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("yemkkvnip", model.properties().singleSignOnProperties().url());
        Assertions.assertEquals("z", model.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceInner model = new OrganizationResourceInner().withLocation("soacctazakl")
            .withTags(mapOf("paojakhmsbzjh", "hbcryffdfdosyge"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("jbpzvgnwzsymg")
                    .withOfferDetails(new OfferDetails().withPublisherId("fcyzkohdbihanufh")
                        .withOfferId("cbjy")
                        .withPlanId("a")
                        .withPlanName("th")
                        .withTermUnit("hab")
                        .withTermId("pikxwczbyscnpqxu")))
                .withUser(new UserDetails().withFirstName("vyq")
                    .withLastName("wby")
                    .withEmailAddress("k")
                    .withUpn("dumjgrtfwvuk")
                    .withPhoneNumber("audccsnhs"))
                .withPartnerProperties(new PartnerProperties().withDescription("yejhk"))
                .withSingleSignOnProperties(new SingleSignOnPropertiesV2().withType(SingleSignOnType.OPEN_ID)
                    .withState(SingleSignOnStates.DISABLE)
                    .withEnterpriseAppId("pczwlo")
                    .withUrl("yemkkvnip")
                    .withAadDomains(Arrays.asList("z", "nchgej", "podmailzydehojwy"))))
            .withIdentity(
                new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("u", new UserAssignedIdentity(), "jdpvwryo", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceInner.class);
        Assertions.assertEquals("soacctazakl", model.location());
        Assertions.assertEquals("hbcryffdfdosyge", model.tags().get("paojakhmsbzjh"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().marketplace().subscriptionId());
        Assertions.assertEquals("fcyzkohdbihanufh", model.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("cbjy", model.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("a", model.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("th", model.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hab", model.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("vyq", model.properties().user().firstName());
        Assertions.assertEquals("wby", model.properties().user().lastName());
        Assertions.assertEquals("k", model.properties().user().emailAddress());
        Assertions.assertEquals("dumjgrtfwvuk", model.properties().user().upn());
        Assertions.assertEquals("audccsnhs", model.properties().user().phoneNumber());
        Assertions.assertEquals("yejhk", model.properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.OPEN_ID, model.properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE, model.properties().singleSignOnProperties().state());
        Assertions.assertEquals("pczwlo", model.properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("yemkkvnip", model.properties().singleSignOnProperties().url());
        Assertions.assertEquals("z", model.properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
