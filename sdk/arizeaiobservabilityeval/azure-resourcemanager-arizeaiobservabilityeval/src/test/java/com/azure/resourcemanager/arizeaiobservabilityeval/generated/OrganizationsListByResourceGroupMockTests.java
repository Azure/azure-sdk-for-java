// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationResource;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ymuctqhjfbebrj\",\"subscriptionStatus\":\"Suspended\",\"offerDetails\":{\"publisherId\":\"rfuwutt\",\"offerId\":\"xfvjrbirp\",\"planId\":\"xepcyvahfn\",\"planName\":\"kyqxjvuujqgidokg\",\"termUnit\":\"jyoxgvclt\",\"termId\":\"sncghkjeszz\"}},\"user\":{\"firstName\":\"ijhtxf\",\"lastName\":\"xbf\",\"emailAddress\":\"xnehmpvec\",\"upn\":\"odebfqkkrbmpu\",\"phoneNumber\":\"riwflzlfb\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"description\":\"uzycispnqza\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Enable\",\"enterpriseAppId\":\"pyydhi\",\"url\":\"uqqkpik\",\"aadDomains\":[\"gvtqagnbuynh\",\"jggmebfsiarbu\"]}},\"identity\":{\"principalId\":\"vpnazzm\",\"tenantId\":\"runmp\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"qidybyx\":{\"principalId\":\"hrbnlankxmyskpbh\",\"clientId\":\"btkcxywnytnrsyn\"},\"hsucoc\":{\"principalId\":\"fclhaaxdbabphlwr\",\"clientId\":\"fkts\"},\"uedck\":{\"principalId\":\"yyazttbt\",\"clientId\":\"rq\"}}},\"location\":\"wbiexzfey\",\"tags\":{\"zyoxaepdkzjan\":\"xibxujwbhqwalm\",\"hdwbavxbniwdjs\":\"ux\"},\"id\":\"zt\",\"name\":\"dbpgnxytxhp\",\"type\":\"xbzpfzab\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response
            = manager.organizations().listByResourceGroup("vf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wbiexzfey", response.iterator().next().location());
        Assertions.assertEquals("xibxujwbhqwalm", response.iterator().next().tags().get("zyoxaepdkzjan"));
        Assertions.assertEquals("ymuctqhjfbebrj",
            response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("rfuwutt",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("xfvjrbirp",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("xepcyvahfn",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("kyqxjvuujqgidokg",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("jyoxgvclt",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("sncghkjeszz",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("ijhtxf", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("xbf", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("xnehmpvec", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("odebfqkkrbmpu", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("riwflzlfb", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("uzycispnqza",
            response.iterator().next().properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.SAML,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.ENABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("pyydhi",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("uqqkpik", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("gvtqagnbuynh",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
