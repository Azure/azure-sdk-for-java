// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.arizeaiobservabilityeval.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.arizeaiobservabilityeval.ArizeAIObservabilityEvalManager;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.OrganizationResource;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnStates;
import com.azure.resourcemanager.arizeaiobservabilityeval.models.SingleSignOnType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"watkpnpulexxb\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"truwiqzb\",\"offerId\":\"j\",\"planId\":\"sovmyokacspkwl\",\"planName\":\"dobpxjmflbvvn\",\"termUnit\":\"rkcciwwzjuqk\",\"termId\":\"sa\"}},\"user\":{\"firstName\":\"wkuofoskghsauu\",\"lastName\":\"jmvxie\",\"emailAddress\":\"ugidyjrr\",\"upn\":\"y\",\"phoneNumber\":\"svexcsonpclhoco\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"description\":\"ev\"},\"singleSignOnProperties\":{\"type\":\"Saml\",\"state\":\"Disable\",\"enterpriseAppId\":\"buhfmvfaxkffeiit\",\"url\":\"vmezy\",\"aadDomains\":[\"xmzsbbzogg\",\"grxwbu\",\"vjxxjnsp\",\"dptkoenkouk\"]}},\"identity\":{\"principalId\":\"dwtiukbldngkp\",\"tenantId\":\"ipazyxoegukgjnpi\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"r\":{\"clientId\":\"evqzntypmrbp\",\"principalId\":\"c\"},\"fsj\":{\"clientId\":\"sdpydnfyhxdeoejz\",\"principalId\":\"w\"},\"alpbuxwgipwhon\":{\"clientId\":\"gzfbishcbk\",\"principalId\":\"jdeyeamdpha\"},\"uzoqft\":{\"clientId\":\"kgshwa\",\"principalId\":\"ixzbinjeputtmryw\"}}},\"location\":\"qzrnkcqvyxlwhz\",\"tags\":{\"nwvlryavwhheunmm\":\"cohoq\",\"koklya\":\"hgyxzkonoc\",\"ewrmjmwvvjektc\":\"uconuqszfkbey\"},\"id\":\"senhwlrs\",\"name\":\"frzpwvlqdqgb\",\"type\":\"qylihkaetckt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ArizeAIObservabilityEvalManager manager = ArizeAIObservabilityEvalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response
            = manager.organizations().listByResourceGroup("jsllrmv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qzrnkcqvyxlwhz", response.iterator().next().location());
        Assertions.assertEquals("cohoq", response.iterator().next().tags().get("nwvlryavwhheunmm"));
        Assertions.assertEquals("watkpnpulexxb",
            response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("truwiqzb",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("j", response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("sovmyokacspkwl",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("dobpxjmflbvvn",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("rkcciwwzjuqk",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("sa", response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("wkuofoskghsauu", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("jmvxie", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("ugidyjrr", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("y", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("svexcsonpclhoco", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("ev", response.iterator().next().properties().partnerProperties().description());
        Assertions.assertEquals(SingleSignOnType.SAML,
            response.iterator().next().properties().singleSignOnProperties().type());
        Assertions.assertEquals(SingleSignOnStates.DISABLE,
            response.iterator().next().properties().singleSignOnProperties().state());
        Assertions.assertEquals("buhfmvfaxkffeiit",
            response.iterator().next().properties().singleSignOnProperties().enterpriseAppId());
        Assertions.assertEquals("vmezy", response.iterator().next().properties().singleSignOnProperties().url());
        Assertions.assertEquals("xmzsbbzogg",
            response.iterator().next().properties().singleSignOnProperties().aadDomains().get(0));
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
