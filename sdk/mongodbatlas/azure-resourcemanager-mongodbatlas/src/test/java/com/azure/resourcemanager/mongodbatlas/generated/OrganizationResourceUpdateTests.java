// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResourceUpdate;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResourceUpdateProperties;
import com.azure.resourcemanager.mongodbatlas.models.PartnerProperties;
import com.azure.resourcemanager.mongodbatlas.models.UserAssignedIdentity;
import com.azure.resourcemanager.mongodbatlas.models.UserDetails;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OrganizationResourceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OrganizationResourceUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"uitnwuiz\",\"tenantId\":\"zxufiz\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"zuhtymwisdkfthwx\":{\"principalId\":\"i\",\"clientId\":\"fidfvzw\"}}},\"tags\":{\"c\":\"eiwaopvkmi\"},\"properties\":{\"user\":{\"firstName\":\"dcuf\",\"lastName\":\"fsrpymzidnse\",\"emailAddress\":\"cxtbzsg\",\"upn\":\"c\",\"phoneNumber\":\"newmdwzjeiachbo\",\"companyName\":\"flnrosfqpteehzz\"},\"partnerProperties\":{\"organizationId\":\"yqrimzin\",\"redirectUrl\":\"swjdkirso\",\"organizationName\":\"dqxhcrmnohjtckwh\"}}}")
            .toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("eiwaopvkmi", model.tags().get("c"));
        Assertions.assertEquals("dcuf", model.properties().user().firstName());
        Assertions.assertEquals("fsrpymzidnse", model.properties().user().lastName());
        Assertions.assertEquals("cxtbzsg", model.properties().user().emailAddress());
        Assertions.assertEquals("c", model.properties().user().upn());
        Assertions.assertEquals("newmdwzjeiachbo", model.properties().user().phoneNumber());
        Assertions.assertEquals("flnrosfqpteehzz", model.properties().user().companyName());
        Assertions.assertEquals("yqrimzin", model.properties().partnerProperties().organizationId());
        Assertions.assertEquals("swjdkirso", model.properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("dqxhcrmnohjtckwh", model.properties().partnerProperties().organizationName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OrganizationResourceUpdate model = new OrganizationResourceUpdate()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("zuhtymwisdkfthwx", new UserAssignedIdentity())))
            .withTags(mapOf("c", "eiwaopvkmi"))
            .withProperties(new OrganizationResourceUpdateProperties()
                .withUser(new UserDetails().withFirstName("dcuf")
                    .withLastName("fsrpymzidnse")
                    .withEmailAddress("cxtbzsg")
                    .withUpn("c")
                    .withPhoneNumber("newmdwzjeiachbo")
                    .withCompanyName("flnrosfqpteehzz"))
                .withPartnerProperties(new PartnerProperties().withOrganizationId("yqrimzin")
                    .withRedirectUrl("swjdkirso")
                    .withOrganizationName("dqxhcrmnohjtckwh")));
        model = BinaryData.fromObject(model).toObject(OrganizationResourceUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("eiwaopvkmi", model.tags().get("c"));
        Assertions.assertEquals("dcuf", model.properties().user().firstName());
        Assertions.assertEquals("fsrpymzidnse", model.properties().user().lastName());
        Assertions.assertEquals("cxtbzsg", model.properties().user().emailAddress());
        Assertions.assertEquals("c", model.properties().user().upn());
        Assertions.assertEquals("newmdwzjeiachbo", model.properties().user().phoneNumber());
        Assertions.assertEquals("flnrosfqpteehzz", model.properties().user().companyName());
        Assertions.assertEquals("yqrimzin", model.properties().partnerProperties().organizationId());
        Assertions.assertEquals("swjdkirso", model.properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("dqxhcrmnohjtckwh", model.properties().partnerProperties().organizationName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
