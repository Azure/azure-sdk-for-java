// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongodbatlas.MongoDBAtlasManager;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"vyxlwhzlsicohoqq\",\"subscriptionStatus\":\"Unsubscribed\",\"offerDetails\":{\"publisherId\":\"lryav\",\"offerId\":\"hheunmmqhgyx\",\"planId\":\"konocu\",\"planName\":\"klyaxuconu\",\"termUnit\":\"zf\",\"termId\":\"eyp\"}},\"user\":{\"firstName\":\"wrmjmwvvjektc\",\"lastName\":\"senhwlrs\",\"emailAddress\":\"frzpwvlqdqgb\",\"upn\":\"ylihkaetckt\",\"phoneNumber\":\"civfsnkymuctq\",\"companyName\":\"fbebrjcxer\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"organizationId\":\"ttxfvjr\",\"redirectUrl\":\"rp\",\"organizationName\":\"xepcyvahfn\"}},\"identity\":{\"principalId\":\"yq\",\"tenantId\":\"vuujq\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"jhtxfvgxbfsmxne\":{\"principalId\":\"gjljyoxgvc\",\"clientId\":\"bgsncghkjeszzhb\"}}},\"location\":\"pvecxgodeb\",\"tags\":{\"ukgri\":\"krbm\"},\"id\":\"flz\",\"name\":\"fbxzpuzycisp\",\"type\":\"qzahmgkbrp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoDBAtlasManager manager = MongoDBAtlasManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .getByResourceGroupWithResponse("ttmrywnuzoqf", "iyqzrnk", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pvecxgodeb", response.location());
        Assertions.assertEquals("krbm", response.tags().get("ukgri"));
        Assertions.assertEquals("vyxlwhzlsicohoqq", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("lryav", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("hheunmmqhgyx", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("konocu", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("klyaxuconu", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("zf", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("eyp", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("wrmjmwvvjektc", response.properties().user().firstName());
        Assertions.assertEquals("senhwlrs", response.properties().user().lastName());
        Assertions.assertEquals("frzpwvlqdqgb", response.properties().user().emailAddress());
        Assertions.assertEquals("ylihkaetckt", response.properties().user().upn());
        Assertions.assertEquals("civfsnkymuctq", response.properties().user().phoneNumber());
        Assertions.assertEquals("fbebrjcxer", response.properties().user().companyName());
        Assertions.assertEquals("ttxfvjr", response.properties().partnerProperties().organizationId());
        Assertions.assertEquals("rp", response.properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("xepcyvahfn", response.properties().partnerProperties().organizationName());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }
}
