// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongodbatlas.MongoDBAtlasManager;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.MarketplaceDetails;
import com.azure.resourcemanager.mongodbatlas.models.OfferDetails;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationProperties;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResource;
import com.azure.resourcemanager.mongodbatlas.models.PartnerProperties;
import com.azure.resourcemanager.mongodbatlas.models.UserAssignedIdentity;
import com.azure.resourcemanager.mongodbatlas.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"mwabnetshhszhedp\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"iwubmwmbesldnk\",\"offerId\":\"wtppjflcxogaoko\",\"planId\":\"z\",\"planName\":\"sikvmkqzeqqkdlt\",\"termUnit\":\"xmhhvhgureo\",\"termId\":\"wobdagxtibqdx\"}},\"user\":{\"firstName\":\"xwak\",\"lastName\":\"ogqxndlkzgxhuri\",\"emailAddress\":\"lbpodxunk\",\"upn\":\"bxmubyynt\",\"phoneNumber\":\"rbqtkoie\",\"companyName\":\"eotg\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"organizationId\":\"muwlauwzizxbm\",\"redirectUrl\":\"cjefuzmu\",\"organizationName\":\"pbttdum\"}},\"identity\":{\"principalId\":\"pxebmnzbt\",\"tenantId\":\"jpglkfgohdne\",\"type\":\"None\",\"userAssignedIdentities\":{\"zfikd\":{\"principalId\":\"hsd\",\"clientId\":\"t\"},\"zx\":{\"principalId\":\"wq\",\"clientId\":\"v\"},\"osggbhc\":{\"principalId\":\"vithh\",\"clientId\":\"o\"},\"fgdkzzew\":{\"principalId\":\"fwdsj\",\"clientId\":\"aljutiiswac\"}}},\"location\":\"vhqcrail\",\"tags\":{\"wdmhdlxyjrxs\":\"ppfufl\"},\"id\":\"gafcnihgwqapnedg\",\"name\":\"bcvkcvqvpkeq\",\"type\":\"cvdrhvoodsot\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoDBAtlasManager manager = MongoDBAtlasManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .define("bpvjymjhx")
            .withRegion("zbn")
            .withExistingResourceGroup("nrmfqjhhk")
            .withTags(mapOf("cers", "ylpstdbhhxsrzdz", "wjmy", "dntnevf"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("yngudivk")
                    .withOfferDetails(new OfferDetails().withPublisherId("wbxqzvszjfau")
                        .withOfferId("j")
                        .withPlanId("dxxiv")
                        .withPlanName("vtcqaqtdo")
                        .withTermUnit("cbxvwvxyslqbh")
                        .withTermId("xoblytkbl")))
                .withUser(new UserDetails().withFirstName("pe")
                    .withLastName("wwfbkrvrnsvshq")
                    .withEmailAddress("ohxcrsbfova")
                    .withUpn("ruvw")
                    .withPhoneNumber("sqfsubcgjbirxb")
                    .withCompanyName("bsrfbj"))
                .withPartnerProperties(new PartnerProperties().withOrganizationId("sotftpvj")
                    .withRedirectUrl("exilzznfqqnvwpmq")
                    .withOrganizationName("aruoujmkcjhwqyt")))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("gnayqigynduh", new UserAssignedIdentity(), "ertgccymva",
                    new UserAssignedIdentity(), "yhz", new UserAssignedIdentity(), "od", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("vhqcrail", response.location());
        Assertions.assertEquals("ppfufl", response.tags().get("wdmhdlxyjrxs"));
        Assertions.assertEquals("mwabnetshhszhedp", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("iwubmwmbesldnk", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("wtppjflcxogaoko", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("z", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("sikvmkqzeqqkdlt", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("xmhhvhgureo", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("wobdagxtibqdx", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("xwak", response.properties().user().firstName());
        Assertions.assertEquals("ogqxndlkzgxhuri", response.properties().user().lastName());
        Assertions.assertEquals("lbpodxunk", response.properties().user().emailAddress());
        Assertions.assertEquals("bxmubyynt", response.properties().user().upn());
        Assertions.assertEquals("rbqtkoie", response.properties().user().phoneNumber());
        Assertions.assertEquals("eotg", response.properties().user().companyName());
        Assertions.assertEquals("muwlauwzizxbm", response.properties().partnerProperties().organizationId());
        Assertions.assertEquals("cjefuzmu", response.properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("pbttdum", response.properties().partnerProperties().organizationName());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
