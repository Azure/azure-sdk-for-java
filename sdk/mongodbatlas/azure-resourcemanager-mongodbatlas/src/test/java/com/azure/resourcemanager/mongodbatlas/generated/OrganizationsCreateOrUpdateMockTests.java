// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongodbatlas.MongoDBAtlasManager;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentity;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.MarketplaceDetails;
import com.azure.resourcemanager.mongodbatlas.models.OfferDetails;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationProperties;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResource;
import com.azure.resourcemanager.mongodbatlas.models.PartnerProperties;
import com.azure.resourcemanager.mongodbatlas.models.UserAssignedIdentity;
import com.azure.resourcemanager.mongodbatlas.models.UserDetails;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"marketplace\":{\"subscriptionId\":\"xisxyawjoyaqcsl\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"kiidzyex\",\"offerId\":\"nelixhnrztfo\",\"planId\":\"hb\",\"planName\":\"knalaulppg\",\"termUnit\":\"tpnapnyiropuhpig\",\"termId\":\"gylgqgitxmedjvcs\"}},\"user\":{\"firstName\":\"ynqwwncwzzhxgk\",\"lastName\":\"rmgucnap\",\"emailAddress\":\"t\",\"upn\":\"ellwptfdy\",\"phoneNumber\":\"fqbuaceopzf\",\"companyName\":\"hhuao\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"organizationId\":\"eqx\",\"redirectUrl\":\"z\",\"organizationName\":\"ahzxctobgbk\"}},\"identity\":{\"principalId\":\"izpost\",\"tenantId\":\"rcfbunrm\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"u\":{\"principalId\":\"kxbpvj\",\"clientId\":\"jhxxjyn\"},\"j\":{\"principalId\":\"vkr\",\"clientId\":\"wbxqzvszjfau\"}}},\"location\":\"xxivetv\",\"tags\":{\"wvxysl\":\"aqtdoqmcbx\",\"ytkblmpew\":\"bhsfxob\",\"shqjohxcrsbf\":\"wfbkrvrns\",\"sqfsubcgjbirxb\":\"vasrruvwb\"},\"id\":\"ybsrfbjfdtwss\",\"name\":\"t\",\"type\":\"tpvjzbexilzznfqq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoDBAtlasManager manager = MongoDBAtlasManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        OrganizationResource response = manager.organizations()
            .define("xcug")
            .withRegion("jvzunluthnnp")
            .withExistingResourceGroup("hashsfwxosow")
            .withTags(
                mapOf("eilpjzuaejxdu", "i", "pwo", "tskzbbtdzumveek", "fpbsjyofdxl", "uh", "ttouwaboekqvkel", "us"))
            .withProperties(new OrganizationProperties()
                .withMarketplace(new MarketplaceDetails().withSubscriptionId("jooxdjebw")
                    .withOfferDetails(new OfferDetails().withPublisherId("wwfvov")
                        .withOfferId("vmeueci")
                        .withPlanId("yhz")
                        .withPlanName("uojgj")
                        .withTermUnit("jueiotwmcdytd")
                        .withTermId("it")))
                .withUser(new UserDetails().withFirstName("nrjawgqwg")
                    .withLastName("hniskxfbkpyc")
                    .withEmailAddress("klwndnhjdauwhv")
                    .withUpn("wzbtdhxu")
                    .withPhoneNumber("nbmpowuwprzq")
                    .withCompanyName("eualupjmkhf"))
                .withPartnerProperties(new PartnerProperties().withOrganizationId("sw")
                    .withRedirectUrl("tjrip")
                    .withOrganizationName("rbpbewtghfgblcg")))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(
                    mapOf("txon", new UserAssignedIdentity(), "uvriuhprwm", new UserAssignedIdentity(),
                        "nmefqsgzvahapj", new UserAssignedIdentity(), "xkvugfhzov", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("xxivetv", response.location());
        Assertions.assertEquals("aqtdoqmcbx", response.tags().get("wvxysl"));
        Assertions.assertEquals("xisxyawjoyaqcsl", response.properties().marketplace().subscriptionId());
        Assertions.assertEquals("kiidzyex", response.properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("nelixhnrztfo", response.properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("hb", response.properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("knalaulppg", response.properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("tpnapnyiropuhpig", response.properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("gylgqgitxmedjvcs", response.properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("ynqwwncwzzhxgk", response.properties().user().firstName());
        Assertions.assertEquals("rmgucnap", response.properties().user().lastName());
        Assertions.assertEquals("t", response.properties().user().emailAddress());
        Assertions.assertEquals("ellwptfdy", response.properties().user().upn());
        Assertions.assertEquals("fqbuaceopzf", response.properties().user().phoneNumber());
        Assertions.assertEquals("hhuao", response.properties().user().companyName());
        Assertions.assertEquals("eqx", response.properties().partnerProperties().organizationId());
        Assertions.assertEquals("z", response.properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("ahzxctobgbk", response.properties().partnerProperties().organizationName());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
