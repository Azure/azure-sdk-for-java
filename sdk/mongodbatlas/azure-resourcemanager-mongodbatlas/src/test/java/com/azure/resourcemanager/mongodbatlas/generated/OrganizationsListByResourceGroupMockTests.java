// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongodbatlas.MongoDBAtlasManager;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"ibnuqqkpik\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"gvtqagnbuynh\",\"offerId\":\"jggmebfsiarbu\",\"planId\":\"rcvpnazzmhjrunmp\",\"planName\":\"tdbhrbnla\",\"termUnit\":\"xmyskp\",\"termId\":\"enbtkcxywny\"}},\"user\":{\"firstName\":\"nrs\",\"lastName\":\"nlqidybyxczf\",\"emailAddress\":\"lhaaxdbabp\",\"upn\":\"wrqlfktsthsuco\",\"phoneNumber\":\"nyyazttbtwwrqpue\",\"companyName\":\"kzywbiex\"},\"provisioningState\":\"Failed\",\"partnerProperties\":{\"organizationId\":\"eaxib\",\"redirectUrl\":\"jwbhqwalmuz\",\"organizationName\":\"oxaepd\"}},\"identity\":{\"principalId\":\"ancuxrhd\",\"tenantId\":\"avxbniwdjswztsdb\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"lcuhxwtctyqiklb\":{\"principalId\":\"txhp\",\"clientId\":\"bzpfzab\"},\"uosvmkfssxqukk\":{\"principalId\":\"vplwzbhv\",\"clientId\":\"u\"},\"opwi\":{\"principalId\":\"l\",\"clientId\":\"gsxnkjzkdeslpv\"}}},\"location\":\"ghxpkdw\",\"tags\":{\"upedeojnabckhs\":\"iuebbaumny\",\"ie\":\"txp\",\"jdhtldwkyzxu\":\"tfhvpesapskrdqmh\",\"svlxotogtwrup\":\"tkncwsc\"},\"id\":\"sx\",\"name\":\"nmic\",\"type\":\"kvceoveilovnotyf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoDBAtlasManager manager = MongoDBAtlasManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response
            = manager.organizations().listByResourceGroup("y", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ghxpkdw", response.iterator().next().location());
        Assertions.assertEquals("iuebbaumny", response.iterator().next().tags().get("upedeojnabckhs"));
        Assertions.assertEquals("ibnuqqkpik", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("gvtqagnbuynh",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("jggmebfsiarbu",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("rcvpnazzmhjrunmp",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("tdbhrbnla",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("xmyskp",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("enbtkcxywny",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("nrs", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("nlqidybyxczf", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("lhaaxdbabp", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("wrqlfktsthsuco", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("nyyazttbtwwrqpue", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("kzywbiex", response.iterator().next().properties().user().companyName());
        Assertions.assertEquals("eaxib", response.iterator().next().properties().partnerProperties().organizationId());
        Assertions.assertEquals("jwbhqwalmuz",
            response.iterator().next().properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("oxaepd",
            response.iterator().next().properties().partnerProperties().organizationName());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
