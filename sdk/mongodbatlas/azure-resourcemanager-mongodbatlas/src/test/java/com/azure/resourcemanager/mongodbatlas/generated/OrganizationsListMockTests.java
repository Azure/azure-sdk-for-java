// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongodbatlas.MongoDBAtlasManager;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"cnjbkcnxdhbt\",\"subscriptionStatus\":\"Subscribed\",\"offerDetails\":{\"publisherId\":\"h\",\"offerId\":\"wpn\",\"planId\":\"jtoqne\",\"planName\":\"clfp\",\"termUnit\":\"hoxus\",\"termId\":\"pabgyeps\"}},\"user\":{\"firstName\":\"jta\",\"lastName\":\"qugxywpmueefjzwf\",\"emailAddress\":\"kqujidsuyono\",\"upn\":\"laocqxtccmg\",\"phoneNumber\":\"dxyt\",\"companyName\":\"oyrxvwfudwpzntxh\"},\"provisioningState\":\"Succeeded\",\"partnerProperties\":{\"organizationId\":\"qj\",\"redirectUrl\":\"ck\",\"organizationName\":\"rlhrxs\"}},\"identity\":{\"principalId\":\"vpycanuzbp\",\"tenantId\":\"afkuwb\",\"type\":\"None\",\"userAssignedIdentities\":{\"elmqk\":{\"principalId\":\"mehhseyvjusrtsl\",\"clientId\":\"pkdeemaofmxagkvt\"}}},\"location\":\"ahvljuaha\",\"tags\":{\"hmdua\":\"c\",\"pvfadmwsrcr\":\"aex\",\"fmisg\":\"vxpvgomz\"},\"id\":\"bnbbeldawkz\",\"name\":\"ali\",\"type\":\"urqhaka\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoDBAtlasManager manager = MongoDBAtlasManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ahvljuaha", response.iterator().next().location());
        Assertions.assertEquals("c", response.iterator().next().tags().get("hmdua"));
        Assertions.assertEquals("cnjbkcnxdhbt", response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("h",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("wpn", response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("jtoqne",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("clfp",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("hoxus",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("pabgyeps",
            response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("jta", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("qugxywpmueefjzwf", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("kqujidsuyono", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("laocqxtccmg", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("dxyt", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("oyrxvwfudwpzntxh", response.iterator().next().properties().user().companyName());
        Assertions.assertEquals("qj", response.iterator().next().properties().partnerProperties().organizationId());
        Assertions.assertEquals("ck", response.iterator().next().properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("rlhrxs",
            response.iterator().next().properties().partnerProperties().organizationName());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.iterator().next().identity().type());
    }
}
