// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.mongodbatlas.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mongodbatlas.MongoDBAtlasManager;
import com.azure.resourcemanager.mongodbatlas.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.mongodbatlas.models.OrganizationResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OrganizationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"marketplace\":{\"subscriptionId\":\"iplrbpbewtghfgb\",\"subscriptionStatus\":\"PendingFulfillmentStart\",\"offerDetails\":{\"publisherId\":\"wxzvlvqhjkb\",\"offerId\":\"gibtnm\",\"planId\":\"iebwwaloayqcgwrt\",\"planName\":\"uzgwyzmhtx\",\"termUnit\":\"gmtsavjcbpwxqpsr\",\"termId\":\"ftguv\"}},\"user\":{\"firstName\":\"iuhprwmdyvxqta\",\"lastName\":\"riwwroy\",\"emailAddress\":\"bexrmcq\",\"upn\":\"ycnojvknmefqsg\",\"phoneNumber\":\"ah\",\"companyName\":\"jyzhpvgq\"},\"provisioningState\":\"Canceled\",\"partnerProperties\":{\"organizationId\":\"xdjzlmwlxk\",\"redirectUrl\":\"gfhzovawjvzunlut\",\"organizationName\":\"nnprn\"}},\"identity\":{\"principalId\":\"eilpjzuaejxdu\",\"tenantId\":\"skzbb\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"waboe\":{\"principalId\":\"veekgpwozuhkfp\",\"clientId\":\"jyofdxluusdtto\"},\"vbxwyjsflhh\":{\"principalId\":\"v\",\"clientId\":\"lns\"},\"jpkiidzyexznelix\":{\"principalId\":\"aln\",\"clientId\":\"xisxyawjoyaqcsl\"},\"aulppggd\":{\"principalId\":\"rzt\",\"clientId\":\"lhbnxkna\"}}},\"location\":\"napnyiropuhpigv\",\"tags\":{\"txmedj\":\"lgqg\",\"lynqwwncwzzh\":\"c\",\"ellwptfdy\":\"gktrmgucnapkte\",\"rhhuaopppcqeqx\":\"pfqbuaceopzf\"},\"id\":\"lzdahzxctobgbkdm\",\"name\":\"izpost\",\"type\":\"grcfb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MongoDBAtlasManager manager = MongoDBAtlasManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<OrganizationResource> response = manager.organizations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("napnyiropuhpigv", response.iterator().next().location());
        Assertions.assertEquals("lgqg", response.iterator().next().tags().get("txmedj"));
        Assertions.assertEquals("iplrbpbewtghfgb",
            response.iterator().next().properties().marketplace().subscriptionId());
        Assertions.assertEquals("wxzvlvqhjkb",
            response.iterator().next().properties().marketplace().offerDetails().publisherId());
        Assertions.assertEquals("gibtnm",
            response.iterator().next().properties().marketplace().offerDetails().offerId());
        Assertions.assertEquals("iebwwaloayqcgwrt",
            response.iterator().next().properties().marketplace().offerDetails().planId());
        Assertions.assertEquals("uzgwyzmhtx",
            response.iterator().next().properties().marketplace().offerDetails().planName());
        Assertions.assertEquals("gmtsavjcbpwxqpsr",
            response.iterator().next().properties().marketplace().offerDetails().termUnit());
        Assertions.assertEquals("ftguv", response.iterator().next().properties().marketplace().offerDetails().termId());
        Assertions.assertEquals("iuhprwmdyvxqta", response.iterator().next().properties().user().firstName());
        Assertions.assertEquals("riwwroy", response.iterator().next().properties().user().lastName());
        Assertions.assertEquals("bexrmcq", response.iterator().next().properties().user().emailAddress());
        Assertions.assertEquals("ycnojvknmefqsg", response.iterator().next().properties().user().upn());
        Assertions.assertEquals("ah", response.iterator().next().properties().user().phoneNumber());
        Assertions.assertEquals("jyzhpvgq", response.iterator().next().properties().user().companyName());
        Assertions.assertEquals("xdjzlmwlxk",
            response.iterator().next().properties().partnerProperties().organizationId());
        Assertions.assertEquals("gfhzovawjvzunlut",
            response.iterator().next().properties().partnerProperties().redirectUrl());
        Assertions.assertEquals("nnprn",
            response.iterator().next().properties().partnerProperties().organizationName());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
    }
}
