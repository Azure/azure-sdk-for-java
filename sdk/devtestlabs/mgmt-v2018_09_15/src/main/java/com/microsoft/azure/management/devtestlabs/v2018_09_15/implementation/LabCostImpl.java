/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.management.devtestlabs.v2018_09_15.LabCost;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import java.util.Map;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.TargetCostProperties;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.LabCostSummaryProperties;
import java.util.List;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.LabCostDetailsProperties;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.LabResourceCostProperties;
import org.joda.time.DateTime;

class LabCostImpl extends CreatableUpdatableImpl<LabCost, LabCostInner, LabCostImpl> implements LabCost, LabCost.Definition, LabCost.Update {
    private final DevTestLabsManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;

    LabCostImpl(String name, DevTestLabsManager manager) {
        super(name, new LabCostInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
    }

    LabCostImpl(LabCostInner inner, DevTestLabsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "costs");
        //
    }

    @Override
    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<LabCost> createResourceAsync() {
        CostsInner client = this.manager().inner().costs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<LabCost> updateResourceAsync() {
        CostsInner client = this.manager().inner().costs();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<LabCostInner> getInnerAsync() {
        CostsInner client = this.manager().inner().costs();
        return client.getAsync(this.resourceGroupName, this.labName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String currencyCode() {
        return this.inner().currencyCode();
    }

    @Override
    public DateTime endDateTime() {
        return this.inner().endDateTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<LabCostDetailsProperties> labCostDetails() {
        return this.inner().labCostDetails();
    }

    @Override
    public LabCostSummaryProperties labCostSummary() {
        return this.inner().labCostSummary();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public List<LabResourceCostProperties> resourceCosts() {
        return this.inner().resourceCosts();
    }

    @Override
    public DateTime startDateTime() {
        return this.inner().startDateTime();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public TargetCostProperties targetCost() {
        return this.inner().targetCost();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueIdentifier() {
        return this.inner().uniqueIdentifier();
    }

    @Override
    public LabCostImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    @Override
    public LabCostImpl withCreatedDate(DateTime createdDate) {
        this.inner().withCreatedDate(createdDate);
        return this;
    }

    @Override
    public LabCostImpl withCurrencyCode(String currencyCode) {
        this.inner().withCurrencyCode(currencyCode);
        return this;
    }

    @Override
    public LabCostImpl withEndDateTime(DateTime endDateTime) {
        this.inner().withEndDateTime(endDateTime);
        return this;
    }

    @Override
    public LabCostImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public LabCostImpl withStartDateTime(DateTime startDateTime) {
        this.inner().withStartDateTime(startDateTime);
        return this;
    }

    @Override
    public LabCostImpl withTags(Map<String, String> tags) {
        this.inner().withTags(tags);
        return this;
    }

    @Override
    public LabCostImpl withTargetCost(TargetCostProperties targetCost) {
        this.inner().withTargetCost(targetCost);
        return this;
    }

}
