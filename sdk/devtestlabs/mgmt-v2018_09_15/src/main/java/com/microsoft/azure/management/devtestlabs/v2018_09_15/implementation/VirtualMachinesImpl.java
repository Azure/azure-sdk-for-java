/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.VirtualMachines;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.RdpConnection;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.ApplicableSchedule;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.DataDiskProperties;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.LabVirtualMachine;

class VirtualMachinesImpl extends WrapperImpl<VirtualMachinesInner> implements VirtualMachines {
    private final DevTestLabsManager manager;

    VirtualMachinesImpl(DevTestLabsManager manager) {
        super(manager.inner().virtualMachines());
        this.manager = manager;
    }

    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public LabVirtualMachineImpl define(String name) {
        return wrapModel(name);
    }

    private LabVirtualMachineImpl wrapModel(LabVirtualMachineInner inner) {
        return  new LabVirtualMachineImpl(inner, manager());
    }

    private LabVirtualMachineImpl wrapModel(String name) {
        return new LabVirtualMachineImpl(name, this.manager());
    }

    @Override
    public Completable addDataDiskAsync(String resourceGroupName, String labName, String name, DataDiskProperties dataDiskProperties) {
        VirtualMachinesInner client = this.inner();
        return client.addDataDiskAsync(resourceGroupName, labName, name, dataDiskProperties).toCompletable();
    }

    @Override
    public Completable applyArtifactsAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.applyArtifactsAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable claimAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.claimAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable detachDataDiskAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.detachDataDiskAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Observable<RdpConnection> getRdpFileContentsAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.getRdpFileContentsAsync(resourceGroupName, labName, name)
        .map(new Func1<RdpConnectionInner, RdpConnection>() {
            @Override
            public RdpConnection call(RdpConnectionInner inner) {
                return new RdpConnectionImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<ApplicableSchedule> listApplicableSchedulesAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.listApplicableSchedulesAsync(resourceGroupName, labName, name)
        .map(new Func1<ApplicableScheduleInner, ApplicableSchedule>() {
            @Override
            public ApplicableSchedule call(ApplicableScheduleInner inner) {
                return new ApplicableScheduleImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable redeployAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.redeployAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable resizeAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.resizeAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable restartAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.restartAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable startAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.startAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable stopAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.stopAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable transferDisksAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.transferDisksAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Completable unClaimAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.unClaimAsync(resourceGroupName, labName, name).toCompletable();
    }

    @Override
    public Observable<LabVirtualMachine> listAsync(final String resourceGroupName, final String labName) {
        VirtualMachinesInner client = this.inner();
        return client.listAsync(resourceGroupName, labName)
        .flatMapIterable(new Func1<Page<LabVirtualMachineInner>, Iterable<LabVirtualMachineInner>>() {
            @Override
            public Iterable<LabVirtualMachineInner> call(Page<LabVirtualMachineInner> page) {
                return page.items();
            }
        })
        .map(new Func1<LabVirtualMachineInner, LabVirtualMachine>() {
            @Override
            public LabVirtualMachine call(LabVirtualMachineInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<LabVirtualMachine> getAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.getAsync(resourceGroupName, labName, name)
        .flatMap(new Func1<LabVirtualMachineInner, Observable<LabVirtualMachine>>() {
            @Override
            public Observable<LabVirtualMachine> call(LabVirtualMachineInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((LabVirtualMachine)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String labName, String name) {
        VirtualMachinesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, labName, name).toCompletable();
    }

}
