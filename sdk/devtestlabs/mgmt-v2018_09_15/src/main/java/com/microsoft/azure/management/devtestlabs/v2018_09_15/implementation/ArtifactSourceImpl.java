/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.devtestlabs.v2018_09_15.implementation;

import com.microsoft.azure.management.devtestlabs.v2018_09_15.ArtifactSource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.ArtifactSourceFragment;
import java.util.Map;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.SourceControlType;
import com.microsoft.azure.management.devtestlabs.v2018_09_15.EnableStatus;
import org.joda.time.DateTime;
import rx.functions.Func1;

class ArtifactSourceImpl extends CreatableUpdatableImpl<ArtifactSource, ArtifactSourceInner, ArtifactSourceImpl> implements ArtifactSource, ArtifactSource.Definition, ArtifactSource.Update {
    private final DevTestLabsManager manager;
    private String resourceGroupName;
    private String labName;
    private String name;
    private ArtifactSourceFragment updateParameter;

    ArtifactSourceImpl(String name, DevTestLabsManager manager) {
        super(name, new ArtifactSourceInner());
        this.manager = manager;
        // Set resource name
        this.name = name;
        //
        this.updateParameter = new ArtifactSourceFragment();
    }

    ArtifactSourceImpl(ArtifactSourceInner inner, DevTestLabsManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.name = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.labName = IdParsingUtils.getValueFromIdByName(inner.id(), "labs");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "artifactsources");
        //
        this.updateParameter = new ArtifactSourceFragment();
    }

    @Override
    public DevTestLabsManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ArtifactSource> createResourceAsync() {
        ArtifactSourcesInner client = this.manager().inner().artifactSources();
        return client.createOrUpdateAsync(this.resourceGroupName, this.labName, this.name, this.inner())
            .map(new Func1<ArtifactSourceInner, ArtifactSourceInner>() {
               @Override
               public ArtifactSourceInner call(ArtifactSourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ArtifactSource> updateResourceAsync() {
        ArtifactSourcesInner client = this.manager().inner().artifactSources();
        return client.updateAsync(this.resourceGroupName, this.labName, this.name, this.updateParameter)
            .map(new Func1<ArtifactSourceInner, ArtifactSourceInner>() {
               @Override
               public ArtifactSourceInner call(ArtifactSourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ArtifactSourceInner> getInnerAsync() {
        ArtifactSourcesInner client = this.manager().inner().artifactSources();
        return client.getAsync(this.resourceGroupName, this.labName, this.name);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new ArtifactSourceFragment();
    }

    @Override
    public String armTemplateFolderPath() {
        return this.inner().armTemplateFolderPath();
    }

    @Override
    public String branchRef() {
        return this.inner().branchRef();
    }

    @Override
    public DateTime createdDate() {
        return this.inner().createdDate();
    }

    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String folderPath() {
        return this.inner().folderPath();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String securityToken() {
        return this.inner().securityToken();
    }

    @Override
    public SourceControlType sourceType() {
        return this.inner().sourceType();
    }

    @Override
    public EnableStatus status() {
        return this.inner().status();
    }

    @Override
    public Map<String, String> tags() {
        return this.inner().getTags();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String uniqueIdentifier() {
        return this.inner().uniqueIdentifier();
    }

    @Override
    public String uri() {
        return this.inner().uri();
    }

    @Override
    public ArtifactSourceImpl withExistingLab(String resourceGroupName, String labName) {
        this.resourceGroupName = resourceGroupName;
        this.labName = labName;
        return this;
    }

    @Override
    public ArtifactSourceImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

    @Override
    public ArtifactSourceImpl withArmTemplateFolderPath(String armTemplateFolderPath) {
        if (isInCreateMode()) {
            this.inner().withArmTemplateFolderPath(armTemplateFolderPath);
        } else {
            this.updateParameter.withArmTemplateFolderPath(armTemplateFolderPath);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withBranchRef(String branchRef) {
        if (isInCreateMode()) {
            this.inner().withBranchRef(branchRef);
        } else {
            this.updateParameter.withBranchRef(branchRef);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withDisplayName(String displayName) {
        if (isInCreateMode()) {
            this.inner().withDisplayName(displayName);
        } else {
            this.updateParameter.withDisplayName(displayName);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withFolderPath(String folderPath) {
        if (isInCreateMode()) {
            this.inner().withFolderPath(folderPath);
        } else {
            this.updateParameter.withFolderPath(folderPath);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withSecurityToken(String securityToken) {
        if (isInCreateMode()) {
            this.inner().withSecurityToken(securityToken);
        } else {
            this.updateParameter.withSecurityToken(securityToken);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withSourceType(SourceControlType sourceType) {
        if (isInCreateMode()) {
            this.inner().withSourceType(sourceType);
        } else {
            this.updateParameter.withSourceType(sourceType);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withStatus(EnableStatus status) {
        if (isInCreateMode()) {
            this.inner().withStatus(status);
        } else {
            this.updateParameter.withStatus(status);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.inner().withTags(tags);
        } else {
            this.updateParameter.withTags(tags);
        }
        return this;
    }

    @Override
    public ArtifactSourceImpl withUri(String uri) {
        if (isInCreateMode()) {
            this.inner().withUri(uri);
        } else {
            this.updateParameter.withUri(uri);
        }
        return this;
    }

}
