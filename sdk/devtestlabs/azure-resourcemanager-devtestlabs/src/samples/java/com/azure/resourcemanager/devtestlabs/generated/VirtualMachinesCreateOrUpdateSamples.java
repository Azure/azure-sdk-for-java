// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.resourcemanager.devtestlabs.models.GalleryImageReference;
import java.util.HashMap;
import java.util.Map;

/** Samples for VirtualMachines CreateOrUpdate. */
public final class VirtualMachinesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/devtestlabs/resource-manager/Microsoft.DevTestLab/stable/2018-09-15/examples/VirtualMachines_CreateOrUpdate.json
     */
    /**
     * Sample code: VirtualMachines_CreateOrUpdate.
     *
     * @param manager Entry point to DevTestLabsManager.
     */
    public static void virtualMachinesCreateOrUpdate(com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager) {
        manager
            .virtualMachines()
            .define("{vmName}")
            .withRegion("{location}")
            .withExistingLab("resourceGroupName", "{labName}")
            .withTags(mapOf("tagName1", "tagValue1"))
            .withSize("Standard_A2_v2")
            .withUsername("{userName}")
            .withPassword("{userPassword}")
            .withLabSubnetName("{virtualNetworkName}Subnet")
            .withLabVirtualNetworkId(
                "/subscriptions/{subscriptionId}/resourcegroups/resourceGroupName/providers/microsoft.devtestlab/labs/{labName}/virtualnetworks/{virtualNetworkName}")
            .withDisallowPublicIpAddress(true)
            .withGalleryImageReference(
                new GalleryImageReference()
                    .withOffer("UbuntuServer")
                    .withPublisher("Canonical")
                    .withSku("16.04-LTS")
                    .withOsType("Linux")
                    .withVersion("Latest"))
            .withAllowClaim(true)
            .withStorageType("Standard")
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
