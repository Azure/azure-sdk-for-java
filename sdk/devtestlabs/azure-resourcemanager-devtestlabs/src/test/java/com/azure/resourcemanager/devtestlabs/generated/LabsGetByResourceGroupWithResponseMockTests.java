// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.EnvironmentPermission;
import com.azure.resourcemanager.devtestlabs.models.Lab;
import com.azure.resourcemanager.devtestlabs.models.PremiumDataDisk;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LabsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"defaultStorageAccount\":\"mkfqlwxldy\",\"defaultPremiumStorageAccount\":\"lsygaol\",\"artifactsStorageAccount\":\"pnnbm\",\"premiumDataDiskStorageAccount\":\"sibjgs\",\"vaultName\":\"xxahmrnadzyqegxy\",\"labStorageType\":\"StandardSSD\",\"mandatoryArtifactsResourceIdsLinux\":[\"bmh\"],\"mandatoryArtifactsResourceIdsWindows\":[\"ijkgqxnhm\",\"keznjaujvaa\",\"nggiycwkdtaa\",\"xw\"],\"createdDate\":\"2021-10-08T13:52:04Z\",\"premiumDataDisks\":\"Enabled\",\"environmentPermission\":\"Contributor\",\"announcement\":{\"title\":\"mbzmqk\",\"markdown\":\"tbnxwbjsid\",\"enabled\":\"Enabled\",\"expirationDate\":\"2020-12-26T13:23:10Z\",\"expired\":false,\"provisioningState\":\"okdgoge\",\"uniqueIdentifier\":\"jymrhbg\"},\"support\":{\"enabled\":\"Enabled\",\"markdown\":\"yewnfnzhhhqos\"},\"vmCreationResourceGroup\":\"fjkutycyarnroo\",\"publicIpId\":\"uabzoghkt\",\"loadBalancerId\":\"yczhco\",\"networkSecurityGroupId\":\"cnhz\",\"extendedProperties\":{\"rl\":\"ttjzcfyjzpt\"},\"provisioningState\":\"apqinf\",\"uniqueIdentifier\":\"pyglqdhmrjzral\"},\"location\":\"xpjb\",\"tags\":{\"xfxjelgcmpzqj\":\"sjoqcjenkyhfqzvs\",\"s\":\"hhqxuwyvcacoyviv\",\"bscm\":\"zusjsz\"},\"id\":\"lzijiufehgmvflnw\",\"name\":\"v\",\"type\":\"kxrerlniylylyfwx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Lab response =
            manager
                .labs()
                .getByResourceGroupWithResponse("lcouqehbhbcdszir", "randoypmb", "t", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("xpjb", response.location());
        Assertions.assertEquals("sjoqcjenkyhfqzvs", response.tags().get("xfxjelgcmpzqj"));
        Assertions.assertEquals(StorageType.STANDARD_SSD, response.labStorageType());
        Assertions.assertEquals("bmh", response.mandatoryArtifactsResourceIdsLinux().get(0));
        Assertions.assertEquals("ijkgqxnhm", response.mandatoryArtifactsResourceIdsWindows().get(0));
        Assertions.assertEquals(PremiumDataDisk.ENABLED, response.premiumDataDisks());
        Assertions.assertEquals(EnvironmentPermission.CONTRIBUTOR, response.environmentPermission());
        Assertions.assertEquals("mbzmqk", response.announcement().title());
        Assertions.assertEquals("tbnxwbjsid", response.announcement().markdown());
        Assertions.assertEquals(EnableStatus.ENABLED, response.announcement().enabled());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-26T13:23:10Z"), response.announcement().expirationDate());
        Assertions.assertEquals(false, response.announcement().expired());
        Assertions.assertEquals(EnableStatus.ENABLED, response.support().enabled());
        Assertions.assertEquals("yewnfnzhhhqos", response.support().markdown());
        Assertions.assertEquals("ttjzcfyjzpt", response.extendedProperties().get("rl"));
    }
}
