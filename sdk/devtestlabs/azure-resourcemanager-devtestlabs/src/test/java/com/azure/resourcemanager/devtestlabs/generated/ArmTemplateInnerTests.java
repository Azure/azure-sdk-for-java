// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.ArmTemplateInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ArmTemplateInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArmTemplateInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"displayName\":\"c\",\"description\":\"ynqwwncwzzhxgk\",\"publisher\":\"mgucna\",\"icon\":\"t\",\"contents\":\"dataellwptfdy\",\"createdDate\":\"2020-12-31T02:22:45Z\",\"parametersValueFilesInfo\":[{\"fileName\":\"ac\",\"parametersValueInfo\":\"datapzfqrhhuaoppp\"}],\"enabled\":false},\"location\":\"qxolzdahzx\",\"tags\":{\"grcfb\":\"bgbkdmoizpost\",\"bpvjymjhx\":\"nrmfqjhhk\",\"n\":\"j\"},\"id\":\"u\",\"name\":\"ivkrtsw\",\"type\":\"xqzvszjfa\"}")
                .toObject(ArmTemplateInner.class);
        Assertions.assertEquals("qxolzdahzx", model.location());
        Assertions.assertEquals("bgbkdmoizpost", model.tags().get("grcfb"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArmTemplateInner model =
            new ArmTemplateInner()
                .withLocation("qxolzdahzx")
                .withTags(mapOf("grcfb", "bgbkdmoizpost", "bpvjymjhx", "nrmfqjhhk", "n", "j"));
        model = BinaryData.fromObject(model).toObject(ArmTemplateInner.class);
        Assertions.assertEquals("qxolzdahzx", model.location());
        Assertions.assertEquals("bgbkdmoizpost", model.tags().get("grcfb"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
