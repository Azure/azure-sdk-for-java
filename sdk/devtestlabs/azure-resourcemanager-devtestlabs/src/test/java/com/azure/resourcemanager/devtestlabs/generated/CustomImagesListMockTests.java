// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.CustomImage;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsState;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CustomImagesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"vm\":{\"sourceVmId\":\"owsbedenrexkxbh\",\"windowsOsInfo\":{\"windowsOsState\":\"SysprepApplied\"},\"linuxOsInfo\":{\"linuxOsState\":\"DeprovisionRequested\"}},\"vhd\":{\"imageName\":\"nhj\",\"sysPrep\":true,\"osType\":\"Windows\"},\"description\":\"nfa\",\"author\":\"vkskmqozzk\",\"creationDate\":\"2021-11-02T23:04:21Z\",\"managedImageId\":\"jrliiz\",\"managedSnapshotId\":\"xlqfh\",\"dataDiskStorageInfo\":[{\"lun\":\"absol\",\"storageType\":\"Standard\"},{\"lun\":\"qlmgnlqxsjxt\",\"storageType\":\"Standard\"},{\"lun\":\"hvuqbo\",\"storageType\":\"StandardSSD\"}],\"customImagePlan\":{\"id\":\"qocarkuzlbc\",\"publisher\":\"dtsnxawqytllhdyz\",\"offer\":\"ckze\"},\"isPlanAuthorized\":false,\"provisioningState\":\"kck\",\"uniqueIdentifier\":\"ymx\"},\"location\":\"aabjkdtfohfao\",\"tags\":{\"y\":\"kiwrsiw\",\"rra\":\"quryk\",\"s\":\"eek\",\"gdda\":\"eh\"},\"id\":\"bcbgydlqidywmhm\",\"name\":\"tyrilkfbnrqqxvz\",\"type\":\"pbnfnqtx\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CustomImage> response =
            manager
                .customImages()
                .list(
                    "ybmrzoepnxwd",
                    "wnjkgvfn",
                    "xaurs",
                    "ftibtyibuyvpirfq",
                    989541715,
                    "n",
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("aabjkdtfohfao", response.iterator().next().location());
        Assertions.assertEquals("kiwrsiw", response.iterator().next().tags().get("y"));
        Assertions.assertEquals("owsbedenrexkxbh", response.iterator().next().vm().sourceVmId());
        Assertions
            .assertEquals(
                WindowsOsState.SYSPREP_APPLIED, response.iterator().next().vm().windowsOsInfo().windowsOsState());
        Assertions
            .assertEquals(
                LinuxOsState.DEPROVISION_REQUESTED, response.iterator().next().vm().linuxOsInfo().linuxOsState());
        Assertions.assertEquals("nhj", response.iterator().next().vhd().imageName());
        Assertions.assertEquals(true, response.iterator().next().vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.WINDOWS, response.iterator().next().vhd().osType());
        Assertions.assertEquals("nfa", response.iterator().next().description());
        Assertions.assertEquals("vkskmqozzk", response.iterator().next().author());
        Assertions.assertEquals("jrliiz", response.iterator().next().managedImageId());
        Assertions.assertEquals("xlqfh", response.iterator().next().managedSnapshotId());
        Assertions.assertEquals("absol", response.iterator().next().dataDiskStorageInfo().get(0).lun());
        Assertions
            .assertEquals(StorageType.STANDARD, response.iterator().next().dataDiskStorageInfo().get(0).storageType());
        Assertions.assertEquals("qocarkuzlbc", response.iterator().next().customImagePlan().id());
        Assertions.assertEquals("dtsnxawqytllhdyz", response.iterator().next().customImagePlan().publisher());
        Assertions.assertEquals("ckze", response.iterator().next().customImagePlan().offer());
        Assertions.assertEquals(false, response.iterator().next().isPlanAuthorized());
    }
}
