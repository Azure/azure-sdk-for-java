// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GlobalSchedulesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"jpmcub\",\"weeklyRecurrence\":{\"weekdays\":[],\"time\":\"oxxkubvp\"},\"dailyRecurrence\":{\"time\":\"pmhbrbq\"},\"hourlyRecurrence\":{\"minute\":1987932429},\"timeZoneId\":\"pbbttefjoknss\",\"notificationSettings\":{\"status\":\"Disabled\",\"timeInMinutes\":218977704,\"webhookUrl\":\"kdfrdbiqmrjgeihf\",\"emailRecipient\":\"ggwfiwz\",\"notificationLocale\":\"mjpb\"},\"createdDate\":\"2021-05-09T22:58:20Z\",\"targetResourceId\":\"mgtvlj\",\"provisioningState\":\"cmyfqipgxhnpo\",\"uniqueIdentifier\":\"qwcabvnui\"},\"location\":\"eeyaswl\",\"tags\":{\"mfj\":\"gm\",\"sizmoae\":\"rxwtoaukhfkvc\"},\"id\":\"sx\",\"name\":\"wuived\",\"type\":\"cgyee\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .globalSchedules()
                .getByResourceGroupWithResponse("lwgniiprglvawu", "z", "ufypiv", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("eeyaswl", response.location());
        Assertions.assertEquals("gm", response.tags().get("mfj"));
        Assertions.assertEquals(EnableStatus.DISABLED, response.status());
        Assertions.assertEquals("jpmcub", response.taskType());
        Assertions.assertEquals("oxxkubvp", response.weeklyRecurrence().time());
        Assertions.assertEquals("pmhbrbq", response.dailyRecurrence().time());
        Assertions.assertEquals(1987932429, response.hourlyRecurrence().minute());
        Assertions.assertEquals("pbbttefjoknss", response.timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, response.notificationSettings().status());
        Assertions.assertEquals(218977704, response.notificationSettings().timeInMinutes());
        Assertions.assertEquals("kdfrdbiqmrjgeihf", response.notificationSettings().webhookUrl());
        Assertions.assertEquals("ggwfiwz", response.notificationSettings().emailRecipient());
        Assertions.assertEquals("mjpb", response.notificationSettings().notificationLocale());
        Assertions.assertEquals("mgtvlj", response.targetResourceId());
    }
}
