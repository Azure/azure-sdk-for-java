// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.PolicyInner;
import com.azure.resourcemanager.devtestlabs.models.PolicyEvaluatorType;
import com.azure.resourcemanager.devtestlabs.models.PolicyFactName;
import com.azure.resourcemanager.devtestlabs.models.PolicyStatus;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PolicyInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"description\":\"xvd\",\"status\":\"Disabled\",\"factName\":\"UserOwnedLabVmCountInSubnet\",\"factData\":\"qrouda\",\"threshold\":\"avehhrvkbunzo\",\"evaluatorType\":\"MaxValuePolicy\",\"createdDate\":\"2021-10-22T01:37:19Z\",\"provisioningState\":\"gkmoyxcdyuibhmfd\",\"uniqueIdentifier\":\"zydvfvf\"},\"location\":\"jnaeois\",\"tags\":{\"w\":\"mgorffukisc\",\"tg\":\"zhwplefaxvxilc\",\"qxtjjfzqlqhyca\":\"hnze\",\"beesmieknlra\":\"odggx\"},\"id\":\"iaa\",\"name\":\"iuagydwqfbylyrfg\",\"type\":\"agt\"}")
                .toObject(PolicyInner.class);
        Assertions.assertEquals("jnaeois", model.location());
        Assertions.assertEquals("mgorffukisc", model.tags().get("w"));
        Assertions.assertEquals("xvd", model.description());
        Assertions.assertEquals(PolicyStatus.DISABLED, model.status());
        Assertions.assertEquals(PolicyFactName.USER_OWNED_LAB_VM_COUNT_IN_SUBNET, model.factName());
        Assertions.assertEquals("qrouda", model.factData());
        Assertions.assertEquals("avehhrvkbunzo", model.threshold());
        Assertions.assertEquals(PolicyEvaluatorType.MAX_VALUE_POLICY, model.evaluatorType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PolicyInner model =
            new PolicyInner()
                .withLocation("jnaeois")
                .withTags(
                    mapOf(
                        "w", "mgorffukisc", "tg", "zhwplefaxvxilc", "qxtjjfzqlqhyca", "hnze", "beesmieknlra", "odggx"))
                .withDescription("xvd")
                .withStatus(PolicyStatus.DISABLED)
                .withFactName(PolicyFactName.USER_OWNED_LAB_VM_COUNT_IN_SUBNET)
                .withFactData("qrouda")
                .withThreshold("avehhrvkbunzo")
                .withEvaluatorType(PolicyEvaluatorType.MAX_VALUE_POLICY);
        model = BinaryData.fromObject(model).toObject(PolicyInner.class);
        Assertions.assertEquals("jnaeois", model.location());
        Assertions.assertEquals("mgorffukisc", model.tags().get("w"));
        Assertions.assertEquals("xvd", model.description());
        Assertions.assertEquals(PolicyStatus.DISABLED, model.status());
        Assertions.assertEquals(PolicyFactName.USER_OWNED_LAB_VM_COUNT_IN_SUBNET, model.factName());
        Assertions.assertEquals("qrouda", model.factData());
        Assertions.assertEquals("avehhrvkbunzo", model.threshold());
        Assertions.assertEquals(PolicyEvaluatorType.MAX_VALUE_POLICY, model.evaluatorType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
