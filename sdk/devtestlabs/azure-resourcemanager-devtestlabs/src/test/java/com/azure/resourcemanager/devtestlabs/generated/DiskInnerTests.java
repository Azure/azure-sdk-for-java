// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.DiskInner;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"diskType\":\"StandardSSD\",\"diskSizeGiB\":186835160,\"leasedByLabVmId\":\"boxdfgsftufq\",\"diskBlobName\":\"rjlnacgcck\",\"diskUri\":\"hxkizvytnrzv\",\"storageAccountId\":\"jraaeranokqguk\",\"createdDate\":\"2021-02-25T03:05:59Z\",\"hostCaching\":\"vbroylaxxu\",\"managedDiskId\":\"disdosfjbjsvgj\",\"provisioningState\":\"hryvy\",\"uniqueIdentifier\":\"t\"},\"location\":\"c\",\"tags\":{\"vjdhttzaefedxih\":\"ccknfnwmbtmvp\"},\"id\":\"hrphkmcrjdqn\",\"name\":\"dfzpbgtgkylkdg\",\"type\":\"rjeuut\"}")
                .toObject(DiskInner.class);
        Assertions.assertEquals("c", model.location());
        Assertions.assertEquals("ccknfnwmbtmvp", model.tags().get("vjdhttzaefedxih"));
        Assertions.assertEquals(StorageType.STANDARD_SSD, model.diskType());
        Assertions.assertEquals(186835160, model.diskSizeGiB());
        Assertions.assertEquals("boxdfgsftufq", model.leasedByLabVmId());
        Assertions.assertEquals("rjlnacgcck", model.diskBlobName());
        Assertions.assertEquals("hxkizvytnrzv", model.diskUri());
        Assertions.assertEquals("jraaeranokqguk", model.storageAccountId());
        Assertions.assertEquals("vbroylaxxu", model.hostCaching());
        Assertions.assertEquals("disdosfjbjsvgj", model.managedDiskId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskInner model =
            new DiskInner()
                .withLocation("c")
                .withTags(mapOf("vjdhttzaefedxih", "ccknfnwmbtmvp"))
                .withDiskType(StorageType.STANDARD_SSD)
                .withDiskSizeGiB(186835160)
                .withLeasedByLabVmId("boxdfgsftufq")
                .withDiskBlobName("rjlnacgcck")
                .withDiskUri("hxkizvytnrzv")
                .withStorageAccountId("jraaeranokqguk")
                .withHostCaching("vbroylaxxu")
                .withManagedDiskId("disdosfjbjsvgj");
        model = BinaryData.fromObject(model).toObject(DiskInner.class);
        Assertions.assertEquals("c", model.location());
        Assertions.assertEquals("ccknfnwmbtmvp", model.tags().get("vjdhttzaefedxih"));
        Assertions.assertEquals(StorageType.STANDARD_SSD, model.diskType());
        Assertions.assertEquals(186835160, model.diskSizeGiB());
        Assertions.assertEquals("boxdfgsftufq", model.leasedByLabVmId());
        Assertions.assertEquals("rjlnacgcck", model.diskBlobName());
        Assertions.assertEquals("hxkizvytnrzv", model.diskUri());
        Assertions.assertEquals("jraaeranokqguk", model.storageAccountId());
        Assertions.assertEquals("vbroylaxxu", model.hostCaching());
        Assertions.assertEquals("disdosfjbjsvgj", model.managedDiskId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
