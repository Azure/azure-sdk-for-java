// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.VirtualNetworkProperties;
import com.azure.resourcemanager.devtestlabs.models.Port;
import com.azure.resourcemanager.devtestlabs.models.Subnet;
import com.azure.resourcemanager.devtestlabs.models.SubnetOverride;
import com.azure.resourcemanager.devtestlabs.models.SubnetSharedPublicIpAddressConfiguration;
import com.azure.resourcemanager.devtestlabs.models.TransportProtocol;
import com.azure.resourcemanager.devtestlabs.models.UsagePermissionType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkProperties model =
            BinaryData
                .fromString(
                    "{\"allowedSubnets\":[{\"resourceId\":\"leeyaswl\",\"labSubnetName\":\"ugmrmf\",\"allowPublicIp\":\"Default\"}],\"description\":\"wtoaukhfk\",\"externalProviderResourceId\":\"isizm\",\"externalSubnets\":[{\"id\":\"sx\",\"name\":\"uivedwcgyeewxeiq\"}],\"subnetOverrides\":[{\"resourceId\":\"g\",\"labSubnetName\":\"guamlj\",\"useInVmCreationPermission\":\"Allow\",\"usePublicIpAddressPermission\":\"Default\",\"sharedPublicIpAddressConfiguration\":{\"allowedPorts\":[{\"transportProtocol\":\"Tcp\",\"backendPort\":517596277},{\"transportProtocol\":\"Tcp\",\"backendPort\":1243615425},{\"transportProtocol\":\"Udp\",\"backendPort\":1688050054},{\"transportProtocol\":\"Udp\",\"backendPort\":1018837274}]},\"virtualNetworkPoolName\":\"ympqanxrjkixtwb\"},{\"resourceId\":\"oypnyg\",\"labSubnetName\":\"hxcylhkgm\",\"useInVmCreationPermission\":\"Deny\",\"usePublicIpAddressPermission\":\"Allow\",\"sharedPublicIpAddressConfiguration\":{\"allowedPorts\":[{\"transportProtocol\":\"Tcp\",\"backendPort\":2068666218},{\"transportProtocol\":\"Udp\",\"backendPort\":615187266},{\"transportProtocol\":\"Tcp\",\"backendPort\":1407961228},{\"transportProtocol\":\"Tcp\",\"backendPort\":1784777493}]},\"virtualNetworkPoolName\":\"zvxnqmhrp\"},{\"resourceId\":\"df\",\"labSubnetName\":\"kois\",\"useInVmCreationPermission\":\"Allow\",\"usePublicIpAddressPermission\":\"Deny\",\"sharedPublicIpAddressConfiguration\":{\"allowedPorts\":[{\"transportProtocol\":\"Udp\",\"backendPort\":2104491949},{\"transportProtocol\":\"Udp\",\"backendPort\":834790015}]},\"virtualNetworkPoolName\":\"kdqzrdzsylo\"}],\"createdDate\":\"2021-10-29T00:26:05Z\",\"provisioningState\":\"rc\",\"uniqueIdentifier\":\"ydmxzj\"}")
                .toObject(VirtualNetworkProperties.class);
        Assertions.assertEquals("leeyaswl", model.allowedSubnets().get(0).resourceId());
        Assertions.assertEquals("ugmrmf", model.allowedSubnets().get(0).labSubnetName());
        Assertions.assertEquals(UsagePermissionType.DEFAULT, model.allowedSubnets().get(0).allowPublicIp());
        Assertions.assertEquals("wtoaukhfk", model.description());
        Assertions.assertEquals("isizm", model.externalProviderResourceId());
        Assertions.assertEquals("g", model.subnetOverrides().get(0).resourceId());
        Assertions.assertEquals("guamlj", model.subnetOverrides().get(0).labSubnetName());
        Assertions.assertEquals(UsagePermissionType.ALLOW, model.subnetOverrides().get(0).useInVmCreationPermission());
        Assertions
            .assertEquals(UsagePermissionType.DEFAULT, model.subnetOverrides().get(0).usePublicIpAddressPermission());
        Assertions
            .assertEquals(
                TransportProtocol.TCP,
                model
                    .subnetOverrides()
                    .get(0)
                    .sharedPublicIpAddressConfiguration()
                    .allowedPorts()
                    .get(0)
                    .transportProtocol());
        Assertions
            .assertEquals(
                517596277,
                model
                    .subnetOverrides()
                    .get(0)
                    .sharedPublicIpAddressConfiguration()
                    .allowedPorts()
                    .get(0)
                    .backendPort());
        Assertions.assertEquals("ympqanxrjkixtwb", model.subnetOverrides().get(0).virtualNetworkPoolName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkProperties model =
            new VirtualNetworkProperties()
                .withAllowedSubnets(
                    Arrays
                        .asList(
                            new Subnet()
                                .withResourceId("leeyaswl")
                                .withLabSubnetName("ugmrmf")
                                .withAllowPublicIp(UsagePermissionType.DEFAULT)))
                .withDescription("wtoaukhfk")
                .withExternalProviderResourceId("isizm")
                .withSubnetOverrides(
                    Arrays
                        .asList(
                            new SubnetOverride()
                                .withResourceId("g")
                                .withLabSubnetName("guamlj")
                                .withUseInVmCreationPermission(UsagePermissionType.ALLOW)
                                .withUsePublicIpAddressPermission(UsagePermissionType.DEFAULT)
                                .withSharedPublicIpAddressConfiguration(
                                    new SubnetSharedPublicIpAddressConfiguration()
                                        .withAllowedPorts(
                                            Arrays
                                                .asList(
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.TCP)
                                                        .withBackendPort(517596277),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.TCP)
                                                        .withBackendPort(1243615425),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.UDP)
                                                        .withBackendPort(1688050054),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.UDP)
                                                        .withBackendPort(1018837274))))
                                .withVirtualNetworkPoolName("ympqanxrjkixtwb"),
                            new SubnetOverride()
                                .withResourceId("oypnyg")
                                .withLabSubnetName("hxcylhkgm")
                                .withUseInVmCreationPermission(UsagePermissionType.DENY)
                                .withUsePublicIpAddressPermission(UsagePermissionType.ALLOW)
                                .withSharedPublicIpAddressConfiguration(
                                    new SubnetSharedPublicIpAddressConfiguration()
                                        .withAllowedPorts(
                                            Arrays
                                                .asList(
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.TCP)
                                                        .withBackendPort(2068666218),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.UDP)
                                                        .withBackendPort(615187266),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.TCP)
                                                        .withBackendPort(1407961228),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.TCP)
                                                        .withBackendPort(1784777493))))
                                .withVirtualNetworkPoolName("zvxnqmhrp"),
                            new SubnetOverride()
                                .withResourceId("df")
                                .withLabSubnetName("kois")
                                .withUseInVmCreationPermission(UsagePermissionType.ALLOW)
                                .withUsePublicIpAddressPermission(UsagePermissionType.DENY)
                                .withSharedPublicIpAddressConfiguration(
                                    new SubnetSharedPublicIpAddressConfiguration()
                                        .withAllowedPorts(
                                            Arrays
                                                .asList(
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.UDP)
                                                        .withBackendPort(2104491949),
                                                    new Port()
                                                        .withTransportProtocol(TransportProtocol.UDP)
                                                        .withBackendPort(834790015))))
                                .withVirtualNetworkPoolName("kdqzrdzsylo")));
        model = BinaryData.fromObject(model).toObject(VirtualNetworkProperties.class);
        Assertions.assertEquals("leeyaswl", model.allowedSubnets().get(0).resourceId());
        Assertions.assertEquals("ugmrmf", model.allowedSubnets().get(0).labSubnetName());
        Assertions.assertEquals(UsagePermissionType.DEFAULT, model.allowedSubnets().get(0).allowPublicIp());
        Assertions.assertEquals("wtoaukhfk", model.description());
        Assertions.assertEquals("isizm", model.externalProviderResourceId());
        Assertions.assertEquals("g", model.subnetOverrides().get(0).resourceId());
        Assertions.assertEquals("guamlj", model.subnetOverrides().get(0).labSubnetName());
        Assertions.assertEquals(UsagePermissionType.ALLOW, model.subnetOverrides().get(0).useInVmCreationPermission());
        Assertions
            .assertEquals(UsagePermissionType.DEFAULT, model.subnetOverrides().get(0).usePublicIpAddressPermission());
        Assertions
            .assertEquals(
                TransportProtocol.TCP,
                model
                    .subnetOverrides()
                    .get(0)
                    .sharedPublicIpAddressConfiguration()
                    .allowedPorts()
                    .get(0)
                    .transportProtocol());
        Assertions
            .assertEquals(
                517596277,
                model
                    .subnetOverrides()
                    .get(0)
                    .sharedPublicIpAddressConfiguration()
                    .allowedPorts()
                    .get(0)
                    .backendPort());
        Assertions.assertEquals("ympqanxrjkixtwb", model.subnetOverrides().get(0).virtualNetworkPoolName());
    }
}
