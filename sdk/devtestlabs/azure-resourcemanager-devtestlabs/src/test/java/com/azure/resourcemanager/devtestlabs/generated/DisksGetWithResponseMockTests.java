// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.Disk;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DisksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"diskType\":\"StandardSSD\",\"diskSizeGiB\":157710243,\"leasedByLabVmId\":\"dnpxpkcdpr\",\"diskBlobName\":\"xelyicghflr\",\"diskUri\":\"ssjyghsfx\",\"storageAccountId\":\"bh\",\"createdDate\":\"2021-06-24T15:14:48Z\",\"hostCaching\":\"mqfmefgvqcpd\",\"managedDiskId\":\"gquxweysland\",\"provisioningState\":\"cdjhunhg\",\"uniqueIdentifier\":\"gawnrrnquo\"},\"location\":\"sotirei\",\"tags\":{\"ilbvzmmxcjzl\":\"obfsxstc\",\"abwmvogljsv\":\"uzexokjxebjvbzin\",\"ehaqidoyzltgio\":\"pgidnw\",\"sergdtpe\":\"qoqpepiaeap\"},\"id\":\"nacyheqwb\",\"name\":\"qq\",\"type\":\"cjubkhjozfymcwm\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Disk response =
            manager
                .disks()
                .getWithResponse(
                    "tzamicbig", "cdgzseznux", "euairaabmdlqjb", "dp", "ixlhupm", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("sotirei", response.location());
        Assertions.assertEquals("obfsxstc", response.tags().get("ilbvzmmxcjzl"));
        Assertions.assertEquals(StorageType.STANDARD_SSD, response.diskType());
        Assertions.assertEquals(157710243, response.diskSizeGiB());
        Assertions.assertEquals("dnpxpkcdpr", response.leasedByLabVmId());
        Assertions.assertEquals("xelyicghflr", response.diskBlobName());
        Assertions.assertEquals("ssjyghsfx", response.diskUri());
        Assertions.assertEquals("bh", response.storageAccountId());
        Assertions.assertEquals("mqfmefgvqcpd", response.hostCaching());
        Assertions.assertEquals("gquxweysland", response.managedDiskId());
    }
}
