// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.fluent.models.ScheduleInner;
import com.azure.resourcemanager.devtestlabs.models.DayDetails;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.HourDetails;
import com.azure.resourcemanager.devtestlabs.models.NotificationSettings;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import com.azure.resourcemanager.devtestlabs.models.WeekDetails;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServiceFabricSchedulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"status\":\"Enabled\",\"taskType\":\"x\",\"weeklyRecurrence\":{\"weekdays\":[\"zvoikvntwczf\",\"wushlcxpbl\"],\"time\":\"hhezpfkissaidq\"},\"dailyRecurrence\":{\"time\":\"aoq\"},\"hourlyRecurrence\":{\"minute\":1755690497},\"timeZoneId\":\"otxjqfiafcnlrtbf\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":1825571960,\"webhookUrl\":\"ijolbuauktwieope\",\"emailRecipient\":\"lxqdwr\",\"notificationLocale\":\"yil\"},\"createdDate\":\"2021-08-05T08:51:23Z\",\"targetResourceId\":\"kgxyxyauxre\",\"provisioningState\":\"obmc\",\"uniqueIdentifier\":\"tmwytkujsqycm\"},\"location\":\"oxfab\",\"tags\":{\"iwrycgnwplrrb\":\"pwbmwhria\"},\"id\":\"hctsbbibti\",\"name\":\"uhqvums\",\"type\":\"bfs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .serviceFabricSchedules()
                .createOrUpdateWithResponse(
                    "bjop",
                    "ouhbq",
                    "zkqxsalu",
                    "yigfcvcew",
                    "wqhdgsjsa",
                    new ScheduleInner()
                        .withLocation("v")
                        .withTags(mapOf("cmyc", "gzphetxd"))
                        .withStatus(EnableStatus.DISABLED)
                        .withTaskType("c")
                        .withWeeklyRecurrence(
                            new WeekDetails()
                                .withWeekdays(Arrays.asList("fsq", "hyqmrejparnpv", "rsz", "bwtdr"))
                                .withTime("gz"))
                        .withDailyRecurrence(new DayDetails().withTime("xzlh"))
                        .withHourlyRecurrence(new HourDetails().withMinute(1211463960))
                        .withTimeZoneId("cfculzj")
                        .withNotificationSettings(
                            new NotificationSettings()
                                .withStatus(EnableStatus.ENABLED)
                                .withTimeInMinutes(1821326298)
                                .withWebhookUrl("vyldqpzfzxsoxin")
                                .withEmailRecipient("jlzkdrocqsxy")
                                .withNotificationLocale("qtcmiwdwisv"))
                        .withTargetResourceId("lajamca"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("oxfab", response.location());
        Assertions.assertEquals("pwbmwhria", response.tags().get("iwrycgnwplrrb"));
        Assertions.assertEquals(EnableStatus.ENABLED, response.status());
        Assertions.assertEquals("x", response.taskType());
        Assertions.assertEquals("zvoikvntwczf", response.weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("hhezpfkissaidq", response.weeklyRecurrence().time());
        Assertions.assertEquals("aoq", response.dailyRecurrence().time());
        Assertions.assertEquals(1755690497, response.hourlyRecurrence().minute());
        Assertions.assertEquals("otxjqfiafcnlrtbf", response.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, response.notificationSettings().status());
        Assertions.assertEquals(1825571960, response.notificationSettings().timeInMinutes());
        Assertions.assertEquals("ijolbuauktwieope", response.notificationSettings().webhookUrl());
        Assertions.assertEquals("lxqdwr", response.notificationSettings().emailRecipient());
        Assertions.assertEquals("yil", response.notificationSettings().notificationLocale());
        Assertions.assertEquals("kgxyxyauxre", response.targetResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
