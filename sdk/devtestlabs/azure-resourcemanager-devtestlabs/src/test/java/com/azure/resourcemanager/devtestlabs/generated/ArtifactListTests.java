// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.ArtifactInner;
import com.azure.resourcemanager.devtestlabs.models.ArtifactList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ArtifactListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArtifactList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"title\":\"wj\",\"description\":\"gdrjervnaenqpe\",\"publisher\":\"ndoygmifthnzdnd\",\"filePath\":\"gnayqigynduh\",\"icon\":\"hqlkthumaqo\",\"targetOsType\":\"gycdu\",\"parameters\":\"datar\",\"createdDate\":\"2021-07-05T23:49:12Z\"},\"location\":\"cym\",\"tags\":{\"ssl\":\"l\",\"d\":\"lfmmdnbbglzpswi\",\"bzmnvdfznud\":\"cwyhzdxssa\"},\"id\":\"od\",\"name\":\"xzb\",\"type\":\"cblylpstdbhhxsr\"}],\"nextLink\":\"zucerscdntnev\"}")
                .toObject(ArtifactList.class);
        Assertions.assertEquals("cym", model.value().get(0).location());
        Assertions.assertEquals("l", model.value().get(0).tags().get("ssl"));
        Assertions.assertEquals("zucerscdntnev", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArtifactList model =
            new ArtifactList()
                .withValue(
                    Arrays
                        .asList(
                            new ArtifactInner()
                                .withLocation("cym")
                                .withTags(mapOf("ssl", "l", "d", "lfmmdnbbglzpswi", "bzmnvdfznud", "cwyhzdxssa"))))
                .withNextLink("zucerscdntnev");
        model = BinaryData.fromObject(model).toObject(ArtifactList.class);
        Assertions.assertEquals("cym", model.value().get(0).location());
        Assertions.assertEquals("l", model.value().get(0).tags().get("ssl"));
        Assertions.assertEquals("zucerscdntnev", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
