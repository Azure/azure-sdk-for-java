// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.GalleryImage;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GalleryImagesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"author\":\"nudn\",\"createdDate\":\"2021-05-20T20:57:54Z\",\"description\":\"hjxwxq\",\"imageReference\":{\"offer\":\"ipmpvksmitnsq\",\"publisher\":\"l\",\"sku\":\"lkrdpqgfhy\",\"osType\":\"rakkld\",\"version\":\"c\"},\"icon\":\"cmfcnrjajq\",\"enabled\":true,\"planId\":\"jti\",\"isPlanAuthorized\":true},\"location\":\"zqgxx\",\"tags\":{\"prnzc\":\"bmtlpqagyno\",\"ryqxzxa\":\"lin\",\"mqimiymqru\":\"zi\",\"asvvoqsbpkfl\":\"guhfupe\"},\"id\":\"nfkgxsyaowuzowpu\",\"name\":\"hdkcprgu\",\"type\":\"xrztiochlu\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<GalleryImage> response =
            manager
                .galleryImages()
                .list(
                    "xob",
                    "mfkwiyjvzuk",
                    "srnawnvzmln",
                    "oywsxvjabjqqaxu",
                    695117693,
                    "y",
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zqgxx", response.iterator().next().location());
        Assertions.assertEquals("bmtlpqagyno", response.iterator().next().tags().get("prnzc"));
        Assertions.assertEquals("nudn", response.iterator().next().author());
        Assertions.assertEquals("hjxwxq", response.iterator().next().description());
        Assertions.assertEquals("ipmpvksmitnsq", response.iterator().next().imageReference().offer());
        Assertions.assertEquals("l", response.iterator().next().imageReference().publisher());
        Assertions.assertEquals("lkrdpqgfhy", response.iterator().next().imageReference().sku());
        Assertions.assertEquals("rakkld", response.iterator().next().imageReference().osType());
        Assertions.assertEquals("c", response.iterator().next().imageReference().version());
        Assertions.assertEquals("cmfcnrjajq", response.iterator().next().icon());
        Assertions.assertEquals(true, response.iterator().next().enabled());
        Assertions.assertEquals("jti", response.iterator().next().planId());
        Assertions.assertEquals(true, response.iterator().next().isPlanAuthorized());
    }
}
