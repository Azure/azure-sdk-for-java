// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.models.CostThresholdProperties;
import com.azure.resourcemanager.devtestlabs.models.CostThresholdStatus;
import com.azure.resourcemanager.devtestlabs.models.PercentageCostThresholdProperties;
import org.junit.jupiter.api.Assertions;

public final class CostThresholdPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CostThresholdProperties model =
            BinaryData
                .fromString(
                    "{\"thresholdId\":\"xw\",\"percentageThreshold\":{\"thresholdValue\":31.287428465157674},\"displayOnChart\":\"Disabled\",\"sendNotificationWhenExceeded\":\"Enabled\",\"notificationSent\":\"yfkzik\"}")
                .toObject(CostThresholdProperties.class);
        Assertions.assertEquals("xw", model.thresholdId());
        Assertions.assertEquals(31.287428465157674D, model.percentageThreshold().thresholdValue());
        Assertions.assertEquals(CostThresholdStatus.DISABLED, model.displayOnChart());
        Assertions.assertEquals(CostThresholdStatus.ENABLED, model.sendNotificationWhenExceeded());
        Assertions.assertEquals("yfkzik", model.notificationSent());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CostThresholdProperties model =
            new CostThresholdProperties()
                .withThresholdId("xw")
                .withPercentageThreshold(
                    new PercentageCostThresholdProperties().withThresholdValue(31.287428465157674D))
                .withDisplayOnChart(CostThresholdStatus.DISABLED)
                .withSendNotificationWhenExceeded(CostThresholdStatus.ENABLED)
                .withNotificationSent("yfkzik");
        model = BinaryData.fromObject(model).toObject(CostThresholdProperties.class);
        Assertions.assertEquals("xw", model.thresholdId());
        Assertions.assertEquals(31.287428465157674D, model.percentageThreshold().thresholdValue());
        Assertions.assertEquals(CostThresholdStatus.DISABLED, model.displayOnChart());
        Assertions.assertEquals(CostThresholdStatus.ENABLED, model.sendNotificationWhenExceeded());
        Assertions.assertEquals("yfkzik", model.notificationSent());
    }
}
