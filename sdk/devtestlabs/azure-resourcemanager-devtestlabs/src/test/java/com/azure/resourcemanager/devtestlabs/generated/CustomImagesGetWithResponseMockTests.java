// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.CustomImage;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsState;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CustomImagesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"vm\":{\"sourceVmId\":\"ywhsbrcarycs\",\"windowsOsInfo\":{\"windowsOsState\":\"SysprepApplied\"},\"linuxOsInfo\":{\"linuxOsState\":\"DeprovisionApplied\"}},\"vhd\":{\"imageName\":\"juve\",\"sysPrep\":true,\"osType\":\"Linux\"},\"description\":\"mk\",\"author\":\"bhmpfulubefgybp\",\"creationDate\":\"2021-02-17T23:35:47Z\",\"managedImageId\":\"ununm\",\"managedSnapshotId\":\"krvfyifkdschl\",\"dataDiskStorageInfo\":[{\"lun\":\"ctnkjjwgcwnph\",\"storageType\":\"Standard\"}],\"customImagePlan\":{\"id\":\"rtogmhmj\",\"publisher\":\"scdfpdqw\",\"offer\":\"gevgwmse\"},\"isPlanAuthorized\":true,\"provisioningState\":\"ifvqnr\",\"uniqueIdentifier\":\"mbpjptnvwjh\"},\"location\":\"sidqpxlbtpakft\",\"tags\":{\"ym\":\"twmykyut\"},\"id\":\"wmfjhp\",\"name\":\"cvjqdv\",\"type\":\"wkqp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomImage response =
            manager
                .customImages()
                .getWithResponse("to", "alswbnfd", "epl", "wqjnsfzygleexa", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("sidqpxlbtpakft", response.location());
        Assertions.assertEquals("twmykyut", response.tags().get("ym"));
        Assertions.assertEquals("ywhsbrcarycs", response.vm().sourceVmId());
        Assertions.assertEquals(WindowsOsState.SYSPREP_APPLIED, response.vm().windowsOsInfo().windowsOsState());
        Assertions.assertEquals(LinuxOsState.DEPROVISION_APPLIED, response.vm().linuxOsInfo().linuxOsState());
        Assertions.assertEquals("juve", response.vhd().imageName());
        Assertions.assertEquals(true, response.vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.LINUX, response.vhd().osType());
        Assertions.assertEquals("mk", response.description());
        Assertions.assertEquals("bhmpfulubefgybp", response.author());
        Assertions.assertEquals("ununm", response.managedImageId());
        Assertions.assertEquals("krvfyifkdschl", response.managedSnapshotId());
        Assertions.assertEquals("ctnkjjwgcwnph", response.dataDiskStorageInfo().get(0).lun());
        Assertions.assertEquals(StorageType.STANDARD, response.dataDiskStorageInfo().get(0).storageType());
        Assertions.assertEquals("rtogmhmj", response.customImagePlan().id());
        Assertions.assertEquals("scdfpdqw", response.customImagePlan().publisher());
        Assertions.assertEquals("gevgwmse", response.customImagePlan().offer());
        Assertions.assertEquals(true, response.isPlanAuthorized());
    }
}
