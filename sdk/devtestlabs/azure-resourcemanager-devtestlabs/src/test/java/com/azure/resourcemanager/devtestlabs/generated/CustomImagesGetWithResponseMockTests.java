// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.CustomImage;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CustomImagesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"vm\":{\"sourceVmId\":\"lujyxkyxl\"},\"vhd\":{\"imageName\":\"kzzltafhbzf\",\"sysPrep\":true,\"osType\":\"None\"},\"description\":\"bjlzqsczpgvdwn\",\"author\":\"fdqwowftpt\",\"creationDate\":\"2021-07-29T16:41:44Z\",\"managedImageId\":\"tkschgcgqyhl\",\"managedSnapshotId\":\"eyqrhv\",\"dataDiskStorageInfo\":[],\"customImagePlan\":{\"id\":\"tj\",\"publisher\":\"kwiswskukjtas\",\"offer\":\"wispkxk\"},\"isPlanAuthorized\":true,\"provisioningState\":\"kndlqvtwknvg\",\"uniqueIdentifier\":\"bugtywatmqa\"},\"location\":\"kueatgroeshoy\",\"tags\":{\"ehqpuvjmvqmt\":\"byfqxkfaoy\",\"ejnndljdju\":\"wckygr\"},\"id\":\"kb\",\"name\":\"req\",\"type\":\"n\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomImage response =
            manager
                .customImages()
                .getWithResponse("dbrxmrgc", "bapxkiyfjjkb", "jbuscg", "uusioycblev", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("kueatgroeshoy", response.location());
        Assertions.assertEquals("byfqxkfaoy", response.tags().get("ehqpuvjmvqmt"));
        Assertions.assertEquals("lujyxkyxl", response.vm().sourceVmId());
        Assertions.assertEquals("kzzltafhbzf", response.vhd().imageName());
        Assertions.assertEquals(true, response.vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.NONE, response.vhd().osType());
        Assertions.assertEquals("bjlzqsczpgvdwn", response.description());
        Assertions.assertEquals("fdqwowftpt", response.author());
        Assertions.assertEquals("tkschgcgqyhl", response.managedImageId());
        Assertions.assertEquals("eyqrhv", response.managedSnapshotId());
        Assertions.assertEquals("tj", response.customImagePlan().id());
        Assertions.assertEquals("kwiswskukjtas", response.customImagePlan().publisher());
        Assertions.assertEquals("wispkxk", response.customImagePlan().offer());
        Assertions.assertEquals(true, response.isPlanAuthorized());
    }
}
