// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.Policy;
import com.azure.resourcemanager.devtestlabs.models.PolicyEvaluatorType;
import com.azure.resourcemanager.devtestlabs.models.PolicyFactName;
import com.azure.resourcemanager.devtestlabs.models.PolicyStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PoliciesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"icxdwyjfo\",\"status\":\"Enabled\",\"factName\":\"LabVmSize\",\"factData\":\"c\",\"threshold\":\"sgbipcukdveksbuh\",\"evaluatorType\":\"MaxValuePolicy\",\"createdDate\":\"2021-10-16T22:01:22Z\",\"provisioningState\":\"lscrdpibfdyjduss\",\"uniqueIdentifier\":\"szekbh\"},\"location\":\"lkaaggkr\",\"tags\":{\"mreoagsqtaad\":\"frnuybffljfi\",\"wudohzilfm\":\"srexxfavs\",\"kpsimsfeypofqp\":\"l\",\"qgsdr\":\"bh\"},\"id\":\"mttjxophgerh\",\"name\":\"mvgohtwz\",\"type\":\"qilrixysfn\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Policy response =
            manager
                .policies()
                .getWithResponse(
                    "btmkekxpkzwaq",
                    "ofqovchiqbplv",
                    "idu",
                    "ztekxbyjgmsfep",
                    "yihpqadagrh",
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("lkaaggkr", response.location());
        Assertions.assertEquals("frnuybffljfi", response.tags().get("mreoagsqtaad"));
        Assertions.assertEquals("icxdwyjfo", response.description());
        Assertions.assertEquals(PolicyStatus.ENABLED, response.status());
        Assertions.assertEquals(PolicyFactName.LAB_VM_SIZE, response.factName());
        Assertions.assertEquals("c", response.factData());
        Assertions.assertEquals("sgbipcukdveksbuh", response.threshold());
        Assertions.assertEquals(PolicyEvaluatorType.MAX_VALUE_POLICY, response.evaluatorType());
    }
}
