// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.ScheduleInner;
import com.azure.resourcemanager.devtestlabs.models.DayDetails;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.HourDetails;
import com.azure.resourcemanager.devtestlabs.models.NotificationSettings;
import com.azure.resourcemanager.devtestlabs.models.WeekDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"fkts\",\"weeklyRecurrence\":{\"weekdays\":[\"cocmnyyaztt\"],\"time\":\"wwrq\"},\"dailyRecurrence\":{\"time\":\"dckzywbiexz\"},\"hourlyRecurrence\":{\"minute\":315634017},\"timeZoneId\":\"axibxujw\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":1182122396,\"webhookUrl\":\"uzyoxaep\",\"emailRecipient\":\"zjancuxr\",\"notificationLocale\":\"wbavxbniwdj\"},\"createdDate\":\"2021-04-13T19:54:16Z\",\"targetResourceId\":\"s\",\"provisioningState\":\"pgn\",\"uniqueIdentifier\":\"txhp\"},\"location\":\"xbzpfzab\",\"tags\":{\"lwzbhvgyugu\":\"uhxwtctyqiklbbov\"},\"id\":\"svmkfssxquk\",\"name\":\"fpl\",\"type\":\"mg\"}")
                .toObject(ScheduleInner.class);
        Assertions.assertEquals("xbzpfzab", model.location());
        Assertions.assertEquals("uhxwtctyqiklbbov", model.tags().get("lwzbhvgyugu"));
        Assertions.assertEquals(EnableStatus.DISABLED, model.status());
        Assertions.assertEquals("fkts", model.taskType());
        Assertions.assertEquals("cocmnyyaztt", model.weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("wwrq", model.weeklyRecurrence().time());
        Assertions.assertEquals("dckzywbiexz", model.dailyRecurrence().time());
        Assertions.assertEquals(315634017, model.hourlyRecurrence().minute());
        Assertions.assertEquals("axibxujw", model.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.notificationSettings().status());
        Assertions.assertEquals(1182122396, model.notificationSettings().timeInMinutes());
        Assertions.assertEquals("uzyoxaep", model.notificationSettings().webhookUrl());
        Assertions.assertEquals("zjancuxr", model.notificationSettings().emailRecipient());
        Assertions.assertEquals("wbavxbniwdj", model.notificationSettings().notificationLocale());
        Assertions.assertEquals("s", model.targetResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleInner model =
            new ScheduleInner()
                .withLocation("xbzpfzab")
                .withTags(mapOf("lwzbhvgyugu", "uhxwtctyqiklbbov"))
                .withStatus(EnableStatus.DISABLED)
                .withTaskType("fkts")
                .withWeeklyRecurrence(new WeekDetails().withWeekdays(Arrays.asList("cocmnyyaztt")).withTime("wwrq"))
                .withDailyRecurrence(new DayDetails().withTime("dckzywbiexz"))
                .withHourlyRecurrence(new HourDetails().withMinute(315634017))
                .withTimeZoneId("axibxujw")
                .withNotificationSettings(
                    new NotificationSettings()
                        .withStatus(EnableStatus.ENABLED)
                        .withTimeInMinutes(1182122396)
                        .withWebhookUrl("uzyoxaep")
                        .withEmailRecipient("zjancuxr")
                        .withNotificationLocale("wbavxbniwdj"))
                .withTargetResourceId("s");
        model = BinaryData.fromObject(model).toObject(ScheduleInner.class);
        Assertions.assertEquals("xbzpfzab", model.location());
        Assertions.assertEquals("uhxwtctyqiklbbov", model.tags().get("lwzbhvgyugu"));
        Assertions.assertEquals(EnableStatus.DISABLED, model.status());
        Assertions.assertEquals("fkts", model.taskType());
        Assertions.assertEquals("cocmnyyaztt", model.weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("wwrq", model.weeklyRecurrence().time());
        Assertions.assertEquals("dckzywbiexz", model.dailyRecurrence().time());
        Assertions.assertEquals(315634017, model.hourlyRecurrence().minute());
        Assertions.assertEquals("axibxujw", model.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.notificationSettings().status());
        Assertions.assertEquals(1182122396, model.notificationSettings().timeInMinutes());
        Assertions.assertEquals("uzyoxaep", model.notificationSettings().webhookUrl());
        Assertions.assertEquals("zjancuxr", model.notificationSettings().emailRecipient());
        Assertions.assertEquals("wbavxbniwdj", model.notificationSettings().notificationLocale());
        Assertions.assertEquals("s", model.targetResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
