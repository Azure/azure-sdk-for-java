// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.fluent.models.ScheduleInner;
import com.azure.resourcemanager.devtestlabs.models.DayDetails;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.HourDetails;
import com.azure.resourcemanager.devtestlabs.models.NotificationSettings;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import com.azure.resourcemanager.devtestlabs.models.WeekDetails;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SchedulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"status\":\"Enabled\",\"taskType\":\"uifr\",\"weeklyRecurrence\":{\"weekdays\":[],\"time\":\"apezkiswqjmdghs\"},\"dailyRecurrence\":{\"time\":\"ry\"},\"hourlyRecurrence\":{\"minute\":1070154321},\"timeZoneId\":\"tbjczjnciui\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":2089790411,\"webhookUrl\":\"wvppi\",\"emailRecipient\":\"qzlgcndhzxrrfcfs\",\"notificationLocale\":\"khgsnxuwwkpphefs\"},\"createdDate\":\"2021-05-20T14:04:27Z\",\"targetResourceId\":\"bzxomeik\",\"provisioningState\":\"lwzacn\",\"uniqueIdentifier\":\"pfsuqtaaz\"},\"location\":\"qbxyxoyfpuqqi\",\"tags\":{\"qdcadwvps\":\"xlhdj\",\"ybmrzoepnxwd\":\"zjiihjr\",\"xaurs\":\"wnjkgvfn\",\"pnqn\":\"ftibtyibuyvpirfq\"},\"id\":\"owsbedenrexkxbh\",\"name\":\"vucnulgmnh\",\"type\":\"evdyz\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .schedules()
                .createOrUpdateWithResponse(
                    "mywzashxgonoy",
                    "fq",
                    "puby",
                    new ScheduleInner()
                        .withLocation("n")
                        .withTags(mapOf("iripfohyk", "ui"))
                        .withStatus(EnableStatus.ENABLED)
                        .withTaskType("k")
                        .withWeeklyRecurrence(new WeekDetails().withWeekdays(Arrays.asList()).withTime("bgvopemt"))
                        .withDailyRecurrence(new DayDetails().withTime("ujlyegq"))
                        .withHourlyRecurrence(new HourDetails().withMinute(965244387))
                        .withTimeZoneId("flqqbtnyjpylxd")
                        .withNotificationSettings(
                            new NotificationSettings()
                                .withStatus(EnableStatus.DISABLED)
                                .withTimeInMinutes(2132700338)
                                .withWebhookUrl("msxbaevwjcnkott")
                                .withEmailRecipient("uhvajmailfemjjza")
                                .withNotificationLocale("wjiqullqxb"))
                        .withTargetResourceId("sc"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("qbxyxoyfpuqqi", response.location());
        Assertions.assertEquals("xlhdj", response.tags().get("qdcadwvps"));
        Assertions.assertEquals(EnableStatus.ENABLED, response.status());
        Assertions.assertEquals("uifr", response.taskType());
        Assertions.assertEquals("apezkiswqjmdghs", response.weeklyRecurrence().time());
        Assertions.assertEquals("ry", response.dailyRecurrence().time());
        Assertions.assertEquals(1070154321, response.hourlyRecurrence().minute());
        Assertions.assertEquals("tbjczjnciui", response.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, response.notificationSettings().status());
        Assertions.assertEquals(2089790411, response.notificationSettings().timeInMinutes());
        Assertions.assertEquals("wvppi", response.notificationSettings().webhookUrl());
        Assertions.assertEquals("qzlgcndhzxrrfcfs", response.notificationSettings().emailRecipient());
        Assertions.assertEquals("khgsnxuwwkpphefs", response.notificationSettings().notificationLocale());
        Assertions.assertEquals("bzxomeik", response.targetResourceId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
