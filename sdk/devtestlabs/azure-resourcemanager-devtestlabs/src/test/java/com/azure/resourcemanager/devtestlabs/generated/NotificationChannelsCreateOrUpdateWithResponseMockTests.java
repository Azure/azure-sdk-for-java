// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.Event;
import com.azure.resourcemanager.devtestlabs.models.NotificationChannel;
import com.azure.resourcemanager.devtestlabs.models.NotificationChannelEventType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NotificationChannelsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"webHookUrl\":\"nqjilaywk\",\"emailRecipient\":\"wm\",\"notificationLocale\":\"yrilmhxdqaolf\",\"description\":\"nkkbjpjvlywltmfw\",\"events\":[{\"eventName\":\"AutoShutdown\"},{\"eventName\":\"Cost\"},{\"eventName\":\"AutoShutdown\"},{\"eventName\":\"AutoShutdown\"}],\"createdDate\":\"2020-12-28T05:44:09Z\",\"provisioningState\":\"ocrdzgczeunt\",\"uniqueIdentifier\":\"dnc\"},\"location\":\"q\",\"tags\":{\"gyrihlgm\":\"ekoifuvnyttzgi\",\"lkndrndpgfjodh\":\"behlqtxnr\"},\"id\":\"aqotwfhipxwgsabv\",\"name\":\"ipowza\",\"type\":\"czuumljcir\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevTestLabsManager manager = DevTestLabsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NotificationChannel response = manager.notificationChannels()
            .define("eamc")
            .withRegion("hbgxvel")
            .withExistingLab("etfgcwvrrmdqntyc", "awthvmaxgnu")
            .withTags(mapOf("mnitmujd", "lnx", "lyymffhmjpddny", "vm", "mzjqrbr", "fzuvrzmz"))
            .withWebhookUrl("udf")
            .withEmailRecipient("cehokw")
            .withNotificationLocale("qtwloes")
            .withDescription("ggvrbnyrukoilaci")
            .withEvents(Arrays.asList(new Event().withEventName(NotificationChannelEventType.AUTO_SHUTDOWN),
                new Event().withEventName(NotificationChannelEventType.COST)))
            .create();

        Assertions.assertEquals("q", response.location());
        Assertions.assertEquals("ekoifuvnyttzgi", response.tags().get("gyrihlgm"));
        Assertions.assertEquals("nqjilaywk", response.webhookUrl());
        Assertions.assertEquals("wm", response.emailRecipient());
        Assertions.assertEquals("yrilmhxdqaolf", response.notificationLocale());
        Assertions.assertEquals("nkkbjpjvlywltmfw", response.description());
        Assertions.assertEquals(NotificationChannelEventType.AUTO_SHUTDOWN, response.events().get(0).eventName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
