// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.Policy;
import com.azure.resourcemanager.devtestlabs.models.PolicyEvaluatorType;
import com.azure.resourcemanager.devtestlabs.models.PolicyFactName;
import com.azure.resourcemanager.devtestlabs.models.PolicyStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"description\":\"omevtfycn\",\"status\":\"Disabled\",\"factName\":\"UserOwnedLabVmCount\",\"factData\":\"odk\",\"threshold\":\"ji\",\"evaluatorType\":\"AllowedValuesPolicy\",\"createdDate\":\"2021-01-07T11:21:40Z\",\"provisioningState\":\"k\",\"uniqueIdentifier\":\"bcufqbvntn\"},\"location\":\"gmqsorhcekxg\",\"tags\":{\"cpwzv\":\"km\",\"qba\":\"doksqdtiwlwxlbon\",\"xbyja\":\"qicqchygt\"},\"id\":\"epubdp\",\"name\":\"xyqvg\",\"type\":\"i\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Policy response =
            manager
                .policies()
                .define("lbnwtpcpahp")
                .withRegion("rbhtmeplvukaobr")
                .withExistingPolicyset("utrpbr", "uyu", "atvlmbjwcolbm")
                .withTags(mapOf("emuowakyw", "gsnbagnchjh"))
                .withDescription("rvxhmtfhocnxzcm")
                .withStatus(PolicyStatus.ENABLED)
                .withFactName(PolicyFactName.ENVIRONMENT_TEMPLATE)
                .withFactData("oqrxtdisnjevhdlm")
                .withThreshold("idwhepfw")
                .withEvaluatorType(PolicyEvaluatorType.MAX_VALUE_POLICY)
                .create();

        Assertions.assertEquals("gmqsorhcekxg", response.location());
        Assertions.assertEquals("km", response.tags().get("cpwzv"));
        Assertions.assertEquals("omevtfycn", response.description());
        Assertions.assertEquals(PolicyStatus.DISABLED, response.status());
        Assertions.assertEquals(PolicyFactName.USER_OWNED_LAB_VM_COUNT, response.factName());
        Assertions.assertEquals("odk", response.factData());
        Assertions.assertEquals("ji", response.threshold());
        Assertions.assertEquals(PolicyEvaluatorType.ALLOWED_VALUES_POLICY, response.evaluatorType());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
