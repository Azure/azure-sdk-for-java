// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.Policy;
import com.azure.resourcemanager.devtestlabs.models.PolicyEvaluatorType;
import com.azure.resourcemanager.devtestlabs.models.PolicyFactName;
import com.azure.resourcemanager.devtestlabs.models.PolicyStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"rswgkpjhboyikeb\",\"status\":\"Disabled\",\"factName\":\"LabVmSize\",\"factData\":\"gwl\",\"threshold\":\"hueoijyzcqyp\",\"evaluatorType\":\"AllowedValuesPolicy\",\"createdDate\":\"2021-10-11T17:07:04Z\",\"provisioningState\":\"s\",\"uniqueIdentifier\":\"ej\"},\"location\":\"vdwtfxptpqayamk\",\"tags\":{\"snxoc\":\"gybm\",\"oy\":\"ullojk\"},\"id\":\"g\",\"name\":\"wdjuxdbdljzgdy\",\"type\":\"cvuq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevTestLabsManager manager = DevTestLabsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Policy response = manager.policies()
            .define("ipbwxgooo")
            .withRegion("sr")
            .withExistingPolicyset("njdiqfliejhpcl", "iedfsbwcei", "bv")
            .withTags(mapOf("cetjdvq", "jglzrsubklrxhjnl", "kw", "dieq", "bibanbau", "ruwdxvqzxoebwgj"))
            .withDescription("pradmskxknpdgzi")
            .withStatus(PolicyStatus.DISABLED)
            .withFactName(PolicyFactName.ENVIRONMENT_TEMPLATE)
            .withFactData("whgsaodkww")
            .withThreshold("afoctohz")
            .withEvaluatorType(PolicyEvaluatorType.MAX_VALUE_POLICY)
            .create();

        Assertions.assertEquals("vdwtfxptpqayamk", response.location());
        Assertions.assertEquals("gybm", response.tags().get("snxoc"));
        Assertions.assertEquals("rswgkpjhboyikeb", response.description());
        Assertions.assertEquals(PolicyStatus.DISABLED, response.status());
        Assertions.assertEquals(PolicyFactName.LAB_VM_SIZE, response.factName());
        Assertions.assertEquals("gwl", response.factData());
        Assertions.assertEquals("hueoijyzcqyp", response.threshold());
        Assertions.assertEquals(PolicyEvaluatorType.ALLOWED_VALUES_POLICY, response.evaluatorType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
