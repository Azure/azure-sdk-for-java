// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.CustomImageInner;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesCustom;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromPlan;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromVm;
import com.azure.resourcemanager.devtestlabs.models.DataDiskStorageTypeInfo;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsInfo;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsState;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsInfo;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomImageInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomImageInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"vm\":{\"sourceVmId\":\"utwpfhp\",\"windowsOsInfo\":{\"windowsOsState\":\"SysprepRequested\"},\"linuxOsInfo\":{\"linuxOsState\":\"DeprovisionRequested\"}},\"vhd\":{\"imageName\":\"nfd\",\"sysPrep\":true,\"osType\":\"Linux\"},\"description\":\"gtdlmk\",\"author\":\"evdlh\",\"creationDate\":\"2021-05-16T03:51:54Z\",\"managedImageId\":\"sdsttwvog\",\"managedSnapshotId\":\"bejdcn\",\"dataDiskStorageInfo\":[{\"lun\":\"oakufgm\",\"storageType\":\"Standard\"}],\"customImagePlan\":{\"id\":\"dgrtwaenuuzkopbm\",\"publisher\":\"rfdwoyu\",\"offer\":\"ziuiefozbhdm\"},\"isPlanAuthorized\":false,\"provisioningState\":\"zqhof\",\"uniqueIdentifier\":\"maequiahxicslfa\"},\"location\":\"qzpiyyl\",\"tags\":{\"ph\":\"nswhcc\",\"gwol\":\"aivwitqscywu\"},\"id\":\"h\",\"name\":\"zbwemh\",\"type\":\"i\"}")
                .toObject(CustomImageInner.class);
        Assertions.assertEquals("qzpiyyl", model.location());
        Assertions.assertEquals("nswhcc", model.tags().get("ph"));
        Assertions.assertEquals("utwpfhp", model.vm().sourceVmId());
        Assertions.assertEquals(WindowsOsState.SYSPREP_REQUESTED, model.vm().windowsOsInfo().windowsOsState());
        Assertions.assertEquals(LinuxOsState.DEPROVISION_REQUESTED, model.vm().linuxOsInfo().linuxOsState());
        Assertions.assertEquals("nfd", model.vhd().imageName());
        Assertions.assertEquals(true, model.vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.LINUX, model.vhd().osType());
        Assertions.assertEquals("gtdlmk", model.description());
        Assertions.assertEquals("evdlh", model.author());
        Assertions.assertEquals("sdsttwvog", model.managedImageId());
        Assertions.assertEquals("bejdcn", model.managedSnapshotId());
        Assertions.assertEquals("oakufgm", model.dataDiskStorageInfo().get(0).lun());
        Assertions.assertEquals(StorageType.STANDARD, model.dataDiskStorageInfo().get(0).storageType());
        Assertions.assertEquals("dgrtwaenuuzkopbm", model.customImagePlan().id());
        Assertions.assertEquals("rfdwoyu", model.customImagePlan().publisher());
        Assertions.assertEquals("ziuiefozbhdm", model.customImagePlan().offer());
        Assertions.assertEquals(false, model.isPlanAuthorized());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomImageInner model =
            new CustomImageInner()
                .withLocation("qzpiyyl")
                .withTags(mapOf("ph", "nswhcc", "gwol", "aivwitqscywu"))
                .withVm(
                    new CustomImagePropertiesFromVm()
                        .withSourceVmId("utwpfhp")
                        .withWindowsOsInfo(new WindowsOsInfo().withWindowsOsState(WindowsOsState.SYSPREP_REQUESTED))
                        .withLinuxOsInfo(new LinuxOsInfo().withLinuxOsState(LinuxOsState.DEPROVISION_REQUESTED)))
                .withVhd(
                    new CustomImagePropertiesCustom()
                        .withImageName("nfd")
                        .withSysPrep(true)
                        .withOsType(CustomImageOsType.LINUX))
                .withDescription("gtdlmk")
                .withAuthor("evdlh")
                .withManagedImageId("sdsttwvog")
                .withManagedSnapshotId("bejdcn")
                .withDataDiskStorageInfo(
                    Arrays
                        .asList(new DataDiskStorageTypeInfo().withLun("oakufgm").withStorageType(StorageType.STANDARD)))
                .withCustomImagePlan(
                    new CustomImagePropertiesFromPlan()
                        .withId("dgrtwaenuuzkopbm")
                        .withPublisher("rfdwoyu")
                        .withOffer("ziuiefozbhdm"))
                .withIsPlanAuthorized(false);
        model = BinaryData.fromObject(model).toObject(CustomImageInner.class);
        Assertions.assertEquals("qzpiyyl", model.location());
        Assertions.assertEquals("nswhcc", model.tags().get("ph"));
        Assertions.assertEquals("utwpfhp", model.vm().sourceVmId());
        Assertions.assertEquals(WindowsOsState.SYSPREP_REQUESTED, model.vm().windowsOsInfo().windowsOsState());
        Assertions.assertEquals(LinuxOsState.DEPROVISION_REQUESTED, model.vm().linuxOsInfo().linuxOsState());
        Assertions.assertEquals("nfd", model.vhd().imageName());
        Assertions.assertEquals(true, model.vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.LINUX, model.vhd().osType());
        Assertions.assertEquals("gtdlmk", model.description());
        Assertions.assertEquals("evdlh", model.author());
        Assertions.assertEquals("sdsttwvog", model.managedImageId());
        Assertions.assertEquals("bejdcn", model.managedSnapshotId());
        Assertions.assertEquals("oakufgm", model.dataDiskStorageInfo().get(0).lun());
        Assertions.assertEquals(StorageType.STANDARD, model.dataDiskStorageInfo().get(0).storageType());
        Assertions.assertEquals("dgrtwaenuuzkopbm", model.customImagePlan().id());
        Assertions.assertEquals("rfdwoyu", model.customImagePlan().publisher());
        Assertions.assertEquals("ziuiefozbhdm", model.customImagePlan().offer());
        Assertions.assertEquals(false, model.isPlanAuthorized());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
