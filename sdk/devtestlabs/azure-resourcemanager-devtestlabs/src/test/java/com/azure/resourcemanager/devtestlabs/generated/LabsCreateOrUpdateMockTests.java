// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.EnvironmentPermission;
import com.azure.resourcemanager.devtestlabs.models.Lab;
import com.azure.resourcemanager.devtestlabs.models.LabAnnouncementProperties;
import com.azure.resourcemanager.devtestlabs.models.LabSupportProperties;
import com.azure.resourcemanager.devtestlabs.models.PremiumDataDisk;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LabsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"defaultStorageAccount\":\"fxsfuztlvtmv\",\"defaultPremiumStorageAccount\":\"bwidql\",\"artifactsStorageAccount\":\"ukoveofi\",\"premiumDataDiskStorageAccount\":\"vjfn\",\"vaultName\":\"mvl\",\"labStorageType\":\"StandardSSD\",\"mandatoryArtifactsResourceIdsLinux\":[\"blkujrllfojuidjp\",\"uyjucejikzo\"],\"mandatoryArtifactsResourceIdsWindows\":[\"vtzejetjklnti\",\"yjuzkdb\",\"zolxrzvhqjwtr\"],\"createdDate\":\"2021-08-23T13:19:33Z\",\"premiumDataDisks\":\"Enabled\",\"environmentPermission\":\"Reader\",\"announcement\":{\"title\":\"rkolawjm\",\"markdown\":\"mwrokcdxfzzzwyja\",\"enabled\":\"Disabled\",\"expirationDate\":\"2021-11-07T06:40:11Z\",\"expired\":false,\"provisioningState\":\"nuchlgmltxdwhmo\",\"uniqueIdentifier\":\"sgzv\"},\"support\":{\"enabled\":\"Enabled\",\"markdown\":\"jzfpafolpymwamx\"},\"vmCreationResourceGroup\":\"rag\",\"publicIpId\":\"dphtv\",\"loadBalancerId\":\"lajv\",\"networkSecurityGroupId\":\"jchcsrlzknmzla\",\"extendedProperties\":{\"q\":\"pdwvnphcn\",\"iwdcxsmlzzhzd\":\"pjhmqrhvthl\"},\"provisioningState\":\"Succeeded\",\"uniqueIdentifier\":\"afiqgeaarbgjekg\"},\"location\":\"klbyulidwcw\",\"tags\":{\"o\":\"eg\",\"pzhz\":\"fhjirwgdnqzbrfk\",\"jcitdigsxcdglj\":\"tk\",\"tomflrytswfpf\":\"lkeuac\"},\"id\":\"dgycxnmskwhqjjy\",\"name\":\"lurlpshhkvp\",\"type\":\"dwqslsrhmpqvw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Lab response =
            manager
                .labs()
                .define("sfar")
                .withRegion("qaxsipietgbebjf")
                .withExistingResourceGroup("xuqibsxtkcudf")
                .withTags(mapOf("atzviqsowsaael", "moichdlpnfpubntn", "plrvkmjcwmjvlg", "attcju"))
                .withLabStorageType(StorageType.STANDARD_SSD)
                .withMandatoryArtifactsResourceIdsLinux(Arrays.asList("xwefohecbvopwndy", "leallklm"))
                .withMandatoryArtifactsResourceIdsWindows(Arrays.asList("lowkxxpvb", "dfjmzsyzfhotlh"))
                .withPremiumDataDisks(PremiumDataDisk.ENABLED)
                .withEnvironmentPermission(EnvironmentPermission.READER)
                .withAnnouncement(
                    new LabAnnouncementProperties()
                        .withTitle("sjlpjrtwszhv")
                        .withMarkdown("icphvtrrmhw")
                        .withEnabled(EnableStatus.DISABLED)
                        .withExpirationDate(OffsetDateTime.parse("2021-03-14T13:08:25Z"))
                        .withExpired(false))
                .withSupport(new LabSupportProperties().withEnabled(EnableStatus.ENABLED).withMarkdown("lw"))
                .withExtendedProperties(mapOf("qyhqo", "otjewlpxuzzjgnre"))
                .create();

        Assertions.assertEquals("klbyulidwcw", response.location());
        Assertions.assertEquals("eg", response.tags().get("o"));
        Assertions.assertEquals(StorageType.STANDARD_SSD, response.labStorageType());
        Assertions.assertEquals("blkujrllfojuidjp", response.mandatoryArtifactsResourceIdsLinux().get(0));
        Assertions.assertEquals("vtzejetjklnti", response.mandatoryArtifactsResourceIdsWindows().get(0));
        Assertions.assertEquals(PremiumDataDisk.ENABLED, response.premiumDataDisks());
        Assertions.assertEquals(EnvironmentPermission.READER, response.environmentPermission());
        Assertions.assertEquals("rkolawjm", response.announcement().title());
        Assertions.assertEquals("mwrokcdxfzzzwyja", response.announcement().markdown());
        Assertions.assertEquals(EnableStatus.DISABLED, response.announcement().enabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T06:40:11Z"), response.announcement().expirationDate());
        Assertions.assertEquals(false, response.announcement().expired());
        Assertions.assertEquals(EnableStatus.ENABLED, response.support().enabled());
        Assertions.assertEquals("jzfpafolpymwamx", response.support().markdown());
        Assertions.assertEquals("pdwvnphcn", response.extendedProperties().get("q"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
