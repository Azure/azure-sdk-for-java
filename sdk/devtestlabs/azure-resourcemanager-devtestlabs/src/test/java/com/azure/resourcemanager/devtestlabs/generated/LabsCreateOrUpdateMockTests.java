// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.EnvironmentPermission;
import com.azure.resourcemanager.devtestlabs.models.Lab;
import com.azure.resourcemanager.devtestlabs.models.LabAnnouncementProperties;
import com.azure.resourcemanager.devtestlabs.models.LabSupportProperties;
import com.azure.resourcemanager.devtestlabs.models.PremiumDataDisk;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LabsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"defaultStorageAccount\":\"ssmzhhkuui\",\"defaultPremiumStorageAccount\":\"dqq\",\"artifactsStorageAccount\":\"ekvalblhtjq\",\"premiumDataDiskStorageAccount\":\"yvwehtaemxh\",\"vaultName\":\"ysev\",\"labStorageType\":\"Premium\",\"mandatoryArtifactsResourceIdsLinux\":[\"zrrryv\",\"imipskdyzatvfuz\",\"aftjvvruxwigsy\"],\"mandatoryArtifactsResourceIdsWindows\":[\"qdsmjtg\"],\"createdDate\":\"2021-09-30T03:29:26Z\",\"premiumDataDisks\":\"Enabled\",\"environmentPermission\":\"Contributor\",\"announcement\":{\"title\":\"eplkcsm\",\"markdown\":\"hwtbbaedorvvm\",\"enabled\":\"Enabled\",\"expirationDate\":\"2021-07-17T03:29:04Z\",\"expired\":true,\"provisioningState\":\"gwumgxdgdhpa\",\"uniqueIdentifier\":\"dexjddvjs\"},\"support\":{\"enabled\":\"Enabled\",\"markdown\":\"mmwllc\"},\"vmCreationResourceGroup\":\"srsxaptefh\",\"publicIpId\":\"cgjokjljnhvlq\",\"loadBalancerId\":\"ek\",\"networkSecurityGroupId\":\"eksnbksdqhjvyk\",\"extendedProperties\":{\"hhus\":\"sl\"},\"provisioningState\":\"Succeeded\",\"uniqueIdentifier\":\"vnwqjwgo\"},\"location\":\"nlejjjkxybwf\",\"tags\":{\"vkzykjtjknsxf\":\"jbzten\",\"cdp\":\"us\",\"kuwxeoiojfizfavk\":\"upnqrmgjfb\",\"fwxrzxmdew\":\"zwfbcyaykmmfzs\"},\"id\":\"rsxkr\",\"name\":\"lbjazejww\",\"type\":\"iyoypsuhbrnnhj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Lab response =
            manager
                .labs()
                .define("jjk")
                .withRegion("usybwptdaca")
                .withExistingResourceGroup("y")
                .withTags(mapOf("tymtpoiwenazer", "lf"))
                .withLabStorageType(StorageType.STANDARD)
                .withMandatoryArtifactsResourceIdsLinux(
                    Arrays.asList("ovwmbjlzqsczpgvd", "napfdqwowftpt", "uwjtks", "h"))
                .withMandatoryArtifactsResourceIdsWindows(Arrays.asList("qyhleseyq"))
                .withPremiumDataDisks(PremiumDataDisk.DISABLED)
                .withEnvironmentPermission(EnvironmentPermission.READER)
                .withAnnouncement(
                    new LabAnnouncementProperties()
                        .withTitle("jv")
                        .withMarkdown("wiswskukjtasbvw")
                        .withEnabled(EnableStatus.DISABLED)
                        .withExpirationDate(OffsetDateTime.parse("2021-09-30T12:44:35Z"))
                        .withExpired(true))
                .withSupport(new LabSupportProperties().withEnabled(EnableStatus.DISABLED).withMarkdown("yw"))
                .withExtendedProperties(mapOf("n", "dwckygroe", "req", "dljdjuskb"))
                .create();

        Assertions.assertEquals("nlejjjkxybwf", response.location());
        Assertions.assertEquals("jbzten", response.tags().get("vkzykjtjknsxf"));
        Assertions.assertEquals(StorageType.PREMIUM, response.labStorageType());
        Assertions.assertEquals("zrrryv", response.mandatoryArtifactsResourceIdsLinux().get(0));
        Assertions.assertEquals("qdsmjtg", response.mandatoryArtifactsResourceIdsWindows().get(0));
        Assertions.assertEquals(PremiumDataDisk.ENABLED, response.premiumDataDisks());
        Assertions.assertEquals(EnvironmentPermission.CONTRIBUTOR, response.environmentPermission());
        Assertions.assertEquals("eplkcsm", response.announcement().title());
        Assertions.assertEquals("hwtbbaedorvvm", response.announcement().markdown());
        Assertions.assertEquals(EnableStatus.ENABLED, response.announcement().enabled());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T03:29:04Z"), response.announcement().expirationDate());
        Assertions.assertEquals(true, response.announcement().expired());
        Assertions.assertEquals(EnableStatus.ENABLED, response.support().enabled());
        Assertions.assertEquals("mmwllc", response.support().markdown());
        Assertions.assertEquals("sl", response.extendedProperties().get("hhus"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
