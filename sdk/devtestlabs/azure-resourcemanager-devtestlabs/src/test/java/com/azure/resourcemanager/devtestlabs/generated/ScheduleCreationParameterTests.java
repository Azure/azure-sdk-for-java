// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.models.DayDetails;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.HourDetails;
import com.azure.resourcemanager.devtestlabs.models.NotificationSettings;
import com.azure.resourcemanager.devtestlabs.models.ScheduleCreationParameter;
import com.azure.resourcemanager.devtestlabs.models.WeekDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduleCreationParameterTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduleCreationParameter model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"azpxdtnkdmkqjjl\",\"weeklyRecurrence\":{\"weekdays\":[\"vrkpyouaibreb\"],\"time\":\"aysjkixqtnqttez\"},\"dailyRecurrence\":{\"time\":\"ffiakp\"},\"hourlyRecurrence\":{\"minute\":658417740},\"timeZoneId\":\"tedltmmj\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":968506113,\"webhookUrl\":\"hvwauyqncy\",\"emailRecipient\":\"p\",\"notificationLocale\":\"ipmdscwx\"},\"targetResourceId\":\"pevzhfst\"},\"name\":\"xhojuj\",\"location\":\"pelmcuvhixbjxyf\",\"tags\":{\"kkbnu\":\"lrcoolsttpki\"}}")
                .toObject(ScheduleCreationParameter.class);
        Assertions.assertEquals("xhojuj", model.name());
        Assertions.assertEquals("lrcoolsttpki", model.tags().get("kkbnu"));
        Assertions.assertEquals(EnableStatus.DISABLED, model.status());
        Assertions.assertEquals("azpxdtnkdmkqjjl", model.taskType());
        Assertions.assertEquals("vrkpyouaibreb", model.weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("aysjkixqtnqttez", model.weeklyRecurrence().time());
        Assertions.assertEquals("ffiakp", model.dailyRecurrence().time());
        Assertions.assertEquals(658417740, model.hourlyRecurrence().minute());
        Assertions.assertEquals("tedltmmj", model.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.notificationSettings().status());
        Assertions.assertEquals(968506113, model.notificationSettings().timeInMinutes());
        Assertions.assertEquals("hvwauyqncy", model.notificationSettings().webhookUrl());
        Assertions.assertEquals("p", model.notificationSettings().emailRecipient());
        Assertions.assertEquals("ipmdscwx", model.notificationSettings().notificationLocale());
        Assertions.assertEquals("pevzhfst", model.targetResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduleCreationParameter model =
            new ScheduleCreationParameter()
                .withName("xhojuj")
                .withTags(mapOf("kkbnu", "lrcoolsttpki"))
                .withStatus(EnableStatus.DISABLED)
                .withTaskType("azpxdtnkdmkqjjl")
                .withWeeklyRecurrence(
                    new WeekDetails().withWeekdays(Arrays.asList("vrkpyouaibreb")).withTime("aysjkixqtnqttez"))
                .withDailyRecurrence(new DayDetails().withTime("ffiakp"))
                .withHourlyRecurrence(new HourDetails().withMinute(658417740))
                .withTimeZoneId("tedltmmj")
                .withNotificationSettings(
                    new NotificationSettings()
                        .withStatus(EnableStatus.ENABLED)
                        .withTimeInMinutes(968506113)
                        .withWebhookUrl("hvwauyqncy")
                        .withEmailRecipient("p")
                        .withNotificationLocale("ipmdscwx"))
                .withTargetResourceId("pevzhfst");
        model = BinaryData.fromObject(model).toObject(ScheduleCreationParameter.class);
        Assertions.assertEquals("xhojuj", model.name());
        Assertions.assertEquals("lrcoolsttpki", model.tags().get("kkbnu"));
        Assertions.assertEquals(EnableStatus.DISABLED, model.status());
        Assertions.assertEquals("azpxdtnkdmkqjjl", model.taskType());
        Assertions.assertEquals("vrkpyouaibreb", model.weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("aysjkixqtnqttez", model.weeklyRecurrence().time());
        Assertions.assertEquals("ffiakp", model.dailyRecurrence().time());
        Assertions.assertEquals(658417740, model.hourlyRecurrence().minute());
        Assertions.assertEquals("tedltmmj", model.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.notificationSettings().status());
        Assertions.assertEquals(968506113, model.notificationSettings().timeInMinutes());
        Assertions.assertEquals("hvwauyqncy", model.notificationSettings().webhookUrl());
        Assertions.assertEquals("p", model.notificationSettings().emailRecipient());
        Assertions.assertEquals("ipmdscwx", model.notificationSettings().notificationLocale());
        Assertions.assertEquals("pevzhfst", model.targetResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
