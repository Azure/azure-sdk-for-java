// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.ApplicableSchedule;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServiceFabricsListApplicableSchedulesWithResponseMockTests {
    @Test
    public void testListApplicableSchedulesWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"labVmsShutdown\":{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"musuaawja\",\"weeklyRecurrence\":{\"weekdays\":[\"nfczmnniixyxvq\",\"anosj\",\"gir\"],\"time\":\"gmgmdd\"},\"dailyRecurrence\":{\"time\":\"mynltwmpftmfoeaj\"},\"hourlyRecurrence\":{\"minute\":971513853},\"timeZoneId\":\"wetamfddrvlk\",\"notificationSettings\":{\"status\":\"Disabled\",\"timeInMinutes\":622642791,\"webhookUrl\":\"ecchdidrmuhkahm\",\"emailRecipient\":\"dbiucvkhhwmjpjbw\",\"notificationLocale\":\"nx\"},\"createdDate\":\"2021-05-20T15:06:34Z\",\"targetResourceId\":\"ihufoihp\",\"provisioningState\":\"ybxvgn\",\"uniqueIdentifier\":\"zpbgkzc\"},\"location\":\"cpiuzvk\",\"tags\":{\"pucdocf\":\"dimjuktirzkau\",\"o\":\"plw\",\"xwr\":\"m\",\"vbgikyj\":\"lvzkl\"},\"id\":\"kakvlbishjvpza\",\"name\":\"tuoska\",\"type\":\"izjixwfgcd\"},\"labVmsStartup\":{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"xwnujvqyn\",\"weeklyRecurrence\":{\"weekdays\":[\"tmdmuqohhihr\"],\"time\":\"quddrwjclj\"},\"dailyRecurrence\":{\"time\":\"lhpv\"},\"hourlyRecurrence\":{\"minute\":495666062},\"timeZoneId\":\"enninafhxrzfrm\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":671742673,\"webhookUrl\":\"viqlluk\",\"emailRecipient\":\"rcqxgcbvzarmqc\",\"notificationLocale\":\"okstsinvagovjyh\"},\"createdDate\":\"2021-05-26T07:55:45Z\",\"targetResourceId\":\"rdvcehqwhit\",\"provisioningState\":\"mxgnmguzbuwv\",\"uniqueIdentifier\":\"balkjnbkbdhl\"},\"location\":\"tqstqkqsygxiyne\",\"tags\":{\"heu\":\"agz\",\"ckqiawzlzk\":\"anlxunpq\",\"wsaudoejtighsxj\":\"aslgacizuxlrarwp\"},\"id\":\"ytnkqb\",\"name\":\"lahovuuwx\",\"type\":\"mehjnhjioti\"}},\"location\":\"fbbcngkegxcypxbb\",\"tags\":{\"lyr\":\"w\",\"frolq\":\"oxpdxq\",\"u\":\"wnk\"},\"id\":\"jew\",\"name\":\"ahwkxjjm\",\"type\":\"tnlmsoodtmvecdhd\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ApplicableSchedule response =
            manager
                .serviceFabrics()
                .listApplicableSchedulesWithResponse(
                    "zpdgonjhxshthmgp", "zqulptkbv", "pxtzhigqqbtimpk", "blornsih", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("fbbcngkegxcypxbb", response.location());
        Assertions.assertEquals("w", response.tags().get("lyr"));
        Assertions.assertEquals("cpiuzvk", response.labVmsShutdown().location());
        Assertions.assertEquals("dimjuktirzkau", response.labVmsShutdown().tags().get("pucdocf"));
        Assertions.assertEquals(EnableStatus.DISABLED, response.labVmsShutdown().status());
        Assertions.assertEquals("musuaawja", response.labVmsShutdown().taskType());
        Assertions.assertEquals("nfczmnniixyxvq", response.labVmsShutdown().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("gmgmdd", response.labVmsShutdown().weeklyRecurrence().time());
        Assertions.assertEquals("mynltwmpftmfoeaj", response.labVmsShutdown().dailyRecurrence().time());
        Assertions.assertEquals(971513853, response.labVmsShutdown().hourlyRecurrence().minute());
        Assertions.assertEquals("wetamfddrvlk", response.labVmsShutdown().timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, response.labVmsShutdown().notificationSettings().status());
        Assertions.assertEquals(622642791, response.labVmsShutdown().notificationSettings().timeInMinutes());
        Assertions.assertEquals("ecchdidrmuhkahm", response.labVmsShutdown().notificationSettings().webhookUrl());
        Assertions.assertEquals("dbiucvkhhwmjpjbw", response.labVmsShutdown().notificationSettings().emailRecipient());
        Assertions.assertEquals("nx", response.labVmsShutdown().notificationSettings().notificationLocale());
        Assertions.assertEquals("ihufoihp", response.labVmsShutdown().targetResourceId());
        Assertions.assertEquals("tqstqkqsygxiyne", response.labVmsStartup().location());
        Assertions.assertEquals("agz", response.labVmsStartup().tags().get("heu"));
        Assertions.assertEquals(EnableStatus.DISABLED, response.labVmsStartup().status());
        Assertions.assertEquals("xwnujvqyn", response.labVmsStartup().taskType());
        Assertions.assertEquals("tmdmuqohhihr", response.labVmsStartup().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("quddrwjclj", response.labVmsStartup().weeklyRecurrence().time());
        Assertions.assertEquals("lhpv", response.labVmsStartup().dailyRecurrence().time());
        Assertions.assertEquals(495666062, response.labVmsStartup().hourlyRecurrence().minute());
        Assertions.assertEquals("enninafhxrzfrm", response.labVmsStartup().timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, response.labVmsStartup().notificationSettings().status());
        Assertions.assertEquals(671742673, response.labVmsStartup().notificationSettings().timeInMinutes());
        Assertions.assertEquals("viqlluk", response.labVmsStartup().notificationSettings().webhookUrl());
        Assertions.assertEquals("rcqxgcbvzarmqc", response.labVmsStartup().notificationSettings().emailRecipient());
        Assertions
            .assertEquals("okstsinvagovjyh", response.labVmsStartup().notificationSettings().notificationLocale());
        Assertions.assertEquals("rdvcehqwhit", response.labVmsStartup().targetResourceId());
    }
}
