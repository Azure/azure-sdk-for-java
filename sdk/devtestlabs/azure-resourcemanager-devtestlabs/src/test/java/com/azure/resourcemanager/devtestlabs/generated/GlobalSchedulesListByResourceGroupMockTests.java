// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GlobalSchedulesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"status\":\"Enabled\",\"taskType\":\"elssxblycs\",\"weeklyRecurrence\":{\"weekdays\":[],\"time\":\"ksrl\"},\"dailyRecurrence\":{\"time\":\"esqplp\"},\"hourlyRecurrence\":{\"minute\":536619974},\"timeZoneId\":\"oewbid\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":2050593276,\"webhookUrl\":\"vgp\",\"emailRecipient\":\"deugf\",\"notificationLocale\":\"zec\"},\"createdDate\":\"2021-05-30T07:04:22Z\",\"targetResourceId\":\"kufykhvu\",\"provisioningState\":\"epmrut\",\"uniqueIdentifier\":\"abaobnslujdjltym\"},\"location\":\"mvguihywart\",\"tags\":{\"emmucfxh\":\"hkixkykxdssj\",\"s\":\"kkflrmymyincqlhr\",\"iiiovgqcgxuugq\":\"sl\",\"e\":\"ctotiowlx\"},\"id\":\"dptjgwdtgukranb\",\"name\":\"wphqlkccuzgygqw\",\"type\":\"hoi\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Schedule> response =
            manager
                .globalSchedules()
                .listByResourceGroup(
                    "roznnhdrlktgj", "sggux", "eml", 13572541, "waeeczgfb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mvguihywart", response.iterator().next().location());
        Assertions.assertEquals("hkixkykxdssj", response.iterator().next().tags().get("emmucfxh"));
        Assertions.assertEquals(EnableStatus.ENABLED, response.iterator().next().status());
        Assertions.assertEquals("elssxblycs", response.iterator().next().taskType());
        Assertions.assertEquals("ksrl", response.iterator().next().weeklyRecurrence().time());
        Assertions.assertEquals("esqplp", response.iterator().next().dailyRecurrence().time());
        Assertions.assertEquals(536619974, response.iterator().next().hourlyRecurrence().minute());
        Assertions.assertEquals("oewbid", response.iterator().next().timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, response.iterator().next().notificationSettings().status());
        Assertions.assertEquals(2050593276, response.iterator().next().notificationSettings().timeInMinutes());
        Assertions.assertEquals("vgp", response.iterator().next().notificationSettings().webhookUrl());
        Assertions.assertEquals("deugf", response.iterator().next().notificationSettings().emailRecipient());
        Assertions.assertEquals("zec", response.iterator().next().notificationSettings().notificationLocale());
        Assertions.assertEquals("kufykhvu", response.iterator().next().targetResourceId());
    }
}
