// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class GlobalSchedulesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"qqug\",\"weeklyRecurrence\":{\"weekdays\":[\"bcvex\"],\"time\":\"uquowtljvfwhr\"},\"dailyRecurrence\":{\"time\":\"khyxvrqtvbcz\"},\"hourlyRecurrence\":{\"minute\":1039478022},\"timeZoneId\":\"gglmepjpfsey\",\"notificationSettings\":{\"status\":\"Disabled\",\"timeInMinutes\":276539538,\"webhookUrl\":\"szngafpgyl\",\"emailRecipient\":\"ecjujcng\",\"notificationLocale\":\"dyedmzrgjfo\"},\"createdDate\":\"2021-04-16T15:25:59Z\",\"targetResourceId\":\"noitpkpztr\",\"provisioningState\":\"gxvcoqrasw\",\"uniqueIdentifier\":\"yxp\"},\"location\":\"itweialwvskbuh\",\"tags\":{\"yltcoqcuj\":\"aq\"},\"id\":\"dsxzakuejkmvb\",\"name\":\"ztjofqcvovjufyc\",\"type\":\"jmlbemyejiriux\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Schedule> response =
            manager
                .globalSchedules()
                .listByResourceGroup(
                    "huqol", "ah", "uqwqulsutrjbhxyk", 1990714971, "y", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("itweialwvskbuh", response.iterator().next().location());
        Assertions.assertEquals("aq", response.iterator().next().tags().get("yltcoqcuj"));
        Assertions.assertEquals(EnableStatus.DISABLED, response.iterator().next().status());
        Assertions.assertEquals("qqug", response.iterator().next().taskType());
        Assertions.assertEquals("bcvex", response.iterator().next().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("uquowtljvfwhr", response.iterator().next().weeklyRecurrence().time());
        Assertions.assertEquals("khyxvrqtvbcz", response.iterator().next().dailyRecurrence().time());
        Assertions.assertEquals(1039478022, response.iterator().next().hourlyRecurrence().minute());
        Assertions.assertEquals("gglmepjpfsey", response.iterator().next().timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, response.iterator().next().notificationSettings().status());
        Assertions.assertEquals(276539538, response.iterator().next().notificationSettings().timeInMinutes());
        Assertions.assertEquals("szngafpgyl", response.iterator().next().notificationSettings().webhookUrl());
        Assertions.assertEquals("ecjujcng", response.iterator().next().notificationSettings().emailRecipient());
        Assertions.assertEquals("dyedmzrgjfo", response.iterator().next().notificationSettings().notificationLocale());
        Assertions.assertEquals("noitpkpztr", response.iterator().next().targetResourceId());
    }
}
