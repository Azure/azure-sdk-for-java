// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.SecretInner;
import com.azure.resourcemanager.devtestlabs.models.SecretList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecretListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecretList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"value\":\"tfnmdx\",\"provisioningState\":\"ngfdgugeyzihgrky\",\"uniqueIdentifier\":\"zabs\"},\"location\":\"mfp\",\"tags\":{\"yhyhsgzfczb\":\"jee\",\"tnluankrr\":\"omfgbeglqgleohib\"},\"id\":\"xeeebtijvacvbmqz\",\"name\":\"qqxlajr\",\"type\":\"wxacevehj\"}],\"nextLink\":\"yxoaf\"}")
                .toObject(SecretList.class);
        Assertions.assertEquals("mfp", model.value().get(0).location());
        Assertions.assertEquals("jee", model.value().get(0).tags().get("yhyhsgzfczb"));
        Assertions.assertEquals("tfnmdx", model.value().get(0).value());
        Assertions.assertEquals("yxoaf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecretList model =
            new SecretList()
                .withValue(
                    Arrays
                        .asList(
                            new SecretInner()
                                .withLocation("mfp")
                                .withTags(mapOf("yhyhsgzfczb", "jee", "tnluankrr", "omfgbeglqgleohib"))
                                .withValue("tfnmdx")))
                .withNextLink("yxoaf");
        model = BinaryData.fromObject(model).toObject(SecretList.class);
        Assertions.assertEquals("mfp", model.value().get(0).location());
        Assertions.assertEquals("jee", model.value().get(0).tags().get("yhyhsgzfczb"));
        Assertions.assertEquals("tfnmdx", model.value().get(0).value());
        Assertions.assertEquals("yxoaf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
