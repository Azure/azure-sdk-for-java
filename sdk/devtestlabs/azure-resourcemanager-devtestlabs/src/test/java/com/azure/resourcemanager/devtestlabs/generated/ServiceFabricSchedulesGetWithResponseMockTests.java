// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServiceFabricSchedulesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"dm\",\"weeklyRecurrence\":{\"weekdays\":[],\"time\":\"jvskwsdgkjg\"},\"dailyRecurrence\":{\"time\":\"wrasekw\"},\"hourlyRecurrence\":{\"minute\":1522885213},\"timeZoneId\":\"inwoqartwyxq\",\"notificationSettings\":{\"status\":\"Disabled\",\"timeInMinutes\":1621588574,\"webhookUrl\":\"tdavuqmcbymsfobj\",\"emailRecipient\":\"uvjezcjumvps\",\"notificationLocale\":\"ioyoiglkmiq\"},\"createdDate\":\"2021-12-06T08:55:27Z\",\"targetResourceId\":\"aclib\",\"provisioningState\":\"qpspkladydgnha\",\"uniqueIdentifier\":\"wuk\"},\"location\":\"xzgpmn\",\"tags\":{\"stcl\":\"eddqilwgdfpfqfpc\"},\"id\":\"qrvwerfwxbsm\",\"name\":\"bljjehh\",\"type\":\"ifkwdvbtbrekqhs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .serviceFabricSchedules()
                .getWithResponse(
                    "ndktxfv", "nfee", "gpkrie", "bgnixxoww", "kyfwnwpiwxeiicr", "p", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("xzgpmn", response.location());
        Assertions.assertEquals("eddqilwgdfpfqfpc", response.tags().get("stcl"));
        Assertions.assertEquals(EnableStatus.DISABLED, response.status());
        Assertions.assertEquals("dm", response.taskType());
        Assertions.assertEquals("jvskwsdgkjg", response.weeklyRecurrence().time());
        Assertions.assertEquals("wrasekw", response.dailyRecurrence().time());
        Assertions.assertEquals(1522885213, response.hourlyRecurrence().minute());
        Assertions.assertEquals("inwoqartwyxq", response.timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, response.notificationSettings().status());
        Assertions.assertEquals(1621588574, response.notificationSettings().timeInMinutes());
        Assertions.assertEquals("tdavuqmcbymsfobj", response.notificationSettings().webhookUrl());
        Assertions.assertEquals("uvjezcjumvps", response.notificationSettings().emailRecipient());
        Assertions.assertEquals("ioyoiglkmiq", response.notificationSettings().notificationLocale());
        Assertions.assertEquals("aclib", response.targetResourceId());
    }
}
