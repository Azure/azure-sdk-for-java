// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.GalleryImageInner;
import com.azure.resourcemanager.devtestlabs.models.GalleryImageReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GalleryImageInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GalleryImageInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"author\":\"jmsvpkjp\",\"createdDate\":\"2021-09-03T19:15:23Z\",\"description\":\"cfzq\",\"imageReference\":{\"offer\":\"x\",\"publisher\":\"czheyd\",\"sku\":\"dshmkxmaehvbbx\",\"osType\":\"iplt\",\"version\":\"htba\"},\"icon\":\"gx\",\"enabled\":false,\"planId\":\"kpyklyhp\",\"isPlanAuthorized\":true},\"location\":\"dpvruud\",\"tags\":{\"eclze\":\"ibthostgktstvd\"},\"id\":\"qbcvhzlhplod\",\"name\":\"kdl\",\"type\":\"wqfbumlkxtrqjfsm\"}")
                .toObject(GalleryImageInner.class);
        Assertions.assertEquals("dpvruud", model.location());
        Assertions.assertEquals("ibthostgktstvd", model.tags().get("eclze"));
        Assertions.assertEquals("jmsvpkjp", model.author());
        Assertions.assertEquals("cfzq", model.description());
        Assertions.assertEquals("x", model.imageReference().offer());
        Assertions.assertEquals("czheyd", model.imageReference().publisher());
        Assertions.assertEquals("dshmkxmaehvbbx", model.imageReference().sku());
        Assertions.assertEquals("iplt", model.imageReference().osType());
        Assertions.assertEquals("htba", model.imageReference().version());
        Assertions.assertEquals("gx", model.icon());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("kpyklyhp", model.planId());
        Assertions.assertEquals(true, model.isPlanAuthorized());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GalleryImageInner model =
            new GalleryImageInner()
                .withLocation("dpvruud")
                .withTags(mapOf("eclze", "ibthostgktstvd"))
                .withAuthor("jmsvpkjp")
                .withDescription("cfzq")
                .withImageReference(
                    new GalleryImageReference()
                        .withOffer("x")
                        .withPublisher("czheyd")
                        .withSku("dshmkxmaehvbbx")
                        .withOsType("iplt")
                        .withVersion("htba"))
                .withIcon("gx")
                .withEnabled(false)
                .withPlanId("kpyklyhp")
                .withIsPlanAuthorized(true);
        model = BinaryData.fromObject(model).toObject(GalleryImageInner.class);
        Assertions.assertEquals("dpvruud", model.location());
        Assertions.assertEquals("ibthostgktstvd", model.tags().get("eclze"));
        Assertions.assertEquals("jmsvpkjp", model.author());
        Assertions.assertEquals("cfzq", model.description());
        Assertions.assertEquals("x", model.imageReference().offer());
        Assertions.assertEquals("czheyd", model.imageReference().publisher());
        Assertions.assertEquals("dshmkxmaehvbbx", model.imageReference().sku());
        Assertions.assertEquals("iplt", model.imageReference().osType());
        Assertions.assertEquals("htba", model.imageReference().version());
        Assertions.assertEquals("gx", model.icon());
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("kpyklyhp", model.planId());
        Assertions.assertEquals(true, model.isPlanAuthorized());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
