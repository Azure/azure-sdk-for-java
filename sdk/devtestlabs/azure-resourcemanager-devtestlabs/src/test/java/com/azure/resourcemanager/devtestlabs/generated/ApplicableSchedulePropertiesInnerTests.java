// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.ApplicableSchedulePropertiesInner;
import com.azure.resourcemanager.devtestlabs.fluent.models.ScheduleInner;
import com.azure.resourcemanager.devtestlabs.models.DayDetails;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.HourDetails;
import com.azure.resourcemanager.devtestlabs.models.NotificationSettings;
import com.azure.resourcemanager.devtestlabs.models.WeekDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ApplicableSchedulePropertiesInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ApplicableSchedulePropertiesInner model =
            BinaryData
                .fromString(
                    "{\"labVmsShutdown\":{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"svth\",\"weeklyRecurrence\":{\"weekdays\":[\"tekovmri\"],\"time\":\"attgplu\"},\"dailyRecurrence\":{\"time\":\"tangcfhnykzcu\"},\"hourlyRecurrence\":{\"minute\":1514018500},\"timeZoneId\":\"wlmzqwmvtxnjmxmc\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":386890050,\"webhookUrl\":\"clxyn\",\"emailRecipient\":\"k\",\"notificationLocale\":\"fabuiyjibu\"},\"createdDate\":\"2021-07-04T05:28:17Z\",\"targetResourceId\":\"ugneikn\",\"provisioningState\":\"oxgjiuqhibt\",\"uniqueIdentifier\":\"ipq\"},\"location\":\"jedmurrxxgewp\",\"tags\":{\"cgwgcloxoebqinji\":\"qylkmqpzoyhlf\",\"qlafcbahhpzpofoi\":\"nwjfu\",\"kholvd\":\"jwpfilkm\",\"uartvti\":\"dviauogp\"},\"id\":\"kyefchnmnahmnxhk\",\"name\":\"jqirwrw\",\"type\":\"ooxf\"},\"labVmsStartup\":{\"properties\":{\"status\":\"Enabled\",\"taskType\":\"wrsnewmozqvbu\",\"weeklyRecurrence\":{\"weekdays\":[\"m\",\"sycxhxzgaz\",\"taboidvmf\",\"hppubowsepdfgkmt\"],\"time\":\"erngbtcjuahokqto\"},\"dailyRecurrence\":{\"time\":\"uxofshfphwpnulai\"},\"hourlyRecurrence\":{\"minute\":102187695},\"timeZoneId\":\"ywhslwkojpllndnp\",\"notificationSettings\":{\"status\":\"Disabled\",\"timeInMinutes\":211402317,\"webhookUrl\":\"gfugsnnfhyet\",\"emailRecipient\":\"ypococtfjgtixr\",\"notificationLocale\":\"zuyt\"},\"createdDate\":\"2021-03-14T11:53:49Z\",\"targetResourceId\":\"muowolbauiro\",\"provisioningState\":\"ons\",\"uniqueIdentifier\":\"nw\"},\"location\":\"ngajinnixjawrtmj\",\"tags\":{\"vnekhenlusfnrdtj\":\"yccxlzhcox\",\"ttgepuslvyjtcv\":\"txrdcqtjvi\"},\"id\":\"wkasiziesf\",\"name\":\"ughtuqfecjxeygtu\",\"type\":\"xu\"}}")
                .toObject(ApplicableSchedulePropertiesInner.class);
        Assertions.assertEquals("jedmurrxxgewp", model.labVmsShutdown().location());
        Assertions.assertEquals("qylkmqpzoyhlf", model.labVmsShutdown().tags().get("cgwgcloxoebqinji"));
        Assertions.assertEquals(EnableStatus.DISABLED, model.labVmsShutdown().status());
        Assertions.assertEquals("svth", model.labVmsShutdown().taskType());
        Assertions.assertEquals("tekovmri", model.labVmsShutdown().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("attgplu", model.labVmsShutdown().weeklyRecurrence().time());
        Assertions.assertEquals("tangcfhnykzcu", model.labVmsShutdown().dailyRecurrence().time());
        Assertions.assertEquals(1514018500, model.labVmsShutdown().hourlyRecurrence().minute());
        Assertions.assertEquals("wlmzqwmvtxnjmxmc", model.labVmsShutdown().timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.labVmsShutdown().notificationSettings().status());
        Assertions.assertEquals(386890050, model.labVmsShutdown().notificationSettings().timeInMinutes());
        Assertions.assertEquals("clxyn", model.labVmsShutdown().notificationSettings().webhookUrl());
        Assertions.assertEquals("k", model.labVmsShutdown().notificationSettings().emailRecipient());
        Assertions.assertEquals("fabuiyjibu", model.labVmsShutdown().notificationSettings().notificationLocale());
        Assertions.assertEquals("ugneikn", model.labVmsShutdown().targetResourceId());
        Assertions.assertEquals("ngajinnixjawrtmj", model.labVmsStartup().location());
        Assertions.assertEquals("yccxlzhcox", model.labVmsStartup().tags().get("vnekhenlusfnrdtj"));
        Assertions.assertEquals(EnableStatus.ENABLED, model.labVmsStartup().status());
        Assertions.assertEquals("wrsnewmozqvbu", model.labVmsStartup().taskType());
        Assertions.assertEquals("m", model.labVmsStartup().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("erngbtcjuahokqto", model.labVmsStartup().weeklyRecurrence().time());
        Assertions.assertEquals("uxofshfphwpnulai", model.labVmsStartup().dailyRecurrence().time());
        Assertions.assertEquals(102187695, model.labVmsStartup().hourlyRecurrence().minute());
        Assertions.assertEquals("ywhslwkojpllndnp", model.labVmsStartup().timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, model.labVmsStartup().notificationSettings().status());
        Assertions.assertEquals(211402317, model.labVmsStartup().notificationSettings().timeInMinutes());
        Assertions.assertEquals("gfugsnnfhyet", model.labVmsStartup().notificationSettings().webhookUrl());
        Assertions.assertEquals("ypococtfjgtixr", model.labVmsStartup().notificationSettings().emailRecipient());
        Assertions.assertEquals("zuyt", model.labVmsStartup().notificationSettings().notificationLocale());
        Assertions.assertEquals("muowolbauiro", model.labVmsStartup().targetResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ApplicableSchedulePropertiesInner model =
            new ApplicableSchedulePropertiesInner()
                .withLabVmsShutdown(
                    new ScheduleInner()
                        .withLocation("jedmurrxxgewp")
                        .withTags(
                            mapOf(
                                "cgwgcloxoebqinji",
                                "qylkmqpzoyhlf",
                                "qlafcbahhpzpofoi",
                                "nwjfu",
                                "kholvd",
                                "jwpfilkm",
                                "uartvti",
                                "dviauogp"))
                        .withStatus(EnableStatus.DISABLED)
                        .withTaskType("svth")
                        .withWeeklyRecurrence(
                            new WeekDetails().withWeekdays(Arrays.asList("tekovmri")).withTime("attgplu"))
                        .withDailyRecurrence(new DayDetails().withTime("tangcfhnykzcu"))
                        .withHourlyRecurrence(new HourDetails().withMinute(1514018500))
                        .withTimeZoneId("wlmzqwmvtxnjmxmc")
                        .withNotificationSettings(
                            new NotificationSettings()
                                .withStatus(EnableStatus.ENABLED)
                                .withTimeInMinutes(386890050)
                                .withWebhookUrl("clxyn")
                                .withEmailRecipient("k")
                                .withNotificationLocale("fabuiyjibu"))
                        .withTargetResourceId("ugneikn"))
                .withLabVmsStartup(
                    new ScheduleInner()
                        .withLocation("ngajinnixjawrtmj")
                        .withTags(mapOf("vnekhenlusfnrdtj", "yccxlzhcox", "ttgepuslvyjtcv", "txrdcqtjvi"))
                        .withStatus(EnableStatus.ENABLED)
                        .withTaskType("wrsnewmozqvbu")
                        .withWeeklyRecurrence(
                            new WeekDetails()
                                .withWeekdays(Arrays.asList("m", "sycxhxzgaz", "taboidvmf", "hppubowsepdfgkmt"))
                                .withTime("erngbtcjuahokqto"))
                        .withDailyRecurrence(new DayDetails().withTime("uxofshfphwpnulai"))
                        .withHourlyRecurrence(new HourDetails().withMinute(102187695))
                        .withTimeZoneId("ywhslwkojpllndnp")
                        .withNotificationSettings(
                            new NotificationSettings()
                                .withStatus(EnableStatus.DISABLED)
                                .withTimeInMinutes(211402317)
                                .withWebhookUrl("gfugsnnfhyet")
                                .withEmailRecipient("ypococtfjgtixr")
                                .withNotificationLocale("zuyt"))
                        .withTargetResourceId("muowolbauiro"));
        model = BinaryData.fromObject(model).toObject(ApplicableSchedulePropertiesInner.class);
        Assertions.assertEquals("jedmurrxxgewp", model.labVmsShutdown().location());
        Assertions.assertEquals("qylkmqpzoyhlf", model.labVmsShutdown().tags().get("cgwgcloxoebqinji"));
        Assertions.assertEquals(EnableStatus.DISABLED, model.labVmsShutdown().status());
        Assertions.assertEquals("svth", model.labVmsShutdown().taskType());
        Assertions.assertEquals("tekovmri", model.labVmsShutdown().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("attgplu", model.labVmsShutdown().weeklyRecurrence().time());
        Assertions.assertEquals("tangcfhnykzcu", model.labVmsShutdown().dailyRecurrence().time());
        Assertions.assertEquals(1514018500, model.labVmsShutdown().hourlyRecurrence().minute());
        Assertions.assertEquals("wlmzqwmvtxnjmxmc", model.labVmsShutdown().timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, model.labVmsShutdown().notificationSettings().status());
        Assertions.assertEquals(386890050, model.labVmsShutdown().notificationSettings().timeInMinutes());
        Assertions.assertEquals("clxyn", model.labVmsShutdown().notificationSettings().webhookUrl());
        Assertions.assertEquals("k", model.labVmsShutdown().notificationSettings().emailRecipient());
        Assertions.assertEquals("fabuiyjibu", model.labVmsShutdown().notificationSettings().notificationLocale());
        Assertions.assertEquals("ugneikn", model.labVmsShutdown().targetResourceId());
        Assertions.assertEquals("ngajinnixjawrtmj", model.labVmsStartup().location());
        Assertions.assertEquals("yccxlzhcox", model.labVmsStartup().tags().get("vnekhenlusfnrdtj"));
        Assertions.assertEquals(EnableStatus.ENABLED, model.labVmsStartup().status());
        Assertions.assertEquals("wrsnewmozqvbu", model.labVmsStartup().taskType());
        Assertions.assertEquals("m", model.labVmsStartup().weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("erngbtcjuahokqto", model.labVmsStartup().weeklyRecurrence().time());
        Assertions.assertEquals("uxofshfphwpnulai", model.labVmsStartup().dailyRecurrence().time());
        Assertions.assertEquals(102187695, model.labVmsStartup().hourlyRecurrence().minute());
        Assertions.assertEquals("ywhslwkojpllndnp", model.labVmsStartup().timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, model.labVmsStartup().notificationSettings().status());
        Assertions.assertEquals(211402317, model.labVmsStartup().notificationSettings().timeInMinutes());
        Assertions.assertEquals("gfugsnnfhyet", model.labVmsStartup().notificationSettings().webhookUrl());
        Assertions.assertEquals("ypococtfjgtixr", model.labVmsStartup().notificationSettings().emailRecipient());
        Assertions.assertEquals("zuyt", model.labVmsStartup().notificationSettings().notificationLocale());
        Assertions.assertEquals("muowolbauiro", model.labVmsStartup().targetResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
