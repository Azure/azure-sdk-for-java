// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.models.CostThresholdProperties;
import com.azure.resourcemanager.devtestlabs.models.CostThresholdStatus;
import com.azure.resourcemanager.devtestlabs.models.PercentageCostThresholdProperties;
import com.azure.resourcemanager.devtestlabs.models.ReportingCycleType;
import com.azure.resourcemanager.devtestlabs.models.TargetCostProperties;
import com.azure.resourcemanager.devtestlabs.models.TargetCostStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TargetCostPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TargetCostProperties model =
            BinaryData
                .fromString(
                    "{\"status\":\"Disabled\",\"target\":1344310513,\"costThresholds\":[{\"thresholdId\":\"la\",\"percentageThreshold\":{\"thresholdValue\":29.81065633031904},\"displayOnChart\":\"Enabled\",\"sendNotificationWhenExceeded\":\"Disabled\",\"notificationSent\":\"cjzkzivgvvcna\"},{\"thresholdId\":\"hyrnxxmu\",\"percentageThreshold\":{\"thresholdValue\":62.06745829119037},\"displayOnChart\":\"Enabled\",\"sendNotificationWhenExceeded\":\"Disabled\",\"notificationSent\":\"kwqqtchealmf\"},{\"thresholdId\":\"d\",\"percentageThreshold\":{\"thresholdValue\":15.999817064386267},\"displayOnChart\":\"Enabled\",\"sendNotificationWhenExceeded\":\"Disabled\",\"notificationSent\":\"iohgwxrtfud\"},{\"thresholdId\":\"pxgy\",\"percentageThreshold\":{\"thresholdValue\":80.3374408852527},\"displayOnChart\":\"Disabled\",\"sendNotificationWhenExceeded\":\"Enabled\",\"notificationSent\":\"ukghimdblxgw\"}],\"cycleStartDateTime\":\"2021-09-01T10:58:30Z\",\"cycleEndDateTime\":\"2021-07-20T17:44:37Z\",\"cycleType\":\"CalendarMonth\"}")
                .toObject(TargetCostProperties.class);
        Assertions.assertEquals(TargetCostStatus.DISABLED, model.status());
        Assertions.assertEquals(1344310513, model.target());
        Assertions.assertEquals("la", model.costThresholds().get(0).thresholdId());
        Assertions
            .assertEquals(29.81065633031904D, model.costThresholds().get(0).percentageThreshold().thresholdValue());
        Assertions.assertEquals(CostThresholdStatus.ENABLED, model.costThresholds().get(0).displayOnChart());
        Assertions
            .assertEquals(CostThresholdStatus.DISABLED, model.costThresholds().get(0).sendNotificationWhenExceeded());
        Assertions.assertEquals("cjzkzivgvvcna", model.costThresholds().get(0).notificationSent());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T10:58:30Z"), model.cycleStartDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T17:44:37Z"), model.cycleEndDateTime());
        Assertions.assertEquals(ReportingCycleType.CALENDAR_MONTH, model.cycleType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TargetCostProperties model =
            new TargetCostProperties()
                .withStatus(TargetCostStatus.DISABLED)
                .withTarget(1344310513)
                .withCostThresholds(
                    Arrays
                        .asList(
                            new CostThresholdProperties()
                                .withThresholdId("la")
                                .withPercentageThreshold(
                                    new PercentageCostThresholdProperties().withThresholdValue(29.81065633031904D))
                                .withDisplayOnChart(CostThresholdStatus.ENABLED)
                                .withSendNotificationWhenExceeded(CostThresholdStatus.DISABLED)
                                .withNotificationSent("cjzkzivgvvcna"),
                            new CostThresholdProperties()
                                .withThresholdId("hyrnxxmu")
                                .withPercentageThreshold(
                                    new PercentageCostThresholdProperties().withThresholdValue(62.06745829119037D))
                                .withDisplayOnChart(CostThresholdStatus.ENABLED)
                                .withSendNotificationWhenExceeded(CostThresholdStatus.DISABLED)
                                .withNotificationSent("kwqqtchealmf"),
                            new CostThresholdProperties()
                                .withThresholdId("d")
                                .withPercentageThreshold(
                                    new PercentageCostThresholdProperties().withThresholdValue(15.999817064386267D))
                                .withDisplayOnChart(CostThresholdStatus.ENABLED)
                                .withSendNotificationWhenExceeded(CostThresholdStatus.DISABLED)
                                .withNotificationSent("iohgwxrtfud"),
                            new CostThresholdProperties()
                                .withThresholdId("pxgy")
                                .withPercentageThreshold(
                                    new PercentageCostThresholdProperties().withThresholdValue(80.3374408852527D))
                                .withDisplayOnChart(CostThresholdStatus.DISABLED)
                                .withSendNotificationWhenExceeded(CostThresholdStatus.ENABLED)
                                .withNotificationSent("ukghimdblxgw")))
                .withCycleStartDateTime(OffsetDateTime.parse("2021-09-01T10:58:30Z"))
                .withCycleEndDateTime(OffsetDateTime.parse("2021-07-20T17:44:37Z"))
                .withCycleType(ReportingCycleType.CALENDAR_MONTH);
        model = BinaryData.fromObject(model).toObject(TargetCostProperties.class);
        Assertions.assertEquals(TargetCostStatus.DISABLED, model.status());
        Assertions.assertEquals(1344310513, model.target());
        Assertions.assertEquals("la", model.costThresholds().get(0).thresholdId());
        Assertions
            .assertEquals(29.81065633031904D, model.costThresholds().get(0).percentageThreshold().thresholdValue());
        Assertions.assertEquals(CostThresholdStatus.ENABLED, model.costThresholds().get(0).displayOnChart());
        Assertions
            .assertEquals(CostThresholdStatus.DISABLED, model.costThresholds().get(0).sendNotificationWhenExceeded());
        Assertions.assertEquals("cjzkzivgvvcna", model.costThresholds().get(0).notificationSent());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-01T10:58:30Z"), model.cycleStartDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T17:44:37Z"), model.cycleEndDateTime());
        Assertions.assertEquals(ReportingCycleType.CALENDAR_MONTH, model.cycleType());
    }
}
