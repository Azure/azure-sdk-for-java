// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.CustomImage;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesCustom;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromPlan;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromVm;
import com.azure.resourcemanager.devtestlabs.models.DataDiskStorageTypeInfo;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsInfo;
import com.azure.resourcemanager.devtestlabs.models.LinuxOsState;
import com.azure.resourcemanager.devtestlabs.models.StorageType;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsInfo;
import com.azure.resourcemanager.devtestlabs.models.WindowsOsState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CustomImagesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"vm\":{\"sourceVmId\":\"gqphrgfnzhctmjts\",\"windowsOsInfo\":{\"windowsOsState\":\"SysprepApplied\"},\"linuxOsInfo\":{\"linuxOsState\":\"NonDeprovisioned\"}},\"vhd\":{\"imageName\":\"arpzeqacdldtzm\",\"sysPrep\":false,\"osType\":\"Linux\"},\"description\":\"cpczshnuqnd\",\"author\":\"zupfkhuytuszxhm\",\"creationDate\":\"2021-10-02T12:20:25Z\",\"managedImageId\":\"egw\",\"managedSnapshotId\":\"ukvzwydwttha\",\"dataDiskStorageInfo\":[{\"lun\":\"skjivbsshajqfuk\",\"storageType\":\"Standard\"},{\"lun\":\"pgeumilh\",\"storageType\":\"Premium\"},{\"lun\":\"rdexyio\",\"storageType\":\"Premium\"}],\"customImagePlan\":{\"id\":\"nbdbzsxcwqqr\",\"publisher\":\"pcbbprtugav\",\"offer\":\"bcyksivmfogd\"},\"isPlanAuthorized\":true,\"provisioningState\":\"Succeeded\",\"uniqueIdentifier\":\"gmbawvifdxk\"},\"location\":\"cifhocjxwkl\",\"tags\":{\"xxvir\":\"rvtxvcmufunlc\",\"rquv\":\"eyngjg\"},\"id\":\"ygg\",\"name\":\"pmcrdcuelj\",\"type\":\"iahxmfqryarvs\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomImage response =
            manager
                .customImages()
                .define("jrr")
                .withRegion("lj")
                .withExistingLab("hmtybkcgsuthhll", "mwynefxexlfciatx")
                .withTags(mapOf("jpbi", "vume", "leqirccjclykcgxv", "nzpphepife", "punettepdjxq", "pjlvczuoda"))
                .withVm(
                    new CustomImagePropertiesFromVm()
                        .withSourceVmId("dskjhhxdlaj")
                        .withWindowsOsInfo(new WindowsOsInfo().withWindowsOsState(WindowsOsState.SYSPREP_APPLIED))
                        .withLinuxOsInfo(new LinuxOsInfo().withLinuxOsState(LinuxOsState.DEPROVISION_APPLIED)))
                .withVhd(
                    new CustomImagePropertiesCustom()
                        .withImageName("lxlhuavkrm")
                        .withSysPrep(true)
                        .withOsType(CustomImageOsType.NONE))
                .withDescription("mkxettcsloj")
                .withAuthor("qid")
                .withManagedImageId("qxjhqxcsqhtkbtnq")
                .withManagedSnapshotId("ngldmbiipsn")
                .withDataDiskStorageInfo(
                    Arrays.asList(new DataDiskStorageTypeInfo().withLun("qkzn").withStorageType(StorageType.PREMIUM)))
                .withCustomImagePlan(
                    new CustomImagePropertiesFromPlan().withId("xricctkwmuqq").withPublisher("jxeiy").withOffer("esrw"))
                .withIsPlanAuthorized(false)
                .create();

        Assertions.assertEquals("cifhocjxwkl", response.location());
        Assertions.assertEquals("rvtxvcmufunlc", response.tags().get("xxvir"));
        Assertions.assertEquals("gqphrgfnzhctmjts", response.vm().sourceVmId());
        Assertions.assertEquals(WindowsOsState.SYSPREP_APPLIED, response.vm().windowsOsInfo().windowsOsState());
        Assertions.assertEquals(LinuxOsState.NON_DEPROVISIONED, response.vm().linuxOsInfo().linuxOsState());
        Assertions.assertEquals("arpzeqacdldtzm", response.vhd().imageName());
        Assertions.assertEquals(false, response.vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.LINUX, response.vhd().osType());
        Assertions.assertEquals("cpczshnuqnd", response.description());
        Assertions.assertEquals("zupfkhuytuszxhm", response.author());
        Assertions.assertEquals("egw", response.managedImageId());
        Assertions.assertEquals("ukvzwydwttha", response.managedSnapshotId());
        Assertions.assertEquals("skjivbsshajqfuk", response.dataDiskStorageInfo().get(0).lun());
        Assertions.assertEquals(StorageType.STANDARD, response.dataDiskStorageInfo().get(0).storageType());
        Assertions.assertEquals("nbdbzsxcwqqr", response.customImagePlan().id());
        Assertions.assertEquals("pcbbprtugav", response.customImagePlan().publisher());
        Assertions.assertEquals("bcyksivmfogd", response.customImagePlan().offer());
        Assertions.assertEquals(true, response.isPlanAuthorized());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
