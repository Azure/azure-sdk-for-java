// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.CustomImage;
import com.azure.resourcemanager.devtestlabs.models.CustomImageOsType;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesCustom;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromPlan;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromVm;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CustomImagesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"vm\":{\"sourceVmId\":\"peeksnbksdqhjv\"},\"vhd\":{\"imageName\":\"sl\",\"sysPrep\":true,\"osType\":\"Windows\"},\"description\":\"tcpoqma\",\"author\":\"wqjwgok\",\"creationDate\":\"2021-03-20T05:15:41Z\",\"managedImageId\":\"jj\",\"managedSnapshotId\":\"ybwfdbkjb\",\"dataDiskStorageInfo\":[],\"customImagePlan\":{\"id\":\"vkzykjtjknsxf\",\"publisher\":\"shcdpkupnqrmg\",\"offer\":\"bpkuwxeoio\"},\"isPlanAuthorized\":true,\"provisioningState\":\"Succeeded\",\"uniqueIdentifier\":\"jzwfb\"},\"location\":\"yay\",\"tags\":{\"bfw\":\"fz\",\"dew\":\"rzx\"},\"id\":\"rsxkr\",\"name\":\"lbjazejww\",\"type\":\"iyoypsuhbrnnhj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomImage response =
            manager
                .customImages()
                .define("zrsq")
                .withRegion("kileplkcsmknhwtb")
                .withExistingLab("vvlfntymtp", "iwenazero")
                .withTags(mapOf("bdgwumgxdgd", "dorvvmqfloy", "tm", "pabgdexjddvjsaqw"))
                .withVm(new CustomImagePropertiesFromVm().withSourceVmId("xkdnwqapf"))
                .withVhd(
                    new CustomImagePropertiesCustom()
                        .withImageName("vessm")
                        .withSysPrep(false)
                        .withOsType(CustomImageOsType.LINUX))
                .withDescription("uipldqq")
                .withAuthor("ekvalblhtjq")
                .withManagedImageId("wehtaemxh")
                .withManagedSnapshotId("ysev")
                .withDataDiskStorageInfo(Arrays.asList())
                .withCustomImagePlan(
                    new CustomImagePropertiesFromPlan()
                        .withId("zrrryv")
                        .withPublisher("mipskdyzatv")
                        .withOffer("zkaftjvvrux"))
                .withIsPlanAuthorized(true)
                .create();

        Assertions.assertEquals("yay", response.location());
        Assertions.assertEquals("fz", response.tags().get("bfw"));
        Assertions.assertEquals("peeksnbksdqhjv", response.vm().sourceVmId());
        Assertions.assertEquals("sl", response.vhd().imageName());
        Assertions.assertEquals(true, response.vhd().sysPrep());
        Assertions.assertEquals(CustomImageOsType.WINDOWS, response.vhd().osType());
        Assertions.assertEquals("tcpoqma", response.description());
        Assertions.assertEquals("wqjwgok", response.author());
        Assertions.assertEquals("jj", response.managedImageId());
        Assertions.assertEquals("ybwfdbkjb", response.managedSnapshotId());
        Assertions.assertEquals("vkzykjtjknsxf", response.customImagePlan().id());
        Assertions.assertEquals("shcdpkupnqrmg", response.customImagePlan().publisher());
        Assertions.assertEquals("bpkuwxeoio", response.customImagePlan().offer());
        Assertions.assertEquals(true, response.isPlanAuthorized());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
