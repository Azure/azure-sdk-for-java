// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.fluent.models.ScheduleInner;
import com.azure.resourcemanager.devtestlabs.models.DayDetails;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.HourDetails;
import com.azure.resourcemanager.devtestlabs.models.NotificationSettings;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import com.azure.resourcemanager.devtestlabs.models.WeekDetails;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class VirtualMachineSchedulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"status\":\"Enabled\",\"taskType\":\"bcyanrfvqtvk\",\"weeklyRecurrence\":{\"weekdays\":[],\"time\":\"ogxkfnaoa\"},\"dailyRecurrence\":{\"time\":\"hccto\"},\"hourlyRecurrence\":{\"minute\":117108528},\"timeZoneId\":\"rnskby\",\"notificationSettings\":{\"status\":\"Disabled\",\"timeInMinutes\":1625605597,\"webhookUrl\":\"gx\",\"emailRecipient\":\"ajpxecxqnwhscoza\",\"notificationLocale\":\"vgxsm\"},\"createdDate\":\"2021-02-09T13:40:50Z\",\"targetResourceId\":\"wirfljf\",\"provisioningState\":\"xqou\",\"uniqueIdentifier\":\"ud\"},\"location\":\"mckaprh\",\"tags\":{\"moqueqihkkyow\":\"iijgencd\",\"proqk\":\"tjouwhldxwhi\"},\"id\":\"mfxm\",\"name\":\"vprstv\",\"type\":\"itbfjtdy\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .virtualMachineSchedules()
                .createOrUpdateWithResponse(
                    "fjzc",
                    "aaxoialahfxwcc",
                    "kdxkuk",
                    "kczynuhhoqeqsh",
                    new ScheduleInner()
                        .withLocation("vsnvlaq")
                        .withTags(mapOf("qkokbczothy", "yzawatu"))
                        .withStatus(EnableStatus.DISABLED)
                        .withTaskType("q")
                        .withWeeklyRecurrence(new WeekDetails().withWeekdays(Arrays.asList()).withTime("qolnthbbn"))
                        .withDailyRecurrence(new DayDetails().withTime("ukwdrnzkjthfce"))
                        .withHourlyRecurrence(new HourDetails().withMinute(310473023))
                        .withTimeZoneId("mlfuyfjbp")
                        .withNotificationSettings(
                            new NotificationSettings()
                                .withStatus(EnableStatus.DISABLED)
                                .withTimeInMinutes(1484462734)
                                .withWebhookUrl("ufzcqyjmqrfu")
                                .withEmailRecipient("cuselq")
                                .withNotificationLocale("sazrhxuddqmdtff"))
                        .withTargetResourceId("rkkhmwdmdlgy"),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("mckaprh", response.location());
        Assertions.assertEquals("iijgencd", response.tags().get("moqueqihkkyow"));
        Assertions.assertEquals(EnableStatus.ENABLED, response.status());
        Assertions.assertEquals("bcyanrfvqtvk", response.taskType());
        Assertions.assertEquals("ogxkfnaoa", response.weeklyRecurrence().time());
        Assertions.assertEquals("hccto", response.dailyRecurrence().time());
        Assertions.assertEquals(117108528, response.hourlyRecurrence().minute());
        Assertions.assertEquals("rnskby", response.timeZoneId());
        Assertions.assertEquals(EnableStatus.DISABLED, response.notificationSettings().status());
        Assertions.assertEquals(1625605597, response.notificationSettings().timeInMinutes());
        Assertions.assertEquals("gx", response.notificationSettings().webhookUrl());
        Assertions.assertEquals("ajpxecxqnwhscoza", response.notificationSettings().emailRecipient());
        Assertions.assertEquals("vgxsm", response.notificationSettings().notificationLocale());
        Assertions.assertEquals("wirfljf", response.targetResourceId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
