// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.ServiceFabric;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServiceFabricsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"externalServiceFabricId\":\"iihfymkoui\",\"environmentId\":\"eseuugci\",\"applicableSchedule\":{\"properties\":{\"labVmsShutdown\":{\"properties\":{},\"location\":\"ogsmgbvmtd\",\"tags\":{\"veglabtvkbiwzn\":\"bebjn\"},\"id\":\"tfgfic\",\"name\":\"dyhi\",\"type\":\"paczmuh\"},\"labVmsStartup\":{\"properties\":{},\"location\":\"akznhokhoitwhr\",\"tags\":{\"jpg\":\"mmazdnckid\",\"bssdpjeyoqxd\":\"hzqpxzbawkikcdgf\"},\"id\":\"decfiwhagxsure\",\"name\":\"qrshzzbgullcxiq\",\"type\":\"zjk\"}},\"location\":\"xdupnamg\",\"tags\":{\"igdyd\":\"uigdmfivjqterdq\",\"tyhhmvfxlapja\":\"ghpcvrwqirvt\",\"okqlujqgir\":\"odmkrrwepgqv\",\"pqvctsfaeuhwwsk\":\"bwlyvxc\"},\"id\":\"stvzuzhasupml\",\"name\":\"pdpg\",\"type\":\"vzqazvbkarkptg\"},\"provisioningState\":\"Succeeded\",\"uniqueIdentifier\":\"eq\"},\"location\":\"gubabyjde\",\"tags\":{\"emexmnvkvmuwr\":\"cseydz\"},\"id\":\"lniwmcpmrrd\",\"name\":\"hvdvmi\",\"type\":\"hbeae\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DevTestLabsManager manager = DevTestLabsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ServiceFabric response = manager.serviceFabrics()
            .define("mnnidmdia")
            .withRegion("tkvi")
            .withExistingUser("dpwrp", "fpcfjf", "zlgzawkgyepey")
            .withTags(mapOf("dpcmhjh", "fliwoynguuzhwvl", "ym", "usybke"))
            .withExternalServiceFabricId("zxkzrntmkct")
            .withEnvironmentId("uos")
            .create();

        Assertions.assertEquals("gubabyjde", response.location());
        Assertions.assertEquals("cseydz", response.tags().get("emexmnvkvmuwr"));
        Assertions.assertEquals("iihfymkoui", response.externalServiceFabricId());
        Assertions.assertEquals("eseuugci", response.environmentId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
