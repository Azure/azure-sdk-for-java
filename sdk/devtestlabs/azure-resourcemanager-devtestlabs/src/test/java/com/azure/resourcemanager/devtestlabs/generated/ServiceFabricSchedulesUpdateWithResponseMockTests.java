// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.devtestlabs.DevTestLabsManager;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.Schedule;
import com.azure.resourcemanager.devtestlabs.models.ScheduleFragment;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServiceFabricSchedulesUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"status\":\"Disabled\",\"taskType\":\"bzzxezm\",\"weeklyRecurrence\":{\"weekdays\":[\"gpjeuxsphlokfp\",\"ijpdvzvfbhwbdquf\"],\"time\":\"gnrglaqrwyamb\"},\"dailyRecurrence\":{\"time\":\"febzxf\"},\"hourlyRecurrence\":{\"minute\":1911300905},\"timeZoneId\":\"ibhlenntrv\",\"notificationSettings\":{\"status\":\"Enabled\",\"timeInMinutes\":1274004293,\"webhookUrl\":\"u\",\"emailRecipient\":\"zmlghny\",\"notificationLocale\":\"lpyeu\"},\"createdDate\":\"2021-04-16T06:06:20Z\",\"targetResourceId\":\"dixqbo\",\"provisioningState\":\"vhh\",\"uniqueIdentifier\":\"qe\"},\"location\":\"at\",\"tags\":{\"nmtsdixc\":\"znmg\",\"ibmg\":\"w\",\"gair\":\"ymncjc\",\"fbhtleberp\":\"cqzoofjnqjsve\"},\"id\":\"ljekn\",\"name\":\"qnwjjq\",\"type\":\"owkdnjr\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DevTestLabsManager manager =
            DevTestLabsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Schedule response =
            manager
                .serviceFabricSchedules()
                .updateWithResponse(
                    "kj",
                    "oywlunpipcwyb",
                    "zfn",
                    "npatpftsae",
                    "wf",
                    new ScheduleFragment().withTags(mapOf("cylht", "orpwaltzwugexojf", "dr", "hthvazjpwex")),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("at", response.location());
        Assertions.assertEquals("znmg", response.tags().get("nmtsdixc"));
        Assertions.assertEquals(EnableStatus.DISABLED, response.status());
        Assertions.assertEquals("bzzxezm", response.taskType());
        Assertions.assertEquals("gpjeuxsphlokfp", response.weeklyRecurrence().weekdays().get(0));
        Assertions.assertEquals("gnrglaqrwyamb", response.weeklyRecurrence().time());
        Assertions.assertEquals("febzxf", response.dailyRecurrence().time());
        Assertions.assertEquals(1911300905, response.hourlyRecurrence().minute());
        Assertions.assertEquals("ibhlenntrv", response.timeZoneId());
        Assertions.assertEquals(EnableStatus.ENABLED, response.notificationSettings().status());
        Assertions.assertEquals(1274004293, response.notificationSettings().timeInMinutes());
        Assertions.assertEquals("u", response.notificationSettings().webhookUrl());
        Assertions.assertEquals("zmlghny", response.notificationSettings().emailRecipient());
        Assertions.assertEquals("lpyeu", response.notificationSettings().notificationLocale());
        Assertions.assertEquals("dixqbo", response.targetResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
