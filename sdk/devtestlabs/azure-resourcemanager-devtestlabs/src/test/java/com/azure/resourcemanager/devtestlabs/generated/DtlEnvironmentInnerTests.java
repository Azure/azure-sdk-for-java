// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.devtestlabs.fluent.models.DtlEnvironmentInner;
import com.azure.resourcemanager.devtestlabs.models.ArmTemplateParameterProperties;
import com.azure.resourcemanager.devtestlabs.models.EnvironmentDeploymentProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DtlEnvironmentInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DtlEnvironmentInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"deploymentProperties\":{\"armTemplateId\":\"smjqfrddgam\",\"parameters\":[{\"name\":\"os\",\"value\":\"ju\"},{\"name\":\"fcdis\",\"value\":\"rnxzh\"},{\"name\":\"exrxzbujrtrhq\",\"value\":\"revkhgnlnzo\"}]},\"armTemplateDisplayName\":\"lrpiqywnc\",\"resourceGroupId\":\"tszcofizehtdhgb\",\"createdByUser\":\"vreljea\",\"provisioningState\":\"rvzmlovuana\",\"uniqueIdentifier\":\"cxlpmjerb\"},\"location\":\"kelvidizozsdb\",\"tags\":{\"n\":\"jmonfdgn\",\"keifzzhmkdasv\":\"ypuuwwltvuqjctze\"},\"id\":\"lyhb\",\"name\":\"cu\",\"type\":\"chxgs\"}")
                .toObject(DtlEnvironmentInner.class);
        Assertions.assertEquals("kelvidizozsdb", model.location());
        Assertions.assertEquals("jmonfdgn", model.tags().get("n"));
        Assertions.assertEquals("smjqfrddgam", model.deploymentProperties().armTemplateId());
        Assertions.assertEquals("os", model.deploymentProperties().parameters().get(0).name());
        Assertions.assertEquals("ju", model.deploymentProperties().parameters().get(0).value());
        Assertions.assertEquals("lrpiqywnc", model.armTemplateDisplayName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DtlEnvironmentInner model =
            new DtlEnvironmentInner()
                .withLocation("kelvidizozsdb")
                .withTags(mapOf("n", "jmonfdgn", "keifzzhmkdasv", "ypuuwwltvuqjctze"))
                .withDeploymentProperties(
                    new EnvironmentDeploymentProperties()
                        .withArmTemplateId("smjqfrddgam")
                        .withParameters(
                            Arrays
                                .asList(
                                    new ArmTemplateParameterProperties().withName("os").withValue("ju"),
                                    new ArmTemplateParameterProperties().withName("fcdis").withValue("rnxzh"),
                                    new ArmTemplateParameterProperties()
                                        .withName("exrxzbujrtrhq")
                                        .withValue("revkhgnlnzo"))))
                .withArmTemplateDisplayName("lrpiqywnc");
        model = BinaryData.fromObject(model).toObject(DtlEnvironmentInner.class);
        Assertions.assertEquals("kelvidizozsdb", model.location());
        Assertions.assertEquals("jmonfdgn", model.tags().get("n"));
        Assertions.assertEquals("smjqfrddgam", model.deploymentProperties().armTemplateId());
        Assertions.assertEquals("os", model.deploymentProperties().parameters().get(0).name());
        Assertions.assertEquals("ju", model.deploymentProperties().parameters().get(0).value());
        Assertions.assertEquals("lrpiqywnc", model.armTemplateDisplayName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
