// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about a VM from which a formula is to be created.
 */
@Fluent
public final class FormulaPropertiesFromVm implements JsonSerializable<FormulaPropertiesFromVm> {
    /*
     * The identifier of the VM from which a formula is to be created.
     */
    private String labVmId;

    /**
     * Creates an instance of FormulaPropertiesFromVm class.
     */
    public FormulaPropertiesFromVm() {
    }

    /**
     * Get the labVmId property: The identifier of the VM from which a formula is to be created.
     * 
     * @return the labVmId value.
     */
    public String labVmId() {
        return this.labVmId;
    }

    /**
     * Set the labVmId property: The identifier of the VM from which a formula is to be created.
     * 
     * @param labVmId the labVmId value to set.
     * @return the FormulaPropertiesFromVm object itself.
     */
    public FormulaPropertiesFromVm withLabVmId(String labVmId) {
        this.labVmId = labVmId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("labVmId", this.labVmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FormulaPropertiesFromVm from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FormulaPropertiesFromVm if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FormulaPropertiesFromVm.
     */
    public static FormulaPropertiesFromVm fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FormulaPropertiesFromVm deserializedFormulaPropertiesFromVm = new FormulaPropertiesFromVm();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("labVmId".equals(fieldName)) {
                    deserializedFormulaPropertiesFromVm.labVmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFormulaPropertiesFromVm;
        });
    }
}
