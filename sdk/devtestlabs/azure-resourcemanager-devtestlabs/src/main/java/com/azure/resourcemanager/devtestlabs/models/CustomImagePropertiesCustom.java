// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for creating a custom image from a VHD.
 */
@Fluent
public final class CustomImagePropertiesCustom implements JsonSerializable<CustomImagePropertiesCustom> {
    /*
     * The image name.
     */
    private String imageName;

    /*
     * Indicates whether sysprep has been run on the VHD.
     */
    private Boolean sysPrep;

    /*
     * The OS type of the custom image (i.e. Windows, Linux)
     */
    private CustomImageOsType osType;

    /**
     * Creates an instance of CustomImagePropertiesCustom class.
     */
    public CustomImagePropertiesCustom() {
    }

    /**
     * Get the imageName property: The image name.
     * 
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Set the imageName property: The image name.
     * 
     * @param imageName the imageName value to set.
     * @return the CustomImagePropertiesCustom object itself.
     */
    public CustomImagePropertiesCustom withImageName(String imageName) {
        this.imageName = imageName;
        return this;
    }

    /**
     * Get the sysPrep property: Indicates whether sysprep has been run on the VHD.
     * 
     * @return the sysPrep value.
     */
    public Boolean sysPrep() {
        return this.sysPrep;
    }

    /**
     * Set the sysPrep property: Indicates whether sysprep has been run on the VHD.
     * 
     * @param sysPrep the sysPrep value to set.
     * @return the CustomImagePropertiesCustom object itself.
     */
    public CustomImagePropertiesCustom withSysPrep(Boolean sysPrep) {
        this.sysPrep = sysPrep;
        return this;
    }

    /**
     * Get the osType property: The OS type of the custom image (i.e. Windows, Linux).
     * 
     * @return the osType value.
     */
    public CustomImageOsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The OS type of the custom image (i.e. Windows, Linux).
     * 
     * @param osType the osType value to set.
     * @return the CustomImagePropertiesCustom object itself.
     */
    public CustomImagePropertiesCustom withOsType(CustomImageOsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property osType in model CustomImagePropertiesCustom"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomImagePropertiesCustom.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeStringField("imageName", this.imageName);
        jsonWriter.writeBooleanField("sysPrep", this.sysPrep);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomImagePropertiesCustom from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomImagePropertiesCustom if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomImagePropertiesCustom.
     */
    public static CustomImagePropertiesCustom fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomImagePropertiesCustom deserializedCustomImagePropertiesCustom = new CustomImagePropertiesCustom();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("osType".equals(fieldName)) {
                    deserializedCustomImagePropertiesCustom.osType = CustomImageOsType.fromString(reader.getString());
                } else if ("imageName".equals(fieldName)) {
                    deserializedCustomImagePropertiesCustom.imageName = reader.getString();
                } else if ("sysPrep".equals(fieldName)) {
                    deserializedCustomImagePropertiesCustom.sysPrep = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomImagePropertiesCustom;
        });
    }
}
