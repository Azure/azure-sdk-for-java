// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a network port.
 */
@Fluent
public final class Port implements JsonSerializable<Port> {
    /*
     * Protocol type of the port.
     */
    private TransportProtocol transportProtocol;

    /*
     * Backend port of the target virtual machine.
     */
    private Integer backendPort;

    /**
     * Creates an instance of Port class.
     */
    public Port() {
    }

    /**
     * Get the transportProtocol property: Protocol type of the port.
     * 
     * @return the transportProtocol value.
     */
    public TransportProtocol transportProtocol() {
        return this.transportProtocol;
    }

    /**
     * Set the transportProtocol property: Protocol type of the port.
     * 
     * @param transportProtocol the transportProtocol value to set.
     * @return the Port object itself.
     */
    public Port withTransportProtocol(TransportProtocol transportProtocol) {
        this.transportProtocol = transportProtocol;
        return this;
    }

    /**
     * Get the backendPort property: Backend port of the target virtual machine.
     * 
     * @return the backendPort value.
     */
    public Integer backendPort() {
        return this.backendPort;
    }

    /**
     * Set the backendPort property: Backend port of the target virtual machine.
     * 
     * @param backendPort the backendPort value to set.
     * @return the Port object itself.
     */
    public Port withBackendPort(Integer backendPort) {
        this.backendPort = backendPort;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("transportProtocol",
            this.transportProtocol == null ? null : this.transportProtocol.toString());
        jsonWriter.writeNumberField("backendPort", this.backendPort);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Port from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Port if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Port.
     */
    public static Port fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Port deserializedPort = new Port();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("transportProtocol".equals(fieldName)) {
                    deserializedPort.transportProtocol = TransportProtocol.fromString(reader.getString());
                } else if ("backendPort".equals(fieldName)) {
                    deserializedPort.backendPort = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPort;
        });
    }
}
