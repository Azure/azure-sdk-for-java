// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a service fabric.
 */
@Fluent
public final class ServiceFabricPropertiesInner implements JsonSerializable<ServiceFabricPropertiesInner> {
    /*
     * The backing service fabric resource's id
     */
    private String externalServiceFabricId;

    /*
     * The resource id of the environment under which the service fabric resource is present
     */
    private String environmentId;

    /*
     * The applicable schedule for the virtual machine.
     */
    private ApplicableScheduleInner applicableSchedule;

    /*
     * The provisioning status of the resource.
     */
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    private String uniqueIdentifier;

    /**
     * Creates an instance of ServiceFabricPropertiesInner class.
     */
    public ServiceFabricPropertiesInner() {
    }

    /**
     * Get the externalServiceFabricId property: The backing service fabric resource's id.
     * 
     * @return the externalServiceFabricId value.
     */
    public String externalServiceFabricId() {
        return this.externalServiceFabricId;
    }

    /**
     * Set the externalServiceFabricId property: The backing service fabric resource's id.
     * 
     * @param externalServiceFabricId the externalServiceFabricId value to set.
     * @return the ServiceFabricPropertiesInner object itself.
     */
    public ServiceFabricPropertiesInner withExternalServiceFabricId(String externalServiceFabricId) {
        this.externalServiceFabricId = externalServiceFabricId;
        return this;
    }

    /**
     * Get the environmentId property: The resource id of the environment under which the service fabric resource is
     * present.
     * 
     * @return the environmentId value.
     */
    public String environmentId() {
        return this.environmentId;
    }

    /**
     * Set the environmentId property: The resource id of the environment under which the service fabric resource is
     * present.
     * 
     * @param environmentId the environmentId value to set.
     * @return the ServiceFabricPropertiesInner object itself.
     */
    public ServiceFabricPropertiesInner withEnvironmentId(String environmentId) {
        this.environmentId = environmentId;
        return this;
    }

    /**
     * Get the applicableSchedule property: The applicable schedule for the virtual machine.
     * 
     * @return the applicableSchedule value.
     */
    public ApplicableScheduleInner applicableSchedule() {
        return this.applicableSchedule;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     * 
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicableSchedule() != null) {
            applicableSchedule().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("externalServiceFabricId", this.externalServiceFabricId);
        jsonWriter.writeStringField("environmentId", this.environmentId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceFabricPropertiesInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceFabricPropertiesInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceFabricPropertiesInner.
     */
    public static ServiceFabricPropertiesInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceFabricPropertiesInner deserializedServiceFabricPropertiesInner = new ServiceFabricPropertiesInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("externalServiceFabricId".equals(fieldName)) {
                    deserializedServiceFabricPropertiesInner.externalServiceFabricId = reader.getString();
                } else if ("environmentId".equals(fieldName)) {
                    deserializedServiceFabricPropertiesInner.environmentId = reader.getString();
                } else if ("applicableSchedule".equals(fieldName)) {
                    deserializedServiceFabricPropertiesInner.applicableSchedule
                        = ApplicableScheduleInner.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedServiceFabricPropertiesInner.provisioningState = reader.getString();
                } else if ("uniqueIdentifier".equals(fieldName)) {
                    deserializedServiceFabricPropertiesInner.uniqueIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceFabricPropertiesInner;
        });
    }
}
