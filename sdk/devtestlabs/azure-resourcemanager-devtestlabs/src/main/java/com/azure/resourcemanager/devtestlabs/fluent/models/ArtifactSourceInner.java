// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devtestlabs.models.EnableStatus;
import com.azure.resourcemanager.devtestlabs.models.SourceControlType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Properties of an artifact source.
 */
@Fluent
public final class ArtifactSourceInner extends Resource {
    /*
     * The properties of the resource.
     */
    private ArtifactSourceProperties innerProperties = new ArtifactSourceProperties();

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ArtifactSourceInner class.
     */
    public ArtifactSourceInner() {
    }

    /**
     * Get the innerProperties property: The properties of the resource.
     * 
     * @return the innerProperties value.
     */
    private ArtifactSourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArtifactSourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArtifactSourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the displayName property: The artifact source's display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: The artifact source's display name.
     * 
     * @param displayName the displayName value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the uri property: The artifact source's URI.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.innerProperties() == null ? null : this.innerProperties().uri();
    }

    /**
     * Set the uri property: The artifact source's URI.
     * 
     * @param uri the uri value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withUri(String uri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withUri(uri);
        return this;
    }

    /**
     * Get the sourceType property: The artifact source's type.
     * 
     * @return the sourceType value.
     */
    public SourceControlType sourceType() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceType();
    }

    /**
     * Set the sourceType property: The artifact source's type.
     * 
     * @param sourceType the sourceType value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withSourceType(SourceControlType sourceType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withSourceType(sourceType);
        return this;
    }

    /**
     * Get the folderPath property: The folder containing artifacts.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.innerProperties() == null ? null : this.innerProperties().folderPath();
    }

    /**
     * Set the folderPath property: The folder containing artifacts.
     * 
     * @param folderPath the folderPath value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withFolderPath(String folderPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withFolderPath(folderPath);
        return this;
    }

    /**
     * Get the armTemplateFolderPath property: The folder containing Azure Resource Manager templates.
     * 
     * @return the armTemplateFolderPath value.
     */
    public String armTemplateFolderPath() {
        return this.innerProperties() == null ? null : this.innerProperties().armTemplateFolderPath();
    }

    /**
     * Set the armTemplateFolderPath property: The folder containing Azure Resource Manager templates.
     * 
     * @param armTemplateFolderPath the armTemplateFolderPath value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withArmTemplateFolderPath(String armTemplateFolderPath) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withArmTemplateFolderPath(armTemplateFolderPath);
        return this;
    }

    /**
     * Get the branchRef property: The artifact source's branch reference.
     * 
     * @return the branchRef value.
     */
    public String branchRef() {
        return this.innerProperties() == null ? null : this.innerProperties().branchRef();
    }

    /**
     * Set the branchRef property: The artifact source's branch reference.
     * 
     * @param branchRef the branchRef value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withBranchRef(String branchRef) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withBranchRef(branchRef);
        return this;
    }

    /**
     * Get the securityToken property: The security token to authenticate to the artifact source.
     * 
     * @return the securityToken value.
     */
    public String securityToken() {
        return this.innerProperties() == null ? null : this.innerProperties().securityToken();
    }

    /**
     * Set the securityToken property: The security token to authenticate to the artifact source.
     * 
     * @param securityToken the securityToken value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withSecurityToken(String securityToken) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withSecurityToken(securityToken);
        return this;
    }

    /**
     * Get the status property: Indicates if the artifact source is enabled (values: Enabled, Disabled).
     * 
     * @return the status value.
     */
    public EnableStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Set the status property: Indicates if the artifact source is enabled (values: Enabled, Disabled).
     * 
     * @param status the status value to set.
     * @return the ArtifactSourceInner object itself.
     */
    public ArtifactSourceInner withStatus(EnableStatus status) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ArtifactSourceProperties();
        }
        this.innerProperties().withStatus(status);
        return this;
    }

    /**
     * Get the createdDate property: The artifact source's creation date.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.innerProperties() == null ? null : this.innerProperties().createdDate();
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     * 
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.innerProperties() == null ? null : this.innerProperties().uniqueIdentifier();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model ArtifactSourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ArtifactSourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactSourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactSourceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ArtifactSourceInner.
     */
    public static ArtifactSourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactSourceInner deserializedArtifactSourceInner = new ArtifactSourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedArtifactSourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedArtifactSourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedArtifactSourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedArtifactSourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedArtifactSourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedArtifactSourceInner.innerProperties = ArtifactSourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactSourceInner;
        });
    }
}
