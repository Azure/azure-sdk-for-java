// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of a weekly schedule. */
@Fluent
public final class WeekDetails {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WeekDetails.class);

    /*
     * The days of the week for which the schedule is set (e.g. Sunday, Monday,
     * Tuesday, etc.).
     */
    @JsonProperty(value = "weekdays")
    private List<String> weekdays;

    /*
     * The time of the day the schedule will occur.
     */
    @JsonProperty(value = "time")
    private String time;

    /**
     * Get the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @return the weekdays value.
     */
    public List<String> weekdays() {
        return this.weekdays;
    }

    /**
     * Set the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     *
     * @param weekdays the weekdays value to set.
     * @return the WeekDetails object itself.
     */
    public WeekDetails withWeekdays(List<String> weekdays) {
        this.weekdays = weekdays;
        return this;
    }

    /**
     * Get the time property: The time of the day the schedule will occur.
     *
     * @return the time value.
     */
    public String time() {
        return this.time;
    }

    /**
     * Set the time property: The time of the day the schedule will occur.
     *
     * @param time the time value to set.
     * @return the WeekDetails object itself.
     */
    public WeekDetails withTime(String time) {
        this.time = time;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
