// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of a weekly schedule.
 */
@Fluent
public final class WeekDetails implements JsonSerializable<WeekDetails> {
    /*
     * The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.).
     */
    private List<String> weekdays;

    /*
     * The time of the day the schedule will occur.
     */
    private String time;

    /**
     * Creates an instance of WeekDetails class.
     */
    public WeekDetails() {
    }

    /**
     * Get the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     * 
     * @return the weekdays value.
     */
    public List<String> weekdays() {
        return this.weekdays;
    }

    /**
     * Set the weekdays property: The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday,
     * etc.).
     * 
     * @param weekdays the weekdays value to set.
     * @return the WeekDetails object itself.
     */
    public WeekDetails withWeekdays(List<String> weekdays) {
        this.weekdays = weekdays;
        return this;
    }

    /**
     * Get the time property: The time of the day the schedule will occur.
     * 
     * @return the time value.
     */
    public String time() {
        return this.time;
    }

    /**
     * Set the time property: The time of the day the schedule will occur.
     * 
     * @param time the time value to set.
     * @return the WeekDetails object itself.
     */
    public WeekDetails withTime(String time) {
        this.time = time;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("weekdays", this.weekdays, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("time", this.time);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WeekDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WeekDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WeekDetails.
     */
    public static WeekDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WeekDetails deserializedWeekDetails = new WeekDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("weekdays".equals(fieldName)) {
                    List<String> weekdays = reader.readArray(reader1 -> reader1.getString());
                    deserializedWeekDetails.weekdays = weekdays;
                } else if ("time".equals(fieldName)) {
                    deserializedWeekDetails.time = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWeekDetails;
        });
    }
}
