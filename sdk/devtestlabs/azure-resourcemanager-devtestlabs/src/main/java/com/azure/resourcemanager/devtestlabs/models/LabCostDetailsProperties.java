// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a lab cost item.
 */
@Fluent
public final class LabCostDetailsProperties implements JsonSerializable<LabCostDetailsProperties> {
    /*
     * The date of the cost item.
     */
    private OffsetDateTime date;

    /*
     * The cost component of the cost item.
     */
    private Double cost;

    /*
     * The type of the cost.
     */
    private CostType costType;

    /**
     * Creates an instance of LabCostDetailsProperties class.
     */
    public LabCostDetailsProperties() {
    }

    /**
     * Get the date property: The date of the cost item.
     * 
     * @return the date value.
     */
    public OffsetDateTime date() {
        return this.date;
    }

    /**
     * Set the date property: The date of the cost item.
     * 
     * @param date the date value to set.
     * @return the LabCostDetailsProperties object itself.
     */
    public LabCostDetailsProperties withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }

    /**
     * Get the cost property: The cost component of the cost item.
     * 
     * @return the cost value.
     */
    public Double cost() {
        return this.cost;
    }

    /**
     * Set the cost property: The cost component of the cost item.
     * 
     * @param cost the cost value to set.
     * @return the LabCostDetailsProperties object itself.
     */
    public LabCostDetailsProperties withCost(Double cost) {
        this.cost = cost;
        return this;
    }

    /**
     * Get the costType property: The type of the cost.
     * 
     * @return the costType value.
     */
    public CostType costType() {
        return this.costType;
    }

    /**
     * Set the costType property: The type of the cost.
     * 
     * @param costType the costType value to set.
     * @return the LabCostDetailsProperties object itself.
     */
    public LabCostDetailsProperties withCostType(CostType costType) {
        this.costType = costType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("date",
            this.date == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.date));
        jsonWriter.writeNumberField("cost", this.cost);
        jsonWriter.writeStringField("costType", this.costType == null ? null : this.costType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabCostDetailsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabCostDetailsProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabCostDetailsProperties.
     */
    public static LabCostDetailsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabCostDetailsProperties deserializedLabCostDetailsProperties = new LabCostDetailsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("date".equals(fieldName)) {
                    deserializedLabCostDetailsProperties.date = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("cost".equals(fieldName)) {
                    deserializedLabCostDetailsProperties.cost = reader.getNullable(JsonReader::getDouble);
                } else if ("costType".equals(fieldName)) {
                    deserializedLabCostDetailsProperties.costType = CostType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabCostDetailsProperties;
        });
    }
}
