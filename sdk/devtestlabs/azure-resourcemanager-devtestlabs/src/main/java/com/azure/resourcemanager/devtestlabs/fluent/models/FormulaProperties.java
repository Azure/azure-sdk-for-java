// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devtestlabs.models.FormulaPropertiesFromVm;
import com.azure.resourcemanager.devtestlabs.models.LabVirtualMachineCreationParameter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of a formula.
 */
@Fluent
public final class FormulaProperties implements JsonSerializable<FormulaProperties> {
    /*
     * The description of the formula.
     */
    private String description;

    /*
     * The author of the formula.
     */
    private String author;

    /*
     * The OS type of the formula.
     */
    private String osType;

    /*
     * The creation date of the formula.
     */
    private OffsetDateTime creationDate;

    /*
     * The content of the formula.
     */
    private LabVirtualMachineCreationParameter formulaContent;

    /*
     * Information about a VM from which a formula is to be created.
     */
    private FormulaPropertiesFromVm vm;

    /*
     * The provisioning status of the resource.
     */
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    private String uniqueIdentifier;

    /**
     * Creates an instance of FormulaProperties class.
     */
    public FormulaProperties() {
    }

    /**
     * Get the description property: The description of the formula.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the formula.
     * 
     * @param description the description value to set.
     * @return the FormulaProperties object itself.
     */
    public FormulaProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the author property: The author of the formula.
     * 
     * @return the author value.
     */
    public String author() {
        return this.author;
    }

    /**
     * Get the osType property: The OS type of the formula.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The OS type of the formula.
     * 
     * @param osType the osType value to set.
     * @return the FormulaProperties object itself.
     */
    public FormulaProperties withOsType(String osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the creationDate property: The creation date of the formula.
     * 
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the formulaContent property: The content of the formula.
     * 
     * @return the formulaContent value.
     */
    public LabVirtualMachineCreationParameter formulaContent() {
        return this.formulaContent;
    }

    /**
     * Set the formulaContent property: The content of the formula.
     * 
     * @param formulaContent the formulaContent value to set.
     * @return the FormulaProperties object itself.
     */
    public FormulaProperties withFormulaContent(LabVirtualMachineCreationParameter formulaContent) {
        this.formulaContent = formulaContent;
        return this;
    }

    /**
     * Get the vm property: Information about a VM from which a formula is to be created.
     * 
     * @return the vm value.
     */
    public FormulaPropertiesFromVm vm() {
        return this.vm;
    }

    /**
     * Set the vm property: Information about a VM from which a formula is to be created.
     * 
     * @param vm the vm value to set.
     * @return the FormulaProperties object itself.
     */
    public FormulaProperties withVm(FormulaPropertiesFromVm vm) {
        this.vm = vm;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     * 
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (formulaContent() != null) {
            formulaContent().validate();
        }
        if (vm() != null) {
            vm().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("osType", this.osType);
        jsonWriter.writeJsonField("formulaContent", this.formulaContent);
        jsonWriter.writeJsonField("vm", this.vm);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FormulaProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FormulaProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FormulaProperties.
     */
    public static FormulaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FormulaProperties deserializedFormulaProperties = new FormulaProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedFormulaProperties.description = reader.getString();
                } else if ("author".equals(fieldName)) {
                    deserializedFormulaProperties.author = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedFormulaProperties.osType = reader.getString();
                } else if ("creationDate".equals(fieldName)) {
                    deserializedFormulaProperties.creationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("formulaContent".equals(fieldName)) {
                    deserializedFormulaProperties.formulaContent = LabVirtualMachineCreationParameter.fromJson(reader);
                } else if ("vm".equals(fieldName)) {
                    deserializedFormulaProperties.vm = FormulaPropertiesFromVm.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedFormulaProperties.provisioningState = reader.getString();
                } else if ("uniqueIdentifier".equals(fieldName)) {
                    deserializedFormulaProperties.uniqueIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFormulaProperties;
        });
    }
}
