// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request body for evaluating a policy set.
 */
@Fluent
public final class EvaluatePoliciesRequest implements JsonSerializable<EvaluatePoliciesRequest> {
    /*
     * Policies to evaluate.
     */
    private List<EvaluatePoliciesProperties> policies;

    /**
     * Creates an instance of EvaluatePoliciesRequest class.
     */
    public EvaluatePoliciesRequest() {
    }

    /**
     * Get the policies property: Policies to evaluate.
     * 
     * @return the policies value.
     */
    public List<EvaluatePoliciesProperties> policies() {
        return this.policies;
    }

    /**
     * Set the policies property: Policies to evaluate.
     * 
     * @param policies the policies value to set.
     * @return the EvaluatePoliciesRequest object itself.
     */
    public EvaluatePoliciesRequest withPolicies(List<EvaluatePoliciesProperties> policies) {
        this.policies = policies;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policies() != null) {
            policies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("policies", this.policies, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EvaluatePoliciesRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EvaluatePoliciesRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EvaluatePoliciesRequest.
     */
    public static EvaluatePoliciesRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EvaluatePoliciesRequest deserializedEvaluatePoliciesRequest = new EvaluatePoliciesRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policies".equals(fieldName)) {
                    List<EvaluatePoliciesProperties> policies
                        = reader.readArray(reader1 -> EvaluatePoliciesProperties.fromJson(reader1));
                    deserializedEvaluatePoliciesRequest.policies = policies;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvaluatePoliciesRequest;
        });
    }
}
