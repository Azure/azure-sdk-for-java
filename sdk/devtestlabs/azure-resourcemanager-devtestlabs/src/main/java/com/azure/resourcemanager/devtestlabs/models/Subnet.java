// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Subnet information.
 */
@Fluent
public final class Subnet implements JsonSerializable<Subnet> {
    /*
     * The resource ID of the subnet.
     */
    private String resourceId;

    /*
     * The name of the subnet as seen in the lab.
     */
    private String labSubnetName;

    /*
     * The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)).
     */
    private UsagePermissionType allowPublicIp;

    /**
     * Creates an instance of Subnet class.
     */
    public Subnet() {
    }

    /**
     * Get the resourceId property: The resource ID of the subnet.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource ID of the subnet.
     * 
     * @param resourceId the resourceId value to set.
     * @return the Subnet object itself.
     */
    public Subnet withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the labSubnetName property: The name of the subnet as seen in the lab.
     * 
     * @return the labSubnetName value.
     */
    public String labSubnetName() {
        return this.labSubnetName;
    }

    /**
     * Set the labSubnetName property: The name of the subnet as seen in the lab.
     * 
     * @param labSubnetName the labSubnetName value to set.
     * @return the Subnet object itself.
     */
    public Subnet withLabSubnetName(String labSubnetName) {
        this.labSubnetName = labSubnetName;
        return this;
    }

    /**
     * Get the allowPublicIp property: The permission policy of the subnet for allowing public IP addresses (i.e. Allow,
     * Deny)).
     * 
     * @return the allowPublicIp value.
     */
    public UsagePermissionType allowPublicIp() {
        return this.allowPublicIp;
    }

    /**
     * Set the allowPublicIp property: The permission policy of the subnet for allowing public IP addresses (i.e. Allow,
     * Deny)).
     * 
     * @param allowPublicIp the allowPublicIp value to set.
     * @return the Subnet object itself.
     */
    public Subnet withAllowPublicIp(UsagePermissionType allowPublicIp) {
        this.allowPublicIp = allowPublicIp;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("labSubnetName", this.labSubnetName);
        jsonWriter.writeStringField("allowPublicIp", this.allowPublicIp == null ? null : this.allowPublicIp.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Subnet from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Subnet if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Subnet.
     */
    public static Subnet fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Subnet deserializedSubnet = new Subnet();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedSubnet.resourceId = reader.getString();
                } else if ("labSubnetName".equals(fieldName)) {
                    deserializedSubnet.labSubnetName = reader.getString();
                } else if ("allowPublicIp".equals(fieldName)) {
                    deserializedSubnet.allowPublicIp = UsagePermissionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnet;
        });
    }
}
