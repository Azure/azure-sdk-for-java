// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Result of a policy set evaluation.
 */
@Fluent
public final class PolicySetResult implements JsonSerializable<PolicySetResult> {
    /*
     * A value indicating whether this policy set evaluation has discovered violations.
     */
    private Boolean hasError;

    /*
     * The list of policy violations.
     */
    private List<PolicyViolation> policyViolations;

    /**
     * Creates an instance of PolicySetResult class.
     */
    public PolicySetResult() {
    }

    /**
     * Get the hasError property: A value indicating whether this policy set evaluation has discovered violations.
     * 
     * @return the hasError value.
     */
    public Boolean hasError() {
        return this.hasError;
    }

    /**
     * Set the hasError property: A value indicating whether this policy set evaluation has discovered violations.
     * 
     * @param hasError the hasError value to set.
     * @return the PolicySetResult object itself.
     */
    public PolicySetResult withHasError(Boolean hasError) {
        this.hasError = hasError;
        return this;
    }

    /**
     * Get the policyViolations property: The list of policy violations.
     * 
     * @return the policyViolations value.
     */
    public List<PolicyViolation> policyViolations() {
        return this.policyViolations;
    }

    /**
     * Set the policyViolations property: The list of policy violations.
     * 
     * @param policyViolations the policyViolations value to set.
     * @return the PolicySetResult object itself.
     */
    public PolicySetResult withPolicyViolations(List<PolicyViolation> policyViolations) {
        this.policyViolations = policyViolations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyViolations() != null) {
            policyViolations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("hasError", this.hasError);
        jsonWriter.writeArrayField("policyViolations", this.policyViolations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicySetResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicySetResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicySetResult.
     */
    public static PolicySetResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicySetResult deserializedPolicySetResult = new PolicySetResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hasError".equals(fieldName)) {
                    deserializedPolicySetResult.hasError = reader.getNullable(JsonReader::getBoolean);
                } else if ("policyViolations".equals(fieldName)) {
                    List<PolicyViolation> policyViolations
                        = reader.readArray(reader1 -> PolicyViolation.fromJson(reader1));
                    deserializedPolicySetResult.policyViolations = policyViolations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicySetResult;
        });
    }
}
