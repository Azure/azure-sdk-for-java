// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Notification settings for a schedule.
 */
@Fluent
public final class NotificationSettings implements JsonSerializable<NotificationSettings> {
    /*
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     */
    private EnableStatus status;

    /*
     * Time in minutes before event at which notification will be sent.
     */
    private Integer timeInMinutes;

    /*
     * The webhook URL to which the notification will be sent.
     */
    private String webhookUrl;

    /*
     * The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
     */
    private String emailRecipient;

    /*
     * The locale to use when sending a notification (fallback for unsupported languages is EN).
     */
    private String notificationLocale;

    /**
     * Creates an instance of NotificationSettings class.
     */
    public NotificationSettings() {
    }

    /**
     * Get the status property: If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * 
     * @return the status value.
     */
    public EnableStatus status() {
        return this.status;
    }

    /**
     * Set the status property: If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * 
     * @param status the status value to set.
     * @return the NotificationSettings object itself.
     */
    public NotificationSettings withStatus(EnableStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the timeInMinutes property: Time in minutes before event at which notification will be sent.
     * 
     * @return the timeInMinutes value.
     */
    public Integer timeInMinutes() {
        return this.timeInMinutes;
    }

    /**
     * Set the timeInMinutes property: Time in minutes before event at which notification will be sent.
     * 
     * @param timeInMinutes the timeInMinutes value to set.
     * @return the NotificationSettings object itself.
     */
    public NotificationSettings withTimeInMinutes(Integer timeInMinutes) {
        this.timeInMinutes = timeInMinutes;
        return this;
    }

    /**
     * Get the webhookUrl property: The webhook URL to which the notification will be sent.
     * 
     * @return the webhookUrl value.
     */
    public String webhookUrl() {
        return this.webhookUrl;
    }

    /**
     * Set the webhookUrl property: The webhook URL to which the notification will be sent.
     * 
     * @param webhookUrl the webhookUrl value to set.
     * @return the NotificationSettings object itself.
     */
    public NotificationSettings withWebhookUrl(String webhookUrl) {
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * Get the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     * 
     * @return the emailRecipient value.
     */
    public String emailRecipient() {
        return this.emailRecipient;
    }

    /**
     * Set the emailRecipient property: The email recipient to send notifications to (can be a list of semi-colon
     * separated email addresses).
     * 
     * @param emailRecipient the emailRecipient value to set.
     * @return the NotificationSettings object itself.
     */
    public NotificationSettings withEmailRecipient(String emailRecipient) {
        this.emailRecipient = emailRecipient;
        return this;
    }

    /**
     * Get the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     * 
     * @return the notificationLocale value.
     */
    public String notificationLocale() {
        return this.notificationLocale;
    }

    /**
     * Set the notificationLocale property: The locale to use when sending a notification (fallback for unsupported
     * languages is EN).
     * 
     * @param notificationLocale the notificationLocale value to set.
     * @return the NotificationSettings object itself.
     */
    public NotificationSettings withNotificationLocale(String notificationLocale) {
        this.notificationLocale = notificationLocale;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeNumberField("timeInMinutes", this.timeInMinutes);
        jsonWriter.writeStringField("webhookUrl", this.webhookUrl);
        jsonWriter.writeStringField("emailRecipient", this.emailRecipient);
        jsonWriter.writeStringField("notificationLocale", this.notificationLocale);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the NotificationSettings.
     */
    public static NotificationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationSettings deserializedNotificationSettings = new NotificationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedNotificationSettings.status = EnableStatus.fromString(reader.getString());
                } else if ("timeInMinutes".equals(fieldName)) {
                    deserializedNotificationSettings.timeInMinutes = reader.getNullable(JsonReader::getInt);
                } else if ("webhookUrl".equals(fieldName)) {
                    deserializedNotificationSettings.webhookUrl = reader.getString();
                } else if ("emailRecipient".equals(fieldName)) {
                    deserializedNotificationSettings.emailRecipient = reader.getString();
                } else if ("notificationLocale".equals(fieldName)) {
                    deserializedNotificationSettings.notificationLocale = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationSettings;
        });
    }
}
