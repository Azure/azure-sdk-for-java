// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A data disks attached to a virtual machine.
 */
@Fluent
public final class ComputeDataDisk implements JsonSerializable<ComputeDataDisk> {
    /*
     * Gets data disk name.
     */
    private String name;

    /*
     * When backed by a blob, the URI of underlying blob.
     */
    private String diskUri;

    /*
     * When backed by managed disk, this is the ID of the compute disk resource.
     */
    private String managedDiskId;

    /*
     * Gets data disk size in GiB.
     */
    private Integer diskSizeGiB;

    /**
     * Creates an instance of ComputeDataDisk class.
     */
    public ComputeDataDisk() {
    }

    /**
     * Get the name property: Gets data disk name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets data disk name.
     * 
     * @param name the name value to set.
     * @return the ComputeDataDisk object itself.
     */
    public ComputeDataDisk withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the diskUri property: When backed by a blob, the URI of underlying blob.
     * 
     * @return the diskUri value.
     */
    public String diskUri() {
        return this.diskUri;
    }

    /**
     * Set the diskUri property: When backed by a blob, the URI of underlying blob.
     * 
     * @param diskUri the diskUri value to set.
     * @return the ComputeDataDisk object itself.
     */
    public ComputeDataDisk withDiskUri(String diskUri) {
        this.diskUri = diskUri;
        return this;
    }

    /**
     * Get the managedDiskId property: When backed by managed disk, this is the ID of the compute disk resource.
     * 
     * @return the managedDiskId value.
     */
    public String managedDiskId() {
        return this.managedDiskId;
    }

    /**
     * Set the managedDiskId property: When backed by managed disk, this is the ID of the compute disk resource.
     * 
     * @param managedDiskId the managedDiskId value to set.
     * @return the ComputeDataDisk object itself.
     */
    public ComputeDataDisk withManagedDiskId(String managedDiskId) {
        this.managedDiskId = managedDiskId;
        return this;
    }

    /**
     * Get the diskSizeGiB property: Gets data disk size in GiB.
     * 
     * @return the diskSizeGiB value.
     */
    public Integer diskSizeGiB() {
        return this.diskSizeGiB;
    }

    /**
     * Set the diskSizeGiB property: Gets data disk size in GiB.
     * 
     * @param diskSizeGiB the diskSizeGiB value to set.
     * @return the ComputeDataDisk object itself.
     */
    public ComputeDataDisk withDiskSizeGiB(Integer diskSizeGiB) {
        this.diskSizeGiB = diskSizeGiB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("diskUri", this.diskUri);
        jsonWriter.writeStringField("managedDiskId", this.managedDiskId);
        jsonWriter.writeNumberField("diskSizeGiB", this.diskSizeGiB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComputeDataDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComputeDataDisk if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ComputeDataDisk.
     */
    public static ComputeDataDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ComputeDataDisk deserializedComputeDataDisk = new ComputeDataDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedComputeDataDisk.name = reader.getString();
                } else if ("diskUri".equals(fieldName)) {
                    deserializedComputeDataDisk.diskUri = reader.getString();
                } else if ("managedDiskId".equals(fieldName)) {
                    deserializedComputeDataDisk.managedDiskId = reader.getString();
                } else if ("diskSizeGiB".equals(fieldName)) {
                    deserializedComputeDataDisk.diskSizeGiB = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedComputeDataDisk;
        });
    }
}
