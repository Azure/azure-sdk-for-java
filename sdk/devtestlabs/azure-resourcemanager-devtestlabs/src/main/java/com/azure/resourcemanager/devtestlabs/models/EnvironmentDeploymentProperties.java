// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of an environment deployment.
 */
@Fluent
public final class EnvironmentDeploymentProperties implements JsonSerializable<EnvironmentDeploymentProperties> {
    /*
     * The Azure Resource Manager template's identifier.
     */
    private String armTemplateId;

    /*
     * The parameters of the Azure Resource Manager template.
     */
    private List<ArmTemplateParameterProperties> parameters;

    /**
     * Creates an instance of EnvironmentDeploymentProperties class.
     */
    public EnvironmentDeploymentProperties() {
    }

    /**
     * Get the armTemplateId property: The Azure Resource Manager template's identifier.
     * 
     * @return the armTemplateId value.
     */
    public String armTemplateId() {
        return this.armTemplateId;
    }

    /**
     * Set the armTemplateId property: The Azure Resource Manager template's identifier.
     * 
     * @param armTemplateId the armTemplateId value to set.
     * @return the EnvironmentDeploymentProperties object itself.
     */
    public EnvironmentDeploymentProperties withArmTemplateId(String armTemplateId) {
        this.armTemplateId = armTemplateId;
        return this;
    }

    /**
     * Get the parameters property: The parameters of the Azure Resource Manager template.
     * 
     * @return the parameters value.
     */
    public List<ArmTemplateParameterProperties> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters of the Azure Resource Manager template.
     * 
     * @param parameters the parameters value to set.
     * @return the EnvironmentDeploymentProperties object itself.
     */
    public EnvironmentDeploymentProperties withParameters(List<ArmTemplateParameterProperties> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("armTemplateId", this.armTemplateId);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EnvironmentDeploymentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EnvironmentDeploymentProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EnvironmentDeploymentProperties.
     */
    public static EnvironmentDeploymentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EnvironmentDeploymentProperties deserializedEnvironmentDeploymentProperties
                = new EnvironmentDeploymentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("armTemplateId".equals(fieldName)) {
                    deserializedEnvironmentDeploymentProperties.armTemplateId = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    List<ArmTemplateParameterProperties> parameters
                        = reader.readArray(reader1 -> ArmTemplateParameterProperties.fromJson(reader1));
                    deserializedEnvironmentDeploymentProperties.parameters = parameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEnvironmentDeploymentProperties;
        });
    }
}
