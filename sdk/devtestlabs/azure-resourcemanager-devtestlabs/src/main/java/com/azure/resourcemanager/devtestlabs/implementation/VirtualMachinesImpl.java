// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.devtestlabs.fluent.VirtualMachinesClient;
import com.azure.resourcemanager.devtestlabs.fluent.models.ApplicableScheduleInner;
import com.azure.resourcemanager.devtestlabs.fluent.models.LabVirtualMachineInner;
import com.azure.resourcemanager.devtestlabs.fluent.models.RdpConnectionInner;
import com.azure.resourcemanager.devtestlabs.models.ApplicableSchedule;
import com.azure.resourcemanager.devtestlabs.models.ApplyArtifactsRequest;
import com.azure.resourcemanager.devtestlabs.models.DataDiskProperties;
import com.azure.resourcemanager.devtestlabs.models.DetachDataDiskProperties;
import com.azure.resourcemanager.devtestlabs.models.LabVirtualMachine;
import com.azure.resourcemanager.devtestlabs.models.RdpConnection;
import com.azure.resourcemanager.devtestlabs.models.ResizeLabVirtualMachineProperties;
import com.azure.resourcemanager.devtestlabs.models.VirtualMachines;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class VirtualMachinesImpl implements VirtualMachines {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VirtualMachinesImpl.class);

    private final VirtualMachinesClient innerClient;

    private final com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager;

    public VirtualMachinesImpl(
        VirtualMachinesClient innerClient, com.azure.resourcemanager.devtestlabs.DevTestLabsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<LabVirtualMachine> list(String resourceGroupName, String labName) {
        PagedIterable<LabVirtualMachineInner> inner = this.serviceClient().list(resourceGroupName, labName);
        return Utils.mapPage(inner, inner1 -> new LabVirtualMachineImpl(inner1, this.manager()));
    }

    public PagedIterable<LabVirtualMachine> list(
        String resourceGroupName,
        String labName,
        String expand,
        String filter,
        Integer top,
        String orderby,
        Context context) {
        PagedIterable<LabVirtualMachineInner> inner =
            this.serviceClient().list(resourceGroupName, labName, expand, filter, top, orderby, context);
        return Utils.mapPage(inner, inner1 -> new LabVirtualMachineImpl(inner1, this.manager()));
    }

    public LabVirtualMachine get(String resourceGroupName, String labName, String name) {
        LabVirtualMachineInner inner = this.serviceClient().get(resourceGroupName, labName, name);
        if (inner != null) {
            return new LabVirtualMachineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LabVirtualMachine> getWithResponse(
        String resourceGroupName, String labName, String name, String expand, Context context) {
        Response<LabVirtualMachineInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, labName, name, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LabVirtualMachineImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String labName, String name) {
        this.serviceClient().delete(resourceGroupName, labName, name);
    }

    public void delete(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, labName, name, context);
    }

    public void addDataDisk(
        String resourceGroupName, String labName, String name, DataDiskProperties dataDiskProperties) {
        this.serviceClient().addDataDisk(resourceGroupName, labName, name, dataDiskProperties);
    }

    public void addDataDisk(
        String resourceGroupName, String labName, String name, DataDiskProperties dataDiskProperties, Context context) {
        this.serviceClient().addDataDisk(resourceGroupName, labName, name, dataDiskProperties, context);
    }

    public void applyArtifacts(
        String resourceGroupName, String labName, String name, ApplyArtifactsRequest applyArtifactsRequest) {
        this.serviceClient().applyArtifacts(resourceGroupName, labName, name, applyArtifactsRequest);
    }

    public void applyArtifacts(
        String resourceGroupName,
        String labName,
        String name,
        ApplyArtifactsRequest applyArtifactsRequest,
        Context context) {
        this.serviceClient().applyArtifacts(resourceGroupName, labName, name, applyArtifactsRequest, context);
    }

    public void claim(String resourceGroupName, String labName, String name) {
        this.serviceClient().claim(resourceGroupName, labName, name);
    }

    public void claim(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().claim(resourceGroupName, labName, name, context);
    }

    public void detachDataDisk(
        String resourceGroupName, String labName, String name, DetachDataDiskProperties detachDataDiskProperties) {
        this.serviceClient().detachDataDisk(resourceGroupName, labName, name, detachDataDiskProperties);
    }

    public void detachDataDisk(
        String resourceGroupName,
        String labName,
        String name,
        DetachDataDiskProperties detachDataDiskProperties,
        Context context) {
        this.serviceClient().detachDataDisk(resourceGroupName, labName, name, detachDataDiskProperties, context);
    }

    public RdpConnection getRdpFileContents(String resourceGroupName, String labName, String name) {
        RdpConnectionInner inner = this.serviceClient().getRdpFileContents(resourceGroupName, labName, name);
        if (inner != null) {
            return new RdpConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RdpConnection> getRdpFileContentsWithResponse(
        String resourceGroupName, String labName, String name, Context context) {
        Response<RdpConnectionInner> inner =
            this.serviceClient().getRdpFileContentsWithResponse(resourceGroupName, labName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RdpConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ApplicableSchedule listApplicableSchedules(String resourceGroupName, String labName, String name) {
        ApplicableScheduleInner inner = this.serviceClient().listApplicableSchedules(resourceGroupName, labName, name);
        if (inner != null) {
            return new ApplicableScheduleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicableSchedule> listApplicableSchedulesWithResponse(
        String resourceGroupName, String labName, String name, Context context) {
        Response<ApplicableScheduleInner> inner =
            this.serviceClient().listApplicableSchedulesWithResponse(resourceGroupName, labName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicableScheduleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void redeploy(String resourceGroupName, String labName, String name) {
        this.serviceClient().redeploy(resourceGroupName, labName, name);
    }

    public void redeploy(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().redeploy(resourceGroupName, labName, name, context);
    }

    public void resize(
        String resourceGroupName,
        String labName,
        String name,
        ResizeLabVirtualMachineProperties resizeLabVirtualMachineProperties) {
        this.serviceClient().resize(resourceGroupName, labName, name, resizeLabVirtualMachineProperties);
    }

    public void resize(
        String resourceGroupName,
        String labName,
        String name,
        ResizeLabVirtualMachineProperties resizeLabVirtualMachineProperties,
        Context context) {
        this.serviceClient().resize(resourceGroupName, labName, name, resizeLabVirtualMachineProperties, context);
    }

    public void restart(String resourceGroupName, String labName, String name) {
        this.serviceClient().restart(resourceGroupName, labName, name);
    }

    public void restart(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().restart(resourceGroupName, labName, name, context);
    }

    public void start(String resourceGroupName, String labName, String name) {
        this.serviceClient().start(resourceGroupName, labName, name);
    }

    public void start(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().start(resourceGroupName, labName, name, context);
    }

    public void stop(String resourceGroupName, String labName, String name) {
        this.serviceClient().stop(resourceGroupName, labName, name);
    }

    public void stop(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().stop(resourceGroupName, labName, name, context);
    }

    public void transferDisks(String resourceGroupName, String labName, String name) {
        this.serviceClient().transferDisks(resourceGroupName, labName, name);
    }

    public void transferDisks(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().transferDisks(resourceGroupName, labName, name, context);
    }

    public void unClaim(String resourceGroupName, String labName, String name) {
        this.serviceClient().unClaim(resourceGroupName, labName, name);
    }

    public void unClaim(String resourceGroupName, String labName, String name, Context context) {
        this.serviceClient().unClaim(resourceGroupName, labName, name, context);
    }

    public LabVirtualMachine getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualmachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualmachines'.", id)));
        }
        String localExpand = null;
        return this.getWithResponse(resourceGroupName, labName, name, localExpand, Context.NONE).getValue();
    }

    public Response<LabVirtualMachine> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualmachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualmachines'.", id)));
        }
        return this.getWithResponse(resourceGroupName, labName, name, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualmachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualmachines'.", id)));
        }
        this.delete(resourceGroupName, labName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String labName = Utils.getValueFromIdByName(id, "labs");
        if (labName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'labs'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualmachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualmachines'.", id)));
        }
        this.delete(resourceGroupName, labName, name, context);
    }

    private VirtualMachinesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.devtestlabs.DevTestLabsManager manager() {
        return this.serviceManager;
    }

    public LabVirtualMachineImpl define(String name) {
        return new LabVirtualMachineImpl(name, this.manager());
    }
}
