// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.ServiceFabricInner;
import java.util.Map;

/** An immutable client-side representation of ServiceFabric. */
public interface ServiceFabric {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the externalServiceFabricId property: The backing service fabric resource's id.
     *
     * @return the externalServiceFabricId value.
     */
    String externalServiceFabricId();

    /**
     * Gets the environmentId property: The resource id of the environment under which the service fabric resource is
     * present.
     *
     * @return the environmentId value.
     */
    String environmentId();

    /**
     * Gets the applicableSchedule property: The applicable schedule for the virtual machine.
     *
     * @return the applicableSchedule value.
     */
    ApplicableSchedule applicableSchedule();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.devtestlabs.fluent.models.ServiceFabricInner object.
     *
     * @return the inner object.
     */
    ServiceFabricInner innerModel();

    /** The entirety of the ServiceFabric definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The ServiceFabric definition stages. */
    interface DefinitionStages {
        /** The first stage of the ServiceFabric definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the ServiceFabric definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the ServiceFabric definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labName, username.
             *
             * @param resourceGroupName The name of the resource group.
             * @param labName The name of the lab.
             * @param username The name of the user profile.
             * @return the next definition stage.
             */
            WithCreate withExistingUser(String resourceGroupName, String labName, String username);
        }
        /**
         * The stage of the ServiceFabric definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithExternalServiceFabricId,
                DefinitionStages.WithEnvironmentId {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ServiceFabric create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ServiceFabric create(Context context);
        }
        /** The stage of the ServiceFabric definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the ServiceFabric definition allowing to specify externalServiceFabricId. */
        interface WithExternalServiceFabricId {
            /**
             * Specifies the externalServiceFabricId property: The backing service fabric resource's id.
             *
             * @param externalServiceFabricId The backing service fabric resource's id.
             * @return the next definition stage.
             */
            WithCreate withExternalServiceFabricId(String externalServiceFabricId);
        }
        /** The stage of the ServiceFabric definition allowing to specify environmentId. */
        interface WithEnvironmentId {
            /**
             * Specifies the environmentId property: The resource id of the environment under which the service fabric
             * resource is present.
             *
             * @param environmentId The resource id of the environment under which the service fabric resource is
             *     present.
             * @return the next definition stage.
             */
            WithCreate withEnvironmentId(String environmentId);
        }
    }
    /**
     * Begins update for the ServiceFabric resource.
     *
     * @return the stage of resource update.
     */
    ServiceFabric.Update update();

    /** The template for ServiceFabric update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ServiceFabric apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ServiceFabric apply(Context context);
    }
    /** The ServiceFabric update stages. */
    interface UpdateStages {
        /** The stage of the ServiceFabric update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags of the resource..
             *
             * @param tags The tags of the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ServiceFabric refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ServiceFabric refresh(Context context);

    /**
     * Lists the applicable start/stop schedules, if any.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return schedules applicable to a virtual machine.
     */
    ApplicableSchedule listApplicableSchedules();

    /**
     * Lists the applicable start/stop schedules, if any.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return schedules applicable to a virtual machine.
     */
    Response<ApplicableSchedule> listApplicableSchedulesWithResponse(Context context);

    /**
     * Start a service fabric. This operation can take a while to complete.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * Start a service fabric. This operation can take a while to complete.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * Stop a service fabric This operation can take a while to complete.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop();

    /**
     * Stop a service fabric This operation can take a while to complete.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void stop(Context context);
}
