// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of an artifact.
 */
@Immutable
public final class ArtifactProperties implements JsonSerializable<ArtifactProperties> {
    /*
     * The artifact's title.
     */
    private String title;

    /*
     * The artifact's description.
     */
    private String description;

    /*
     * The artifact's publisher.
     */
    private String publisher;

    /*
     * The file path to the artifact.
     */
    private String filePath;

    /*
     * The URI to the artifact icon.
     */
    private String icon;

    /*
     * The artifact's target OS.
     */
    private String targetOsType;

    /*
     * The artifact's parameters.
     */
    private Object parameters;

    /*
     * The artifact's creation date.
     */
    private OffsetDateTime createdDate;

    /**
     * Creates an instance of ArtifactProperties class.
     */
    public ArtifactProperties() {
    }

    /**
     * Get the title property: The artifact's title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the description property: The artifact's description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the publisher property: The artifact's publisher.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Get the filePath property: The file path to the artifact.
     * 
     * @return the filePath value.
     */
    public String filePath() {
        return this.filePath;
    }

    /**
     * Get the icon property: The URI to the artifact icon.
     * 
     * @return the icon value.
     */
    public String icon() {
        return this.icon;
    }

    /**
     * Get the targetOsType property: The artifact's target OS.
     * 
     * @return the targetOsType value.
     */
    public String targetOsType() {
        return this.targetOsType;
    }

    /**
     * Get the parameters property: The artifact's parameters.
     * 
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Get the createdDate property: The artifact's creation date.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ArtifactProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ArtifactProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ArtifactProperties.
     */
    public static ArtifactProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ArtifactProperties deserializedArtifactProperties = new ArtifactProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("title".equals(fieldName)) {
                    deserializedArtifactProperties.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedArtifactProperties.description = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedArtifactProperties.publisher = reader.getString();
                } else if ("filePath".equals(fieldName)) {
                    deserializedArtifactProperties.filePath = reader.getString();
                } else if ("icon".equals(fieldName)) {
                    deserializedArtifactProperties.icon = reader.getString();
                } else if ("targetOsType".equals(fieldName)) {
                    deserializedArtifactProperties.targetOsType = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    deserializedArtifactProperties.parameters = reader.readUntyped();
                } else if ("createdDate".equals(fieldName)) {
                    deserializedArtifactProperties.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedArtifactProperties;
        });
    }
}
