// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An event to be notified for.
 */
@Fluent
public final class Event implements JsonSerializable<Event> {
    /*
     * The event type for which this notification is enabled (i.e. AutoShutdown, Cost)
     */
    private NotificationChannelEventType eventName;

    /**
     * Creates an instance of Event class.
     */
    public Event() {
    }

    /**
     * Get the eventName property: The event type for which this notification is enabled (i.e. AutoShutdown, Cost).
     * 
     * @return the eventName value.
     */
    public NotificationChannelEventType eventName() {
        return this.eventName;
    }

    /**
     * Set the eventName property: The event type for which this notification is enabled (i.e. AutoShutdown, Cost).
     * 
     * @param eventName the eventName value to set.
     * @return the Event object itself.
     */
    public Event withEventName(NotificationChannelEventType eventName) {
        this.eventName = eventName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eventName", this.eventName == null ? null : this.eventName.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Event from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Event if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Event.
     */
    public static Event fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Event deserializedEvent = new Event();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eventName".equals(fieldName)) {
                    deserializedEvent.eventName = NotificationChannelEventType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEvent;
        });
    }
}
