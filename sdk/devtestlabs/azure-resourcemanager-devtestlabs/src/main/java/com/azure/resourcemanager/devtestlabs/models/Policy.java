// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.devtestlabs.fluent.models.PolicyInner;
import java.time.OffsetDateTime;
import java.util.Map;

/** An immutable client-side representation of Policy. */
public interface Policy {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the description property: The description of the policy.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the status property: The status of the policy.
     *
     * @return the status value.
     */
    PolicyStatus status();

    /**
     * Gets the factName property: The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
     *
     * @return the factName value.
     */
    PolicyFactName factName();

    /**
     * Gets the factData property: The fact data of the policy.
     *
     * @return the factData value.
     */
    String factData();

    /**
     * Gets the threshold property: The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of
     * values for AllowedValuesPolicy).
     *
     * @return the threshold value.
     */
    String threshold();

    /**
     * Gets the evaluatorType property: The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
     *
     * @return the evaluatorType value.
     */
    PolicyEvaluatorType evaluatorType();

    /**
     * Gets the createdDate property: The creation date of the policy.
     *
     * @return the createdDate value.
     */
    OffsetDateTime createdDate();

    /**
     * Gets the provisioningState property: The provisioning status of the resource.
     *
     * @return the provisioningState value.
     */
    String provisioningState();

    /**
     * Gets the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     *
     * @return the uniqueIdentifier value.
     */
    String uniqueIdentifier();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.devtestlabs.fluent.models.PolicyInner object.
     *
     * @return the inner object.
     */
    PolicyInner innerModel();

    /** The entirety of the Policy definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithCreate {
    }
    /** The Policy definition stages. */
    interface DefinitionStages {
        /** The first stage of the Policy definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Policy definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }
        /** The stage of the Policy definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, labName, policySetName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param labName The name of the lab.
             * @param policySetName The name of the policy set.
             * @return the next definition stage.
             */
            WithCreate withExistingPolicyset(String resourceGroupName, String labName, String policySetName);
        }
        /**
         * The stage of the Policy definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithDescription,
                DefinitionStages.WithStatus,
                DefinitionStages.WithFactName,
                DefinitionStages.WithFactData,
                DefinitionStages.WithThreshold,
                DefinitionStages.WithEvaluatorType {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Policy create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Policy create(Context context);
        }
        /** The stage of the Policy definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Policy definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description of the policy..
             *
             * @param description The description of the policy.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the Policy definition allowing to specify status. */
        interface WithStatus {
            /**
             * Specifies the status property: The status of the policy..
             *
             * @param status The status of the policy.
             * @return the next definition stage.
             */
            WithCreate withStatus(PolicyStatus status);
        }
        /** The stage of the Policy definition allowing to specify factName. */
        interface WithFactName {
            /**
             * Specifies the factName property: The fact name of the policy (e.g. LabVmCount, LabVmSize,
             * MaxVmsAllowedPerLab, etc..
             *
             * @param factName The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
             * @return the next definition stage.
             */
            WithCreate withFactName(PolicyFactName factName);
        }
        /** The stage of the Policy definition allowing to specify factData. */
        interface WithFactData {
            /**
             * Specifies the factData property: The fact data of the policy..
             *
             * @param factData The fact data of the policy.
             * @return the next definition stage.
             */
            WithCreate withFactData(String factData);
        }
        /** The stage of the Policy definition allowing to specify threshold. */
        interface WithThreshold {
            /**
             * Specifies the threshold property: The threshold of the policy (i.e. a number for MaxValuePolicy, and a
             * JSON array of values for AllowedValuesPolicy)..
             *
             * @param threshold The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of
             *     values for AllowedValuesPolicy).
             * @return the next definition stage.
             */
            WithCreate withThreshold(String threshold);
        }
        /** The stage of the Policy definition allowing to specify evaluatorType. */
        interface WithEvaluatorType {
            /**
             * Specifies the evaluatorType property: The evaluator type of the policy (i.e. AllowedValuesPolicy,
             * MaxValuePolicy)..
             *
             * @param evaluatorType The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
             * @return the next definition stage.
             */
            WithCreate withEvaluatorType(PolicyEvaluatorType evaluatorType);
        }
    }
    /**
     * Begins update for the Policy resource.
     *
     * @return the stage of resource update.
     */
    Policy.Update update();

    /** The template for Policy update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Policy apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Policy apply(Context context);
    }
    /** The Policy update stages. */
    interface UpdateStages {
        /** The stage of the Policy update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The tags of the resource..
             *
             * @param tags The tags of the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Policy refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Policy refresh(Context context);
}
