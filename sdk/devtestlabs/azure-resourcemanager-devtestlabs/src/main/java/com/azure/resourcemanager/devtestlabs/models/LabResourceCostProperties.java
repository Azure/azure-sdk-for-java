// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a resource cost item.
 */
@Fluent
public final class LabResourceCostProperties implements JsonSerializable<LabResourceCostProperties> {
    /*
     * The name of the resource.
     */
    private String resourcename;

    /*
     * The unique identifier of the resource.
     */
    private String resourceUId;

    /*
     * The cost component of the resource cost item.
     */
    private Double resourceCost;

    /*
     * The logical resource type (ex. virtualmachine, storageaccount)
     */
    private String resourceType;

    /*
     * The owner of the resource (ex. janedoe@microsoft.com)
     */
    private String resourceOwner;

    /*
     * The category of the resource (ex. Premium_LRS, Standard_DS1)
     */
    private String resourcePricingTier;

    /*
     * The status of the resource (ex. Active)
     */
    private String resourceStatus;

    /*
     * The ID of the resource
     */
    private String resourceId;

    /*
     * The ID of the external resource
     */
    private String externalResourceId;

    /**
     * Creates an instance of LabResourceCostProperties class.
     */
    public LabResourceCostProperties() {
    }

    /**
     * Get the resourcename property: The name of the resource.
     * 
     * @return the resourcename value.
     */
    public String resourcename() {
        return this.resourcename;
    }

    /**
     * Set the resourcename property: The name of the resource.
     * 
     * @param resourcename the resourcename value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourcename(String resourcename) {
        this.resourcename = resourcename;
        return this;
    }

    /**
     * Get the resourceUId property: The unique identifier of the resource.
     * 
     * @return the resourceUId value.
     */
    public String resourceUId() {
        return this.resourceUId;
    }

    /**
     * Set the resourceUId property: The unique identifier of the resource.
     * 
     * @param resourceUId the resourceUId value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourceUId(String resourceUId) {
        this.resourceUId = resourceUId;
        return this;
    }

    /**
     * Get the resourceCost property: The cost component of the resource cost item.
     * 
     * @return the resourceCost value.
     */
    public Double resourceCost() {
        return this.resourceCost;
    }

    /**
     * Set the resourceCost property: The cost component of the resource cost item.
     * 
     * @param resourceCost the resourceCost value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourceCost(Double resourceCost) {
        this.resourceCost = resourceCost;
        return this;
    }

    /**
     * Get the resourceType property: The logical resource type (ex. virtualmachine, storageaccount).
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The logical resource type (ex. virtualmachine, storageaccount).
     * 
     * @param resourceType the resourceType value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourceType(String resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the resourceOwner property: The owner of the resource (ex. janedoe&#064;microsoft.com).
     * 
     * @return the resourceOwner value.
     */
    public String resourceOwner() {
        return this.resourceOwner;
    }

    /**
     * Set the resourceOwner property: The owner of the resource (ex. janedoe&#064;microsoft.com).
     * 
     * @param resourceOwner the resourceOwner value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourceOwner(String resourceOwner) {
        this.resourceOwner = resourceOwner;
        return this;
    }

    /**
     * Get the resourcePricingTier property: The category of the resource (ex. Premium_LRS, Standard_DS1).
     * 
     * @return the resourcePricingTier value.
     */
    public String resourcePricingTier() {
        return this.resourcePricingTier;
    }

    /**
     * Set the resourcePricingTier property: The category of the resource (ex. Premium_LRS, Standard_DS1).
     * 
     * @param resourcePricingTier the resourcePricingTier value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourcePricingTier(String resourcePricingTier) {
        this.resourcePricingTier = resourcePricingTier;
        return this;
    }

    /**
     * Get the resourceStatus property: The status of the resource (ex. Active).
     * 
     * @return the resourceStatus value.
     */
    public String resourceStatus() {
        return this.resourceStatus;
    }

    /**
     * Set the resourceStatus property: The status of the resource (ex. Active).
     * 
     * @param resourceStatus the resourceStatus value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourceStatus(String resourceStatus) {
        this.resourceStatus = resourceStatus;
        return this;
    }

    /**
     * Get the resourceId property: The ID of the resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The ID of the resource.
     * 
     * @param resourceId the resourceId value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the externalResourceId property: The ID of the external resource.
     * 
     * @return the externalResourceId value.
     */
    public String externalResourceId() {
        return this.externalResourceId;
    }

    /**
     * Set the externalResourceId property: The ID of the external resource.
     * 
     * @param externalResourceId the externalResourceId value to set.
     * @return the LabResourceCostProperties object itself.
     */
    public LabResourceCostProperties withExternalResourceId(String externalResourceId) {
        this.externalResourceId = externalResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourcename", this.resourcename);
        jsonWriter.writeStringField("resourceUId", this.resourceUId);
        jsonWriter.writeNumberField("resourceCost", this.resourceCost);
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("resourceOwner", this.resourceOwner);
        jsonWriter.writeStringField("resourcePricingTier", this.resourcePricingTier);
        jsonWriter.writeStringField("resourceStatus", this.resourceStatus);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("externalResourceId", this.externalResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LabResourceCostProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LabResourceCostProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LabResourceCostProperties.
     */
    public static LabResourceCostProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LabResourceCostProperties deserializedLabResourceCostProperties = new LabResourceCostProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourcename".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourcename = reader.getString();
                } else if ("resourceUId".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourceUId = reader.getString();
                } else if ("resourceCost".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourceCost = reader.getNullable(JsonReader::getDouble);
                } else if ("resourceType".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourceType = reader.getString();
                } else if ("resourceOwner".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourceOwner = reader.getString();
                } else if ("resourcePricingTier".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourcePricingTier = reader.getString();
                } else if ("resourceStatus".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourceStatus = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedLabResourceCostProperties.resourceId = reader.getString();
                } else if ("externalResourceId".equals(fieldName)) {
                    deserializedLabResourceCostProperties.externalResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLabResourceCostProperties;
        });
    }
}
