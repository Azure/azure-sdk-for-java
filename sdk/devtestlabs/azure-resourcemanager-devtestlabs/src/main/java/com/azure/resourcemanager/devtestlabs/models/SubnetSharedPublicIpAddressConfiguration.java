// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration for public IP address sharing.
 */
@Fluent
public final class SubnetSharedPublicIpAddressConfiguration
    implements JsonSerializable<SubnetSharedPublicIpAddressConfiguration> {
    /*
     * Backend ports that virtual machines on this subnet are allowed to expose
     */
    private List<Port> allowedPorts;

    /**
     * Creates an instance of SubnetSharedPublicIpAddressConfiguration class.
     */
    public SubnetSharedPublicIpAddressConfiguration() {
    }

    /**
     * Get the allowedPorts property: Backend ports that virtual machines on this subnet are allowed to expose.
     * 
     * @return the allowedPorts value.
     */
    public List<Port> allowedPorts() {
        return this.allowedPorts;
    }

    /**
     * Set the allowedPorts property: Backend ports that virtual machines on this subnet are allowed to expose.
     * 
     * @param allowedPorts the allowedPorts value to set.
     * @return the SubnetSharedPublicIpAddressConfiguration object itself.
     */
    public SubnetSharedPublicIpAddressConfiguration withAllowedPorts(List<Port> allowedPorts) {
        this.allowedPorts = allowedPorts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (allowedPorts() != null) {
            allowedPorts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("allowedPorts", this.allowedPorts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubnetSharedPublicIpAddressConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubnetSharedPublicIpAddressConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubnetSharedPublicIpAddressConfiguration.
     */
    public static SubnetSharedPublicIpAddressConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubnetSharedPublicIpAddressConfiguration deserializedSubnetSharedPublicIpAddressConfiguration
                = new SubnetSharedPublicIpAddressConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allowedPorts".equals(fieldName)) {
                    List<Port> allowedPorts = reader.readArray(reader1 -> Port.fromJson(reader1));
                    deserializedSubnetSharedPublicIpAddressConfiguration.allowedPorts = allowedPorts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubnetSharedPublicIpAddressConfiguration;
        });
    }
}
