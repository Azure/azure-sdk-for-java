// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The reference information for an Azure Marketplace image.
 */
@Fluent
public final class GalleryImageReference implements JsonSerializable<GalleryImageReference> {
    /*
     * The offer of the gallery image.
     */
    private String offer;

    /*
     * The publisher of the gallery image.
     */
    private String publisher;

    /*
     * The SKU of the gallery image.
     */
    private String sku;

    /*
     * The OS type of the gallery image.
     */
    private String osType;

    /*
     * The version of the gallery image.
     */
    private String version;

    /**
     * Creates an instance of GalleryImageReference class.
     */
    public GalleryImageReference() {
    }

    /**
     * Get the offer property: The offer of the gallery image.
     * 
     * @return the offer value.
     */
    public String offer() {
        return this.offer;
    }

    /**
     * Set the offer property: The offer of the gallery image.
     * 
     * @param offer the offer value to set.
     * @return the GalleryImageReference object itself.
     */
    public GalleryImageReference withOffer(String offer) {
        this.offer = offer;
        return this;
    }

    /**
     * Get the publisher property: The publisher of the gallery image.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: The publisher of the gallery image.
     * 
     * @param publisher the publisher value to set.
     * @return the GalleryImageReference object itself.
     */
    public GalleryImageReference withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the sku property: The SKU of the gallery image.
     * 
     * @return the sku value.
     */
    public String sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the gallery image.
     * 
     * @param sku the sku value to set.
     * @return the GalleryImageReference object itself.
     */
    public GalleryImageReference withSku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the osType property: The OS type of the gallery image.
     * 
     * @return the osType value.
     */
    public String osType() {
        return this.osType;
    }

    /**
     * Set the osType property: The OS type of the gallery image.
     * 
     * @param osType the osType value to set.
     * @return the GalleryImageReference object itself.
     */
    public GalleryImageReference withOsType(String osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the version property: The version of the gallery image.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the gallery image.
     * 
     * @param version the version value to set.
     * @return the GalleryImageReference object itself.
     */
    public GalleryImageReference withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("offer", this.offer);
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeStringField("sku", this.sku);
        jsonWriter.writeStringField("osType", this.osType);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GalleryImageReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GalleryImageReference if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GalleryImageReference.
     */
    public static GalleryImageReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GalleryImageReference deserializedGalleryImageReference = new GalleryImageReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("offer".equals(fieldName)) {
                    deserializedGalleryImageReference.offer = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedGalleryImageReference.publisher = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedGalleryImageReference.sku = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedGalleryImageReference.osType = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedGalleryImageReference.version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGalleryImageReference;
        });
    }
}
