// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devtestlabs.models.PolicyEvaluatorType;
import com.azure.resourcemanager.devtestlabs.models.PolicyFactName;
import com.azure.resourcemanager.devtestlabs.models.PolicyStatus;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties of a Policy.
 */
@Fluent
public final class PolicyProperties implements JsonSerializable<PolicyProperties> {
    /*
     * The description of the policy.
     */
    private String description;

    /*
     * The status of the policy.
     */
    private PolicyStatus status;

    /*
     * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
     */
    private PolicyFactName factName;

    /*
     * The fact data of the policy.
     */
    private String factData;

    /*
     * The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for
     * AllowedValuesPolicy).
     */
    private String threshold;

    /*
     * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
     */
    private PolicyEvaluatorType evaluatorType;

    /*
     * The creation date of the policy.
     */
    private OffsetDateTime createdDate;

    /*
     * The provisioning status of the resource.
     */
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    private String uniqueIdentifier;

    /**
     * Creates an instance of PolicyProperties class.
     */
    public PolicyProperties() {
    }

    /**
     * Get the description property: The description of the policy.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the policy.
     * 
     * @param description the description value to set.
     * @return the PolicyProperties object itself.
     */
    public PolicyProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the status property: The status of the policy.
     * 
     * @return the status value.
     */
    public PolicyStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the policy.
     * 
     * @param status the status value to set.
     * @return the PolicyProperties object itself.
     */
    public PolicyProperties withStatus(PolicyStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the factName property: The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
     * 
     * @return the factName value.
     */
    public PolicyFactName factName() {
        return this.factName;
    }

    /**
     * Set the factName property: The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
     * 
     * @param factName the factName value to set.
     * @return the PolicyProperties object itself.
     */
    public PolicyProperties withFactName(PolicyFactName factName) {
        this.factName = factName;
        return this;
    }

    /**
     * Get the factData property: The fact data of the policy.
     * 
     * @return the factData value.
     */
    public String factData() {
        return this.factData;
    }

    /**
     * Set the factData property: The fact data of the policy.
     * 
     * @param factData the factData value to set.
     * @return the PolicyProperties object itself.
     */
    public PolicyProperties withFactData(String factData) {
        this.factData = factData;
        return this;
    }

    /**
     * Get the threshold property: The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of
     * values for AllowedValuesPolicy).
     * 
     * @return the threshold value.
     */
    public String threshold() {
        return this.threshold;
    }

    /**
     * Set the threshold property: The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of
     * values for AllowedValuesPolicy).
     * 
     * @param threshold the threshold value to set.
     * @return the PolicyProperties object itself.
     */
    public PolicyProperties withThreshold(String threshold) {
        this.threshold = threshold;
        return this;
    }

    /**
     * Get the evaluatorType property: The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
     * 
     * @return the evaluatorType value.
     */
    public PolicyEvaluatorType evaluatorType() {
        return this.evaluatorType;
    }

    /**
     * Set the evaluatorType property: The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
     * 
     * @param evaluatorType the evaluatorType value to set.
     * @return the PolicyProperties object itself.
     */
    public PolicyProperties withEvaluatorType(PolicyEvaluatorType evaluatorType) {
        this.evaluatorType = evaluatorType;
        return this;
    }

    /**
     * Get the createdDate property: The creation date of the policy.
     * 
     * @return the createdDate value.
     */
    public OffsetDateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     * 
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("factName", this.factName == null ? null : this.factName.toString());
        jsonWriter.writeStringField("factData", this.factData);
        jsonWriter.writeStringField("threshold", this.threshold);
        jsonWriter.writeStringField("evaluatorType", this.evaluatorType == null ? null : this.evaluatorType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyProperties.
     */
    public static PolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyProperties deserializedPolicyProperties = new PolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedPolicyProperties.description = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedPolicyProperties.status = PolicyStatus.fromString(reader.getString());
                } else if ("factName".equals(fieldName)) {
                    deserializedPolicyProperties.factName = PolicyFactName.fromString(reader.getString());
                } else if ("factData".equals(fieldName)) {
                    deserializedPolicyProperties.factData = reader.getString();
                } else if ("threshold".equals(fieldName)) {
                    deserializedPolicyProperties.threshold = reader.getString();
                } else if ("evaluatorType".equals(fieldName)) {
                    deserializedPolicyProperties.evaluatorType = PolicyEvaluatorType.fromString(reader.getString());
                } else if ("createdDate".equals(fieldName)) {
                    deserializedPolicyProperties.createdDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPolicyProperties.provisioningState = reader.getString();
                } else if ("uniqueIdentifier".equals(fieldName)) {
                    deserializedPolicyProperties.uniqueIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyProperties;
        });
    }
}
