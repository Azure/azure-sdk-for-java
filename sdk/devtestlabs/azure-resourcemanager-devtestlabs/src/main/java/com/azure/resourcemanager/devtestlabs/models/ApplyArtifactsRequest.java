// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request body for applying artifacts to a virtual machine.
 */
@Fluent
public final class ApplyArtifactsRequest implements JsonSerializable<ApplyArtifactsRequest> {
    /*
     * The list of artifacts to apply.
     */
    private List<ArtifactInstallProperties> artifacts;

    /**
     * Creates an instance of ApplyArtifactsRequest class.
     */
    public ApplyArtifactsRequest() {
    }

    /**
     * Get the artifacts property: The list of artifacts to apply.
     * 
     * @return the artifacts value.
     */
    public List<ArtifactInstallProperties> artifacts() {
        return this.artifacts;
    }

    /**
     * Set the artifacts property: The list of artifacts to apply.
     * 
     * @param artifacts the artifacts value to set.
     * @return the ApplyArtifactsRequest object itself.
     */
    public ApplyArtifactsRequest withArtifacts(List<ArtifactInstallProperties> artifacts) {
        this.artifacts = artifacts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (artifacts() != null) {
            artifacts().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("artifacts", this.artifacts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplyArtifactsRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplyArtifactsRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplyArtifactsRequest.
     */
    public static ApplyArtifactsRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplyArtifactsRequest deserializedApplyArtifactsRequest = new ApplyArtifactsRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("artifacts".equals(fieldName)) {
                    List<ArtifactInstallProperties> artifacts
                        = reader.readArray(reader1 -> ArtifactInstallProperties.fromJson(reader1));
                    deserializedApplyArtifactsRequest.artifacts = artifacts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplyArtifactsRequest;
        });
    }
}
