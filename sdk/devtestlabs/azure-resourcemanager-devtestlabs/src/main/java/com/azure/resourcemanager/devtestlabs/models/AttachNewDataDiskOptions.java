// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties to attach new disk to the Virtual Machine.
 */
@Fluent
public final class AttachNewDataDiskOptions implements JsonSerializable<AttachNewDataDiskOptions> {
    /*
     * Size of the disk to be attached in Gibibytes.
     */
    private Integer diskSizeGiB;

    /*
     * The name of the disk to be attached.
     */
    private String diskName;

    /*
     * The storage type for the disk (i.e. Standard, Premium).
     */
    private StorageType diskType;

    /**
     * Creates an instance of AttachNewDataDiskOptions class.
     */
    public AttachNewDataDiskOptions() {
    }

    /**
     * Get the diskSizeGiB property: Size of the disk to be attached in Gibibytes.
     * 
     * @return the diskSizeGiB value.
     */
    public Integer diskSizeGiB() {
        return this.diskSizeGiB;
    }

    /**
     * Set the diskSizeGiB property: Size of the disk to be attached in Gibibytes.
     * 
     * @param diskSizeGiB the diskSizeGiB value to set.
     * @return the AttachNewDataDiskOptions object itself.
     */
    public AttachNewDataDiskOptions withDiskSizeGiB(Integer diskSizeGiB) {
        this.diskSizeGiB = diskSizeGiB;
        return this;
    }

    /**
     * Get the diskName property: The name of the disk to be attached.
     * 
     * @return the diskName value.
     */
    public String diskName() {
        return this.diskName;
    }

    /**
     * Set the diskName property: The name of the disk to be attached.
     * 
     * @param diskName the diskName value to set.
     * @return the AttachNewDataDiskOptions object itself.
     */
    public AttachNewDataDiskOptions withDiskName(String diskName) {
        this.diskName = diskName;
        return this;
    }

    /**
     * Get the diskType property: The storage type for the disk (i.e. Standard, Premium).
     * 
     * @return the diskType value.
     */
    public StorageType diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: The storage type for the disk (i.e. Standard, Premium).
     * 
     * @param diskType the diskType value to set.
     * @return the AttachNewDataDiskOptions object itself.
     */
    public AttachNewDataDiskOptions withDiskType(StorageType diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("diskSizeGiB", this.diskSizeGiB);
        jsonWriter.writeStringField("diskName", this.diskName);
        jsonWriter.writeStringField("diskType", this.diskType == null ? null : this.diskType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AttachNewDataDiskOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AttachNewDataDiskOptions if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AttachNewDataDiskOptions.
     */
    public static AttachNewDataDiskOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AttachNewDataDiskOptions deserializedAttachNewDataDiskOptions = new AttachNewDataDiskOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("diskSizeGiB".equals(fieldName)) {
                    deserializedAttachNewDataDiskOptions.diskSizeGiB = reader.getNullable(JsonReader::getInt);
                } else if ("diskName".equals(fieldName)) {
                    deserializedAttachNewDataDiskOptions.diskName = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedAttachNewDataDiskOptions.diskType = StorageType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAttachNewDataDiskOptions;
        });
    }
}
