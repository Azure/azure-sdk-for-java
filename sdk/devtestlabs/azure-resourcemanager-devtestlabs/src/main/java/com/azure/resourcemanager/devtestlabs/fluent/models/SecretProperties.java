// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a secret.
 */
@Fluent
public final class SecretProperties implements JsonSerializable<SecretProperties> {
    /*
     * The value of the secret for secret creation.
     */
    private String value;

    /*
     * The provisioning status of the resource.
     */
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    private String uniqueIdentifier;

    /**
     * Creates an instance of SecretProperties class.
     */
    public SecretProperties() {
    }

    /**
     * Get the value property: The value of the secret for secret creation.
     * 
     * @return the value value.
     */
    public String value() {
        return this.value;
    }

    /**
     * Set the value property: The value of the secret for secret creation.
     * 
     * @param value the value value to set.
     * @return the SecretProperties object itself.
     */
    public SecretProperties withValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     * 
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretProperties.
     */
    public static SecretProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretProperties deserializedSecretProperties = new SecretProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedSecretProperties.value = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSecretProperties.provisioningState = reader.getString();
                } else if ("uniqueIdentifier".equals(fieldName)) {
                    deserializedSecretProperties.uniqueIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretProperties;
        });
    }
}
