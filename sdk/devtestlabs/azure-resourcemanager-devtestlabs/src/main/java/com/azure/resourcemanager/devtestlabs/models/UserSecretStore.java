// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a user's secret store.
 */
@Fluent
public final class UserSecretStore implements JsonSerializable<UserSecretStore> {
    /*
     * The URI of the user's Key vault.
     */
    private String keyVaultUri;

    /*
     * The ID of the user's Key vault.
     */
    private String keyVaultId;

    /**
     * Creates an instance of UserSecretStore class.
     */
    public UserSecretStore() {
    }

    /**
     * Get the keyVaultUri property: The URI of the user's Key vault.
     * 
     * @return the keyVaultUri value.
     */
    public String keyVaultUri() {
        return this.keyVaultUri;
    }

    /**
     * Set the keyVaultUri property: The URI of the user's Key vault.
     * 
     * @param keyVaultUri the keyVaultUri value to set.
     * @return the UserSecretStore object itself.
     */
    public UserSecretStore withKeyVaultUri(String keyVaultUri) {
        this.keyVaultUri = keyVaultUri;
        return this;
    }

    /**
     * Get the keyVaultId property: The ID of the user's Key vault.
     * 
     * @return the keyVaultId value.
     */
    public String keyVaultId() {
        return this.keyVaultId;
    }

    /**
     * Set the keyVaultId property: The ID of the user's Key vault.
     * 
     * @param keyVaultId the keyVaultId value to set.
     * @return the UserSecretStore object itself.
     */
    public UserSecretStore withKeyVaultId(String keyVaultId) {
        this.keyVaultId = keyVaultId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyVaultUri", this.keyVaultUri);
        jsonWriter.writeStringField("keyVaultId", this.keyVaultId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserSecretStore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserSecretStore if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UserSecretStore.
     */
    public static UserSecretStore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserSecretStore deserializedUserSecretStore = new UserSecretStore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultUri".equals(fieldName)) {
                    deserializedUserSecretStore.keyVaultUri = reader.getString();
                } else if ("keyVaultId".equals(fieldName)) {
                    deserializedUserSecretStore.keyVaultId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserSecretStore;
        });
    }
}
