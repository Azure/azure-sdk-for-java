// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesCustom;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromPlan;
import com.azure.resourcemanager.devtestlabs.models.CustomImagePropertiesFromVm;
import com.azure.resourcemanager.devtestlabs.models.DataDiskStorageTypeInfo;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of a custom image.
 */
@Fluent
public final class CustomImageProperties implements JsonSerializable<CustomImageProperties> {
    /*
     * The virtual machine from which the image is to be created.
     */
    private CustomImagePropertiesFromVm vm;

    /*
     * The VHD from which the image is to be created.
     */
    private CustomImagePropertiesCustom vhd;

    /*
     * The description of the custom image.
     */
    private String description;

    /*
     * The author of the custom image.
     */
    private String author;

    /*
     * The creation date of the custom image.
     */
    private OffsetDateTime creationDate;

    /*
     * The Managed Image Id backing the custom image.
     */
    private String managedImageId;

    /*
     * The Managed Snapshot Id backing the custom image.
     */
    private String managedSnapshotId;

    /*
     * Storage information about the data disks present in the custom image
     */
    private List<DataDiskStorageTypeInfo> dataDiskStorageInfo;

    /*
     * Storage information about the plan related to this custom image
     */
    private CustomImagePropertiesFromPlan customImagePlan;

    /*
     * Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment
     */
    private Boolean isPlanAuthorized;

    /*
     * The provisioning status of the resource.
     */
    private String provisioningState;

    /*
     * The unique immutable identifier of a resource (Guid).
     */
    private String uniqueIdentifier;

    /**
     * Creates an instance of CustomImageProperties class.
     */
    public CustomImageProperties() {
    }

    /**
     * Get the vm property: The virtual machine from which the image is to be created.
     * 
     * @return the vm value.
     */
    public CustomImagePropertiesFromVm vm() {
        return this.vm;
    }

    /**
     * Set the vm property: The virtual machine from which the image is to be created.
     * 
     * @param vm the vm value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withVm(CustomImagePropertiesFromVm vm) {
        this.vm = vm;
        return this;
    }

    /**
     * Get the vhd property: The VHD from which the image is to be created.
     * 
     * @return the vhd value.
     */
    public CustomImagePropertiesCustom vhd() {
        return this.vhd;
    }

    /**
     * Set the vhd property: The VHD from which the image is to be created.
     * 
     * @param vhd the vhd value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withVhd(CustomImagePropertiesCustom vhd) {
        this.vhd = vhd;
        return this;
    }

    /**
     * Get the description property: The description of the custom image.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the custom image.
     * 
     * @param description the description value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the author property: The author of the custom image.
     * 
     * @return the author value.
     */
    public String author() {
        return this.author;
    }

    /**
     * Set the author property: The author of the custom image.
     * 
     * @param author the author value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withAuthor(String author) {
        this.author = author;
        return this;
    }

    /**
     * Get the creationDate property: The creation date of the custom image.
     * 
     * @return the creationDate value.
     */
    public OffsetDateTime creationDate() {
        return this.creationDate;
    }

    /**
     * Get the managedImageId property: The Managed Image Id backing the custom image.
     * 
     * @return the managedImageId value.
     */
    public String managedImageId() {
        return this.managedImageId;
    }

    /**
     * Set the managedImageId property: The Managed Image Id backing the custom image.
     * 
     * @param managedImageId the managedImageId value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withManagedImageId(String managedImageId) {
        this.managedImageId = managedImageId;
        return this;
    }

    /**
     * Get the managedSnapshotId property: The Managed Snapshot Id backing the custom image.
     * 
     * @return the managedSnapshotId value.
     */
    public String managedSnapshotId() {
        return this.managedSnapshotId;
    }

    /**
     * Set the managedSnapshotId property: The Managed Snapshot Id backing the custom image.
     * 
     * @param managedSnapshotId the managedSnapshotId value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withManagedSnapshotId(String managedSnapshotId) {
        this.managedSnapshotId = managedSnapshotId;
        return this;
    }

    /**
     * Get the dataDiskStorageInfo property: Storage information about the data disks present in the custom image.
     * 
     * @return the dataDiskStorageInfo value.
     */
    public List<DataDiskStorageTypeInfo> dataDiskStorageInfo() {
        return this.dataDiskStorageInfo;
    }

    /**
     * Set the dataDiskStorageInfo property: Storage information about the data disks present in the custom image.
     * 
     * @param dataDiskStorageInfo the dataDiskStorageInfo value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withDataDiskStorageInfo(List<DataDiskStorageTypeInfo> dataDiskStorageInfo) {
        this.dataDiskStorageInfo = dataDiskStorageInfo;
        return this;
    }

    /**
     * Get the customImagePlan property: Storage information about the plan related to this custom image.
     * 
     * @return the customImagePlan value.
     */
    public CustomImagePropertiesFromPlan customImagePlan() {
        return this.customImagePlan;
    }

    /**
     * Set the customImagePlan property: Storage information about the plan related to this custom image.
     * 
     * @param customImagePlan the customImagePlan value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withCustomImagePlan(CustomImagePropertiesFromPlan customImagePlan) {
        this.customImagePlan = customImagePlan;
        return this;
    }

    /**
     * Get the isPlanAuthorized property: Whether or not the custom images underlying offer/plan has been enabled for
     * programmatic deployment.
     * 
     * @return the isPlanAuthorized value.
     */
    public Boolean isPlanAuthorized() {
        return this.isPlanAuthorized;
    }

    /**
     * Set the isPlanAuthorized property: Whether or not the custom images underlying offer/plan has been enabled for
     * programmatic deployment.
     * 
     * @param isPlanAuthorized the isPlanAuthorized value to set.
     * @return the CustomImageProperties object itself.
     */
    public CustomImageProperties withIsPlanAuthorized(Boolean isPlanAuthorized) {
        this.isPlanAuthorized = isPlanAuthorized;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning status of the resource.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the uniqueIdentifier property: The unique immutable identifier of a resource (Guid).
     * 
     * @return the uniqueIdentifier value.
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vm() != null) {
            vm().validate();
        }
        if (vhd() != null) {
            vhd().validate();
        }
        if (dataDiskStorageInfo() != null) {
            dataDiskStorageInfo().forEach(e -> e.validate());
        }
        if (customImagePlan() != null) {
            customImagePlan().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("vm", this.vm);
        jsonWriter.writeJsonField("vhd", this.vhd);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("author", this.author);
        jsonWriter.writeStringField("managedImageId", this.managedImageId);
        jsonWriter.writeStringField("managedSnapshotId", this.managedSnapshotId);
        jsonWriter.writeArrayField("dataDiskStorageInfo", this.dataDiskStorageInfo,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("customImagePlan", this.customImagePlan);
        jsonWriter.writeBooleanField("isPlanAuthorized", this.isPlanAuthorized);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomImageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomImageProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomImageProperties.
     */
    public static CustomImageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomImageProperties deserializedCustomImageProperties = new CustomImageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vm".equals(fieldName)) {
                    deserializedCustomImageProperties.vm = CustomImagePropertiesFromVm.fromJson(reader);
                } else if ("vhd".equals(fieldName)) {
                    deserializedCustomImageProperties.vhd = CustomImagePropertiesCustom.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedCustomImageProperties.description = reader.getString();
                } else if ("author".equals(fieldName)) {
                    deserializedCustomImageProperties.author = reader.getString();
                } else if ("creationDate".equals(fieldName)) {
                    deserializedCustomImageProperties.creationDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("managedImageId".equals(fieldName)) {
                    deserializedCustomImageProperties.managedImageId = reader.getString();
                } else if ("managedSnapshotId".equals(fieldName)) {
                    deserializedCustomImageProperties.managedSnapshotId = reader.getString();
                } else if ("dataDiskStorageInfo".equals(fieldName)) {
                    List<DataDiskStorageTypeInfo> dataDiskStorageInfo
                        = reader.readArray(reader1 -> DataDiskStorageTypeInfo.fromJson(reader1));
                    deserializedCustomImageProperties.dataDiskStorageInfo = dataDiskStorageInfo;
                } else if ("customImagePlan".equals(fieldName)) {
                    deserializedCustomImageProperties.customImagePlan = CustomImagePropertiesFromPlan.fromJson(reader);
                } else if ("isPlanAuthorized".equals(fieldName)) {
                    deserializedCustomImageProperties.isPlanAuthorized = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCustomImageProperties.provisioningState = reader.getString();
                } else if ("uniqueIdentifier".equals(fieldName)) {
                    deserializedCustomImageProperties.uniqueIdentifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomImageProperties;
        });
    }
}
