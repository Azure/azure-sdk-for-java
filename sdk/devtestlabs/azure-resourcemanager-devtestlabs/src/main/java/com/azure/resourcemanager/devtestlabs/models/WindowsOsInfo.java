// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about a Windows OS.
 */
@Fluent
public final class WindowsOsInfo implements JsonSerializable<WindowsOsInfo> {
    /*
     * The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied).
     */
    private WindowsOsState windowsOsState;

    /**
     * Creates an instance of WindowsOsInfo class.
     */
    public WindowsOsInfo() {
    }

    /**
     * Get the windowsOsState property: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     * SysprepApplied).
     * 
     * @return the windowsOsState value.
     */
    public WindowsOsState windowsOsState() {
        return this.windowsOsState;
    }

    /**
     * Set the windowsOsState property: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     * SysprepApplied).
     * 
     * @param windowsOsState the windowsOsState value to set.
     * @return the WindowsOsInfo object itself.
     */
    public WindowsOsInfo withWindowsOsState(WindowsOsState windowsOsState) {
        this.windowsOsState = windowsOsState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("windowsOsState",
            this.windowsOsState == null ? null : this.windowsOsState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WindowsOsInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WindowsOsInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WindowsOsInfo.
     */
    public static WindowsOsInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WindowsOsInfo deserializedWindowsOsInfo = new WindowsOsInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("windowsOsState".equals(fieldName)) {
                    deserializedWindowsOsInfo.windowsOsState = WindowsOsState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWindowsOsInfo;
        });
    }
}
