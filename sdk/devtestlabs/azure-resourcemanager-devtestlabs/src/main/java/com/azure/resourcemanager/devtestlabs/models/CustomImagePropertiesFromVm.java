// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.devtestlabs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties for creating a custom image from a virtual machine.
 */
@Fluent
public final class CustomImagePropertiesFromVm implements JsonSerializable<CustomImagePropertiesFromVm> {
    /*
     * The source vm identifier.
     */
    private String sourceVmId;

    /*
     * The Windows OS information of the VM.
     */
    private WindowsOsInfo windowsOsInfo;

    /*
     * The Linux OS information of the VM.
     */
    private LinuxOsInfo linuxOsInfo;

    /**
     * Creates an instance of CustomImagePropertiesFromVm class.
     */
    public CustomImagePropertiesFromVm() {
    }

    /**
     * Get the sourceVmId property: The source vm identifier.
     * 
     * @return the sourceVmId value.
     */
    public String sourceVmId() {
        return this.sourceVmId;
    }

    /**
     * Set the sourceVmId property: The source vm identifier.
     * 
     * @param sourceVmId the sourceVmId value to set.
     * @return the CustomImagePropertiesFromVm object itself.
     */
    public CustomImagePropertiesFromVm withSourceVmId(String sourceVmId) {
        this.sourceVmId = sourceVmId;
        return this;
    }

    /**
     * Get the windowsOsInfo property: The Windows OS information of the VM.
     * 
     * @return the windowsOsInfo value.
     */
    public WindowsOsInfo windowsOsInfo() {
        return this.windowsOsInfo;
    }

    /**
     * Set the windowsOsInfo property: The Windows OS information of the VM.
     * 
     * @param windowsOsInfo the windowsOsInfo value to set.
     * @return the CustomImagePropertiesFromVm object itself.
     */
    public CustomImagePropertiesFromVm withWindowsOsInfo(WindowsOsInfo windowsOsInfo) {
        this.windowsOsInfo = windowsOsInfo;
        return this;
    }

    /**
     * Get the linuxOsInfo property: The Linux OS information of the VM.
     * 
     * @return the linuxOsInfo value.
     */
    public LinuxOsInfo linuxOsInfo() {
        return this.linuxOsInfo;
    }

    /**
     * Set the linuxOsInfo property: The Linux OS information of the VM.
     * 
     * @param linuxOsInfo the linuxOsInfo value to set.
     * @return the CustomImagePropertiesFromVm object itself.
     */
    public CustomImagePropertiesFromVm withLinuxOsInfo(LinuxOsInfo linuxOsInfo) {
        this.linuxOsInfo = linuxOsInfo;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (windowsOsInfo() != null) {
            windowsOsInfo().validate();
        }
        if (linuxOsInfo() != null) {
            linuxOsInfo().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceVmId", this.sourceVmId);
        jsonWriter.writeJsonField("windowsOsInfo", this.windowsOsInfo);
        jsonWriter.writeJsonField("linuxOsInfo", this.linuxOsInfo);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomImagePropertiesFromVm from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomImagePropertiesFromVm if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomImagePropertiesFromVm.
     */
    public static CustomImagePropertiesFromVm fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomImagePropertiesFromVm deserializedCustomImagePropertiesFromVm = new CustomImagePropertiesFromVm();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceVmId".equals(fieldName)) {
                    deserializedCustomImagePropertiesFromVm.sourceVmId = reader.getString();
                } else if ("windowsOsInfo".equals(fieldName)) {
                    deserializedCustomImagePropertiesFromVm.windowsOsInfo = WindowsOsInfo.fromJson(reader);
                } else if ("linuxOsInfo".equals(fieldName)) {
                    deserializedCustomImagePropertiesFromVm.linuxOsInfo = LinuxOsInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomImagePropertiesFromVm;
        });
    }
}
