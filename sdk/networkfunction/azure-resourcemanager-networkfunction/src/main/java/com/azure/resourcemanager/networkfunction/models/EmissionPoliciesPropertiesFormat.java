// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Emission policy properties.
 */
@Fluent
public final class EmissionPoliciesPropertiesFormat implements JsonSerializable<EmissionPoliciesPropertiesFormat> {
    /*
     * Emission format type.
     */
    private EmissionType emissionType;

    /*
     * Emission policy destinations.
     */
    private List<EmissionPolicyDestination> emissionDestinations;

    /**
     * Creates an instance of EmissionPoliciesPropertiesFormat class.
     */
    public EmissionPoliciesPropertiesFormat() {
    }

    /**
     * Get the emissionType property: Emission format type.
     * 
     * @return the emissionType value.
     */
    public EmissionType emissionType() {
        return this.emissionType;
    }

    /**
     * Set the emissionType property: Emission format type.
     * 
     * @param emissionType the emissionType value to set.
     * @return the EmissionPoliciesPropertiesFormat object itself.
     */
    public EmissionPoliciesPropertiesFormat withEmissionType(EmissionType emissionType) {
        this.emissionType = emissionType;
        return this;
    }

    /**
     * Get the emissionDestinations property: Emission policy destinations.
     * 
     * @return the emissionDestinations value.
     */
    public List<EmissionPolicyDestination> emissionDestinations() {
        return this.emissionDestinations;
    }

    /**
     * Set the emissionDestinations property: Emission policy destinations.
     * 
     * @param emissionDestinations the emissionDestinations value to set.
     * @return the EmissionPoliciesPropertiesFormat object itself.
     */
    public EmissionPoliciesPropertiesFormat
        withEmissionDestinations(List<EmissionPolicyDestination> emissionDestinations) {
        this.emissionDestinations = emissionDestinations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (emissionDestinations() != null) {
            emissionDestinations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("emissionType", this.emissionType == null ? null : this.emissionType.toString());
        jsonWriter.writeArrayField("emissionDestinations", this.emissionDestinations,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EmissionPoliciesPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EmissionPoliciesPropertiesFormat if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EmissionPoliciesPropertiesFormat.
     */
    public static EmissionPoliciesPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EmissionPoliciesPropertiesFormat deserializedEmissionPoliciesPropertiesFormat
                = new EmissionPoliciesPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("emissionType".equals(fieldName)) {
                    deserializedEmissionPoliciesPropertiesFormat.emissionType
                        = EmissionType.fromString(reader.getString());
                } else if ("emissionDestinations".equals(fieldName)) {
                    List<EmissionPolicyDestination> emissionDestinations
                        = reader.readArray(reader1 -> EmissionPolicyDestination.fromJson(reader1));
                    deserializedEmissionPoliciesPropertiesFormat.emissionDestinations = emissionDestinations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEmissionPoliciesPropertiesFormat;
        });
    }
}
