// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkfunction.models.EmissionPoliciesPropertiesFormat;
import com.azure.resourcemanager.networkfunction.models.IngestionPolicyPropertiesFormat;
import com.azure.resourcemanager.networkfunction.models.ProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * Collection policy properties.
 */
@Fluent
public final class CollectorPolicyPropertiesFormat implements JsonSerializable<CollectorPolicyPropertiesFormat> {
    /*
     * Ingestion policies.
     */
    private IngestionPolicyPropertiesFormat ingestionPolicy;

    /*
     * Emission policies.
     */
    private List<EmissionPoliciesPropertiesFormat> emissionPolicies;

    /*
     * The provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of CollectorPolicyPropertiesFormat class.
     */
    public CollectorPolicyPropertiesFormat() {
    }

    /**
     * Get the ingestionPolicy property: Ingestion policies.
     * 
     * @return the ingestionPolicy value.
     */
    public IngestionPolicyPropertiesFormat ingestionPolicy() {
        return this.ingestionPolicy;
    }

    /**
     * Set the ingestionPolicy property: Ingestion policies.
     * 
     * @param ingestionPolicy the ingestionPolicy value to set.
     * @return the CollectorPolicyPropertiesFormat object itself.
     */
    public CollectorPolicyPropertiesFormat withIngestionPolicy(IngestionPolicyPropertiesFormat ingestionPolicy) {
        this.ingestionPolicy = ingestionPolicy;
        return this;
    }

    /**
     * Get the emissionPolicies property: Emission policies.
     * 
     * @return the emissionPolicies value.
     */
    public List<EmissionPoliciesPropertiesFormat> emissionPolicies() {
        return this.emissionPolicies;
    }

    /**
     * Set the emissionPolicies property: Emission policies.
     * 
     * @param emissionPolicies the emissionPolicies value to set.
     * @return the CollectorPolicyPropertiesFormat object itself.
     */
    public CollectorPolicyPropertiesFormat
        withEmissionPolicies(List<EmissionPoliciesPropertiesFormat> emissionPolicies) {
        this.emissionPolicies = emissionPolicies;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ingestionPolicy() != null) {
            ingestionPolicy().validate();
        }
        if (emissionPolicies() != null) {
            emissionPolicies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("ingestionPolicy", this.ingestionPolicy);
        jsonWriter.writeArrayField("emissionPolicies", this.emissionPolicies,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectorPolicyPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectorPolicyPropertiesFormat if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CollectorPolicyPropertiesFormat.
     */
    public static CollectorPolicyPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectorPolicyPropertiesFormat deserializedCollectorPolicyPropertiesFormat
                = new CollectorPolicyPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ingestionPolicy".equals(fieldName)) {
                    deserializedCollectorPolicyPropertiesFormat.ingestionPolicy
                        = IngestionPolicyPropertiesFormat.fromJson(reader);
                } else if ("emissionPolicies".equals(fieldName)) {
                    List<EmissionPoliciesPropertiesFormat> emissionPolicies
                        = reader.readArray(reader1 -> EmissionPoliciesPropertiesFormat.fromJson(reader1));
                    deserializedCollectorPolicyPropertiesFormat.emissionPolicies = emissionPolicies;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCollectorPolicyPropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCollectorPolicyPropertiesFormat;
        });
    }
}
