// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.networkfunction.models.ProvisioningState;
import com.azure.resourcemanager.networkfunction.models.ResourceReference;
import java.io.IOException;
import java.util.List;

/**
 * Azure Traffic Collector resource properties.
 */
@Fluent
public final class AzureTrafficCollectorPropertiesFormat
    implements JsonSerializable<AzureTrafficCollectorPropertiesFormat> {
    /*
     * Collector Policies for Azure Traffic Collector.
     */
    private List<ResourceReference> collectorPolicies;

    /*
     * The virtualHub to which the Azure Traffic Collector belongs.
     */
    private ResourceReference virtualHub;

    /*
     * The provisioning state of the application rule collection resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AzureTrafficCollectorPropertiesFormat class.
     */
    public AzureTrafficCollectorPropertiesFormat() {
    }

    /**
     * Get the collectorPolicies property: Collector Policies for Azure Traffic Collector.
     * 
     * @return the collectorPolicies value.
     */
    public List<ResourceReference> collectorPolicies() {
        return this.collectorPolicies;
    }

    /**
     * Get the virtualHub property: The virtualHub to which the Azure Traffic Collector belongs.
     * 
     * @return the virtualHub value.
     */
    public ResourceReference virtualHub() {
        return this.virtualHub;
    }

    /**
     * Set the virtualHub property: The virtualHub to which the Azure Traffic Collector belongs.
     * 
     * @param virtualHub the virtualHub value to set.
     * @return the AzureTrafficCollectorPropertiesFormat object itself.
     */
    public AzureTrafficCollectorPropertiesFormat withVirtualHub(ResourceReference virtualHub) {
        this.virtualHub = virtualHub;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the application rule collection resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (collectorPolicies() != null) {
            collectorPolicies().forEach(e -> e.validate());
        }
        if (virtualHub() != null) {
            virtualHub().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("virtualHub", this.virtualHub);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureTrafficCollectorPropertiesFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureTrafficCollectorPropertiesFormat if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureTrafficCollectorPropertiesFormat.
     */
    public static AzureTrafficCollectorPropertiesFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureTrafficCollectorPropertiesFormat deserializedAzureTrafficCollectorPropertiesFormat
                = new AzureTrafficCollectorPropertiesFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("collectorPolicies".equals(fieldName)) {
                    List<ResourceReference> collectorPolicies
                        = reader.readArray(reader1 -> ResourceReference.fromJson(reader1));
                    deserializedAzureTrafficCollectorPropertiesFormat.collectorPolicies = collectorPolicies;
                } else if ("virtualHub".equals(fieldName)) {
                    deserializedAzureTrafficCollectorPropertiesFormat.virtualHub = ResourceReference.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAzureTrafficCollectorPropertiesFormat.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureTrafficCollectorPropertiesFormat;
        });
    }
}
