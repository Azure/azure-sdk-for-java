// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkfunction.AzureTrafficCollectorManager;
import com.azure.resourcemanager.networkfunction.models.CollectorPolicy;
import com.azure.resourcemanager.networkfunction.models.EmissionType;
import com.azure.resourcemanager.networkfunction.models.IngestionType;
import com.azure.resourcemanager.networkfunction.models.SourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CollectorPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"ingestionPolicy\":{\"ingestionType\":\"IPFIX\",\"ingestionSources\":[{\"sourceType\":\"Resource\",\"resourceId\":\"tko\"},{\"sourceType\":\"Resource\",\"resourceId\":\"uknvudwti\"}]},\"emissionPolicies\":[{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{},{}]},{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{},{}]},{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{}]}],\"provisioningState\":\"Failed\"},\"etag\":\"egukgjnpiucg\",\"location\":\"evqzntypmrbp\",\"tags\":{\"nfyhx\":\"drqjsdpy\"},\"id\":\"eoejzic\",\"name\":\"ifsjttgzfbishcb\",\"type\":\"hajdeyeamdpha\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureTrafficCollectorManager manager = AzureTrafficCollectorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CollectorPolicy> response
            = manager.collectorPolicies().list("ggi", "rxwburv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("evqzntypmrbp", response.iterator().next().location());
        Assertions.assertEquals("drqjsdpy", response.iterator().next().tags().get("nfyhx"));
        Assertions.assertEquals(IngestionType.IPFIX, response.iterator().next().ingestionPolicy().ingestionType());
        Assertions.assertEquals(SourceType.RESOURCE,
            response.iterator().next().ingestionPolicy().ingestionSources().get(0).sourceType());
        Assertions.assertEquals("tko",
            response.iterator().next().ingestionPolicy().ingestionSources().get(0).resourceId());
        Assertions.assertEquals(EmissionType.IPFIX,
            response.iterator().next().emissionPolicies().get(0).emissionType());
    }
}
