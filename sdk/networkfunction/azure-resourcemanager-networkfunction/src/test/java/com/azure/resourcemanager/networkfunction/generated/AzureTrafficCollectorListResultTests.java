// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkfunction.fluent.models.AzureTrafficCollectorInner;
import com.azure.resourcemanager.networkfunction.models.AzureTrafficCollectorListResult;
import com.azure.resourcemanager.networkfunction.models.ResourceReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTrafficCollectorListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTrafficCollectorListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"collectorPolicies\":[{\"id\":\"ihfxtijbpzvgnwzs\"},{\"id\":\"glzufc\"},{\"id\":\"kohdbiha\"}],\"virtualHub\":{\"id\":\"hfcbjysa\"},\"provisioningState\":\"Succeeded\"},\"etag\":\"xqhabi\",\"location\":\"ikxwc\",\"tags\":{\"n\":\"scnpqxuhivy\",\"rkxvdum\":\"wby\"},\"id\":\"grtfwvu\",\"name\":\"xgaudccs\",\"type\":\"h\"},{\"properties\":{\"collectorPolicies\":[{\"id\":\"ejhkry\"},{\"id\":\"napczwlokjy\"},{\"id\":\"kkvnipjox\"},{\"id\":\"nchgej\"}],\"virtualHub\":{\"id\":\"dmailzydehojw\"},\"provisioningState\":\"Deleting\"},\"etag\":\"xinpmqnjaq\",\"location\":\"xj\",\"tags\":{\"gjvw\":\"ozvcput\"},\"id\":\"fdatsc\",\"name\":\"dvpjhulsuuvmk\",\"type\":\"ozkrwfndiodjpslw\"}],\"nextLink\":\"dpvwryoqpsoaccta\"}")
            .toObject(AzureTrafficCollectorListResult.class);
        Assertions.assertEquals("ikxwc", model.value().get(0).location());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).tags().get("n"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTrafficCollectorListResult model = new AzureTrafficCollectorListResult().withValue(Arrays.asList(
            new AzureTrafficCollectorInner().withLocation("ikxwc")
                .withTags(mapOf("n", "scnpqxuhivy", "rkxvdum", "wby"))
                .withVirtualHub(new ResourceReference()),
            new AzureTrafficCollectorInner().withLocation("xj")
                .withTags(mapOf("gjvw", "ozvcput"))
                .withVirtualHub(new ResourceReference())));
        model = BinaryData.fromObject(model).toObject(AzureTrafficCollectorListResult.class);
        Assertions.assertEquals("ikxwc", model.value().get(0).location());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).tags().get("n"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
