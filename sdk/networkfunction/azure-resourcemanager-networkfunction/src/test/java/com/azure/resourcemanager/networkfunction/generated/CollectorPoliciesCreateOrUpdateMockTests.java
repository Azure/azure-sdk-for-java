// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkfunction.AzureTrafficCollectorManager;
import com.azure.resourcemanager.networkfunction.models.CollectorPolicy;
import com.azure.resourcemanager.networkfunction.models.EmissionPoliciesPropertiesFormat;
import com.azure.resourcemanager.networkfunction.models.EmissionPolicyDestination;
import com.azure.resourcemanager.networkfunction.models.EmissionType;
import com.azure.resourcemanager.networkfunction.models.IngestionPolicyPropertiesFormat;
import com.azure.resourcemanager.networkfunction.models.IngestionSourcesPropertiesFormat;
import com.azure.resourcemanager.networkfunction.models.IngestionType;
import com.azure.resourcemanager.networkfunction.models.SourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CollectorPoliciesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"ingestionPolicy\":{\"ingestionType\":\"IPFIX\",\"ingestionSources\":[{\"sourceType\":\"Resource\",\"resourceId\":\"gkbrpyyd\"},{\"sourceType\":\"Resource\",\"resourceId\":\"uqqkpik\"},{\"sourceType\":\"Resource\",\"resourceId\":\"vtq\"},{\"sourceType\":\"Resource\",\"resourceId\":\"uynhijg\"}]},\"emissionPolicies\":[{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{}]}],\"provisioningState\":\"Succeeded\"},\"etag\":\"utrc\",\"location\":\"na\",\"tags\":{\"unmpxttd\":\"hj\",\"nbtkcxywnytnr\":\"hrbnlankxmyskpbh\",\"qidybyx\":\"yn\",\"aaxdbabphlwrq\":\"zfcl\"},\"id\":\"fkts\",\"name\":\"hsucoc\",\"type\":\"nyyazttbtwwrqpue\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureTrafficCollectorManager manager = AzureTrafficCollectorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CollectorPolicy response = manager.collectorPolicies()
            .define("ebrjcxe")
            .withRegion("ijhtxf")
            .withExistingAzureTrafficCollector("ctq", "jf")
            .withTags(mapOf("xnehmpvec", "bfs"))
            .withIngestionPolicy(new IngestionPolicyPropertiesFormat().withIngestionType(IngestionType.IPFIX)
                .withIngestionSources(Arrays.asList(
                    new IngestionSourcesPropertiesFormat().withSourceType(SourceType.RESOURCE)
                        .withResourceId("vjrbirphxepcyvah"),
                    new IngestionSourcesPropertiesFormat().withSourceType(SourceType.RESOURCE)
                        .withResourceId("kyqxjvuujqgidokg"))))
            .withEmissionPolicies(Arrays.asList(
                new EmissionPoliciesPropertiesFormat().withEmissionType(EmissionType.IPFIX)
                    .withEmissionDestinations(Arrays.asList(new EmissionPolicyDestination())),
                new EmissionPoliciesPropertiesFormat().withEmissionType(EmissionType.IPFIX)
                    .withEmissionDestinations(Arrays.asList(new EmissionPolicyDestination(),
                        new EmissionPolicyDestination(), new EmissionPolicyDestination())),
                new EmissionPoliciesPropertiesFormat().withEmissionType(EmissionType.IPFIX)
                    .withEmissionDestinations(
                        Arrays.asList(new EmissionPolicyDestination(), new EmissionPolicyDestination()))))
            .create();

        Assertions.assertEquals("na", response.location());
        Assertions.assertEquals("hj", response.tags().get("unmpxttd"));
        Assertions.assertEquals(IngestionType.IPFIX, response.ingestionPolicy().ingestionType());
        Assertions.assertEquals(SourceType.RESOURCE, response.ingestionPolicy().ingestionSources().get(0).sourceType());
        Assertions.assertEquals("gkbrpyyd", response.ingestionPolicy().ingestionSources().get(0).resourceId());
        Assertions.assertEquals(EmissionType.IPFIX, response.emissionPolicies().get(0).emissionType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
