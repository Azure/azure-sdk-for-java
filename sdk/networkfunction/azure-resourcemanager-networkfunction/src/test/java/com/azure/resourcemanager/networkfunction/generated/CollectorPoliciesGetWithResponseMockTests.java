// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.networkfunction.AzureTrafficCollectorManager;
import com.azure.resourcemanager.networkfunction.models.CollectorPolicy;
import com.azure.resourcemanager.networkfunction.models.EmissionType;
import com.azure.resourcemanager.networkfunction.models.IngestionType;
import com.azure.resourcemanager.networkfunction.models.SourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CollectorPoliciesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"ingestionPolicy\":{\"ingestionType\":\"IPFIX\",\"ingestionSources\":[{\"sourceType\":\"Resource\",\"resourceId\":\"mryw\"}]},\"emissionPolicies\":[{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{}]},{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{}]},{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{},{}]},{\"emissionType\":\"IPFIX\",\"emissionDestinations\":[{},{},{}]}],\"provisioningState\":\"Deleting\"},\"etag\":\"zlsico\",\"location\":\"qqn\",\"tags\":{\"yxzk\":\"ryavwhheunmmqh\",\"koklya\":\"noc\"},\"id\":\"uconuqszfkbey\",\"name\":\"ewrmjmwvvjektc\",\"type\":\"senhwlrs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AzureTrafficCollectorManager manager = AzureTrafficCollectorManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CollectorPolicy response = manager.collectorPolicies()
            .getWithResponse("alpbuxwgipwhon", "wkgshwa", "kix", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("qqn", response.location());
        Assertions.assertEquals("ryavwhheunmmqh", response.tags().get("yxzk"));
        Assertions.assertEquals(IngestionType.IPFIX, response.ingestionPolicy().ingestionType());
        Assertions.assertEquals(SourceType.RESOURCE, response.ingestionPolicy().ingestionSources().get(0).sourceType());
        Assertions.assertEquals("mryw", response.ingestionPolicy().ingestionSources().get(0).resourceId());
        Assertions.assertEquals(EmissionType.IPFIX, response.emissionPolicies().get(0).emissionType());
    }
}
