// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkfunction.fluent.models.AzureTrafficCollectorInner;
import com.azure.resourcemanager.networkfunction.models.ResourceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AzureTrafficCollectorInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AzureTrafficCollectorInner model = BinaryData.fromString(
            "{\"properties\":{\"collectorPolicies\":[{\"id\":\"lahbcryff\"},{\"id\":\"dosyg\"},{\"id\":\"paojakhmsbzjh\"}],\"virtualHub\":{\"id\":\"evdphlxaol\"},\"provisioningState\":\"Failed\"},\"etag\":\"rgqjbpfzfsinzg\",\"location\":\"cjrwzoxxjtfellu\",\"tags\":{\"np\":\"it\",\"lxofpdvhpfxxypin\":\"qfpjk\",\"podepoo\":\"nmayhuybb\",\"rxzxtheo\":\"inuvamiheogn\"},\"id\":\"usivye\",\"name\":\"cciqihnhungbwjz\",\"type\":\"nfygxgispemvtz\"}")
            .toObject(AzureTrafficCollectorInner.class);
        Assertions.assertEquals("cjrwzoxxjtfellu", model.location());
        Assertions.assertEquals("it", model.tags().get("np"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AzureTrafficCollectorInner model = new AzureTrafficCollectorInner().withLocation("cjrwzoxxjtfellu")
            .withTags(
                mapOf("np", "it", "lxofpdvhpfxxypin", "qfpjk", "podepoo", "nmayhuybb", "rxzxtheo", "inuvamiheogn"))
            .withVirtualHub(new ResourceReference());
        model = BinaryData.fromObject(model).toObject(AzureTrafficCollectorInner.class);
        Assertions.assertEquals("cjrwzoxxjtfellu", model.location());
        Assertions.assertEquals("it", model.tags().get("np"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
