// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.networkfunction.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.networkfunction.fluent.models.AzureTrafficCollectorInner;
import com.azure.resourcemanager.networkfunction.models.ResourceReference;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AzureTrafficCollectorInnerTests {
    @Test
    public void testDeserialize() {
        AzureTrafficCollectorInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"collectorPolicies\":[{\"id\":\"prozvcputegjvwmf\"},{\"id\":\"t\"},{\"id\":\"mdvpjhulsu\"}],\"virtualHub\":{\"id\":\"kjozkrwfnd\"},\"provisioningState\":\"Updating\"},\"etag\":\"pslwejdpvw\",\"location\":\"oqpsoa\",\"tags\":{\"lahbcryff\":\"azakl\",\"xpaojakhmsbz\":\"fdosyg\"},\"id\":\"hcrzevd\",\"name\":\"hlxaolthqtr\",\"type\":\"qjbpfzfsin\"}")
                .toObject(AzureTrafficCollectorInner.class);
        Assertions.assertEquals("oqpsoa", model.location());
        Assertions.assertEquals("azakl", model.tags().get("lahbcryff"));
    }

    @Test
    public void testSerialize() {
        AzureTrafficCollectorInner model =
            new AzureTrafficCollectorInner()
                .withLocation("oqpsoa")
                .withTags(mapOf("lahbcryff", "azakl", "xpaojakhmsbz", "fdosyg"))
                .withVirtualHub(new ResourceReference());
        model = BinaryData.fromObject(model).toObject(AzureTrafficCollectorInner.class);
        Assertions.assertEquals("oqpsoa", model.location());
        Assertions.assertEquals("azakl", model.tags().get("lahbcryff"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
