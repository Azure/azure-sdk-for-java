// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Batch analysis job.
 */
@Fluent
public final class BatchAnalysisJob implements JsonSerializable<BatchAnalysisJob> {
    /*
     * Unique job identifier.
     */
    @Generated
    private String jobId;

    /*
     * Current job status.
     */
    @Generated
    private OperationStatus status;

    /*
     * Date and time when the job was created.
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * Date and time when the job was last updated.
     */
    @Generated
    private OffsetDateTime lastUpdatedDateTime;

    /*
     * Total number of tasks.
     */
    @Generated
    private Integer totalCount;

    /*
     * Number of tasks that succeeded. Only returned when status=succeeded,failed.
     */
    @Generated
    private Integer succeededCount;

    /*
     * Number of tasks that failed. Only returned when status=succeeded,failed.
     */
    @Generated
    private Integer failedCount;

    /*
     * Any encountered error during batch analysis.
     */
    @Generated
    private Error error;

    /*
     * Default model identifier to use for each task.
     */
    @Generated
    private final String modelId;

    /*
     * URL of JSONL file listing the tasks.
     */
    @Generated
    private String inputTaskUrl;

    /*
     * URL of JSON file listing the tasks and associated status, result, and error.
     * Defaults to `{{inputTaskUrl}}.{{jobId}}.jsonl`.
     */
    @Generated
    private String outputTaskUrl;

    /*
     * URL of the blob container containing the input files.
     */
    @Generated
    private String inputBlobContainer;

    /*
     * Prefix for the input files under the input blob container.
     */
    @Generated
    private String inputBlobPrefix;

    /*
     * URL of the blob container to write the output files.
     */
    @Generated
    private String outputBlobContainer;

    /*
     * Prefix for the output files under the output blob container.
     */
    @Generated
    private String outputBlobPrefix;

    /**
     * Creates an instance of BatchAnalysisJob class.
     * 
     * @param modelId the modelId value to set.
     */
    @Generated
    public BatchAnalysisJob(String modelId) {
        this.modelId = modelId;
    }

    /**
     * Get the jobId property: Unique job identifier.
     * 
     * @return the jobId value.
     */
    @Generated
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Get the status property: Current job status.
     * 
     * @return the status value.
     */
    @Generated
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: Date and time when the job was created.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the lastUpdatedDateTime property: Date and time when the job was last updated.
     * 
     * @return the lastUpdatedDateTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdatedDateTime() {
        return this.lastUpdatedDateTime;
    }

    /**
     * Get the totalCount property: Total number of tasks.
     * 
     * @return the totalCount value.
     */
    @Generated
    public Integer getTotalCount() {
        return this.totalCount;
    }

    /**
     * Get the succeededCount property: Number of tasks that succeeded. Only returned when status=succeeded,failed.
     * 
     * @return the succeededCount value.
     */
    @Generated
    public Integer getSucceededCount() {
        return this.succeededCount;
    }

    /**
     * Get the failedCount property: Number of tasks that failed. Only returned when status=succeeded,failed.
     * 
     * @return the failedCount value.
     */
    @Generated
    public Integer getFailedCount() {
        return this.failedCount;
    }

    /**
     * Get the error property: Any encountered error during batch analysis.
     * 
     * @return the error value.
     */
    @Generated
    public Error getError() {
        return this.error;
    }

    /**
     * Get the modelId property: Default model identifier to use for each task.
     * 
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Get the inputTaskUrl property: URL of JSONL file listing the tasks.
     * 
     * @return the inputTaskUrl value.
     */
    @Generated
    public String getInputTaskUrl() {
        return this.inputTaskUrl;
    }

    /**
     * Set the inputTaskUrl property: URL of JSONL file listing the tasks.
     * 
     * @param inputTaskUrl the inputTaskUrl value to set.
     * @return the BatchAnalysisJob object itself.
     */
    @Generated
    public BatchAnalysisJob setInputTaskUrl(String inputTaskUrl) {
        this.inputTaskUrl = inputTaskUrl;
        return this;
    }

    /**
     * Get the outputTaskUrl property: URL of JSON file listing the tasks and associated status, result, and error.
     * Defaults to `{{inputTaskUrl}}.{{jobId}}.jsonl`.
     * 
     * @return the outputTaskUrl value.
     */
    @Generated
    public String getOutputTaskUrl() {
        return this.outputTaskUrl;
    }

    /**
     * Set the outputTaskUrl property: URL of JSON file listing the tasks and associated status, result, and error.
     * Defaults to `{{inputTaskUrl}}.{{jobId}}.jsonl`.
     * 
     * @param outputTaskUrl the outputTaskUrl value to set.
     * @return the BatchAnalysisJob object itself.
     */
    @Generated
    public BatchAnalysisJob setOutputTaskUrl(String outputTaskUrl) {
        this.outputTaskUrl = outputTaskUrl;
        return this;
    }

    /**
     * Get the inputBlobContainer property: URL of the blob container containing the input files.
     * 
     * @return the inputBlobContainer value.
     */
    @Generated
    public String getInputBlobContainer() {
        return this.inputBlobContainer;
    }

    /**
     * Set the inputBlobContainer property: URL of the blob container containing the input files.
     * 
     * @param inputBlobContainer the inputBlobContainer value to set.
     * @return the BatchAnalysisJob object itself.
     */
    @Generated
    public BatchAnalysisJob setInputBlobContainer(String inputBlobContainer) {
        this.inputBlobContainer = inputBlobContainer;
        return this;
    }

    /**
     * Get the inputBlobPrefix property: Prefix for the input files under the input blob container.
     * 
     * @return the inputBlobPrefix value.
     */
    @Generated
    public String getInputBlobPrefix() {
        return this.inputBlobPrefix;
    }

    /**
     * Set the inputBlobPrefix property: Prefix for the input files under the input blob container.
     * 
     * @param inputBlobPrefix the inputBlobPrefix value to set.
     * @return the BatchAnalysisJob object itself.
     */
    @Generated
    public BatchAnalysisJob setInputBlobPrefix(String inputBlobPrefix) {
        this.inputBlobPrefix = inputBlobPrefix;
        return this;
    }

    /**
     * Get the outputBlobContainer property: URL of the blob container to write the output files.
     * 
     * @return the outputBlobContainer value.
     */
    @Generated
    public String getOutputBlobContainer() {
        return this.outputBlobContainer;
    }

    /**
     * Set the outputBlobContainer property: URL of the blob container to write the output files.
     * 
     * @param outputBlobContainer the outputBlobContainer value to set.
     * @return the BatchAnalysisJob object itself.
     */
    @Generated
    public BatchAnalysisJob setOutputBlobContainer(String outputBlobContainer) {
        this.outputBlobContainer = outputBlobContainer;
        return this;
    }

    /**
     * Get the outputBlobPrefix property: Prefix for the output files under the output blob container.
     * 
     * @return the outputBlobPrefix value.
     */
    @Generated
    public String getOutputBlobPrefix() {
        return this.outputBlobPrefix;
    }

    /**
     * Set the outputBlobPrefix property: Prefix for the output files under the output blob container.
     * 
     * @param outputBlobPrefix the outputBlobPrefix value to set.
     * @return the BatchAnalysisJob object itself.
     */
    @Generated
    public BatchAnalysisJob setOutputBlobPrefix(String outputBlobPrefix) {
        this.outputBlobPrefix = outputBlobPrefix;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("inputTaskUrl", this.inputTaskUrl);
        jsonWriter.writeStringField("outputTaskUrl", this.outputTaskUrl);
        jsonWriter.writeStringField("inputBlobContainer", this.inputBlobContainer);
        jsonWriter.writeStringField("inputBlobPrefix", this.inputBlobPrefix);
        jsonWriter.writeStringField("outputBlobContainer", this.outputBlobContainer);
        jsonWriter.writeStringField("outputBlobPrefix", this.outputBlobPrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchAnalysisJob from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchAnalysisJob if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BatchAnalysisJob.
     */
    @Generated
    public static BatchAnalysisJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String jobId = null;
            String modelId = null;
            OperationStatus status = null;
            OffsetDateTime createdDateTime = null;
            OffsetDateTime lastUpdatedDateTime = null;
            Integer totalCount = null;
            Integer succeededCount = null;
            Integer failedCount = null;
            Error error = null;
            String inputTaskUrl = null;
            String outputTaskUrl = null;
            String inputBlobContainer = null;
            String inputBlobPrefix = null;
            String outputBlobContainer = null;
            String outputBlobPrefix = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("modelId".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = OperationStatus.fromString(reader.getString());
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdatedDateTime".equals(fieldName)) {
                    lastUpdatedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("totalCount".equals(fieldName)) {
                    totalCount = reader.getNullable(JsonReader::getInt);
                } else if ("succeededCount".equals(fieldName)) {
                    succeededCount = reader.getNullable(JsonReader::getInt);
                } else if ("failedCount".equals(fieldName)) {
                    failedCount = reader.getNullable(JsonReader::getInt);
                } else if ("error".equals(fieldName)) {
                    error = Error.fromJson(reader);
                } else if ("inputTaskUrl".equals(fieldName)) {
                    inputTaskUrl = reader.getString();
                } else if ("outputTaskUrl".equals(fieldName)) {
                    outputTaskUrl = reader.getString();
                } else if ("inputBlobContainer".equals(fieldName)) {
                    inputBlobContainer = reader.getString();
                } else if ("inputBlobPrefix".equals(fieldName)) {
                    inputBlobPrefix = reader.getString();
                } else if ("outputBlobContainer".equals(fieldName)) {
                    outputBlobContainer = reader.getString();
                } else if ("outputBlobPrefix".equals(fieldName)) {
                    outputBlobPrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            BatchAnalysisJob deserializedBatchAnalysisJob = new BatchAnalysisJob(modelId);
            deserializedBatchAnalysisJob.jobId = jobId;
            deserializedBatchAnalysisJob.status = status;
            deserializedBatchAnalysisJob.createdDateTime = createdDateTime;
            deserializedBatchAnalysisJob.lastUpdatedDateTime = lastUpdatedDateTime;
            deserializedBatchAnalysisJob.totalCount = totalCount;
            deserializedBatchAnalysisJob.succeededCount = succeededCount;
            deserializedBatchAnalysisJob.failedCount = failedCount;
            deserializedBatchAnalysisJob.error = error;
            deserializedBatchAnalysisJob.inputTaskUrl = inputTaskUrl;
            deserializedBatchAnalysisJob.outputTaskUrl = outputTaskUrl;
            deserializedBatchAnalysisJob.inputBlobContainer = inputBlobContainer;
            deserializedBatchAnalysisJob.inputBlobPrefix = inputBlobPrefix;
            deserializedBatchAnalysisJob.outputBlobContainer = outputBlobContainer;
            deserializedBatchAnalysisJob.outputBlobPrefix = outputBlobPrefix;

            return deserializedBatchAnalysisJob;
        });
    }
}
