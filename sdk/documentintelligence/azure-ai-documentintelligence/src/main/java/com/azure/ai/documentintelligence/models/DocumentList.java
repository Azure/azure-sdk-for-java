// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An object representing a list in the document.
 */
@Immutable
public final class DocumentList implements JsonSerializable<DocumentList> {
    /*
     * Location of the list in the reading order concatenated content.
     */
    @Generated
    private final List<DocumentSpan> spans;

    /*
     * Items in the list.
     */
    @Generated
    private final List<DocumentListItem> items;

    /**
     * Creates an instance of DocumentList class.
     * 
     * @param spans the spans value to set.
     * @param items the items value to set.
     */
    @Generated
    private DocumentList(List<DocumentSpan> spans, List<DocumentListItem> items) {
        this.spans = spans;
        this.items = items;
    }

    /**
     * Get the spans property: Location of the list in the reading order concatenated content.
     * 
     * @return the spans value.
     */
    @Generated
    public List<DocumentSpan> getSpans() {
        return this.spans;
    }

    /**
     * Get the items property: Items in the list.
     * 
     * @return the items value.
     */
    @Generated
    public List<DocumentListItem> getItems() {
        return this.items;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("spans", this.spans, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("items", this.items, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentList.
     */
    @Generated
    public static DocumentList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<DocumentSpan> spans = null;
            List<DocumentListItem> items = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("spans".equals(fieldName)) {
                    spans = reader.readArray(reader1 -> DocumentSpan.fromJson(reader1));
                } else if ("items".equals(fieldName)) {
                    items = reader.readArray(reader1 -> DocumentListItem.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new DocumentList(spans, items);
        });
    }
}
