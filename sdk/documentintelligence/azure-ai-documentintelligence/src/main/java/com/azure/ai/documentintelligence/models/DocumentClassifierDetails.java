// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * Document classifier info.
 */
@Immutable
public final class DocumentClassifierDetails implements JsonSerializable<DocumentClassifierDetails> {
    /*
     * Unique document classifier name.
     */
    @Generated
    private String classifierId;

    /*
     * Document classifier description.
     */
    @Generated
    private String description;

    /*
     * Date and time (UTC) when the document classifier was created.
     */
    @Generated
    private final OffsetDateTime createdDateTime;

    /*
     * Date and time (UTC) when the document classifier will expire.
     */
    @Generated
    private OffsetDateTime expirationDateTime;

    /*
     * API version used to create this document classifier.
     */
    @Generated
    private final String apiVersion;

    /*
     * Base classifierId on top of which the classifier was trained.
     */
    @Generated
    private String baseClassifierId;

    /*
     * List of document types to classify against.
     */
    @Generated
    private final Map<String, ClassifierDocumentTypeDetails> docTypes;

    /*
     * List of warnings encountered while building the classifier.
     */
    @Generated
    private List<Warning> warnings;

    /**
     * Creates an instance of DocumentClassifierDetails class.
     * 
     * @param createdDateTime the createdDateTime value to set.
     * @param apiVersion the apiVersion value to set.
     * @param docTypes the docTypes value to set.
     */
    @Generated
    private DocumentClassifierDetails(OffsetDateTime createdDateTime, String apiVersion,
        Map<String, ClassifierDocumentTypeDetails> docTypes) {
        this.createdDateTime = createdDateTime;
        this.apiVersion = apiVersion;
        this.docTypes = docTypes;
    }

    /**
     * Get the classifierId property: Unique document classifier name.
     * 
     * @return the classifierId value.
     */
    @Generated
    public String getClassifierId() {
        return this.classifierId;
    }

    /**
     * Get the description property: Document classifier description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the createdDateTime property: Date and time (UTC) when the document classifier was created.
     * 
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the expirationDateTime property: Date and time (UTC) when the document classifier will expire.
     * 
     * @return the expirationDateTime value.
     */
    @Generated
    public OffsetDateTime getExpirationDateTime() {
        return this.expirationDateTime;
    }

    /**
     * Get the apiVersion property: API version used to create this document classifier.
     * 
     * @return the apiVersion value.
     */
    @Generated
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Get the baseClassifierId property: Base classifierId on top of which the classifier was trained.
     * 
     * @return the baseClassifierId value.
     */
    @Generated
    public String getBaseClassifierId() {
        return this.baseClassifierId;
    }

    /**
     * Get the docTypes property: List of document types to classify against.
     * 
     * @return the docTypes value.
     */
    @Generated
    public Map<String, ClassifierDocumentTypeDetails> getDocTypes() {
        return this.docTypes;
    }

    /**
     * Get the warnings property: List of warnings encountered while building the classifier.
     * 
     * @return the warnings value.
     */
    @Generated
    public List<Warning> getWarnings() {
        return this.warnings;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdDateTime",
            this.createdDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTime));
        jsonWriter.writeStringField("apiVersion", this.apiVersion);
        jsonWriter.writeMapField("docTypes", this.docTypes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("expirationDateTime",
            this.expirationDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationDateTime));
        jsonWriter.writeStringField("baseClassifierId", this.baseClassifierId);
        jsonWriter.writeArrayField("warnings", this.warnings, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentClassifierDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentClassifierDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentClassifierDetails.
     */
    @Generated
    public static DocumentClassifierDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String classifierId = null;
            OffsetDateTime createdDateTime = null;
            String apiVersion = null;
            Map<String, ClassifierDocumentTypeDetails> docTypes = null;
            String description = null;
            OffsetDateTime expirationDateTime = null;
            String baseClassifierId = null;
            List<Warning> warnings = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("classifierId".equals(fieldName)) {
                    classifierId = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("apiVersion".equals(fieldName)) {
                    apiVersion = reader.getString();
                } else if ("docTypes".equals(fieldName)) {
                    docTypes = reader.readMap(reader1 -> ClassifierDocumentTypeDetails.fromJson(reader1));
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("expirationDateTime".equals(fieldName)) {
                    expirationDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("baseClassifierId".equals(fieldName)) {
                    baseClassifierId = reader.getString();
                } else if ("warnings".equals(fieldName)) {
                    warnings = reader.readArray(reader1 -> Warning.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            DocumentClassifierDetails deserializedDocumentClassifierDetails
                = new DocumentClassifierDetails(createdDateTime, apiVersion, docTypes);
            deserializedDocumentClassifierDetails.classifierId = classifierId;
            deserializedDocumentClassifierDetails.description = description;
            deserializedDocumentClassifierDetails.expirationDateTime = expirationDateTime;
            deserializedDocumentClassifierDetails.baseClassifierId = baseClassifierId;
            deserializedDocumentClassifierDetails.warnings = warnings;

            return deserializedDocumentClassifierDetails;
        });
    }
}
