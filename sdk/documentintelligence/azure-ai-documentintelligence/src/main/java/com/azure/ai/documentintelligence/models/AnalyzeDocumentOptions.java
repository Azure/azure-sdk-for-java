// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AnalyzedDocument analysis parameters.
 */
@Fluent
public final class AnalyzeDocumentOptions implements JsonSerializable<AnalyzeDocumentOptions> {
    /*
     * AnalyzedDocument URL to analyze. Either urlSource or base64Source must be specified.
     */
    @Generated
    private String urlSource;

    /*
     * Base64 encoding of the document to analyze. Either urlSource or base64Source
     * must be specified.
     */
    @Generated
    private byte[] base64Source;

    /**
     * Creates an instance of AnalyzeDocumentOptions class.
     */
    @Generated
    public AnalyzeDocumentOptions() {
    }

    /**
     * Get the urlSource property: AnalyzedDocument URL to analyze. Either urlSource or base64Source must be specified.
     *
     * @return the urlSource value.
     */
    @Generated
    public String getUrlSource() {
        return this.urlSource;
    }

    /**
     * Set the urlSource property: AnalyzedDocument URL to analyze. Either urlSource or base64Source must be specified.
     *
     * @param urlSource the urlSource value to set.
     * @return the AnalyzeDocumentOptions object itself.
     */
    @Generated
    public AnalyzeDocumentOptions setUrlSource(String urlSource) {
        this.urlSource = urlSource;
        return this;
    }

    /**
     * Get the base64Source property: Base64 encoding of the document to analyze. Either urlSource or base64Source
     * must be specified.
     *
     * @return the base64Source value.
     */
    @Generated
    public byte[] getBase64Source() {
        return CoreUtils.clone(this.base64Source);
    }

    /**
     * Set the base64Source property: Base64 encoding of the document to analyze. Either urlSource or base64Source
     * must be specified.
     *
     * @param base64Source the base64Source value to set.
     * @return the AnalyzeDocumentOptions object itself.
     */
    @Generated
    public AnalyzeDocumentOptions setBase64Source(byte[] base64Source) {
        this.base64Source = CoreUtils.clone(base64Source);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("urlSource", this.urlSource);
        jsonWriter.writeBinaryField("base64Source", this.base64Source);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeDocumentOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeDocumentOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AnalyzeDocumentOptions.
     */
    @Generated
    public static AnalyzeDocumentOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AnalyzeDocumentOptions deserializedAnalyzeDocumentOptions = new AnalyzeDocumentOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("urlSource".equals(fieldName)) {
                    deserializedAnalyzeDocumentOptions.urlSource = reader.getString();
                } else if ("base64Source".equals(fieldName)) {
                    deserializedAnalyzeDocumentOptions.base64Source = reader.getBinary();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAnalyzeDocumentOptions;
        });
    }
}
