// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Batch document analysis parameters.
 */
@Fluent
public final class AnalyzeBatchDocumentsOptions implements JsonSerializable<AnalyzeBatchDocumentsOptions> {
    /*
     * Azure Blob Storage location containing the batch documents. Either
     * azureBlobSource or azureBlobFileListSource must be specified.
     */
    @Generated
    private AzureBlobContentSource azureBlobSource;

    /*
     * Azure Blob Storage file list specifying the batch documents. Either
     * azureBlobSource or azureBlobFileListSource must be specified.
     */
    @Generated
    private AzureBlobFileListContentSource azureBlobFileListSource;

    /*
     * Azure Blob Storage container URL where analyze result files will be stored.
     */
    @Generated
    private final String resultContainerUrl;

    /*
     * Blob name prefix of result files.
     */
    @Generated
    private String resultPrefix;

    /*
     * Overwrite existing analyze result files?
     */
    @Generated
    private Boolean overwriteExisting;

    /**
     * Creates an instance of AnalyzeBatchDocumentsOptions class.
     * 
     * @param resultContainerUrl the resultContainerUrl value to set.
     */
    @Generated
    public AnalyzeBatchDocumentsOptions(String resultContainerUrl) {
        this.resultContainerUrl = resultContainerUrl;
    }

    /**
     * Get the azureBlobSource property: Azure Blob Storage location containing the batch documents. Either
     * azureBlobSource or azureBlobFileListSource must be specified.
     * 
     * @return the azureBlobSource value.
     */
    @Generated
    public AzureBlobContentSource getAzureBlobSource() {
        return this.azureBlobSource;
    }

    /**
     * Set the azureBlobSource property: Azure Blob Storage location containing the batch documents. Either
     * azureBlobSource or azureBlobFileListSource must be specified.
     * 
     * @param azureBlobSource the azureBlobSource value to set.
     * @return the AnalyzeBatchDocumentsOptions object itself.
     */
    @Generated
    public AnalyzeBatchDocumentsOptions setAzureBlobSource(AzureBlobContentSource azureBlobSource) {
        this.azureBlobSource = azureBlobSource;
        return this;
    }

    /**
     * Get the azureBlobFileListSource property: Azure Blob Storage file list specifying the batch documents. Either
     * azureBlobSource or azureBlobFileListSource must be specified.
     * 
     * @return the azureBlobFileListSource value.
     */
    @Generated
    public AzureBlobFileListContentSource getAzureBlobFileListSource() {
        return this.azureBlobFileListSource;
    }

    /**
     * Set the azureBlobFileListSource property: Azure Blob Storage file list specifying the batch documents. Either
     * azureBlobSource or azureBlobFileListSource must be specified.
     * 
     * @param azureBlobFileListSource the azureBlobFileListSource value to set.
     * @return the AnalyzeBatchDocumentsOptions object itself.
     */
    @Generated
    public AnalyzeBatchDocumentsOptions
        setAzureBlobFileListSource(AzureBlobFileListContentSource azureBlobFileListSource) {
        this.azureBlobFileListSource = azureBlobFileListSource;
        return this;
    }

    /**
     * Get the resultContainerUrl property: Azure Blob Storage container URL where analyze result files will be stored.
     * 
     * @return the resultContainerUrl value.
     */
    @Generated
    public String getResultContainerUrl() {
        return this.resultContainerUrl;
    }

    /**
     * Get the resultPrefix property: Blob name prefix of result files.
     * 
     * @return the resultPrefix value.
     */
    @Generated
    public String getResultPrefix() {
        return this.resultPrefix;
    }

    /**
     * Set the resultPrefix property: Blob name prefix of result files.
     * 
     * @param resultPrefix the resultPrefix value to set.
     * @return the AnalyzeBatchDocumentsOptions object itself.
     */
    @Generated
    public AnalyzeBatchDocumentsOptions setResultPrefix(String resultPrefix) {
        this.resultPrefix = resultPrefix;
        return this;
    }

    /**
     * Get the overwriteExisting property: Overwrite existing analyze result files?.
     * 
     * @return the overwriteExisting value.
     */
    @Generated
    public Boolean isOverwriteExisting() {
        return this.overwriteExisting;
    }

    /**
     * Set the overwriteExisting property: Overwrite existing analyze result files?.
     * 
     * @param overwriteExisting the overwriteExisting value to set.
     * @return the AnalyzeBatchDocumentsOptions object itself.
     */
    @Generated
    public AnalyzeBatchDocumentsOptions setOverwriteExisting(Boolean overwriteExisting) {
        this.overwriteExisting = overwriteExisting;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resultContainerUrl", this.resultContainerUrl);
        jsonWriter.writeJsonField("azureBlobSource", this.azureBlobSource);
        jsonWriter.writeJsonField("azureBlobFileListSource", this.azureBlobFileListSource);
        jsonWriter.writeStringField("resultPrefix", this.resultPrefix);
        jsonWriter.writeBooleanField("overwriteExisting", this.overwriteExisting);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AnalyzeBatchDocumentsOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AnalyzeBatchDocumentsOptions if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AnalyzeBatchDocumentsOptions.
     */
    @Generated
    public static AnalyzeBatchDocumentsOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String resultContainerUrl = null;
            AzureBlobContentSource azureBlobSource = null;
            AzureBlobFileListContentSource azureBlobFileListSource = null;
            String resultPrefix = null;
            Boolean overwriteExisting = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resultContainerUrl".equals(fieldName)) {
                    resultContainerUrl = reader.getString();
                } else if ("azureBlobSource".equals(fieldName)) {
                    azureBlobSource = AzureBlobContentSource.fromJson(reader);
                } else if ("azureBlobFileListSource".equals(fieldName)) {
                    azureBlobFileListSource = AzureBlobFileListContentSource.fromJson(reader);
                } else if ("resultPrefix".equals(fieldName)) {
                    resultPrefix = reader.getString();
                } else if ("overwriteExisting".equals(fieldName)) {
                    overwriteExisting = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            AnalyzeBatchDocumentsOptions deserializedAnalyzeBatchDocumentsOptions
                = new AnalyzeBatchDocumentsOptions(resultContainerUrl);
            deserializedAnalyzeBatchDocumentsOptions.azureBlobSource = azureBlobSource;
            deserializedAnalyzeBatchDocumentsOptions.azureBlobFileListSource = azureBlobFileListSource;
            deserializedAnalyzeBatchDocumentsOptions.resultPrefix = resultPrefix;
            deserializedAnalyzeBatchDocumentsOptions.overwriteExisting = overwriteExisting;

            return deserializedAnalyzeBatchDocumentsOptions;
        });
    }
}
