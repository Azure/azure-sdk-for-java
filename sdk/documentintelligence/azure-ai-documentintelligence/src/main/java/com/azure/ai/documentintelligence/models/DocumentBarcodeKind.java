// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

/**
 * Barcode kind.
 */
public enum DocumentBarcodeKind {
    /**
     * QR code, as defined in ISO/IEC 18004:2015.
     */
    QRCODE("QRCode"),

    /**
     * PDF417, as defined in ISO 15438.
     */
    PDF417("PDF417"),

    /**
     * GS1 12-digit Universal Product Code.
     */
    UPCA("UPCA"),

    /**
     * GS1 6-digit Universal Product Code.
     */
    UPCE("UPCE"),

    /**
     * Code 39 barcode, as defined in ISO/IEC 16388:2007.
     */
    CODE39("Code39"),

    /**
     * Code 128 barcode, as defined in ISO/IEC 15417:2007.
     */
    CODE128("Code128"),

    /**
     * GS1 8-digit International Article Number (European Article Number).
     */
    EAN8("EAN8"),

    /**
     * GS1 13-digit International Article Number (European Article Number).
     */
    EAN13("EAN13"),

    /**
     * GS1 DataBar barcode.
     */
    DATA_BAR("DataBar"),

    /**
     * Code 93 barcode, as defined in ANSI/AIM BC5-1995.
     */
    CODE93("Code93"),

    /**
     * Codabar barcode, as defined in ANSI/AIM BC3-1995.
     */
    CODABAR("Codabar"),

    /**
     * GS1 DataBar Expanded barcode.
     */
    DATA_BAR_EXPANDED("DataBarExpanded"),

    /**
     * Interleaved 2 of 5 barcode, as defined in ANSI/AIM BC2-1995.
     */
    ITF("ITF"),

    /**
     * Micro QR code, as defined in ISO/IEC 23941:2022.
     */
    MICRO_QRCODE("MicroQRCode"),

    /**
     * Aztec code, as defined in ISO/IEC 24778:2008.
     */
    AZTEC("Aztec"),

    /**
     * Data matrix code, as defined in ISO/IEC 16022:2006.
     */
    DATA_MATRIX("DataMatrix"),

    /**
     * MaxiCode, as defined in ISO/IEC 16023:2000.
     */
    MAXI_CODE("MaxiCode");

    /**
     * The actual serialized value for a DocumentBarcodeKind instance.
     */
    private final String value;

    DocumentBarcodeKind(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a DocumentBarcodeKind instance.
     * 
     * @param value the serialized value to parse.
     * @return the parsed DocumentBarcodeKind object, or null if unable to parse.
     */
    public static DocumentBarcodeKind fromString(String value) {
        if (value == null) {
            return null;
        }
        DocumentBarcodeKind[] items = DocumentBarcodeKind.values();
        for (DocumentBarcodeKind item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return this.value;
    }
}
