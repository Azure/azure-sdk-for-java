// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

/**
 * Semantic data type of the field value.
 */
public enum DocumentFieldType {
    /**
     * Plain text.
     */
    STRING("string"),

    /**
     * Date, normalized to ISO 8601 (YYYY-MM-DD) format.
     */
    DATE("date"),

    /**
     * Time, normalized to ISO 8601 (hh:mm:ss) format.
     */
    TIME("time"),

    /**
     * Phone number, normalized to E.164 (+{CountryCode}{SubscriberNumber}) format.
     */
    PHONE_NUMBER("phoneNumber"),

    /**
     * Floating point number, normalized to double precision floating point.
     */
    NUMBER("number"),

    /**
     * Integer number, normalized to 64-bit signed integer.
     */
    INTEGER("integer"),

    /**
     * Is field selected?.
     */
    SELECTION_MARK("selectionMark"),

    /**
     * Country/region, normalized to ISO 3166-1 alpha-3 format (ex. USA).
     */
    COUNTRY_REGION("countryRegion"),

    /**
     * Is signature present?.
     */
    SIGNATURE("signature"),

    /**
     * List of subfields of the same type.
     */
    ARRAY("array"),

    /**
     * Named list of subfields of potentially different types.
     */
    OBJECT("object"),

    /**
     * Currency amount with optional currency symbol and unit.
     */
    CURRENCY("currency"),

    /**
     * Parsed address.
     */
    ADDRESS("address"),

    /**
     * Boolean value, normalized to true or false.
     */
    BOOLEAN("boolean"),

    /**
     * Array of selected string values.
     */
    SELECTION_GROUP("selectionGroup");

    /**
     * The actual serialized value for a DocumentFieldType instance.
     */
    private final String value;

    DocumentFieldType(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a DocumentFieldType instance.
     * 
     * @param value the serialized value to parse.
     * @return the parsed DocumentFieldType object, or null if unable to parse.
     */
    public static DocumentFieldType fromString(String value) {
        if (value == null) {
            return null;
        }
        DocumentFieldType[] items = DocumentFieldType.values();
        for (DocumentFieldType item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return this.value;
    }
}
