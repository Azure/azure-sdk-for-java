// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence;

import com.azure.ai.documentintelligence.implementation.DocumentIntelligenceClientImpl;
import com.azure.ai.documentintelligence.models.AnalyzeBatchDocumentsOptions;
import com.azure.ai.documentintelligence.models.AnalyzeBatchOperation;
import com.azure.ai.documentintelligence.models.AnalyzeBatchResult;
import com.azure.ai.documentintelligence.models.AnalyzeDocumentOptions;
import com.azure.ai.documentintelligence.models.AnalyzeOperation;
import com.azure.ai.documentintelligence.models.AnalyzeResult;
import com.azure.ai.documentintelligence.models.ClassifyDocumentOptions;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.polling.SyncPoller;

import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Initializes a new instance of the synchronous DocumentIntelligenceClient type.
 */
@ServiceClient(builder = DocumentIntelligenceClientBuilder.class)
public final class DocumentIntelligenceClient {
    @Generated
    private final DocumentIntelligenceClientImpl serviceClient;

    /**
     * Initializes an instance of DocumentIntelligenceClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    DocumentIntelligenceClient(DocumentIntelligenceClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Analyzes document with document model.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>1-based page numbers to analyze. Ex. "1-3,5,7-9"</td></tr>
     * <tr><td>locale</td><td>String</td><td>No</td><td>Locale hint for text recognition and document analysis. Value
     * may contain only
     * the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").</td></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>List of optional analysis features. In the form of
     * "," separated string.</td></tr>
     * <tr><td>queryFields</td><td>List&lt;String&gt;</td><td>No</td><td>List of additional fields to extract. Ex.
     * "NumberOfGuests,StoreNumber". In the form of "," separated string.</td></tr>
     * <tr><td>outputContentFormat</td><td>String</td><td>No</td><td>Format of the analyze result top-level content.
     * Allowed values: "text", "markdown".</td></tr>
     * <tr><td>output</td><td>List&lt;String&gt;</td><td>No</td><td>Additional outputs to generate during analysis. In
     * the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     urlSource: String (Optional)
     *     base64Source: byte[] (Optional)
     * }
     * }
     * </pre>
     *
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAnalyzeDocument(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.beginAnalyzeDocument(modelId, requestOptions);
    }

    /**
     * Gets the generated searchable PDF output from document analysis.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the generated searchable PDF output from document analysis along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAnalyzeResultPdfWithResponse(String modelId, String resultId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAnalyzeResultPdfWithResponse(modelId, resultId, requestOptions);
    }

    /**
     * Gets the generated cropped image of specified figure from document analysis.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param figureId Figure ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the generated cropped image of specified figure from document analysis along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAnalyzeResultFigureWithResponse(String modelId, String resultId, String figureId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAnalyzeResultFigureWithResponse(modelId, resultId, figureId, requestOptions);
    }

    /**
     * Mark the result of document analysis for deletion.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAnalyzeResultWithResponse(String modelId, String resultId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteAnalyzeResultWithResponse(modelId, resultId, requestOptions);
    }

    /**
     * Analyzes batch documents with document model.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>1-based page numbers to analyze. Ex. "1-3,5,7-9"</td></tr>
     * <tr><td>locale</td><td>String</td><td>No</td><td>Locale hint for text recognition and document analysis. Value
     * may contain only
     * the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").</td></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * <tr><td>features</td><td>List&lt;String&gt;</td><td>No</td><td>List of optional analysis features. In the form of
     * "," separated string.</td></tr>
     * <tr><td>queryFields</td><td>List&lt;String&gt;</td><td>No</td><td>List of additional fields to extract. Ex.
     * "NumberOfGuests,StoreNumber". In the form of "," separated string.</td></tr>
     * <tr><td>outputContentFormat</td><td>String</td><td>No</td><td>Format of the analyze result top-level content.
     * Allowed values: "text", "markdown".</td></tr>
     * <tr><td>output</td><td>List&lt;String&gt;</td><td>No</td><td>Additional outputs to generate during analysis. In
     * the form of "," separated string.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Header Parameters</strong></p>
     * <table border="1">
     * <caption>Header Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>Content-Type</td><td>String</td><td>No</td><td>The content type. Allowed values:
     * "application/json".</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addHeader}
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     azureBlobSource (Optional): {
     *         containerUrl: String (Required)
     *         prefix: String (Optional)
     *     }
     *     azureBlobFileListSource (Optional): {
     *         containerUrl: String (Required)
     *         fileList: String (Required)
     *     }
     *     resultContainerUrl: String (Required)
     *     resultPrefix: String (Optional)
     *     overwriteExisting: Boolean (Optional)
     * }
     * }
     * </pre>
     *
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginAnalyzeBatchDocuments(String modelId,
        RequestOptions requestOptions) {
        return this.serviceClient.beginAnalyzeBatchDocuments(modelId, requestOptions);
    }

    /**
     * List batch document analysis results.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     resultId: String (Optional)
     *     status: String(notStarted/running/failed/succeeded/canceled/skipped) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     percentCompleted: Integer (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         succeededCount: int (Required)
     *         failedCount: int (Required)
     *         skippedCount: int (Required)
     *         details (Optional): [
     *              (Optional){
     *                 status: String(notStarted/running/failed/succeeded/canceled/skipped) (Required)
     *                 sourceUrl: String (Required)
     *                 resultUrl: String (Optional)
     *                 error (Optional): (recursive schema, see error above)
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param modelId Unique document model name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of AnalyzeBatchOperation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listAnalyzeBatchResults(String modelId, RequestOptions requestOptions) {
        return this.serviceClient.listAnalyzeBatchResults(modelId, requestOptions);
    }

    /**
     * Mark the batch document analysis result for deletion.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze batch operation result ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteAnalyzeBatchResultWithResponse(String modelId, String resultId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteAnalyzeBatchResultWithResponse(modelId, resultId, requestOptions);
    }

    /**
     * Gets the result of batch document analysis.
     * <p><strong>Response Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     resultId: String (Optional)
     *     status: String(notStarted/running/failed/succeeded/canceled/skipped) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastUpdatedDateTime: OffsetDateTime (Required)
     *     percentCompleted: Integer (Optional)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             message: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     *     result (Optional): {
     *         succeededCount: int (Required)
     *         failedCount: int (Required)
     *         skippedCount: int (Required)
     *         details (Optional): [
     *              (Optional){
     *                 status: String(notStarted/running/failed/succeeded/canceled/skipped) (Required)
     *                 sourceUrl: String (Required)
     *                 resultUrl: String (Optional)
     *                 error (Optional): (recursive schema, see error above)
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze batch operation result ID.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of batch document analysis along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getAnalyzeBatchResultWithResponse(String modelId, String resultId,
        RequestOptions requestOptions) {
        return this.serviceClient.getAnalyzeBatchResultWithResponse(modelId, resultId, requestOptions);
    }

    /**
     * Classifies document with document classifier.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>stringIndexType</td><td>String</td><td>No</td><td>Method used to compute string offset and length.
     * Allowed values: "textElements", "unicodeCodePoint", "utf16CodeUnit".</td></tr>
     * <tr><td>split</td><td>String</td><td>No</td><td>Document splitting mode. Allowed values: "auto", "none",
     * "perPage".</td></tr>
     * <tr><td>pages</td><td>String</td><td>No</td><td>1-based page numbers to analyze. Ex. "1-3,5,7-9"</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     *
     * <pre>
     * {@code
     * {
     *     urlSource: String (Optional)
     *     base64Source: byte[] (Optional)
     * }
     * }
     * </pre>
     *
     * @param classifierId Unique document classifier name.
     * @param classifyRequest Classify request parameters.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginClassifyDocument(String classifierId, BinaryData classifyRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.beginClassifyDocument(classifierId, classifyRequest, requestOptions);
    }

    /**
     * Analyzes document with document model.
     *
     * @param modelId Unique document model name.
     * the language code (ex. "en", "fr") or BCP 47 language tag (ex. "en-US").
     * @param analyzeDocumentOptions Analyze request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeOperation, AnalyzeResult> beginAnalyzeDocument(String modelId,
        AnalyzeDocumentOptions analyzeDocumentOptions) {
        // Generated convenience method for beginAnalyzeDocumentWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (analyzeDocumentOptions.getPages() != null) {
            requestOptions.addQueryParam("pages", CoreUtils.stringJoin(",", analyzeDocumentOptions.getPages()), false);
        }
        if (analyzeDocumentOptions.getLocale() != null) {
            requestOptions.addQueryParam("locale", analyzeDocumentOptions.getLocale(), false);
        }
        if (analyzeDocumentOptions.getStringIndexType() != null) {
            requestOptions.addQueryParam("stringIndexType", analyzeDocumentOptions.getStringIndexType().toString(),
                false);
        }
        if (analyzeDocumentOptions.getDocumentAnalysisFeatures() != null) {
            requestOptions.addQueryParam("features",
                analyzeDocumentOptions.getDocumentAnalysisFeatures()
                    .stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (analyzeDocumentOptions.getQueryFields() != null) {
            requestOptions.addQueryParam("queryFields",
                analyzeDocumentOptions.getQueryFields()
                    .stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (analyzeDocumentOptions.getOutputContentFormat() != null) {
            requestOptions.addQueryParam("outputContentFormat",
                analyzeDocumentOptions.getOutputContentFormat().toString(), false);
        }
        if (analyzeDocumentOptions.getOutput() != null) {
            requestOptions.addQueryParam("output",
                analyzeDocumentOptions.getOutput()
                    .stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        requestOptions.setBody(BinaryData.fromObject(analyzeDocumentOptions));
        return serviceClient.beginAnalyzeDocumentWithModel(modelId, requestOptions);
    }

    /**
     * Gets the generated searchable PDF output from document analysis.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the generated searchable PDF output from document analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getAnalyzeResultPdf(String modelId, String resultId) {
        // Generated convenience method for getAnalyzeResultPdfWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAnalyzeResultPdfWithResponse(modelId, resultId, requestOptions).getValue();
    }

    /**
     * Gets the generated cropped image of specified figure from document analysis.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param figureId Figure ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the generated cropped image of specified figure from document analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BinaryData getAnalyzeResultFigure(String modelId, String resultId, String figureId) {
        // Generated convenience method for getAnalyzeResultFigureWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAnalyzeResultFigureWithResponse(modelId, resultId, figureId, requestOptions).getValue();
    }

    /**
     * Mark the result of document analysis for deletion.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAnalyzeResult(String modelId, String resultId) {
        // Generated convenience method for deleteAnalyzeResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteAnalyzeResultWithResponse(modelId, resultId, requestOptions).getValue();
    }

    /**
     * Analyzes batch documents with document model.
     *
     * @param modelId Unique document model name.
     * @param analyzeBatchDocumentsOptions Analyze batch request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeBatchOperation, AnalyzeBatchResult> beginAnalyzeBatchDocuments(String modelId,
        AnalyzeBatchDocumentsOptions analyzeBatchDocumentsOptions) {
        // Generated convenience method for beginAnalyzeBatchDocumentsWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (analyzeBatchDocumentsOptions == null) {
            Objects.requireNonNull(analyzeBatchDocumentsOptions, "'analyzeBatchDocumentsOptions' cannot be null");
        }
        if (analyzeBatchDocumentsOptions.getPages() != null) {
            requestOptions.addQueryParam("pages", CoreUtils.stringJoin(",", analyzeBatchDocumentsOptions.getPages()),
                false);
        }
        if (analyzeBatchDocumentsOptions.getLocale() != null) {
            requestOptions.addQueryParam("locale", analyzeBatchDocumentsOptions.getLocale(), false);
        }
        if (analyzeBatchDocumentsOptions.getStringIndexType() != null) {
            requestOptions.addQueryParam("stringIndexType",
                analyzeBatchDocumentsOptions.getStringIndexType().toString(), false);
        }
        if (analyzeBatchDocumentsOptions.getDocumentAnalysisFeatures() != null) {
            requestOptions.addQueryParam("features",
                analyzeBatchDocumentsOptions.getDocumentAnalysisFeatures()
                    .stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (analyzeBatchDocumentsOptions.getQueryFields() != null) {
            requestOptions.addQueryParam("queryFields",
                analyzeBatchDocumentsOptions.getQueryFields()
                    .stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (analyzeBatchDocumentsOptions.getOutputContentFormat() != null) {
            requestOptions.addQueryParam("outputContentFormat",
                analyzeBatchDocumentsOptions.getOutputContentFormat().toString(), false);
        }
        if (analyzeBatchDocumentsOptions.getOutput() != null) {
            requestOptions.addQueryParam("output",
                analyzeBatchDocumentsOptions.getOutput()
                    .stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        requestOptions.setBody(BinaryData.fromObject(analyzeBatchDocumentsOptions));
        return serviceClient.beginAnalyzeBatchDocumentsWithModel(modelId, requestOptions);
    }

    /**
     * List batch document analysis results.
     *
     * @param modelId Unique document model name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of AnalyzeBatchOperation items as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalyzeBatchOperation> listAnalyzeBatchResults(String modelId) {
        // Generated convenience method for listAnalyzeBatchResults
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.listAnalyzeBatchResults(modelId, requestOptions)
            .mapPage(bodyItemValue -> bodyItemValue.toObject(AnalyzeBatchOperation.class));
    }

    /**
     * Mark the batch document analysis result for deletion.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze batch operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteAnalyzeBatchResult(String modelId, String resultId) {
        // Generated convenience method for deleteAnalyzeBatchResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteAnalyzeBatchResultWithResponse(modelId, resultId, requestOptions).getValue();
    }

    /**
     * Gets the result of batch document analysis.
     *
     * @param modelId Unique document model name.
     * @param resultId Analyze batch operation result ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of batch document analysis.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalyzeBatchOperation getAnalyzeBatchResult(String modelId, String resultId) {
        // Generated convenience method for getAnalyzeBatchResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getAnalyzeBatchResultWithResponse(modelId, resultId, requestOptions).getValue()
            .toObject(AnalyzeBatchOperation.class);
    }

    /**
     * Classifies document with document classifier.
     *
     * @param classifierId Unique document classifier name.
     * @param classifyDocumentOptions Classify request parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<AnalyzeOperation, AnalyzeResult> beginClassifyDocument(String classifierId,
        ClassifyDocumentOptions classifyDocumentOptions) {
        // Generated convenience method for beginClassifyDocumentWithModel
        RequestOptions requestOptions = new RequestOptions();
        if (classifyDocumentOptions == null) {
            Objects.requireNonNull(classifyDocumentOptions, "'classifyDocumentOptions' cannot be null");
        }
        if (classifyDocumentOptions.getStringIndexType() != null) {
            requestOptions.addQueryParam("stringIndexType", classifyDocumentOptions.getStringIndexType().toString(),
                false);
        }
        if (classifyDocumentOptions.getSplit() != null) {
            requestOptions.addQueryParam("split", classifyDocumentOptions.getSplit().toString(), false);
        }
        if (classifyDocumentOptions.getPages() != null) {
            requestOptions.addQueryParam("pages", CoreUtils.stringJoin(",", classifyDocumentOptions.getPages()), false);
        }
        return serviceClient.beginClassifyDocumentWithModel(classifierId,
            BinaryData.fromObject(classifyDocumentOptions), requestOptions);
    }
}
