// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Document type info.
 */
@Immutable
public final class DocumentTypeDetails implements JsonSerializable<DocumentTypeDetails> {
    /*
     * Document model description.
     */
    @Generated
    private String description;

    /*
     * Custom document model build mode.
     */
    @Generated
    private DocumentBuildMode buildMode;

    /*
     * Description of the document semantic schema using a JSON Schema style syntax.
     */
    @Generated
    private final Map<String, DocumentFieldSchema> fieldSchema;

    /*
     * Estimated confidence for each field.
     */
    @Generated
    private Map<String, Double> fieldConfidence;

    /**
     * Creates an instance of DocumentTypeDetails class.
     * 
     * @param fieldSchema the fieldSchema value to set.
     */
    @Generated
    private DocumentTypeDetails(Map<String, DocumentFieldSchema> fieldSchema) {
        this.fieldSchema = fieldSchema;
    }

    /**
     * Get the description property: Document model description.
     * 
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the buildMode property: Custom document model build mode.
     * 
     * @return the buildMode value.
     */
    @Generated
    public DocumentBuildMode getBuildMode() {
        return this.buildMode;
    }

    /**
     * Get the fieldSchema property: Description of the document semantic schema using a JSON Schema style syntax.
     * 
     * @return the fieldSchema value.
     */
    @Generated
    public Map<String, DocumentFieldSchema> getFieldSchema() {
        return this.fieldSchema;
    }

    /**
     * Get the fieldConfidence property: Estimated confidence for each field.
     * 
     * @return the fieldConfidence value.
     */
    @Generated
    public Map<String, Double> getFieldConfidence() {
        return this.fieldConfidence;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("fieldSchema", this.fieldSchema, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("buildMode", this.buildMode == null ? null : this.buildMode.toString());
        jsonWriter.writeMapField("fieldConfidence", this.fieldConfidence,
            (writer, element) -> writer.writeDouble(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentTypeDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentTypeDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DocumentTypeDetails.
     */
    @Generated
    public static DocumentTypeDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, DocumentFieldSchema> fieldSchema = null;
            String description = null;
            DocumentBuildMode buildMode = null;
            Map<String, Double> fieldConfidence = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldSchema".equals(fieldName)) {
                    fieldSchema = reader.readMap(reader1 -> DocumentFieldSchema.fromJson(reader1));
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("buildMode".equals(fieldName)) {
                    buildMode = DocumentBuildMode.fromString(reader.getString());
                } else if ("fieldConfidence".equals(fieldName)) {
                    fieldConfidence = reader.readMap(reader1 -> reader1.getDouble());
                } else {
                    reader.skipChildren();
                }
            }
            DocumentTypeDetails deserializedDocumentTypeDetails = new DocumentTypeDetails(fieldSchema);
            deserializedDocumentTypeDetails.description = description;
            deserializedDocumentTypeDetails.buildMode = buildMode;
            deserializedDocumentTypeDetails.fieldConfidence = fieldConfidence;

            return deserializedDocumentTypeDetails;
        });
    }
}
