// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;

import java.io.IOException;

/**
 * A component of a composed document model.
 */
@Fluent
public final class ComponentDocumentModelDetails implements JsonSerializable<ComponentDocumentModelDetails> {
    /*
     * Document type.
     */
    @Generated
    private String docType;

    /*
     * Document model to use for analyzing documents with specified type.
     */
    @Generated
    private final String modelId;

    /*
     * Maximum number of documents of specified type to analyze. Default=all.
     */
    @Generated
    private Integer maxDocumentsToAnalyze;

    /**
     * Creates an instance of ComponentDocumentModelDetails class.
     *
     * @param modelId the modelId value to set.
     */
    @Generated
    public ComponentDocumentModelDetails(String modelId) {
        this.modelId = modelId;
    }

    /**
     * Get the docType property: Document type.
     *
     * @return the docType value.
     */
    @Generated
    public String getDocType() {
        return this.docType;
    }

    /**
     * Set the docType property: Document type.
     *
     * @param docType the docType value to set.
     * @return the ComponentDocumentModelDetails object itself.
     */
    @Generated
    public ComponentDocumentModelDetails setDocType(String docType) {
        this.docType = docType;
        return this;
    }

    /**
     * Get the modelId property: Document model to use for analyzing documents with specified type.
     *
     * @return the modelId value.
     */
    @Generated
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Get the maxDocumentsToAnalyze property: Maximum number of documents of specified type to analyze. Default=all.
     *
     * @return the maxDocumentsToAnalyze value.
     */
    @Generated
    public Integer getMaxDocumentsToAnalyze() {
        return this.maxDocumentsToAnalyze;
    }

    /**
     * Set the maxDocumentsToAnalyze property: Maximum number of documents of specified type to analyze. Default=all.
     *
     * @param maxDocumentsToAnalyze the maxDocumentsToAnalyze value to set.
     * @return the ComponentDocumentModelDetails object itself.
     */
    @Generated
    public ComponentDocumentModelDetails setMaxDocumentsToAnalyze(Integer maxDocumentsToAnalyze) {
        this.maxDocumentsToAnalyze = maxDocumentsToAnalyze;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelId", this.modelId);
        jsonWriter.writeStringField("docType", this.docType);
        jsonWriter.writeNumberField("maxDocumentsToAnalyze", this.maxDocumentsToAnalyze);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ComponentDocumentModelDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ComponentDocumentModelDetails if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ComponentDocumentModelDetails.
     */
    @Generated
    public static ComponentDocumentModelDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String modelId = null;
            String docType = null;
            Integer maxDocumentsToAnalyze = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelId".equals(fieldName)) {
                    modelId = reader.getString();
                } else if ("docType".equals(fieldName)) {
                    docType = reader.getString();
                } else if ("maxDocumentsToAnalyze".equals(fieldName)) {
                    maxDocumentsToAnalyze = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            ComponentDocumentModelDetails deserializedComponentDocumentModelDetails
                = new ComponentDocumentModelDetails(modelId);
            deserializedComponentDocumentModelDetails.docType = docType;
            deserializedComponentDocumentModelDetails.maxDocumentsToAnalyze = maxDocumentsToAnalyze;

            return deserializedComponentDocumentModelDetails;
        });
    }
}
