// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.documentintelligence.generated;

import com.azure.ai.documentintelligence.DocumentIntelligenceAdministrationClient;
import com.azure.ai.documentintelligence.DocumentIntelligenceAdministrationClientBuilder;
import com.azure.ai.documentintelligence.models.ComposeDocumentModelRequest;
import com.azure.ai.documentintelligence.models.DocumentModelComposeOperationDetails;
import com.azure.ai.documentintelligence.models.DocumentModelDetails;
import com.azure.ai.documentintelligence.models.DocumentTypeDetails;
import com.azure.core.util.polling.SyncPoller;
import com.azure.identity.DefaultAzureCredentialBuilder;
import java.util.HashMap;
import java.util.Map;

public class ComposeDocumentModel {
    public static void main(String[] args) {
        DocumentIntelligenceAdministrationClient documentIntelligenceAdministrationClient
            = new DocumentIntelligenceAdministrationClientBuilder()
                .credential(new DefaultAzureCredentialBuilder().build())
                .endpoint("https://myendpoint.cognitiveservices.azure.com")
                .buildClient();
        // BEGIN:com.azure.ai.documentintelligence.generated.composemodel.composedocumentmodel
        SyncPoller<DocumentModelComposeOperationDetails, DocumentModelDetails> response
            = documentIntelligenceAdministrationClient
                .beginComposeModel(
                    new ComposeDocumentModelRequest("composedModel", "customClassifier",
                        mapOf("formA", new DocumentTypeDetails().setModelId("model1"), "formB",
                            new DocumentTypeDetails().setModelId("model2")))
                                .setDescription("Composed model description"));
        // END:com.azure.ai.documentintelligence.generated.composemodel.composedocumentmodel
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
