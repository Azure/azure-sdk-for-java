/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storageimportexport.v2016_11_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.JobResponse;
import rx.Observable;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.UpdateJobParameters;
import java.util.List;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.PutJobParameters;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.JobDetails;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.PackageInfomation;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.DriveStatus;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.ReturnAddress;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.ReturnShipping;
import rx.functions.Func1;

class JobResponseImpl extends GroupableResourceCoreImpl<JobResponse, JobResponseInner, JobResponseImpl, StorageImportExportManager> implements JobResponse, JobResponse.Definition, JobResponse.Update {
    private String cclientTenantId;
    private PutJobParameters createParameter;
    private UpdateJobParameters updateParameter;
    JobResponseImpl(String name, JobResponseInner inner, StorageImportExportManager manager) {
        super(name, inner, manager);
        this.createParameter = new PutJobParameters();
        this.updateParameter = new UpdateJobParameters();
    }

    @Override
    public Observable<JobResponse> createResourceAsync() {
        JobsInner client = this.manager().inner().jobs();
        this.createParameter.withLocation(inner().location());
        this.createParameter.withTags(inner().getTags());
        return client.createAsync(this.resourceGroupName(), this.name(), this.createParameter, this.cclientTenantId)
            .map(new Func1<JobResponseInner, JobResponseInner>() {
               @Override
               public JobResponseInner call(JobResponseInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<JobResponse> updateResourceAsync() {
        JobsInner client = this.manager().inner().jobs();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<JobResponseInner, JobResponseInner>() {
               @Override
               public JobResponseInner call(JobResponseInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<JobResponseInner> getInnerAsync() {
        JobsInner client = this.manager().inner().jobs();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new PutJobParameters();
        this.updateParameter = new UpdateJobParameters();
    }

    @Override
    public JobDetails properties() {
        return this.inner().properties();
    }

    @Override
    public JobResponseImpl withClientTenantId(String clientTenantId) {
        this.cclientTenantId = clientTenantId;
        return this;
    }

    @Override
    public JobResponseImpl withProperties(JobDetails properties) {
        this.createParameter.withProperties(properties);
        return this;
    }

    @Override
    public JobResponseImpl withBackupDriveManifest(Boolean backupDriveManifest) {
        this.updateParameter.withBackupDriveManifest(backupDriveManifest);
        return this;
    }

    @Override
    public JobResponseImpl withCancelRequested(Boolean cancelRequested) {
        this.updateParameter.withCancelRequested(cancelRequested);
        return this;
    }

    @Override
    public JobResponseImpl withDeliveryPackage(PackageInfomation deliveryPackage) {
        this.updateParameter.withDeliveryPackage(deliveryPackage);
        return this;
    }

    @Override
    public JobResponseImpl withDriveList(List<DriveStatus> driveList) {
        this.updateParameter.withDriveList(driveList);
        return this;
    }

    @Override
    public JobResponseImpl withLogLevel(String logLevel) {
        this.updateParameter.withLogLevel(logLevel);
        return this;
    }

    @Override
    public JobResponseImpl withReturnAddress(ReturnAddress returnAddress) {
        this.updateParameter.withReturnAddress(returnAddress);
        return this;
    }

    @Override
    public JobResponseImpl withReturnShipping(ReturnShipping returnShipping) {
        this.updateParameter.withReturnShipping(returnShipping);
        return this;
    }

    @Override
    public JobResponseImpl withState(String state) {
        this.updateParameter.withState(state);
        return this;
    }

}
