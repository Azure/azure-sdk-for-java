/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storageimportexport.v2016_11_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specifies the job properties.
 */
public class JobDetails {
    /**
     * The resource identifier of the storage account where data will be
     * imported to or exported from.
     */
    @JsonProperty(value = "storageAccountId")
    private String storageAccountId;

    /**
     * The type of job.
     */
    @JsonProperty(value = "jobType")
    private String jobType;

    /**
     * Specifies the return address information for the job.
     */
    @JsonProperty(value = "returnAddress")
    private ReturnAddress returnAddress;

    /**
     * Specifies the return carrier and customer's account with the carrier.
     */
    @JsonProperty(value = "returnShipping")
    private ReturnShipping returnShipping;

    /**
     * Contains information about the Microsoft datacenter to which the drives
     * should be shipped.
     */
    @JsonProperty(value = "shippingInformation")
    private ShippingInformation shippingInformation;

    /**
     * Contains information about the package being shipped by the customer to
     * the Microsoft data center.
     */
    @JsonProperty(value = "deliveryPackage")
    private PackageInfomation deliveryPackage;

    /**
     * Contains information about the package being shipped from the Microsoft
     * data center to the customer to return the drives. The format is the same
     * as the deliveryPackage property above. This property is not included if
     * the drives have not yet been returned.
     */
    @JsonProperty(value = "returnPackage")
    private PackageInfomation returnPackage;

    /**
     * The virtual blob directory to which the copy logs and backups of drive
     * manifest files (if enabled) will be stored.
     */
    @JsonProperty(value = "diagnosticsPath")
    private String diagnosticsPath;

    /**
     * Default value is Error. Indicates whether error logging or verbose
     * logging will be enabled.
     */
    @JsonProperty(value = "logLevel")
    private String logLevel;

    /**
     * Default value is false. Indicates whether the manifest files on the
     * drives should be copied to block blobs.
     */
    @JsonProperty(value = "backupDriveManifest")
    private Boolean backupDriveManifest;

    /**
     * Current state of the job.
     */
    @JsonProperty(value = "state")
    private String state;

    /**
     * Indicates whether a request has been submitted to cancel the job.
     */
    @JsonProperty(value = "cancelRequested")
    private Boolean cancelRequested;

    /**
     * Overall percentage completed for the job.
     */
    @JsonProperty(value = "percentComplete")
    private Integer percentComplete;

    /**
     * A blob path that points to a block blob containing a list of blob names
     * that were not exported due to insufficient drive space. If all blobs
     * were exported successfully, then this element is not included in the
     * response.
     */
    @JsonProperty(value = "incompleteBlobListUri")
    private String incompleteBlobListUri;

    /**
     * List of up to ten drives that comprise the job. The drive list is a
     * required element for an import job; it is not specified for export jobs.
     */
    @JsonProperty(value = "driveList")
    private List<DriveStatus> driveList;

    /**
     * A property containing information about the blobs to be exported for an
     * export job. This property is included for export jobs only.
     */
    @JsonProperty(value = "export")
    private Export export;

    /**
     * Specifies the provisioning state of the job.
     */
    @JsonProperty(value = "provisioningState")
    private String provisioningState;

    /**
     * Get the resource identifier of the storage account where data will be imported to or exported from.
     *
     * @return the storageAccountId value
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the resource identifier of the storage account where data will be imported to or exported from.
     *
     * @param storageAccountId the storageAccountId value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * Get the type of job.
     *
     * @return the jobType value
     */
    public String jobType() {
        return this.jobType;
    }

    /**
     * Set the type of job.
     *
     * @param jobType the jobType value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withJobType(String jobType) {
        this.jobType = jobType;
        return this;
    }

    /**
     * Get specifies the return address information for the job.
     *
     * @return the returnAddress value
     */
    public ReturnAddress returnAddress() {
        return this.returnAddress;
    }

    /**
     * Set specifies the return address information for the job.
     *
     * @param returnAddress the returnAddress value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withReturnAddress(ReturnAddress returnAddress) {
        this.returnAddress = returnAddress;
        return this;
    }

    /**
     * Get specifies the return carrier and customer's account with the carrier.
     *
     * @return the returnShipping value
     */
    public ReturnShipping returnShipping() {
        return this.returnShipping;
    }

    /**
     * Set specifies the return carrier and customer's account with the carrier.
     *
     * @param returnShipping the returnShipping value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withReturnShipping(ReturnShipping returnShipping) {
        this.returnShipping = returnShipping;
        return this;
    }

    /**
     * Get contains information about the Microsoft datacenter to which the drives should be shipped.
     *
     * @return the shippingInformation value
     */
    public ShippingInformation shippingInformation() {
        return this.shippingInformation;
    }

    /**
     * Set contains information about the Microsoft datacenter to which the drives should be shipped.
     *
     * @param shippingInformation the shippingInformation value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withShippingInformation(ShippingInformation shippingInformation) {
        this.shippingInformation = shippingInformation;
        return this;
    }

    /**
     * Get contains information about the package being shipped by the customer to the Microsoft data center.
     *
     * @return the deliveryPackage value
     */
    public PackageInfomation deliveryPackage() {
        return this.deliveryPackage;
    }

    /**
     * Set contains information about the package being shipped by the customer to the Microsoft data center.
     *
     * @param deliveryPackage the deliveryPackage value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withDeliveryPackage(PackageInfomation deliveryPackage) {
        this.deliveryPackage = deliveryPackage;
        return this;
    }

    /**
     * Get contains information about the package being shipped from the Microsoft data center to the customer to return the drives. The format is the same as the deliveryPackage property above. This property is not included if the drives have not yet been returned.
     *
     * @return the returnPackage value
     */
    public PackageInfomation returnPackage() {
        return this.returnPackage;
    }

    /**
     * Set contains information about the package being shipped from the Microsoft data center to the customer to return the drives. The format is the same as the deliveryPackage property above. This property is not included if the drives have not yet been returned.
     *
     * @param returnPackage the returnPackage value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withReturnPackage(PackageInfomation returnPackage) {
        this.returnPackage = returnPackage;
        return this;
    }

    /**
     * Get the virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.
     *
     * @return the diagnosticsPath value
     */
    public String diagnosticsPath() {
        return this.diagnosticsPath;
    }

    /**
     * Set the virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.
     *
     * @param diagnosticsPath the diagnosticsPath value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withDiagnosticsPath(String diagnosticsPath) {
        this.diagnosticsPath = diagnosticsPath;
        return this;
    }

    /**
     * Get default value is Error. Indicates whether error logging or verbose logging will be enabled.
     *
     * @return the logLevel value
     */
    public String logLevel() {
        return this.logLevel;
    }

    /**
     * Set default value is Error. Indicates whether error logging or verbose logging will be enabled.
     *
     * @param logLevel the logLevel value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withLogLevel(String logLevel) {
        this.logLevel = logLevel;
        return this;
    }

    /**
     * Get default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.
     *
     * @return the backupDriveManifest value
     */
    public Boolean backupDriveManifest() {
        return this.backupDriveManifest;
    }

    /**
     * Set default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.
     *
     * @param backupDriveManifest the backupDriveManifest value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withBackupDriveManifest(Boolean backupDriveManifest) {
        this.backupDriveManifest = backupDriveManifest;
        return this;
    }

    /**
     * Get current state of the job.
     *
     * @return the state value
     */
    public String state() {
        return this.state;
    }

    /**
     * Set current state of the job.
     *
     * @param state the state value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get indicates whether a request has been submitted to cancel the job.
     *
     * @return the cancelRequested value
     */
    public Boolean cancelRequested() {
        return this.cancelRequested;
    }

    /**
     * Set indicates whether a request has been submitted to cancel the job.
     *
     * @param cancelRequested the cancelRequested value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withCancelRequested(Boolean cancelRequested) {
        this.cancelRequested = cancelRequested;
        return this;
    }

    /**
     * Get overall percentage completed for the job.
     *
     * @return the percentComplete value
     */
    public Integer percentComplete() {
        return this.percentComplete;
    }

    /**
     * Set overall percentage completed for the job.
     *
     * @param percentComplete the percentComplete value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withPercentComplete(Integer percentComplete) {
        this.percentComplete = percentComplete;
        return this;
    }

    /**
     * Get a blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.
     *
     * @return the incompleteBlobListUri value
     */
    public String incompleteBlobListUri() {
        return this.incompleteBlobListUri;
    }

    /**
     * Set a blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.
     *
     * @param incompleteBlobListUri the incompleteBlobListUri value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withIncompleteBlobListUri(String incompleteBlobListUri) {
        this.incompleteBlobListUri = incompleteBlobListUri;
        return this;
    }

    /**
     * Get list of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.
     *
     * @return the driveList value
     */
    public List<DriveStatus> driveList() {
        return this.driveList;
    }

    /**
     * Set list of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.
     *
     * @param driveList the driveList value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withDriveList(List<DriveStatus> driveList) {
        this.driveList = driveList;
        return this;
    }

    /**
     * Get a property containing information about the blobs to be exported for an export job. This property is included for export jobs only.
     *
     * @return the export value
     */
    public Export export() {
        return this.export;
    }

    /**
     * Set a property containing information about the blobs to be exported for an export job. This property is included for export jobs only.
     *
     * @param export the export value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withExport(Export export) {
        this.export = export;
        return this;
    }

    /**
     * Get specifies the provisioning state of the job.
     *
     * @return the provisioningState value
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set specifies the provisioning state of the job.
     *
     * @param provisioningState the provisioningState value to set
     * @return the JobDetails object itself.
     */
    public JobDetails withProvisioningState(String provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

}
