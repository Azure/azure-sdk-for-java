// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageimportexport.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the encryption key properties.
 */
@Fluent
public final class EncryptionKeyDetails implements JsonSerializable<EncryptionKeyDetails> {
    /*
     * The type of kek encryption key
     */
    private EncryptionKekType kekType;

    /*
     * Specifies the url for kek encryption key.
     */
    private String kekUrl;

    /*
     * Specifies the keyvault resource id for kek encryption key.
     */
    private String kekVaultResourceId;

    /**
     * Creates an instance of EncryptionKeyDetails class.
     */
    public EncryptionKeyDetails() {
    }

    /**
     * Get the kekType property: The type of kek encryption key.
     * 
     * @return the kekType value.
     */
    public EncryptionKekType kekType() {
        return this.kekType;
    }

    /**
     * Set the kekType property: The type of kek encryption key.
     * 
     * @param kekType the kekType value to set.
     * @return the EncryptionKeyDetails object itself.
     */
    public EncryptionKeyDetails withKekType(EncryptionKekType kekType) {
        this.kekType = kekType;
        return this;
    }

    /**
     * Get the kekUrl property: Specifies the url for kek encryption key.
     * 
     * @return the kekUrl value.
     */
    public String kekUrl() {
        return this.kekUrl;
    }

    /**
     * Set the kekUrl property: Specifies the url for kek encryption key.
     * 
     * @param kekUrl the kekUrl value to set.
     * @return the EncryptionKeyDetails object itself.
     */
    public EncryptionKeyDetails withKekUrl(String kekUrl) {
        this.kekUrl = kekUrl;
        return this;
    }

    /**
     * Get the kekVaultResourceId property: Specifies the keyvault resource id for kek encryption key.
     * 
     * @return the kekVaultResourceId value.
     */
    public String kekVaultResourceId() {
        return this.kekVaultResourceId;
    }

    /**
     * Set the kekVaultResourceId property: Specifies the keyvault resource id for kek encryption key.
     * 
     * @param kekVaultResourceId the kekVaultResourceId value to set.
     * @return the EncryptionKeyDetails object itself.
     */
    public EncryptionKeyDetails withKekVaultResourceId(String kekVaultResourceId) {
        this.kekVaultResourceId = kekVaultResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kekType", this.kekType == null ? null : this.kekType.toString());
        jsonWriter.writeStringField("kekUrl", this.kekUrl);
        jsonWriter.writeStringField("kekVaultResourceID", this.kekVaultResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionKeyDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionKeyDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionKeyDetails.
     */
    public static EncryptionKeyDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionKeyDetails deserializedEncryptionKeyDetails = new EncryptionKeyDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kekType".equals(fieldName)) {
                    deserializedEncryptionKeyDetails.kekType = EncryptionKekType.fromString(reader.getString());
                } else if ("kekUrl".equals(fieldName)) {
                    deserializedEncryptionKeyDetails.kekUrl = reader.getString();
                } else if ("kekVaultResourceID".equals(fieldName)) {
                    deserializedEncryptionKeyDetails.kekVaultResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionKeyDetails;
        });
    }
}
