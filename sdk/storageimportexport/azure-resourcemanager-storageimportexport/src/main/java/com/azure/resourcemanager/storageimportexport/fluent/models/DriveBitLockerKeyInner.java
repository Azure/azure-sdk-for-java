// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageimportexport.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** BitLocker recovery key or password to the specified drive. */
@Fluent
public final class DriveBitLockerKeyInner {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DriveBitLockerKeyInner.class);

    /*
     * BitLocker recovery key or password
     */
    @JsonProperty(value = "bitLockerKey")
    private String bitLockerKey;

    /*
     * Drive ID
     */
    @JsonProperty(value = "driveId")
    private String driveId;

    /**
     * Get the bitLockerKey property: BitLocker recovery key or password.
     *
     * @return the bitLockerKey value.
     */
    public String bitLockerKey() {
        return this.bitLockerKey;
    }

    /**
     * Set the bitLockerKey property: BitLocker recovery key or password.
     *
     * @param bitLockerKey the bitLockerKey value to set.
     * @return the DriveBitLockerKeyInner object itself.
     */
    public DriveBitLockerKeyInner withBitLockerKey(String bitLockerKey) {
        this.bitLockerKey = bitLockerKey;
        return this;
    }

    /**
     * Get the driveId property: Drive ID.
     *
     * @return the driveId value.
     */
    public String driveId() {
        return this.driveId;
    }

    /**
     * Set the driveId property: Drive ID.
     *
     * @param driveId the driveId value to set.
     * @return the DriveBitLockerKeyInner object itself.
     */
    public DriveBitLockerKeyInner withDriveId(String driveId) {
        this.driveId = driveId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
