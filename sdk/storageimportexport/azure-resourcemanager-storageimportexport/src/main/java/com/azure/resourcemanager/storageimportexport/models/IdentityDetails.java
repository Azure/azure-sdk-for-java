// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageimportexport.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the identity properties.
 */
@Fluent
public final class IdentityDetails implements JsonSerializable<IdentityDetails> {
    /*
     * The type of identity
     */
    private IdentityType type;

    /*
     * Specifies the principal id for the identity for the job.
     */
    private String principalId;

    /*
     * Specifies the tenant id for the identity for the job.
     */
    private String tenantId;

    /**
     * Creates an instance of IdentityDetails class.
     */
    public IdentityDetails() {
    }

    /**
     * Get the type property: The type of identity.
     * 
     * @return the type value.
     */
    public IdentityType type() {
        return this.type;
    }

    /**
     * Set the type property: The type of identity.
     * 
     * @param type the type value to set.
     * @return the IdentityDetails object itself.
     */
    public IdentityDetails withType(IdentityType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the principalId property: Specifies the principal id for the identity for the job.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Get the tenantId property: Specifies the tenant id for the identity for the job.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentityDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentityDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IdentityDetails.
     */
    public static IdentityDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdentityDetails deserializedIdentityDetails = new IdentityDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedIdentityDetails.type = IdentityType.fromString(reader.getString());
                } else if ("principalId".equals(fieldName)) {
                    deserializedIdentityDetails.principalId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedIdentityDetails.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentityDetails;
        });
    }
}
