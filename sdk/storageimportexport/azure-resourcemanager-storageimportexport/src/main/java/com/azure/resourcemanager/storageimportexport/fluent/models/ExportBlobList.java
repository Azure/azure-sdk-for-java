// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageimportexport.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A list of the blobs to be exported.
 */
@Fluent
public final class ExportBlobList implements JsonSerializable<ExportBlobList> {
    /*
     * A collection of blob-path strings.
     */
    private List<String> blobPath;

    /*
     * A collection of blob-prefix strings.
     */
    private List<String> blobPathPrefix;

    /**
     * Creates an instance of ExportBlobList class.
     */
    public ExportBlobList() {
    }

    /**
     * Get the blobPath property: A collection of blob-path strings.
     * 
     * @return the blobPath value.
     */
    public List<String> blobPath() {
        return this.blobPath;
    }

    /**
     * Set the blobPath property: A collection of blob-path strings.
     * 
     * @param blobPath the blobPath value to set.
     * @return the ExportBlobList object itself.
     */
    public ExportBlobList withBlobPath(List<String> blobPath) {
        this.blobPath = blobPath;
        return this;
    }

    /**
     * Get the blobPathPrefix property: A collection of blob-prefix strings.
     * 
     * @return the blobPathPrefix value.
     */
    public List<String> blobPathPrefix() {
        return this.blobPathPrefix;
    }

    /**
     * Set the blobPathPrefix property: A collection of blob-prefix strings.
     * 
     * @param blobPathPrefix the blobPathPrefix value to set.
     * @return the ExportBlobList object itself.
     */
    public ExportBlobList withBlobPathPrefix(List<String> blobPathPrefix) {
        this.blobPathPrefix = blobPathPrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("blobPath", this.blobPath, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("blobPathPrefix", this.blobPathPrefix,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportBlobList from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportBlobList if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExportBlobList.
     */
    public static ExportBlobList fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportBlobList deserializedExportBlobList = new ExportBlobList();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blobPath".equals(fieldName)) {
                    List<String> blobPath = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportBlobList.blobPath = blobPath;
                } else if ("blobPathPrefix".equals(fieldName)) {
                    List<String> blobPathPrefix = reader.readArray(reader1 -> reader1.getString());
                    deserializedExportBlobList.blobPathPrefix = blobPathPrefix;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportBlobList;
        });
    }
}
