// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storageimportexport.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contains information about the delivery package being shipped by the customer to the Microsoft data center.
 */
@Fluent
public final class DeliveryPackageInformation implements JsonSerializable<DeliveryPackageInformation> {
    /*
     * The name of the carrier that is used to ship the import or export drives.
     */
    private String carrierName;

    /*
     * The tracking number of the package.
     */
    private String trackingNumber;

    /*
     * The number of drives included in the package.
     */
    private Long driveCount;

    /*
     * The date when the package is shipped.
     */
    private String shipDate;

    /**
     * Creates an instance of DeliveryPackageInformation class.
     */
    public DeliveryPackageInformation() {
    }

    /**
     * Get the carrierName property: The name of the carrier that is used to ship the import or export drives.
     * 
     * @return the carrierName value.
     */
    public String carrierName() {
        return this.carrierName;
    }

    /**
     * Set the carrierName property: The name of the carrier that is used to ship the import or export drives.
     * 
     * @param carrierName the carrierName value to set.
     * @return the DeliveryPackageInformation object itself.
     */
    public DeliveryPackageInformation withCarrierName(String carrierName) {
        this.carrierName = carrierName;
        return this;
    }

    /**
     * Get the trackingNumber property: The tracking number of the package.
     * 
     * @return the trackingNumber value.
     */
    public String trackingNumber() {
        return this.trackingNumber;
    }

    /**
     * Set the trackingNumber property: The tracking number of the package.
     * 
     * @param trackingNumber the trackingNumber value to set.
     * @return the DeliveryPackageInformation object itself.
     */
    public DeliveryPackageInformation withTrackingNumber(String trackingNumber) {
        this.trackingNumber = trackingNumber;
        return this;
    }

    /**
     * Get the driveCount property: The number of drives included in the package.
     * 
     * @return the driveCount value.
     */
    public Long driveCount() {
        return this.driveCount;
    }

    /**
     * Set the driveCount property: The number of drives included in the package.
     * 
     * @param driveCount the driveCount value to set.
     * @return the DeliveryPackageInformation object itself.
     */
    public DeliveryPackageInformation withDriveCount(Long driveCount) {
        this.driveCount = driveCount;
        return this;
    }

    /**
     * Get the shipDate property: The date when the package is shipped.
     * 
     * @return the shipDate value.
     */
    public String shipDate() {
        return this.shipDate;
    }

    /**
     * Set the shipDate property: The date when the package is shipped.
     * 
     * @param shipDate the shipDate value to set.
     * @return the DeliveryPackageInformation object itself.
     */
    public DeliveryPackageInformation withShipDate(String shipDate) {
        this.shipDate = shipDate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (carrierName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property carrierName in model DeliveryPackageInformation"));
        }
        if (trackingNumber() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property trackingNumber in model DeliveryPackageInformation"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DeliveryPackageInformation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("carrierName", this.carrierName);
        jsonWriter.writeStringField("trackingNumber", this.trackingNumber);
        jsonWriter.writeNumberField("driveCount", this.driveCount);
        jsonWriter.writeStringField("shipDate", this.shipDate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeliveryPackageInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeliveryPackageInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeliveryPackageInformation.
     */
    public static DeliveryPackageInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeliveryPackageInformation deserializedDeliveryPackageInformation = new DeliveryPackageInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("carrierName".equals(fieldName)) {
                    deserializedDeliveryPackageInformation.carrierName = reader.getString();
                } else if ("trackingNumber".equals(fieldName)) {
                    deserializedDeliveryPackageInformation.trackingNumber = reader.getString();
                } else if ("driveCount".equals(fieldName)) {
                    deserializedDeliveryPackageInformation.driveCount = reader.getNullable(JsonReader::getLong);
                } else if ("shipDate".equals(fieldName)) {
                    deserializedDeliveryPackageInformation.shipDate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeliveryPackageInformation;
        });
    }
}
