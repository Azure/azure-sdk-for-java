/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storageimportexport.v2016_11_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.ErrorResponseException;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.PutJobParameters;
import com.microsoft.azure.management.storageimportexport.v2016_11_01.UpdateJobParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Jobs.
 */
public class JobsInner implements InnerSupportsGet<JobResponseInner>, InnerSupportsDelete<Void>, InnerSupportsListing<JobResponseInner> {
    /** The Retrofit service to perform REST calls. */
    private JobsService service;
    /** The service client containing this operation class. */
    private StorageImportExportImpl client;

    /**
     * Initializes an instance of JobsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JobsInner(Retrofit retrofit, StorageImportExportImpl client) {
        this.service = retrofit.create(JobsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Jobs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JobsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("$top") Integer top, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("Accept-Language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("$top") Integer top, @Query("$filter") String filter, @Query("api-version") String apiVersion, @Header("Accept-Language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("jobName") String jobName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("Accept-Language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}")
        Observable<Response<ResponseBody>> update(@Path("jobName") String jobName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("Accept-Language") String acceptLanguage, @Body UpdateJobParameters body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}")
        Observable<Response<ResponseBody>> create(@Path("jobName") String jobName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("Accept-Language") String acceptLanguage, @Header("x-ms-client-tenant-id") String clientTenantId, @Body PutJobParameters body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("jobName") String jobName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("Accept-Language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("Accept-Language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storageimportexport.v2016_11_01.Jobs listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("Accept-Language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> list() {
        ServiceResponse<Page<JobResponseInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listAsync(final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final Integer top = null;
        final String filter = null;
        return service.list(this.client.subscriptionId(), top, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JobResponseInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> list(final Integer top, final String filter) {
        ServiceResponse<Page<JobResponseInner>> response = listSinglePageAsync(top, filter).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listAsync(final Integer top, final String filter, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(top, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listAsync(final Integer top, final String filter) {
        return listWithServiceResponseAsync(top, filter)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listWithServiceResponseAsync(final Integer top, final String filter) {
        return listSinglePageAsync(top, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
    ServiceResponse<PageImpl1<JobResponseInner>> * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
    ServiceResponse<PageImpl1<JobResponseInner>> * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listSinglePageAsync(final Integer top, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), top, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JobResponseInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<JobResponseInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<JobResponseInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<JobResponseInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<JobResponseInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final Integer top = null;
        final String filter = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, top, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JobResponseInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> listByResourceGroup(final String resourceGroupName, final Integer top, final String filter) {
        ServiceResponse<Page<JobResponseInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, top, filter).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listByResourceGroupAsync(final String resourceGroupName, final Integer top, final String filter, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, top, filter),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listByResourceGroupAsync(final String resourceGroupName, final Integer top, final String filter) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, top, filter)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final Integer top, final String filter) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, top, filter)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
    ServiceResponse<PageImpl1<JobResponseInner>> * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
    ServiceResponse<PageImpl1<JobResponseInner>> * @param top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
    ServiceResponse<PageImpl1<JobResponseInner>> * @param filter Can be used to restrict the results to certain conditions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final Integer top, final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, top, filter, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JobResponseInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<JobResponseInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<JobResponseInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<JobResponseInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets information about an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner getByResourceGroup(String jobName, String resourceGroupName) {
        return getByResourceGroupWithServiceResponseAsync(jobName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Gets information about an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> getByResourceGroupAsync(String jobName, String resourceGroupName, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(jobName, resourceGroupName), serviceCallback);
    }

    /**
     * Gets information about an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> getByResourceGroupAsync(String jobName, String resourceGroupName) {
        return getByResourceGroupWithServiceResponseAsync(jobName, resourceGroupName).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets information about an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> getByResourceGroupWithServiceResponseAsync(String jobName, String resourceGroupName) {
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.getByResourceGroup(jobName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResponseInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResponseInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResponseInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters to update in the job
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner update(String jobName, String resourceGroupName, UpdateJobParameters body) {
        return updateWithServiceResponseAsync(jobName, resourceGroupName, body).toBlocking().single().body();
    }

    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters to update in the job
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> updateAsync(String jobName, String resourceGroupName, UpdateJobParameters body, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(jobName, resourceGroupName, body), serviceCallback);
    }

    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters to update in the job
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> updateAsync(String jobName, String resourceGroupName, UpdateJobParameters body) {
        return updateWithServiceResponseAsync(jobName, resourceGroupName, body).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters to update in the job
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> updateWithServiceResponseAsync(String jobName, String resourceGroupName, UpdateJobParameters body) {
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.update(jobName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResponseInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResponseInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResponseInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner create(String jobName, String resourceGroupName, PutJobParameters body) {
        return createWithServiceResponseAsync(jobName, resourceGroupName, body).toBlocking().single().body();
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> createAsync(String jobName, String resourceGroupName, PutJobParameters body, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(jobName, resourceGroupName, body), serviceCallback);
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> createAsync(String jobName, String resourceGroupName, PutJobParameters body) {
        return createWithServiceResponseAsync(jobName, resourceGroupName, body).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> createWithServiceResponseAsync(String jobName, String resourceGroupName, PutJobParameters body) {
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        final String clientTenantId = null;
        return service.create(jobName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), clientTenantId, body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @param clientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JobResponseInner object if successful.
     */
    public JobResponseInner create(String jobName, String resourceGroupName, PutJobParameters body, String clientTenantId) {
        return createWithServiceResponseAsync(jobName, resourceGroupName, body, clientTenantId).toBlocking().single().body();
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @param clientTenantId The tenant ID of the client making the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JobResponseInner> createAsync(String jobName, String resourceGroupName, PutJobParameters body, String clientTenantId, final ServiceCallback<JobResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(jobName, resourceGroupName, body, clientTenantId), serviceCallback);
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @param clientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<JobResponseInner> createAsync(String jobName, String resourceGroupName, PutJobParameters body, String clientTenantId) {
        return createWithServiceResponseAsync(jobName, resourceGroupName, body, clientTenantId).map(new Func1<ServiceResponse<JobResponseInner>, JobResponseInner>() {
            @Override
            public JobResponseInner call(ServiceResponse<JobResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param body The parameters used for creating the job
     * @param clientTenantId The tenant ID of the client making the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JobResponseInner object
     */
    public Observable<ServiceResponse<JobResponseInner>> createWithServiceResponseAsync(String jobName, String resourceGroupName, PutJobParameters body, String clientTenantId) {
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        Validator.validate(body);
        return service.create(jobName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), clientTenantId, body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JobResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<JobResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JobResponseInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JobResponseInner> createDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JobResponseInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JobResponseInner>() { }.getType())
                .register(201, new TypeToken<JobResponseInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String jobName, String resourceGroupName) {
        deleteWithServiceResponseAsync(jobName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String jobName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(jobName, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String jobName, String resourceGroupName) {
        return deleteWithServiceResponseAsync(jobName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     *
     * @param jobName The name of the import/export job.
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String jobName, String resourceGroupName) {
        if (jobName == null) {
            throw new IllegalArgumentException("Parameter jobName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        return service.delete(jobName, this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<JobResponseInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<JobResponseInner>> serviceFuture, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
    ServiceResponse<PageImpl1<JobResponseInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JobResponseInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<JobResponseInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<JobResponseInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<JobResponseInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;JobResponseInner&gt; object if successful.
     */
    public PagedList<JobResponseInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<JobResponseInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<JobResponseInner>(response.body()) {
            @Override
            public Page<JobResponseInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JobResponseInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<JobResponseInner>> serviceFuture, final ListOperationCallback<JobResponseInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<Page<JobResponseInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<JobResponseInner>>, Page<JobResponseInner>>() {
                @Override
                public Page<JobResponseInner> call(ServiceResponse<Page<JobResponseInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;JobResponseInner&gt; object
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<JobResponseInner>>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(ServiceResponse<Page<JobResponseInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
    ServiceResponse<PageImpl1<JobResponseInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;JobResponseInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<JobResponseInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<JobResponseInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<JobResponseInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JobResponseInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<JobResponseInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<JobResponseInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<JobResponseInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<JobResponseInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
