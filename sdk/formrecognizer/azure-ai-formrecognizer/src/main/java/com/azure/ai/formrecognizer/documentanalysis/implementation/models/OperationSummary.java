// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.ai.formrecognizer.documentanalysis.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Operation info. */
@Immutable
public final class OperationSummary implements JsonSerializable<OperationSummary> {
    /*
     * Operation ID
     */
    private final String operationId;

    /*
     * Operation status.
     */
    private final OperationStatus status;

    /*
     * Operation progress (0-100).
     */
    private Integer percentCompleted;

    /*
     * Date and time (UTC) when the operation was created.
     */
    private final OffsetDateTime createdDateTime;

    /*
     * Date and time (UTC) when the status was last updated.
     */
    private final OffsetDateTime lastUpdatedDateTime;

    /*
     * Type of operation.
     */
    private final OperationKind kind;

    /*
     * URL of the resource targeted by this operation.
     */
    private final String resourceLocation;

    /*
     * API version used to create this operation.
     */
    private String apiVersion;

    /*
     * List of key-value tag attributes associated with the document model.
     */
    private Map<String, String> tags;

    /**
     * Creates an instance of OperationSummary class.
     *
     * @param operationId the operationId value to set.
     * @param status the status value to set.
     * @param createdDateTime the createdDateTime value to set.
     * @param lastUpdatedDateTime the lastUpdatedDateTime value to set.
     * @param kind the kind value to set.
     * @param resourceLocation the resourceLocation value to set.
     */
    private OperationSummary(
            String operationId,
            OperationStatus status,
            OffsetDateTime createdDateTime,
            OffsetDateTime lastUpdatedDateTime,
            OperationKind kind,
            String resourceLocation) {
        this.operationId = operationId;
        this.status = status;
        this.createdDateTime = createdDateTime;
        this.lastUpdatedDateTime = lastUpdatedDateTime;
        this.kind = kind;
        this.resourceLocation = resourceLocation;
    }

    /**
     * Get the operationId property: Operation ID.
     *
     * @return the operationId value.
     */
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the status property: Operation status.
     *
     * @return the status value.
     */
    public OperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the percentCompleted property: Operation progress (0-100).
     *
     * @return the percentCompleted value.
     */
    public Integer getPercentCompleted() {
        return this.percentCompleted;
    }

    /**
     * Get the createdDateTime property: Date and time (UTC) when the operation was created.
     *
     * @return the createdDateTime value.
     */
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the lastUpdatedDateTime property: Date and time (UTC) when the status was last updated.
     *
     * @return the lastUpdatedDateTime value.
     */
    public OffsetDateTime getLastUpdatedDateTime() {
        return this.lastUpdatedDateTime;
    }

    /**
     * Get the kind property: Type of operation.
     *
     * @return the kind value.
     */
    public OperationKind getKind() {
        return this.kind;
    }

    /**
     * Get the resourceLocation property: URL of the resource targeted by this operation.
     *
     * @return the resourceLocation value.
     */
    public String getResourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Get the apiVersion property: API version used to create this operation.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Get the tags property: List of key-value tag attributes associated with the document model.
     *
     * @return the tags value.
     */
    public Map<String, String> getTags() {
        return this.tags;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("status", Objects.toString(this.status, null));
        jsonWriter.writeStringField("createdDateTime", Objects.toString(this.createdDateTime, null));
        jsonWriter.writeStringField("lastUpdatedDateTime", Objects.toString(this.lastUpdatedDateTime, null));
        jsonWriter.writeStringField("kind", Objects.toString(this.kind, null));
        jsonWriter.writeStringField("resourceLocation", this.resourceLocation);
        jsonWriter.writeNumberField("percentCompleted", this.percentCompleted);
        jsonWriter.writeStringField("apiVersion", this.apiVersion);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationSummary from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationSummary if the JsonReader was pointing to an instance of it, or null if it was
     *     pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OperationSummary.
     */
    public static OperationSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(
                reader -> {
                    boolean operationIdFound = false;
                    String operationId = null;
                    boolean statusFound = false;
                    OperationStatus status = null;
                    boolean createdDateTimeFound = false;
                    OffsetDateTime createdDateTime = null;
                    boolean lastUpdatedDateTimeFound = false;
                    OffsetDateTime lastUpdatedDateTime = null;
                    boolean kindFound = false;
                    OperationKind kind = null;
                    boolean resourceLocationFound = false;
                    String resourceLocation = null;
                    Integer percentCompleted = null;
                    String apiVersion = null;
                    Map<String, String> tags = null;
                    while (reader.nextToken() != JsonToken.END_OBJECT) {
                        String fieldName = reader.getFieldName();
                        reader.nextToken();

                        if ("operationId".equals(fieldName)) {
                            operationId = reader.getString();
                            operationIdFound = true;
                        } else if ("status".equals(fieldName)) {
                            status = OperationStatus.fromString(reader.getString());
                            statusFound = true;
                        } else if ("createdDateTime".equals(fieldName)) {
                            createdDateTime =
                                    reader.getNullable(
                                            nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                            createdDateTimeFound = true;
                        } else if ("lastUpdatedDateTime".equals(fieldName)) {
                            lastUpdatedDateTime =
                                    reader.getNullable(
                                            nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                            lastUpdatedDateTimeFound = true;
                        } else if ("kind".equals(fieldName)) {
                            kind = OperationKind.fromString(reader.getString());
                            kindFound = true;
                        } else if ("resourceLocation".equals(fieldName)) {
                            resourceLocation = reader.getString();
                            resourceLocationFound = true;
                        } else if ("percentCompleted".equals(fieldName)) {
                            percentCompleted = reader.getNullable(JsonReader::getInt);
                        } else if ("apiVersion".equals(fieldName)) {
                            apiVersion = reader.getString();
                        } else if ("tags".equals(fieldName)) {
                            tags = reader.readMap(reader1 -> reader1.getString());
                        } else {
                            reader.skipChildren();
                        }
                    }
                    if (operationIdFound
                            && statusFound
                            && createdDateTimeFound
                            && lastUpdatedDateTimeFound
                            && kindFound
                            && resourceLocationFound) {
                        OperationSummary deserializedOperationSummary =
                                new OperationSummary(
                                        operationId,
                                        status,
                                        createdDateTime,
                                        lastUpdatedDateTime,
                                        kind,
                                        resourceLocation);
                        deserializedOperationSummary.percentCompleted = percentCompleted;
                        deserializedOperationSummary.apiVersion = apiVersion;
                        deserializedOperationSummary.tags = tags;

                        return deserializedOperationSummary;
                    }
                    List<String> missingProperties = new ArrayList<>();
                    if (!operationIdFound) {
                        missingProperties.add("operationId");
                    }
                    if (!statusFound) {
                        missingProperties.add("status");
                    }
                    if (!createdDateTimeFound) {
                        missingProperties.add("createdDateTime");
                    }
                    if (!lastUpdatedDateTimeFound) {
                        missingProperties.add("lastUpdatedDateTime");
                    }
                    if (!kindFound) {
                        missingProperties.add("kind");
                    }
                    if (!resourceLocationFound) {
                        missingProperties.add("resourceLocation");
                    }

                    throw new IllegalStateException(
                            "Missing required property/properties: " + String.join(", ", missingProperties));
                });
    }
}
