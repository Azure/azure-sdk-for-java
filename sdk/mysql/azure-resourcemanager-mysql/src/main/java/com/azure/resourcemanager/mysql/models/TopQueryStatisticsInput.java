// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysql.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mysql.implementation.TopQueryStatisticsInputProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Input to get top query statistics. */
@Fluent
public final class TopQueryStatisticsInput {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TopQueryStatisticsInput.class);

    /*
     * The properties of a wait statistics input.
     */
    @JsonProperty(value = "properties", required = true)
    private TopQueryStatisticsInputProperties properties;

    /**
     * Get the properties property: The properties of a wait statistics input.
     *
     * @return the properties value.
     */
    private TopQueryStatisticsInputProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The properties of a wait statistics input.
     *
     * @param properties the properties value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    private TopQueryStatisticsInput withProperties(TopQueryStatisticsInputProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the numberOfTopQueries property: Max number of top queries to return.
     *
     * @return the numberOfTopQueries value.
     */
    public int numberOfTopQueries() {
        if (this.properties() == null) {
            return 0;
        } else {
            return this.properties().numberOfTopQueries();
        }
    }

    /**
     * Set the numberOfTopQueries property: Max number of top queries to return.
     *
     * @param numberOfTopQueries the numberOfTopQueries value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    public TopQueryStatisticsInput withNumberOfTopQueries(int numberOfTopQueries) {
        if (this.properties() == null) {
            this.withProperties(new TopQueryStatisticsInputProperties());
        }
        this.properties().withNumberOfTopQueries(numberOfTopQueries);
        return this;
    }

    /**
     * Get the aggregationFunction property: Aggregation function name.
     *
     * @return the aggregationFunction value.
     */
    public String aggregationFunction() {
        if (this.properties() == null) {
            return null;
        } else {
            return this.properties().aggregationFunction();
        }
    }

    /**
     * Set the aggregationFunction property: Aggregation function name.
     *
     * @param aggregationFunction the aggregationFunction value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    public TopQueryStatisticsInput withAggregationFunction(String aggregationFunction) {
        if (this.properties() == null) {
            this.withProperties(new TopQueryStatisticsInputProperties());
        }
        this.properties().withAggregationFunction(aggregationFunction);
        return this;
    }

    /**
     * Get the observedMetric property: Observed metric name.
     *
     * @return the observedMetric value.
     */
    public String observedMetric() {
        if (this.properties() == null) {
            return null;
        } else {
            return this.properties().observedMetric();
        }
    }

    /**
     * Set the observedMetric property: Observed metric name.
     *
     * @param observedMetric the observedMetric value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    public TopQueryStatisticsInput withObservedMetric(String observedMetric) {
        if (this.properties() == null) {
            this.withProperties(new TopQueryStatisticsInputProperties());
        }
        this.properties().withObservedMetric(observedMetric);
        return this;
    }

    /**
     * Get the observationStartTime property: Observation start time.
     *
     * @return the observationStartTime value.
     */
    public OffsetDateTime observationStartTime() {
        if (this.properties() == null) {
            return null;
        } else {
            return this.properties().observationStartTime();
        }
    }

    /**
     * Set the observationStartTime property: Observation start time.
     *
     * @param observationStartTime the observationStartTime value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    public TopQueryStatisticsInput withObservationStartTime(OffsetDateTime observationStartTime) {
        if (this.properties() == null) {
            this.withProperties(new TopQueryStatisticsInputProperties());
        }
        this.properties().withObservationStartTime(observationStartTime);
        return this;
    }

    /**
     * Get the observationEndTime property: Observation end time.
     *
     * @return the observationEndTime value.
     */
    public OffsetDateTime observationEndTime() {
        if (this.properties() == null) {
            return null;
        } else {
            return this.properties().observationEndTime();
        }
    }

    /**
     * Set the observationEndTime property: Observation end time.
     *
     * @param observationEndTime the observationEndTime value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    public TopQueryStatisticsInput withObservationEndTime(OffsetDateTime observationEndTime) {
        if (this.properties() == null) {
            this.withProperties(new TopQueryStatisticsInputProperties());
        }
        this.properties().withObservationEndTime(observationEndTime);
        return this;
    }

    /**
     * Get the aggregationWindow property: Aggregation interval type in ISO 8601 format.
     *
     * @return the aggregationWindow value.
     */
    public String aggregationWindow() {
        if (this.properties() == null) {
            return null;
        } else {
            return this.properties().aggregationWindow();
        }
    }

    /**
     * Set the aggregationWindow property: Aggregation interval type in ISO 8601 format.
     *
     * @param aggregationWindow the aggregationWindow value to set.
     * @return the TopQueryStatisticsInput object itself.
     */
    public TopQueryStatisticsInput withAggregationWindow(String aggregationWindow) {
        if (this.properties() == null) {
            this.withProperties(new TopQueryStatisticsInputProperties());
        }
        this.properties().withAggregationWindow(aggregationWindow);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property properties in model TopQueryStatisticsInput"));
        } else {
            properties().validate();
        }
    }
}
