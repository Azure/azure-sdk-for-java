// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mysql.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mysql.implementation.LogFileProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Represents a log file. */
@Fluent
public final class LogFileInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LogFileInner.class);

    /*
     * The properties of the log file.
     */
    @JsonProperty(value = "properties")
    private LogFileProperties properties;

    /**
     * Get the properties property: The properties of the log file.
     *
     * @return the properties value.
     */
    private LogFileProperties properties() {
        return this.properties;
    }

    /**
     * Get the sizeInKB property: Size of the log file.
     *
     * @return the sizeInKB value.
     */
    public Long sizeInKB() {
        return this.properties() == null ? null : this.properties().sizeInKB();
    }

    /**
     * Set the sizeInKB property: Size of the log file.
     *
     * @param sizeInKB the sizeInKB value to set.
     * @return the LogFileInner object itself.
     */
    public LogFileInner withSizeInKB(Long sizeInKB) {
        if (this.properties() == null) {
            this.properties = new LogFileProperties();
        }
        this.properties().withSizeInKB(sizeInKB);
        return this;
    }

    /**
     * Get the createdTime property: Creation timestamp of the log file.
     *
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.properties() == null ? null : this.properties().createdTime();
    }

    /**
     * Get the lastModifiedTime property: Last modified timestamp of the log file.
     *
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.properties() == null ? null : this.properties().lastModifiedTime();
    }

    /**
     * Get the typePropertiesType property: Type of the log file.
     *
     * @return the typePropertiesType value.
     */
    public String typePropertiesType() {
        return this.properties() == null ? null : this.properties().typePropertiesType();
    }

    /**
     * Set the typePropertiesType property: Type of the log file.
     *
     * @param typePropertiesType the typePropertiesType value to set.
     * @return the LogFileInner object itself.
     */
    public LogFileInner withTypePropertiesType(String typePropertiesType) {
        if (this.properties() == null) {
            this.properties = new LogFileProperties();
        }
        this.properties().withTypePropertiesType(typePropertiesType);
        return this;
    }

    /**
     * Get the url property: The url to download the log file from.
     *
     * @return the url value.
     */
    public String url() {
        return this.properties() == null ? null : this.properties().url();
    }

    /**
     * Set the url property: The url to download the log file from.
     *
     * @param url the url value to set.
     * @return the LogFileInner object itself.
     */
    public LogFileInner withUrl(String url) {
        if (this.properties() == null) {
            this.properties = new LogFileProperties();
        }
        this.properties().withUrl(url);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }
}
