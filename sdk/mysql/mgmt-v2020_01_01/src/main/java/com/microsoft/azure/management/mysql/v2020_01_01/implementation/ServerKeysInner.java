/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mysql.v2020_01_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ServerKeys.
 */
public class ServerKeysInner {
    /** The Retrofit service to perform REST calls. */
    private ServerKeysService service;
    /** The service client containing this operation class. */
    private MySQLManagementClientImpl client;

    /**
     * Initializes an instance of ServerKeysInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServerKeysInner(Retrofit retrofit, MySQLManagementClientImpl client) {
        this.service = retrofit.create(ServerKeysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ServerKeys to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServerKeysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/keys")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/keys/{keyName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("keyName") String keyName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/keys/{keyName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("serverName") String serverName, @Path("keyName") String keyName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServerKeyInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/keys/{keyName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("serverName") String serverName, @Path("keyName") String keyName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body ServerKeyInner parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/keys/{keyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("serverName") String serverName, @Path("keyName") String keyName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/keys/{keyName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("serverName") String serverName, @Path("keyName") String keyName, @Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.ServerKeys listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of  Server keys.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServerKeyInner&gt; object if successful.
     */
    public PagedList<ServerKeyInner> list(final String resourceGroupName, final String serverName) {
        ServiceResponse<Page<ServerKeyInner>> response = listSinglePageAsync(resourceGroupName, serverName).toBlocking().single();
        return new PagedList<ServerKeyInner>(response.body()) {
            @Override
            public Page<ServerKeyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServerKeyInner>> listAsync(final String resourceGroupName, final String serverName, final ListOperationCallback<ServerKeyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, serverName),
            new Func1<String, Observable<ServiceResponse<Page<ServerKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerKeyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerKeyInner&gt; object
     */
    public Observable<Page<ServerKeyInner>> listAsync(final String resourceGroupName, final String serverName) {
        return listWithServiceResponseAsync(resourceGroupName, serverName)
            .map(new Func1<ServiceResponse<Page<ServerKeyInner>>, Page<ServerKeyInner>>() {
                @Override
                public Page<ServerKeyInner> call(ServiceResponse<Page<ServerKeyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerKeyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServerKeyInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String serverName) {
        return listSinglePageAsync(resourceGroupName, serverName)
            .concatMap(new Func1<ServiceResponse<Page<ServerKeyInner>>, Observable<ServiceResponse<Page<ServerKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerKeyInner>>> call(ServiceResponse<Page<ServerKeyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of  Server keys.
     *
    ServiceResponse<PageImpl1<ServerKeyInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl1<ServerKeyInner>> * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServerKeyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServerKeyInner>>> listSinglePageAsync(final String resourceGroupName, final String serverName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        return service.list(this.client.subscriptionId(), resourceGroupName, serverName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServerKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerKeyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ServerKeyInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServerKeyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ServerKeyInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<ServerKeyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<ServerKeyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a MySQL Server key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerKeyInner object if successful.
     */
    public ServerKeyInner get(String resourceGroupName, String serverName, String keyName) {
        return getWithServiceResponseAsync(resourceGroupName, serverName, keyName).toBlocking().single().body();
    }

    /**
     * Gets a MySQL Server key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerKeyInner> getAsync(String resourceGroupName, String serverName, String keyName, final ServiceCallback<ServerKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, serverName, keyName), serviceCallback);
    }

    /**
     * Gets a MySQL Server key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerKeyInner object
     */
    public Observable<ServerKeyInner> getAsync(String resourceGroupName, String serverName, String keyName) {
        return getWithServiceResponseAsync(resourceGroupName, serverName, keyName).map(new Func1<ServiceResponse<ServerKeyInner>, ServerKeyInner>() {
            @Override
            public ServerKeyInner call(ServiceResponse<ServerKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a MySQL Server key.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerKeyInner object
     */
    public Observable<ServiceResponse<ServerKeyInner>> getWithServiceResponseAsync(String resourceGroupName, String serverName, String keyName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        return service.get(resourceGroupName, serverName, keyName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerKeyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerKeyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerKeyInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerKeyInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServerKeyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServerKeyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerKeyInner object if successful.
     */
    public ServerKeyInner createOrUpdate(String serverName, String keyName, String resourceGroupName) {
        return createOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerKeyInner> createOrUpdateAsync(String serverName, String keyName, String resourceGroupName, final ServiceCallback<ServerKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName), serviceCallback);
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServerKeyInner> createOrUpdateAsync(String serverName, String keyName, String resourceGroupName) {
        return createOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName).map(new Func1<ServiceResponse<ServerKeyInner>, ServerKeyInner>() {
            @Override
            public ServerKeyInner call(ServiceResponse<ServerKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServerKeyInner>> createOrUpdateWithServiceResponseAsync(String serverName, String keyName, String resourceGroupName) {
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        final String uri = null;
        ServerKeyInner parameters = new ServerKeyInner();
        parameters.withUri(null);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(serverName, keyName, this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServerKeyInner>() { }.getType());
    }
    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerKeyInner object if successful.
     */
    public ServerKeyInner createOrUpdate(String serverName, String keyName, String resourceGroupName, String uri) {
        return createOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName, uri).toBlocking().last().body();
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerKeyInner> createOrUpdateAsync(String serverName, String keyName, String resourceGroupName, String uri, final ServiceCallback<ServerKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName, uri), serviceCallback);
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServerKeyInner> createOrUpdateAsync(String serverName, String keyName, String resourceGroupName, String uri) {
        return createOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName, uri).map(new Func1<ServiceResponse<ServerKeyInner>, ServerKeyInner>() {
            @Override
            public ServerKeyInner call(ServiceResponse<ServerKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ServerKeyInner>> createOrUpdateWithServiceResponseAsync(String serverName, String keyName, String resourceGroupName, String uri) {
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        ServerKeyInner parameters = new ServerKeyInner();
        parameters.withUri(uri);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(serverName, keyName, this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<ServerKeyInner>() { }.getType());
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerKeyInner object if successful.
     */
    public ServerKeyInner beginCreateOrUpdate(String serverName, String keyName, String resourceGroupName) {
        return beginCreateOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerKeyInner> beginCreateOrUpdateAsync(String serverName, String keyName, String resourceGroupName, final ServiceCallback<ServerKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName), serviceCallback);
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerKeyInner object
     */
    public Observable<ServerKeyInner> beginCreateOrUpdateAsync(String serverName, String keyName, String resourceGroupName) {
        return beginCreateOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName).map(new Func1<ServiceResponse<ServerKeyInner>, ServerKeyInner>() {
            @Override
            public ServerKeyInner call(ServiceResponse<ServerKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerKeyInner object
     */
    public Observable<ServiceResponse<ServerKeyInner>> beginCreateOrUpdateWithServiceResponseAsync(String serverName, String keyName, String resourceGroupName) {
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        final String uri = null;
        ServerKeyInner parameters = new ServerKeyInner();
        parameters.withUri(null);
        return service.beginCreateOrUpdate(serverName, keyName, this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerKeyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerKeyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerKeyInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ServerKeyInner object if successful.
     */
    public ServerKeyInner beginCreateOrUpdate(String serverName, String keyName, String resourceGroupName, String uri) {
        return beginCreateOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName, uri).toBlocking().single().body();
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ServerKeyInner> beginCreateOrUpdateAsync(String serverName, String keyName, String resourceGroupName, String uri, final ServiceCallback<ServerKeyInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName, uri), serviceCallback);
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerKeyInner object
     */
    public Observable<ServerKeyInner> beginCreateOrUpdateAsync(String serverName, String keyName, String resourceGroupName, String uri) {
        return beginCreateOrUpdateWithServiceResponseAsync(serverName, keyName, resourceGroupName, uri).map(new Func1<ServiceResponse<ServerKeyInner>, ServerKeyInner>() {
            @Override
            public ServerKeyInner call(ServiceResponse<ServerKeyInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a MySQL Server key.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param uri The URI of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ServerKeyInner object
     */
    public Observable<ServiceResponse<ServerKeyInner>> beginCreateOrUpdateWithServiceResponseAsync(String serverName, String keyName, String resourceGroupName, String uri) {
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        ServerKeyInner parameters = new ServerKeyInner();
        parameters.withUri(uri);
        return service.beginCreateOrUpdate(serverName, keyName, this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ServerKeyInner>>>() {
                @Override
                public Observable<ServiceResponse<ServerKeyInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ServerKeyInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ServerKeyInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ServerKeyInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ServerKeyInner>() { }.getType())
                .register(202, new TypeToken<ServerKeyInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String serverName, String keyName, String resourceGroupName) {
        deleteWithServiceResponseAsync(serverName, keyName, resourceGroupName).toBlocking().last().body();
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String serverName, String keyName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(serverName, keyName, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String serverName, String keyName, String resourceGroupName) {
        return deleteWithServiceResponseAsync(serverName, keyName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String serverName, String keyName, String resourceGroupName) {
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        Observable<Response<ResponseBody>> observable = service.delete(serverName, keyName, this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String serverName, String keyName, String resourceGroupName) {
        beginDeleteWithServiceResponseAsync(serverName, keyName, resourceGroupName).toBlocking().single().body();
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String serverName, String keyName, String resourceGroupName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(serverName, keyName, resourceGroupName), serviceCallback);
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String serverName, String keyName, String resourceGroupName) {
        return beginDeleteWithServiceResponseAsync(serverName, keyName, resourceGroupName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the MySQL Server key with the given name.
     *
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String serverName, String keyName, String resourceGroupName) {
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        final String apiVersion = "2020-01-01";
        return service.beginDelete(serverName, keyName, this.client.subscriptionId(), resourceGroupName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;ServerKeyInner&gt; object if successful.
     */
    public PagedList<ServerKeyInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<ServerKeyInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ServerKeyInner>(response.body()) {
            @Override
            public Page<ServerKeyInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<ServerKeyInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ServerKeyInner>> serviceFuture, final ListOperationCallback<ServerKeyInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ServerKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerKeyInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerKeyInner&gt; object
     */
    public Observable<Page<ServerKeyInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ServerKeyInner>>, Page<ServerKeyInner>>() {
                @Override
                public Page<ServerKeyInner> call(ServiceResponse<Page<ServerKeyInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets a list of  Server keys.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;ServerKeyInner&gt; object
     */
    public Observable<ServiceResponse<Page<ServerKeyInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ServerKeyInner>>, Observable<ServiceResponse<Page<ServerKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerKeyInner>>> call(ServiceResponse<Page<ServerKeyInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets a list of  Server keys.
     *
    ServiceResponse<PageImpl1<ServerKeyInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;ServerKeyInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ServerKeyInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ServerKeyInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ServerKeyInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<ServerKeyInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ServerKeyInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<ServerKeyInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<ServerKeyInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<ServerKeyInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
