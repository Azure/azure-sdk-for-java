/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mysql.v2020_01_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.CollectionFormat;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in QueryTexts.
 */
public class QueryTextsInner {
    /** The Retrofit service to perform REST calls. */
    private QueryTextsService service;
    /** The service client containing this operation class. */
    private MySQLManagementClientImpl client;

    /**
     * Initializes an instance of QueryTextsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public QueryTextsInner(Retrofit retrofit, MySQLManagementClientImpl client) {
        this.service = retrofit.create(QueryTextsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for QueryTexts to be
     * used by Retrofit to perform actually REST calls.
     */
    interface QueryTextsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.QueryTexts get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts/{queryId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Path("queryId") String queryId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.QueryTexts listByServer" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforMySQL/servers/{serverName}/queryTexts")
        Observable<Response<ResponseBody>> listByServer(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("serverName") String serverName, @Query("api-version") String apiVersion, @Query("queryIds") String queryIds, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.QueryTexts listByServerNext" })
        @GET
        Observable<Response<ResponseBody>> listByServerNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Retrieve the Query-Store query texts for the queryId.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryId The Query-Store query identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QueryTextInner object if successful.
     */
    public QueryTextInner get(String resourceGroupName, String serverName, String queryId) {
        return getWithServiceResponseAsync(resourceGroupName, serverName, queryId).toBlocking().single().body();
    }

    /**
     * Retrieve the Query-Store query texts for the queryId.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryId The Query-Store query identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<QueryTextInner> getAsync(String resourceGroupName, String serverName, String queryId, final ServiceCallback<QueryTextInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, serverName, queryId), serviceCallback);
    }

    /**
     * Retrieve the Query-Store query texts for the queryId.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryId The Query-Store query identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryTextInner object
     */
    public Observable<QueryTextInner> getAsync(String resourceGroupName, String serverName, String queryId) {
        return getWithServiceResponseAsync(resourceGroupName, serverName, queryId).map(new Func1<ServiceResponse<QueryTextInner>, QueryTextInner>() {
            @Override
            public QueryTextInner call(ServiceResponse<QueryTextInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve the Query-Store query texts for the queryId.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryId The Query-Store query identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QueryTextInner object
     */
    public Observable<ServiceResponse<QueryTextInner>> getWithServiceResponseAsync(String resourceGroupName, String serverName, String queryId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (queryId == null) {
            throw new IllegalArgumentException("Parameter queryId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, serverName, queryId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QueryTextInner>>>() {
                @Override
                public Observable<ServiceResponse<QueryTextInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QueryTextInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<QueryTextInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<QueryTextInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<QueryTextInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryIds The query identifiers
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;QueryTextInner&gt; object if successful.
     */
    public PagedList<QueryTextInner> listByServer(final String resourceGroupName, final String serverName, final List<String> queryIds) {
        ServiceResponse<Page<QueryTextInner>> response = listByServerSinglePageAsync(resourceGroupName, serverName, queryIds).toBlocking().single();
        return new PagedList<QueryTextInner>(response.body()) {
            @Override
            public Page<QueryTextInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryIds The query identifiers
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QueryTextInner>> listByServerAsync(final String resourceGroupName, final String serverName, final List<String> queryIds, final ListOperationCallback<QueryTextInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServerSinglePageAsync(resourceGroupName, serverName, queryIds),
            new Func1<String, Observable<ServiceResponse<Page<QueryTextInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QueryTextInner>>> call(String nextPageLink) {
                    return listByServerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryIds The query identifiers
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QueryTextInner&gt; object
     */
    public Observable<Page<QueryTextInner>> listByServerAsync(final String resourceGroupName, final String serverName, final List<String> queryIds) {
        return listByServerWithServiceResponseAsync(resourceGroupName, serverName, queryIds)
            .map(new Func1<ServiceResponse<Page<QueryTextInner>>, Page<QueryTextInner>>() {
                @Override
                public Page<QueryTextInner> call(ServiceResponse<Page<QueryTextInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryIds The query identifiers
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QueryTextInner&gt; object
     */
    public Observable<ServiceResponse<Page<QueryTextInner>>> listByServerWithServiceResponseAsync(final String resourceGroupName, final String serverName, final List<String> queryIds) {
        return listByServerSinglePageAsync(resourceGroupName, serverName, queryIds)
            .concatMap(new Func1<ServiceResponse<Page<QueryTextInner>>, Observable<ServiceResponse<Page<QueryTextInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QueryTextInner>>> call(ServiceResponse<Page<QueryTextInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
    ServiceResponse<PageImpl1<QueryTextInner>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl1<QueryTextInner>> * @param serverName The name of the server.
    ServiceResponse<PageImpl1<QueryTextInner>> * @param queryIds The query identifiers
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;QueryTextInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<QueryTextInner>>> listByServerSinglePageAsync(final String resourceGroupName, final String serverName, final List<String> queryIds) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (queryIds == null) {
            throw new IllegalArgumentException("Parameter queryIds is required and cannot be null.");
        }
        Validator.validate(queryIds);
        final String apiVersion = "2018-06-01";
        String queryIdsConverted = this.client.serializerAdapter().serializeList(queryIds, CollectionFormat.MULTI);
        return service.listByServer(this.client.subscriptionId(), resourceGroupName, serverName, apiVersion, queryIdsConverted, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<QueryTextInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QueryTextInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<QueryTextInner>> result = listByServerDelegate(response);
                        return Observable.just(new ServiceResponse<Page<QueryTextInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<QueryTextInner>> listByServerDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<QueryTextInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<QueryTextInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;QueryTextInner&gt; object if successful.
     */
    public PagedList<QueryTextInner> listByServerNext(final String nextPageLink) {
        ServiceResponse<Page<QueryTextInner>> response = listByServerNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<QueryTextInner>(response.body()) {
            @Override
            public Page<QueryTextInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<QueryTextInner>> listByServerNextAsync(final String nextPageLink, final ServiceFuture<List<QueryTextInner>> serviceFuture, final ListOperationCallback<QueryTextInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServerNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<QueryTextInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QueryTextInner>>> call(String nextPageLink) {
                    return listByServerNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QueryTextInner&gt; object
     */
    public Observable<Page<QueryTextInner>> listByServerNextAsync(final String nextPageLink) {
        return listByServerNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<QueryTextInner>>, Page<QueryTextInner>>() {
                @Override
                public Page<QueryTextInner> call(ServiceResponse<Page<QueryTextInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;QueryTextInner&gt; object
     */
    public Observable<ServiceResponse<Page<QueryTextInner>>> listByServerNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServerNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<QueryTextInner>>, Observable<ServiceResponse<Page<QueryTextInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QueryTextInner>>> call(ServiceResponse<Page<QueryTextInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServerNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     *
    ServiceResponse<PageImpl1<QueryTextInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;QueryTextInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<QueryTextInner>>> listByServerNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServerNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<QueryTextInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<QueryTextInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<QueryTextInner>> result = listByServerNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<QueryTextInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<QueryTextInner>> listByServerNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<QueryTextInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<QueryTextInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
