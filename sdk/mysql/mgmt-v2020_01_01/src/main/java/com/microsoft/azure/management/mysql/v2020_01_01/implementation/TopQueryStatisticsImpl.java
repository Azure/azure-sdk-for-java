/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.mysql.v2020_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.mysql.v2020_01_01.TopQueryStatistics;
import com.microsoft.azure.management.mysql.v2020_01_01.TopQueryStatisticsInput;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.mysql.v2020_01_01.QueryStatistic;

class TopQueryStatisticsImpl extends WrapperImpl<TopQueryStatisticsInner> implements TopQueryStatistics {
    private final MySQLManager manager;

    TopQueryStatisticsImpl(MySQLManager manager) {
        super(manager.inner().topQueryStatistics());
        this.manager = manager;
    }

    public MySQLManager manager() {
        return this.manager;
    }

    private QueryStatisticImpl wrapModel(QueryStatisticInner inner) {
        return  new QueryStatisticImpl(inner, manager());
    }

    @Override
    public Observable<QueryStatistic> listByServerAsync(final String resourceGroupName, final String serverName, final TopQueryStatisticsInput parameters) {
        TopQueryStatisticsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName, parameters)
        .flatMapIterable(new Func1<Page<QueryStatisticInner>, Iterable<QueryStatisticInner>>() {
            @Override
            public Iterable<QueryStatisticInner> call(Page<QueryStatisticInner> page) {
                return page.items();
            }
        })
        .map(new Func1<QueryStatisticInner, QueryStatistic>() {
            @Override
            public QueryStatistic call(QueryStatisticInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<QueryStatistic> getAsync(String resourceGroupName, String serverName, String queryStatisticId) {
        TopQueryStatisticsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, queryStatisticId)
        .flatMap(new Func1<QueryStatisticInner, Observable<QueryStatistic>>() {
            @Override
            public Observable<QueryStatistic> call(QueryStatisticInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((QueryStatistic)wrapModel(inner));
                }
            }
       });
    }

}
