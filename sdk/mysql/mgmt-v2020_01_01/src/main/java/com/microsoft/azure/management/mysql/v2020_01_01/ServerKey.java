/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mysql.v2020_01_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.mysql.v2020_01_01.implementation.ServerKeyInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.mysql.v2020_01_01.implementation.MySQLManager;
import org.joda.time.DateTime;

/**
 * Type representing ServerKey.
 */
public interface ServerKey extends HasInner<ServerKeyInner>, Indexable, Refreshable<ServerKey>, Updatable<ServerKey.Update>, HasManager<MySQLManager> {
    /**
     * @return the creationDate value.
     */
    DateTime creationDate();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the kind value.
     */
    String kind();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the serverKeyType value.
     */
    String serverKeyType();

    /**
     * @return the type value.
     */
    String type();

    /**
     * @return the uri value.
     */
    String uri();

    /**
     * The entirety of the ServerKey definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithServer, DefinitionStages.WithUri, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ServerKey definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ServerKey definition.
         */
        interface Blank extends WithServer {
        }

        /**
         * The stage of the serverkey definition allowing to specify Server.
         */
        interface WithServer {
           /**
            * Specifies serverName, resourceGroupName.
            * @param serverName The name of the server
            * @param resourceGroupName The name of the resource group. The name is case insensitive
            * @return the next definition stage
            */
            WithUri withExistingServer(String serverName, String resourceGroupName);
        }

        /**
         * The stage of the serverkey definition allowing to specify Uri.
         */
        interface WithUri {
           /**
            * Specifies uri.
            * @param uri The URI of the key
            * @return the next definition stage
            */
            WithCreate withUri(String uri);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ServerKey> {
        }
    }
    /**
     * The template for a ServerKey update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ServerKey>, UpdateStages.WithUri {
    }

    /**
     * Grouping of ServerKey update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the serverkey update allowing to specify Uri.
         */
        interface WithUri {
            /**
             * Specifies uri.
             * @param uri The URI of the key
             * @return the next update stage
             */
            Update withUri(String uri);
        }

    }
}
