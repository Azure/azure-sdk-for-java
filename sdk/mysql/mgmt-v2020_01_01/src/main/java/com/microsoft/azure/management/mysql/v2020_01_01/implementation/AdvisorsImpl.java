/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.mysql.v2020_01_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.mysql.v2020_01_01.Advisors;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.mysql.v2020_01_01.Advisor;

class AdvisorsImpl extends WrapperImpl<AdvisorsInner> implements Advisors {
    private final MySQLManager manager;

    AdvisorsImpl(MySQLManager manager) {
        super(manager.inner().advisors());
        this.manager = manager;
    }

    public MySQLManager manager() {
        return this.manager;
    }

    private AdvisorImpl wrapModel(AdvisorInner inner) {
        return  new AdvisorImpl(inner, manager());
    }

    @Override
    public Observable<Advisor> listByServerAsync(final String resourceGroupName, final String serverName) {
        AdvisorsInner client = this.inner();
        return client.listByServerAsync(resourceGroupName, serverName)
        .flatMapIterable(new Func1<Page<AdvisorInner>, Iterable<AdvisorInner>>() {
            @Override
            public Iterable<AdvisorInner> call(Page<AdvisorInner> page) {
                return page.items();
            }
        })
        .map(new Func1<AdvisorInner, Advisor>() {
            @Override
            public Advisor call(AdvisorInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Advisor> getAsync(String resourceGroupName, String serverName, String advisorName) {
        AdvisorsInner client = this.inner();
        return client.getAsync(resourceGroupName, serverName, advisorName)
        .flatMap(new Func1<AdvisorInner, Observable<Advisor>>() {
            @Override
            public Observable<Advisor> call(AdvisorInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Advisor)wrapModel(inner));
                }
            }
       });
    }

}
