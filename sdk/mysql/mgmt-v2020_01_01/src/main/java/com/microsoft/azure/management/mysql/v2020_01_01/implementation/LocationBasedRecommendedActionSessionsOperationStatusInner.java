/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mysql.v2020_01_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in LocationBasedRecommendedActionSessionsOperationStatus.
 */
public class LocationBasedRecommendedActionSessionsOperationStatusInner {
    /** The Retrofit service to perform REST calls. */
    private LocationBasedRecommendedActionSessionsOperationStatusService service;
    /** The service client containing this operation class. */
    private MySQLManagementClientImpl client;

    /**
     * Initializes an instance of LocationBasedRecommendedActionSessionsOperationStatusInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public LocationBasedRecommendedActionSessionsOperationStatusInner(Retrofit retrofit, MySQLManagementClientImpl client) {
        this.service = retrofit.create(LocationBasedRecommendedActionSessionsOperationStatusService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for LocationBasedRecommendedActionSessionsOperationStatus to be
     * used by Retrofit to perform actually REST calls.
     */
    interface LocationBasedRecommendedActionSessionsOperationStatusService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.mysql.v2020_01_01.LocationBasedRecommendedActionSessionsOperationStatus get" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.DBforMySQL/locations/{locationName}/recommendedActionSessionsAzureAsyncOperation/{operationId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("locationName") String locationName, @Path("operationId") String operationId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Recommendation action session operation status.
     *
     * @param locationName The name of the location.
     * @param operationId The operation identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RecommendedActionSessionsOperationStatusInner object if successful.
     */
    public RecommendedActionSessionsOperationStatusInner get(String locationName, String operationId) {
        return getWithServiceResponseAsync(locationName, operationId).toBlocking().single().body();
    }

    /**
     * Recommendation action session operation status.
     *
     * @param locationName The name of the location.
     * @param operationId The operation identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RecommendedActionSessionsOperationStatusInner> getAsync(String locationName, String operationId, final ServiceCallback<RecommendedActionSessionsOperationStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(locationName, operationId), serviceCallback);
    }

    /**
     * Recommendation action session operation status.
     *
     * @param locationName The name of the location.
     * @param operationId The operation identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecommendedActionSessionsOperationStatusInner object
     */
    public Observable<RecommendedActionSessionsOperationStatusInner> getAsync(String locationName, String operationId) {
        return getWithServiceResponseAsync(locationName, operationId).map(new Func1<ServiceResponse<RecommendedActionSessionsOperationStatusInner>, RecommendedActionSessionsOperationStatusInner>() {
            @Override
            public RecommendedActionSessionsOperationStatusInner call(ServiceResponse<RecommendedActionSessionsOperationStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Recommendation action session operation status.
     *
     * @param locationName The name of the location.
     * @param operationId The operation identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RecommendedActionSessionsOperationStatusInner object
     */
    public Observable<ServiceResponse<RecommendedActionSessionsOperationStatusInner>> getWithServiceResponseAsync(String locationName, String operationId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.get(this.client.subscriptionId(), locationName, operationId, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecommendedActionSessionsOperationStatusInner>>>() {
                @Override
                public Observable<ServiceResponse<RecommendedActionSessionsOperationStatusInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecommendedActionSessionsOperationStatusInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecommendedActionSessionsOperationStatusInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RecommendedActionSessionsOperationStatusInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RecommendedActionSessionsOperationStatusInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
