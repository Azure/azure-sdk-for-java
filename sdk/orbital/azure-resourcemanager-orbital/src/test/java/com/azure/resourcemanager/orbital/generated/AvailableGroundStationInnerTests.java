// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.orbital.fluent.models.AvailableGroundStationInner;
import com.azure.resourcemanager.orbital.models.ReleaseMode;
import org.junit.jupiter.api.Assertions;

public final class AvailableGroundStationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailableGroundStationInner model = BinaryData.fromString(
            "{\"id\":\"szufoxciqopidoa\",\"name\":\"iodhkhazxkhnz\",\"location\":\"nlwntoe\",\"type\":\"kdwbwhkszz\",\"properties\":{\"city\":\"rvexztvb\",\"providerName\":\"gsfraoyzkoow\",\"longitudeDegrees\":83.122345,\"latitudeDegrees\":88.73386,\"altitudeMeters\":85.48055,\"releaseMode\":\"Preview\"}}")
            .toObject(AvailableGroundStationInner.class);
        Assertions.assertEquals("nlwntoe", model.location());
        Assertions.assertEquals("rvexztvb", model.city());
        Assertions.assertEquals("gsfraoyzkoow", model.providerName());
        Assertions.assertEquals(83.122345F, model.longitudeDegrees());
        Assertions.assertEquals(88.73386F, model.latitudeDegrees());
        Assertions.assertEquals(85.48055F, model.altitudeMeters());
        Assertions.assertEquals(ReleaseMode.PREVIEW, model.releaseMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailableGroundStationInner model = new AvailableGroundStationInner().withLocation("nlwntoe")
            .withCity("rvexztvb")
            .withProviderName("gsfraoyzkoow")
            .withLongitudeDegrees(83.122345F)
            .withLatitudeDegrees(88.73386F)
            .withAltitudeMeters(85.48055F)
            .withReleaseMode(ReleaseMode.PREVIEW);
        model = BinaryData.fromObject(model).toObject(AvailableGroundStationInner.class);
        Assertions.assertEquals("nlwntoe", model.location());
        Assertions.assertEquals("rvexztvb", model.city());
        Assertions.assertEquals("gsfraoyzkoow", model.providerName());
        Assertions.assertEquals(83.122345F, model.longitudeDegrees());
        Assertions.assertEquals(88.73386F, model.latitudeDegrees());
        Assertions.assertEquals(85.48055F, model.altitudeMeters());
        Assertions.assertEquals(ReleaseMode.PREVIEW, model.releaseMode());
    }
}
