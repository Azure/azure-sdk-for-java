// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.orbital.models.ContactProfileLinkChannel;
import com.azure.resourcemanager.orbital.models.EndPoint;
import com.azure.resourcemanager.orbital.models.Protocol;
import org.junit.jupiter.api.Assertions;

public final class ContactProfileLinkChannelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContactProfileLinkChannel model = BinaryData.fromString(
            "{\"name\":\"ivetvtcq\",\"centerFrequencyMHz\":21.629738,\"bandwidthMHz\":17.011059,\"endPoint\":{\"ipAddress\":\"doqmcbxvwvxys\",\"endPointName\":\"qbhsfxobl\",\"port\":\"tkblmpewww\",\"protocol\":\"UDP\"},\"modulationConfiguration\":\"rvrnsvshqjohxc\",\"demodulationConfiguration\":\"bfovasrruvwbhsq\",\"encodingConfiguration\":\"ubcgjbirxb\",\"decodingConfiguration\":\"bsrfbj\"}")
            .toObject(ContactProfileLinkChannel.class);
        Assertions.assertEquals("ivetvtcq", model.name());
        Assertions.assertEquals(21.629738f, model.centerFrequencyMHz());
        Assertions.assertEquals(17.011059f, model.bandwidthMHz());
        Assertions.assertEquals("doqmcbxvwvxys", model.endPoint().ipAddress());
        Assertions.assertEquals("qbhsfxobl", model.endPoint().endPointName());
        Assertions.assertEquals("tkblmpewww", model.endPoint().port());
        Assertions.assertEquals(Protocol.UDP, model.endPoint().protocol());
        Assertions.assertEquals("rvrnsvshqjohxc", model.modulationConfiguration());
        Assertions.assertEquals("bfovasrruvwbhsq", model.demodulationConfiguration());
        Assertions.assertEquals("ubcgjbirxb", model.encodingConfiguration());
        Assertions.assertEquals("bsrfbj", model.decodingConfiguration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContactProfileLinkChannel model = new ContactProfileLinkChannel().withName("ivetvtcq")
            .withCenterFrequencyMHz(21.629738f)
            .withBandwidthMHz(17.011059f)
            .withEndPoint(new EndPoint().withIpAddress("doqmcbxvwvxys")
                .withEndPointName("qbhsfxobl")
                .withPort("tkblmpewww")
                .withProtocol(Protocol.UDP))
            .withModulationConfiguration("rvrnsvshqjohxc")
            .withDemodulationConfiguration("bfovasrruvwbhsq")
            .withEncodingConfiguration("ubcgjbirxb")
            .withDecodingConfiguration("bsrfbj");
        model = BinaryData.fromObject(model).toObject(ContactProfileLinkChannel.class);
        Assertions.assertEquals("ivetvtcq", model.name());
        Assertions.assertEquals(21.629738f, model.centerFrequencyMHz());
        Assertions.assertEquals(17.011059f, model.bandwidthMHz());
        Assertions.assertEquals("doqmcbxvwvxys", model.endPoint().ipAddress());
        Assertions.assertEquals("qbhsfxobl", model.endPoint().endPointName());
        Assertions.assertEquals("tkblmpewww", model.endPoint().port());
        Assertions.assertEquals(Protocol.UDP, model.endPoint().protocol());
        Assertions.assertEquals("rvrnsvshqjohxc", model.modulationConfiguration());
        Assertions.assertEquals("bfovasrruvwbhsq", model.demodulationConfiguration());
        Assertions.assertEquals("ubcgjbirxb", model.encodingConfiguration());
        Assertions.assertEquals("bsrfbj", model.decodingConfiguration());
    }
}
