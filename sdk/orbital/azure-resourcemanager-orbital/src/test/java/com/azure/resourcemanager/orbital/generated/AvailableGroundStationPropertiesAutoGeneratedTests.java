// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.orbital.models.AvailableGroundStationPropertiesAutoGenerated;
import com.azure.resourcemanager.orbital.models.ReleaseMode;
import org.junit.jupiter.api.Assertions;

public final class AvailableGroundStationPropertiesAutoGeneratedTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AvailableGroundStationPropertiesAutoGenerated model = BinaryData.fromString(
            "{\"city\":\"a\",\"providerName\":\"hrskdsnfd\",\"longitudeDegrees\":76.520065,\"latitudeDegrees\":58.32351,\"altitudeMeters\":61.956436,\"releaseMode\":\"Preview\"}")
            .toObject(AvailableGroundStationPropertiesAutoGenerated.class);
        Assertions.assertEquals("a", model.city());
        Assertions.assertEquals("hrskdsnfd", model.providerName());
        Assertions.assertEquals(76.520065F, model.longitudeDegrees());
        Assertions.assertEquals(58.32351F, model.latitudeDegrees());
        Assertions.assertEquals(61.956436F, model.altitudeMeters());
        Assertions.assertEquals(ReleaseMode.PREVIEW, model.releaseMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AvailableGroundStationPropertiesAutoGenerated model
            = new AvailableGroundStationPropertiesAutoGenerated().withCity("a")
                .withProviderName("hrskdsnfd")
                .withLongitudeDegrees(76.520065F)
                .withLatitudeDegrees(58.32351F)
                .withAltitudeMeters(61.956436F)
                .withReleaseMode(ReleaseMode.PREVIEW);
        model = BinaryData.fromObject(model).toObject(AvailableGroundStationPropertiesAutoGenerated.class);
        Assertions.assertEquals("a", model.city());
        Assertions.assertEquals("hrskdsnfd", model.providerName());
        Assertions.assertEquals(76.520065F, model.longitudeDegrees());
        Assertions.assertEquals(58.32351F, model.latitudeDegrees());
        Assertions.assertEquals(61.956436F, model.altitudeMeters());
        Assertions.assertEquals(ReleaseMode.PREVIEW, model.releaseMode());
    }
}
