// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.orbital.OrbitalManager;
import com.azure.resourcemanager.orbital.models.AutoTrackingConfiguration;
import com.azure.resourcemanager.orbital.models.ContactProfile;
import com.azure.resourcemanager.orbital.models.ContactProfilesPropertiesNetworkConfiguration;
import com.azure.resourcemanager.orbital.models.ContactProfilesPropertiesProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ContactProfilesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"minimumViableContactDuration\":\"ocmbqfqvmkcxoza\",\"minimumElevationDegrees\":56.86097,\"autoTrackingConfiguration\":\"disabled\",\"eventHubUri\":\"prglya\",\"networkConfiguration\":{\"subnetId\":\"dd\"},\"thirdPartyConfigurations\":[],\"links\":[]},\"location\":\"uejrjxgc\",\"tags\":{\"sxsdqrhzoymibm\":\"brh\",\"hwflu\":\"qyib\",\"voqacpiexpbt\":\"zdtmhrkwofy\"},\"id\":\"iwbwoenwashrtdtk\",\"name\":\"nqxwbp\",\"type\":\"kulpiujwaasi\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        OrbitalManager manager =
            OrbitalManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ContactProfile response =
            manager
                .contactProfiles()
                .define("mgxcxrslpm")
                .withRegion("modfvuefywsbpfvm")
                .withExistingResourceGroup("ld")
                .withNetworkConfiguration(
                    new ContactProfilesPropertiesNetworkConfiguration().withSubnetId("pdggkzzlvm"))
                .withLinks(Arrays.asList())
                .withTags(mapOf("yzvqt", "rfouyftaakcpw", "zksmondj", "nubexk"))
                .withProvisioningState(ContactProfilesPropertiesProvisioningState.DELETING)
                .withMinimumViableContactDuration("oegrpkhjwn")
                .withMinimumElevationDegrees(38.208916F)
                .withAutoTrackingConfiguration(AutoTrackingConfiguration.S_BAND)
                .withEventHubUri("i")
                .withThirdPartyConfigurations(Arrays.asList())
                .create();

        Assertions.assertEquals("uejrjxgc", response.location());
        Assertions.assertEquals("brh", response.tags().get("sxsdqrhzoymibm"));
        Assertions
            .assertEquals(
                ContactProfilesPropertiesProvisioningState.fromString("Succeeded"), response.provisioningState());
        Assertions.assertEquals("ocmbqfqvmkcxoza", response.minimumViableContactDuration());
        Assertions.assertEquals(56.86097F, response.minimumElevationDegrees());
        Assertions.assertEquals(AutoTrackingConfiguration.DISABLED, response.autoTrackingConfiguration());
        Assertions.assertEquals("prglya", response.eventHubUri());
        Assertions.assertEquals("dd", response.networkConfiguration().subnetId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
