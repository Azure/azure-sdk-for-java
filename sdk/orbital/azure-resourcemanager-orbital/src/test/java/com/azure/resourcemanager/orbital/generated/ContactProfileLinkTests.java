// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.orbital.models.ContactProfileLink;
import com.azure.resourcemanager.orbital.models.ContactProfileLinkChannel;
import com.azure.resourcemanager.orbital.models.Direction;
import com.azure.resourcemanager.orbital.models.EndPoint;
import com.azure.resourcemanager.orbital.models.Polarization;
import com.azure.resourcemanager.orbital.models.Protocol;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ContactProfileLinkTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContactProfileLink model = BinaryData.fromString(
            "{\"name\":\"qrhhu\",\"polarization\":\"LHCP\",\"direction\":\"Downlink\",\"gainOverTemperature\":36.1724,\"eirpdBW\":30.051893,\"channels\":[{\"name\":\"qxolzdahzx\",\"centerFrequencyMHz\":5.8805466,\"bandwidthMHz\":68.45818,\"endPoint\":{\"ipAddress\":\"bgbkdmoizpost\",\"endPointName\":\"grcfb\",\"port\":\"nrmfqjhhk\",\"protocol\":\"UDP\"},\"modulationConfiguration\":\"vjymjhxxjyngud\",\"demodulationConfiguration\":\"krtswbxqz\",\"encodingConfiguration\":\"zjf\",\"decodingConfiguration\":\"vjfdx\"}]}")
            .toObject(ContactProfileLink.class);
        Assertions.assertEquals("qrhhu", model.name());
        Assertions.assertEquals(Polarization.LHCP, model.polarization());
        Assertions.assertEquals(Direction.DOWNLINK, model.direction());
        Assertions.assertEquals(36.1724F, model.gainOverTemperature());
        Assertions.assertEquals(30.051893F, model.eirpdBW());
        Assertions.assertEquals("qxolzdahzx", model.channels().get(0).name());
        Assertions.assertEquals(5.8805466f, model.channels().get(0).centerFrequencyMHz());
        Assertions.assertEquals(68.45818f, model.channels().get(0).bandwidthMHz());
        Assertions.assertEquals("bgbkdmoizpost", model.channels().get(0).endPoint().ipAddress());
        Assertions.assertEquals("grcfb", model.channels().get(0).endPoint().endPointName());
        Assertions.assertEquals("nrmfqjhhk", model.channels().get(0).endPoint().port());
        Assertions.assertEquals(Protocol.UDP, model.channels().get(0).endPoint().protocol());
        Assertions.assertEquals("vjymjhxxjyngud", model.channels().get(0).modulationConfiguration());
        Assertions.assertEquals("krtswbxqz", model.channels().get(0).demodulationConfiguration());
        Assertions.assertEquals("zjf", model.channels().get(0).encodingConfiguration());
        Assertions.assertEquals("vjfdx", model.channels().get(0).decodingConfiguration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContactProfileLink model = new ContactProfileLink().withName("qrhhu")
            .withPolarization(Polarization.LHCP)
            .withDirection(Direction.DOWNLINK)
            .withGainOverTemperature(36.1724F)
            .withEirpdBW(30.051893F)
            .withChannels(Arrays.asList(new ContactProfileLinkChannel().withName("qxolzdahzx")
                .withCenterFrequencyMHz(5.8805466f)
                .withBandwidthMHz(68.45818f)
                .withEndPoint(new EndPoint().withIpAddress("bgbkdmoizpost")
                    .withEndPointName("grcfb")
                    .withPort("nrmfqjhhk")
                    .withProtocol(Protocol.UDP))
                .withModulationConfiguration("vjymjhxxjyngud")
                .withDemodulationConfiguration("krtswbxqz")
                .withEncodingConfiguration("zjf")
                .withDecodingConfiguration("vjfdx")));
        model = BinaryData.fromObject(model).toObject(ContactProfileLink.class);
        Assertions.assertEquals("qrhhu", model.name());
        Assertions.assertEquals(Polarization.LHCP, model.polarization());
        Assertions.assertEquals(Direction.DOWNLINK, model.direction());
        Assertions.assertEquals(36.1724F, model.gainOverTemperature());
        Assertions.assertEquals(30.051893F, model.eirpdBW());
        Assertions.assertEquals("qxolzdahzx", model.channels().get(0).name());
        Assertions.assertEquals(5.8805466f, model.channels().get(0).centerFrequencyMHz());
        Assertions.assertEquals(68.45818f, model.channels().get(0).bandwidthMHz());
        Assertions.assertEquals("bgbkdmoizpost", model.channels().get(0).endPoint().ipAddress());
        Assertions.assertEquals("grcfb", model.channels().get(0).endPoint().endPointName());
        Assertions.assertEquals("nrmfqjhhk", model.channels().get(0).endPoint().port());
        Assertions.assertEquals(Protocol.UDP, model.channels().get(0).endPoint().protocol());
        Assertions.assertEquals("vjymjhxxjyngud", model.channels().get(0).modulationConfiguration());
        Assertions.assertEquals("krtswbxqz", model.channels().get(0).demodulationConfiguration());
        Assertions.assertEquals("zjf", model.channels().get(0).encodingConfiguration());
        Assertions.assertEquals("vjfdx", model.channels().get(0).decodingConfiguration());
    }
}
