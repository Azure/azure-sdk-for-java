// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.orbital.OrbitalManager;
import com.azure.resourcemanager.orbital.models.AvailableGroundStation;
import com.azure.resourcemanager.orbital.models.CapabilityParameter;
import com.azure.resourcemanager.orbital.models.ReleaseMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvailableGroundStationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"id\":\"sdzhezww\",\"name\":\"iqyuvvfo\",\"location\":\"p\",\"type\":\"qyikvy\",\"properties\":{\"city\":\"uyav\",\"providerName\":\"wmn\",\"longitudeDegrees\":81.981476,\"latitudeDegrees\":17.136473,\"altitudeMeters\":49.36264,\"releaseMode\":\"GA\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OrbitalManager manager = OrbitalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AvailableGroundStation> response = manager.availableGroundStations()
            .list(CapabilityParameter.EARTH_OBSERVATION, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("p", response.iterator().next().location());
        Assertions.assertEquals("uyav", response.iterator().next().city());
        Assertions.assertEquals("wmn", response.iterator().next().providerName());
        Assertions.assertEquals(81.981476F, response.iterator().next().longitudeDegrees());
        Assertions.assertEquals(17.136473F, response.iterator().next().latitudeDegrees());
        Assertions.assertEquals(49.36264F, response.iterator().next().altitudeMeters());
        Assertions.assertEquals(ReleaseMode.GA, response.iterator().next().releaseMode());
    }
}
