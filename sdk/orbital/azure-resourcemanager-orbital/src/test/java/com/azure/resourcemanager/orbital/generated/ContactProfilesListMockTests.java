// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.orbital.OrbitalManager;
import com.azure.resourcemanager.orbital.models.AutoTrackingConfiguration;
import com.azure.resourcemanager.orbital.models.ContactProfile;
import com.azure.resourcemanager.orbital.models.ContactProfilesPropertiesProvisioningState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ContactProfilesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"provisioningState\":\"canceled\",\"minimumViableContactDuration\":\"mhhv\",\"minimumElevationDegrees\":7.3786316,\"autoTrackingConfiguration\":\"xBand\",\"eventHubUri\":\"dkwobdagx\",\"networkConfiguration\":{\"subnetId\":\"ibqdxbxwakbogqx\"},\"thirdPartyConfigurations\":[],\"links\":[]},\"location\":\"gxhuriplbp\",\"tags\":{\"ubyyntw\":\"unkbebx\",\"seotgqrllt\":\"rbqtkoie\",\"lauwzizxbmpgcjef\":\"u\",\"bmnzbtbhjpgl\":\"zmuvpbttdumorppx\"},\"id\":\"fgohdneuelfphs\",\"name\":\"yhtozfikdowwqu\",\"type\":\"v\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        OrbitalManager manager =
            OrbitalManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ContactProfile> response =
            manager.contactProfiles().list("nsikvmkqzeqqkdl", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gxhuriplbp", response.iterator().next().location());
        Assertions.assertEquals("unkbebx", response.iterator().next().tags().get("ubyyntw"));
        Assertions
            .assertEquals(
                ContactProfilesPropertiesProvisioningState.CANCELED, response.iterator().next().provisioningState());
        Assertions.assertEquals("mhhv", response.iterator().next().minimumViableContactDuration());
        Assertions.assertEquals(7.3786316F, response.iterator().next().minimumElevationDegrees());
        Assertions
            .assertEquals(AutoTrackingConfiguration.X_BAND, response.iterator().next().autoTrackingConfiguration());
        Assertions.assertEquals("dkwobdagx", response.iterator().next().eventHubUri());
        Assertions.assertEquals("ibqdxbxwakbogqx", response.iterator().next().networkConfiguration().subnetId());
    }
}
