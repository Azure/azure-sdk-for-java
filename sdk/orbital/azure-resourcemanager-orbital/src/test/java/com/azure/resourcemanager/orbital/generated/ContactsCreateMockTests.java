// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.orbital.OrbitalManager;
import com.azure.resourcemanager.orbital.models.Contact;
import com.azure.resourcemanager.orbital.models.ContactsPropertiesContactProfile;
import com.azure.resourcemanager.orbital.models.ContactsPropertiesProvisioningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ContactsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"status\":\"providerCancelled\",\"reservationStartTime\":\"2021-08-15T03:14:49Z\",\"reservationEndTime\":\"2021-03-19T20:32:18Z\",\"rxStartTime\":\"2021-09-25T01:08:15Z\",\"rxEndTime\":\"2021-11-19T19:11:53Z\",\"txStartTime\":\"2021-01-24T00:59:15Z\",\"txEndTime\":\"2021-01-08T01:19:04Z\",\"errorMessage\":\"gbmhrixkwmyi\",\"maximumElevationDegrees\":98.3043,\"startAzimuthDegrees\":75.6699,\"endAzimuthDegrees\":12.116205,\"groundStationName\":\"hbpnaixexccbd\",\"startElevationDegrees\":7.074279,\"endElevationDegrees\":59.16115,\"antennaConfiguration\":{\"destinationIp\":\"xdrrvqahqkghtp\",\"sourceIps\":[\"nhyjsv\",\"ycxzbfvoo\"]},\"contactProfile\":{\"id\":\"vrvmtgjqppyost\"}},\"id\":\"nzm\",\"name\":\"hgfipnsxkmcw\",\"type\":\"ekrrjr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        OrbitalManager manager = OrbitalManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Contact response = manager.contacts()
            .define("htjsying")
            .withExistingSpacecraft("wccsnjvcdwxlpqek", "tn")
            .withReservationStartTime(OffsetDateTime.parse("2021-04-16T00:09:41Z"))
            .withReservationEndTime(OffsetDateTime.parse("2021-08-15T22:02:46Z"))
            .withGroundStationName("kj")
            .withContactProfile(new ContactsPropertiesContactProfile().withId("tkkgllqwjy"))
            .withProvisioningState(ContactsPropertiesProvisioningState.DELETING)
            .create();

        Assertions.assertEquals(ContactsPropertiesProvisioningState.fromString("Succeeded"),
            response.provisioningState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T03:14:49Z"), response.reservationStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-19T20:32:18Z"), response.reservationEndTime());
        Assertions.assertEquals("hbpnaixexccbd", response.groundStationName());
        Assertions.assertEquals("vrvmtgjqppyost", response.contactProfile().id());
    }
}
