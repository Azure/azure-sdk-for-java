// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Contact Profile link. */
@Fluent
public final class ContactProfileLink {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContactProfileLink.class);

    /*
     * polarization. eg (RHCP, LHCP)
     */
    @JsonProperty(value = "polarization", required = true)
    private Polarization polarization;

    /*
     * Direction (uplink or downlink)
     */
    @JsonProperty(value = "direction", required = true)
    private Direction direction;

    /*
     * Gain To Noise Temperature in db/K.
     */
    @JsonProperty(value = "gainOverTemperature")
    private Float gainOverTemperature;

    /*
     * Effective Isotropic Radiated Power (EIRP) in dBW.
     */
    @JsonProperty(value = "eirpdBW")
    private Float eirpdBW;

    /*
     * Contact Profile Link Channel
     */
    @JsonProperty(value = "channels", required = true)
    private List<ContactProfileLinkChannel> channels;

    /**
     * Get the polarization property: polarization. eg (RHCP, LHCP).
     *
     * @return the polarization value.
     */
    public Polarization polarization() {
        return this.polarization;
    }

    /**
     * Set the polarization property: polarization. eg (RHCP, LHCP).
     *
     * @param polarization the polarization value to set.
     * @return the ContactProfileLink object itself.
     */
    public ContactProfileLink withPolarization(Polarization polarization) {
        this.polarization = polarization;
        return this;
    }

    /**
     * Get the direction property: Direction (uplink or downlink).
     *
     * @return the direction value.
     */
    public Direction direction() {
        return this.direction;
    }

    /**
     * Set the direction property: Direction (uplink or downlink).
     *
     * @param direction the direction value to set.
     * @return the ContactProfileLink object itself.
     */
    public ContactProfileLink withDirection(Direction direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the gainOverTemperature property: Gain To Noise Temperature in db/K.
     *
     * @return the gainOverTemperature value.
     */
    public Float gainOverTemperature() {
        return this.gainOverTemperature;
    }

    /**
     * Set the gainOverTemperature property: Gain To Noise Temperature in db/K.
     *
     * @param gainOverTemperature the gainOverTemperature value to set.
     * @return the ContactProfileLink object itself.
     */
    public ContactProfileLink withGainOverTemperature(Float gainOverTemperature) {
        this.gainOverTemperature = gainOverTemperature;
        return this;
    }

    /**
     * Get the eirpdBW property: Effective Isotropic Radiated Power (EIRP) in dBW.
     *
     * @return the eirpdBW value.
     */
    public Float eirpdBW() {
        return this.eirpdBW;
    }

    /**
     * Set the eirpdBW property: Effective Isotropic Radiated Power (EIRP) in dBW.
     *
     * @param eirpdBW the eirpdBW value to set.
     * @return the ContactProfileLink object itself.
     */
    public ContactProfileLink withEirpdBW(Float eirpdBW) {
        this.eirpdBW = eirpdBW;
        return this;
    }

    /**
     * Get the channels property: Contact Profile Link Channel.
     *
     * @return the channels value.
     */
    public List<ContactProfileLinkChannel> channels() {
        return this.channels;
    }

    /**
     * Set the channels property: Contact Profile Link Channel.
     *
     * @param channels the channels value to set.
     * @return the ContactProfileLink object itself.
     */
    public ContactProfileLink withChannels(List<ContactProfileLinkChannel> channels) {
        this.channels = channels;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (polarization() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property polarization in model ContactProfileLink"));
        }
        if (direction() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property direction in model ContactProfileLink"));
        }
        if (channels() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property channels in model ContactProfileLink"));
        } else {
            channels().forEach(e -> e.validate());
        }
    }
}
