// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contact Profile third-party partner configuration.
 */
@Fluent
public final class ContactProfileThirdPartyConfiguration
    implements JsonSerializable<ContactProfileThirdPartyConfiguration> {
    /*
     * Name of the third-party provider.
     */
    private String providerName;

    /*
     * Name of string referencing the configuration describing contact set-up for a particular mission. Expected values
     * are those which have been created in collaboration with the partner network.
     */
    private String missionConfiguration;

    /**
     * Creates an instance of ContactProfileThirdPartyConfiguration class.
     */
    public ContactProfileThirdPartyConfiguration() {
    }

    /**
     * Get the providerName property: Name of the third-party provider.
     * 
     * @return the providerName value.
     */
    public String providerName() {
        return this.providerName;
    }

    /**
     * Set the providerName property: Name of the third-party provider.
     * 
     * @param providerName the providerName value to set.
     * @return the ContactProfileThirdPartyConfiguration object itself.
     */
    public ContactProfileThirdPartyConfiguration withProviderName(String providerName) {
        this.providerName = providerName;
        return this;
    }

    /**
     * Get the missionConfiguration property: Name of string referencing the configuration describing contact set-up for
     * a particular mission. Expected values are those which have been created in collaboration with the partner
     * network.
     * 
     * @return the missionConfiguration value.
     */
    public String missionConfiguration() {
        return this.missionConfiguration;
    }

    /**
     * Set the missionConfiguration property: Name of string referencing the configuration describing contact set-up for
     * a particular mission. Expected values are those which have been created in collaboration with the partner
     * network.
     * 
     * @param missionConfiguration the missionConfiguration value to set.
     * @return the ContactProfileThirdPartyConfiguration object itself.
     */
    public ContactProfileThirdPartyConfiguration withMissionConfiguration(String missionConfiguration) {
        this.missionConfiguration = missionConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (providerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property providerName in model ContactProfileThirdPartyConfiguration"));
        }
        if (missionConfiguration() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property missionConfiguration in model ContactProfileThirdPartyConfiguration"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContactProfileThirdPartyConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("providerName", this.providerName);
        jsonWriter.writeStringField("missionConfiguration", this.missionConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContactProfileThirdPartyConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContactProfileThirdPartyConfiguration if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContactProfileThirdPartyConfiguration.
     */
    public static ContactProfileThirdPartyConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContactProfileThirdPartyConfiguration deserializedContactProfileThirdPartyConfiguration
                = new ContactProfileThirdPartyConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("providerName".equals(fieldName)) {
                    deserializedContactProfileThirdPartyConfiguration.providerName = reader.getString();
                } else if ("missionConfiguration".equals(fieldName)) {
                    deserializedContactProfileThirdPartyConfiguration.missionConfiguration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContactProfileThirdPartyConfiguration;
        });
    }
}
