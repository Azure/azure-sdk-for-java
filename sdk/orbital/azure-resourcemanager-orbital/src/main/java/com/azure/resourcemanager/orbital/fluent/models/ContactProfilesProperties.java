// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.orbital.models.AutoTrackingConfiguration;
import com.azure.resourcemanager.orbital.models.ContactProfileLink;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** List of Contact Profile Resource Properties. */
@Fluent
public final class ContactProfilesProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContactProfilesProperties.class);

    /*
     * Minimum viable contact duration in ISO 8601 format.
     */
    @JsonProperty(value = "minimumViableContactDuration")
    private String minimumViableContactDuration;

    /*
     * Minimum viable elevation for the contact in decimal degrees.
     */
    @JsonProperty(value = "minimumElevationDegrees")
    private Float minimumElevationDegrees;

    /*
     * Auto track configuration.
     */
    @JsonProperty(value = "autoTrackingConfiguration")
    private AutoTrackingConfiguration autoTrackingConfiguration;

    /*
     * Links of the Contact Profile
     */
    @JsonProperty(value = "links", required = true)
    private List<ContactProfileLink> links;

    /**
     * Get the minimumViableContactDuration property: Minimum viable contact duration in ISO 8601 format.
     *
     * @return the minimumViableContactDuration value.
     */
    public String minimumViableContactDuration() {
        return this.minimumViableContactDuration;
    }

    /**
     * Set the minimumViableContactDuration property: Minimum viable contact duration in ISO 8601 format.
     *
     * @param minimumViableContactDuration the minimumViableContactDuration value to set.
     * @return the ContactProfilesProperties object itself.
     */
    public ContactProfilesProperties withMinimumViableContactDuration(String minimumViableContactDuration) {
        this.minimumViableContactDuration = minimumViableContactDuration;
        return this;
    }

    /**
     * Get the minimumElevationDegrees property: Minimum viable elevation for the contact in decimal degrees.
     *
     * @return the minimumElevationDegrees value.
     */
    public Float minimumElevationDegrees() {
        return this.minimumElevationDegrees;
    }

    /**
     * Set the minimumElevationDegrees property: Minimum viable elevation for the contact in decimal degrees.
     *
     * @param minimumElevationDegrees the minimumElevationDegrees value to set.
     * @return the ContactProfilesProperties object itself.
     */
    public ContactProfilesProperties withMinimumElevationDegrees(Float minimumElevationDegrees) {
        this.minimumElevationDegrees = minimumElevationDegrees;
        return this;
    }

    /**
     * Get the autoTrackingConfiguration property: Auto track configuration.
     *
     * @return the autoTrackingConfiguration value.
     */
    public AutoTrackingConfiguration autoTrackingConfiguration() {
        return this.autoTrackingConfiguration;
    }

    /**
     * Set the autoTrackingConfiguration property: Auto track configuration.
     *
     * @param autoTrackingConfiguration the autoTrackingConfiguration value to set.
     * @return the ContactProfilesProperties object itself.
     */
    public ContactProfilesProperties withAutoTrackingConfiguration(
        AutoTrackingConfiguration autoTrackingConfiguration) {
        this.autoTrackingConfiguration = autoTrackingConfiguration;
        return this;
    }

    /**
     * Get the links property: Links of the Contact Profile.
     *
     * @return the links value.
     */
    public List<ContactProfileLink> links() {
        return this.links;
    }

    /**
     * Set the links property: Links of the Contact Profile.
     *
     * @param links the links value to set.
     * @return the ContactProfilesProperties object itself.
     */
    public ContactProfilesProperties withLinks(List<ContactProfileLink> links) {
        this.links = links;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property links in model ContactProfilesProperties"));
        } else {
            links().forEach(e -> e.validate());
        }
    }
}
