// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Contact Profile Link Channel.
 */
@Fluent
public final class ContactProfileLinkChannel implements JsonSerializable<ContactProfileLinkChannel> {
    /*
     * Channel name.
     */
    private String name;

    /*
     * Center Frequency in MHz.
     */
    private float centerFrequencyMHz;

    /*
     * Bandwidth in MHz.
     */
    private float bandwidthMHz;

    /*
     * Customer end point to store and retrieve data during a contact with the spacecraft.
     */
    private EndPoint endPoint;

    /*
     * Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the
     * modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.
     */
    private String modulationConfiguration;

    /*
     * Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink
     * directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a
     * VITA.49 stream.
     */
    private String demodulationConfiguration;

    /*
     * Currently unused.
     */
    private String encodingConfiguration;

    /*
     * Currently unused.
     */
    private String decodingConfiguration;

    /**
     * Creates an instance of ContactProfileLinkChannel class.
     */
    public ContactProfileLinkChannel() {
    }

    /**
     * Get the name property: Channel name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Channel name.
     * 
     * @param name the name value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the centerFrequencyMHz property: Center Frequency in MHz.
     * 
     * @return the centerFrequencyMHz value.
     */
    public float centerFrequencyMHz() {
        return this.centerFrequencyMHz;
    }

    /**
     * Set the centerFrequencyMHz property: Center Frequency in MHz.
     * 
     * @param centerFrequencyMHz the centerFrequencyMHz value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withCenterFrequencyMHz(float centerFrequencyMHz) {
        this.centerFrequencyMHz = centerFrequencyMHz;
        return this;
    }

    /**
     * Get the bandwidthMHz property: Bandwidth in MHz.
     * 
     * @return the bandwidthMHz value.
     */
    public float bandwidthMHz() {
        return this.bandwidthMHz;
    }

    /**
     * Set the bandwidthMHz property: Bandwidth in MHz.
     * 
     * @param bandwidthMHz the bandwidthMHz value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withBandwidthMHz(float bandwidthMHz) {
        this.bandwidthMHz = bandwidthMHz;
        return this;
    }

    /**
     * Get the endPoint property: Customer end point to store and retrieve data during a contact with the spacecraft.
     * 
     * @return the endPoint value.
     */
    public EndPoint endPoint() {
        return this.endPoint;
    }

    /**
     * Set the endPoint property: Customer end point to store and retrieve data during a contact with the spacecraft.
     * 
     * @param endPoint the endPoint value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withEndPoint(EndPoint endPoint) {
        this.endPoint = endPoint;
        return this;
    }

    /**
     * Get the modulationConfiguration property: Copy of the modem configuration file such as Kratos QRadio. Only valid
     * for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the
     * customer instead of a VITA.49 stream.
     * 
     * @return the modulationConfiguration value.
     */
    public String modulationConfiguration() {
        return this.modulationConfiguration;
    }

    /**
     * Set the modulationConfiguration property: Copy of the modem configuration file such as Kratos QRadio. Only valid
     * for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the
     * customer instead of a VITA.49 stream.
     * 
     * @param modulationConfiguration the modulationConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withModulationConfiguration(String modulationConfiguration) {
        this.modulationConfiguration = modulationConfiguration;
        return this;
    }

    /**
     * Get the demodulationConfiguration property: Copy of the modem configuration file such as Kratos QRadio or Kratos
     * QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends
     * demodulated data instead of a VITA.49 stream.
     * 
     * @return the demodulationConfiguration value.
     */
    public String demodulationConfiguration() {
        return this.demodulationConfiguration;
    }

    /**
     * Set the demodulationConfiguration property: Copy of the modem configuration file such as Kratos QRadio or Kratos
     * QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends
     * demodulated data instead of a VITA.49 stream.
     * 
     * @param demodulationConfiguration the demodulationConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withDemodulationConfiguration(String demodulationConfiguration) {
        this.demodulationConfiguration = demodulationConfiguration;
        return this;
    }

    /**
     * Get the encodingConfiguration property: Currently unused.
     * 
     * @return the encodingConfiguration value.
     */
    public String encodingConfiguration() {
        return this.encodingConfiguration;
    }

    /**
     * Set the encodingConfiguration property: Currently unused.
     * 
     * @param encodingConfiguration the encodingConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withEncodingConfiguration(String encodingConfiguration) {
        this.encodingConfiguration = encodingConfiguration;
        return this;
    }

    /**
     * Get the decodingConfiguration property: Currently unused.
     * 
     * @return the decodingConfiguration value.
     */
    public String decodingConfiguration() {
        return this.decodingConfiguration;
    }

    /**
     * Set the decodingConfiguration property: Currently unused.
     * 
     * @param decodingConfiguration the decodingConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withDecodingConfiguration(String decodingConfiguration) {
        this.decodingConfiguration = decodingConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ContactProfileLinkChannel"));
        }
        if (endPoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endPoint in model ContactProfileLinkChannel"));
        } else {
            endPoint().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ContactProfileLinkChannel.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeFloatField("centerFrequencyMHz", this.centerFrequencyMHz);
        jsonWriter.writeFloatField("bandwidthMHz", this.bandwidthMHz);
        jsonWriter.writeJsonField("endPoint", this.endPoint);
        jsonWriter.writeStringField("modulationConfiguration", this.modulationConfiguration);
        jsonWriter.writeStringField("demodulationConfiguration", this.demodulationConfiguration);
        jsonWriter.writeStringField("encodingConfiguration", this.encodingConfiguration);
        jsonWriter.writeStringField("decodingConfiguration", this.decodingConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContactProfileLinkChannel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContactProfileLinkChannel if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContactProfileLinkChannel.
     */
    public static ContactProfileLinkChannel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContactProfileLinkChannel deserializedContactProfileLinkChannel = new ContactProfileLinkChannel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.name = reader.getString();
                } else if ("centerFrequencyMHz".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.centerFrequencyMHz = reader.getFloat();
                } else if ("bandwidthMHz".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.bandwidthMHz = reader.getFloat();
                } else if ("endPoint".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.endPoint = EndPoint.fromJson(reader);
                } else if ("modulationConfiguration".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.modulationConfiguration = reader.getString();
                } else if ("demodulationConfiguration".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.demodulationConfiguration = reader.getString();
                } else if ("encodingConfiguration".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.encodingConfiguration = reader.getString();
                } else if ("decodingConfiguration".equals(fieldName)) {
                    deserializedContactProfileLinkChannel.decodingConfiguration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContactProfileLinkChannel;
        });
    }
}
