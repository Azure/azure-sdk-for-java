// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Contact Profile Link Channel. */
@Fluent
public final class ContactProfileLinkChannel {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ContactProfileLinkChannel.class);

    /*
     * Center Frequency in MHz
     */
    @JsonProperty(value = "centerFrequencyMHz", required = true)
    private float centerFrequencyMHz;

    /*
     * Bandwidth in MHz
     */
    @JsonProperty(value = "bandwidthMHz", required = true)
    private float bandwidthMHz;

    /*
     * Customer End point to store/retrieve data during a contact.
     */
    @JsonProperty(value = "endPoint", required = true)
    private EndPoint endPoint;

    /*
     * Configuration for modulation
     */
    @JsonProperty(value = "modulationConfiguration")
    private String modulationConfiguration;

    /*
     * Configuration for demodulation
     */
    @JsonProperty(value = "demodulationConfiguration")
    private String demodulationConfiguration;

    /*
     * Configuration for encoding
     */
    @JsonProperty(value = "encodingConfiguration")
    private String encodingConfiguration;

    /*
     * Configuration for decoding
     */
    @JsonProperty(value = "decodingConfiguration")
    private String decodingConfiguration;

    /**
     * Get the centerFrequencyMHz property: Center Frequency in MHz.
     *
     * @return the centerFrequencyMHz value.
     */
    public float centerFrequencyMHz() {
        return this.centerFrequencyMHz;
    }

    /**
     * Set the centerFrequencyMHz property: Center Frequency in MHz.
     *
     * @param centerFrequencyMHz the centerFrequencyMHz value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withCenterFrequencyMHz(float centerFrequencyMHz) {
        this.centerFrequencyMHz = centerFrequencyMHz;
        return this;
    }

    /**
     * Get the bandwidthMHz property: Bandwidth in MHz.
     *
     * @return the bandwidthMHz value.
     */
    public float bandwidthMHz() {
        return this.bandwidthMHz;
    }

    /**
     * Set the bandwidthMHz property: Bandwidth in MHz.
     *
     * @param bandwidthMHz the bandwidthMHz value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withBandwidthMHz(float bandwidthMHz) {
        this.bandwidthMHz = bandwidthMHz;
        return this;
    }

    /**
     * Get the endPoint property: Customer End point to store/retrieve data during a contact.
     *
     * @return the endPoint value.
     */
    public EndPoint endPoint() {
        return this.endPoint;
    }

    /**
     * Set the endPoint property: Customer End point to store/retrieve data during a contact.
     *
     * @param endPoint the endPoint value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withEndPoint(EndPoint endPoint) {
        this.endPoint = endPoint;
        return this;
    }

    /**
     * Get the modulationConfiguration property: Configuration for modulation.
     *
     * @return the modulationConfiguration value.
     */
    public String modulationConfiguration() {
        return this.modulationConfiguration;
    }

    /**
     * Set the modulationConfiguration property: Configuration for modulation.
     *
     * @param modulationConfiguration the modulationConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withModulationConfiguration(String modulationConfiguration) {
        this.modulationConfiguration = modulationConfiguration;
        return this;
    }

    /**
     * Get the demodulationConfiguration property: Configuration for demodulation.
     *
     * @return the demodulationConfiguration value.
     */
    public String demodulationConfiguration() {
        return this.demodulationConfiguration;
    }

    /**
     * Set the demodulationConfiguration property: Configuration for demodulation.
     *
     * @param demodulationConfiguration the demodulationConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withDemodulationConfiguration(String demodulationConfiguration) {
        this.demodulationConfiguration = demodulationConfiguration;
        return this;
    }

    /**
     * Get the encodingConfiguration property: Configuration for encoding.
     *
     * @return the encodingConfiguration value.
     */
    public String encodingConfiguration() {
        return this.encodingConfiguration;
    }

    /**
     * Set the encodingConfiguration property: Configuration for encoding.
     *
     * @param encodingConfiguration the encodingConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withEncodingConfiguration(String encodingConfiguration) {
        this.encodingConfiguration = encodingConfiguration;
        return this;
    }

    /**
     * Get the decodingConfiguration property: Configuration for decoding.
     *
     * @return the decodingConfiguration value.
     */
    public String decodingConfiguration() {
        return this.decodingConfiguration;
    }

    /**
     * Set the decodingConfiguration property: Configuration for decoding.
     *
     * @param decodingConfiguration the decodingConfiguration value to set.
     * @return the ContactProfileLinkChannel object itself.
     */
    public ContactProfileLinkChannel withDecodingConfiguration(String decodingConfiguration) {
        this.decodingConfiguration = decodingConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endPoint() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property endPoint in model ContactProfileLinkChannel"));
        } else {
            endPoint().validate();
        }
    }
}
