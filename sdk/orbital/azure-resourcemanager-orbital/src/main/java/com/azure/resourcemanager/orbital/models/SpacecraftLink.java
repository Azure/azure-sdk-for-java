// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Spacecraft Link. */
@Fluent
public final class SpacecraftLink {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SpacecraftLink.class);

    /*
     * Center Frequency in MHz
     */
    @JsonProperty(value = "centerFrequencyMHz", required = true)
    private float centerFrequencyMHz;

    /*
     * Bandwidth in MHz
     */
    @JsonProperty(value = "bandwidthMHz", required = true)
    private float bandwidthMHz;

    /*
     * Direction (uplink or downlink)
     */
    @JsonProperty(value = "direction", required = true)
    private Direction direction;

    /*
     * polarization. eg (RHCP, LHCP)
     */
    @JsonProperty(value = "polarization", required = true)
    private Polarization polarization;

    /**
     * Get the centerFrequencyMHz property: Center Frequency in MHz.
     *
     * @return the centerFrequencyMHz value.
     */
    public float centerFrequencyMHz() {
        return this.centerFrequencyMHz;
    }

    /**
     * Set the centerFrequencyMHz property: Center Frequency in MHz.
     *
     * @param centerFrequencyMHz the centerFrequencyMHz value to set.
     * @return the SpacecraftLink object itself.
     */
    public SpacecraftLink withCenterFrequencyMHz(float centerFrequencyMHz) {
        this.centerFrequencyMHz = centerFrequencyMHz;
        return this;
    }

    /**
     * Get the bandwidthMHz property: Bandwidth in MHz.
     *
     * @return the bandwidthMHz value.
     */
    public float bandwidthMHz() {
        return this.bandwidthMHz;
    }

    /**
     * Set the bandwidthMHz property: Bandwidth in MHz.
     *
     * @param bandwidthMHz the bandwidthMHz value to set.
     * @return the SpacecraftLink object itself.
     */
    public SpacecraftLink withBandwidthMHz(float bandwidthMHz) {
        this.bandwidthMHz = bandwidthMHz;
        return this;
    }

    /**
     * Get the direction property: Direction (uplink or downlink).
     *
     * @return the direction value.
     */
    public Direction direction() {
        return this.direction;
    }

    /**
     * Set the direction property: Direction (uplink or downlink).
     *
     * @param direction the direction value to set.
     * @return the SpacecraftLink object itself.
     */
    public SpacecraftLink withDirection(Direction direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the polarization property: polarization. eg (RHCP, LHCP).
     *
     * @return the polarization value.
     */
    public Polarization polarization() {
        return this.polarization;
    }

    /**
     * Set the polarization property: polarization. eg (RHCP, LHCP).
     *
     * @param polarization the polarization value to set.
     * @return the SpacecraftLink object itself.
     */
    public SpacecraftLink withPolarization(Polarization polarization) {
        this.polarization = polarization;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (direction() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property direction in model SpacecraftLink"));
        }
        if (polarization() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property polarization in model SpacecraftLink"));
        }
    }
}
