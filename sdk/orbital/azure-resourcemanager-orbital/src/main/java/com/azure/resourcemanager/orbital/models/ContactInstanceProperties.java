// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.orbital.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Contact Instance Properties. */
@Immutable
public class ContactInstanceProperties {
    /*
     * Maximum elevation of the antenna during the contact in decimal degrees.
     */
    @JsonProperty(value = "maximumElevationDegrees", access = JsonProperty.Access.WRITE_ONLY)
    private Float maximumElevationDegrees;

    /*
     * Time at which antenna transmit will be enabled (ISO 8601 UTC standard).
     */
    @JsonProperty(value = "txStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime txStartTime;

    /*
     * Time at which antenna transmit will be disabled (ISO 8601 UTC standard).
     */
    @JsonProperty(value = "txEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime txEndTime;

    /*
     * Earliest time to receive a signal (ISO 8601 UTC standard).
     */
    @JsonProperty(value = "rxStartTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime rxStartTime;

    /*
     * Time to lost receiving a signal (ISO 8601 UTC standard).
     */
    @JsonProperty(value = "rxEndTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime rxEndTime;

    /*
     * Azimuth of the antenna at the start of the contact in decimal degrees.
     */
    @JsonProperty(value = "startAzimuthDegrees", access = JsonProperty.Access.WRITE_ONLY)
    private Float startAzimuthDegrees;

    /*
     * Azimuth of the antenna at the end of the contact in decimal degrees.
     */
    @JsonProperty(value = "endAzimuthDegrees", access = JsonProperty.Access.WRITE_ONLY)
    private Float endAzimuthDegrees;

    /*
     * Spacecraft elevation above the horizon at contact start.
     */
    @JsonProperty(value = "startElevationDegrees", access = JsonProperty.Access.WRITE_ONLY)
    private Float startElevationDegrees;

    /*
     * Spacecraft elevation above the horizon at contact end.
     */
    @JsonProperty(value = "endElevationDegrees", access = JsonProperty.Access.WRITE_ONLY)
    private Float endElevationDegrees;

    /** Creates an instance of ContactInstanceProperties class. */
    public ContactInstanceProperties() {
    }

    /**
     * Get the maximumElevationDegrees property: Maximum elevation of the antenna during the contact in decimal degrees.
     *
     * @return the maximumElevationDegrees value.
     */
    public Float maximumElevationDegrees() {
        return this.maximumElevationDegrees;
    }

    /**
     * Get the txStartTime property: Time at which antenna transmit will be enabled (ISO 8601 UTC standard).
     *
     * @return the txStartTime value.
     */
    public OffsetDateTime txStartTime() {
        return this.txStartTime;
    }

    /**
     * Get the txEndTime property: Time at which antenna transmit will be disabled (ISO 8601 UTC standard).
     *
     * @return the txEndTime value.
     */
    public OffsetDateTime txEndTime() {
        return this.txEndTime;
    }

    /**
     * Get the rxStartTime property: Earliest time to receive a signal (ISO 8601 UTC standard).
     *
     * @return the rxStartTime value.
     */
    public OffsetDateTime rxStartTime() {
        return this.rxStartTime;
    }

    /**
     * Get the rxEndTime property: Time to lost receiving a signal (ISO 8601 UTC standard).
     *
     * @return the rxEndTime value.
     */
    public OffsetDateTime rxEndTime() {
        return this.rxEndTime;
    }

    /**
     * Get the startAzimuthDegrees property: Azimuth of the antenna at the start of the contact in decimal degrees.
     *
     * @return the startAzimuthDegrees value.
     */
    public Float startAzimuthDegrees() {
        return this.startAzimuthDegrees;
    }

    /**
     * Get the endAzimuthDegrees property: Azimuth of the antenna at the end of the contact in decimal degrees.
     *
     * @return the endAzimuthDegrees value.
     */
    public Float endAzimuthDegrees() {
        return this.endAzimuthDegrees;
    }

    /**
     * Get the startElevationDegrees property: Spacecraft elevation above the horizon at contact start.
     *
     * @return the startElevationDegrees value.
     */
    public Float startElevationDegrees() {
        return this.startElevationDegrees;
    }

    /**
     * Get the endElevationDegrees property: Spacecraft elevation above the horizon at contact end.
     *
     * @return the endElevationDegrees value.
     */
    public Float endElevationDegrees() {
        return this.endElevationDegrees;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
