// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.communitytraining.generated;

import com.azure.resourcemanager.communitytraining.models.CommunityTraining;
import com.azure.resourcemanager.communitytraining.models.IdentityConfigurationPropertiesUpdate;
import com.azure.resourcemanager.communitytraining.models.Sku;
import com.azure.resourcemanager.communitytraining.models.SkuTier;
import java.util.HashMap;
import java.util.Map;

/** Samples for CommunityTrainings Update. */
public final class CommunityTrainingsUpdateSamples {
    /*
     * x-ms-original-file: specification/communitytraining/resource-manager/Microsoft.Community/stable/2023-11-01/examples/CommunityTrainings_Update.json
     */
    /**
     * Sample code: UpdateCommunityTrainings.
     *
     * @param manager Entry point to CommunitytrainingManager.
     */
    public static void updateCommunityTrainings(
        com.azure.resourcemanager.communitytraining.CommunitytrainingManager manager) {
        CommunityTraining resource =
            manager
                .communityTrainings()
                .getByResourceGroupWithResponse(
                    "rgCommunityTraining", "ctApplication", com.azure.core.util.Context.NONE)
                .getValue();
        resource
            .update()
            .withTags(mapOf())
            .withSku(new Sku().withName("Commercial").withTier(SkuTier.STANDARD))
            .withIdentityConfiguration(
                new IdentityConfigurationPropertiesUpdate()
                    .withIdentityType("ADB2C")
                    .withTeamsEnabled(false)
                    .withTenantId("c1ffbb60-88cf-4b83-b54f-c47ae6220c19")
                    .withDomainName("cttenant")
                    .withClientId("8c92390f-2f30-493d-bd13-d3c3eba3709d")
                    .withClientSecret("fakeTokenPlaceholder")
                    .withB2CAuthenticationPolicy("B2C_1_signup_signin")
                    .withB2CPasswordResetPolicy("fakeTokenPlaceholder")
                    .withCustomLoginParameters("custom_hint"))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
