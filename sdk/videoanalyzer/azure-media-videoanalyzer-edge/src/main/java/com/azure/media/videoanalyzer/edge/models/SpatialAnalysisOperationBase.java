// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class for Azure Cognitive Services Spatial Analysis operations.
 */
@Immutable
public class SpatialAnalysisOperationBase implements JsonSerializable<SpatialAnalysisOperationBase> {
    /*
     * The Type discriminator for the derived types.
     */
    private String type = "SpatialAnalysisOperationBase";

    /**
     * Creates an instance of SpatialAnalysisOperationBase class.
     */
    public SpatialAnalysisOperationBase() {
    }

    /**
     * Get the type property: The Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpatialAnalysisOperationBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpatialAnalysisOperationBase if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SpatialAnalysisOperationBase.
     */
    public static SpatialAnalysisOperationBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.VideoAnalyzer.SpatialAnalysisCustomOperation".equals(discriminatorValue)) {
                    return SpatialAnalysisCustomOperation.fromJson(readerToUse.reset());
                } else if ("SpatialAnalysisTypedOperationBase".equals(discriminatorValue)) {
                    return SpatialAnalysisTypedOperationBase.fromJsonKnownDiscriminator(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonCountOperation".equals(discriminatorValue)) {
                    return SpatialAnalysisPersonCountOperation.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonZoneCrossingOperation"
                    .equals(discriminatorValue)) {
                    return SpatialAnalysisPersonZoneCrossingOperation.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonDistanceOperation"
                    .equals(discriminatorValue)) {
                    return SpatialAnalysisPersonDistanceOperation.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonLineCrossingOperation"
                    .equals(discriminatorValue)) {
                    return SpatialAnalysisPersonLineCrossingOperation.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static SpatialAnalysisOperationBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpatialAnalysisOperationBase deserializedSpatialAnalysisOperationBase = new SpatialAnalysisOperationBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@type".equals(fieldName)) {
                    deserializedSpatialAnalysisOperationBase.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpatialAnalysisOperationBase;
        });
    }
}
