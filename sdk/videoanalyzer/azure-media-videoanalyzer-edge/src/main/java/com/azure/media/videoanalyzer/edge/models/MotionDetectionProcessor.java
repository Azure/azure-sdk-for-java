// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Motion detection processor allows for motion detection on the video stream. It generates motion events whenever
 * motion is present on the video.
 */
@Fluent
public final class MotionDetectionProcessor extends ProcessorNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.MotionDetectionProcessor";

    /*
     * Motion detection sensitivity: low, medium, high.
     */
    private MotionDetectionSensitivity sensitivity;

    /*
     * Indicates whether the processor should detect and output the regions within the video frame where motion was
     * detected. Default is true.
     */
    private Boolean outputMotionRegion;

    /*
     * Time window duration on which events are aggregated before being emitted. Value must be specified in ISO8601
     * duration format (i.e. "PT2S" equals 2 seconds). Use 0 seconds for no aggregation. Default is 1 second.
     */
    private String eventAggregationWindow;

    /**
     * Creates an instance of MotionDetectionProcessor class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     */
    public MotionDetectionProcessor(String name, List<NodeInput> inputs) {
        super(name, inputs);
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the sensitivity property: Motion detection sensitivity: low, medium, high.
     * 
     * @return the sensitivity value.
     */
    public MotionDetectionSensitivity getSensitivity() {
        return this.sensitivity;
    }

    /**
     * Set the sensitivity property: Motion detection sensitivity: low, medium, high.
     * 
     * @param sensitivity the sensitivity value to set.
     * @return the MotionDetectionProcessor object itself.
     */
    public MotionDetectionProcessor setSensitivity(MotionDetectionSensitivity sensitivity) {
        this.sensitivity = sensitivity;
        return this;
    }

    /**
     * Get the outputMotionRegion property: Indicates whether the processor should detect and output the regions within
     * the video frame where motion was detected. Default is true.
     * 
     * @return the outputMotionRegion value.
     */
    public Boolean isOutputMotionRegion() {
        return this.outputMotionRegion;
    }

    /**
     * Set the outputMotionRegion property: Indicates whether the processor should detect and output the regions within
     * the video frame where motion was detected. Default is true.
     * 
     * @param outputMotionRegion the outputMotionRegion value to set.
     * @return the MotionDetectionProcessor object itself.
     */
    public MotionDetectionProcessor setOutputMotionRegion(Boolean outputMotionRegion) {
        this.outputMotionRegion = outputMotionRegion;
        return this;
    }

    /**
     * Get the eventAggregationWindow property: Time window duration on which events are aggregated before being
     * emitted. Value must be specified in ISO8601 duration format (i.e. "PT2S" equals 2 seconds). Use 0 seconds for no
     * aggregation. Default is 1 second.
     * 
     * @return the eventAggregationWindow value.
     */
    public String getEventAggregationWindow() {
        return this.eventAggregationWindow;
    }

    /**
     * Set the eventAggregationWindow property: Time window duration on which events are aggregated before being
     * emitted. Value must be specified in ISO8601 duration format (i.e. "PT2S" equals 2 seconds). Use 0 seconds for no
     * aggregation. Default is 1 second.
     * 
     * @param eventAggregationWindow the eventAggregationWindow value to set.
     * @return the MotionDetectionProcessor object itself.
     */
    public MotionDetectionProcessor setEventAggregationWindow(String eventAggregationWindow) {
        this.eventAggregationWindow = eventAggregationWindow;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("sensitivity", this.sensitivity == null ? null : this.sensitivity.toString());
        jsonWriter.writeBooleanField("outputMotionRegion", this.outputMotionRegion);
        jsonWriter.writeStringField("eventAggregationWindow", this.eventAggregationWindow);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MotionDetectionProcessor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MotionDetectionProcessor if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MotionDetectionProcessor.
     */
    public static MotionDetectionProcessor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            String type = "#Microsoft.VideoAnalyzer.MotionDetectionProcessor";
            MotionDetectionSensitivity sensitivity = null;
            Boolean outputMotionRegion = null;
            String eventAggregationWindow = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("sensitivity".equals(fieldName)) {
                    sensitivity = MotionDetectionSensitivity.fromString(reader.getString());
                } else if ("outputMotionRegion".equals(fieldName)) {
                    outputMotionRegion = reader.getNullable(JsonReader::getBoolean);
                } else if ("eventAggregationWindow".equals(fieldName)) {
                    eventAggregationWindow = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound) {
                MotionDetectionProcessor deserializedMotionDetectionProcessor
                    = new MotionDetectionProcessor(name, inputs);
                deserializedMotionDetectionProcessor.type = type;
                deserializedMotionDetectionProcessor.sensitivity = sensitivity;
                deserializedMotionDetectionProcessor.outputMotionRegion = outputMotionRegion;
                deserializedMotionDetectionProcessor.eventAggregationWindow = eventAggregationWindow;

                return deserializedMotionDetectionProcessor;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
