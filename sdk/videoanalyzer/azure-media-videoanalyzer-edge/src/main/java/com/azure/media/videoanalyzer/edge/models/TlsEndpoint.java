// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in
 * transit).
 */
@Fluent
public final class TlsEndpoint extends EndpointBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.TlsEndpoint";

    /*
     * List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure
     * Video Analyzer's list of trusted authorities should be used.
     */
    private CertificateSource trustedCertificates;

    /*
     * Validation options to use when authenticating a TLS connection. By default, strict validation is used.
     */
    private TlsValidationOptions validationOptions;

    /**
     * Creates an instance of TlsEndpoint class.
     * 
     * @param url the url value to set.
     */
    public TlsEndpoint(String url) {
        super(url);
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the trustedCertificates property: List of trusted certificate authorities when authenticating a TLS
     * connection. A null list designates that Azure Video Analyzer's list of trusted authorities should be used.
     * 
     * @return the trustedCertificates value.
     */
    public CertificateSource getTrustedCertificates() {
        return this.trustedCertificates;
    }

    /**
     * Set the trustedCertificates property: List of trusted certificate authorities when authenticating a TLS
     * connection. A null list designates that Azure Video Analyzer's list of trusted authorities should be used.
     * 
     * @param trustedCertificates the trustedCertificates value to set.
     * @return the TlsEndpoint object itself.
     */
    public TlsEndpoint setTrustedCertificates(CertificateSource trustedCertificates) {
        this.trustedCertificates = trustedCertificates;
        return this;
    }

    /**
     * Get the validationOptions property: Validation options to use when authenticating a TLS connection. By default,
     * strict validation is used.
     * 
     * @return the validationOptions value.
     */
    public TlsValidationOptions getValidationOptions() {
        return this.validationOptions;
    }

    /**
     * Set the validationOptions property: Validation options to use when authenticating a TLS connection. By default,
     * strict validation is used.
     * 
     * @param validationOptions the validationOptions value to set.
     * @return the TlsEndpoint object itself.
     */
    public TlsEndpoint setValidationOptions(TlsValidationOptions validationOptions) {
        this.validationOptions = validationOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TlsEndpoint setCredentials(CredentialsBase credentials) {
        super.setCredentials(credentials);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("url", getUrl());
        jsonWriter.writeJsonField("credentials", getCredentials());
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeJsonField("trustedCertificates", this.trustedCertificates);
        jsonWriter.writeJsonField("validationOptions", this.validationOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TlsEndpoint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TlsEndpoint if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TlsEndpoint.
     */
    public static TlsEndpoint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean urlFound = false;
            String url = null;
            CredentialsBase credentials = null;
            String type = "#Microsoft.VideoAnalyzer.TlsEndpoint";
            CertificateSource trustedCertificates = null;
            TlsValidationOptions validationOptions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("url".equals(fieldName)) {
                    url = reader.getString();
                    urlFound = true;
                } else if ("credentials".equals(fieldName)) {
                    credentials = CredentialsBase.fromJson(reader);
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("trustedCertificates".equals(fieldName)) {
                    trustedCertificates = CertificateSource.fromJson(reader);
                } else if ("validationOptions".equals(fieldName)) {
                    validationOptions = TlsValidationOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (urlFound) {
                TlsEndpoint deserializedTlsEndpoint = new TlsEndpoint(url);
                deserializedTlsEndpoint.setCredentials(credentials);
                deserializedTlsEndpoint.type = type;
                deserializedTlsEndpoint.trustedCertificates = trustedCertificates;
                deserializedTlsEndpoint.validationOptions = validationOptions;

                return deserializedTlsEndpoint;
            }
            throw new IllegalStateException("Missing required property: url");
        });
    }
}
