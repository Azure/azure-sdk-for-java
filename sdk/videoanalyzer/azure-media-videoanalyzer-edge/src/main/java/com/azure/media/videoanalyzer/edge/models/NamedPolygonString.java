// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Describes a closed polygon configuration.
 */
@Immutable
public final class NamedPolygonString extends NamedPolygonBase {
    /*
     * The Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.NamedPolygonString";

    /*
     * Point coordinates for the polygon. Example: '[[0.3, 0.2],[0.9, 0.8],[0.7, 0.6]]'. Each point is expressed as
     * [LEFT, TOP] coordinate ratios ranging from 0.0 to 1.0, where [0,0] is the upper-left frame corner and [1, 1] is
     * the bottom-right frame corner.
     */
    private final String polygon;

    /**
     * Creates an instance of NamedPolygonString class.
     * 
     * @param name the name value to set.
     * @param polygon the polygon value to set.
     */
    public NamedPolygonString(String name, String polygon) {
        super(name);
        this.polygon = polygon;
    }

    /**
     * Get the type property: The Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the polygon property: Point coordinates for the polygon. Example: '[[0.3, 0.2],[0.9, 0.8],[0.7, 0.6]]'. Each
     * point is expressed as [LEFT, TOP] coordinate ratios ranging from 0.0 to 1.0, where [0,0] is the upper-left frame
     * corner and [1, 1] is the bottom-right frame corner.
     * 
     * @return the polygon value.
     */
    public String getPolygon() {
        return this.polygon;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("polygon", this.polygon);
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamedPolygonString from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamedPolygonString if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamedPolygonString.
     */
    public static NamedPolygonString fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean polygonFound = false;
            String polygon = null;
            String type = "#Microsoft.VideoAnalyzer.NamedPolygonString";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("polygon".equals(fieldName)) {
                    polygon = reader.getString();
                    polygonFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && polygonFound) {
                NamedPolygonString deserializedNamedPolygonString = new NamedPolygonString(name, polygon);
                deserializedNamedPolygonString.type = type;

                return deserializedNamedPolygonString;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!polygonFound) {
                missingProperties.add("polygon");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
