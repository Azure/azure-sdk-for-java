// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ONVIF device DNS properties.
 */
@Fluent
public final class OnvifHostName implements JsonSerializable<OnvifHostName> {
    /*
     * Result value showing if the ONVIF device is configured to use DHCP.
     */
    private Boolean fromDhcp;

    /*
     * The hostname of the ONVIF device.
     */
    private String hostname;

    /**
     * Creates an instance of OnvifHostName class.
     */
    public OnvifHostName() {
    }

    /**
     * Get the fromDhcp property: Result value showing if the ONVIF device is configured to use DHCP.
     * 
     * @return the fromDhcp value.
     */
    public Boolean isFromDhcp() {
        return this.fromDhcp;
    }

    /**
     * Set the fromDhcp property: Result value showing if the ONVIF device is configured to use DHCP.
     * 
     * @param fromDhcp the fromDhcp value to set.
     * @return the OnvifHostName object itself.
     */
    public OnvifHostName setFromDhcp(Boolean fromDhcp) {
        this.fromDhcp = fromDhcp;
        return this;
    }

    /**
     * Get the hostname property: The hostname of the ONVIF device.
     * 
     * @return the hostname value.
     */
    public String getHostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname of the ONVIF device.
     * 
     * @param hostname the hostname value to set.
     * @return the OnvifHostName object itself.
     */
    public OnvifHostName setHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("fromDhcp", this.fromDhcp);
        jsonWriter.writeStringField("hostname", this.hostname);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnvifHostName from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnvifHostName if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnvifHostName.
     */
    public static OnvifHostName fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnvifHostName deserializedOnvifHostName = new OnvifHostName();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fromDhcp".equals(fieldName)) {
                    deserializedOnvifHostName.fromDhcp = reader.getNullable(JsonReader::getBoolean);
                } else if ("hostname".equals(fieldName)) {
                    deserializedOnvifHostName.hostname = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnvifHostName;
        });
    }
}
