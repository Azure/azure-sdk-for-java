// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a Spatial Analysis person line crossing operation eventing configuration.
 */
@Fluent
public final class SpatialAnalysisPersonLineCrossingEvent extends SpatialAnalysisOperationEventBase {
    /**
     * Creates an instance of SpatialAnalysisPersonLineCrossingEvent class.
     */
    public SpatialAnalysisPersonLineCrossingEvent() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpatialAnalysisPersonLineCrossingEvent setThreshold(String threshold) {
        super.setThreshold(threshold);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpatialAnalysisPersonLineCrossingEvent setFocus(SpatialAnalysisOperationFocus focus) {
        super.setFocus(focus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("threshold", getThreshold());
        jsonWriter.writeStringField("focus", getFocus() == null ? null : getFocus().toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpatialAnalysisPersonLineCrossingEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpatialAnalysisPersonLineCrossingEvent if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SpatialAnalysisPersonLineCrossingEvent.
     */
    public static SpatialAnalysisPersonLineCrossingEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpatialAnalysisPersonLineCrossingEvent deserializedSpatialAnalysisPersonLineCrossingEvent
                = new SpatialAnalysisPersonLineCrossingEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("threshold".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonLineCrossingEvent.setThreshold(reader.getString());
                } else if ("focus".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonLineCrossingEvent
                        .setFocus(SpatialAnalysisOperationFocus.fromString(reader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpatialAnalysisPersonLineCrossingEvent;
        });
    }
}
