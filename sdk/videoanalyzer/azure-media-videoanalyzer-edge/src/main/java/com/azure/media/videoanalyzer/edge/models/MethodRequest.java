// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.io.UncheckedIOException;

/**
 * Base class for direct method calls.
 */
@Fluent
public class MethodRequest implements JsonSerializable<MethodRequest> {

    /*
     * Video Analyzer API version.
     */
    private String apiVersion = "1.1";

    /**
     * Creates an instance of MethodRequest class.
     */
    public MethodRequest() {
    }

    /**
     * Get the apiVersion property: Video Analyzer API version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Set the apiVersion property: Video Analyzer API version.
     *
     * @param apiVersion the apiVersion value to set.
     * @return the MethodRequest object itself.
     */
    MethodRequest setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@apiVersion", this.apiVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MethodRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MethodRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MethodRequest.
     */
    public static MethodRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MethodRequest deserializedMethodRequest = new MethodRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("@apiVersion".equals(fieldName)) {
                    deserializedMethodRequest.apiVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedMethodRequest;
        });
    }

    private static final ClientLogger LOGGER = new ClientLogger(MethodRequest.class);

    /**
     * Get the payload as JSON: the serialized form of the request body
     *
     * @throws UncheckedIOException UncheckedIOException
     * @return the payload as JSON
     */
    public String getPayloadAsJson() {
        try {
            return this.toJsonString();
        } catch (IOException ex) {
            throw LOGGER.logExceptionAsError(new UncheckedIOException(ex));
        }
    }
}
