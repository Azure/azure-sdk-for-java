// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes an input signal to be used on a pipeline node.
 */
@Fluent
public final class NodeInput implements JsonSerializable<NodeInput> {
    /*
     * The name of the upstream node in the pipeline which output is used as input of the current node.
     */
    private final String nodeName;

    /*
     * Allows for the selection of specific data streams (eg. video only) from another node.
     */
    private List<OutputSelector> outputSelectors;

    /**
     * Creates an instance of NodeInput class.
     * 
     * @param nodeName the nodeName value to set.
     */
    public NodeInput(String nodeName) {
        this.nodeName = nodeName;
    }

    /**
     * Get the nodeName property: The name of the upstream node in the pipeline which output is used as input of the
     * current node.
     * 
     * @return the nodeName value.
     */
    public String getNodeName() {
        return this.nodeName;
    }

    /**
     * Get the outputSelectors property: Allows for the selection of specific data streams (eg. video only) from another
     * node.
     * 
     * @return the outputSelectors value.
     */
    public List<OutputSelector> getOutputSelectors() {
        return this.outputSelectors;
    }

    /**
     * Set the outputSelectors property: Allows for the selection of specific data streams (eg. video only) from another
     * node.
     * 
     * @param outputSelectors the outputSelectors value to set.
     * @return the NodeInput object itself.
     */
    public NodeInput setOutputSelectors(List<OutputSelector> outputSelectors) {
        this.outputSelectors = outputSelectors;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nodeName", this.nodeName);
        jsonWriter.writeArrayField("outputSelectors", this.outputSelectors,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NodeInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NodeInput if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NodeInput.
     */
    public static NodeInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nodeNameFound = false;
            String nodeName = null;
            List<OutputSelector> outputSelectors = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodeName".equals(fieldName)) {
                    nodeName = reader.getString();
                    nodeNameFound = true;
                } else if ("outputSelectors".equals(fieldName)) {
                    outputSelectors = reader.readArray(reader1 -> OutputSelector.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            if (nodeNameFound) {
                NodeInput deserializedNodeInput = new NodeInput(nodeName);
                deserializedNodeInput.outputSelectors = outputSelectors;

                return deserializedNodeInput;
            }
            throw new IllegalStateException("Missing required property: nodeName");
        });
    }
}
