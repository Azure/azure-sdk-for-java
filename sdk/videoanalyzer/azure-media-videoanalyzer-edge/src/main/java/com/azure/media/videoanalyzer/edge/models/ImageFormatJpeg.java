// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * JPEG image encoding.
 */
@Fluent
public final class ImageFormatJpeg extends ImageFormatProperties {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.ImageFormatJpeg";

    /*
     * Image quality value between 0 to 100 (best quality).
     */
    private String quality;

    /**
     * Creates an instance of ImageFormatJpeg class.
     */
    public ImageFormatJpeg() {
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the quality property: Image quality value between 0 to 100 (best quality).
     * 
     * @return the quality value.
     */
    public String getQuality() {
        return this.quality;
    }

    /**
     * Set the quality property: Image quality value between 0 to 100 (best quality).
     * 
     * @param quality the quality value to set.
     * @return the ImageFormatJpeg object itself.
     */
    public ImageFormatJpeg setQuality(String quality) {
        this.quality = quality;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("quality", this.quality);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageFormatJpeg from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageFormatJpeg if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageFormatJpeg.
     */
    public static ImageFormatJpeg fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageFormatJpeg deserializedImageFormatJpeg = new ImageFormatJpeg();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@type".equals(fieldName)) {
                    deserializedImageFormatJpeg.type = reader.getString();
                } else if ("quality".equals(fieldName)) {
                    deserializedImageFormatJpeg.quality = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageFormatJpeg;
        });
    }
}
