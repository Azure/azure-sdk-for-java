// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes the properties of a sample. */
@Fluent
public final class SamplingOptions {
    /*
     * If true, limits the samples submitted to the extension to only samples
     * which have associated inference(s)
     */
    @JsonProperty(value = "skipSamplesWithoutAnnotation")
    private String skipSamplesWithoutAnnotation;

    /*
     * Maximum rate of samples submitted to the extension
     */
    @JsonProperty(value = "maximumSamplesPerSecond")
    private String maximumSamplesPerSecond;

    /**
     * Get the skipSamplesWithoutAnnotation property: If true, limits the samples submitted to the extension to only
     * samples which have associated inference(s).
     *
     * @return the skipSamplesWithoutAnnotation value.
     */
    public String getSkipSamplesWithoutAnnotation() {
        return this.skipSamplesWithoutAnnotation;
    }

    /**
     * Set the skipSamplesWithoutAnnotation property: If true, limits the samples submitted to the extension to only
     * samples which have associated inference(s).
     *
     * @param skipSamplesWithoutAnnotation the skipSamplesWithoutAnnotation value to set.
     * @return the SamplingOptions object itself.
     */
    public SamplingOptions setSkipSamplesWithoutAnnotation(String skipSamplesWithoutAnnotation) {
        this.skipSamplesWithoutAnnotation = skipSamplesWithoutAnnotation;
        return this;
    }

    /**
     * Get the maximumSamplesPerSecond property: Maximum rate of samples submitted to the extension.
     *
     * @return the maximumSamplesPerSecond value.
     */
    public String getMaximumSamplesPerSecond() {
        return this.maximumSamplesPerSecond;
    }

    /**
     * Set the maximumSamplesPerSecond property: Maximum rate of samples submitted to the extension.
     *
     * @param maximumSamplesPerSecond the maximumSamplesPerSecond value to set.
     * @return the SamplingOptions object itself.
     */
    public SamplingOptions setMaximumSamplesPerSecond(String maximumSamplesPerSecond) {
        this.maximumSamplesPerSecond = maximumSamplesPerSecond;
        return this;
    }
}
