// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines a Spatial Analysis person distance operation eventing configuration.
 */
@Fluent
public final class SpatialAnalysisPersonDistanceEvent extends SpatialAnalysisOperationEventBase {
    /*
     * The event trigger type.
     */
    private SpatialAnalysisPersonDistanceEventTrigger trigger;

    /*
     * The event or interval output frequency.
     */
    private String outputFrequency;

    /*
     * The minimum distance threshold
     */
    private String minimumDistanceThreshold;

    /*
     * The maximum distance threshold
     */
    private String maximumDistanceThreshold;

    /**
     * Creates an instance of SpatialAnalysisPersonDistanceEvent class.
     */
    public SpatialAnalysisPersonDistanceEvent() {
    }

    /**
     * Get the trigger property: The event trigger type.
     * 
     * @return the trigger value.
     */
    public SpatialAnalysisPersonDistanceEventTrigger getTrigger() {
        return this.trigger;
    }

    /**
     * Set the trigger property: The event trigger type.
     * 
     * @param trigger the trigger value to set.
     * @return the SpatialAnalysisPersonDistanceEvent object itself.
     */
    public SpatialAnalysisPersonDistanceEvent setTrigger(SpatialAnalysisPersonDistanceEventTrigger trigger) {
        this.trigger = trigger;
        return this;
    }

    /**
     * Get the outputFrequency property: The event or interval output frequency.
     * 
     * @return the outputFrequency value.
     */
    public String getOutputFrequency() {
        return this.outputFrequency;
    }

    /**
     * Set the outputFrequency property: The event or interval output frequency.
     * 
     * @param outputFrequency the outputFrequency value to set.
     * @return the SpatialAnalysisPersonDistanceEvent object itself.
     */
    public SpatialAnalysisPersonDistanceEvent setOutputFrequency(String outputFrequency) {
        this.outputFrequency = outputFrequency;
        return this;
    }

    /**
     * Get the minimumDistanceThreshold property: The minimum distance threshold.
     * 
     * @return the minimumDistanceThreshold value.
     */
    public String getMinimumDistanceThreshold() {
        return this.minimumDistanceThreshold;
    }

    /**
     * Set the minimumDistanceThreshold property: The minimum distance threshold.
     * 
     * @param minimumDistanceThreshold the minimumDistanceThreshold value to set.
     * @return the SpatialAnalysisPersonDistanceEvent object itself.
     */
    public SpatialAnalysisPersonDistanceEvent setMinimumDistanceThreshold(String minimumDistanceThreshold) {
        this.minimumDistanceThreshold = minimumDistanceThreshold;
        return this;
    }

    /**
     * Get the maximumDistanceThreshold property: The maximum distance threshold.
     * 
     * @return the maximumDistanceThreshold value.
     */
    public String getMaximumDistanceThreshold() {
        return this.maximumDistanceThreshold;
    }

    /**
     * Set the maximumDistanceThreshold property: The maximum distance threshold.
     * 
     * @param maximumDistanceThreshold the maximumDistanceThreshold value to set.
     * @return the SpatialAnalysisPersonDistanceEvent object itself.
     */
    public SpatialAnalysisPersonDistanceEvent setMaximumDistanceThreshold(String maximumDistanceThreshold) {
        this.maximumDistanceThreshold = maximumDistanceThreshold;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpatialAnalysisPersonDistanceEvent setThreshold(String threshold) {
        super.setThreshold(threshold);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpatialAnalysisPersonDistanceEvent setFocus(SpatialAnalysisOperationFocus focus) {
        super.setFocus(focus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("threshold", getThreshold());
        jsonWriter.writeStringField("focus", getFocus() == null ? null : getFocus().toString());
        jsonWriter.writeStringField("trigger", this.trigger == null ? null : this.trigger.toString());
        jsonWriter.writeStringField("outputFrequency", this.outputFrequency);
        jsonWriter.writeStringField("minimumDistanceThreshold", this.minimumDistanceThreshold);
        jsonWriter.writeStringField("maximumDistanceThreshold", this.maximumDistanceThreshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpatialAnalysisPersonDistanceEvent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpatialAnalysisPersonDistanceEvent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SpatialAnalysisPersonDistanceEvent.
     */
    public static SpatialAnalysisPersonDistanceEvent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpatialAnalysisPersonDistanceEvent deserializedSpatialAnalysisPersonDistanceEvent
                = new SpatialAnalysisPersonDistanceEvent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("threshold".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonDistanceEvent.setThreshold(reader.getString());
                } else if ("focus".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonDistanceEvent
                        .setFocus(SpatialAnalysisOperationFocus.fromString(reader.getString()));
                } else if ("trigger".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonDistanceEvent.trigger
                        = SpatialAnalysisPersonDistanceEventTrigger.fromString(reader.getString());
                } else if ("outputFrequency".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonDistanceEvent.outputFrequency = reader.getString();
                } else if ("minimumDistanceThreshold".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonDistanceEvent.minimumDistanceThreshold = reader.getString();
                } else if ("maximumDistanceThreshold".equals(fieldName)) {
                    deserializedSpatialAnalysisPersonDistanceEvent.maximumDistanceThreshold = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpatialAnalysisPersonDistanceEvent;
        });
    }
}
