// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Base class for Azure Cognitive Services Spatial Analysis typed operations.
 */
@Fluent
public class SpatialAnalysisTypedOperationBase extends SpatialAnalysisOperationBase {
    /*
     * The Type discriminator for the derived types.
     */
    private String type = "SpatialAnalysisTypedOperationBase";

    /*
     * If set to 'true', enables debugging mode for this operation.
     */
    private String debug;

    /*
     * Advanced calibration configuration.
     */
    private String calibrationConfiguration;

    /*
     * Advanced camera configuration.
     */
    private String cameraConfiguration;

    /*
     * Advanced camera calibrator configuration.
     */
    private String cameraCalibratorNodeConfiguration;

    /*
     * Advanced detector node configuration.
     */
    private String detectorNodeConfiguration;

    /*
     * Advanced tracker node configuration.
     */
    private String trackerNodeConfiguration;

    /*
     * If set to 'true', enables face mask detection for this operation.
     */
    private String enableFaceMaskClassifier;

    /**
     * Creates an instance of SpatialAnalysisTypedOperationBase class.
     */
    public SpatialAnalysisTypedOperationBase() {
    }

    /**
     * Get the type property: The Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the debug property: If set to 'true', enables debugging mode for this operation.
     * 
     * @return the debug value.
     */
    public String getDebug() {
        return this.debug;
    }

    /**
     * Set the debug property: If set to 'true', enables debugging mode for this operation.
     * 
     * @param debug the debug value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase setDebug(String debug) {
        this.debug = debug;
        return this;
    }

    /**
     * Get the calibrationConfiguration property: Advanced calibration configuration.
     * 
     * @return the calibrationConfiguration value.
     */
    public String getCalibrationConfiguration() {
        return this.calibrationConfiguration;
    }

    /**
     * Set the calibrationConfiguration property: Advanced calibration configuration.
     * 
     * @param calibrationConfiguration the calibrationConfiguration value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase setCalibrationConfiguration(String calibrationConfiguration) {
        this.calibrationConfiguration = calibrationConfiguration;
        return this;
    }

    /**
     * Get the cameraConfiguration property: Advanced camera configuration.
     * 
     * @return the cameraConfiguration value.
     */
    public String getCameraConfiguration() {
        return this.cameraConfiguration;
    }

    /**
     * Set the cameraConfiguration property: Advanced camera configuration.
     * 
     * @param cameraConfiguration the cameraConfiguration value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase setCameraConfiguration(String cameraConfiguration) {
        this.cameraConfiguration = cameraConfiguration;
        return this;
    }

    /**
     * Get the cameraCalibratorNodeConfiguration property: Advanced camera calibrator configuration.
     * 
     * @return the cameraCalibratorNodeConfiguration value.
     */
    public String getCameraCalibratorNodeConfiguration() {
        return this.cameraCalibratorNodeConfiguration;
    }

    /**
     * Set the cameraCalibratorNodeConfiguration property: Advanced camera calibrator configuration.
     * 
     * @param cameraCalibratorNodeConfiguration the cameraCalibratorNodeConfiguration value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase
        setCameraCalibratorNodeConfiguration(String cameraCalibratorNodeConfiguration) {
        this.cameraCalibratorNodeConfiguration = cameraCalibratorNodeConfiguration;
        return this;
    }

    /**
     * Get the detectorNodeConfiguration property: Advanced detector node configuration.
     * 
     * @return the detectorNodeConfiguration value.
     */
    public String getDetectorNodeConfiguration() {
        return this.detectorNodeConfiguration;
    }

    /**
     * Set the detectorNodeConfiguration property: Advanced detector node configuration.
     * 
     * @param detectorNodeConfiguration the detectorNodeConfiguration value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase setDetectorNodeConfiguration(String detectorNodeConfiguration) {
        this.detectorNodeConfiguration = detectorNodeConfiguration;
        return this;
    }

    /**
     * Get the trackerNodeConfiguration property: Advanced tracker node configuration.
     * 
     * @return the trackerNodeConfiguration value.
     */
    public String getTrackerNodeConfiguration() {
        return this.trackerNodeConfiguration;
    }

    /**
     * Set the trackerNodeConfiguration property: Advanced tracker node configuration.
     * 
     * @param trackerNodeConfiguration the trackerNodeConfiguration value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase setTrackerNodeConfiguration(String trackerNodeConfiguration) {
        this.trackerNodeConfiguration = trackerNodeConfiguration;
        return this;
    }

    /**
     * Get the enableFaceMaskClassifier property: If set to 'true', enables face mask detection for this operation.
     * 
     * @return the enableFaceMaskClassifier value.
     */
    public String getEnableFaceMaskClassifier() {
        return this.enableFaceMaskClassifier;
    }

    /**
     * Set the enableFaceMaskClassifier property: If set to 'true', enables face mask detection for this operation.
     * 
     * @param enableFaceMaskClassifier the enableFaceMaskClassifier value to set.
     * @return the SpatialAnalysisTypedOperationBase object itself.
     */
    public SpatialAnalysisTypedOperationBase setEnableFaceMaskClassifier(String enableFaceMaskClassifier) {
        this.enableFaceMaskClassifier = enableFaceMaskClassifier;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("debug", this.debug);
        jsonWriter.writeStringField("calibrationConfiguration", this.calibrationConfiguration);
        jsonWriter.writeStringField("cameraConfiguration", this.cameraConfiguration);
        jsonWriter.writeStringField("cameraCalibratorNodeConfiguration", this.cameraCalibratorNodeConfiguration);
        jsonWriter.writeStringField("detectorNodeConfiguration", this.detectorNodeConfiguration);
        jsonWriter.writeStringField("trackerNodeConfiguration", this.trackerNodeConfiguration);
        jsonWriter.writeStringField("enableFaceMaskClassifier", this.enableFaceMaskClassifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpatialAnalysisTypedOperationBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpatialAnalysisTypedOperationBase if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SpatialAnalysisTypedOperationBase.
     */
    public static SpatialAnalysisTypedOperationBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonCountOperation".equals(discriminatorValue)) {
                    return SpatialAnalysisPersonCountOperation.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonZoneCrossingOperation"
                    .equals(discriminatorValue)) {
                    return SpatialAnalysisPersonZoneCrossingOperation.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonDistanceOperation"
                    .equals(discriminatorValue)) {
                    return SpatialAnalysisPersonDistanceOperation.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.SpatialAnalysisPersonLineCrossingOperation"
                    .equals(discriminatorValue)) {
                    return SpatialAnalysisPersonLineCrossingOperation.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static SpatialAnalysisTypedOperationBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SpatialAnalysisTypedOperationBase deserializedSpatialAnalysisTypedOperationBase
                = new SpatialAnalysisTypedOperationBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@type".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.type = reader.getString();
                } else if ("debug".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.debug = reader.getString();
                } else if ("calibrationConfiguration".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.calibrationConfiguration = reader.getString();
                } else if ("cameraConfiguration".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.cameraConfiguration = reader.getString();
                } else if ("cameraCalibratorNodeConfiguration".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.cameraCalibratorNodeConfiguration
                        = reader.getString();
                } else if ("detectorNodeConfiguration".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.detectorNodeConfiguration = reader.getString();
                } else if ("trackerNodeConfiguration".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.trackerNodeConfiguration = reader.getString();
                } else if ("enableFaceMaskClassifier".equals(fieldName)) {
                    deserializedSpatialAnalysisTypedOperationBase.enableFaceMaskClassifier = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpatialAnalysisTypedOperationBase;
        });
    }
}
