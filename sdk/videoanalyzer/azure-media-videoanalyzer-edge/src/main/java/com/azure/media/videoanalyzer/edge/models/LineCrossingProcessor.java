// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Line crossing processor allows for the detection of tracked objects moving across one or more predefined lines. It
 * must be downstream of an object tracker of downstream on an AI extension node that generates sequenceId for objects
 * which are tracked across different frames of the video. Inference events are generated every time objects crosses
 * from one side of the line to another.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type")
@JsonTypeName("#Microsoft.VideoAnalyzer.LineCrossingProcessor")
@Fluent
public final class LineCrossingProcessor extends ProcessorNodeBase {
    /*
     * An array of lines used to compute line crossing events.
     */
    @JsonProperty(value = "lines", required = true)
    private List<NamedLineBase> lines;

    /**
     * Creates an instance of LineCrossingProcessor class.
     *
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param lines the lines value to set.
     */
    @JsonCreator
    public LineCrossingProcessor(
            @JsonProperty(value = "name", required = true) String name,
            @JsonProperty(value = "inputs", required = true) List<NodeInput> inputs,
            @JsonProperty(value = "lines", required = true) List<NamedLineBase> lines) {
        super(name, inputs);
        this.lines = lines;
    }

    /**
     * Get the lines property: An array of lines used to compute line crossing events.
     *
     * @return the lines value.
     */
    public List<NamedLineBase> getLines() {
        return this.lines;
    }
}
