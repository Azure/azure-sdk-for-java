// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Class representing the ONVIF MediaProfiles.
 */
@Fluent
public final class MediaProfile implements JsonSerializable<MediaProfile> {
    /*
     * The name of the Media Profile.
     */
    private String name;

    /*
     * Object representing the URI that will be used to request for media streaming.
     */
    private Object mediaUri;

    /*
     * The Video encoder configuration.
     */
    private VideoEncoderConfiguration videoEncoderConfiguration;

    /**
     * Creates an instance of MediaProfile class.
     */
    public MediaProfile() {
    }

    /**
     * Get the name property: The name of the Media Profile.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: The name of the Media Profile.
     * 
     * @param name the name value to set.
     * @return the MediaProfile object itself.
     */
    public MediaProfile setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the mediaUri property: Object representing the URI that will be used to request for media streaming.
     * 
     * @return the mediaUri value.
     */
    public Object getMediaUri() {
        return this.mediaUri;
    }

    /**
     * Set the mediaUri property: Object representing the URI that will be used to request for media streaming.
     * 
     * @param mediaUri the mediaUri value to set.
     * @return the MediaProfile object itself.
     */
    public MediaProfile setMediaUri(Object mediaUri) {
        this.mediaUri = mediaUri;
        return this;
    }

    /**
     * Get the videoEncoderConfiguration property: The Video encoder configuration.
     * 
     * @return the videoEncoderConfiguration value.
     */
    public VideoEncoderConfiguration getVideoEncoderConfiguration() {
        return this.videoEncoderConfiguration;
    }

    /**
     * Set the videoEncoderConfiguration property: The Video encoder configuration.
     * 
     * @param videoEncoderConfiguration the videoEncoderConfiguration value to set.
     * @return the MediaProfile object itself.
     */
    public MediaProfile setVideoEncoderConfiguration(VideoEncoderConfiguration videoEncoderConfiguration) {
        this.videoEncoderConfiguration = videoEncoderConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeUntypedField("mediaUri", this.mediaUri);
        jsonWriter.writeJsonField("videoEncoderConfiguration", this.videoEncoderConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MediaProfile.
     */
    public static MediaProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MediaProfile deserializedMediaProfile = new MediaProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMediaProfile.name = reader.getString();
                } else if ("mediaUri".equals(fieldName)) {
                    deserializedMediaProfile.mediaUri = reader.readUntyped();
                } else if ("videoEncoderConfiguration".equals(fieldName)) {
                    deserializedMediaProfile.videoEncoderConfiguration = VideoEncoderConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMediaProfile;
        });
    }
}
