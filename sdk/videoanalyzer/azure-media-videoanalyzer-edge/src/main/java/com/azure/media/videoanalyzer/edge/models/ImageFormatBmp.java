// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * BMP image encoding.
 */
@Immutable
public final class ImageFormatBmp extends ImageFormatProperties {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.ImageFormatBmp";

    /**
     * Creates an instance of ImageFormatBmp class.
     */
    public ImageFormatBmp() {
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageFormatBmp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageFormatBmp if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageFormatBmp.
     */
    public static ImageFormatBmp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageFormatBmp deserializedImageFormatBmp = new ImageFormatBmp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("@type".equals(fieldName)) {
                    deserializedImageFormatBmp.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageFormatBmp;
        });
    }
}
