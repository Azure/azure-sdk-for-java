// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Base class for topology sink nodes.
 */
@Immutable
public class SinkNodeBase implements JsonSerializable<SinkNodeBase> {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "SinkNodeBase";

    /*
     * Node name. Must be unique within the topology.
     */
    private final String name;

    /*
     * An array of upstream node references within the topology to be used as inputs for this node.
     */
    private final List<NodeInput> inputs;

    /**
     * Creates an instance of SinkNodeBase class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     */
    public SinkNodeBase(String name, List<NodeInput> inputs) {
        this.name = name;
        this.inputs = inputs;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Get the name property: Node name. Must be unique within the topology.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the inputs property: An array of upstream node references within the topology to be used as inputs for this
     * node.
     * 
     * @return the inputs value.
     */
    public List<NodeInput> getInputs() {
        return this.inputs;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SinkNodeBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SinkNodeBase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SinkNodeBase.
     */
    public static SinkNodeBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.VideoAnalyzer.IotHubMessageSink".equals(discriminatorValue)) {
                    return IotHubMessageSink.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.FileSink".equals(discriminatorValue)) {
                    return FileSink.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.VideoSink".equals(discriminatorValue)) {
                    return VideoSink.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.AssetSink".equals(discriminatorValue)) {
                    return AssetSink.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static SinkNodeBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            String type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound) {
                SinkNodeBase deserializedSinkNodeBase = new SinkNodeBase(name, inputs);
                deserializedSinkNodeBase.type = type;

                return deserializedSinkNodeBase;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
