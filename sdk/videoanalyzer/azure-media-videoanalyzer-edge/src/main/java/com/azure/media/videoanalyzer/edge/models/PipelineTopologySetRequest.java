// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Creates a new pipeline topology or updates an existing one.
 */
@Fluent
public final class PipelineTopologySetRequest extends MethodRequest {

    /*
     * Pipeline topology describes the processing steps to be applied when processing media for a particular outcome.
     * The topology should be defined according to the scenario to be achieved and can be reused across many pipeline
     * instances which share the same processing characteristics. For instance, a pipeline topology which acquires data
     * from a RTSP camera, process it with an specific AI model and stored the data on the cloud can be reused across
     * many different cameras, as long as the same processing should be applied across all the cameras. Individual
     * instance properties can be defined through the use of user-defined parameters, which allow for a topology to be
     * parameterized, thus allowing individual pipelines to refer to different values, such as individual cameras RTSP
     * endpoints and credentials. Overall a topology is composed of the following:
     * 
     * - Parameters: list of user defined parameters that can be references across the topology nodes.
     * - Sources: list of one or more data sources nodes such as an RTSP source which allows for media to be ingested
     * from cameras.
     * - Processors: list of nodes which perform data analysis or transformations.
     * -Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
     */
    private final PipelineTopology pipelineTopology;

    /*
     * method name
     */
    private String methodName;

    /**
     * Creates an instance of PipelineTopologySetRequest class.
     *
     * @param pipelineTopology the pipelineTopology value to set.
     */
    public PipelineTopologySetRequest(PipelineTopology pipelineTopology) {
        this.pipelineTopology = pipelineTopology;
    }

    /**
     * Get the pipelineTopology property: Pipeline topology describes the processing steps to be applied when processing
     * media for a particular outcome. The topology should be defined according to the scenario to be achieved and can
     * be reused across many pipeline instances which share the same processing characteristics. For instance, a
     * pipeline topology which acquires data from a RTSP camera, process it with an specific AI model and stored the
     * data on the cloud can be reused across many different cameras, as long as the same processing should be applied
     * across all the cameras. Individual instance properties can be defined through the use of user-defined parameters,
     * which allow for a topology to be parameterized, thus allowing individual pipelines to refer to different values,
     * such as individual cameras RTSP endpoints and credentials. Overall a topology is composed of the following:
     *
     * - Parameters: list of user defined parameters that can be references across the topology nodes.
     * - Sources: list of one or more data sources nodes such as an RTSP source which allows for media to be ingested
     * from cameras.
     * - Processors: list of nodes which perform data analysis or transformations.
     * -Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
     *
     * @return the pipelineTopology value.
     */
    public PipelineTopology getPipelineTopology() {
        return this.pipelineTopology;
    }

    /**
     * Get the methodName property: method name.
     *
     * @return the methodName value.
     */
    public String getMethodName() {
        return this.methodName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@apiVersion", getApiVersion());
        jsonWriter.writeJsonField("pipelineTopology", this.pipelineTopology);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineTopologySetRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineTopologySetRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PipelineTopologySetRequest.
     */
    public static PipelineTopologySetRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String apiVersion = null;
            boolean pipelineTopologyFound = false;
            PipelineTopology pipelineTopology = null;
            String methodName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("@apiVersion".equals(fieldName)) {
                    apiVersion = reader.getString();
                } else if ("pipelineTopology".equals(fieldName)) {
                    pipelineTopology = PipelineTopology.fromJson(reader);
                    pipelineTopologyFound = true;
                } else if ("methodName".equals(fieldName)) {
                    methodName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (pipelineTopologyFound) {
                PipelineTopologySetRequest deserializedPipelineTopologySetRequest
                    = new PipelineTopologySetRequest(pipelineTopology);
                deserializedPipelineTopologySetRequest.setApiVersion(apiVersion);
                deserializedPipelineTopologySetRequest.methodName = methodName;
                return deserializedPipelineTopologySetRequest;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!pipelineTopologyFound) {
                missingProperties.add("pipelineTopology");
            }
            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }

    /**
     * Get the payload as JSON: the serialized form of the request body
     *
     * @throws UncheckedIOException UncheckedIOException
     * @return the payload as JSON
     */
    public String getPayloadAsJson() {
        return new PipelineTopologySetRequestBody(this.pipelineTopology.getName())
            .setSystemData(this.pipelineTopology.getSystemData())
            .setProperties(this.pipelineTopology.getProperties())
            .getPayloadAsJson();
    }
}
