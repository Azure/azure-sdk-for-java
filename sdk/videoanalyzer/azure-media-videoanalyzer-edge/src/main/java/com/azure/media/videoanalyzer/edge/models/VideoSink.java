// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/** Enables a pipeline topology to record media to an Azure Video Analyzer video for subsequent playback. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type")
@JsonTypeName("#Microsoft.VideoAnalyzer.VideoSink")
@Fluent
public final class VideoSink extends SinkNodeBase {
    /*
     * Name of a new or existing Video Analyzer video entity to use as media
     * output.
     */
    @JsonProperty(value = "videoName", required = true)
    private String videoName;

    /*
     * Optional properties which will be used only if a video is being created.
     */
    @JsonProperty(value = "videoCreationProperties")
    private VideoCreationProperties videoCreationProperties;

    /*
     * Path to a local file system directory for temporary caching of media
     * before writing to a video. This local cache will grow if the connection
     * to Azure is not stable.
     */
    @JsonProperty(value = "localMediaCachePath", required = true)
    private String localMediaCachePath;

    /*
     * Maximum amount of disk space that can be used for temporary caching of
     * media.
     */
    @JsonProperty(value = "localMediaCacheMaximumSizeMiB", required = true)
    private String localMediaCacheMaximumSizeMiB;

    /**
     * Creates an instance of VideoSink class.
     *
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param videoName the videoName value to set.
     * @param localMediaCachePath the localMediaCachePath value to set.
     * @param localMediaCacheMaximumSizeMiB the localMediaCacheMaximumSizeMiB value to set.
     */
    @JsonCreator
    public VideoSink(
            @JsonProperty(value = "name", required = true) String name,
            @JsonProperty(value = "inputs", required = true) List<NodeInput> inputs,
            @JsonProperty(value = "videoName", required = true) String videoName,
            @JsonProperty(value = "localMediaCachePath", required = true) String localMediaCachePath,
            @JsonProperty(value = "localMediaCacheMaximumSizeMiB", required = true)
                    String localMediaCacheMaximumSizeMiB) {
        super(name, inputs);
        this.videoName = videoName;
        this.localMediaCachePath = localMediaCachePath;
        this.localMediaCacheMaximumSizeMiB = localMediaCacheMaximumSizeMiB;
    }

    /**
     * Get the videoName property: Name of a new or existing Video Analyzer video entity to use as media output.
     *
     * @return the videoName value.
     */
    public String getVideoName() {
        return this.videoName;
    }

    /**
     * Get the videoCreationProperties property: Optional properties which will be used only if a video is being
     * created.
     *
     * @return the videoCreationProperties value.
     */
    public VideoCreationProperties getVideoCreationProperties() {
        return this.videoCreationProperties;
    }

    /**
     * Set the videoCreationProperties property: Optional properties which will be used only if a video is being
     * created.
     *
     * @param videoCreationProperties the videoCreationProperties value to set.
     * @return the VideoSink object itself.
     */
    public VideoSink setVideoCreationProperties(VideoCreationProperties videoCreationProperties) {
        this.videoCreationProperties = videoCreationProperties;
        return this;
    }

    /**
     * Get the localMediaCachePath property: Path to a local file system directory for temporary caching of media before
     * writing to a video. This local cache will grow if the connection to Azure is not stable.
     *
     * @return the localMediaCachePath value.
     */
    public String getLocalMediaCachePath() {
        return this.localMediaCachePath;
    }

    /**
     * Get the localMediaCacheMaximumSizeMiB property: Maximum amount of disk space that can be used for temporary
     * caching of media.
     *
     * @return the localMediaCacheMaximumSizeMiB value.
     */
    public String getLocalMediaCacheMaximumSizeMiB() {
        return this.localMediaCacheMaximumSizeMiB;
    }
}
