// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Image scaling mode.
 */
@Fluent
public final class ImageScale implements JsonSerializable<ImageScale> {
    /*
     * Describes the image scaling mode to be applied. Default mode is 'pad'.
     */
    private ImageScaleMode mode;

    /*
     * The desired output image width.
     */
    private String width;

    /*
     * The desired output image height.
     */
    private String height;

    /**
     * Creates an instance of ImageScale class.
     */
    public ImageScale() {
    }

    /**
     * Get the mode property: Describes the image scaling mode to be applied. Default mode is 'pad'.
     * 
     * @return the mode value.
     */
    public ImageScaleMode getMode() {
        return this.mode;
    }

    /**
     * Set the mode property: Describes the image scaling mode to be applied. Default mode is 'pad'.
     * 
     * @param mode the mode value to set.
     * @return the ImageScale object itself.
     */
    public ImageScale setMode(ImageScaleMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the width property: The desired output image width.
     * 
     * @return the width value.
     */
    public String getWidth() {
        return this.width;
    }

    /**
     * Set the width property: The desired output image width.
     * 
     * @param width the width value to set.
     * @return the ImageScale object itself.
     */
    public ImageScale setWidth(String width) {
        this.width = width;
        return this;
    }

    /**
     * Get the height property: The desired output image height.
     * 
     * @return the height value.
     */
    public String getHeight() {
        return this.height;
    }

    /**
     * Set the height property: The desired output image height.
     * 
     * @param height the height value to set.
     * @return the ImageScale object itself.
     */
    public ImageScale setHeight(String height) {
        this.height = height;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeStringField("width", this.width);
        jsonWriter.writeStringField("height", this.height);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageScale from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageScale if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the ImageScale.
     */
    public static ImageScale fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageScale deserializedImageScale = new ImageScale();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedImageScale.mode = ImageScaleMode.fromString(reader.getString());
                } else if ("width".equals(fieldName)) {
                    deserializedImageScale.width = reader.getString();
                } else if ("height".equals(fieldName)) {
                    deserializedImageScale.height = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageScale;
        });
    }
}
