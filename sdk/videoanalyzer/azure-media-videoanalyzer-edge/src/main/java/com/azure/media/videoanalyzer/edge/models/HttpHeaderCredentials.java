// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * HTTP header credentials.
 */
@Immutable
public final class HttpHeaderCredentials extends CredentialsBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.HttpHeaderCredentials";

    /*
     * HTTP header name.
     */
    private final String headerName;

    /*
     * HTTP header value. It is recommended that this value is parameterized as a secret string in order to prevent this
     * value to be returned as part of the resource on API requests.
     */
    private final String headerValue;

    /**
     * Creates an instance of HttpHeaderCredentials class.
     * 
     * @param headerName the headerName value to set.
     * @param headerValue the headerValue value to set.
     */
    public HttpHeaderCredentials(String headerName, String headerValue) {
        this.headerName = headerName;
        this.headerValue = headerValue;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the headerName property: HTTP header name.
     * 
     * @return the headerName value.
     */
    public String getHeaderName() {
        return this.headerName;
    }

    /**
     * Get the headerValue property: HTTP header value. It is recommended that this value is parameterized as a secret
     * string in order to prevent this value to be returned as part of the resource on API requests.
     * 
     * @return the headerValue value.
     */
    public String getHeaderValue() {
        return this.headerValue;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("headerName", this.headerName);
        jsonWriter.writeStringField("headerValue", this.headerValue);
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HttpHeaderCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HttpHeaderCredentials if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HttpHeaderCredentials.
     */
    public static HttpHeaderCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean headerNameFound = false;
            String headerName = null;
            boolean headerValueFound = false;
            String headerValue = null;
            String type = "#Microsoft.VideoAnalyzer.HttpHeaderCredentials";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("headerName".equals(fieldName)) {
                    headerName = reader.getString();
                    headerNameFound = true;
                } else if ("headerValue".equals(fieldName)) {
                    headerValue = reader.getString();
                    headerValueFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (headerNameFound && headerValueFound) {
                HttpHeaderCredentials deserializedHttpHeaderCredentials
                    = new HttpHeaderCredentials(headerName, headerValue);
                deserializedHttpHeaderCredentials.type = type;

                return deserializedHttpHeaderCredentials;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!headerNameFound) {
                missingProperties.add("headerName");
            }
            if (!headerValueFound) {
                missingProperties.add("headerValue");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
