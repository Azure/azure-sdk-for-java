// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The discovered properties of the ONVIF device that are returned during the discovery.
 */
@Fluent
public final class DiscoveredOnvifDevice implements JsonSerializable<DiscoveredOnvifDevice> {
    /*
     * The unique identifier of the ONVIF device that was discovered in the same subnet as the IoT Edge device.
     */
    private String serviceIdentifier;

    /*
     * The IP address of the ONVIF device that was discovered in the same subnet as the IoT Edge device.
     */
    private String remoteIPAddress;

    /*
     * An array of hostnames for the ONVIF discovered devices that are in the same subnet as the IoT Edge device.
     */
    private List<String> scopes;

    /*
     * An array of media profile endpoints that the ONVIF discovered device supports.
     */
    private List<String> endpoints;

    /**
     * Creates an instance of DiscoveredOnvifDevice class.
     */
    public DiscoveredOnvifDevice() {
    }

    /**
     * Get the serviceIdentifier property: The unique identifier of the ONVIF device that was discovered in the same
     * subnet as the IoT Edge device.
     * 
     * @return the serviceIdentifier value.
     */
    public String getServiceIdentifier() {
        return this.serviceIdentifier;
    }

    /**
     * Set the serviceIdentifier property: The unique identifier of the ONVIF device that was discovered in the same
     * subnet as the IoT Edge device.
     * 
     * @param serviceIdentifier the serviceIdentifier value to set.
     * @return the DiscoveredOnvifDevice object itself.
     */
    public DiscoveredOnvifDevice setServiceIdentifier(String serviceIdentifier) {
        this.serviceIdentifier = serviceIdentifier;
        return this;
    }

    /**
     * Get the remoteIPAddress property: The IP address of the ONVIF device that was discovered in the same subnet as
     * the IoT Edge device.
     * 
     * @return the remoteIPAddress value.
     */
    public String getRemoteIPAddress() {
        return this.remoteIPAddress;
    }

    /**
     * Set the remoteIPAddress property: The IP address of the ONVIF device that was discovered in the same subnet as
     * the IoT Edge device.
     * 
     * @param remoteIPAddress the remoteIPAddress value to set.
     * @return the DiscoveredOnvifDevice object itself.
     */
    public DiscoveredOnvifDevice setRemoteIPAddress(String remoteIPAddress) {
        this.remoteIPAddress = remoteIPAddress;
        return this;
    }

    /**
     * Get the scopes property: An array of hostnames for the ONVIF discovered devices that are in the same subnet as
     * the IoT Edge device.
     * 
     * @return the scopes value.
     */
    public List<String> getScopes() {
        return this.scopes;
    }

    /**
     * Set the scopes property: An array of hostnames for the ONVIF discovered devices that are in the same subnet as
     * the IoT Edge device.
     * 
     * @param scopes the scopes value to set.
     * @return the DiscoveredOnvifDevice object itself.
     */
    public DiscoveredOnvifDevice setScopes(List<String> scopes) {
        this.scopes = scopes;
        return this;
    }

    /**
     * Get the endpoints property: An array of media profile endpoints that the ONVIF discovered device supports.
     * 
     * @return the endpoints value.
     */
    public List<String> getEndpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: An array of media profile endpoints that the ONVIF discovered device supports.
     * 
     * @param endpoints the endpoints value to set.
     * @return the DiscoveredOnvifDevice object itself.
     */
    public DiscoveredOnvifDevice setEndpoints(List<String> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceIdentifier", this.serviceIdentifier);
        jsonWriter.writeStringField("remoteIPAddress", this.remoteIPAddress);
        jsonWriter.writeArrayField("scopes", this.scopes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveredOnvifDevice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveredOnvifDevice if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiscoveredOnvifDevice.
     */
    public static DiscoveredOnvifDevice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveredOnvifDevice deserializedDiscoveredOnvifDevice = new DiscoveredOnvifDevice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceIdentifier".equals(fieldName)) {
                    deserializedDiscoveredOnvifDevice.serviceIdentifier = reader.getString();
                } else if ("remoteIPAddress".equals(fieldName)) {
                    deserializedDiscoveredOnvifDevice.remoteIPAddress = reader.getString();
                } else if ("scopes".equals(fieldName)) {
                    List<String> scopes = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiscoveredOnvifDevice.scopes = scopes;
                } else if ("endpoints".equals(fieldName)) {
                    List<String> endpoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiscoveredOnvifDevice.endpoints = endpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveredOnvifDevice;
        });
    }
}
