// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Creates a new live pipeline or updates an existing one.
 */
@Fluent
public final class LivePipelineSetRequest extends MethodRequest {

    /*
     * Live Pipeline represents an unique instance of a pipeline topology which is used for real-time content ingestion
     * and analysis.
     */
    private final LivePipeline livePipeline;

    /*
     * method name
     */
    private String methodName;

    /**
     * Creates an instance of LivePipelineSetRequest class.
     *
     * @param livePipeline the livePipeline value to set.
     */
    public LivePipelineSetRequest(LivePipeline livePipeline) {
        this.livePipeline = livePipeline;
    }

    /**
     * Get the livePipeline property: Live Pipeline represents an unique instance of a pipeline topology which is used
     * for real-time content ingestion and analysis.
     *
     * @return the livePipeline value.
     */
    public LivePipeline getLivePipeline() {
        return this.livePipeline;
    }

    /**
     * Get the methodName property: method name.
     *
     * @return the methodName value.
     */
    public String getMethodName() {
        return this.methodName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("@apiVersion", getApiVersion());
        jsonWriter.writeJsonField("livePipeline", this.livePipeline);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivePipelineSetRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivePipelineSetRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivePipelineSetRequest.
     */
    public static LivePipelineSetRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String apiVersion = null;
            boolean livePipelineFound = false;
            LivePipeline livePipeline = null;
            String methodName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("@apiVersion".equals(fieldName)) {
                    apiVersion = reader.getString();
                } else if ("livePipeline".equals(fieldName)) {
                    livePipeline = LivePipeline.fromJson(reader);
                    livePipelineFound = true;
                } else if ("methodName".equals(fieldName)) {
                    methodName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (livePipelineFound) {
                LivePipelineSetRequest deserializedLivePipelineSetRequest = new LivePipelineSetRequest(livePipeline);
                deserializedLivePipelineSetRequest.setApiVersion(apiVersion);
                deserializedLivePipelineSetRequest.methodName = methodName;
                return deserializedLivePipelineSetRequest;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!livePipelineFound) {
                missingProperties.add("livePipeline");
            }
            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }

    /**
     * Get the payload as JSON: the serialized form of the request body
     *
     * @throws UncheckedIOException UncheckedIOException
     * @return the payload as JSON
     */
    public String getPayloadAsJson() {
        return new LivePipelineSetRequestBody(this.livePipeline.getName())
            .setSystemData(this.livePipeline.getSystemData())
            .setProperties(this.livePipeline.getProperties())
            .getPayloadAsJson();
    }
}
