// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Remote device adapter properties.
 */
@Fluent
public final class RemoteDeviceAdapterProperties implements JsonSerializable<RemoteDeviceAdapterProperties> {
    /*
     * An optional description for the remote device adapter.
     */
    private String description;

    /*
     * The IoT device to which this remote device will connect.
     */
    private final RemoteDeviceAdapterTarget target;

    /*
     * Information that enables communication between the IoT Hub and the IoT device - allowing this edge module to act
     * as a transparent gateway between the two.
     */
    private final IotHubDeviceConnection iotHubDeviceConnection;

    /**
     * Creates an instance of RemoteDeviceAdapterProperties class.
     * 
     * @param target the target value to set.
     * @param iotHubDeviceConnection the iotHubDeviceConnection value to set.
     */
    public RemoteDeviceAdapterProperties(RemoteDeviceAdapterTarget target,
        IotHubDeviceConnection iotHubDeviceConnection) {
        this.target = target;
        this.iotHubDeviceConnection = iotHubDeviceConnection;
    }

    /**
     * Get the description property: An optional description for the remote device adapter.
     * 
     * @return the description value.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: An optional description for the remote device adapter.
     * 
     * @param description the description value to set.
     * @return the RemoteDeviceAdapterProperties object itself.
     */
    public RemoteDeviceAdapterProperties setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the target property: The IoT device to which this remote device will connect.
     * 
     * @return the target value.
     */
    public RemoteDeviceAdapterTarget getTarget() {
        return this.target;
    }

    /**
     * Get the iotHubDeviceConnection property: Information that enables communication between the IoT Hub and the IoT
     * device - allowing this edge module to act as a transparent gateway between the two.
     * 
     * @return the iotHubDeviceConnection value.
     */
    public IotHubDeviceConnection getIotHubDeviceConnection() {
        return this.iotHubDeviceConnection;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeJsonField("iotHubDeviceConnection", this.iotHubDeviceConnection);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RemoteDeviceAdapterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RemoteDeviceAdapterProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RemoteDeviceAdapterProperties.
     */
    public static RemoteDeviceAdapterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean targetFound = false;
            RemoteDeviceAdapterTarget target = null;
            boolean iotHubDeviceConnectionFound = false;
            IotHubDeviceConnection iotHubDeviceConnection = null;
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("target".equals(fieldName)) {
                    target = RemoteDeviceAdapterTarget.fromJson(reader);
                    targetFound = true;
                } else if ("iotHubDeviceConnection".equals(fieldName)) {
                    iotHubDeviceConnection = IotHubDeviceConnection.fromJson(reader);
                    iotHubDeviceConnectionFound = true;
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (targetFound && iotHubDeviceConnectionFound) {
                RemoteDeviceAdapterProperties deserializedRemoteDeviceAdapterProperties
                    = new RemoteDeviceAdapterProperties(target, iotHubDeviceConnection);
                deserializedRemoteDeviceAdapterProperties.description = description;

                return deserializedRemoteDeviceAdapterProperties;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!targetFound) {
                missingProperties.add("target");
            }
            if (!iotHubDeviceConnectionFound) {
                missingProperties.add("iotHubDeviceConnection");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
