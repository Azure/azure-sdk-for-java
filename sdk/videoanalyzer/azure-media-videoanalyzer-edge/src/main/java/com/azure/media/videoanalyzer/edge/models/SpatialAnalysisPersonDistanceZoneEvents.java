// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SpatialAnalysisPersonDistanceZoneEvents model.
 */
@Fluent
public final class SpatialAnalysisPersonDistanceZoneEvents
    implements JsonSerializable<SpatialAnalysisPersonDistanceZoneEvents> {
    /*
     * The named zone.
     */
    private final NamedPolygonBase zone;

    /*
     * The event configuration.
     */
    private List<SpatialAnalysisPersonDistanceEvent> events;

    /**
     * Creates an instance of SpatialAnalysisPersonDistanceZoneEvents class.
     * 
     * @param zone the zone value to set.
     */
    public SpatialAnalysisPersonDistanceZoneEvents(NamedPolygonBase zone) {
        this.zone = zone;
    }

    /**
     * Get the zone property: The named zone.
     * 
     * @return the zone value.
     */
    public NamedPolygonBase getZone() {
        return this.zone;
    }

    /**
     * Get the events property: The event configuration.
     * 
     * @return the events value.
     */
    public List<SpatialAnalysisPersonDistanceEvent> getEvents() {
        return this.events;
    }

    /**
     * Set the events property: The event configuration.
     * 
     * @param events the events value to set.
     * @return the SpatialAnalysisPersonDistanceZoneEvents object itself.
     */
    public SpatialAnalysisPersonDistanceZoneEvents setEvents(List<SpatialAnalysisPersonDistanceEvent> events) {
        this.events = events;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("zone", this.zone);
        jsonWriter.writeArrayField("events", this.events, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SpatialAnalysisPersonDistanceZoneEvents from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SpatialAnalysisPersonDistanceZoneEvents if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SpatialAnalysisPersonDistanceZoneEvents.
     */
    public static SpatialAnalysisPersonDistanceZoneEvents fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean zoneFound = false;
            NamedPolygonBase zone = null;
            List<SpatialAnalysisPersonDistanceEvent> events = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("zone".equals(fieldName)) {
                    zone = NamedPolygonBase.fromJson(reader);
                    zoneFound = true;
                } else if ("events".equals(fieldName)) {
                    events = reader.readArray(reader1 -> SpatialAnalysisPersonDistanceEvent.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            if (zoneFound) {
                SpatialAnalysisPersonDistanceZoneEvents deserializedSpatialAnalysisPersonDistanceZoneEvents
                    = new SpatialAnalysisPersonDistanceZoneEvents(zone);
                deserializedSpatialAnalysisPersonDistanceZoneEvents.events = events;

                return deserializedSpatialAnalysisPersonDistanceZoneEvents;
            }
            throw new IllegalStateException("Missing required property: zone");
        });
    }
}
