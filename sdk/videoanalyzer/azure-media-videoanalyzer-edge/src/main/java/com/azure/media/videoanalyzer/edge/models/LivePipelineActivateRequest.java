// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Activates an existing live pipeline.
 */
@Fluent
public final class LivePipelineActivateRequest extends MethodRequestEmptyBodyBase {

    /*
     * method name
     */
    private String methodName;

    /**
     * Creates an instance of LivePipelineActivateRequest class.
     *
     * @param name the name value to set.
     */
    public LivePipelineActivateRequest(String name) {
        super(name);
    }

    /**
     * Get the methodName property: method name.
     *
     * @return the methodName value.
     */
    public String getMethodName() {
        return this.methodName;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("@apiVersion", getApiVersion());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivePipelineActivateRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivePipelineActivateRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivePipelineActivateRequest.
     */
    public static LivePipelineActivateRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            String apiVersion = null;
            String methodName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("@apiVersion".equals(fieldName)) {
                    apiVersion = reader.getString();
                } else if ("methodName".equals(fieldName)) {
                    methodName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound) {
                LivePipelineActivateRequest deserializedLivePipelineActivateRequest
                    = new LivePipelineActivateRequest(name);
                deserializedLivePipelineActivateRequest.setApiVersion(apiVersion);
                deserializedLivePipelineActivateRequest.methodName = methodName;
                return deserializedLivePipelineActivateRequest;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
