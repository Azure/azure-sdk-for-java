// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Username and password credentials.
 */
@Immutable
public final class UsernamePasswordCredentials extends CredentialsBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials";

    /*
     * Username to be presented as part of the credentials.
     */
    private final String username;

    /*
     * Password to be presented as part of the credentials. It is recommended that this value is parameterized as a
     * secret string in order to prevent this value to be returned as part of the resource on API requests.
     */
    private final String password;

    /**
     * Creates an instance of UsernamePasswordCredentials class.
     * 
     * @param username the username value to set.
     * @param password the password value to set.
     */
    public UsernamePasswordCredentials(String username, String password) {
        this.username = username;
        this.password = password;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the username property: Username to be presented as part of the credentials.
     * 
     * @return the username value.
     */
    public String getUsername() {
        return this.username;
    }

    /**
     * Get the password property: Password to be presented as part of the credentials. It is recommended that this value
     * is parameterized as a secret string in order to prevent this value to be returned as part of the resource on API
     * requests.
     * 
     * @return the password value.
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsernamePasswordCredentials from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsernamePasswordCredentials if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UsernamePasswordCredentials.
     */
    public static UsernamePasswordCredentials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean usernameFound = false;
            String username = null;
            boolean passwordFound = false;
            String password = null;
            String type = "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("username".equals(fieldName)) {
                    username = reader.getString();
                    usernameFound = true;
                } else if ("password".equals(fieldName)) {
                    password = reader.getString();
                    passwordFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (usernameFound && passwordFound) {
                UsernamePasswordCredentials deserializedUsernamePasswordCredentials
                    = new UsernamePasswordCredentials(username, password);
                deserializedUsernamePasswordCredentials.type = type;

                return deserializedUsernamePasswordCredentials;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!usernameFound) {
                missingProperties.add("username");
            }
            if (!passwordFound) {
                missingProperties.add("password");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
