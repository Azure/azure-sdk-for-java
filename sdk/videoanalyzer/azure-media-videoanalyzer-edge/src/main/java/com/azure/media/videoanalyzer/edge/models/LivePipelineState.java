// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.util.ExpandableStringEnum;
import java.util.Collection;

/**
 * Current pipeline state (read-only).
 */
public final class LivePipelineState extends ExpandableStringEnum<LivePipelineState> {
    /**
     * The live pipeline is idle and not processing media.
     */
    public static final LivePipelineState INACTIVE = fromString("inactive");

    /**
     * The live pipeline is transitioning into the active state.
     */
    public static final LivePipelineState ACTIVATING = fromString("activating");

    /**
     * The live pipeline is active and able to process media. If your data source is not available, for instance, if
     * your RTSP camera is powered off or unreachable, the pipeline will still be active and periodically retrying the
     * connection. Your Azure subscription will be billed for the duration in which the live pipeline is in the active
     * state.
     */
    public static final LivePipelineState ACTIVE = fromString("active");

    /**
     * The live pipeline is transitioning into the inactive state.
     */
    public static final LivePipelineState DEACTIVATING = fromString("deactivating");

    /**
     * Creates a new instance of LivePipelineState value.
     * 
     * @deprecated Use the {@link #fromString(String)} factory method.
     */
    @Deprecated
    public LivePipelineState() {
    }

    /**
     * Creates or finds a LivePipelineState from its string representation.
     * 
     * @param name a name to look for.
     * @return the corresponding LivePipelineState.
     */
    public static LivePipelineState fromString(String name) {
        return fromString(name, LivePipelineState.class);
    }

    /**
     * Gets known LivePipelineState values.
     * 
     * @return known LivePipelineState values.
     */
    public static Collection<LivePipelineState> values() {
        return values(LivePipelineState.class);
    }
}
