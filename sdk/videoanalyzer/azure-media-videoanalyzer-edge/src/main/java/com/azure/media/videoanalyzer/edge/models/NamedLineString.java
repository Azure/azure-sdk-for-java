// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Describes a line configuration.
 */
@Immutable
public final class NamedLineString extends NamedLineBase {
    /*
     * The Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.NamedLineString";

    /*
     * Point coordinates for the line start and end, respectively. Example: '[[0.3, 0.2],[0.9, 0.8]]'. Each point is
     * expressed as [LEFT, TOP] coordinate ratios ranging from 0.0 to 1.0, where [0,0] is the upper-left frame corner
     * and [1, 1] is the bottom-right frame corner.
     */
    private final String line;

    /**
     * Creates an instance of NamedLineString class.
     * 
     * @param name the name value to set.
     * @param line the line value to set.
     */
    public NamedLineString(String name, String line) {
        super(name);
        this.line = line;
    }

    /**
     * Get the type property: The Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the line property: Point coordinates for the line start and end, respectively. Example: '[[0.3, 0.2],[0.9,
     * 0.8]]'. Each point is expressed as [LEFT, TOP] coordinate ratios ranging from 0.0 to 1.0, where [0,0] is the
     * upper-left frame corner and [1, 1] is the bottom-right frame corner.
     * 
     * @return the line value.
     */
    public String getLine() {
        return this.line;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeStringField("line", this.line);
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NamedLineString from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NamedLineString if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NamedLineString.
     */
    public static NamedLineString fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean lineFound = false;
            String line = null;
            String type = "#Microsoft.VideoAnalyzer.NamedLineString";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("line".equals(fieldName)) {
                    line = reader.getString();
                    lineFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && lineFound) {
                NamedLineString deserializedNamedLineString = new NamedLineString(name, line);
                deserializedNamedLineString.type = type;

                return deserializedNamedLineString;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!lineFound) {
                missingProperties.add("line");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
