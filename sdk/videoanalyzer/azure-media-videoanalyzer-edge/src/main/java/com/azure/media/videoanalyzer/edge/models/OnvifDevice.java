// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ONVIF device properties.
 */
@Fluent
public final class OnvifDevice implements JsonSerializable<OnvifDevice> {
    /*
     * The hostname of the ONVIF device.
     */
    private OnvifHostName hostname;

    /*
     * The system date and time of the ONVIF device.
     */
    private OnvifSystemDateTime systemDateTime;

    /*
     * The ONVIF device DNS properties.
     */
    private OnvifDns dns;

    /*
     * An array of of ONVIF media profiles supported by the ONVIF device.
     */
    private List<MediaProfile> mediaProfiles;

    /**
     * Creates an instance of OnvifDevice class.
     */
    public OnvifDevice() {
    }

    /**
     * Get the hostname property: The hostname of the ONVIF device.
     * 
     * @return the hostname value.
     */
    public OnvifHostName getHostname() {
        return this.hostname;
    }

    /**
     * Set the hostname property: The hostname of the ONVIF device.
     * 
     * @param hostname the hostname value to set.
     * @return the OnvifDevice object itself.
     */
    public OnvifDevice setHostname(OnvifHostName hostname) {
        this.hostname = hostname;
        return this;
    }

    /**
     * Get the systemDateTime property: The system date and time of the ONVIF device.
     * 
     * @return the systemDateTime value.
     */
    public OnvifSystemDateTime getSystemDateTime() {
        return this.systemDateTime;
    }

    /**
     * Set the systemDateTime property: The system date and time of the ONVIF device.
     * 
     * @param systemDateTime the systemDateTime value to set.
     * @return the OnvifDevice object itself.
     */
    public OnvifDevice setSystemDateTime(OnvifSystemDateTime systemDateTime) {
        this.systemDateTime = systemDateTime;
        return this;
    }

    /**
     * Get the dns property: The ONVIF device DNS properties.
     * 
     * @return the dns value.
     */
    public OnvifDns getDns() {
        return this.dns;
    }

    /**
     * Set the dns property: The ONVIF device DNS properties.
     * 
     * @param dns the dns value to set.
     * @return the OnvifDevice object itself.
     */
    public OnvifDevice setDns(OnvifDns dns) {
        this.dns = dns;
        return this;
    }

    /**
     * Get the mediaProfiles property: An array of of ONVIF media profiles supported by the ONVIF device.
     * 
     * @return the mediaProfiles value.
     */
    public List<MediaProfile> getMediaProfiles() {
        return this.mediaProfiles;
    }

    /**
     * Set the mediaProfiles property: An array of of ONVIF media profiles supported by the ONVIF device.
     * 
     * @param mediaProfiles the mediaProfiles value to set.
     * @return the OnvifDevice object itself.
     */
    public OnvifDevice setMediaProfiles(List<MediaProfile> mediaProfiles) {
        this.mediaProfiles = mediaProfiles;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hostname", this.hostname);
        jsonWriter.writeJsonField("systemDateTime", this.systemDateTime);
        jsonWriter.writeJsonField("dns", this.dns);
        jsonWriter.writeArrayField("mediaProfiles", this.mediaProfiles, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OnvifDevice from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OnvifDevice if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OnvifDevice.
     */
    public static OnvifDevice fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OnvifDevice deserializedOnvifDevice = new OnvifDevice();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("hostname".equals(fieldName)) {
                    deserializedOnvifDevice.hostname = OnvifHostName.fromJson(reader);
                } else if ("systemDateTime".equals(fieldName)) {
                    deserializedOnvifDevice.systemDateTime = OnvifSystemDateTime.fromJson(reader);
                } else if ("dns".equals(fieldName)) {
                    deserializedOnvifDevice.dns = OnvifDns.fromJson(reader);
                } else if ("mediaProfiles".equals(fieldName)) {
                    List<MediaProfile> mediaProfiles = reader.readArray(reader1 -> MediaProfile.fromJson(reader1));
                    deserializedOnvifDevice.mediaProfiles = mediaProfiles;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOnvifDevice;
        });
    }
}
