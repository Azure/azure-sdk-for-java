// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * File sink allows for video and audio content to be recorded on the file system on the edge device.
 */
@Immutable
public final class FileSink extends SinkNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.FileSink";

    /*
     * Absolute directory path where media files will be stored.
     */
    private final String baseDirectoryPath;

    /*
     * File name pattern for creating new files when performing event based recording. The pattern must include at least
     * one system variable.
     */
    private final String fileNamePattern;

    /*
     * Maximum amount of disk space that can be used for storing files from this sink. Once this limit is reached, the
     * oldest files from this sink will be automatically deleted.
     */
    private final String maximumSizeMiB;

    /**
     * Creates an instance of FileSink class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param baseDirectoryPath the baseDirectoryPath value to set.
     * @param fileNamePattern the fileNamePattern value to set.
     * @param maximumSizeMiB the maximumSizeMiB value to set.
     */
    public FileSink(String name, List<NodeInput> inputs, String baseDirectoryPath, String fileNamePattern,
        String maximumSizeMiB) {
        super(name, inputs);
        this.baseDirectoryPath = baseDirectoryPath;
        this.fileNamePattern = fileNamePattern;
        this.maximumSizeMiB = maximumSizeMiB;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the baseDirectoryPath property: Absolute directory path where media files will be stored.
     * 
     * @return the baseDirectoryPath value.
     */
    public String getBaseDirectoryPath() {
        return this.baseDirectoryPath;
    }

    /**
     * Get the fileNamePattern property: File name pattern for creating new files when performing event based recording.
     * The pattern must include at least one system variable.
     * 
     * @return the fileNamePattern value.
     */
    public String getFileNamePattern() {
        return this.fileNamePattern;
    }

    /**
     * Get the maximumSizeMiB property: Maximum amount of disk space that can be used for storing files from this sink.
     * Once this limit is reached, the oldest files from this sink will be automatically deleted.
     * 
     * @return the maximumSizeMiB value.
     */
    public String getMaximumSizeMiB() {
        return this.maximumSizeMiB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("baseDirectoryPath", this.baseDirectoryPath);
        jsonWriter.writeStringField("fileNamePattern", this.fileNamePattern);
        jsonWriter.writeStringField("maximumSizeMiB", this.maximumSizeMiB);
        jsonWriter.writeStringField("@type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FileSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FileSink if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FileSink.
     */
    public static FileSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            boolean baseDirectoryPathFound = false;
            String baseDirectoryPath = null;
            boolean fileNamePatternFound = false;
            String fileNamePattern = null;
            boolean maximumSizeMiBFound = false;
            String maximumSizeMiB = null;
            String type = "#Microsoft.VideoAnalyzer.FileSink";
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("baseDirectoryPath".equals(fieldName)) {
                    baseDirectoryPath = reader.getString();
                    baseDirectoryPathFound = true;
                } else if ("fileNamePattern".equals(fieldName)) {
                    fileNamePattern = reader.getString();
                    fileNamePatternFound = true;
                } else if ("maximumSizeMiB".equals(fieldName)) {
                    maximumSizeMiB = reader.getString();
                    maximumSizeMiBFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound && baseDirectoryPathFound && fileNamePatternFound && maximumSizeMiBFound) {
                FileSink deserializedFileSink
                    = new FileSink(name, inputs, baseDirectoryPath, fileNamePattern, maximumSizeMiB);
                deserializedFileSink.type = type;

                return deserializedFileSink;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }
            if (!baseDirectoryPathFound) {
                missingProperties.add("baseDirectoryPath");
            }
            if (!fileNamePatternFound) {
                missingProperties.add("fileNamePattern");
            }
            if (!maximumSizeMiBFound) {
                missingProperties.add("maximumSizeMiB");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
