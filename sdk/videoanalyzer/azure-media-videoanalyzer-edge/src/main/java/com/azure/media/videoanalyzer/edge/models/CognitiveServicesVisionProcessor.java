// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A processor that allows the pipeline topology to send video frames to a Cognitive Services Vision extension.
 * Inference results are relayed to downstream nodes.
 */
@Fluent
public final class CognitiveServicesVisionProcessor extends ProcessorNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor";

    /*
     * Endpoint to which this processor should connect.
     */
    private final EndpointBase endpoint;

    /*
     * Describes the parameters of the image that is sent as input to the endpoint.
     */
    private ImageProperties image;

    /*
     * Describes the sampling options to be applied when forwarding samples to the extension.
     */
    private SamplingOptions samplingOptions;

    /*
     * Describes the Spatial Analysis operation to be used in the Cognitive Services Vision processor.
     */
    private final SpatialAnalysisOperationBase operation;

    /**
     * Creates an instance of CognitiveServicesVisionProcessor class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param endpoint the endpoint value to set.
     * @param operation the operation value to set.
     */
    public CognitiveServicesVisionProcessor(String name, List<NodeInput> inputs, EndpointBase endpoint,
        SpatialAnalysisOperationBase operation) {
        super(name, inputs);
        this.endpoint = endpoint;
        this.operation = operation;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the endpoint property: Endpoint to which this processor should connect.
     * 
     * @return the endpoint value.
     */
    public EndpointBase getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get the image property: Describes the parameters of the image that is sent as input to the endpoint.
     * 
     * @return the image value.
     */
    public ImageProperties getImage() {
        return this.image;
    }

    /**
     * Set the image property: Describes the parameters of the image that is sent as input to the endpoint.
     * 
     * @param image the image value to set.
     * @return the CognitiveServicesVisionProcessor object itself.
     */
    public CognitiveServicesVisionProcessor setImage(ImageProperties image) {
        this.image = image;
        return this;
    }

    /**
     * Get the samplingOptions property: Describes the sampling options to be applied when forwarding samples to the
     * extension.
     * 
     * @return the samplingOptions value.
     */
    public SamplingOptions getSamplingOptions() {
        return this.samplingOptions;
    }

    /**
     * Set the samplingOptions property: Describes the sampling options to be applied when forwarding samples to the
     * extension.
     * 
     * @param samplingOptions the samplingOptions value to set.
     * @return the CognitiveServicesVisionProcessor object itself.
     */
    public CognitiveServicesVisionProcessor setSamplingOptions(SamplingOptions samplingOptions) {
        this.samplingOptions = samplingOptions;
        return this;
    }

    /**
     * Get the operation property: Describes the Spatial Analysis operation to be used in the Cognitive Services Vision
     * processor.
     * 
     * @return the operation value.
     */
    public SpatialAnalysisOperationBase getOperation() {
        return this.operation;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("endpoint", this.endpoint);
        jsonWriter.writeJsonField("operation", this.operation);
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeJsonField("image", this.image);
        jsonWriter.writeJsonField("samplingOptions", this.samplingOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CognitiveServicesVisionProcessor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CognitiveServicesVisionProcessor if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CognitiveServicesVisionProcessor.
     */
    public static CognitiveServicesVisionProcessor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            boolean endpointFound = false;
            EndpointBase endpoint = null;
            boolean operationFound = false;
            SpatialAnalysisOperationBase operation = null;
            String type = "#Microsoft.VideoAnalyzer.CognitiveServicesVisionProcessor";
            ImageProperties image = null;
            SamplingOptions samplingOptions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("endpoint".equals(fieldName)) {
                    endpoint = EndpointBase.fromJson(reader);
                    endpointFound = true;
                } else if ("operation".equals(fieldName)) {
                    operation = SpatialAnalysisOperationBase.fromJson(reader);
                    operationFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("image".equals(fieldName)) {
                    image = ImageProperties.fromJson(reader);
                } else if ("samplingOptions".equals(fieldName)) {
                    samplingOptions = SamplingOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound && endpointFound && operationFound) {
                CognitiveServicesVisionProcessor deserializedCognitiveServicesVisionProcessor
                    = new CognitiveServicesVisionProcessor(name, inputs, endpoint, operation);
                deserializedCognitiveServicesVisionProcessor.type = type;
                deserializedCognitiveServicesVisionProcessor.image = image;
                deserializedCognitiveServicesVisionProcessor.samplingOptions = samplingOptions;

                return deserializedCognitiveServicesVisionProcessor;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }
            if (!endpointFound) {
                missingProperties.add("endpoint");
            }
            if (!operationFound) {
                missingProperties.add("operation");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
