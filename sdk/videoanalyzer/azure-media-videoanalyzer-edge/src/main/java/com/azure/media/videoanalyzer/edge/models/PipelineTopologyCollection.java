// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A collection of pipeline topologies.
 */
@Fluent
public final class PipelineTopologyCollection implements JsonSerializable<PipelineTopologyCollection> {
    /*
     * List of pipeline topologies.
     */
    private List<PipelineTopology> value;

    /*
     * A continuation token to be used in subsequent calls when enumerating through the collection. This is returned
     * when the collection results won't fit in a single response.
     */
    private String continuationToken;

    /**
     * Creates an instance of PipelineTopologyCollection class.
     */
    public PipelineTopologyCollection() {
    }

    /**
     * Get the value property: List of pipeline topologies.
     * 
     * @return the value value.
     */
    public List<PipelineTopology> getValue() {
        return this.value;
    }

    /**
     * Set the value property: List of pipeline topologies.
     * 
     * @param value the value value to set.
     * @return the PipelineTopologyCollection object itself.
     */
    public PipelineTopologyCollection setValue(List<PipelineTopology> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the continuationToken property: A continuation token to be used in subsequent calls when enumerating through
     * the collection. This is returned when the collection results won't fit in a single response.
     * 
     * @return the continuationToken value.
     */
    public String getContinuationToken() {
        return this.continuationToken;
    }

    /**
     * Set the continuationToken property: A continuation token to be used in subsequent calls when enumerating through
     * the collection. This is returned when the collection results won't fit in a single response.
     * 
     * @param continuationToken the continuationToken value to set.
     * @return the PipelineTopologyCollection object itself.
     */
    public PipelineTopologyCollection setContinuationToken(String continuationToken) {
        this.continuationToken = continuationToken;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("@continuationToken", this.continuationToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PipelineTopologyCollection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PipelineTopologyCollection if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PipelineTopologyCollection.
     */
    public static PipelineTopologyCollection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PipelineTopologyCollection deserializedPipelineTopologyCollection = new PipelineTopologyCollection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<PipelineTopology> value = reader.readArray(reader1 -> PipelineTopology.fromJson(reader1));
                    deserializedPipelineTopologyCollection.value = value;
                } else if ("@continuationToken".equals(fieldName)) {
                    deserializedPipelineTopologyCollection.continuationToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPipelineTopologyCollection;
        });
    }
}
