// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Defines the parameter value of an specific pipeline topology parameter. See pipeline topology parameters for more
 * information.
 */
@Fluent
public final class ParameterDefinition implements JsonSerializable<ParameterDefinition> {
    /*
     * Name of the parameter declared in the pipeline topology.
     */
    private final String name;

    /*
     * Parameter value to be applied on this specific live pipeline.
     */
    private String value;

    /**
     * Creates an instance of ParameterDefinition class.
     * 
     * @param name the name value to set.
     */
    public ParameterDefinition(String name) {
        this.name = name;
    }

    /**
     * Get the name property: Name of the parameter declared in the pipeline topology.
     * 
     * @return the name value.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Get the value property: Parameter value to be applied on this specific live pipeline.
     * 
     * @return the value value.
     */
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: Parameter value to be applied on this specific live pipeline.
     * 
     * @param value the value value to set.
     * @return the ParameterDefinition object itself.
     */
    public ParameterDefinition setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ParameterDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ParameterDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ParameterDefinition.
     */
    public static ParameterDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            String value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound) {
                ParameterDefinition deserializedParameterDefinition = new ParameterDefinition(name);
                deserializedParameterDefinition.value = value;

                return deserializedParameterDefinition;
            }
            throw new IllegalStateException("Missing required property: name");
        });
    }
}
