// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Read-only system metadata associated with a resource.
 */
@Fluent
public final class SystemData implements JsonSerializable<SystemData> {
    /*
     * Date and time when this resource was first created. Value is represented in UTC according to the ISO8601 date
     * format.
     */
    private OffsetDateTime createdAt;

    /*
     * Date and time when this resource was last modified. Value is represented in UTC according to the ISO8601 date
     * format.
     */
    private OffsetDateTime lastModifiedAt;

    /**
     * Creates an instance of SystemData class.
     */
    public SystemData() {
    }

    /**
     * Get the createdAt property: Date and time when this resource was first created. Value is represented in UTC
     * according to the ISO8601 date format.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: Date and time when this resource was first created. Value is represented in UTC
     * according to the ISO8601 date format.
     * 
     * @param createdAt the createdAt value to set.
     * @return the SystemData object itself.
     */
    public SystemData setCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the lastModifiedAt property: Date and time when this resource was last modified. Value is represented in UTC
     * according to the ISO8601 date format.
     * 
     * @return the lastModifiedAt value.
     */
    public OffsetDateTime getLastModifiedAt() {
        return this.lastModifiedAt;
    }

    /**
     * Set the lastModifiedAt property: Date and time when this resource was last modified. Value is represented in UTC
     * according to the ISO8601 date format.
     * 
     * @param lastModifiedAt the lastModifiedAt value to set.
     * @return the SystemData object itself.
     */
    public SystemData setLastModifiedAt(OffsetDateTime lastModifiedAt) {
        this.lastModifiedAt = lastModifiedAt;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("lastModifiedAt",
            this.lastModifiedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SystemData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SystemData if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SystemData.
     */
    public static SystemData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SystemData deserializedSystemData = new SystemData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("createdAt".equals(fieldName)) {
                    deserializedSystemData.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedAt".equals(fieldName)) {
                    deserializedSystemData.lastModifiedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSystemData;
        });
    }
}
