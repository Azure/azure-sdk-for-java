// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * GRPC extension processor allows pipeline extension plugins to be connected to the pipeline through over a gRPC
 * channel. Extension plugins must act as an gRPC server. Please see https://aka.ms/ava-extension-grpc for details.
 */
@Fluent
public final class GrpcExtension extends ExtensionProcessorBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.GrpcExtension";

    /*
     * Specifies how media is transferred to the extension plugin.
     */
    private final GrpcExtensionDataTransfer dataTransfer;

    /*
     * An optional configuration string that is sent to the extension plugin. The configuration string is specific to
     * each custom extension and it not understood neither validated by Video Analyzer. Please see
     * https://aka.ms/ava-extension-grpc for details.
     */
    private String extensionConfiguration;

    /**
     * Creates an instance of GrpcExtension class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param endpoint the endpoint value to set.
     * @param image the image value to set.
     * @param dataTransfer the dataTransfer value to set.
     */
    public GrpcExtension(String name, List<NodeInput> inputs, EndpointBase endpoint, ImageProperties image,
        GrpcExtensionDataTransfer dataTransfer) {
        super(name, inputs, endpoint, image);
        this.dataTransfer = dataTransfer;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the dataTransfer property: Specifies how media is transferred to the extension plugin.
     * 
     * @return the dataTransfer value.
     */
    public GrpcExtensionDataTransfer getDataTransfer() {
        return this.dataTransfer;
    }

    /**
     * Get the extensionConfiguration property: An optional configuration string that is sent to the extension plugin.
     * The configuration string is specific to each custom extension and it not understood neither validated by Video
     * Analyzer. Please see https://aka.ms/ava-extension-grpc for details.
     * 
     * @return the extensionConfiguration value.
     */
    public String getExtensionConfiguration() {
        return this.extensionConfiguration;
    }

    /**
     * Set the extensionConfiguration property: An optional configuration string that is sent to the extension plugin.
     * The configuration string is specific to each custom extension and it not understood neither validated by Video
     * Analyzer. Please see https://aka.ms/ava-extension-grpc for details.
     * 
     * @param extensionConfiguration the extensionConfiguration value to set.
     * @return the GrpcExtension object itself.
     */
    public GrpcExtension setExtensionConfiguration(String extensionConfiguration) {
        this.extensionConfiguration = extensionConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GrpcExtension setSamplingOptions(SamplingOptions samplingOptions) {
        super.setSamplingOptions(samplingOptions);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("endpoint", getEndpoint());
        jsonWriter.writeJsonField("image", getImage());
        jsonWriter.writeJsonField("samplingOptions", getSamplingOptions());
        jsonWriter.writeJsonField("dataTransfer", this.dataTransfer);
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("extensionConfiguration", this.extensionConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GrpcExtension from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GrpcExtension if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GrpcExtension.
     */
    public static GrpcExtension fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            boolean endpointFound = false;
            EndpointBase endpoint = null;
            boolean imageFound = false;
            ImageProperties image = null;
            SamplingOptions samplingOptions = null;
            boolean dataTransferFound = false;
            GrpcExtensionDataTransfer dataTransfer = null;
            String type = "#Microsoft.VideoAnalyzer.GrpcExtension";
            String extensionConfiguration = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("endpoint".equals(fieldName)) {
                    endpoint = EndpointBase.fromJson(reader);
                    endpointFound = true;
                } else if ("image".equals(fieldName)) {
                    image = ImageProperties.fromJson(reader);
                    imageFound = true;
                } else if ("samplingOptions".equals(fieldName)) {
                    samplingOptions = SamplingOptions.fromJson(reader);
                } else if ("dataTransfer".equals(fieldName)) {
                    dataTransfer = GrpcExtensionDataTransfer.fromJson(reader);
                    dataTransferFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("extensionConfiguration".equals(fieldName)) {
                    extensionConfiguration = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound && endpointFound && imageFound && dataTransferFound) {
                GrpcExtension deserializedGrpcExtension
                    = new GrpcExtension(name, inputs, endpoint, image, dataTransfer);
                deserializedGrpcExtension.setSamplingOptions(samplingOptions);
                deserializedGrpcExtension.type = type;
                deserializedGrpcExtension.extensionConfiguration = extensionConfiguration;

                return deserializedGrpcExtension;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }
            if (!endpointFound) {
                missingProperties.add("endpoint");
            }
            if (!imageFound) {
                missingProperties.add("image");
            }
            if (!dataTransferFound) {
                missingProperties.add("dataTransfer");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
