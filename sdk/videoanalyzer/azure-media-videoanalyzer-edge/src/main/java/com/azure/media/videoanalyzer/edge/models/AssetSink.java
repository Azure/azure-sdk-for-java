// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Enables a pipeline topology to record media to an Azure Media Services asset for subsequent playback.
 */
@Fluent
public final class AssetSink extends SinkNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.AssetSink";

    /*
     * An Azure Storage SAS Url which points to container, such as the one created for an Azure Media Services asset.
     */
    private final String assetContainerSasUrl;

    /*
     * When writing media to an asset, wait until at least this duration of media has been accumulated on the Edge.
     * Expressed in increments of 30 seconds, with a minimum of 30 seconds and a recommended maximum of 5 minutes.
     */
    private String segmentLength;

    /*
     * Path to a local file system directory for temporary caching of media before writing to an Asset. Used when the
     * Edge device is temporarily disconnected from Azure.
     */
    private final String localMediaCachePath;

    /*
     * Maximum amount of disk space that can be used for temporary caching of media.
     */
    private final String localMediaCacheMaximumSizeMiB;

    /**
     * Creates an instance of AssetSink class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param assetContainerSasUrl the assetContainerSasUrl value to set.
     * @param localMediaCachePath the localMediaCachePath value to set.
     * @param localMediaCacheMaximumSizeMiB the localMediaCacheMaximumSizeMiB value to set.
     */
    public AssetSink(String name, List<NodeInput> inputs, String assetContainerSasUrl, String localMediaCachePath,
        String localMediaCacheMaximumSizeMiB) {
        super(name, inputs);
        this.assetContainerSasUrl = assetContainerSasUrl;
        this.localMediaCachePath = localMediaCachePath;
        this.localMediaCacheMaximumSizeMiB = localMediaCacheMaximumSizeMiB;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the assetContainerSasUrl property: An Azure Storage SAS Url which points to container, such as the one
     * created for an Azure Media Services asset.
     * 
     * @return the assetContainerSasUrl value.
     */
    public String getAssetContainerSasUrl() {
        return this.assetContainerSasUrl;
    }

    /**
     * Get the segmentLength property: When writing media to an asset, wait until at least this duration of media has
     * been accumulated on the Edge. Expressed in increments of 30 seconds, with a minimum of 30 seconds and a
     * recommended maximum of 5 minutes.
     * 
     * @return the segmentLength value.
     */
    public String getSegmentLength() {
        return this.segmentLength;
    }

    /**
     * Set the segmentLength property: When writing media to an asset, wait until at least this duration of media has
     * been accumulated on the Edge. Expressed in increments of 30 seconds, with a minimum of 30 seconds and a
     * recommended maximum of 5 minutes.
     * 
     * @param segmentLength the segmentLength value to set.
     * @return the AssetSink object itself.
     */
    public AssetSink setSegmentLength(String segmentLength) {
        this.segmentLength = segmentLength;
        return this;
    }

    /**
     * Get the localMediaCachePath property: Path to a local file system directory for temporary caching of media before
     * writing to an Asset. Used when the Edge device is temporarily disconnected from Azure.
     * 
     * @return the localMediaCachePath value.
     */
    public String getLocalMediaCachePath() {
        return this.localMediaCachePath;
    }

    /**
     * Get the localMediaCacheMaximumSizeMiB property: Maximum amount of disk space that can be used for temporary
     * caching of media.
     * 
     * @return the localMediaCacheMaximumSizeMiB value.
     */
    public String getLocalMediaCacheMaximumSizeMiB() {
        return this.localMediaCacheMaximumSizeMiB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("assetContainerSasUrl", this.assetContainerSasUrl);
        jsonWriter.writeStringField("localMediaCachePath", this.localMediaCachePath);
        jsonWriter.writeStringField("localMediaCacheMaximumSizeMiB", this.localMediaCacheMaximumSizeMiB);
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("segmentLength", this.segmentLength);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssetSink from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssetSink if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssetSink.
     */
    public static AssetSink fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            boolean assetContainerSasUrlFound = false;
            String assetContainerSasUrl = null;
            boolean localMediaCachePathFound = false;
            String localMediaCachePath = null;
            boolean localMediaCacheMaximumSizeMiBFound = false;
            String localMediaCacheMaximumSizeMiB = null;
            String type = "#Microsoft.VideoAnalyzer.AssetSink";
            String segmentLength = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("assetContainerSasUrl".equals(fieldName)) {
                    assetContainerSasUrl = reader.getString();
                    assetContainerSasUrlFound = true;
                } else if ("localMediaCachePath".equals(fieldName)) {
                    localMediaCachePath = reader.getString();
                    localMediaCachePathFound = true;
                } else if ("localMediaCacheMaximumSizeMiB".equals(fieldName)) {
                    localMediaCacheMaximumSizeMiB = reader.getString();
                    localMediaCacheMaximumSizeMiBFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("segmentLength".equals(fieldName)) {
                    segmentLength = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound
                && inputsFound
                && assetContainerSasUrlFound
                && localMediaCachePathFound
                && localMediaCacheMaximumSizeMiBFound) {
                AssetSink deserializedAssetSink = new AssetSink(name, inputs, assetContainerSasUrl, localMediaCachePath,
                    localMediaCacheMaximumSizeMiB);
                deserializedAssetSink.type = type;
                deserializedAssetSink.segmentLength = segmentLength;

                return deserializedAssetSink;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }
            if (!assetContainerSasUrlFound) {
                missingProperties.add("assetContainerSasUrl");
            }
            if (!localMediaCachePathFound) {
                missingProperties.add("localMediaCachePath");
            }
            if (!localMediaCacheMaximumSizeMiBFound) {
                missingProperties.add("localMediaCacheMaximumSizeMiB");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
