// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A signal gate determines when to block (gate) incoming media, and when to allow it through. It gathers input events
 * over the activationEvaluationWindow, and determines whether to open or close the gate. See
 * https://aka.ms/ava-signalgate for more information.
 */
@Fluent
public final class SignalGateProcessor extends ProcessorNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.SignalGateProcessor";

    /*
     * The period of time over which the gate gathers input events before evaluating them.
     */
    private String activationEvaluationWindow;

    /*
     * Signal offset once the gate is activated (can be negative). It determines the how much farther behind of after
     * the signal will be let through based on the activation time. A negative offset indicates that data prior the
     * activation time must be included on the signal that is let through, once the gate is activated. When used
     * upstream of a file or video sink, this allows for scenarios such as recording buffered media prior an event, such
     * as: record video 5 seconds prior motions is detected.
     */
    private String activationSignalOffset;

    /*
     * The minimum period for which the gate remains open in the absence of subsequent triggers (events). When used
     * upstream of a file or video sink, it determines the minimum length of the recorded video clip.
     */
    private String minimumActivationTime;

    /*
     * The maximum period for which the gate remains open in the presence of subsequent triggers (events). When used
     * upstream of a file or video sink, it determines the maximum length of the recorded video clip.
     */
    private String maximumActivationTime;

    /**
     * Creates an instance of SignalGateProcessor class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     */
    public SignalGateProcessor(String name, List<NodeInput> inputs) {
        super(name, inputs);
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the activationEvaluationWindow property: The period of time over which the gate gathers input events before
     * evaluating them.
     * 
     * @return the activationEvaluationWindow value.
     */
    public String getActivationEvaluationWindow() {
        return this.activationEvaluationWindow;
    }

    /**
     * Set the activationEvaluationWindow property: The period of time over which the gate gathers input events before
     * evaluating them.
     * 
     * @param activationEvaluationWindow the activationEvaluationWindow value to set.
     * @return the SignalGateProcessor object itself.
     */
    public SignalGateProcessor setActivationEvaluationWindow(String activationEvaluationWindow) {
        this.activationEvaluationWindow = activationEvaluationWindow;
        return this;
    }

    /**
     * Get the activationSignalOffset property: Signal offset once the gate is activated (can be negative). It
     * determines the how much farther behind of after the signal will be let through based on the activation time. A
     * negative offset indicates that data prior the activation time must be included on the signal that is let through,
     * once the gate is activated. When used upstream of a file or video sink, this allows for scenarios such as
     * recording buffered media prior an event, such as: record video 5 seconds prior motions is detected.
     * 
     * @return the activationSignalOffset value.
     */
    public String getActivationSignalOffset() {
        return this.activationSignalOffset;
    }

    /**
     * Set the activationSignalOffset property: Signal offset once the gate is activated (can be negative). It
     * determines the how much farther behind of after the signal will be let through based on the activation time. A
     * negative offset indicates that data prior the activation time must be included on the signal that is let through,
     * once the gate is activated. When used upstream of a file or video sink, this allows for scenarios such as
     * recording buffered media prior an event, such as: record video 5 seconds prior motions is detected.
     * 
     * @param activationSignalOffset the activationSignalOffset value to set.
     * @return the SignalGateProcessor object itself.
     */
    public SignalGateProcessor setActivationSignalOffset(String activationSignalOffset) {
        this.activationSignalOffset = activationSignalOffset;
        return this;
    }

    /**
     * Get the minimumActivationTime property: The minimum period for which the gate remains open in the absence of
     * subsequent triggers (events). When used upstream of a file or video sink, it determines the minimum length of the
     * recorded video clip.
     * 
     * @return the minimumActivationTime value.
     */
    public String getMinimumActivationTime() {
        return this.minimumActivationTime;
    }

    /**
     * Set the minimumActivationTime property: The minimum period for which the gate remains open in the absence of
     * subsequent triggers (events). When used upstream of a file or video sink, it determines the minimum length of the
     * recorded video clip.
     * 
     * @param minimumActivationTime the minimumActivationTime value to set.
     * @return the SignalGateProcessor object itself.
     */
    public SignalGateProcessor setMinimumActivationTime(String minimumActivationTime) {
        this.minimumActivationTime = minimumActivationTime;
        return this;
    }

    /**
     * Get the maximumActivationTime property: The maximum period for which the gate remains open in the presence of
     * subsequent triggers (events). When used upstream of a file or video sink, it determines the maximum length of the
     * recorded video clip.
     * 
     * @return the maximumActivationTime value.
     */
    public String getMaximumActivationTime() {
        return this.maximumActivationTime;
    }

    /**
     * Set the maximumActivationTime property: The maximum period for which the gate remains open in the presence of
     * subsequent triggers (events). When used upstream of a file or video sink, it determines the maximum length of the
     * recorded video clip.
     * 
     * @param maximumActivationTime the maximumActivationTime value to set.
     * @return the SignalGateProcessor object itself.
     */
    public SignalGateProcessor setMaximumActivationTime(String maximumActivationTime) {
        this.maximumActivationTime = maximumActivationTime;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("activationEvaluationWindow", this.activationEvaluationWindow);
        jsonWriter.writeStringField("activationSignalOffset", this.activationSignalOffset);
        jsonWriter.writeStringField("minimumActivationTime", this.minimumActivationTime);
        jsonWriter.writeStringField("maximumActivationTime", this.maximumActivationTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SignalGateProcessor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SignalGateProcessor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SignalGateProcessor.
     */
    public static SignalGateProcessor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            String type = "#Microsoft.VideoAnalyzer.SignalGateProcessor";
            String activationEvaluationWindow = null;
            String activationSignalOffset = null;
            String minimumActivationTime = null;
            String maximumActivationTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("activationEvaluationWindow".equals(fieldName)) {
                    activationEvaluationWindow = reader.getString();
                } else if ("activationSignalOffset".equals(fieldName)) {
                    activationSignalOffset = reader.getString();
                } else if ("minimumActivationTime".equals(fieldName)) {
                    minimumActivationTime = reader.getString();
                } else if ("maximumActivationTime".equals(fieldName)) {
                    maximumActivationTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound) {
                SignalGateProcessor deserializedSignalGateProcessor = new SignalGateProcessor(name, inputs);
                deserializedSignalGateProcessor.type = type;
                deserializedSignalGateProcessor.activationEvaluationWindow = activationEvaluationWindow;
                deserializedSignalGateProcessor.activationSignalOffset = activationSignalOffset;
                deserializedSignalGateProcessor.minimumActivationTime = minimumActivationTime;
                deserializedSignalGateProcessor.maximumActivationTime = maximumActivationTime;

                return deserializedSignalGateProcessor;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
