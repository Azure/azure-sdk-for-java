// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Base class for pipeline extension processors. Pipeline extensions allow for custom media analysis and processing to
 * be plugged into the Video Analyzer pipeline.
 */
@Fluent
public class ExtensionProcessorBase extends ProcessorNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.ExtensionProcessorBase";

    /*
     * Endpoint details of the pipeline extension plugin.
     */
    private final EndpointBase endpoint;

    /*
     * Image transformations and formatting options to be applied to the video frame(s) prior submission to the pipeline
     * extension plugin.
     */
    private final ImageProperties image;

    /*
     * Media sampling parameters that define how often media is submitted to the extension plugin.
     */
    private SamplingOptions samplingOptions;

    /**
     * Creates an instance of ExtensionProcessorBase class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param endpoint the endpoint value to set.
     * @param image the image value to set.
     */
    public ExtensionProcessorBase(String name, List<NodeInput> inputs, EndpointBase endpoint, ImageProperties image) {
        super(name, inputs);
        this.endpoint = endpoint;
        this.image = image;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the endpoint property: Endpoint details of the pipeline extension plugin.
     * 
     * @return the endpoint value.
     */
    public EndpointBase getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get the image property: Image transformations and formatting options to be applied to the video frame(s) prior
     * submission to the pipeline extension plugin.
     * 
     * @return the image value.
     */
    public ImageProperties getImage() {
        return this.image;
    }

    /**
     * Get the samplingOptions property: Media sampling parameters that define how often media is submitted to the
     * extension plugin.
     * 
     * @return the samplingOptions value.
     */
    public SamplingOptions getSamplingOptions() {
        return this.samplingOptions;
    }

    /**
     * Set the samplingOptions property: Media sampling parameters that define how often media is submitted to the
     * extension plugin.
     * 
     * @param samplingOptions the samplingOptions value to set.
     * @return the ExtensionProcessorBase object itself.
     */
    public ExtensionProcessorBase setSamplingOptions(SamplingOptions samplingOptions) {
        this.samplingOptions = samplingOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("endpoint", this.endpoint);
        jsonWriter.writeJsonField("image", this.image);
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeJsonField("samplingOptions", this.samplingOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtensionProcessorBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtensionProcessorBase if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExtensionProcessorBase.
     */
    public static ExtensionProcessorBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("@type".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.VideoAnalyzer.GrpcExtension".equals(discriminatorValue)) {
                    return GrpcExtension.fromJson(readerToUse.reset());
                } else if ("#Microsoft.VideoAnalyzer.HttpExtension".equals(discriminatorValue)) {
                    return HttpExtension.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static ExtensionProcessorBase fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            boolean endpointFound = false;
            EndpointBase endpoint = null;
            boolean imageFound = false;
            ImageProperties image = null;
            String type = "#Microsoft.VideoAnalyzer.ExtensionProcessorBase";
            SamplingOptions samplingOptions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("endpoint".equals(fieldName)) {
                    endpoint = EndpointBase.fromJson(reader);
                    endpointFound = true;
                } else if ("image".equals(fieldName)) {
                    image = ImageProperties.fromJson(reader);
                    imageFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("samplingOptions".equals(fieldName)) {
                    samplingOptions = SamplingOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound && endpointFound && imageFound) {
                ExtensionProcessorBase deserializedExtensionProcessorBase
                    = new ExtensionProcessorBase(name, inputs, endpoint, image);
                deserializedExtensionProcessorBase.type = type;
                deserializedExtensionProcessorBase.samplingOptions = samplingOptions;

                return deserializedExtensionProcessorBase;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }
            if (!endpointFound) {
                missingProperties.add("endpoint");
            }
            if (!imageFound) {
                missingProperties.add("image");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
