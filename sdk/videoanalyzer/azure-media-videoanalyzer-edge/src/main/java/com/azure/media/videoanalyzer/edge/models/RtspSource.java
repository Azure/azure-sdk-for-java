// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a live pipeline. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type")
@JsonTypeName("#Microsoft.VideoAnalyzer.RtspSource")
@Fluent
public final class RtspSource extends SourceNodeBase {
    /*
     * Network transport utilized by the RTSP and RTP exchange: TCP or HTTP.
     * When using TCP, the RTP packets are interleaved on the TCP RTSP
     * connection. When using HTTP, the RTSP messages are exchanged through
     * long lived HTTP connections, and the RTP packages are interleaved in the
     * HTTP connections alongside the RTSP messages.
     */
    @JsonProperty(value = "transport")
    private RtspTransport transport;

    /*
     * RTSP endpoint information for Video Analyzer to connect to. This
     * contains the required information for Video Analyzer to connect to RTSP
     * cameras and/or generic RTSP servers.
     */
    @JsonProperty(value = "endpoint", required = true)
    private EndpointBase endpoint;

    /**
     * Creates an instance of RtspSource class.
     *
     * @param name the name value to set.
     * @param endpoint the endpoint value to set.
     */
    @JsonCreator
    public RtspSource(
            @JsonProperty(value = "name", required = true) String name,
            @JsonProperty(value = "endpoint", required = true) EndpointBase endpoint) {
        super(name);
        this.endpoint = endpoint;
    }

    /**
     * Get the transport property: Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP,
     * the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged
     * through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the
     * RTSP messages.
     *
     * @return the transport value.
     */
    public RtspTransport getTransport() {
        return this.transport;
    }

    /**
     * Set the transport property: Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP,
     * the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged
     * through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the
     * RTSP messages.
     *
     * @param transport the transport value to set.
     * @return the RtspSource object itself.
     */
    public RtspSource setTransport(RtspTransport transport) {
        this.transport = transport;
        return this;
    }

    /**
     * Get the endpoint property: RTSP endpoint information for Video Analyzer to connect to. This contains the required
     * information for Video Analyzer to connect to RTSP cameras and/or generic RTSP servers.
     *
     * @return the endpoint value.
     */
    public EndpointBase getEndpoint() {
        return this.endpoint;
    }
}
