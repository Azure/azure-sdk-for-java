// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a live pipeline.
 */
@Fluent
public final class RtspSource extends SourceNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.RtspSource";

    /*
     * Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are
     * interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP
     * connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages.
     */
    private RtspTransport transport;

    /*
     * RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video
     * Analyzer to connect to RTSP cameras and/or generic RTSP servers.
     */
    private final EndpointBase endpoint;

    /**
     * Creates an instance of RtspSource class.
     * 
     * @param name the name value to set.
     * @param endpoint the endpoint value to set.
     */
    public RtspSource(String name, EndpointBase endpoint) {
        super(name);
        this.endpoint = endpoint;
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the transport property: Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP,
     * the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged
     * through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the
     * RTSP messages.
     * 
     * @return the transport value.
     */
    public RtspTransport getTransport() {
        return this.transport;
    }

    /**
     * Set the transport property: Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP,
     * the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged
     * through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the
     * RTSP messages.
     * 
     * @param transport the transport value to set.
     * @return the RtspSource object itself.
     */
    public RtspSource setTransport(RtspTransport transport) {
        this.transport = transport;
        return this;
    }

    /**
     * Get the endpoint property: RTSP endpoint information for Video Analyzer to connect to. This contains the required
     * information for Video Analyzer to connect to RTSP cameras and/or generic RTSP servers.
     * 
     * @return the endpoint value.
     */
    public EndpointBase getEndpoint() {
        return this.endpoint;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeJsonField("endpoint", this.endpoint);
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("transport", this.transport == null ? null : this.transport.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RtspSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RtspSource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RtspSource.
     */
    public static RtspSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean endpointFound = false;
            EndpointBase endpoint = null;
            String type = "#Microsoft.VideoAnalyzer.RtspSource";
            RtspTransport transport = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("endpoint".equals(fieldName)) {
                    endpoint = EndpointBase.fromJson(reader);
                    endpointFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("transport".equals(fieldName)) {
                    transport = RtspTransport.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && endpointFound) {
                RtspSource deserializedRtspSource = new RtspSource(name, endpoint);
                deserializedRtspSource.type = type;
                deserializedRtspSource.transport = transport;

                return deserializedRtspSource;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!endpointFound) {
                missingProperties.add("endpoint");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
