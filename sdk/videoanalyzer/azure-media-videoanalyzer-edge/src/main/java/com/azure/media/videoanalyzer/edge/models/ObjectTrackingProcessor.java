// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Object tracker processor allows for continuous tracking of one of more objects over a finite sequence of video
 * frames. It must be used downstream of an object detector extension node, thus allowing for the extension to be
 * configured to to perform inferences on sparse frames through the use of the 'maximumSamplesPerSecond' sampling
 * property. The object tracker node will then track the detected objects over the frames in which the detector is not
 * invoked resulting on a smother tracking of detected objects across the continuum of video frames. The tracker will
 * stop tracking objects which are not subsequently detected by the upstream detector on the subsequent detections.
 */
@Fluent
public final class ObjectTrackingProcessor extends ProcessorNodeBase {
    /*
     * Type discriminator for the derived types.
     */
    private String type = "#Microsoft.VideoAnalyzer.ObjectTrackingProcessor";

    /*
     * Object tracker accuracy: low, medium, high. Higher accuracy leads to higher CPU consumption in average.
     */
    private ObjectTrackingAccuracy accuracy;

    /**
     * Creates an instance of ObjectTrackingProcessor class.
     * 
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     */
    public ObjectTrackingProcessor(String name, List<NodeInput> inputs) {
        super(name, inputs);
    }

    /**
     * Get the type property: Type discriminator for the derived types.
     * 
     * @return the type value.
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the accuracy property: Object tracker accuracy: low, medium, high. Higher accuracy leads to higher CPU
     * consumption in average.
     * 
     * @return the accuracy value.
     */
    public ObjectTrackingAccuracy getAccuracy() {
        return this.accuracy;
    }

    /**
     * Set the accuracy property: Object tracker accuracy: low, medium, high. Higher accuracy leads to higher CPU
     * consumption in average.
     * 
     * @param accuracy the accuracy value to set.
     * @return the ObjectTrackingProcessor object itself.
     */
    public ObjectTrackingProcessor setAccuracy(ObjectTrackingAccuracy accuracy) {
        this.accuracy = accuracy;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", getName());
        jsonWriter.writeArrayField("inputs", getInputs(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("@type", this.type);
        jsonWriter.writeStringField("accuracy", this.accuracy == null ? null : this.accuracy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ObjectTrackingProcessor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ObjectTrackingProcessor if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ObjectTrackingProcessor.
     */
    public static ObjectTrackingProcessor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean nameFound = false;
            String name = null;
            boolean inputsFound = false;
            List<NodeInput> inputs = null;
            String type = "#Microsoft.VideoAnalyzer.ObjectTrackingProcessor";
            ObjectTrackingAccuracy accuracy = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                    nameFound = true;
                } else if ("inputs".equals(fieldName)) {
                    inputs = reader.readArray(reader1 -> NodeInput.fromJson(reader1));
                    inputsFound = true;
                } else if ("@type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("accuracy".equals(fieldName)) {
                    accuracy = ObjectTrackingAccuracy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            if (nameFound && inputsFound) {
                ObjectTrackingProcessor deserializedObjectTrackingProcessor = new ObjectTrackingProcessor(name, inputs);
                deserializedObjectTrackingProcessor.type = type;
                deserializedObjectTrackingProcessor.accuracy = accuracy;

                return deserializedObjectTrackingProcessor;
            }
            List<String> missingProperties = new ArrayList<>();
            if (!nameFound) {
                missingProperties.add("name");
            }
            if (!inputsFound) {
                missingProperties.add("inputs");
            }

            throw new IllegalStateException(
                "Missing required property/properties: " + String.join(", ", missingProperties));
        });
    }
}
