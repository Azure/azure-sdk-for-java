// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.videoanalyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Options for changing video publishing behavior on the video sink and output video.
 */
@Fluent
public final class VideoPublishingOptions implements JsonSerializable<VideoPublishingOptions> {
    /*
     * When set to 'true' the video will publish preview images. Default is 'false'.
     */
    private String enableVideoPreviewImage;

    /**
     * Creates an instance of VideoPublishingOptions class.
     */
    public VideoPublishingOptions() {
    }

    /**
     * Get the enableVideoPreviewImage property: When set to 'true' the video will publish preview images. Default is
     * 'false'.
     * 
     * @return the enableVideoPreviewImage value.
     */
    public String getEnableVideoPreviewImage() {
        return this.enableVideoPreviewImage;
    }

    /**
     * Set the enableVideoPreviewImage property: When set to 'true' the video will publish preview images. Default is
     * 'false'.
     * 
     * @param enableVideoPreviewImage the enableVideoPreviewImage value to set.
     * @return the VideoPublishingOptions object itself.
     */
    public VideoPublishingOptions setEnableVideoPreviewImage(String enableVideoPreviewImage) {
        this.enableVideoPreviewImage = enableVideoPreviewImage;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("enableVideoPreviewImage", this.enableVideoPreviewImage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VideoPublishingOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VideoPublishingOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VideoPublishingOptions.
     */
    public static VideoPublishingOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VideoPublishingOptions deserializedVideoPublishingOptions = new VideoPublishingOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("enableVideoPreviewImage".equals(fieldName)) {
                    deserializedVideoPublishingOptions.enableVideoPreviewImage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVideoPublishingOptions;
        });
    }
}
