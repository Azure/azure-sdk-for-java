// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.azure.media.video.analyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * A processor that allows the pipeline topology to send video frames to an external inference container over a gRPC
 * connection. This can be done using shared memory (for high frame rates), or over the network. Inference results are
 * relayed to downstream nodes.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type")
@JsonTypeName("#Microsoft.VideoAnalyzer.GrpcExtension")
@Fluent
public final class GrpcExtension extends ExtensionProcessorBase {
    /*
     * How media should be transferred to the inference engine.
     */
    @JsonProperty(value = "dataTransfer", required = true)
    private GrpcExtensionDataTransfer dataTransfer;

    /*
     * Optional configuration to pass to the gRPC extension.
     */
    @JsonProperty(value = "extensionConfiguration")
    private String extensionConfiguration;

    /**
     * Get the dataTransfer property: How media should be transferred to the inference engine.
     *
     * @return the dataTransfer value.
     */
    public GrpcExtensionDataTransfer getDataTransfer() {
        return this.dataTransfer;
    }

    /**
     * Set the dataTransfer property: How media should be transferred to the inference engine.
     *
     * @param dataTransfer the dataTransfer value to set.
     * @return the GrpcExtension object itself.
     */
    public GrpcExtension setDataTransfer(GrpcExtensionDataTransfer dataTransfer) {
        this.dataTransfer = dataTransfer;
        return this;
    }

    /**
     * Get the extensionConfiguration property: Optional configuration to pass to the gRPC extension.
     *
     * @return the extensionConfiguration value.
     */
    public String getExtensionConfiguration() {
        return this.extensionConfiguration;
    }

    /**
     * Set the extensionConfiguration property: Optional configuration to pass to the gRPC extension.
     *
     * @param extensionConfiguration the extensionConfiguration value to set.
     * @return the GrpcExtension object itself.
     */
    public GrpcExtension setExtensionConfiguration(String extensionConfiguration) {
        this.extensionConfiguration = extensionConfiguration;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public GrpcExtension setEndpoint(Endpoint endpoint) {
        super.setEndpoint(endpoint);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public GrpcExtension setImage(Image image) {
        super.setImage(image);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public GrpcExtension setSamplingOptions(SamplingOptions samplingOptions) {
        super.setSamplingOptions(samplingOptions);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public GrpcExtension setName(String name) {
        super.setName(name);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public GrpcExtension setInputs(List<NodeInput> inputs) {
        super.setInputs(inputs);
        return this;
    }
}
