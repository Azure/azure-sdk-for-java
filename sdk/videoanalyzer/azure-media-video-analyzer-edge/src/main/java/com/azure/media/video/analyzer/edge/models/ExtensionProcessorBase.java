// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.video.analyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Processor that allows for extensions outside of the Azure Video Analyzer Edge module to be integrated into the
 * pipeline topology. It is the base class for various different kinds of extension processor types.
 */
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "@type",
        defaultImpl = ExtensionProcessorBase.class)
@JsonTypeName("#Microsoft.VideoAnalyzer.ExtensionProcessorBase")
@JsonSubTypes({
    @JsonSubTypes.Type(
            name = "#Microsoft.VideoAnalyzer.CognitiveServicesVisionExtension",
            value = CognitiveServicesVisionExtension.class),
    @JsonSubTypes.Type(name = "#Microsoft.VideoAnalyzer.GrpcExtension", value = GrpcExtension.class),
    @JsonSubTypes.Type(name = "#Microsoft.VideoAnalyzer.HttpExtension", value = HttpExtension.class)
})
@Fluent
public class ExtensionProcessorBase extends Processor {
    /*
     * Endpoint to which this processor should connect.
     */
    @JsonProperty(value = "endpoint", required = true)
    private Endpoint endpoint;

    /*
     * Describes the parameters of the image that is sent as input to the
     * endpoint.
     */
    @JsonProperty(value = "image", required = true)
    private Image image;

    /*
     * Describes the sampling options to be applied when forwarding samples to
     * the extension.
     */
    @JsonProperty(value = "samplingOptions")
    private SamplingOptions samplingOptions;

    /**
     * Creates an instance of ExtensionProcessorBase class.
     *
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param endpoint the endpoint value to set.
     * @param image the image value to set.
     */
    @JsonCreator
    public ExtensionProcessorBase(
            @JsonProperty(value = "name", required = true) String name,
            @JsonProperty(value = "inputs", required = true) List<NodeInput> inputs,
            @JsonProperty(value = "endpoint", required = true) Endpoint endpoint,
            @JsonProperty(value = "image", required = true) Image image) {
        super(name, inputs);
        this.endpoint = endpoint;
        this.image = image;
    }

    /**
     * Get the endpoint property: Endpoint to which this processor should connect.
     *
     * @return the endpoint value.
     */
    public Endpoint getEndpoint() {
        return this.endpoint;
    }

    /**
     * Get the image property: Describes the parameters of the image that is sent as input to the endpoint.
     *
     * @return the image value.
     */
    public Image getImage() {
        return this.image;
    }

    /**
     * Get the samplingOptions property: Describes the sampling options to be applied when forwarding samples to the
     * extension.
     *
     * @return the samplingOptions value.
     */
    public SamplingOptions getSamplingOptions() {
        return this.samplingOptions;
    }

    /**
     * Set the samplingOptions property: Describes the sampling options to be applied when forwarding samples to the
     * extension.
     *
     * @param samplingOptions the samplingOptions value to set.
     * @return the ExtensionProcessorBase object itself.
     */
    public ExtensionProcessorBase setSamplingOptions(SamplingOptions samplingOptions) {
        this.samplingOptions = samplingOptions;
        return this;
    }
}
