// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.media.video.analyzer.edge.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * A processor that allows the pipeline topology to send video frames to a Cognitive Services Vision extension.
 * Inference results are relayed to downstream nodes.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@type")
@JsonTypeName("#Microsoft.VideoAnalyzer.CognitiveServicesVisionExtension")
@Fluent
public final class CognitiveServicesVisionExtension extends ExtensionProcessorBase {
    /*
     * Optional configuration to pass to the CognitiveServicesVision extension.
     */
    @JsonProperty(value = "extensionConfiguration")
    private String extensionConfiguration;

    /**
     * Creates an instance of CognitiveServicesVisionExtension class.
     *
     * @param name the name value to set.
     * @param inputs the inputs value to set.
     * @param endpoint the endpoint value to set.
     * @param image the image value to set.
     */
    @JsonCreator
    public CognitiveServicesVisionExtension(
            @JsonProperty(value = "name", required = true) String name,
            @JsonProperty(value = "inputs", required = true) List<NodeInput> inputs,
            @JsonProperty(value = "endpoint", required = true) Endpoint endpoint,
            @JsonProperty(value = "image", required = true) Image image) {
        super(name, inputs, endpoint, image);
    }

    /**
     * Get the extensionConfiguration property: Optional configuration to pass to the CognitiveServicesVision extension.
     *
     * @return the extensionConfiguration value.
     */
    public String getExtensionConfiguration() {
        return this.extensionConfiguration;
    }

    /**
     * Set the extensionConfiguration property: Optional configuration to pass to the CognitiveServicesVision extension.
     *
     * @param extensionConfiguration the extensionConfiguration value to set.
     * @return the CognitiveServicesVisionExtension object itself.
     */
    public CognitiveServicesVisionExtension setExtensionConfiguration(String extensionConfiguration) {
        this.extensionConfiguration = extensionConfiguration;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public CognitiveServicesVisionExtension setSamplingOptions(SamplingOptions samplingOptions) {
        super.setSamplingOptions(samplingOptions);
        return this;
    }
}
