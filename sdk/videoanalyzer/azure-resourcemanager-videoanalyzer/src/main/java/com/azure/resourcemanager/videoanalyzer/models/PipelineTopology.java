// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.videoanalyzer.models;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.videoanalyzer.fluent.models.PipelineTopologyInner;
import java.util.List;

/** An immutable client-side representation of PipelineTopology. */
public interface PipelineTopology {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the kind property: Topology kind.
     *
     * @return the kind value.
     */
    Kind kind();

    /**
     * Gets the sku property: Describes the properties of a SKU.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the description property: An optional description of the pipeline topology. It is recommended that the
     * expected use of the topology to be described here.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the parameters property: List of the topology parameter declarations. Parameters declared here can be
     * referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can
     * have optional default values and can later be defined in individual instances of the pipeline.
     *
     * @return the parameters value.
     */
    List<ParameterDeclaration> parameters();

    /**
     * Gets the sources property: List of the topology source nodes. Source nodes enable external data to be ingested by
     * the pipeline.
     *
     * @return the sources value.
     */
    List<SourceNodeBase> sources();

    /**
     * Gets the processors property: List of the topology processor nodes. Processor nodes enable pipeline data to be
     * analyzed, processed or transformed.
     *
     * @return the processors value.
     */
    List<ProcessorNodeBase> processors();

    /**
     * Gets the sinks property: List of the topology sink nodes. Sink nodes allow pipeline data to be stored or
     * exported.
     *
     * @return the sinks value.
     */
    List<SinkNodeBase> sinks();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.videoanalyzer.fluent.models.PipelineTopologyInner object.
     *
     * @return the inner object.
     */
    PipelineTopologyInner innerModel();

    /** The entirety of the PipelineTopology definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithKind,
            DefinitionStages.WithSku,
            DefinitionStages.WithCreate {
    }
    /** The PipelineTopology definition stages. */
    interface DefinitionStages {
        /** The first stage of the PipelineTopology definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the PipelineTopology definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, accountName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param accountName The Azure Video Analyzer account name.
             * @return the next definition stage.
             */
            WithKind withExistingVideoAnalyzer(String resourceGroupName, String accountName);
        }
        /** The stage of the PipelineTopology definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Topology kind..
             *
             * @param kind Topology kind.
             * @return the next definition stage.
             */
            WithSku withKind(Kind kind);
        }
        /** The stage of the PipelineTopology definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Describes the properties of a SKU..
             *
             * @param sku Describes the properties of a SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /**
         * The stage of the PipelineTopology definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithDescription,
                DefinitionStages.WithParameters,
                DefinitionStages.WithSources,
                DefinitionStages.WithProcessors,
                DefinitionStages.WithSinks {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PipelineTopology create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PipelineTopology create(Context context);
        }
        /** The stage of the PipelineTopology definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: An optional description of the pipeline topology. It is recommended
             * that the expected use of the topology to be described here..
             *
             * @param description An optional description of the pipeline topology. It is recommended that the expected
             *     use of the topology to be described here.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the PipelineTopology definition allowing to specify parameters. */
        interface WithParameters {
            /**
             * Specifies the parameters property: List of the topology parameter declarations. Parameters declared here
             * can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern.
             * Parameters can have optional default values and can later be defined in individual instances of the
             * pipeline..
             *
             * @param parameters List of the topology parameter declarations. Parameters declared here can be referenced
             *     throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can
             *     have optional default values and can later be defined in individual instances of the pipeline.
             * @return the next definition stage.
             */
            WithCreate withParameters(List<ParameterDeclaration> parameters);
        }
        /** The stage of the PipelineTopology definition allowing to specify sources. */
        interface WithSources {
            /**
             * Specifies the sources property: List of the topology source nodes. Source nodes enable external data to
             * be ingested by the pipeline..
             *
             * @param sources List of the topology source nodes. Source nodes enable external data to be ingested by the
             *     pipeline.
             * @return the next definition stage.
             */
            WithCreate withSources(List<SourceNodeBase> sources);
        }
        /** The stage of the PipelineTopology definition allowing to specify processors. */
        interface WithProcessors {
            /**
             * Specifies the processors property: List of the topology processor nodes. Processor nodes enable pipeline
             * data to be analyzed, processed or transformed..
             *
             * @param processors List of the topology processor nodes. Processor nodes enable pipeline data to be
             *     analyzed, processed or transformed.
             * @return the next definition stage.
             */
            WithCreate withProcessors(List<ProcessorNodeBase> processors);
        }
        /** The stage of the PipelineTopology definition allowing to specify sinks. */
        interface WithSinks {
            /**
             * Specifies the sinks property: List of the topology sink nodes. Sink nodes allow pipeline data to be
             * stored or exported..
             *
             * @param sinks List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
             * @return the next definition stage.
             */
            WithCreate withSinks(List<SinkNodeBase> sinks);
        }
    }
    /**
     * Begins update for the PipelineTopology resource.
     *
     * @return the stage of resource update.
     */
    PipelineTopology.Update update();

    /** The template for PipelineTopology update. */
    interface Update
        extends UpdateStages.WithKind,
            UpdateStages.WithSku,
            UpdateStages.WithDescription,
            UpdateStages.WithParameters,
            UpdateStages.WithSources,
            UpdateStages.WithProcessors,
            UpdateStages.WithSinks {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PipelineTopology apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PipelineTopology apply(Context context);
    }
    /** The PipelineTopology update stages. */
    interface UpdateStages {
        /** The stage of the PipelineTopology update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Topology kind..
             *
             * @param kind Topology kind.
             * @return the next definition stage.
             */
            Update withKind(Kind kind);
        }
        /** The stage of the PipelineTopology update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: Describes the properties of a SKU..
             *
             * @param sku Describes the properties of a SKU.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
        /** The stage of the PipelineTopology update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: An optional description of the pipeline topology. It is recommended
             * that the expected use of the topology to be described here..
             *
             * @param description An optional description of the pipeline topology. It is recommended that the expected
             *     use of the topology to be described here.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the PipelineTopology update allowing to specify parameters. */
        interface WithParameters {
            /**
             * Specifies the parameters property: List of the topology parameter declarations. Parameters declared here
             * can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern.
             * Parameters can have optional default values and can later be defined in individual instances of the
             * pipeline..
             *
             * @param parameters List of the topology parameter declarations. Parameters declared here can be referenced
             *     throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can
             *     have optional default values and can later be defined in individual instances of the pipeline.
             * @return the next definition stage.
             */
            Update withParameters(List<ParameterDeclaration> parameters);
        }
        /** The stage of the PipelineTopology update allowing to specify sources. */
        interface WithSources {
            /**
             * Specifies the sources property: List of the topology source nodes. Source nodes enable external data to
             * be ingested by the pipeline..
             *
             * @param sources List of the topology source nodes. Source nodes enable external data to be ingested by the
             *     pipeline.
             * @return the next definition stage.
             */
            Update withSources(List<SourceNodeBase> sources);
        }
        /** The stage of the PipelineTopology update allowing to specify processors. */
        interface WithProcessors {
            /**
             * Specifies the processors property: List of the topology processor nodes. Processor nodes enable pipeline
             * data to be analyzed, processed or transformed..
             *
             * @param processors List of the topology processor nodes. Processor nodes enable pipeline data to be
             *     analyzed, processed or transformed.
             * @return the next definition stage.
             */
            Update withProcessors(List<ProcessorNodeBase> processors);
        }
        /** The stage of the PipelineTopology update allowing to specify sinks. */
        interface WithSinks {
            /**
             * Specifies the sinks property: List of the topology sink nodes. Sink nodes allow pipeline data to be
             * stored or exported..
             *
             * @param sinks List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
             * @return the next definition stage.
             */
            Update withSinks(List<SinkNodeBase> sinks);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PipelineTopology refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PipelineTopology refresh(Context context);
}
