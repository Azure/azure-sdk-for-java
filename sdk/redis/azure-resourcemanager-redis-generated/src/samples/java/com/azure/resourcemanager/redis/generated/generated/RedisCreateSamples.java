// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.generated;

import com.azure.resourcemanager.redis.generated.models.RedisCommonPropertiesRedisConfiguration;
import com.azure.resourcemanager.redis.generated.models.Sku;
import com.azure.resourcemanager.redis.generated.models.SkuFamily;
import com.azure.resourcemanager.redis.generated.models.SkuName;
import com.azure.resourcemanager.redis.generated.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Redis Create. */
public final class RedisCreateSamples {
    /*
     * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2021-06-01/examples/RedisCacheCreate.json
     */
    /**
     * Sample code: RedisCacheCreate.
     *
     * @param manager Entry point to RedisManager.
     */
    public static void redisCacheCreate(com.azure.resourcemanager.redis.generated.RedisManager manager) {
        manager
            .redis()
            .define("cache1")
            .withRegion("West US")
            .withExistingResourceGroup("rg1")
            .withSku(new Sku().withName(SkuName.PREMIUM).withFamily(SkuFamily.P).withCapacity(1))
            .withZones(Arrays.asList("1"))
            .withSubnetId(
                "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1")
            .withStaticIp("192.168.0.5")
            .withRedisConfiguration(
                new RedisCommonPropertiesRedisConfiguration()
                    .withMaxmemoryPolicy("allkeys-lru")
                    .withAdditionalProperties(mapOf()))
            .withRedisVersion("4")
            .withEnableNonSslPort(true)
            .withReplicasPerPrimary(2)
            .withShardCount(2)
            .withMinimumTlsVersion(TlsVersion.ONE_TWO)
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
