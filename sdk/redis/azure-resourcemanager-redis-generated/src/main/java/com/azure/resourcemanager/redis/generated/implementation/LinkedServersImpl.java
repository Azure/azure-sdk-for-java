// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redis.generated.RedisManager;
import com.azure.resourcemanager.redis.generated.fluent.LinkedServersClient;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisLinkedServerWithPropertiesInner;
import com.azure.resourcemanager.redis.generated.models.LinkedServers;
import com.azure.resourcemanager.redis.generated.models.RedisLinkedServerWithProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class LinkedServersImpl implements LinkedServers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LinkedServersImpl.class);

    private final LinkedServersClient innerClient;

    private final RedisManager serviceManager;

    public LinkedServersImpl(LinkedServersClient innerClient, RedisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String name, String linkedServerName) {
        this.serviceClient().delete(resourceGroupName, name, linkedServerName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String name, String linkedServerName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, name, linkedServerName, context);
    }

    public RedisLinkedServerWithProperties get(String resourceGroupName, String name, String linkedServerName) {
        RedisLinkedServerWithPropertiesInner inner =
            this.serviceClient().get(resourceGroupName, name, linkedServerName);
        if (inner != null) {
            return new RedisLinkedServerWithPropertiesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RedisLinkedServerWithProperties> getWithResponse(
        String resourceGroupName, String name, String linkedServerName, Context context) {
        Response<RedisLinkedServerWithPropertiesInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, name, linkedServerName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RedisLinkedServerWithPropertiesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<RedisLinkedServerWithProperties> list(String resourceGroupName, String name) {
        PagedIterable<RedisLinkedServerWithPropertiesInner> inner = this.serviceClient().list(resourceGroupName, name);
        return inner.mapPage(inner1 -> new RedisLinkedServerWithPropertiesImpl(inner1, this.manager()));
    }

    public PagedIterable<RedisLinkedServerWithProperties> list(String resourceGroupName, String name, Context context) {
        PagedIterable<RedisLinkedServerWithPropertiesInner> inner =
            this.serviceClient().list(resourceGroupName, name, context);
        return inner.mapPage(inner1 -> new RedisLinkedServerWithPropertiesImpl(inner1, this.manager()));
    }

    public RedisLinkedServerWithProperties getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String linkedServerName = Utils.getValueFromIdByName(id, "linkedServers");
        if (linkedServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'linkedServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, linkedServerName, Context.NONE).getValue();
    }

    public Response<RedisLinkedServerWithProperties> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String linkedServerName = Utils.getValueFromIdByName(id, "linkedServers");
        if (linkedServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'linkedServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, linkedServerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String linkedServerName = Utils.getValueFromIdByName(id, "linkedServers");
        if (linkedServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'linkedServers'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, name, linkedServerName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String linkedServerName = Utils.getValueFromIdByName(id, "linkedServers");
        if (linkedServerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'linkedServers'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, linkedServerName, context);
    }

    private LinkedServersClient serviceClient() {
        return this.innerClient;
    }

    private RedisManager manager() {
        return this.serviceManager;
    }

    public RedisLinkedServerWithPropertiesImpl define(String name) {
        return new RedisLinkedServerWithPropertiesImpl(name, this.manager());
    }
}
