// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redis.generated.RedisManager;
import com.azure.resourcemanager.redis.generated.fluent.PatchSchedulesClient;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisPatchScheduleInner;
import com.azure.resourcemanager.redis.generated.models.DefaultName;
import com.azure.resourcemanager.redis.generated.models.PatchSchedules;
import com.azure.resourcemanager.redis.generated.models.RedisPatchSchedule;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PatchSchedulesImpl implements PatchSchedules {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PatchSchedulesImpl.class);

    private final PatchSchedulesClient innerClient;

    private final RedisManager serviceManager;

    public PatchSchedulesImpl(PatchSchedulesClient innerClient, RedisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RedisPatchSchedule> listByRedisResource(String resourceGroupName, String cacheName) {
        PagedIterable<RedisPatchScheduleInner> inner =
            this.serviceClient().listByRedisResource(resourceGroupName, cacheName);
        return inner.mapPage(inner1 -> new RedisPatchScheduleImpl(inner1, this.manager()));
    }

    public PagedIterable<RedisPatchSchedule> listByRedisResource(
        String resourceGroupName, String cacheName, Context context) {
        PagedIterable<RedisPatchScheduleInner> inner =
            this.serviceClient().listByRedisResource(resourceGroupName, cacheName, context);
        return inner.mapPage(inner1 -> new RedisPatchScheduleImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String name, DefaultName defaultParameter) {
        this.serviceClient().delete(resourceGroupName, name, defaultParameter);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String name, DefaultName defaultParameter, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, name, defaultParameter, context);
    }

    public RedisPatchSchedule get(String resourceGroupName, String name, DefaultName defaultParameter) {
        RedisPatchScheduleInner inner = this.serviceClient().get(resourceGroupName, name, defaultParameter);
        if (inner != null) {
            return new RedisPatchScheduleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RedisPatchSchedule> getWithResponse(
        String resourceGroupName, String name, DefaultName defaultParameter, Context context) {
        Response<RedisPatchScheduleInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, name, defaultParameter, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RedisPatchScheduleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RedisPatchSchedule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        DefaultName defaultParameter = DefaultName.fromString(Utils.getValueFromIdByName(id, "patchSchedules"));
        if (defaultParameter == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'patchSchedules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, defaultParameter, Context.NONE).getValue();
    }

    public Response<RedisPatchSchedule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        DefaultName defaultParameter = DefaultName.fromString(Utils.getValueFromIdByName(id, "patchSchedules"));
        if (defaultParameter == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'patchSchedules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, defaultParameter, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        DefaultName defaultParameter = DefaultName.fromString(Utils.getValueFromIdByName(id, "patchSchedules"));
        if (defaultParameter == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'patchSchedules'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, name, defaultParameter, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "redis");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        DefaultName defaultParameter = DefaultName.fromString(Utils.getValueFromIdByName(id, "patchSchedules"));
        if (defaultParameter == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'patchSchedules'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, defaultParameter, context);
    }

    private PatchSchedulesClient serviceClient() {
        return this.innerClient;
    }

    private RedisManager manager() {
        return this.serviceManager;
    }

    public RedisPatchScheduleImpl define(DefaultName name) {
        return new RedisPatchScheduleImpl(name, this.manager());
    }
}
