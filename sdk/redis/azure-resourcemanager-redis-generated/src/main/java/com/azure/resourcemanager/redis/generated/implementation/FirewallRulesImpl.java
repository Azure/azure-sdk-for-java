// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.redis.generated.RedisManager;
import com.azure.resourcemanager.redis.generated.fluent.FirewallRulesClient;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisFirewallRuleInner;
import com.azure.resourcemanager.redis.generated.models.FirewallRules;
import com.azure.resourcemanager.redis.generated.models.RedisFirewallRule;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class FirewallRulesImpl implements FirewallRules {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(FirewallRulesImpl.class);

    private final FirewallRulesClient innerClient;

    private final RedisManager serviceManager;

    public FirewallRulesImpl(FirewallRulesClient innerClient, RedisManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RedisFirewallRule> list(String resourceGroupName, String cacheName) {
        PagedIterable<RedisFirewallRuleInner> inner = this.serviceClient().list(resourceGroupName, cacheName);
        return inner.mapPage(inner1 -> new RedisFirewallRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<RedisFirewallRule> list(String resourceGroupName, String cacheName, Context context) {
        PagedIterable<RedisFirewallRuleInner> inner = this.serviceClient().list(resourceGroupName, cacheName, context);
        return inner.mapPage(inner1 -> new RedisFirewallRuleImpl(inner1, this.manager()));
    }

    public RedisFirewallRule get(String resourceGroupName, String cacheName, String ruleName) {
        RedisFirewallRuleInner inner = this.serviceClient().get(resourceGroupName, cacheName, ruleName);
        if (inner != null) {
            return new RedisFirewallRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RedisFirewallRule> getWithResponse(
        String resourceGroupName, String cacheName, String ruleName, Context context) {
        Response<RedisFirewallRuleInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, cacheName, ruleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RedisFirewallRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String cacheName, String ruleName) {
        this.serviceClient().delete(resourceGroupName, cacheName, ruleName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String cacheName, String ruleName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, cacheName, ruleName, context);
    }

    public RedisFirewallRule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String ruleName = Utils.getValueFromIdByName(id, "firewallRules");
        if (ruleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'firewallRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, cacheName, ruleName, Context.NONE).getValue();
    }

    public Response<RedisFirewallRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String ruleName = Utils.getValueFromIdByName(id, "firewallRules");
        if (ruleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'firewallRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, cacheName, ruleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String ruleName = Utils.getValueFromIdByName(id, "firewallRules");
        if (ruleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'firewallRules'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, cacheName, ruleName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String cacheName = Utils.getValueFromIdByName(id, "redis");
        if (cacheName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'redis'.", id)));
        }
        String ruleName = Utils.getValueFromIdByName(id, "firewallRules");
        if (ruleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'firewallRules'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, cacheName, ruleName, context);
    }

    private FirewallRulesClient serviceClient() {
        return this.innerClient;
    }

    private RedisManager manager() {
        return this.serviceManager;
    }

    public RedisFirewallRuleImpl define(String name) {
        return new RedisFirewallRuleImpl(name, this.manager());
    }
}
