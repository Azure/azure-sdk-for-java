// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.models;

import com.azure.resourcemanager.redis.generated.fluent.models.RedisPropertiesInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of RedisProperties. */
public interface RedisProperties {
    /**
     * Gets the redisConfiguration property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @return the redisConfiguration value.
     */
    Map<String, String> redisConfiguration();

    /**
     * Gets the redisVersion property: Redis version. Only major version will be used in PUT/PATCH request with current
     * valid values: (4, 6).
     *
     * @return the redisVersion value.
     */
    String redisVersion();

    /**
     * Gets the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is enabled.
     *
     * @return the enableNonSslPort value.
     */
    Boolean enableNonSslPort();

    /**
     * Gets the replicasPerMaster property: The number of replicas to be created per primary.
     *
     * @return the replicasPerMaster value.
     */
    Integer replicasPerMaster();

    /**
     * Gets the replicasPerPrimary property: The number of replicas to be created per primary.
     *
     * @return the replicasPerPrimary value.
     */
    Integer replicasPerPrimary();

    /**
     * Gets the tenantSettings property: A dictionary of tenant settings.
     *
     * @return the tenantSettings value.
     */
    Map<String, String> tenantSettings();

    /**
     * Gets the shardCount property: The number of shards to be created on a Premium Cluster Cache.
     *
     * @return the shardCount value.
     */
    Integer shardCount();

    /**
     * Gets the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or higher) to
     * connect (e,g, '1.0', '1.1', '1.2').
     *
     * @return the minimumTlsVersion value.
     */
    TlsVersion minimumTlsVersion();

    /**
     * Gets the publicNetworkAccess property: Whether or not public endpoint access is allowed for this cache. Value is
     * optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive
     * access method. Default value is 'Enabled'.
     *
     * @return the publicNetworkAccess value.
     */
    PublicNetworkAccess publicNetworkAccess();

    /**
     * Gets the sku property: The SKU of the Redis cache to deploy.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the subnetId property: The full resource ID of a subnet in a virtual network to deploy the Redis cache in.
     * Example format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1.
     *
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the staticIp property: Static IP address. Required when deploying a Redis cache inside an existing Azure
     * Virtual Network.
     *
     * @return the staticIp value.
     */
    String staticIp();

    /**
     * Gets the provisioningState property: Redis instance provisioning status.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the hostname property: Redis host name.
     *
     * @return the hostname value.
     */
    String hostname();

    /**
     * Gets the port property: Redis non-SSL port.
     *
     * @return the port value.
     */
    Integer port();

    /**
     * Gets the sslPort property: Redis SSL port.
     *
     * @return the sslPort value.
     */
    Integer sslPort();

    /**
     * Gets the accessKeys property: The keys of the Redis cache - not set if this object is not the response to Create
     * or Update redis cache.
     *
     * @return the accessKeys value.
     */
    RedisAccessKeys accessKeys();

    /**
     * Gets the linkedServers property: List of the linked servers associated with the cache.
     *
     * @return the linkedServers value.
     */
    List<RedisLinkedServer> linkedServers();

    /**
     * Gets the instances property: List of the Redis instances associated with the cache.
     *
     * @return the instances value.
     */
    List<RedisInstanceDetails> instances();

    /**
     * Gets the privateEndpointConnections property: List of private endpoint connection associated with the specified
     * redis cache.
     *
     * @return the privateEndpointConnections value.
     */
    List<PrivateEndpointConnection> privateEndpointConnections();

    /**
     * Gets the inner com.azure.resourcemanager.redis.generated.fluent.models.RedisPropertiesInner object.
     *
     * @return the inner object.
     */
    RedisPropertiesInner innerModel();
}
