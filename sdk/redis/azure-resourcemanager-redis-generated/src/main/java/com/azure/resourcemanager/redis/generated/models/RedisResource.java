// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.redis.generated.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.redis.generated.fluent.models.RedisResourceInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of RedisResource. */
public interface RedisResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the zones property: A list of availability zones denoting where the resource needs to come from.
     *
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the redisConfiguration property: All Redis Settings. Few possible keys:
     * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
     * etc.
     *
     * @return the redisConfiguration value.
     */
    Map<String, String> redisConfiguration();

    /**
     * Gets the redisVersion property: Redis version. Only major version will be used in PUT/PATCH request with current
     * valid values: (4, 6).
     *
     * @return the redisVersion value.
     */
    String redisVersion();

    /**
     * Gets the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is enabled.
     *
     * @return the enableNonSslPort value.
     */
    Boolean enableNonSslPort();

    /**
     * Gets the replicasPerMaster property: The number of replicas to be created per primary.
     *
     * @return the replicasPerMaster value.
     */
    Integer replicasPerMaster();

    /**
     * Gets the replicasPerPrimary property: The number of replicas to be created per primary.
     *
     * @return the replicasPerPrimary value.
     */
    Integer replicasPerPrimary();

    /**
     * Gets the tenantSettings property: A dictionary of tenant settings.
     *
     * @return the tenantSettings value.
     */
    Map<String, String> tenantSettings();

    /**
     * Gets the shardCount property: The number of shards to be created on a Premium Cluster Cache.
     *
     * @return the shardCount value.
     */
    Integer shardCount();

    /**
     * Gets the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or higher) to
     * connect (e,g, '1.0', '1.1', '1.2').
     *
     * @return the minimumTlsVersion value.
     */
    TlsVersion minimumTlsVersion();

    /**
     * Gets the publicNetworkAccess property: Whether or not public endpoint access is allowed for this cache. Value is
     * optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive
     * access method. Default value is 'Enabled'.
     *
     * @return the publicNetworkAccess value.
     */
    PublicNetworkAccess publicNetworkAccess();

    /**
     * Gets the sku property: The SKU of the Redis cache to deploy.
     *
     * @return the sku value.
     */
    Sku sku();

    /**
     * Gets the subnetId property: The full resource ID of a subnet in a virtual network to deploy the Redis cache in.
     * Example format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1.
     *
     * @return the subnetId value.
     */
    String subnetId();

    /**
     * Gets the staticIp property: Static IP address. Required when deploying a Redis cache inside an existing Azure
     * Virtual Network.
     *
     * @return the staticIp value.
     */
    String staticIp();

    /**
     * Gets the provisioningState property: Redis instance provisioning status.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the hostname property: Redis host name.
     *
     * @return the hostname value.
     */
    String hostname();

    /**
     * Gets the port property: Redis non-SSL port.
     *
     * @return the port value.
     */
    Integer port();

    /**
     * Gets the sslPort property: Redis SSL port.
     *
     * @return the sslPort value.
     */
    Integer sslPort();

    /**
     * Gets the accessKeys property: The keys of the Redis cache - not set if this object is not the response to Create
     * or Update redis cache.
     *
     * @return the accessKeys value.
     */
    RedisAccessKeys accessKeys();

    /**
     * Gets the linkedServers property: List of the linked servers associated with the cache.
     *
     * @return the linkedServers value.
     */
    List<RedisLinkedServer> linkedServers();

    /**
     * Gets the instances property: List of the Redis instances associated with the cache.
     *
     * @return the instances value.
     */
    List<RedisInstanceDetails> instances();

    /**
     * Gets the privateEndpointConnections property: List of private endpoint connection associated with the specified
     * redis cache.
     *
     * @return the privateEndpointConnections value.
     */
    List<PrivateEndpointConnection> privateEndpointConnections();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.redis.generated.fluent.models.RedisResourceInner object.
     *
     * @return the inner object.
     */
    RedisResourceInner innerModel();

    /** The entirety of the RedisResource definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithSku,
            DefinitionStages.WithCreate {
    }
    /** The RedisResource definition stages. */
    interface DefinitionStages {
        /** The first stage of the RedisResource definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the RedisResource definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the RedisResource definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithSku withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the RedisResource definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU of the Redis cache to deploy..
             *
             * @param sku The SKU of the Redis cache to deploy.
             * @return the next definition stage.
             */
            WithCreate withSku(Sku sku);
        }
        /**
         * The stage of the RedisResource definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithZones,
                DefinitionStages.WithRedisConfiguration,
                DefinitionStages.WithRedisVersion,
                DefinitionStages.WithEnableNonSslPort,
                DefinitionStages.WithReplicasPerMaster,
                DefinitionStages.WithReplicasPerPrimary,
                DefinitionStages.WithTenantSettings,
                DefinitionStages.WithShardCount,
                DefinitionStages.WithMinimumTlsVersion,
                DefinitionStages.WithPublicNetworkAccess,
                DefinitionStages.WithSubnetId,
                DefinitionStages.WithStaticIp {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            RedisResource create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            RedisResource create(Context context);
        }
        /** The stage of the RedisResource definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the RedisResource definition allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: A list of availability zones denoting where the resource needs to come
             * from..
             *
             * @param zones A list of availability zones denoting where the resource needs to come from.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
        /** The stage of the RedisResource definition allowing to specify redisConfiguration. */
        interface WithRedisConfiguration {
            /**
             * Specifies the redisConfiguration property: All Redis Settings. Few possible keys:
             * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
             * etc..
             *
             * @param redisConfiguration All Redis Settings. Few possible keys:
             *     rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
             *     etc.
             * @return the next definition stage.
             */
            WithCreate withRedisConfiguration(Map<String, String> redisConfiguration);
        }
        /** The stage of the RedisResource definition allowing to specify redisVersion. */
        interface WithRedisVersion {
            /**
             * Specifies the redisVersion property: Redis version. Only major version will be used in PUT/PATCH request
             * with current valid values: (4, 6).
             *
             * @param redisVersion Redis version. Only major version will be used in PUT/PATCH request with current
             *     valid values: (4, 6).
             * @return the next definition stage.
             */
            WithCreate withRedisVersion(String redisVersion);
        }
        /** The stage of the RedisResource definition allowing to specify enableNonSslPort. */
        interface WithEnableNonSslPort {
            /**
             * Specifies the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is
             * enabled..
             *
             * @param enableNonSslPort Specifies whether the non-ssl Redis server port (6379) is enabled.
             * @return the next definition stage.
             */
            WithCreate withEnableNonSslPort(Boolean enableNonSslPort);
        }
        /** The stage of the RedisResource definition allowing to specify replicasPerMaster. */
        interface WithReplicasPerMaster {
            /**
             * Specifies the replicasPerMaster property: The number of replicas to be created per primary..
             *
             * @param replicasPerMaster The number of replicas to be created per primary.
             * @return the next definition stage.
             */
            WithCreate withReplicasPerMaster(Integer replicasPerMaster);
        }
        /** The stage of the RedisResource definition allowing to specify replicasPerPrimary. */
        interface WithReplicasPerPrimary {
            /**
             * Specifies the replicasPerPrimary property: The number of replicas to be created per primary..
             *
             * @param replicasPerPrimary The number of replicas to be created per primary.
             * @return the next definition stage.
             */
            WithCreate withReplicasPerPrimary(Integer replicasPerPrimary);
        }
        /** The stage of the RedisResource definition allowing to specify tenantSettings. */
        interface WithTenantSettings {
            /**
             * Specifies the tenantSettings property: A dictionary of tenant settings.
             *
             * @param tenantSettings A dictionary of tenant settings.
             * @return the next definition stage.
             */
            WithCreate withTenantSettings(Map<String, String> tenantSettings);
        }
        /** The stage of the RedisResource definition allowing to specify shardCount. */
        interface WithShardCount {
            /**
             * Specifies the shardCount property: The number of shards to be created on a Premium Cluster Cache..
             *
             * @param shardCount The number of shards to be created on a Premium Cluster Cache.
             * @return the next definition stage.
             */
            WithCreate withShardCount(Integer shardCount);
        }
        /** The stage of the RedisResource definition allowing to specify minimumTlsVersion. */
        interface WithMinimumTlsVersion {
            /**
             * Specifies the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or
             * higher) to connect (e,g, '1.0', '1.1', '1.2').
             *
             * @param minimumTlsVersion Optional: requires clients to use a specified TLS version (or higher) to connect
             *     (e,g, '1.0', '1.1', '1.2').
             * @return the next definition stage.
             */
            WithCreate withMinimumTlsVersion(TlsVersion minimumTlsVersion);
        }
        /** The stage of the RedisResource definition allowing to specify publicNetworkAccess. */
        interface WithPublicNetworkAccess {
            /**
             * Specifies the publicNetworkAccess property: Whether or not public endpoint access is allowed for this
             * cache. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private
             * endpoints are the exclusive access method. Default value is 'Enabled'.
             *
             * @param publicNetworkAccess Whether or not public endpoint access is allowed for this cache. Value is
             *     optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the
             *     exclusive access method. Default value is 'Enabled'.
             * @return the next definition stage.
             */
            WithCreate withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess);
        }
        /** The stage of the RedisResource definition allowing to specify subnetId. */
        interface WithSubnetId {
            /**
             * Specifies the subnetId property: The full resource ID of a subnet in a virtual network to deploy the
             * Redis cache in. Example format:
             * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1.
             *
             * @param subnetId The full resource ID of a subnet in a virtual network to deploy the Redis cache in.
             *     Example format:
             *     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1.
             * @return the next definition stage.
             */
            WithCreate withSubnetId(String subnetId);
        }
        /** The stage of the RedisResource definition allowing to specify staticIp. */
        interface WithStaticIp {
            /**
             * Specifies the staticIp property: Static IP address. Required when deploying a Redis cache inside an
             * existing Azure Virtual Network..
             *
             * @param staticIp Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual
             *     Network.
             * @return the next definition stage.
             */
            WithCreate withStaticIp(String staticIp);
        }
    }
    /**
     * Begins update for the RedisResource resource.
     *
     * @return the stage of resource update.
     */
    RedisResource.Update update();

    /** The template for RedisResource update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithRedisConfiguration,
            UpdateStages.WithRedisVersion,
            UpdateStages.WithEnableNonSslPort,
            UpdateStages.WithReplicasPerMaster,
            UpdateStages.WithReplicasPerPrimary,
            UpdateStages.WithTenantSettings,
            UpdateStages.WithShardCount,
            UpdateStages.WithMinimumTlsVersion,
            UpdateStages.WithPublicNetworkAccess,
            UpdateStages.WithSku {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        RedisResource apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        RedisResource apply(Context context);
    }
    /** The RedisResource update stages. */
    interface UpdateStages {
        /** The stage of the RedisResource update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the RedisResource update allowing to specify redisConfiguration. */
        interface WithRedisConfiguration {
            /**
             * Specifies the redisConfiguration property: All Redis Settings. Few possible keys:
             * rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
             * etc..
             *
             * @param redisConfiguration All Redis Settings. Few possible keys:
             *     rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value
             *     etc.
             * @return the next definition stage.
             */
            Update withRedisConfiguration(Map<String, String> redisConfiguration);
        }
        /** The stage of the RedisResource update allowing to specify redisVersion. */
        interface WithRedisVersion {
            /**
             * Specifies the redisVersion property: Redis version. Only major version will be used in PUT/PATCH request
             * with current valid values: (4, 6).
             *
             * @param redisVersion Redis version. Only major version will be used in PUT/PATCH request with current
             *     valid values: (4, 6).
             * @return the next definition stage.
             */
            Update withRedisVersion(String redisVersion);
        }
        /** The stage of the RedisResource update allowing to specify enableNonSslPort. */
        interface WithEnableNonSslPort {
            /**
             * Specifies the enableNonSslPort property: Specifies whether the non-ssl Redis server port (6379) is
             * enabled..
             *
             * @param enableNonSslPort Specifies whether the non-ssl Redis server port (6379) is enabled.
             * @return the next definition stage.
             */
            Update withEnableNonSslPort(Boolean enableNonSslPort);
        }
        /** The stage of the RedisResource update allowing to specify replicasPerMaster. */
        interface WithReplicasPerMaster {
            /**
             * Specifies the replicasPerMaster property: The number of replicas to be created per primary..
             *
             * @param replicasPerMaster The number of replicas to be created per primary.
             * @return the next definition stage.
             */
            Update withReplicasPerMaster(Integer replicasPerMaster);
        }
        /** The stage of the RedisResource update allowing to specify replicasPerPrimary. */
        interface WithReplicasPerPrimary {
            /**
             * Specifies the replicasPerPrimary property: The number of replicas to be created per primary..
             *
             * @param replicasPerPrimary The number of replicas to be created per primary.
             * @return the next definition stage.
             */
            Update withReplicasPerPrimary(Integer replicasPerPrimary);
        }
        /** The stage of the RedisResource update allowing to specify tenantSettings. */
        interface WithTenantSettings {
            /**
             * Specifies the tenantSettings property: A dictionary of tenant settings.
             *
             * @param tenantSettings A dictionary of tenant settings.
             * @return the next definition stage.
             */
            Update withTenantSettings(Map<String, String> tenantSettings);
        }
        /** The stage of the RedisResource update allowing to specify shardCount. */
        interface WithShardCount {
            /**
             * Specifies the shardCount property: The number of shards to be created on a Premium Cluster Cache..
             *
             * @param shardCount The number of shards to be created on a Premium Cluster Cache.
             * @return the next definition stage.
             */
            Update withShardCount(Integer shardCount);
        }
        /** The stage of the RedisResource update allowing to specify minimumTlsVersion. */
        interface WithMinimumTlsVersion {
            /**
             * Specifies the minimumTlsVersion property: Optional: requires clients to use a specified TLS version (or
             * higher) to connect (e,g, '1.0', '1.1', '1.2').
             *
             * @param minimumTlsVersion Optional: requires clients to use a specified TLS version (or higher) to connect
             *     (e,g, '1.0', '1.1', '1.2').
             * @return the next definition stage.
             */
            Update withMinimumTlsVersion(TlsVersion minimumTlsVersion);
        }
        /** The stage of the RedisResource update allowing to specify publicNetworkAccess. */
        interface WithPublicNetworkAccess {
            /**
             * Specifies the publicNetworkAccess property: Whether or not public endpoint access is allowed for this
             * cache. Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private
             * endpoints are the exclusive access method. Default value is 'Enabled'.
             *
             * @param publicNetworkAccess Whether or not public endpoint access is allowed for this cache. Value is
             *     optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the
             *     exclusive access method. Default value is 'Enabled'.
             * @return the next definition stage.
             */
            Update withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess);
        }
        /** The stage of the RedisResource update allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU of the Redis cache to deploy..
             *
             * @param sku The SKU of the Redis cache to deploy.
             * @return the next definition stage.
             */
            Update withSku(Sku sku);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    RedisResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    RedisResource refresh(Context context);

    /**
     * Retrieve a Redis cache's access keys. This operation requires write permission to the cache resource.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis cache access keys.
     */
    RedisAccessKeys listKeys();

    /**
     * Retrieve a Redis cache's access keys. This operation requires write permission to the cache resource.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis cache access keys.
     */
    Response<RedisAccessKeys> listKeysWithResponse(Context context);

    /**
     * Regenerate Redis cache's access keys. This operation requires write permission to the cache resource.
     *
     * @param parameters Specifies which key to regenerate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis cache access keys.
     */
    RedisAccessKeys regenerateKey(RedisRegenerateKeyParameters parameters);

    /**
     * Regenerate Redis cache's access keys. This operation requires write permission to the cache resource.
     *
     * @param parameters Specifies which key to regenerate.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return redis cache access keys.
     */
    Response<RedisAccessKeys> regenerateKeyWithResponse(RedisRegenerateKeyParameters parameters, Context context);

    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be
     * potential data loss.
     *
     * @param parameters Specifies which Redis node(s) to reboot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to force reboot for Redis cache.
     */
    RedisForceRebootResponse forceReboot(RedisRebootParameters parameters);

    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be
     * potential data loss.
     *
     * @param parameters Specifies which Redis node(s) to reboot.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response to force reboot for Redis cache.
     */
    Response<RedisForceRebootResponse> forceRebootWithResponse(RedisRebootParameters parameters, Context context);

    /**
     * Import data into Redis cache.
     *
     * @param parameters Parameters for Redis import operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void importData(ImportRdbParameters parameters);

    /**
     * Import data into Redis cache.
     *
     * @param parameters Parameters for Redis import operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void importData(ImportRdbParameters parameters, Context context);

    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @param parameters Parameters for Redis export operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void exportData(ExportRdbParameters parameters);

    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @param parameters Parameters for Redis export operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void exportData(ExportRdbParameters parameters, Context context);
}
