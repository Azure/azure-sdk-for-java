/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.redis.v2017_10_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.redis.v2017_10_01.implementation.RedisFirewallRuleInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.redis.v2017_10_01.implementation.CacheManager;

/**
 * Type representing RedisFirewallRule.
 */
public interface RedisFirewallRule extends HasInner<RedisFirewallRuleInner>, Indexable, Refreshable<RedisFirewallRule>, Updatable<RedisFirewallRule.Update>, HasManager<CacheManager> {
    /**
     * @return the endIP value.
     */
    String endIP();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the startIP value.
     */
    String startIP();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the RedisFirewallRule definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithRedi, DefinitionStages.WithEndIP, DefinitionStages.WithStartIP, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of RedisFirewallRule definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a RedisFirewallRule definition.
         */
        interface Blank extends WithRedi {
        }

        /**
         * The stage of the redisfirewallrule definition allowing to specify Redi.
         */
        interface WithRedi {
           /**
            * Specifies resourceGroupName, cacheName.
            * @param resourceGroupName The name of the resource group
            * @param cacheName The name of the Redis cache
            * @return the next definition stage
            */
            WithEndIP withExistingRedi(String resourceGroupName, String cacheName);
        }

        /**
         * The stage of the redisfirewallrule definition allowing to specify EndIP.
         */
        interface WithEndIP {
           /**
            * Specifies endIP.
            * @param endIP highest IP address included in the range
            * @return the next definition stage
            */
            WithStartIP withEndIP(String endIP);
        }

        /**
         * The stage of the redisfirewallrule definition allowing to specify StartIP.
         */
        interface WithStartIP {
           /**
            * Specifies startIP.
            * @param startIP lowest IP address included in the range
            * @return the next definition stage
            */
            WithCreate withStartIP(String startIP);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<RedisFirewallRule> {
        }
    }
    /**
     * The template for a RedisFirewallRule update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<RedisFirewallRule> {
    }

    /**
     * Grouping of RedisFirewallRule update stages.
     */
    interface UpdateStages {
    }
}
