/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.redis.v2017_10_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.redis.v2017_10_01.implementation.LinkedServersInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing LinkedServers.
 */
public interface LinkedServers extends SupportsCreating<RedisLinkedServerWithProperties.DefinitionStages.Blank>, HasInner<LinkedServersInner> {
    /**
     * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RedisLinkedServerWithProperties> getAsync(String resourceGroupName, String name, String linkedServerName);

    /**
     * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RedisLinkedServerWithProperties> listAsync(final String resourceGroupName, final String name);

    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String name, String linkedServerName);

}
