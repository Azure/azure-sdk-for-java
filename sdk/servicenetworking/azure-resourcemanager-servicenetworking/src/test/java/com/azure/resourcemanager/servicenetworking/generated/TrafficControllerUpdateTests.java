// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyConfigurationsUpdate;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerUpdate;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerUpdateProperties;
import com.azure.resourcemanager.servicenetworking.models.WafSecurityPolicyUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrafficControllerUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrafficControllerUpdate model = BinaryData.fromString(
            "{\"tags\":{\"dgeablgphu\":\"atqxho\",\"xhurok\":\"icndvkaozwyifty\",\"kjfkg\":\"tyxolniwpwc\",\"plwckbas\":\"awxklr\"},\"properties\":{\"securityPolicyConfigurations\":{\"wafSecurityPolicy\":{\"id\":\"dhsgcba\"}}}}")
            .toObject(TrafficControllerUpdate.class);
        Assertions.assertEquals("atqxho", model.tags().get("dgeablgphu"));
        Assertions.assertEquals("dhsgcba", model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrafficControllerUpdate model = new TrafficControllerUpdate()
            .withTags(mapOf("dgeablgphu", "atqxho", "xhurok", "icndvkaozwyifty", "kjfkg", "tyxolniwpwc", "plwckbas",
                "awxklr"))
            .withProperties(new TrafficControllerUpdateProperties()
                .withSecurityPolicyConfigurations(new SecurityPolicyConfigurationsUpdate()
                    .withWafSecurityPolicy(new WafSecurityPolicyUpdate().withId("dhsgcba"))));
        model = BinaryData.fromObject(model).toObject(TrafficControllerUpdate.class);
        Assertions.assertEquals("atqxho", model.tags().get("dgeablgphu"));
        Assertions.assertEquals("dhsgcba", model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
