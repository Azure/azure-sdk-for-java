// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.TrafficControllerInner;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrafficControllerListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrafficControllerListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"configurationEndpoints\":[],\"frontends\":[],\"associations\":[],\"provisioningState\":\"Updating\"},\"location\":\"hab\",\"tags\":{\"byscnp\":\"ikxwc\",\"hiv\":\"x\",\"rtfw\":\"qniwbybrkxvdumj\",\"cs\":\"ukxgaud\"},\"id\":\"h\",\"name\":\"jcny\",\"type\":\"j\"}],\"nextLink\":\"ryhtnapczwlokjy\"}")
                .toObject(TrafficControllerListResult.class);
        Assertions.assertEquals("hab", model.value().get(0).location());
        Assertions.assertEquals("ikxwc", model.value().get(0).tags().get("byscnp"));
        Assertions.assertEquals("ryhtnapczwlokjy", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrafficControllerListResult model =
            new TrafficControllerListResult()
                .withValue(
                    Arrays
                        .asList(
                            new TrafficControllerInner()
                                .withLocation("hab")
                                .withTags(
                                    mapOf("byscnp", "ikxwc", "hiv", "x", "rtfw", "qniwbybrkxvdumj", "cs", "ukxgaud"))))
                .withNextLink("ryhtnapczwlokjy");
        model = BinaryData.fromObject(model).toObject(TrafficControllerListResult.class);
        Assertions.assertEquals("hab", model.value().get(0).location());
        Assertions.assertEquals("ikxwc", model.value().get(0).tags().get("byscnp"));
        Assertions.assertEquals("ryhtnapczwlokjy", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
