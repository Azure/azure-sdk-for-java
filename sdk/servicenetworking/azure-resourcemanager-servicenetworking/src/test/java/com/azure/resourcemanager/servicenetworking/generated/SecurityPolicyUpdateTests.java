// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRule;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRuleAction;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRulesPolicy;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyUpdate;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyUpdateProperties;
import com.azure.resourcemanager.servicenetworking.models.WafPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecurityPolicyUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecurityPolicyUpdate model = BinaryData.fromString(
            "{\"tags\":{\"mdwzjeiachboo\":\"sne\"},\"properties\":{\"wafPolicy\":{\"id\":\"nrosfqpte\"},\"ipAccessRulesPolicy\":{\"rules\":[{\"name\":\"vypyqrimzinpv\",\"priority\":990570448,\"sourceAddressPrefixes\":[\"dkirsoodqxhcr\",\"nohjt\",\"kwh\"],\"action\":\"deny\"},{\"name\":\"oifiyipjxsqwpgr\",\"priority\":1124714443,\"sourceAddressPrefixes\":[\"norcjxvsnbyxqab\",\"mocpc\"],\"action\":\"deny\"},{\"name\":\"hurzafblj\",\"priority\":844718571,\"sourceAddressPrefixes\":[\"btoqcjmkljavbqid\",\"qajzyulpkudjkr\",\"khbzhfepgzg\"],\"action\":\"allow\"},{\"name\":\"xzlocxscp\",\"priority\":1853852705,\"sourceAddressPrefixes\":[\"rhhbcs\",\"l\",\"mmajtjaodx\"],\"action\":\"deny\"}]}}}")
            .toObject(SecurityPolicyUpdate.class);
        Assertions.assertEquals("sne", model.tags().get("mdwzjeiachboo"));
        Assertions.assertEquals("nrosfqpte", model.properties().wafPolicy().id());
        Assertions.assertEquals("vypyqrimzinpv", model.properties().ipAccessRulesPolicy().rules().get(0).name());
        Assertions.assertEquals(990570448, model.properties().ipAccessRulesPolicy().rules().get(0).priority());
        Assertions.assertEquals("dkirsoodqxhcr",
            model.properties().ipAccessRulesPolicy().rules().get(0).sourceAddressPrefixes().get(0));
        Assertions.assertEquals(IpAccessRuleAction.DENY,
            model.properties().ipAccessRulesPolicy().rules().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecurityPolicyUpdate model = new SecurityPolicyUpdate().withTags(mapOf("mdwzjeiachboo", "sne"))
            .withProperties(new SecurityPolicyUpdateProperties().withWafPolicy(new WafPolicy().withId("nrosfqpte"))
                .withIpAccessRulesPolicy(new IpAccessRulesPolicy().withRules(Arrays.asList(
                    new IpAccessRule().withName("vypyqrimzinpv")
                        .withPriority(990570448)
                        .withSourceAddressPrefixes(Arrays.asList("dkirsoodqxhcr", "nohjt", "kwh"))
                        .withAction(IpAccessRuleAction.DENY),
                    new IpAccessRule().withName("oifiyipjxsqwpgr")
                        .withPriority(1124714443)
                        .withSourceAddressPrefixes(Arrays.asList("norcjxvsnbyxqab", "mocpc"))
                        .withAction(IpAccessRuleAction.DENY),
                    new IpAccessRule().withName("hurzafblj")
                        .withPriority(844718571)
                        .withSourceAddressPrefixes(Arrays.asList("btoqcjmkljavbqid", "qajzyulpkudjkr", "khbzhfepgzg"))
                        .withAction(IpAccessRuleAction.ALLOW),
                    new IpAccessRule().withName("xzlocxscp")
                        .withPriority(1853852705)
                        .withSourceAddressPrefixes(Arrays.asList("rhhbcs", "l", "mmajtjaodx"))
                        .withAction(IpAccessRuleAction.DENY)))));
        model = BinaryData.fromObject(model).toObject(SecurityPolicyUpdate.class);
        Assertions.assertEquals("sne", model.tags().get("mdwzjeiachboo"));
        Assertions.assertEquals("nrosfqpte", model.properties().wafPolicy().id());
        Assertions.assertEquals("vypyqrimzinpv", model.properties().ipAccessRulesPolicy().rules().get(0).name());
        Assertions.assertEquals(990570448, model.properties().ipAccessRulesPolicy().rules().get(0).priority());
        Assertions.assertEquals("dkirsoodqxhcr",
            model.properties().ipAccessRulesPolicy().rules().get(0).sourceAddressPrefixes().get(0));
        Assertions.assertEquals(IpAccessRuleAction.DENY,
            model.properties().ipAccessRulesPolicy().rules().get(0).action());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
