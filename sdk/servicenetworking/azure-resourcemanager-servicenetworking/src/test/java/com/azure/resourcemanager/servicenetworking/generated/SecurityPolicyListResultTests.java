// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.SecurityPolicyInner;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyListResult;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyProperties;
import com.azure.resourcemanager.servicenetworking.models.WafPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecurityPolicyListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecurityPolicyListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"policyType\":\"waf\",\"wafPolicy\":{\"id\":\"rzayv\"},\"provisioningState\":\"Succeeded\"},\"location\":\"vdfgiotk\",\"tags\":{\"xlefgugnxkrx\":\"tqxln\",\"tthzrvqd\":\"qmi\"},\"id\":\"abhjybi\",\"name\":\"ehoqfbowskan\",\"type\":\"ktzlcuiywg\"}],\"nextLink\":\"wgndrvynhzgpp\"}")
            .toObject(SecurityPolicyListResult.class);
        Assertions.assertEquals("vdfgiotk", model.value().get(0).location());
        Assertions.assertEquals("tqxln", model.value().get(0).tags().get("xlefgugnxkrx"));
        Assertions.assertEquals("rzayv", model.value().get(0).properties().wafPolicy().id());
        Assertions.assertEquals("wgndrvynhzgpp", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecurityPolicyListResult model = new SecurityPolicyListResult()
            .withValue(Arrays.asList(new SecurityPolicyInner().withLocation("vdfgiotk")
                .withTags(mapOf("xlefgugnxkrx", "tqxln", "tthzrvqd", "qmi"))
                .withProperties(new SecurityPolicyProperties().withWafPolicy(new WafPolicy().withId("rzayv")))))
            .withNextLink("wgndrvynhzgpp");
        model = BinaryData.fromObject(model).toObject(SecurityPolicyListResult.class);
        Assertions.assertEquals("vdfgiotk", model.value().get(0).location());
        Assertions.assertEquals("tqxln", model.value().get(0).tags().get("xlefgugnxkrx"));
        Assertions.assertEquals("rzayv", model.value().get(0).properties().wafPolicy().id());
        Assertions.assertEquals("wgndrvynhzgpp", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
