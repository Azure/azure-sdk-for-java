// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.servicenetworking.TrafficControllerManager;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRule;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRuleAction;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRulesPolicy;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicy;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyProperties;
import com.azure.resourcemanager.servicenetworking.models.WafPolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SecurityPoliciesInterfacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"policyType\":\"waf\",\"wafPolicy\":{\"id\":\"tpvjzbexilzznfqq\"},\"ipAccessRulesPolicy\":{\"rules\":[{\"name\":\"mqtaruoujmkcjh\",\"priority\":1589023977,\"sourceAddressPrefixes\":[\"tjrybnwjewgdr\",\"ervnaenqpehi\",\"doy\",\"mifthnzdnd\"],\"action\":\"allow\"},{\"name\":\"gnayqigynduh\",\"priority\":924939472,\"sourceAddressPrefixes\":[\"qlkth\",\"maqolbgycduie\",\"tgccymvaolpss\"],\"action\":\"deny\"}]},\"provisioningState\":\"Succeeded\"},\"location\":\"mdnbbglzpswiy\",\"tags\":{\"sadbz\":\"wyhzdx\",\"dvxzbncblylpst\":\"nvdfznuda\",\"rsc\":\"bhhxsrzdzuc\"},\"id\":\"ntnev\",\"name\":\"iwjmygtdssls\",\"type\":\"tmweriofzpyq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        TrafficControllerManager manager = TrafficControllerManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SecurityPolicy response = manager.securityPoliciesInterfaces()
            .define("qzvszjf")
            .withRegion("wwfbkrvrnsvshq")
            .withExistingTrafficController("xjyngudivk", "tswb")
            .withTags(mapOf("sbfov", "xc"))
            .withProperties(new SecurityPolicyProperties().withWafPolicy(new WafPolicy().withId("dxxiv"))
                .withIpAccessRulesPolicy(
                    new IpAccessRulesPolicy().withRules(Arrays.asList(new IpAccessRule().withName("cqaqtdoqmcbx")
                        .withPriority(1486848471)
                        .withSourceAddressPrefixes(Arrays.asList("xyslqbh", "fxoblytkb"))
                        .withAction(IpAccessRuleAction.ALLOW)))))
            .create();

        Assertions.assertEquals("mdnbbglzpswiy", response.location());
        Assertions.assertEquals("wyhzdx", response.tags().get("sadbz"));
        Assertions.assertEquals("tpvjzbexilzznfqq", response.properties().wafPolicy().id());
        Assertions.assertEquals("mqtaruoujmkcjh", response.properties().ipAccessRulesPolicy().rules().get(0).name());
        Assertions.assertEquals(1589023977, response.properties().ipAccessRulesPolicy().rules().get(0).priority());
        Assertions.assertEquals("tjrybnwjewgdr",
            response.properties().ipAccessRulesPolicy().rules().get(0).sourceAddressPrefixes().get(0));
        Assertions.assertEquals(IpAccessRuleAction.ALLOW,
            response.properties().ipAccessRulesPolicy().rules().get(0).action());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
