// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.AssociationInner;
import com.azure.resourcemanager.servicenetworking.models.AssociationProperties;
import com.azure.resourcemanager.servicenetworking.models.AssociationSubnet;
import com.azure.resourcemanager.servicenetworking.models.AssociationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssociationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssociationInner model = BinaryData.fromString(
            "{\"properties\":{\"associationType\":\"subnets\",\"subnet\":{\"id\":\"quvgjxpybczme\"},\"provisioningState\":\"Failed\"},\"location\":\"opb\",\"tags\":{\"ejhphoyc\":\"rupidgsyb\"},\"id\":\"sx\",\"name\":\"obhdxbmtqioqjze\",\"type\":\"tbmufpo\"}")
            .toObject(AssociationInner.class);
        Assertions.assertEquals("opb", model.location());
        Assertions.assertEquals("rupidgsyb", model.tags().get("ejhphoyc"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.properties().associationType());
        Assertions.assertEquals("quvgjxpybczme", model.properties().subnet().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssociationInner model = new AssociationInner().withLocation("opb")
            .withTags(mapOf("ejhphoyc", "rupidgsyb"))
            .withProperties(new AssociationProperties().withAssociationType(AssociationType.SUBNETS)
                .withSubnet(new AssociationSubnet().withId("quvgjxpybczme")));
        model = BinaryData.fromObject(model).toObject(AssociationInner.class);
        Assertions.assertEquals("opb", model.location());
        Assertions.assertEquals("rupidgsyb", model.tags().get("ejhphoyc"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.properties().associationType());
        Assertions.assertEquals("quvgjxpybczme", model.properties().subnet().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
