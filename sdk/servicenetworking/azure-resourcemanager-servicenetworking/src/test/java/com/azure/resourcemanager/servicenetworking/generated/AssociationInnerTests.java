// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.AssociationInner;
import com.azure.resourcemanager.servicenetworking.models.AssociationSubnet;
import com.azure.resourcemanager.servicenetworking.models.AssociationType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AssociationInnerTests {
    @Test
    public void testDeserialize() {
        AssociationInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"associationType\":\"subnets\",\"subnet\":{\"id\":\"dgak\"},\"provisioningState\":\"Succeeded\"},\"location\":\"xybz\",\"tags\":{\"kzsmodm\":\"dqytbciqfouflmm\"},\"id\":\"lougpbkw\",\"name\":\"mutduqktaps\",\"type\":\"wgcu\"}")
                .toObject(AssociationInner.class);
        Assertions.assertEquals("xybz", model.location());
        Assertions.assertEquals("dqytbciqfouflmm", model.tags().get("kzsmodm"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.associationType());
        Assertions.assertEquals("dgak", model.subnet().id());
    }

    @Test
    public void testSerialize() {
        AssociationInner model =
            new AssociationInner()
                .withLocation("xybz")
                .withTags(mapOf("kzsmodm", "dqytbciqfouflmm"))
                .withAssociationType(AssociationType.SUBNETS)
                .withSubnet(new AssociationSubnet().withId("dgak"));
        model = BinaryData.fromObject(model).toObject(AssociationInner.class);
        Assertions.assertEquals("xybz", model.location());
        Assertions.assertEquals("dqytbciqfouflmm", model.tags().get("kzsmodm"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.associationType());
        Assertions.assertEquals("dgak", model.subnet().id());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
