// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.SecurityPolicyInner;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyProperties;
import com.azure.resourcemanager.servicenetworking.models.WafPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SecurityPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SecurityPolicyInner model = BinaryData.fromString(
            "{\"properties\":{\"policyType\":\"waf\",\"wafPolicy\":{\"id\":\"nc\"},\"provisioningState\":\"Updating\"},\"location\":\"cfvmmco\",\"tags\":{\"mivkwlzuvcc\":\"xlzevgbmqjqabcy\",\"onlebxetqgtzxdpn\":\"wnfnbacf\",\"eallnwsubisnj\":\"bqqwxrj\"},\"id\":\"mpmngnzscxaqwoo\",\"name\":\"hcbonqvpkvlr\",\"type\":\"njeaseipheofloke\"}")
            .toObject(SecurityPolicyInner.class);
        Assertions.assertEquals("cfvmmco", model.location());
        Assertions.assertEquals("xlzevgbmqjqabcy", model.tags().get("mivkwlzuvcc"));
        Assertions.assertEquals("nc", model.properties().wafPolicy().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SecurityPolicyInner model = new SecurityPolicyInner().withLocation("cfvmmco")
            .withTags(
                mapOf("mivkwlzuvcc", "xlzevgbmqjqabcy", "onlebxetqgtzxdpn", "wnfnbacf", "eallnwsubisnj", "bqqwxrj"))
            .withProperties(new SecurityPolicyProperties().withWafPolicy(new WafPolicy().withId("nc")));
        model = BinaryData.fromObject(model).toObject(SecurityPolicyInner.class);
        Assertions.assertEquals("cfvmmco", model.location());
        Assertions.assertEquals("xlzevgbmqjqabcy", model.tags().get("mivkwlzuvcc"));
        Assertions.assertEquals("nc", model.properties().wafPolicy().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
