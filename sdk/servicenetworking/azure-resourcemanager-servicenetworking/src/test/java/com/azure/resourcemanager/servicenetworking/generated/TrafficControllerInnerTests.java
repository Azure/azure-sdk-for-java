// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.TrafficControllerInner;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyConfigurations;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerProperties;
import com.azure.resourcemanager.servicenetworking.models.WafSecurityPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrafficControllerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrafficControllerInner model = BinaryData.fromString(
            "{\"properties\":{\"configurationEndpoints\":[\"hmsbzjhcrzevdp\",\"lxaolthqtrgqjbp\"],\"frontends\":[{\"id\":\"s\"},{\"id\":\"n\"},{\"id\":\"gvfcj\"},{\"id\":\"wzo\"}],\"associations\":[{\"id\":\"tfell\"}],\"securityPolicies\":[{\"id\":\"zitonpeqfpjkjl\"},{\"id\":\"ofpdvh\"}],\"securityPolicyConfigurations\":{\"wafSecurityPolicy\":{\"id\":\"xypininmayhuybbk\"}},\"provisioningState\":\"Canceled\"},\"location\":\"po\",\"tags\":{\"xzxtheo\":\"nuvamiheogna\",\"cciqihnhungbwjz\":\"usivye\",\"kufubljo\":\"nfygxgispemvtz\"},\"id\":\"xqeofjaeqjhqjba\",\"name\":\"v\",\"type\":\"smjqulngsntnbyb\"}")
            .toObject(TrafficControllerInner.class);
        Assertions.assertEquals("po", model.location());
        Assertions.assertEquals("nuvamiheogna", model.tags().get("xzxtheo"));
        Assertions.assertEquals("xypininmayhuybbk",
            model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrafficControllerInner model
            = new TrafficControllerInner().withLocation("po")
                .withTags(mapOf("xzxtheo", "nuvamiheogna", "cciqihnhungbwjz", "usivye", "kufubljo", "nfygxgispemvtz"))
                .withProperties(new TrafficControllerProperties()
                    .withSecurityPolicyConfigurations(new SecurityPolicyConfigurations()
                        .withWafSecurityPolicy(new WafSecurityPolicy().withId("xypininmayhuybbk"))));
        model = BinaryData.fromObject(model).toObject(TrafficControllerInner.class);
        Assertions.assertEquals("po", model.location());
        Assertions.assertEquals("nuvamiheogna", model.tags().get("xzxtheo"));
        Assertions.assertEquals("xypininmayhuybbk",
            model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
