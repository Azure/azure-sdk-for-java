// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.TrafficControllerInner;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TrafficControllerInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TrafficControllerInner model = BinaryData.fromString(
            "{\"properties\":{\"configurationEndpoints\":[\"fdatsc\",\"dvpjhulsuuvmk\",\"ozkrwfndiodjpslw\"],\"frontends\":[{\"id\":\"pvwryoqpsoacc\"},{\"id\":\"azakl\"},{\"id\":\"lahbcryff\"},{\"id\":\"fdosyg\"}],\"associations\":[{\"id\":\"aojakhmsbzjhcrz\"},{\"id\":\"vdphlxaolthqtr\"},{\"id\":\"qjbpfzfsin\"},{\"id\":\"gvfcj\"}],\"provisioningState\":\"Accepted\"},\"location\":\"xxjtfe\",\"tags\":{\"lxofpdvhpfxxypin\":\"wfzitonpeqfpjk\",\"podepoo\":\"nmayhuybb\",\"rxzxtheo\":\"inuvamiheogn\"},\"id\":\"usivye\",\"name\":\"cciqihnhungbwjz\",\"type\":\"nfygxgispemvtz\"}")
            .toObject(TrafficControllerInner.class);
        Assertions.assertEquals("xxjtfe", model.location());
        Assertions.assertEquals("wfzitonpeqfpjk", model.tags().get("lxofpdvhpfxxypin"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TrafficControllerInner model = new TrafficControllerInner().withLocation("xxjtfe")
            .withTags(mapOf("lxofpdvhpfxxypin", "wfzitonpeqfpjk", "podepoo", "nmayhuybb", "rxzxtheo", "inuvamiheogn"))
            .withProperties(new TrafficControllerProperties());
        model = BinaryData.fromObject(model).toObject(TrafficControllerInner.class);
        Assertions.assertEquals("xxjtfe", model.location());
        Assertions.assertEquals("wfzitonpeqfpjk", model.tags().get("lxofpdvhpfxxypin"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
