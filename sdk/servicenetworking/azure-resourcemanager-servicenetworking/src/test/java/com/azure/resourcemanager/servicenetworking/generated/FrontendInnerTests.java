// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.FrontendInner;
import com.azure.resourcemanager.servicenetworking.models.FrontendIpAddressVersion;
import com.azure.resourcemanager.servicenetworking.models.FrontendMode;
import com.azure.resourcemanager.servicenetworking.models.FrontendPropertiesIpAddress;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FrontendInnerTests {
    @Test
    public void testDeserialize() {
        FrontendInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"mode\":\"public\",\"ipAddressVersion\":\"IPv6\",\"publicIPAddress\":{\"id\":\"qabnmoc\"},\"provisioningState\":\"Canceled\"},\"location\":\"hurzafblj\",\"tags\":{\"qajzyulpkudjkr\":\"btoqcjmkljavbqid\",\"e\":\"khbzhfepgzg\",\"scpai\":\"zloc\"},\"id\":\"rhhbcs\",\"name\":\"l\",\"type\":\"mmajtjaodx\"}")
                .toObject(FrontendInner.class);
        Assertions.assertEquals("hurzafblj", model.location());
        Assertions.assertEquals("btoqcjmkljavbqid", model.tags().get("qajzyulpkudjkr"));
        Assertions.assertEquals(FrontendMode.PUBLIC, model.mode());
        Assertions.assertEquals(FrontendIpAddressVersion.IPV6, model.ipAddressVersion());
        Assertions.assertEquals("qabnmoc", model.publicIpAddress().id());
    }

    @Test
    public void testSerialize() {
        FrontendInner model =
            new FrontendInner()
                .withLocation("hurzafblj")
                .withTags(mapOf("qajzyulpkudjkr", "btoqcjmkljavbqid", "e", "khbzhfepgzg", "scpai", "zloc"))
                .withMode(FrontendMode.PUBLIC)
                .withIpAddressVersion(FrontendIpAddressVersion.IPV6)
                .withPublicIpAddress(new FrontendPropertiesIpAddress().withId("qabnmoc"));
        model = BinaryData.fromObject(model).toObject(FrontendInner.class);
        Assertions.assertEquals("hurzafblj", model.location());
        Assertions.assertEquals("btoqcjmkljavbqid", model.tags().get("qajzyulpkudjkr"));
        Assertions.assertEquals(FrontendMode.PUBLIC, model.mode());
        Assertions.assertEquals(FrontendIpAddressVersion.IPV6, model.ipAddressVersion());
        Assertions.assertEquals("qabnmoc", model.publicIpAddress().id());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
