// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.models.FrontendUpdate;
import com.azure.resourcemanager.servicenetworking.models.FrontendUpdateProperties;
import com.azure.resourcemanager.servicenetworking.models.IpAccessRulesSecurityPolicy;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyConfigurations;
import com.azure.resourcemanager.servicenetworking.models.WafSecurityPolicy;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FrontendUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FrontendUpdate model = BinaryData.fromString(
            "{\"tags\":{\"ixjsprozvcputeg\":\"xinpmqnjaq\",\"atscmd\":\"vwmf\",\"zkrwfn\":\"pjhulsuuvmkj\"},\"properties\":{\"securityPolicyConfigurations\":{\"wafSecurityPolicy\":{\"id\":\"jpslwejd\"},\"ipAccessRulesSecurityPolicy\":{\"id\":\"wryoqpsoacc\"}}}}")
            .toObject(FrontendUpdate.class);
        Assertions.assertEquals("xinpmqnjaq", model.tags().get("ixjsprozvcputeg"));
        Assertions.assertEquals("jpslwejd", model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
        Assertions.assertEquals("wryoqpsoacc",
            model.properties().securityPolicyConfigurations().ipAccessRulesSecurityPolicy().id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FrontendUpdate model = new FrontendUpdate()
            .withTags(mapOf("ixjsprozvcputeg", "xinpmqnjaq", "atscmd", "vwmf", "zkrwfn", "pjhulsuuvmkj"))
            .withProperties(new FrontendUpdateProperties().withSecurityPolicyConfigurations(
                new SecurityPolicyConfigurations().withWafSecurityPolicy(new WafSecurityPolicy().withId("jpslwejd"))
                    .withIpAccessRulesSecurityPolicy(new IpAccessRulesSecurityPolicy().withId("wryoqpsoacc"))));
        model = BinaryData.fromObject(model).toObject(FrontendUpdate.class);
        Assertions.assertEquals("xinpmqnjaq", model.tags().get("ixjsprozvcputeg"));
        Assertions.assertEquals("jpslwejd", model.properties().securityPolicyConfigurations().wafSecurityPolicy().id());
        Assertions.assertEquals("wryoqpsoacc",
            model.properties().securityPolicyConfigurations().ipAccessRulesSecurityPolicy().id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
