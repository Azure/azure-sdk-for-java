// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.models.FrontendIpAddressVersion;
import com.azure.resourcemanager.servicenetworking.models.FrontendMode;
import com.azure.resourcemanager.servicenetworking.models.FrontendPropertiesIpAddress;
import com.azure.resourcemanager.servicenetworking.models.FrontendUpdate;
import com.azure.resourcemanager.servicenetworking.models.FrontendUpdateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FrontendUpdateTests {
    @Test
    public void testDeserialize() {
        FrontendUpdate model =
            BinaryData
                .fromString(
                    "{\"tags\":{\"aajrm\":\"pimexgstxgcpodg\",\"clwhijcoejctbz\":\"djwzrlov\"},\"properties\":{\"mode\":\"public\",\"ipAddressVersion\":\"IPv4\",\"publicIPAddress\":{\"id\":\"bkbfkgukdkex\"}}}")
                .toObject(FrontendUpdate.class);
        Assertions.assertEquals("pimexgstxgcpodg", model.tags().get("aajrm"));
        Assertions.assertEquals(FrontendMode.PUBLIC, model.properties().mode());
        Assertions.assertEquals(FrontendIpAddressVersion.IPV4, model.properties().ipAddressVersion());
        Assertions.assertEquals("bkbfkgukdkex", model.properties().publicIpAddress().id());
    }

    @Test
    public void testSerialize() {
        FrontendUpdate model =
            new FrontendUpdate()
                .withTags(mapOf("aajrm", "pimexgstxgcpodg", "clwhijcoejctbz", "djwzrlov"))
                .withProperties(
                    new FrontendUpdateProperties()
                        .withMode(FrontendMode.PUBLIC)
                        .withIpAddressVersion(FrontendIpAddressVersion.IPV4)
                        .withPublicIpAddress(new FrontendPropertiesIpAddress().withId("bkbfkgukdkex")));
        model = BinaryData.fromObject(model).toObject(FrontendUpdate.class);
        Assertions.assertEquals("pimexgstxgcpodg", model.tags().get("aajrm"));
        Assertions.assertEquals(FrontendMode.PUBLIC, model.properties().mode());
        Assertions.assertEquals(FrontendIpAddressVersion.IPV4, model.properties().ipAddressVersion());
        Assertions.assertEquals("bkbfkgukdkex", model.properties().publicIpAddress().id());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
