// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.FrontendInner;
import com.azure.resourcemanager.servicenetworking.models.FrontendListResult;
import com.azure.resourcemanager.servicenetworking.models.FrontendProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FrontendListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FrontendListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"fqdn\":\"nrosfqpte\",\"provisioningState\":\"Canceled\"},\"location\":\"vypyqrimzinpv\",\"tags\":{\"nohjt\":\"dkirsoodqxhcr\",\"soifiyipjxsqw\":\"kwh\",\"bznorcjxvsnby\":\"gr\"},\"id\":\"qabnmoc\",\"name\":\"cyshurzafbljjgp\",\"type\":\"toqcjmklja\"},{\"properties\":{\"fqdn\":\"idtqajzyu\",\"provisioningState\":\"Deleting\"},\"location\":\"dj\",\"tags\":{\"e\":\"khbzhfepgzg\",\"scpai\":\"zloc\"},\"id\":\"rhhbcs\",\"name\":\"l\",\"type\":\"mmajtjaodx\"},{\"properties\":{\"fqdn\":\"bdxkqpxokaj\",\"provisioningState\":\"Canceled\"},\"location\":\"imexgstxgcpodgma\",\"tags\":{\"whijcoejctbza\":\"mvdjwzrlovmc\"},\"id\":\"s\",\"name\":\"sycbkbfk\",\"type\":\"ukdkexxppofmxa\"}],\"nextLink\":\"fjpgddtocjjxhvp\"}")
            .toObject(FrontendListResult.class);
        Assertions.assertEquals("vypyqrimzinpv", model.value().get(0).location());
        Assertions.assertEquals("dkirsoodqxhcr", model.value().get(0).tags().get("nohjt"));
        Assertions.assertEquals("fjpgddtocjjxhvp", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FrontendListResult model
            = new FrontendListResult()
                .withValue(
                    Arrays
                        .asList(
                            new FrontendInner().withLocation("vypyqrimzinpv")
                                .withTags(
                                    mapOf("nohjt", "dkirsoodqxhcr", "soifiyipjxsqw", "kwh", "bznorcjxvsnby", "gr"))
                                .withProperties(new FrontendProperties()),
                            new FrontendInner().withLocation("dj")
                                .withTags(mapOf("e", "khbzhfepgzg", "scpai", "zloc"))
                                .withProperties(new FrontendProperties()),
                            new FrontendInner().withLocation("imexgstxgcpodgma")
                                .withTags(mapOf("whijcoejctbza", "mvdjwzrlovmc"))
                                .withProperties(new FrontendProperties())))
                .withNextLink("fjpgddtocjjxhvp");
        model = BinaryData.fromObject(model).toObject(FrontendListResult.class);
        Assertions.assertEquals("vypyqrimzinpv", model.value().get(0).location());
        Assertions.assertEquals("dkirsoodqxhcr", model.value().get(0).tags().get("nohjt"));
        Assertions.assertEquals("fjpgddtocjjxhvp", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
