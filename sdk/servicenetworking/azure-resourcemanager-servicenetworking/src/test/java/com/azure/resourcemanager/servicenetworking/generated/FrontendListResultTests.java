// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.FrontendInner;
import com.azure.resourcemanager.servicenetworking.models.FrontendIpAddressVersion;
import com.azure.resourcemanager.servicenetworking.models.FrontendListResult;
import com.azure.resourcemanager.servicenetworking.models.FrontendMode;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class FrontendListResultTests {
    @Test
    public void testDeserialize() {
        FrontendListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"mode\":\"public\",\"ipAddressVersion\":\"IPv4\",\"provisioningState\":\"Failed\"},\"location\":\"kyfi\",\"tags\":{\"zwdzuh\":\"idf\",\"wxmnteiwao\":\"ymwisdkft\"},\"id\":\"vkmijcmmxdcuf\",\"name\":\"fsrpymzidnse\",\"type\":\"cxtbzsg\"},{\"properties\":{\"mode\":\"public\",\"ipAddressVersion\":\"IPv6\",\"provisioningState\":\"Failed\"},\"location\":\"wzjeiach\",\"tags\":{\"eeh\":\"sflnrosfqp\",\"swjdkirso\":\"zvypyqrimzinp\"},\"id\":\"dqxhcrmnohjtckwh\",\"name\":\"soifiyipjxsqw\",\"type\":\"gr\"}],\"nextLink\":\"znorcj\"}")
                .toObject(FrontendListResult.class);
        Assertions.assertEquals("kyfi", model.value().get(0).location());
        Assertions.assertEquals("idf", model.value().get(0).tags().get("zwdzuh"));
        Assertions.assertEquals(FrontendMode.PUBLIC, model.value().get(0).mode());
        Assertions.assertEquals(FrontendIpAddressVersion.IPV4, model.value().get(0).ipAddressVersion());
        Assertions.assertEquals("znorcj", model.nextLink());
    }

    @Test
    public void testSerialize() {
        FrontendListResult model =
            new FrontendListResult()
                .withValue(
                    Arrays
                        .asList(
                            new FrontendInner()
                                .withLocation("kyfi")
                                .withTags(mapOf("zwdzuh", "idf", "wxmnteiwao", "ymwisdkft"))
                                .withMode(FrontendMode.PUBLIC)
                                .withIpAddressVersion(FrontendIpAddressVersion.IPV4),
                            new FrontendInner()
                                .withLocation("wzjeiach")
                                .withTags(mapOf("eeh", "sflnrosfqp", "swjdkirso", "zvypyqrimzinp"))
                                .withMode(FrontendMode.PUBLIC)
                                .withIpAddressVersion(FrontendIpAddressVersion.IPV6)))
                .withNextLink("znorcj");
        model = BinaryData.fromObject(model).toObject(FrontendListResult.class);
        Assertions.assertEquals("kyfi", model.value().get(0).location());
        Assertions.assertEquals("idf", model.value().get(0).tags().get("zwdzuh"));
        Assertions.assertEquals(FrontendMode.PUBLIC, model.value().get(0).mode());
        Assertions.assertEquals(FrontendIpAddressVersion.IPV4, model.value().get(0).ipAddressVersion());
        Assertions.assertEquals("znorcj", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
