// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.AssociationInner;
import com.azure.resourcemanager.servicenetworking.models.AssociationListResult;
import com.azure.resourcemanager.servicenetworking.models.AssociationProperties;
import com.azure.resourcemanager.servicenetworking.models.AssociationSubnet;
import com.azure.resourcemanager.servicenetworking.models.AssociationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssociationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssociationListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"associationType\":\"subnets\",\"subnet\":{\"id\":\"fgibmadgakeq\"},\"provisioningState\":\"Provisioning\"},\"location\":\"bzqqedqytbciq\",\"tags\":{\"smodmgloug\":\"flmmnk\",\"wtmutduq\":\"b\"},\"id\":\"ta\",\"name\":\"spwgcuertumkdosv\",\"type\":\"whbmd\"},{\"properties\":{\"associationType\":\"subnets\",\"subnet\":{\"id\":\"f\"},\"provisioningState\":\"Failed\"},\"location\":\"bmbexppbhtqqro\",\"tags\":{\"igjyjg\":\"fpsalgbqu\"},\"id\":\"jaoyfhrtx\",\"name\":\"lnerkujysvleju\",\"type\":\"fqawrlyxw\"}],\"nextLink\":\"cpr\"}")
            .toObject(AssociationListResult.class);
        Assertions.assertEquals("bzqqedqytbciq", model.value().get(0).location());
        Assertions.assertEquals("flmmnk", model.value().get(0).tags().get("smodmgloug"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.value().get(0).properties().associationType());
        Assertions.assertEquals("fgibmadgakeq", model.value().get(0).properties().subnet().id());
        Assertions.assertEquals("cpr", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssociationListResult model = new AssociationListResult().withValue(Arrays.asList(
            new AssociationInner().withLocation("bzqqedqytbciq")
                .withTags(mapOf("smodmgloug", "flmmnk", "wtmutduq", "b"))
                .withProperties(new AssociationProperties().withAssociationType(AssociationType.SUBNETS)
                    .withSubnet(new AssociationSubnet().withId("fgibmadgakeq"))),
            new AssociationInner().withLocation("bmbexppbhtqqro")
                .withTags(mapOf("igjyjg", "fpsalgbqu"))
                .withProperties(new AssociationProperties().withAssociationType(AssociationType.SUBNETS)
                    .withSubnet(new AssociationSubnet().withId("f")))))
            .withNextLink("cpr");
        model = BinaryData.fromObject(model).toObject(AssociationListResult.class);
        Assertions.assertEquals("bzqqedqytbciq", model.value().get(0).location());
        Assertions.assertEquals("flmmnk", model.value().get(0).tags().get("smodmgloug"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.value().get(0).properties().associationType());
        Assertions.assertEquals("fgibmadgakeq", model.value().get(0).properties().subnet().id());
        Assertions.assertEquals("cpr", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
