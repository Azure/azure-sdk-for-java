// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.AssociationInner;
import com.azure.resourcemanager.servicenetworking.models.AssociationListResult;
import com.azure.resourcemanager.servicenetworking.models.AssociationProperties;
import com.azure.resourcemanager.servicenetworking.models.AssociationSubnet;
import com.azure.resourcemanager.servicenetworking.models.AssociationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssociationListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssociationListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"associationType\":\"subnets\",\"subnet\":{\"id\":\"aozwyiftyhxhu\"},\"provisioningState\":\"Provisioning\"},\"location\":\"tyxolniwpwc\",\"tags\":{\"ryplwckbasyypn\":\"fkgiawxk\",\"phejkotynqgoulz\":\"dhsgcba\",\"gakeqsr\":\"dlikwyqkgfgibma\"},\"id\":\"yb\",\"name\":\"qqedqytbciqfou\",\"type\":\"lmmnkzsmodmglo\"}],\"nextLink\":\"pbkwtmu\"}")
            .toObject(AssociationListResult.class);
        Assertions.assertEquals("tyxolniwpwc", model.value().get(0).location());
        Assertions.assertEquals("fkgiawxk", model.value().get(0).tags().get("ryplwckbasyypn"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.value().get(0).properties().associationType());
        Assertions.assertEquals("aozwyiftyhxhu", model.value().get(0).properties().subnet().id());
        Assertions.assertEquals("pbkwtmu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssociationListResult model
            = new AssociationListResult().withValue(Arrays.asList(new AssociationInner().withLocation("tyxolniwpwc")
                .withTags(
                    mapOf("ryplwckbasyypn", "fkgiawxk", "phejkotynqgoulz", "dhsgcba", "gakeqsr", "dlikwyqkgfgibma"))
                .withProperties(new AssociationProperties().withAssociationType(AssociationType.SUBNETS)
                    .withSubnet(new AssociationSubnet().withId("aozwyiftyhxhu")))))
                .withNextLink("pbkwtmu");
        model = BinaryData.fromObject(model).toObject(AssociationListResult.class);
        Assertions.assertEquals("tyxolniwpwc", model.value().get(0).location());
        Assertions.assertEquals("fkgiawxk", model.value().get(0).tags().get("ryplwckbasyypn"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.value().get(0).properties().associationType());
        Assertions.assertEquals("aozwyiftyhxhu", model.value().get(0).properties().subnet().id());
        Assertions.assertEquals("pbkwtmu", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
