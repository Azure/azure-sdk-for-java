// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.servicenetworking.fluent.models.AssociationInner;
import com.azure.resourcemanager.servicenetworking.models.AssociationListResult;
import com.azure.resourcemanager.servicenetworking.models.AssociationType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AssociationListResultTests {
    @Test
    public void testDeserialize() {
        AssociationListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"associationType\":\"subnets\",\"provisioningState\":\"Failed\"},\"location\":\"ljdousk\",\"tags\":{\"njbiksqrglssain\":\"kocrcjdkwtnhx\",\"wnzlljfmppeeb\":\"p\",\"yqduujit\":\"mgxsab\"},\"id\":\"jczdzevndh\",\"name\":\"rwpdappdsbdkvwrw\",\"type\":\"feusnhut\"},{\"properties\":{\"associationType\":\"subnets\",\"provisioningState\":\"Deleting\"},\"location\":\"dhugjzzdatqxhocd\",\"tags\":{\"vkaozwyiftyhxhur\":\"blgphuticn\",\"tyxolniwpwc\":\"k\",\"awxklr\":\"kjfkg\",\"ypnddhsgcb\":\"plwckbas\"},\"id\":\"cph\",\"name\":\"jkot\",\"type\":\"nqgoulzndli\"}],\"nextLink\":\"yqkgfg\"}")
                .toObject(AssociationListResult.class);
        Assertions.assertEquals("ljdousk", model.value().get(0).location());
        Assertions.assertEquals("kocrcjdkwtnhx", model.value().get(0).tags().get("njbiksqrglssain"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.value().get(0).associationType());
        Assertions.assertEquals("yqkgfg", model.nextLink());
    }

    @Test
    public void testSerialize() {
        AssociationListResult model =
            new AssociationListResult()
                .withValue(
                    Arrays
                        .asList(
                            new AssociationInner()
                                .withLocation("ljdousk")
                                .withTags(
                                    mapOf(
                                        "njbiksqrglssain", "kocrcjdkwtnhx", "wnzlljfmppeeb", "p", "yqduujit", "mgxsab"))
                                .withAssociationType(AssociationType.SUBNETS),
                            new AssociationInner()
                                .withLocation("dhugjzzdatqxhocd")
                                .withTags(
                                    mapOf(
                                        "vkaozwyiftyhxhur",
                                        "blgphuticn",
                                        "tyxolniwpwc",
                                        "k",
                                        "awxklr",
                                        "kjfkg",
                                        "ypnddhsgcb",
                                        "plwckbas"))
                                .withAssociationType(AssociationType.SUBNETS)))
                .withNextLink("yqkgfg");
        model = BinaryData.fromObject(model).toObject(AssociationListResult.class);
        Assertions.assertEquals("ljdousk", model.value().get(0).location());
        Assertions.assertEquals("kocrcjdkwtnhx", model.value().get(0).tags().get("njbiksqrglssain"));
        Assertions.assertEquals(AssociationType.SUBNETS, model.value().get(0).associationType());
        Assertions.assertEquals("yqkgfg", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
