// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicenetworking.fluent.models.TrafficControllerInner;
import com.azure.resourcemanager.servicenetworking.models.TrafficControllerUpdate;

/** An instance of this class provides access to all the operations defined in TrafficControllerInterfacesClient. */
public interface TrafficControllerInterfacesClient {
    /**
     * List TrafficController resources by subscription ID.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a TrafficController list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TrafficControllerInner> list();

    /**
     * List TrafficController resources by subscription ID.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a TrafficController list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TrafficControllerInner> list(Context context);

    /**
     * List TrafficController resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a TrafficController list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TrafficControllerInner> listByResourceGroup(String resourceGroupName);

    /**
     * List TrafficController resources by resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a TrafficController list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<TrafficControllerInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a TrafficController along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TrafficControllerInner> getByResourceGroupWithResponse(
        String resourceGroupName, String trafficControllerName, Context context);

    /**
     * Get a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a TrafficController.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrafficControllerInner getByResourceGroup(String resourceGroupName, String trafficControllerName);

    /**
     * Create a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete tracked resource types can be created by aliasing this
     *     type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TrafficControllerInner>, TrafficControllerInner> beginCreateOrUpdate(
        String resourceGroupName, String trafficControllerName, TrafficControllerInner resource);

    /**
     * Create a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete tracked resource types can be created by aliasing this
     *     type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<TrafficControllerInner>, TrafficControllerInner> beginCreateOrUpdate(
        String resourceGroupName, String trafficControllerName, TrafficControllerInner resource, Context context);

    /**
     * Create a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrafficControllerInner createOrUpdate(
        String resourceGroupName, String trafficControllerName, TrafficControllerInner resource);

    /**
     * Create a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrafficControllerInner createOrUpdate(
        String resourceGroupName, String trafficControllerName, TrafficControllerInner resource, Context context);

    /**
     * Update a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type along
     *     with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<TrafficControllerInner> updateWithResponse(
        String resourceGroupName, String trafficControllerName, TrafficControllerUpdate properties, Context context);

    /**
     * Update a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete tracked resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    TrafficControllerInner update(
        String resourceGroupName, String trafficControllerName, TrafficControllerUpdate properties);

    /**
     * Delete a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String trafficControllerName);

    /**
     * Delete a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String trafficControllerName, Context context);

    /**
     * Delete a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String trafficControllerName);

    /**
     * Delete a TrafficController.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String trafficControllerName, Context context);
}
