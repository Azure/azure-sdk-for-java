// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of SecurityPoliciesInterfaces.
 */
public interface SecurityPoliciesInterfaces {
    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SecurityPolicy> listByTrafficController(String resourceGroupName, String trafficControllerName);

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SecurityPolicy> listByTrafficController(String resourceGroupName, String trafficControllerName,
        Context context);

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy along with {@link Response}.
     */
    Response<SecurityPolicy> getWithResponse(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, Context context);

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy.
     */
    SecurityPolicy get(String resourceGroupName, String trafficControllerName, String securityPolicyName);

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String trafficControllerName, String securityPolicyName);

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String trafficControllerName, String securityPolicyName, Context context);

    /**
     * Get a SecurityPolicy.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy along with {@link Response}.
     */
    SecurityPolicy getById(String id);

    /**
     * Get a SecurityPolicy.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy along with {@link Response}.
     */
    Response<SecurityPolicy> getByIdWithResponse(String id, Context context);

    /**
     * Delete a SecurityPolicy.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a SecurityPolicy.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SecurityPolicy resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SecurityPolicy definition.
     */
    SecurityPolicy.DefinitionStages.Blank define(String name);
}
