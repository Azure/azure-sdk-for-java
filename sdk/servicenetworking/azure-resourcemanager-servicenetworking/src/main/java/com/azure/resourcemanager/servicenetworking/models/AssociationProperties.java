// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Association Properties.
 */
@Fluent
public final class AssociationProperties implements JsonSerializable<AssociationProperties> {
    /*
     * Association Type
     */
    private AssociationType associationType;

    /*
     * Association Subnet
     */
    private AssociationSubnet subnet;

    /*
     * Provisioning State of Traffic Controller Association Resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AssociationProperties class.
     */
    public AssociationProperties() {
    }

    /**
     * Get the associationType property: Association Type.
     * 
     * @return the associationType value.
     */
    public AssociationType associationType() {
        return this.associationType;
    }

    /**
     * Set the associationType property: Association Type.
     * 
     * @param associationType the associationType value to set.
     * @return the AssociationProperties object itself.
     */
    public AssociationProperties withAssociationType(AssociationType associationType) {
        this.associationType = associationType;
        return this;
    }

    /**
     * Get the subnet property: Association Subnet.
     * 
     * @return the subnet value.
     */
    public AssociationSubnet subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Association Subnet.
     * 
     * @param subnet the subnet value to set.
     * @return the AssociationProperties object itself.
     */
    public AssociationProperties withSubnet(AssociationSubnet subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning State of Traffic Controller Association Resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (associationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property associationType in model AssociationProperties"));
        }
        if (subnet() != null) {
            subnet().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AssociationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("associationType",
            this.associationType == null ? null : this.associationType.toString());
        jsonWriter.writeJsonField("subnet", this.subnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssociationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssociationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssociationProperties.
     */
    public static AssociationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssociationProperties deserializedAssociationProperties = new AssociationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("associationType".equals(fieldName)) {
                    deserializedAssociationProperties.associationType = AssociationType.fromString(reader.getString());
                } else if ("subnet".equals(fieldName)) {
                    deserializedAssociationProperties.subnet = AssociationSubnet.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAssociationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssociationProperties;
        });
    }
}
