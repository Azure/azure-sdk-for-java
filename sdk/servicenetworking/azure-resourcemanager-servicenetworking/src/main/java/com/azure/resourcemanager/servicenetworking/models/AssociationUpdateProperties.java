// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the Association.
 */
@Fluent
public final class AssociationUpdateProperties implements JsonSerializable<AssociationUpdateProperties> {
    /*
     * Association Type
     */
    private AssociationType associationType;

    /*
     * Association Subnet
     */
    private AssociationSubnetUpdate subnet;

    /**
     * Creates an instance of AssociationUpdateProperties class.
     */
    public AssociationUpdateProperties() {
    }

    /**
     * Get the associationType property: Association Type.
     * 
     * @return the associationType value.
     */
    public AssociationType associationType() {
        return this.associationType;
    }

    /**
     * Set the associationType property: Association Type.
     * 
     * @param associationType the associationType value to set.
     * @return the AssociationUpdateProperties object itself.
     */
    public AssociationUpdateProperties withAssociationType(AssociationType associationType) {
        this.associationType = associationType;
        return this;
    }

    /**
     * Get the subnet property: Association Subnet.
     * 
     * @return the subnet value.
     */
    public AssociationSubnetUpdate subnet() {
        return this.subnet;
    }

    /**
     * Set the subnet property: Association Subnet.
     * 
     * @param subnet the subnet value to set.
     * @return the AssociationUpdateProperties object itself.
     */
    public AssociationUpdateProperties withSubnet(AssociationSubnetUpdate subnet) {
        this.subnet = subnet;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnet() != null) {
            subnet().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("associationType",
            this.associationType == null ? null : this.associationType.toString());
        jsonWriter.writeJsonField("subnet", this.subnet);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssociationUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssociationUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssociationUpdateProperties.
     */
    public static AssociationUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssociationUpdateProperties deserializedAssociationUpdateProperties = new AssociationUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("associationType".equals(fieldName)) {
                    deserializedAssociationUpdateProperties.associationType
                        = AssociationType.fromString(reader.getString());
                } else if ("subnet".equals(fieldName)) {
                    deserializedAssociationUpdateProperties.subnet = AssociationSubnetUpdate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssociationUpdateProperties;
        });
    }
}
