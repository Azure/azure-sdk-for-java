// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicenetworking.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.servicenetworking.fluent.SecurityPoliciesInterfacesClient;
import com.azure.resourcemanager.servicenetworking.fluent.models.SecurityPolicyInner;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyListResult;
import com.azure.resourcemanager.servicenetworking.models.SecurityPolicyUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SecurityPoliciesInterfacesClient.
 */
public final class SecurityPoliciesInterfacesClientImpl implements SecurityPoliciesInterfacesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SecurityPoliciesInterfacesService service;

    /**
     * The service client containing this operation class.
     */
    private final TrafficControllerManagementClientImpl client;

    /**
     * Initializes an instance of SecurityPoliciesInterfacesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SecurityPoliciesInterfacesClientImpl(TrafficControllerManagementClientImpl client) {
        this.service = RestProxy.create(SecurityPoliciesInterfacesService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for TrafficControllerManagementClientSecurityPoliciesInterfaces to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "TrafficControllerMan")
    public interface SecurityPoliciesInterfacesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicies")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SecurityPolicyListResult>> listByTrafficController(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("trafficControllerName") String trafficControllerName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicies/{securityPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SecurityPolicyInner>> get(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("trafficControllerName") String trafficControllerName,
            @PathParam("securityPolicyName") String securityPolicyName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicies/{securityPolicyName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("trafficControllerName") String trafficControllerName,
            @PathParam("securityPolicyName") String securityPolicyName,
            @BodyParam("application/json") SecurityPolicyInner resource, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicies/{securityPolicyName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SecurityPolicyInner>> update(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("trafficControllerName") String trafficControllerName,
            @PathParam("securityPolicyName") String securityPolicyName,
            @BodyParam("application/json") SecurityPolicyUpdate properties, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceNetworking/trafficControllers/{trafficControllerName}/securityPolicies/{securityPolicyName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("trafficControllerName") String trafficControllerName,
            @PathParam("securityPolicyName") String securityPolicyName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SecurityPolicyListResult>> listByTrafficControllerNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecurityPolicyInner>> listByTrafficControllerSinglePageAsync(String resourceGroupName,
        String trafficControllerName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByTrafficController(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, accept, context))
            .<PagedResponse<SecurityPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecurityPolicyInner>> listByTrafficControllerSinglePageAsync(String resourceGroupName,
        String trafficControllerName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByTrafficController(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SecurityPolicyInner> listByTrafficControllerAsync(String resourceGroupName,
        String trafficControllerName) {
        return new PagedFlux<>(() -> listByTrafficControllerSinglePageAsync(resourceGroupName, trafficControllerName),
            nextLink -> listByTrafficControllerNextSinglePageAsync(nextLink));
    }

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SecurityPolicyInner> listByTrafficControllerAsync(String resourceGroupName,
        String trafficControllerName, Context context) {
        return new PagedFlux<>(
            () -> listByTrafficControllerSinglePageAsync(resourceGroupName, trafficControllerName, context),
            nextLink -> listByTrafficControllerNextSinglePageAsync(nextLink, context));
    }

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecurityPolicyInner> listByTrafficController(String resourceGroupName,
        String trafficControllerName) {
        return new PagedIterable<>(listByTrafficControllerAsync(resourceGroupName, trafficControllerName));
    }

    /**
     * List SecurityPolicy resources by TrafficController.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecurityPolicyInner> listByTrafficController(String resourceGroupName,
        String trafficControllerName, Context context) {
        return new PagedIterable<>(listByTrafficControllerAsync(resourceGroupName, trafficControllerName, context));
    }

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecurityPolicyInner>> getWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, securityPolicyName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecurityPolicyInner>> getWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, trafficControllerName, securityPolicyName, accept, context);
    }

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecurityPolicyInner> getAsync(String resourceGroupName, String trafficControllerName,
        String securityPolicyName) {
        return getWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SecurityPolicyInner> getWithResponse(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, Context context) {
        return getWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName, context).block();
    }

    /**
     * Get a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SecurityPolicy.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecurityPolicyInner get(String resourceGroupName, String trafficControllerName, String securityPolicyName) {
        return getWithResponse(resourceGroupName, trafficControllerName, securityPolicyName, Context.NONE).getValue();
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName, SecurityPolicyInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, securityPolicyName, resource,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName, SecurityPolicyInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, securityPolicyName, resource,
            accept, context);
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SecurityPolicyInner>, SecurityPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String trafficControllerName, String securityPolicyName,
        SecurityPolicyInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource);
        return this.client.<SecurityPolicyInner, SecurityPolicyInner>getLroResult(mono, this.client.getHttpPipeline(),
            SecurityPolicyInner.class, SecurityPolicyInner.class, this.client.getContext());
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SecurityPolicyInner>, SecurityPolicyInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String trafficControllerName, String securityPolicyName, SecurityPolicyInner resource,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName,
            trafficControllerName, securityPolicyName, resource, context);
        return this.client.<SecurityPolicyInner, SecurityPolicyInner>getLroResult(mono, this.client.getHttpPipeline(),
            SecurityPolicyInner.class, SecurityPolicyInner.class, context);
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SecurityPolicyInner>, SecurityPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String trafficControllerName, String securityPolicyName,
        SecurityPolicyInner resource) {
        return this.beginCreateOrUpdateAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource)
            .getSyncPoller();
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SecurityPolicyInner>, SecurityPolicyInner> beginCreateOrUpdate(
        String resourceGroupName, String trafficControllerName, String securityPolicyName, SecurityPolicyInner resource,
        Context context) {
        return this
            .beginCreateOrUpdateAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource, context)
            .getSyncPoller();
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecurityPolicyInner> createOrUpdateAsync(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, SecurityPolicyInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecurityPolicyInner> createOrUpdateAsync(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, SecurityPolicyInner resource, Context context) {
        return beginCreateOrUpdateAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecurityPolicyInner createOrUpdate(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, SecurityPolicyInner resource) {
        return createOrUpdateAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource).block();
    }

    /**
     * Create a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecurityPolicyInner createOrUpdate(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, SecurityPolicyInner resource, Context context) {
        return createOrUpdateAsync(resourceGroupName, trafficControllerName, securityPolicyName, resource, context)
            .block();
    }

    /**
     * Update a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecurityPolicyInner>> updateWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName, SecurityPolicyUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, securityPolicyName,
                properties, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecurityPolicyInner>> updateWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName, SecurityPolicyUpdate properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, trafficControllerName, securityPolicyName, properties, accept, context);
    }

    /**
     * Update a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecurityPolicyInner> updateAsync(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, SecurityPolicyUpdate properties) {
        return updateWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName, properties)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Update a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SecurityPolicyInner> updateWithResponse(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, SecurityPolicyUpdate properties, Context context) {
        return updateWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName, properties,
            context).block();
    }

    /**
     * Update a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return securityPolicy Subresource of Traffic Controller.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecurityPolicyInner update(String resourceGroupName, String trafficControllerName, String securityPolicyName,
        SecurityPolicyUpdate properties) {
        return updateWithResponse(resourceGroupName, trafficControllerName, securityPolicyName, properties,
            Context.NONE).getValue();
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, trafficControllerName, securityPolicyName, accept,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String trafficControllerName, String securityPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (trafficControllerName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter trafficControllerName is required and cannot be null."));
        }
        if (securityPolicyName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter securityPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, trafficControllerName, securityPolicyName, accept, context);
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String trafficControllerName,
        String securityPolicyName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, trafficControllerName, securityPolicyName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String trafficControllerName,
        String securityPolicyName) {
        return this.beginDeleteAsync(resourceGroupName, trafficControllerName, securityPolicyName).getSyncPoller();
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String trafficControllerName,
        String securityPolicyName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, trafficControllerName, securityPolicyName, context)
            .getSyncPoller();
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String trafficControllerName, String securityPolicyName) {
        return beginDeleteAsync(resourceGroupName, trafficControllerName, securityPolicyName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String trafficControllerName, String securityPolicyName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, trafficControllerName, securityPolicyName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String trafficControllerName, String securityPolicyName) {
        deleteAsync(resourceGroupName, trafficControllerName, securityPolicyName).block();
    }

    /**
     * Delete a SecurityPolicy.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param trafficControllerName traffic controller name for path.
     * @param securityPolicyName SecurityPolicy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String trafficControllerName, String securityPolicyName,
        Context context) {
        deleteAsync(resourceGroupName, trafficControllerName, securityPolicyName, context).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecurityPolicyInner>> listByTrafficControllerNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByTrafficControllerNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SecurityPolicyInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a SecurityPolicy list operation along with {@link PagedResponse} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecurityPolicyInner>> listByTrafficControllerNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByTrafficControllerNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
