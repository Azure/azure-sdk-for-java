// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managedapplications.ApplicationManager;
import com.azure.resourcemanager.managedapplications.fluent.models.ApplicationDefinitionInner;
import com.azure.resourcemanager.managedapplications.models.ApplicationDefinition;
import com.azure.resourcemanager.managedapplications.models.ApplicationLockLevel;
import com.azure.resourcemanager.managedapplications.models.Identity;
import com.azure.resourcemanager.managedapplications.models.ResourceIdentityType;
import com.azure.resourcemanager.managedapplications.models.Sku;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApplicationDefinitionsCreateOrUpdateByIdMockTests {
    @Test
    public void testCreateOrUpdateById() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"lockLevel\":\"ReadOnly\",\"displayName\":\"ultskzbbtdz\",\"isEnabled\":\"veekgpwozuhkfp\",\"authorizations\":[],\"artifacts\":[],\"description\":\"f\",\"packageFileUri\":\"luu\",\"mainTemplate\":\"datattouwaboekqvkel\",\"createUiDefinition\":\"datamvb\"},\"managedBy\":\"yjsflhhcaalnji\",\"sku\":{\"name\":\"sxyawjoyaqcs\",\"tier\":\"jpkiidzyexznelix\",\"size\":\"rzt\",\"family\":\"lhbnxkna\",\"model\":\"ulppggdtpnapnyir\",\"capacity\":1792821814},\"identity\":{\"principalId\":\"igvpgylg\",\"tenantId\":\"itxmedjvcslynqww\",\"type\":\"SystemAssigned\"},\"location\":\"zzhxgktrm\",\"tags\":{\"tfdygpfqb\":\"napkteoellw\",\"op\":\"ac\",\"eqx\":\"fqrhhuaopppc\"},\"id\":\"lzdahzxctobgbkdm\",\"name\":\"izpost\",\"type\":\"grcfb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationManager manager =
            ApplicationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ApplicationDefinition response =
            manager
                .applicationDefinitions()
                .createOrUpdateById(
                    "klwndnhjdauwhv",
                    "l",
                    new ApplicationDefinitionInner()
                        .withLocation("qsgzvahapj")
                        .withTags(mapOf("lxkvu", "pvgqzcjrvxdjzlm", "n", "fhzovawjvzunluth"))
                        .withManagedBy("loayqcgw")
                        .withSku(
                            new Sku()
                                .withName("zjuzgwyz")
                                .withTier("txon")
                                .withSize("ts")
                                .withFamily("jcbpwxqpsrknft")
                                .withModel("vriuhprwmdyvx")
                                .withCapacity(1817218794))
                        .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                        .withLockLevel(ApplicationLockLevel.NONE)
                        .withDisplayName("tdhxujznbmpowuwp")
                        .withIsEnabled("qlveualupjmkh")
                        .withAuthorizations(Arrays.asList())
                        .withArtifacts(Arrays.asList())
                        .withDescription("cswsrtjri")
                        .withPackageFileUri("rbpbewtghfgblcg")
                        .withMainTemplate("datazvlvqhjkbegib")
                        .withCreateUiDefinition("datamxiebw"),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zzhxgktrm", response.location());
        Assertions.assertEquals("napkteoellw", response.tags().get("tfdygpfqb"));
        Assertions.assertEquals("yjsflhhcaalnji", response.managedBy());
        Assertions.assertEquals("sxyawjoyaqcs", response.sku().name());
        Assertions.assertEquals("jpkiidzyexznelix", response.sku().tier());
        Assertions.assertEquals("rzt", response.sku().size());
        Assertions.assertEquals("lhbnxkna", response.sku().family());
        Assertions.assertEquals("ulppggdtpnapnyir", response.sku().model());
        Assertions.assertEquals(1792821814, response.sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(ApplicationLockLevel.READ_ONLY, response.lockLevel());
        Assertions.assertEquals("ultskzbbtdz", response.displayName());
        Assertions.assertEquals("veekgpwozuhkfp", response.isEnabled());
        Assertions.assertEquals("f", response.description());
        Assertions.assertEquals("luu", response.packageFileUri());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
