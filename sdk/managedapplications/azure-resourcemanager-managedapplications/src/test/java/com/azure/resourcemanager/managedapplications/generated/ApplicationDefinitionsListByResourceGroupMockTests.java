// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managedapplications.ApplicationManager;
import com.azure.resourcemanager.managedapplications.models.ApplicationDefinition;
import com.azure.resourcemanager.managedapplications.models.ApplicationLockLevel;
import com.azure.resourcemanager.managedapplications.models.ResourceIdentityType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApplicationDefinitionsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"lockLevel\":\"ReadOnly\",\"displayName\":\"vgyuguos\",\"isEnabled\":\"kfssxqukkf\",\"authorizations\":[],\"artifacts\":[],\"description\":\"sxnkjzkdeslpvlo\",\"packageFileUri\":\"i\",\"mainTemplate\":\"dataghxpkdw\",\"createUiDefinition\":\"dataaiuebbaumnyqu\"},\"managedBy\":\"deoj\",\"sku\":{\"name\":\"bckhsmtxpsi\",\"tier\":\"tfhvpesapskrdqmh\",\"size\":\"dhtldwkyz\",\"family\":\"utknc\",\"model\":\"cwsvlxotog\",\"capacity\":918188408},\"identity\":{\"principalId\":\"qsx\",\"tenantId\":\"micykvceoveilo\",\"type\":\"SystemAssigned\"},\"location\":\"tyfjfcnjbkcnxdhb\",\"tags\":{\"oqnermclfpl\":\"phywpnvj\",\"rpabg\":\"hoxus\",\"xywpmueefjzwfqkq\":\"epsbjtazqu\"},\"id\":\"jidsuyonobglaoc\",\"name\":\"xtccmg\",\"type\":\"udxytlmoyrx\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationManager manager =
            ApplicationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<ApplicationDefinition> response =
            manager.applicationDefinitions().listByResourceGroup("ovplw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tyfjfcnjbkcnxdhb", response.iterator().next().location());
        Assertions.assertEquals("phywpnvj", response.iterator().next().tags().get("oqnermclfpl"));
        Assertions.assertEquals("deoj", response.iterator().next().managedBy());
        Assertions.assertEquals("bckhsmtxpsi", response.iterator().next().sku().name());
        Assertions.assertEquals("tfhvpesapskrdqmh", response.iterator().next().sku().tier());
        Assertions.assertEquals("dhtldwkyz", response.iterator().next().sku().size());
        Assertions.assertEquals("utknc", response.iterator().next().sku().family());
        Assertions.assertEquals("cwsvlxotog", response.iterator().next().sku().model());
        Assertions.assertEquals(918188408, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(ApplicationLockLevel.READ_ONLY, response.iterator().next().lockLevel());
        Assertions.assertEquals("vgyuguos", response.iterator().next().displayName());
        Assertions.assertEquals("kfssxqukkf", response.iterator().next().isEnabled());
        Assertions.assertEquals("sxnkjzkdeslpvlo", response.iterator().next().description());
        Assertions.assertEquals("i", response.iterator().next().packageFileUri());
    }
}
