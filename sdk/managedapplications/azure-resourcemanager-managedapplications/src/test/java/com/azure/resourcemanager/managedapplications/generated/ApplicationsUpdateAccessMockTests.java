// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.managedapplications.ApplicationManager;
import com.azure.resourcemanager.managedapplications.fluent.models.UpdateAccessDefinitionInner;
import com.azure.resourcemanager.managedapplications.models.JitRequestMetadata;
import com.azure.resourcemanager.managedapplications.models.Status;
import com.azure.resourcemanager.managedapplications.models.Substatus;
import com.azure.resourcemanager.managedapplications.models.UpdateAccessDefinition;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ApplicationsUpdateAccessMockTests {
    @Test
    public void testUpdateAccess() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"approver\":\"p\",\"metadata\":{\"originRequestId\":\"jyofdxluusdtto\",\"requestorId\":\"aboekqv\",\"tenantDisplayName\":\"lns\",\"subjectDisplayName\":\"bxwyjsflhhcaa\"},\"status\":\"Remove\",\"subStatus\":\"Failed\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ApplicationManager manager =
            ApplicationManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        UpdateAccessDefinition response =
            manager
                .applications()
                .updateAccess(
                    "vgqzcjrvxd",
                    "zlmwlxkvugfhz",
                    new UpdateAccessDefinitionInner()
                        .withApprover("awjvzunluthnnp")
                        .withMetadata(
                            new JitRequestMetadata()
                                .withOriginRequestId("xipeilpjzuaejx")
                                .withRequestorId("ltskzbbtd")
                                .withTenantDisplayName("mv")
                                .withSubjectDisplayName("kgpwoz"))
                        .withStatus(Status.NOT_SPECIFIED)
                        .withSubStatus(Substatus.FAILED),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("p", response.approver());
        Assertions.assertEquals("jyofdxluusdtto", response.metadata().originRequestId());
        Assertions.assertEquals("aboekqv", response.metadata().requestorId());
        Assertions.assertEquals("lns", response.metadata().tenantDisplayName());
        Assertions.assertEquals("bxwyjsflhhcaa", response.metadata().subjectDisplayName());
        Assertions.assertEquals(Status.REMOVE, response.status());
        Assertions.assertEquals(Substatus.FAILED, response.subStatus());
    }
}
