// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The managed identity token for the managed app resource.
 */
@Fluent
public final class ManagedIdentityToken implements JsonSerializable<ManagedIdentityToken> {
    /*
     * The requested access token.
     */
    private String accessToken;

    /*
     * The number of seconds the access token will be valid.
     */
    private String expiresIn;

    /*
     * The timespan when the access token expires. This is represented as the number of seconds from epoch.
     */
    private String expiresOn;

    /*
     * The timespan when the access token takes effect. This is represented as the number of seconds from epoch.
     */
    private String notBefore;

    /*
     * The aud (audience) the access token was request for. This is the same as what was provided in the listTokens
     * request.
     */
    private String authorizationAudience;

    /*
     * The Azure resource ID for the issued token. This is either the managed application ID or the user-assigned
     * identity ID.
     */
    private String resourceId;

    /*
     * The type of the token.
     */
    private String tokenType;

    /**
     * Creates an instance of ManagedIdentityToken class.
     */
    public ManagedIdentityToken() {
    }

    /**
     * Get the accessToken property: The requested access token.
     * 
     * @return the accessToken value.
     */
    public String accessToken() {
        return this.accessToken;
    }

    /**
     * Set the accessToken property: The requested access token.
     * 
     * @param accessToken the accessToken value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Get the expiresIn property: The number of seconds the access token will be valid.
     * 
     * @return the expiresIn value.
     */
    public String expiresIn() {
        return this.expiresIn;
    }

    /**
     * Set the expiresIn property: The number of seconds the access token will be valid.
     * 
     * @param expiresIn the expiresIn value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withExpiresIn(String expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }

    /**
     * Get the expiresOn property: The timespan when the access token expires. This is represented as the number of
     * seconds from epoch.
     * 
     * @return the expiresOn value.
     */
    public String expiresOn() {
        return this.expiresOn;
    }

    /**
     * Set the expiresOn property: The timespan when the access token expires. This is represented as the number of
     * seconds from epoch.
     * 
     * @param expiresOn the expiresOn value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withExpiresOn(String expiresOn) {
        this.expiresOn = expiresOn;
        return this;
    }

    /**
     * Get the notBefore property: The timespan when the access token takes effect. This is represented as the number of
     * seconds from epoch.
     * 
     * @return the notBefore value.
     */
    public String notBefore() {
        return this.notBefore;
    }

    /**
     * Set the notBefore property: The timespan when the access token takes effect. This is represented as the number of
     * seconds from epoch.
     * 
     * @param notBefore the notBefore value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withNotBefore(String notBefore) {
        this.notBefore = notBefore;
        return this;
    }

    /**
     * Get the authorizationAudience property: The aud (audience) the access token was request for. This is the same as
     * what was provided in the listTokens request.
     * 
     * @return the authorizationAudience value.
     */
    public String authorizationAudience() {
        return this.authorizationAudience;
    }

    /**
     * Set the authorizationAudience property: The aud (audience) the access token was request for. This is the same as
     * what was provided in the listTokens request.
     * 
     * @param authorizationAudience the authorizationAudience value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withAuthorizationAudience(String authorizationAudience) {
        this.authorizationAudience = authorizationAudience;
        return this;
    }

    /**
     * Get the resourceId property: The Azure resource ID for the issued token. This is either the managed application
     * ID or the user-assigned identity ID.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The Azure resource ID for the issued token. This is either the managed application
     * ID or the user-assigned identity ID.
     * 
     * @param resourceId the resourceId value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the tokenType property: The type of the token.
     * 
     * @return the tokenType value.
     */
    public String tokenType() {
        return this.tokenType;
    }

    /**
     * Set the tokenType property: The type of the token.
     * 
     * @param tokenType the tokenType value to set.
     * @return the ManagedIdentityToken object itself.
     */
    public ManagedIdentityToken withTokenType(String tokenType) {
        this.tokenType = tokenType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessToken", this.accessToken);
        jsonWriter.writeStringField("expiresIn", this.expiresIn);
        jsonWriter.writeStringField("expiresOn", this.expiresOn);
        jsonWriter.writeStringField("notBefore", this.notBefore);
        jsonWriter.writeStringField("authorizationAudience", this.authorizationAudience);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("tokenType", this.tokenType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedIdentityToken from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedIdentityToken if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ManagedIdentityToken.
     */
    public static ManagedIdentityToken fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedIdentityToken deserializedManagedIdentityToken = new ManagedIdentityToken();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("accessToken".equals(fieldName)) {
                    deserializedManagedIdentityToken.accessToken = reader.getString();
                } else if ("expiresIn".equals(fieldName)) {
                    deserializedManagedIdentityToken.expiresIn = reader.getString();
                } else if ("expiresOn".equals(fieldName)) {
                    deserializedManagedIdentityToken.expiresOn = reader.getString();
                } else if ("notBefore".equals(fieldName)) {
                    deserializedManagedIdentityToken.notBefore = reader.getString();
                } else if ("authorizationAudience".equals(fieldName)) {
                    deserializedManagedIdentityToken.authorizationAudience = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedManagedIdentityToken.resourceId = reader.getString();
                } else if ("tokenType".equals(fieldName)) {
                    deserializedManagedIdentityToken.tokenType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedIdentityToken;
        });
    }
}
