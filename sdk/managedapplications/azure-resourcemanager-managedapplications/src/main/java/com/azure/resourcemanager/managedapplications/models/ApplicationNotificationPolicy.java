// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Managed application notification policy.
 */
@Fluent
public final class ApplicationNotificationPolicy implements JsonSerializable<ApplicationNotificationPolicy> {
    /*
     * The managed application notification endpoint.
     */
    private List<ApplicationNotificationEndpoint> notificationEndpoints;

    /**
     * Creates an instance of ApplicationNotificationPolicy class.
     */
    public ApplicationNotificationPolicy() {
    }

    /**
     * Get the notificationEndpoints property: The managed application notification endpoint.
     * 
     * @return the notificationEndpoints value.
     */
    public List<ApplicationNotificationEndpoint> notificationEndpoints() {
        return this.notificationEndpoints;
    }

    /**
     * Set the notificationEndpoints property: The managed application notification endpoint.
     * 
     * @param notificationEndpoints the notificationEndpoints value to set.
     * @return the ApplicationNotificationPolicy object itself.
     */
    public ApplicationNotificationPolicy
        withNotificationEndpoints(List<ApplicationNotificationEndpoint> notificationEndpoints) {
        this.notificationEndpoints = notificationEndpoints;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (notificationEndpoints() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property notificationEndpoints in model ApplicationNotificationPolicy"));
        } else {
            notificationEndpoints().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationNotificationPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("notificationEndpoints", this.notificationEndpoints,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationNotificationPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationNotificationPolicy if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationNotificationPolicy.
     */
    public static ApplicationNotificationPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationNotificationPolicy deserializedApplicationNotificationPolicy
                = new ApplicationNotificationPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("notificationEndpoints".equals(fieldName)) {
                    List<ApplicationNotificationEndpoint> notificationEndpoints
                        = reader.readArray(reader1 -> ApplicationNotificationEndpoint.fromJson(reader1));
                    deserializedApplicationNotificationPolicy.notificationEndpoints = notificationEndpoints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationNotificationPolicy;
        });
    }
}
