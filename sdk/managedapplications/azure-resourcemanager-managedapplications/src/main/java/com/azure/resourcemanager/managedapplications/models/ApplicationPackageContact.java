// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The application package contact information.
 */
@Fluent
public final class ApplicationPackageContact implements JsonSerializable<ApplicationPackageContact> {
    /*
     * The contact name.
     */
    private String contactName;

    /*
     * The contact email.
     */
    private String email;

    /*
     * The contact phone number.
     */
    private String phone;

    /**
     * Creates an instance of ApplicationPackageContact class.
     */
    public ApplicationPackageContact() {
    }

    /**
     * Get the contactName property: The contact name.
     * 
     * @return the contactName value.
     */
    public String contactName() {
        return this.contactName;
    }

    /**
     * Set the contactName property: The contact name.
     * 
     * @param contactName the contactName value to set.
     * @return the ApplicationPackageContact object itself.
     */
    public ApplicationPackageContact withContactName(String contactName) {
        this.contactName = contactName;
        return this;
    }

    /**
     * Get the email property: The contact email.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: The contact email.
     * 
     * @param email the email value to set.
     * @return the ApplicationPackageContact object itself.
     */
    public ApplicationPackageContact withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the phone property: The contact phone number.
     * 
     * @return the phone value.
     */
    public String phone() {
        return this.phone;
    }

    /**
     * Set the phone property: The contact phone number.
     * 
     * @param phone the phone value to set.
     * @return the ApplicationPackageContact object itself.
     */
    public ApplicationPackageContact withPhone(String phone) {
        this.phone = phone;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (email() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property email in model ApplicationPackageContact"));
        }
        if (phone() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property phone in model ApplicationPackageContact"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationPackageContact.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("phone", this.phone);
        jsonWriter.writeStringField("contactName", this.contactName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationPackageContact from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationPackageContact if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationPackageContact.
     */
    public static ApplicationPackageContact fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationPackageContact deserializedApplicationPackageContact = new ApplicationPackageContact();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("email".equals(fieldName)) {
                    deserializedApplicationPackageContact.email = reader.getString();
                } else if ("phone".equals(fieldName)) {
                    deserializedApplicationPackageContact.phone = reader.getString();
                } else if ("contactName".equals(fieldName)) {
                    deserializedApplicationPackageContact.contactName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationPackageContact;
        });
    }
}
