// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.managedapplications.models.JitRequestMetadata;
import com.azure.resourcemanager.managedapplications.models.Status;
import com.azure.resourcemanager.managedapplications.models.Substatus;
import java.io.IOException;

/**
 * Update access request definition.
 */
@Fluent
public final class UpdateAccessDefinitionInner implements JsonSerializable<UpdateAccessDefinitionInner> {
    /*
     * The approver name.
     */
    private String approver;

    /*
     * The JIT request metadata.
     */
    private JitRequestMetadata metadata;

    /*
     * The JIT status.
     */
    private Status status;

    /*
     * The JIT status.
     */
    private Substatus subStatus;

    /**
     * Creates an instance of UpdateAccessDefinitionInner class.
     */
    public UpdateAccessDefinitionInner() {
    }

    /**
     * Get the approver property: The approver name.
     * 
     * @return the approver value.
     */
    public String approver() {
        return this.approver;
    }

    /**
     * Set the approver property: The approver name.
     * 
     * @param approver the approver value to set.
     * @return the UpdateAccessDefinitionInner object itself.
     */
    public UpdateAccessDefinitionInner withApprover(String approver) {
        this.approver = approver;
        return this;
    }

    /**
     * Get the metadata property: The JIT request metadata.
     * 
     * @return the metadata value.
     */
    public JitRequestMetadata metadata() {
        return this.metadata;
    }

    /**
     * Set the metadata property: The JIT request metadata.
     * 
     * @param metadata the metadata value to set.
     * @return the UpdateAccessDefinitionInner object itself.
     */
    public UpdateAccessDefinitionInner withMetadata(JitRequestMetadata metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Get the status property: The JIT status.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: The JIT status.
     * 
     * @param status the status value to set.
     * @return the UpdateAccessDefinitionInner object itself.
     */
    public UpdateAccessDefinitionInner withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the subStatus property: The JIT status.
     * 
     * @return the subStatus value.
     */
    public Substatus subStatus() {
        return this.subStatus;
    }

    /**
     * Set the subStatus property: The JIT status.
     * 
     * @param subStatus the subStatus value to set.
     * @return the UpdateAccessDefinitionInner object itself.
     */
    public UpdateAccessDefinitionInner withSubStatus(Substatus subStatus) {
        this.subStatus = subStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (metadata() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property metadata in model UpdateAccessDefinitionInner"));
        } else {
            metadata().validate();
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property status in model UpdateAccessDefinitionInner"));
        }
        if (subStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subStatus in model UpdateAccessDefinitionInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateAccessDefinitionInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("subStatus", this.subStatus == null ? null : this.subStatus.toString());
        jsonWriter.writeStringField("approver", this.approver);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateAccessDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateAccessDefinitionInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateAccessDefinitionInner.
     */
    public static UpdateAccessDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateAccessDefinitionInner deserializedUpdateAccessDefinitionInner = new UpdateAccessDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("metadata".equals(fieldName)) {
                    deserializedUpdateAccessDefinitionInner.metadata = JitRequestMetadata.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedUpdateAccessDefinitionInner.status = Status.fromString(reader.getString());
                } else if ("subStatus".equals(fieldName)) {
                    deserializedUpdateAccessDefinitionInner.subStatus = Substatus.fromString(reader.getString());
                } else if ("approver".equals(fieldName)) {
                    deserializedUpdateAccessDefinitionInner.approver = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateAccessDefinitionInner;
        });
    }
}
