// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The JIT request metadata.
 */
@Fluent
public final class JitRequestMetadata implements JsonSerializable<JitRequestMetadata> {
    /*
     * The origin request id.
     */
    private String originRequestId;

    /*
     * The requestor id.
     */
    private String requestorId;

    /*
     * The publisher's tenant name.
     */
    private String tenantDisplayName;

    /*
     * The subject display name.
     */
    private String subjectDisplayName;

    /**
     * Creates an instance of JitRequestMetadata class.
     */
    public JitRequestMetadata() {
    }

    /**
     * Get the originRequestId property: The origin request id.
     * 
     * @return the originRequestId value.
     */
    public String originRequestId() {
        return this.originRequestId;
    }

    /**
     * Set the originRequestId property: The origin request id.
     * 
     * @param originRequestId the originRequestId value to set.
     * @return the JitRequestMetadata object itself.
     */
    public JitRequestMetadata withOriginRequestId(String originRequestId) {
        this.originRequestId = originRequestId;
        return this;
    }

    /**
     * Get the requestorId property: The requestor id.
     * 
     * @return the requestorId value.
     */
    public String requestorId() {
        return this.requestorId;
    }

    /**
     * Set the requestorId property: The requestor id.
     * 
     * @param requestorId the requestorId value to set.
     * @return the JitRequestMetadata object itself.
     */
    public JitRequestMetadata withRequestorId(String requestorId) {
        this.requestorId = requestorId;
        return this;
    }

    /**
     * Get the tenantDisplayName property: The publisher's tenant name.
     * 
     * @return the tenantDisplayName value.
     */
    public String tenantDisplayName() {
        return this.tenantDisplayName;
    }

    /**
     * Set the tenantDisplayName property: The publisher's tenant name.
     * 
     * @param tenantDisplayName the tenantDisplayName value to set.
     * @return the JitRequestMetadata object itself.
     */
    public JitRequestMetadata withTenantDisplayName(String tenantDisplayName) {
        this.tenantDisplayName = tenantDisplayName;
        return this;
    }

    /**
     * Get the subjectDisplayName property: The subject display name.
     * 
     * @return the subjectDisplayName value.
     */
    public String subjectDisplayName() {
        return this.subjectDisplayName;
    }

    /**
     * Set the subjectDisplayName property: The subject display name.
     * 
     * @param subjectDisplayName the subjectDisplayName value to set.
     * @return the JitRequestMetadata object itself.
     */
    public JitRequestMetadata withSubjectDisplayName(String subjectDisplayName) {
        this.subjectDisplayName = subjectDisplayName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("originRequestId", this.originRequestId);
        jsonWriter.writeStringField("requestorId", this.requestorId);
        jsonWriter.writeStringField("tenantDisplayName", this.tenantDisplayName);
        jsonWriter.writeStringField("subjectDisplayName", this.subjectDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JitRequestMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JitRequestMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the JitRequestMetadata.
     */
    public static JitRequestMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JitRequestMetadata deserializedJitRequestMetadata = new JitRequestMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("originRequestId".equals(fieldName)) {
                    deserializedJitRequestMetadata.originRequestId = reader.getString();
                } else if ("requestorId".equals(fieldName)) {
                    deserializedJitRequestMetadata.requestorId = reader.getString();
                } else if ("tenantDisplayName".equals(fieldName)) {
                    deserializedJitRequestMetadata.tenantDisplayName = reader.getString();
                } else if ("subjectDisplayName".equals(fieldName)) {
                    deserializedJitRequestMetadata.subjectDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJitRequestMetadata;
        });
    }
}
