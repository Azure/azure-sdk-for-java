// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managedapplications.models.ApplicationArtifact;
import com.azure.resourcemanager.managedapplications.models.ApplicationAuthorization;
import com.azure.resourcemanager.managedapplications.models.ApplicationBillingDetailsDefinition;
import com.azure.resourcemanager.managedapplications.models.ApplicationClientDetails;
import com.azure.resourcemanager.managedapplications.models.ApplicationJitAccessPolicy;
import com.azure.resourcemanager.managedapplications.models.ApplicationManagementMode;
import com.azure.resourcemanager.managedapplications.models.ApplicationPackageContact;
import com.azure.resourcemanager.managedapplications.models.ApplicationPackageSupportUrls;
import com.azure.resourcemanager.managedapplications.models.GenericResource;
import com.azure.resourcemanager.managedapplications.models.Identity;
import com.azure.resourcemanager.managedapplications.models.PlanPatchable;
import com.azure.resourcemanager.managedapplications.models.ProvisioningState;
import com.azure.resourcemanager.managedapplications.models.Sku;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Information about managed application. */
@Fluent
public final class ApplicationPatchableInner extends GenericResource {
    /*
     * The managed application properties.
     */
    @JsonProperty(value = "properties")
    private ApplicationProperties innerProperties;

    /*
     * The plan information.
     */
    @JsonProperty(value = "plan")
    private PlanPatchable plan;

    /*
     * The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * The identity of the resource.
     */
    @JsonProperty(value = "identity")
    private Identity identity;

    /** Creates an instance of ApplicationPatchableInner class. */
    public ApplicationPatchableInner() {
    }

    /**
     * Get the innerProperties property: The managed application properties.
     *
     * @return the innerProperties value.
     */
    private ApplicationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the plan property: The plan information.
     *
     * @return the plan value.
     */
    public PlanPatchable plan() {
        return this.plan;
    }

    /**
     * Set the plan property: The plan information.
     *
     * @param plan the plan value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withPlan(PlanPatchable plan) {
        this.plan = plan;
        return this;
    }

    /**
     * Get the kind property: The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog.
     *
     * @param kind the kind value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the identity property: The identity of the resource.
     *
     * @return the identity value.
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the resource.
     *
     * @param identity the identity value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationPatchableInner withManagedBy(String managedBy) {
        super.withManagedBy(managedBy);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationPatchableInner withSku(Sku sku) {
        super.withSku(sku);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationPatchableInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationPatchableInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the managedResourceGroupId property: The managed resource group Id.
     *
     * @return the managedResourceGroupId value.
     */
    public String managedResourceGroupId() {
        return this.innerProperties() == null ? null : this.innerProperties().managedResourceGroupId();
    }

    /**
     * Set the managedResourceGroupId property: The managed resource group Id.
     *
     * @param managedResourceGroupId the managedResourceGroupId value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withManagedResourceGroupId(String managedResourceGroupId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withManagedResourceGroupId(managedResourceGroupId);
        return this;
    }

    /**
     * Get the applicationDefinitionId property: The fully qualified path of managed application definition Id.
     *
     * @return the applicationDefinitionId value.
     */
    public String applicationDefinitionId() {
        return this.innerProperties() == null ? null : this.innerProperties().applicationDefinitionId();
    }

    /**
     * Set the applicationDefinitionId property: The fully qualified path of managed application definition Id.
     *
     * @param applicationDefinitionId the applicationDefinitionId value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withApplicationDefinitionId(String applicationDefinitionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withApplicationDefinitionId(applicationDefinitionId);
        return this;
    }

    /**
     * Get the parameters property: Name and value pairs that define the managed application parameters. It can be a
     * JObject or a well formed JSON string.
     *
     * @return the parameters value.
     */
    public Object parameters() {
        return this.innerProperties() == null ? null : this.innerProperties().parameters();
    }

    /**
     * Set the parameters property: Name and value pairs that define the managed application parameters. It can be a
     * JObject or a well formed JSON string.
     *
     * @param parameters the parameters value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withParameters(Object parameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withParameters(parameters);
        return this;
    }

    /**
     * Get the outputs property: Name and value pairs that define the managed application outputs.
     *
     * @return the outputs value.
     */
    public Object outputs() {
        return this.innerProperties() == null ? null : this.innerProperties().outputs();
    }

    /**
     * Get the provisioningState property: The managed application provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the billingDetails property: The managed application billing details.
     *
     * @return the billingDetails value.
     */
    public ApplicationBillingDetailsDefinition billingDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().billingDetails();
    }

    /**
     * Get the jitAccessPolicy property: The managed application Jit access policy.
     *
     * @return the jitAccessPolicy value.
     */
    public ApplicationJitAccessPolicy jitAccessPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().jitAccessPolicy();
    }

    /**
     * Set the jitAccessPolicy property: The managed application Jit access policy.
     *
     * @param jitAccessPolicy the jitAccessPolicy value to set.
     * @return the ApplicationPatchableInner object itself.
     */
    public ApplicationPatchableInner withJitAccessPolicy(ApplicationJitAccessPolicy jitAccessPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationProperties();
        }
        this.innerProperties().withJitAccessPolicy(jitAccessPolicy);
        return this;
    }

    /**
     * Get the publisherTenantId property: The publisher tenant Id.
     *
     * @return the publisherTenantId value.
     */
    public String publisherTenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().publisherTenantId();
    }

    /**
     * Get the authorizations property: The read-only authorizations property that is retrieved from the application
     * package.
     *
     * @return the authorizations value.
     */
    public List<ApplicationAuthorization> authorizations() {
        return this.innerProperties() == null ? null : this.innerProperties().authorizations();
    }

    /**
     * Get the managementMode property: The managed application management mode.
     *
     * @return the managementMode value.
     */
    public ApplicationManagementMode managementMode() {
        return this.innerProperties() == null ? null : this.innerProperties().managementMode();
    }

    /**
     * Get the customerSupport property: The read-only customer support property that is retrieved from the application
     * package.
     *
     * @return the customerSupport value.
     */
    public ApplicationPackageContact customerSupport() {
        return this.innerProperties() == null ? null : this.innerProperties().customerSupport();
    }

    /**
     * Get the supportUrls property: The read-only support URLs property that is retrieved from the application package.
     *
     * @return the supportUrls value.
     */
    public ApplicationPackageSupportUrls supportUrls() {
        return this.innerProperties() == null ? null : this.innerProperties().supportUrls();
    }

    /**
     * Get the artifacts property: The collection of managed application artifacts.
     *
     * @return the artifacts value.
     */
    public List<ApplicationArtifact> artifacts() {
        return this.innerProperties() == null ? null : this.innerProperties().artifacts();
    }

    /**
     * Get the createdBy property: The client entity that created the JIT request.
     *
     * @return the createdBy value.
     */
    public ApplicationClientDetails createdBy() {
        return this.innerProperties() == null ? null : this.innerProperties().createdBy();
    }

    /**
     * Get the updatedBy property: The client entity that last updated the JIT request.
     *
     * @return the updatedBy value.
     */
    public ApplicationClientDetails updatedBy() {
        return this.innerProperties() == null ? null : this.innerProperties().updatedBy();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (plan() != null) {
            plan().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }
}
