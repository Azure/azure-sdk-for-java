// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Managed application policy.
 */
@Fluent
public final class ApplicationPolicy implements JsonSerializable<ApplicationPolicy> {
    /*
     * The policy name
     */
    private String name;

    /*
     * The policy definition Id.
     */
    private String policyDefinitionId;

    /*
     * The policy parameters.
     */
    private String parameters;

    /**
     * Creates an instance of ApplicationPolicy class.
     */
    public ApplicationPolicy() {
    }

    /**
     * Get the name property: The policy name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The policy name.
     * 
     * @param name the name value to set.
     * @return the ApplicationPolicy object itself.
     */
    public ApplicationPolicy withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the policyDefinitionId property: The policy definition Id.
     * 
     * @return the policyDefinitionId value.
     */
    public String policyDefinitionId() {
        return this.policyDefinitionId;
    }

    /**
     * Set the policyDefinitionId property: The policy definition Id.
     * 
     * @param policyDefinitionId the policyDefinitionId value to set.
     * @return the ApplicationPolicy object itself.
     */
    public ApplicationPolicy withPolicyDefinitionId(String policyDefinitionId) {
        this.policyDefinitionId = policyDefinitionId;
        return this;
    }

    /**
     * Get the parameters property: The policy parameters.
     * 
     * @return the parameters value.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The policy parameters.
     * 
     * @param parameters the parameters value to set.
     * @return the ApplicationPolicy object itself.
     */
    public ApplicationPolicy withParameters(String parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("policyDefinitionId", this.policyDefinitionId);
        jsonWriter.writeStringField("parameters", this.parameters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ApplicationPolicy.
     */
    public static ApplicationPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationPolicy deserializedApplicationPolicy = new ApplicationPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedApplicationPolicy.name = reader.getString();
                } else if ("policyDefinitionId".equals(fieldName)) {
                    deserializedApplicationPolicy.policyDefinitionId = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    deserializedApplicationPolicy.parameters = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationPolicy;
        });
    }
}
