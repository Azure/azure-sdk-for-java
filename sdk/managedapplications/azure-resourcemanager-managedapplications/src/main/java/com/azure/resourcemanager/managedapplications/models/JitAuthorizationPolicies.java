// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The JIT authorization policies. */
@Fluent
public final class JitAuthorizationPolicies {
    /*
     * The the principal id that will be granted JIT access.
     */
    @JsonProperty(value = "principalId", required = true)
    private String principalId;

    /*
     * The role definition id that will be granted to the Principal.
     */
    @JsonProperty(value = "roleDefinitionId", required = true)
    private String roleDefinitionId;

    /** Creates an instance of JitAuthorizationPolicies class. */
    public JitAuthorizationPolicies() {
    }

    /**
     * Get the principalId property: The the principal id that will be granted JIT access.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The the principal id that will be granted JIT access.
     *
     * @param principalId the principalId value to set.
     * @return the JitAuthorizationPolicies object itself.
     */
    public JitAuthorizationPolicies withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the roleDefinitionId property: The role definition id that will be granted to the Principal.
     *
     * @return the roleDefinitionId value.
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * Set the roleDefinitionId property: The role definition id that will be granted to the Principal.
     *
     * @param roleDefinitionId the roleDefinitionId value to set.
     * @return the JitAuthorizationPolicies object itself.
     */
    public JitAuthorizationPolicies withRoleDefinitionId(String roleDefinitionId) {
        this.roleDefinitionId = roleDefinitionId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principalId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property principalId in model JitAuthorizationPolicies"));
        }
        if (roleDefinitionId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property roleDefinitionId in model JitAuthorizationPolicies"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JitAuthorizationPolicies.class);
}
