// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managedapplications.models.ApplicationArtifact;
import com.azure.resourcemanager.managedapplications.models.ApplicationAuthorization;
import com.azure.resourcemanager.managedapplications.models.ApplicationBillingDetailsDefinition;
import com.azure.resourcemanager.managedapplications.models.ApplicationClientDetails;
import com.azure.resourcemanager.managedapplications.models.ApplicationJitAccessPolicy;
import com.azure.resourcemanager.managedapplications.models.ApplicationManagementMode;
import com.azure.resourcemanager.managedapplications.models.ApplicationPackageContact;
import com.azure.resourcemanager.managedapplications.models.ApplicationPackageSupportUrls;
import com.azure.resourcemanager.managedapplications.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The managed application properties. */
@Fluent
public final class ApplicationProperties {
    /*
     * The managed resource group Id.
     */
    @JsonProperty(value = "managedResourceGroupId")
    private String managedResourceGroupId;

    /*
     * The fully qualified path of managed application definition Id.
     */
    @JsonProperty(value = "applicationDefinitionId")
    private String applicationDefinitionId;

    /*
     * Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON
     * string.
     */
    @JsonProperty(value = "parameters")
    private Object parameters;

    /*
     * Name and value pairs that define the managed application outputs.
     */
    @JsonProperty(value = "outputs", access = JsonProperty.Access.WRITE_ONLY)
    private Object outputs;

    /*
     * The managed application provisioning state.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The managed application billing details.
     */
    @JsonProperty(value = "billingDetails", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationBillingDetailsDefinition billingDetails;

    /*
     * The managed application Jit access policy.
     */
    @JsonProperty(value = "jitAccessPolicy")
    private ApplicationJitAccessPolicy jitAccessPolicy;

    /*
     * The publisher tenant Id.
     */
    @JsonProperty(value = "publisherTenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String publisherTenantId;

    /*
     * The  read-only authorizations property that is retrieved from the application package.
     */
    @JsonProperty(value = "authorizations", access = JsonProperty.Access.WRITE_ONLY)
    private List<ApplicationAuthorization> authorizations;

    /*
     * The managed application management mode.
     */
    @JsonProperty(value = "managementMode", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationManagementMode managementMode;

    /*
     * The read-only customer support property that is retrieved from the application package.
     */
    @JsonProperty(value = "customerSupport", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationPackageContact customerSupport;

    /*
     * The read-only support URLs property that is retrieved from the application package.
     */
    @JsonProperty(value = "supportUrls", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationPackageSupportUrls supportUrls;

    /*
     * The collection of managed application artifacts.
     */
    @JsonProperty(value = "artifacts", access = JsonProperty.Access.WRITE_ONLY)
    private List<ApplicationArtifact> artifacts;

    /*
     * The client entity that created the JIT request.
     */
    @JsonProperty(value = "createdBy", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationClientDetails createdBy;

    /*
     * The client entity that last updated the JIT request.
     */
    @JsonProperty(value = "updatedBy", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationClientDetails updatedBy;

    /** Creates an instance of ApplicationProperties class. */
    public ApplicationProperties() {
    }

    /**
     * Get the managedResourceGroupId property: The managed resource group Id.
     *
     * @return the managedResourceGroupId value.
     */
    public String managedResourceGroupId() {
        return this.managedResourceGroupId;
    }

    /**
     * Set the managedResourceGroupId property: The managed resource group Id.
     *
     * @param managedResourceGroupId the managedResourceGroupId value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withManagedResourceGroupId(String managedResourceGroupId) {
        this.managedResourceGroupId = managedResourceGroupId;
        return this;
    }

    /**
     * Get the applicationDefinitionId property: The fully qualified path of managed application definition Id.
     *
     * @return the applicationDefinitionId value.
     */
    public String applicationDefinitionId() {
        return this.applicationDefinitionId;
    }

    /**
     * Set the applicationDefinitionId property: The fully qualified path of managed application definition Id.
     *
     * @param applicationDefinitionId the applicationDefinitionId value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withApplicationDefinitionId(String applicationDefinitionId) {
        this.applicationDefinitionId = applicationDefinitionId;
        return this;
    }

    /**
     * Get the parameters property: Name and value pairs that define the managed application parameters. It can be a
     * JObject or a well formed JSON string.
     *
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Name and value pairs that define the managed application parameters. It can be a
     * JObject or a well formed JSON string.
     *
     * @param parameters the parameters value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withParameters(Object parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the outputs property: Name and value pairs that define the managed application outputs.
     *
     * @return the outputs value.
     */
    public Object outputs() {
        return this.outputs;
    }

    /**
     * Get the provisioningState property: The managed application provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the billingDetails property: The managed application billing details.
     *
     * @return the billingDetails value.
     */
    public ApplicationBillingDetailsDefinition billingDetails() {
        return this.billingDetails;
    }

    /**
     * Get the jitAccessPolicy property: The managed application Jit access policy.
     *
     * @return the jitAccessPolicy value.
     */
    public ApplicationJitAccessPolicy jitAccessPolicy() {
        return this.jitAccessPolicy;
    }

    /**
     * Set the jitAccessPolicy property: The managed application Jit access policy.
     *
     * @param jitAccessPolicy the jitAccessPolicy value to set.
     * @return the ApplicationProperties object itself.
     */
    public ApplicationProperties withJitAccessPolicy(ApplicationJitAccessPolicy jitAccessPolicy) {
        this.jitAccessPolicy = jitAccessPolicy;
        return this;
    }

    /**
     * Get the publisherTenantId property: The publisher tenant Id.
     *
     * @return the publisherTenantId value.
     */
    public String publisherTenantId() {
        return this.publisherTenantId;
    }

    /**
     * Get the authorizations property: The read-only authorizations property that is retrieved from the application
     * package.
     *
     * @return the authorizations value.
     */
    public List<ApplicationAuthorization> authorizations() {
        return this.authorizations;
    }

    /**
     * Get the managementMode property: The managed application management mode.
     *
     * @return the managementMode value.
     */
    public ApplicationManagementMode managementMode() {
        return this.managementMode;
    }

    /**
     * Get the customerSupport property: The read-only customer support property that is retrieved from the application
     * package.
     *
     * @return the customerSupport value.
     */
    public ApplicationPackageContact customerSupport() {
        return this.customerSupport;
    }

    /**
     * Get the supportUrls property: The read-only support URLs property that is retrieved from the application package.
     *
     * @return the supportUrls value.
     */
    public ApplicationPackageSupportUrls supportUrls() {
        return this.supportUrls;
    }

    /**
     * Get the artifacts property: The collection of managed application artifacts.
     *
     * @return the artifacts value.
     */
    public List<ApplicationArtifact> artifacts() {
        return this.artifacts;
    }

    /**
     * Get the createdBy property: The client entity that created the JIT request.
     *
     * @return the createdBy value.
     */
    public ApplicationClientDetails createdBy() {
        return this.createdBy;
    }

    /**
     * Get the updatedBy property: The client entity that last updated the JIT request.
     *
     * @return the updatedBy value.
     */
    public ApplicationClientDetails updatedBy() {
        return this.updatedBy;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (billingDetails() != null) {
            billingDetails().validate();
        }
        if (jitAccessPolicy() != null) {
            jitAccessPolicy().validate();
        }
        if (authorizations() != null) {
            authorizations().forEach(e -> e.validate());
        }
        if (customerSupport() != null) {
            customerSupport().validate();
        }
        if (supportUrls() != null) {
            supportUrls().validate();
        }
        if (artifacts() != null) {
            artifacts().forEach(e -> e.validate());
        }
        if (createdBy() != null) {
            createdBy().validate();
        }
        if (updatedBy() != null) {
            updatedBy().validate();
        }
    }
}
