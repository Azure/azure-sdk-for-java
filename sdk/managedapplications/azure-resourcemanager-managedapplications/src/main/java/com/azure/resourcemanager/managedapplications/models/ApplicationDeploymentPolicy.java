// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managedapplications.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Managed application deployment policy.
 */
@Fluent
public final class ApplicationDeploymentPolicy implements JsonSerializable<ApplicationDeploymentPolicy> {
    /*
     * The managed application deployment mode.
     */
    private DeploymentMode deploymentMode;

    /**
     * Creates an instance of ApplicationDeploymentPolicy class.
     */
    public ApplicationDeploymentPolicy() {
    }

    /**
     * Get the deploymentMode property: The managed application deployment mode.
     * 
     * @return the deploymentMode value.
     */
    public DeploymentMode deploymentMode() {
        return this.deploymentMode;
    }

    /**
     * Set the deploymentMode property: The managed application deployment mode.
     * 
     * @param deploymentMode the deploymentMode value to set.
     * @return the ApplicationDeploymentPolicy object itself.
     */
    public ApplicationDeploymentPolicy withDeploymentMode(DeploymentMode deploymentMode) {
        this.deploymentMode = deploymentMode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (deploymentMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property deploymentMode in model ApplicationDeploymentPolicy"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationDeploymentPolicy.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deploymentMode",
            this.deploymentMode == null ? null : this.deploymentMode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApplicationDeploymentPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApplicationDeploymentPolicy if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApplicationDeploymentPolicy.
     */
    public static ApplicationDeploymentPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ApplicationDeploymentPolicy deserializedApplicationDeploymentPolicy = new ApplicationDeploymentPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deploymentMode".equals(fieldName)) {
                    deserializedApplicationDeploymentPolicy.deploymentMode
                        = DeploymentMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedApplicationDeploymentPolicy;
        });
    }
}
