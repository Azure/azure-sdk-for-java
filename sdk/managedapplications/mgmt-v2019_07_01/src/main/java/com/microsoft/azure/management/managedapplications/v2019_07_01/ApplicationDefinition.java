/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managedapplications.v2019_07_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.managedapplications.v2019_07_01.implementation.ManagedApplicationsManager;
import java.util.List;
import com.microsoft.azure.management.managedapplications.v2019_07_01.implementation.ApplicationDefinitionInner;

/**
 * Type representing ApplicationDefinition.
 */
public interface ApplicationDefinition extends HasInner<ApplicationDefinitionInner>, Resource, GroupableResourceCore<ManagedApplicationsManager, ApplicationDefinitionInner>, HasResourceGroup, Refreshable<ApplicationDefinition>, Updatable<ApplicationDefinition.Update>, HasManager<ManagedApplicationsManager> {
    /**
     * @return the artifacts value.
     */
    List<ApplicationDefinitionArtifact> artifacts();

    /**
     * @return the authorizations value.
     */
    List<ApplicationAuthorization> authorizations();

    /**
     * @return the createUiDefinition value.
     */
    Object createUiDefinition();

    /**
     * @return the deploymentPolicy value.
     */
    ApplicationDeploymentPolicy deploymentPolicy();

    /**
     * @return the description value.
     */
    String description();

    /**
     * @return the displayName value.
     */
    String displayName();

    /**
     * @return the isEnabled value.
     */
    Boolean isEnabled();

    /**
     * @return the lockingPolicy value.
     */
    ApplicationPackageLockingPolicyDefinition lockingPolicy();

    /**
     * @return the lockLevel value.
     */
    ApplicationLockLevel lockLevel();

    /**
     * @return the mainTemplate value.
     */
    Object mainTemplate();

    /**
     * @return the managedBy value.
     */
    String managedBy();

    /**
     * @return the managementPolicy value.
     */
    ApplicationManagementPolicy managementPolicy();

    /**
     * @return the notificationPolicy value.
     */
    ApplicationNotificationPolicy notificationPolicy();

    /**
     * @return the packageFileUri value.
     */
    String packageFileUri();

    /**
     * @return the policies value.
     */
    List<ApplicationPolicy> policies();

    /**
     * @return the sku value.
     */
    Sku sku();

    /**
     * The entirety of the ApplicationDefinition definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithLockLevel, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of ApplicationDefinition definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a ApplicationDefinition definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the ApplicationDefinition definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithLockLevel> {
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify LockLevel.
         */
        interface WithLockLevel {
           /**
            * Specifies lockLevel.
            * @param lockLevel The managed application lock level. Possible values include: 'CanNotDelete', 'ReadOnly', 'None'
            * @return the next definition stage
*/
            WithCreate withLockLevel(ApplicationLockLevel lockLevel);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify Artifacts.
         */
        interface WithArtifacts {
            /**
             * Specifies artifacts.
             * @param artifacts The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition
             * @return the next definition stage
             */
            WithCreate withArtifacts(List<ApplicationDefinitionArtifact> artifacts);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify Authorizations.
         */
        interface WithAuthorizations {
            /**
             * Specifies authorizations.
             * @param authorizations The managed application provider authorizations
             * @return the next definition stage
             */
            WithCreate withAuthorizations(List<ApplicationAuthorization> authorizations);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify CreateUiDefinition.
         */
        interface WithCreateUiDefinition {
            /**
             * Specifies createUiDefinition.
             * @param createUiDefinition The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string
             * @return the next definition stage
             */
            WithCreate withCreateUiDefinition(Object createUiDefinition);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify DeploymentPolicy.
         */
        interface WithDeploymentPolicy {
            /**
             * Specifies deploymentPolicy.
             * @param deploymentPolicy The managed application deployment policy
             * @return the next definition stage
             */
            WithCreate withDeploymentPolicy(ApplicationDeploymentPolicy deploymentPolicy);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The managed application definition description
             * @return the next definition stage
             */
            WithCreate withDescription(String description);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName The managed application definition display name
             * @return the next definition stage
             */
            WithCreate withDisplayName(String displayName);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify IsEnabled.
         */
        interface WithIsEnabled {
            /**
             * Specifies isEnabled.
             * @param isEnabled A value indicating whether the package is enabled or not
             * @return the next definition stage
             */
            WithCreate withIsEnabled(Boolean isEnabled);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify LockingPolicy.
         */
        interface WithLockingPolicy {
            /**
             * Specifies lockingPolicy.
             * @param lockingPolicy The managed application locking policy
             * @return the next definition stage
             */
            WithCreate withLockingPolicy(ApplicationPackageLockingPolicyDefinition lockingPolicy);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify MainTemplate.
         */
        interface WithMainTemplate {
            /**
             * Specifies mainTemplate.
             * @param mainTemplate The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string
             * @return the next definition stage
             */
            WithCreate withMainTemplate(Object mainTemplate);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify ManagedBy.
         */
        interface WithManagedBy {
            /**
             * Specifies managedBy.
             * @param managedBy ID of the resource that manages this resource
             * @return the next definition stage
             */
            WithCreate withManagedBy(String managedBy);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify ManagementPolicy.
         */
        interface WithManagementPolicy {
            /**
             * Specifies managementPolicy.
             * @param managementPolicy The managed application management policy that determines publisher's access to the managed resource group
             * @return the next definition stage
             */
            WithCreate withManagementPolicy(ApplicationManagementPolicy managementPolicy);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify NotificationPolicy.
         */
        interface WithNotificationPolicy {
            /**
             * Specifies notificationPolicy.
             * @param notificationPolicy The managed application notification policy
             * @return the next definition stage
             */
            WithCreate withNotificationPolicy(ApplicationNotificationPolicy notificationPolicy);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify PackageFileUri.
         */
        interface WithPackageFileUri {
            /**
             * Specifies packageFileUri.
             * @param packageFileUri The managed application definition package file Uri. Use this element
             * @return the next definition stage
             */
            WithCreate withPackageFileUri(String packageFileUri);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify Policies.
         */
        interface WithPolicies {
            /**
             * Specifies policies.
             * @param policies The managed application provider policies
             * @return the next definition stage
             */
            WithCreate withPolicies(List<ApplicationPolicy> policies);
        }

        /**
         * The stage of the applicationdefinition definition allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The SKU of the resource
             * @return the next definition stage
             */
            WithCreate withSku(Sku sku);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<ApplicationDefinition>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithArtifacts, DefinitionStages.WithAuthorizations, DefinitionStages.WithCreateUiDefinition, DefinitionStages.WithDeploymentPolicy, DefinitionStages.WithDescription, DefinitionStages.WithDisplayName, DefinitionStages.WithIsEnabled, DefinitionStages.WithLockingPolicy, DefinitionStages.WithMainTemplate, DefinitionStages.WithManagedBy, DefinitionStages.WithManagementPolicy, DefinitionStages.WithNotificationPolicy, DefinitionStages.WithPackageFileUri, DefinitionStages.WithPolicies, DefinitionStages.WithSku {
        }
    }
    /**
     * The template for a ApplicationDefinition update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<ApplicationDefinition>, Resource.UpdateWithTags<Update>, UpdateStages.WithArtifacts, UpdateStages.WithAuthorizations, UpdateStages.WithCreateUiDefinition, UpdateStages.WithDeploymentPolicy, UpdateStages.WithDescription, UpdateStages.WithDisplayName, UpdateStages.WithIsEnabled, UpdateStages.WithLockingPolicy, UpdateStages.WithMainTemplate, UpdateStages.WithManagedBy, UpdateStages.WithManagementPolicy, UpdateStages.WithNotificationPolicy, UpdateStages.WithPackageFileUri, UpdateStages.WithPolicies, UpdateStages.WithSku {
    }

    /**
     * Grouping of ApplicationDefinition update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the applicationdefinition update allowing to specify Artifacts.
         */
        interface WithArtifacts {
            /**
             * Specifies artifacts.
             * @param artifacts The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition
             * @return the next update stage
             */
            Update withArtifacts(List<ApplicationDefinitionArtifact> artifacts);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify Authorizations.
         */
        interface WithAuthorizations {
            /**
             * Specifies authorizations.
             * @param authorizations The managed application provider authorizations
             * @return the next update stage
             */
            Update withAuthorizations(List<ApplicationAuthorization> authorizations);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify CreateUiDefinition.
         */
        interface WithCreateUiDefinition {
            /**
             * Specifies createUiDefinition.
             * @param createUiDefinition The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string
             * @return the next update stage
             */
            Update withCreateUiDefinition(Object createUiDefinition);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify DeploymentPolicy.
         */
        interface WithDeploymentPolicy {
            /**
             * Specifies deploymentPolicy.
             * @param deploymentPolicy The managed application deployment policy
             * @return the next update stage
             */
            Update withDeploymentPolicy(ApplicationDeploymentPolicy deploymentPolicy);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify Description.
         */
        interface WithDescription {
            /**
             * Specifies description.
             * @param description The managed application definition description
             * @return the next update stage
             */
            Update withDescription(String description);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify DisplayName.
         */
        interface WithDisplayName {
            /**
             * Specifies displayName.
             * @param displayName The managed application definition display name
             * @return the next update stage
             */
            Update withDisplayName(String displayName);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify IsEnabled.
         */
        interface WithIsEnabled {
            /**
             * Specifies isEnabled.
             * @param isEnabled A value indicating whether the package is enabled or not
             * @return the next update stage
             */
            Update withIsEnabled(Boolean isEnabled);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify LockingPolicy.
         */
        interface WithLockingPolicy {
            /**
             * Specifies lockingPolicy.
             * @param lockingPolicy The managed application locking policy
             * @return the next update stage
             */
            Update withLockingPolicy(ApplicationPackageLockingPolicyDefinition lockingPolicy);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify MainTemplate.
         */
        interface WithMainTemplate {
            /**
             * Specifies mainTemplate.
             * @param mainTemplate The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string
             * @return the next update stage
             */
            Update withMainTemplate(Object mainTemplate);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify ManagedBy.
         */
        interface WithManagedBy {
            /**
             * Specifies managedBy.
             * @param managedBy ID of the resource that manages this resource
             * @return the next update stage
             */
            Update withManagedBy(String managedBy);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify ManagementPolicy.
         */
        interface WithManagementPolicy {
            /**
             * Specifies managementPolicy.
             * @param managementPolicy The managed application management policy that determines publisher's access to the managed resource group
             * @return the next update stage
             */
            Update withManagementPolicy(ApplicationManagementPolicy managementPolicy);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify NotificationPolicy.
         */
        interface WithNotificationPolicy {
            /**
             * Specifies notificationPolicy.
             * @param notificationPolicy The managed application notification policy
             * @return the next update stage
             */
            Update withNotificationPolicy(ApplicationNotificationPolicy notificationPolicy);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify PackageFileUri.
         */
        interface WithPackageFileUri {
            /**
             * Specifies packageFileUri.
             * @param packageFileUri The managed application definition package file Uri. Use this element
             * @return the next update stage
             */
            Update withPackageFileUri(String packageFileUri);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify Policies.
         */
        interface WithPolicies {
            /**
             * Specifies policies.
             * @param policies The managed application provider policies
             * @return the next update stage
             */
            Update withPolicies(List<ApplicationPolicy> policies);
        }

        /**
         * The stage of the applicationdefinition update allowing to specify Sku.
         */
        interface WithSku {
            /**
             * Specifies sku.
             * @param sku The SKU of the resource
             * @return the next update stage
             */
            Update withSku(Sku sku);
        }

    }
}
