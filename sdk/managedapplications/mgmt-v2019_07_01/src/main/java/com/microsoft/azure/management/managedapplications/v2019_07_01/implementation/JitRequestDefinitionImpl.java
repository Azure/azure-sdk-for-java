/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managedapplications.v2019_07_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequestDefinition;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitAuthorizationPolicies;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitSchedulingPolicy;
import com.microsoft.azure.management.managedapplications.v2019_07_01.ProvisioningState;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequestState;
import com.microsoft.azure.management.managedapplications.v2019_07_01.ApplicationClientDetails;

class JitRequestDefinitionImpl extends GroupableResourceCoreImpl<JitRequestDefinition, JitRequestDefinitionInner, JitRequestDefinitionImpl, ManagedApplicationsManager> implements JitRequestDefinition, JitRequestDefinition.Definition, JitRequestDefinition.Update {
    JitRequestDefinitionImpl(String name, JitRequestDefinitionInner inner, ManagedApplicationsManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<JitRequestDefinition> createResourceAsync() {
        JitRequestsInner client = this.manager().inner().jitRequests();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<JitRequestDefinition> updateResourceAsync() {
        JitRequestsInner client = this.manager().inner().jitRequests();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<JitRequestDefinitionInner> getInnerAsync() {
        JitRequestsInner client = this.manager().inner().jitRequests();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String applicationResourceId() {
        return this.inner().applicationResourceId();
    }

    @Override
    public ApplicationClientDetails createdBy() {
        return this.inner().createdBy();
    }

    @Override
    public List<JitAuthorizationPolicies> jitAuthorizationPolicies() {
        return this.inner().jitAuthorizationPolicies();
    }

    @Override
    public JitRequestState jitRequestState() {
        return this.inner().jitRequestState();
    }

    @Override
    public JitSchedulingPolicy jitSchedulingPolicy() {
        return this.inner().jitSchedulingPolicy();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String publisherTenantId() {
        return this.inner().publisherTenantId();
    }

    @Override
    public ApplicationClientDetails updatedBy() {
        return this.inner().updatedBy();
    }

    @Override
    public JitRequestDefinitionImpl withApplicationResourceId(String applicationResourceId) {
        this.inner().withApplicationResourceId(applicationResourceId);
        return this;
    }

    @Override
    public JitRequestDefinitionImpl withJitAuthorizationPolicies(List<JitAuthorizationPolicies> jitAuthorizationPolicies) {
        this.inner().withJitAuthorizationPolicies(jitAuthorizationPolicies);
        return this;
    }

    @Override
    public JitRequestDefinitionImpl withJitSchedulingPolicy(JitSchedulingPolicy jitSchedulingPolicy) {
        this.inner().withJitSchedulingPolicy(jitSchedulingPolicy);
        return this;
    }

}
