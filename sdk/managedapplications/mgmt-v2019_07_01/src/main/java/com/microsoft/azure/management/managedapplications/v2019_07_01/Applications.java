/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managedapplications.v2019_07_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import rx.Completable;
import com.microsoft.azure.management.managedapplications.v2019_07_01.implementation.ApplicationInner;
import com.microsoft.azure.management.managedapplications.v2019_07_01.implementation.ApplicationsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing Applications.
 */
public interface Applications extends SupportsCreating<Application.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<Application>, SupportsListingByResourceGroup<Application>, SupportsListing<Application>, HasInner<ApplicationsInner> {
    /**
     * Gets the managed application.
     *
     * @param applicationId The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Application> getByIdAsync(String applicationId);

    /**
     * Deletes the managed application.
     *
     * @param applicationId The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteByIdAsync(String applicationId);

    /**
     * Creates a new managed application.
     *
     * @param applicationId The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param parameters Parameters supplied to the create or update a managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Application> createOrUpdateByIdAsync(String applicationId, ApplicationInner parameters);

    /**
     * Updates an existing managed application. The only value that can be updated via PATCH currently is the tags.
     *
     * @param applicationId The fully qualified ID of the managed application, including the managed application name and the managed application resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Application> updateByIdAsync(String applicationId);

    /**
     * Refresh Permissions for application.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable refreshPermissionsAsync(String resourceGroupName, String applicationName);

}
