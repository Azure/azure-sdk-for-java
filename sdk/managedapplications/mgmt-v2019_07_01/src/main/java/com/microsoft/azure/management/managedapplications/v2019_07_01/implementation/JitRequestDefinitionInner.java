/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managedapplications.v2019_07_01.implementation;

import java.util.List;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitAuthorizationPolicies;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitSchedulingPolicy;
import com.microsoft.azure.management.managedapplications.v2019_07_01.ProvisioningState;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequestState;
import com.microsoft.azure.management.managedapplications.v2019_07_01.ApplicationClientDetails;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.rest.SkipParentValidation;
import com.microsoft.azure.Resource;

/**
 * Information about JIT request definition.
 */
@JsonFlatten
@SkipParentValidation
public class JitRequestDefinitionInner extends Resource {
    /**
     * The parent application id.
     */
    @JsonProperty(value = "properties.applicationResourceId", required = true)
    private String applicationResourceId;

    /**
     * The publisher tenant id.
     */
    @JsonProperty(value = "properties.publisherTenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String publisherTenantId;

    /**
     * The JIT authorization policies.
     */
    @JsonProperty(value = "properties.jitAuthorizationPolicies", required = true)
    private List<JitAuthorizationPolicies> jitAuthorizationPolicies;

    /**
     * The JIT request properties.
     */
    @JsonProperty(value = "properties.jitSchedulingPolicy", required = true)
    private JitSchedulingPolicy jitSchedulingPolicy;

    /**
     * The JIT request provisioning state. Possible values include:
     * 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created',
     * 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * The JIT request state. Possible values include: 'NotSpecified',
     * 'Pending', 'Approved', 'Denied', 'Failed', 'Canceled', 'Expired',
     * 'Timeout'.
     */
    @JsonProperty(value = "properties.jitRequestState", access = JsonProperty.Access.WRITE_ONLY)
    private JitRequestState jitRequestState;

    /**
     * The client entity that created the JIT request.
     */
    @JsonProperty(value = "properties.createdBy", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationClientDetails createdBy;

    /**
     * The client entity that last updated the JIT request.
     */
    @JsonProperty(value = "properties.updatedBy", access = JsonProperty.Access.WRITE_ONLY)
    private ApplicationClientDetails updatedBy;

    /**
     * Get the parent application id.
     *
     * @return the applicationResourceId value
     */
    public String applicationResourceId() {
        return this.applicationResourceId;
    }

    /**
     * Set the parent application id.
     *
     * @param applicationResourceId the applicationResourceId value to set
     * @return the JitRequestDefinitionInner object itself.
     */
    public JitRequestDefinitionInner withApplicationResourceId(String applicationResourceId) {
        this.applicationResourceId = applicationResourceId;
        return this;
    }

    /**
     * Get the publisher tenant id.
     *
     * @return the publisherTenantId value
     */
    public String publisherTenantId() {
        return this.publisherTenantId;
    }

    /**
     * Get the JIT authorization policies.
     *
     * @return the jitAuthorizationPolicies value
     */
    public List<JitAuthorizationPolicies> jitAuthorizationPolicies() {
        return this.jitAuthorizationPolicies;
    }

    /**
     * Set the JIT authorization policies.
     *
     * @param jitAuthorizationPolicies the jitAuthorizationPolicies value to set
     * @return the JitRequestDefinitionInner object itself.
     */
    public JitRequestDefinitionInner withJitAuthorizationPolicies(List<JitAuthorizationPolicies> jitAuthorizationPolicies) {
        this.jitAuthorizationPolicies = jitAuthorizationPolicies;
        return this;
    }

    /**
     * Get the JIT request properties.
     *
     * @return the jitSchedulingPolicy value
     */
    public JitSchedulingPolicy jitSchedulingPolicy() {
        return this.jitSchedulingPolicy;
    }

    /**
     * Set the JIT request properties.
     *
     * @param jitSchedulingPolicy the jitSchedulingPolicy value to set
     * @return the JitRequestDefinitionInner object itself.
     */
    public JitRequestDefinitionInner withJitSchedulingPolicy(JitSchedulingPolicy jitSchedulingPolicy) {
        this.jitSchedulingPolicy = jitSchedulingPolicy;
        return this;
    }

    /**
     * Get the JIT request provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Updating'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the JIT request state. Possible values include: 'NotSpecified', 'Pending', 'Approved', 'Denied', 'Failed', 'Canceled', 'Expired', 'Timeout'.
     *
     * @return the jitRequestState value
     */
    public JitRequestState jitRequestState() {
        return this.jitRequestState;
    }

    /**
     * Get the client entity that created the JIT request.
     *
     * @return the createdBy value
     */
    public ApplicationClientDetails createdBy() {
        return this.createdBy;
    }

    /**
     * Get the client entity that last updated the JIT request.
     *
     * @return the updatedBy value
     */
    public ApplicationClientDetails updatedBy() {
        return this.updatedBy;
    }

}
