/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.managedapplications.v2019_07_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.managedapplications.v2019_07_01.ErrorResponseException;
import com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequestPatchable;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in JitRequests.
 */
public class JitRequestsInner implements InnerSupportsGet<JitRequestDefinitionInner>, InnerSupportsDelete<Void>, InnerSupportsListing<JitRequestDefinitionInner> {
    /** The Retrofit service to perform REST calls. */
    private JitRequestsService service;
    /** The service client containing this operation class. */
    private ApplicationClientImpl client;

    /**
     * Initializes an instance of JitRequestsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public JitRequestsInner(Retrofit retrofit, ApplicationClientImpl client) {
        this.service = retrofit.create(JitRequestsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for JitRequests to be
     * used by Retrofit to perform actually REST calls.
     */
    interface JitRequestsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("jitRequestName") String jitRequestName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("jitRequestName") String jitRequestName, @Path("subscriptionId") String subscriptionId, @Body JitRequestDefinitionInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("jitRequestName") String jitRequestName, @Path("subscriptionId") String subscriptionId, @Body JitRequestDefinitionInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("jitRequestName") String jitRequestName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body JitRequestPatchable parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("jitRequestName") String jitRequestName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.managedapplications.v2019_07_01.JitRequests listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JitRequestDefinitionInner object if successful.
     */
    public JitRequestDefinitionInner getByResourceGroup(String resourceGroupName, String jitRequestName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, jitRequestName).toBlocking().single().body();
    }

    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JitRequestDefinitionInner> getByResourceGroupAsync(String resourceGroupName, String jitRequestName, final ServiceCallback<JitRequestDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, jitRequestName), serviceCallback);
    }

    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<JitRequestDefinitionInner> getByResourceGroupAsync(String resourceGroupName, String jitRequestName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, jitRequestName).map(new Func1<ServiceResponse<JitRequestDefinitionInner>, JitRequestDefinitionInner>() {
            @Override
            public JitRequestDefinitionInner call(ServiceResponse<JitRequestDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<ServiceResponse<JitRequestDefinitionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String jitRequestName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jitRequestName == null) {
            throw new IllegalArgumentException("Parameter jitRequestName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, jitRequestName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JitRequestDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JitRequestDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JitRequestDefinitionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JitRequestDefinitionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JitRequestDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JitRequestDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JitRequestDefinitionInner object if successful.
     */
    public JitRequestDefinitionInner createOrUpdate(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, jitRequestName, parameters).toBlocking().last().body();
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JitRequestDefinitionInner> createOrUpdateAsync(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters, final ServiceCallback<JitRequestDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, jitRequestName, parameters), serviceCallback);
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<JitRequestDefinitionInner> createOrUpdateAsync(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, jitRequestName, parameters).map(new Func1<ServiceResponse<JitRequestDefinitionInner>, JitRequestDefinitionInner>() {
            @Override
            public JitRequestDefinitionInner call(ServiceResponse<JitRequestDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<JitRequestDefinitionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jitRequestName == null) {
            throw new IllegalArgumentException("Parameter jitRequestName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, jitRequestName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<JitRequestDefinitionInner>() { }.getType());
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JitRequestDefinitionInner object if successful.
     */
    public JitRequestDefinitionInner beginCreateOrUpdate(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, jitRequestName, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JitRequestDefinitionInner> beginCreateOrUpdateAsync(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters, final ServiceCallback<JitRequestDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, jitRequestName, parameters), serviceCallback);
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<JitRequestDefinitionInner> beginCreateOrUpdateAsync(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, jitRequestName, parameters).map(new Func1<ServiceResponse<JitRequestDefinitionInner>, JitRequestDefinitionInner>() {
            @Override
            public JitRequestDefinitionInner call(ServiceResponse<JitRequestDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<ServiceResponse<JitRequestDefinitionInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String jitRequestName, JitRequestDefinitionInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jitRequestName == null) {
            throw new IllegalArgumentException("Parameter jitRequestName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(resourceGroupName, jitRequestName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JitRequestDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JitRequestDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JitRequestDefinitionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JitRequestDefinitionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JitRequestDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JitRequestDefinitionInner>() { }.getType())
                .register(201, new TypeToken<JitRequestDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JitRequestDefinitionInner object if successful.
     */
    public JitRequestDefinitionInner update(String resourceGroupName, String jitRequestName) {
        return updateWithServiceResponseAsync(resourceGroupName, jitRequestName).toBlocking().single().body();
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JitRequestDefinitionInner> updateAsync(String resourceGroupName, String jitRequestName, final ServiceCallback<JitRequestDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, jitRequestName), serviceCallback);
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<JitRequestDefinitionInner> updateAsync(String resourceGroupName, String jitRequestName) {
        return updateWithServiceResponseAsync(resourceGroupName, jitRequestName).map(new Func1<ServiceResponse<JitRequestDefinitionInner>, JitRequestDefinitionInner>() {
            @Override
            public JitRequestDefinitionInner call(ServiceResponse<JitRequestDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<ServiceResponse<JitRequestDefinitionInner>> updateWithServiceResponseAsync(String resourceGroupName, String jitRequestName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jitRequestName == null) {
            throw new IllegalArgumentException("Parameter jitRequestName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        JitRequestPatchable parameters = new JitRequestPatchable();
        parameters.withTags(null);
        return service.update(resourceGroupName, jitRequestName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JitRequestDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JitRequestDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JitRequestDefinitionInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param tags Jit request tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JitRequestDefinitionInner object if successful.
     */
    public JitRequestDefinitionInner update(String resourceGroupName, String jitRequestName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, jitRequestName, tags).toBlocking().single().body();
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param tags Jit request tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<JitRequestDefinitionInner> updateAsync(String resourceGroupName, String jitRequestName, Map<String, String> tags, final ServiceCallback<JitRequestDefinitionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, jitRequestName, tags), serviceCallback);
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param tags Jit request tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<JitRequestDefinitionInner> updateAsync(String resourceGroupName, String jitRequestName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, jitRequestName, tags).map(new Func1<ServiceResponse<JitRequestDefinitionInner>, JitRequestDefinitionInner>() {
            @Override
            public JitRequestDefinitionInner call(ServiceResponse<JitRequestDefinitionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param tags Jit request tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JitRequestDefinitionInner object
     */
    public Observable<ServiceResponse<JitRequestDefinitionInner>> updateWithServiceResponseAsync(String resourceGroupName, String jitRequestName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jitRequestName == null) {
            throw new IllegalArgumentException("Parameter jitRequestName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        JitRequestPatchable parameters = new JitRequestPatchable();
        parameters.withTags(tags);
        return service.update(resourceGroupName, jitRequestName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<JitRequestDefinitionInner>>>() {
                @Override
                public Observable<ServiceResponse<JitRequestDefinitionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<JitRequestDefinitionInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<JitRequestDefinitionInner> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<JitRequestDefinitionInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<JitRequestDefinitionInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String jitRequestName) {
        deleteWithServiceResponseAsync(resourceGroupName, jitRequestName).toBlocking().single().body();
    }

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String jitRequestName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, jitRequestName), serviceCallback);
    }

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String jitRequestName) {
        return deleteWithServiceResponseAsync(resourceGroupName, jitRequestName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the JIT request.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String jitRequestName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (jitRequestName == null) {
            throw new IllegalArgumentException("Parameter jitRequestName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, jitRequestName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @return the PagedList<JitRequestDefinitionInner> object if successful.
     */
    public PagedList<JitRequestDefinitionInner> list() {
        PageImpl1<JitRequestDefinitionInner> page = new PageImpl1<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<JitRequestDefinitionInner>(page) {
            @Override
            public Page<JitRequestDefinitionInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JitRequestDefinitionInner>> listAsync(final ServiceCallback<List<JitRequestDefinitionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @return the observable to the List&lt;JitRequestDefinitionInner&gt; object
     */
    public Observable<Page<JitRequestDefinitionInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<JitRequestDefinitionInner>>, Page<JitRequestDefinitionInner>>() {
            @Override
            public Page<JitRequestDefinitionInner> call(ServiceResponse<List<JitRequestDefinitionInner>> response) {
                PageImpl1<JitRequestDefinitionInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Retrieves all JIT requests within the subscription.
     *
     * @return the observable to the List&lt;JitRequestDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<List<JitRequestDefinitionInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JitRequestDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<JitRequestDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JitRequestDefinitionInner>> result = listDelegate(response);
                        List<JitRequestDefinitionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<JitRequestDefinitionInner>> clientResponse = new ServiceResponse<List<JitRequestDefinitionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<JitRequestDefinitionInner>> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<JitRequestDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<JitRequestDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the PagedList<JitRequestDefinitionInner> object if successful.
     */
    public PagedList<JitRequestDefinitionInner> listByResourceGroup(String resourceGroupName) {
        PageImpl1<JitRequestDefinitionInner> page = new PageImpl1<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<JitRequestDefinitionInner>(page) {
            @Override
            public Page<JitRequestDefinitionInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<JitRequestDefinitionInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<JitRequestDefinitionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the observable to the List&lt;JitRequestDefinitionInner&gt; object
     */
    public Observable<Page<JitRequestDefinitionInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<JitRequestDefinitionInner>>, Page<JitRequestDefinitionInner>>() {
            @Override
            public Page<JitRequestDefinitionInner> call(ServiceResponse<List<JitRequestDefinitionInner>> response) {
                PageImpl1<JitRequestDefinitionInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Retrieves all JIT requests within the resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the observable to the List&lt;JitRequestDefinitionInner&gt; object
     */
    public Observable<ServiceResponse<List<JitRequestDefinitionInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<JitRequestDefinitionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<JitRequestDefinitionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<JitRequestDefinitionInner>> result = listByResourceGroupDelegate(response);
                        List<JitRequestDefinitionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<JitRequestDefinitionInner>> clientResponse = new ServiceResponse<List<JitRequestDefinitionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<JitRequestDefinitionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<JitRequestDefinitionInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<JitRequestDefinitionInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
