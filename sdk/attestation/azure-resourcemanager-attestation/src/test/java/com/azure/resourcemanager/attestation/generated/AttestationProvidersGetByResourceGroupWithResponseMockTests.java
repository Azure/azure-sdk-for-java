// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.attestation.AttestationManager;
import com.azure.resourcemanager.attestation.models.AttestationProvider;
import com.azure.resourcemanager.attestation.models.AttestationServiceStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttestationProvidersGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"trustModel\":\"avjcbpwx\",\"status\":\"NotReady\",\"attestUri\":\"knftguvriuh\",\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"xqtayriwwro\",\"name\":\"qbex\",\"type\":\"mcqibycnojv\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"qsgzvahapj\",\"name\":\"zhpvgqzcjrvxd\",\"type\":\"zlmwlxkvugfhz\"},{\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"vzunluthnnprnxi\",\"name\":\"eilpjzuaejxdu\",\"type\":\"tskzbbtdzumveek\"}]},\"location\":\"pwo\",\"tags\":{\"yofd\":\"kfpbs\",\"dttouwaboekqvkel\":\"luu\"},\"id\":\"smv\",\"name\":\"xwyjsflhhc\",\"type\":\"aln\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AttestationManager manager = AttestationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AttestationProvider response = manager.attestationProviders()
            .getByResourceGroupWithResponse("gwyzm", "txon", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("pwo", response.location());
        Assertions.assertEquals("kfpbs", response.tags().get("yofd"));
        Assertions.assertEquals("avjcbpwx", response.trustModel());
        Assertions.assertEquals(AttestationServiceStatus.NOT_READY, response.status());
        Assertions.assertEquals("knftguvriuh", response.attestUri());
    }
}
