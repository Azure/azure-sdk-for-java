// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.attestation.AttestationManager;
import com.azure.resourcemanager.attestation.models.PrivateEndpoint;
import com.azure.resourcemanager.attestation.models.PrivateEndpointConnection;
import com.azure.resourcemanager.attestation.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.attestation.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"usdsttwv\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"bejdcn\",\"actionsRequired\":\"qmoa\"},\"provisioningState\":\"Deleting\"},\"id\":\"gm\",\"name\":\"zr\",\"type\":\"rdgrtw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AttestationManager manager = AttestationManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("qgsfraoyzkoow")
            .withExistingAttestationProvider("gokdwbwhks", "zcmrvexztvb")
            .withPrivateEndpoint(new PrivateEndpoint())
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionState().withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                    .withDescription("fobwy")
                    .withActionsRequired("kby"))
            .create();

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.REJECTED,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("bejdcn", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("qmoa", response.privateLinkServiceConnectionState().actionsRequired());
    }
}
