// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.attestation.models.AttestationServiceStatus;
import java.io.IOException;
import java.util.List;

/**
 * Status of attestation service.
 */
@Fluent
public final class StatusResult implements JsonSerializable<StatusResult> {
    /*
     * Trust model for the attestation provider.
     */
    private String trustModel;

    /*
     * Status of attestation service.
     */
    private AttestationServiceStatus status;

    /*
     * Gets the uri of attestation service
     */
    private String attestUri;

    /*
     * List of private endpoint connections associated with the attestation provider.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /**
     * Creates an instance of StatusResult class.
     */
    public StatusResult() {
    }

    /**
     * Get the trustModel property: Trust model for the attestation provider.
     * 
     * @return the trustModel value.
     */
    public String trustModel() {
        return this.trustModel;
    }

    /**
     * Set the trustModel property: Trust model for the attestation provider.
     * 
     * @param trustModel the trustModel value to set.
     * @return the StatusResult object itself.
     */
    public StatusResult withTrustModel(String trustModel) {
        this.trustModel = trustModel;
        return this;
    }

    /**
     * Get the status property: Status of attestation service.
     * 
     * @return the status value.
     */
    public AttestationServiceStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Status of attestation service.
     * 
     * @param status the status value to set.
     * @return the StatusResult object itself.
     */
    public StatusResult withStatus(AttestationServiceStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the attestUri property: Gets the uri of attestation service.
     * 
     * @return the attestUri value.
     */
    public String attestUri() {
        return this.attestUri;
    }

    /**
     * Set the attestUri property: Gets the uri of attestation service.
     * 
     * @param attestUri the attestUri value to set.
     * @return the StatusResult object itself.
     */
    public StatusResult withAttestUri(String attestUri) {
        this.attestUri = attestUri;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connections associated with the attestation
     * provider.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("trustModel", this.trustModel);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("attestUri", this.attestUri);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StatusResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StatusResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StatusResult.
     */
    public static StatusResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StatusResult deserializedStatusResult = new StatusResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trustModel".equals(fieldName)) {
                    deserializedStatusResult.trustModel = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedStatusResult.status = AttestationServiceStatus.fromString(reader.getString());
                } else if ("attestUri".equals(fieldName)) {
                    deserializedStatusResult.attestUri = reader.getString();
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedStatusResult.privateEndpointConnections = privateEndpointConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStatusResult;
        });
    }
}
