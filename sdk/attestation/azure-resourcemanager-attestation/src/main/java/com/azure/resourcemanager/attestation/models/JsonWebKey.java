// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.attestation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The JsonWebKey model.
 */
@Fluent
public final class JsonWebKey implements JsonSerializable<JsonWebKey> {
    /*
     * The "alg" (algorithm) parameter identifies the algorithm intended for
     * use with the key. The values used should either be registered in the
     * IANA "JSON Web Signature and Encryption Algorithms" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.
     */
    private String alg;

    /*
     * The "crv" (curve) parameter identifies the curve type
     */
    private String crv;

    /*
     * RSA private exponent or ECC private key
     */
    private String d;

    /*
     * RSA Private Key Parameter
     */
    private String dp;

    /*
     * RSA Private Key Parameter
     */
    private String dq;

    /*
     * RSA public exponent, in Base64
     */
    private String e;

    /*
     * Symmetric key
     */
    private String k;

    /*
     * The "kid" (key ID) parameter is used to match a specific key. This
     * is used, for instance, to choose among a set of keys within a JWK Set
     * during key rollover. The structure of the "kid" value is
     * unspecified. When "kid" values are used within a JWK Set, different
     * keys within the JWK Set SHOULD use distinct "kid" values. (One
     * example in which different keys might use the same "kid" value is if
     * they have different "kty" (key type) values but are considered to be
     * equivalent alternatives by the application using them.) The "kid"
     * value is a case-sensitive string.
     */
    private String kid;

    /*
     * The "kty" (key type) parameter identifies the cryptographic algorithm
     * family used with the key, such as "RSA" or "EC". "kty" values should
     * either be registered in the IANA "JSON Web Key Types" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name. The "kty" value is a case-sensitive string.
     */
    private String kty;

    /*
     * RSA modulus, in Base64
     */
    private String n;

    /*
     * RSA secret prime
     */
    private String p;

    /*
     * RSA secret prime, with p < q
     */
    private String q;

    /*
     * RSA Private Key Parameter
     */
    private String qi;

    /*
     * Use ("public key use") identifies the intended use of
     * the public key. The "use" parameter is employed to indicate whether
     * a public key is used for encrypting data or verifying the signature
     * on data. Values are commonly "sig" (signature) or "enc" (encryption).
     */
    private String use;

    /*
     * X coordinate for the Elliptic Curve point
     */
    private String x;

    /*
     * The "x5c" (X.509 certificate chain) parameter contains a chain of one
     * or more PKIX certificates [RFC5280]. The certificate chain is
     * represented as a JSON array of certificate value strings. Each
     * string in the array is a base64-encoded (Section 4 of [RFC4648] --
     * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     * The PKIX certificate containing the key value MUST be the first
     * certificate.
     */
    private List<String> x5C;

    /*
     * Y coordinate for the Elliptic Curve point
     */
    private String y;

    /**
     * Creates an instance of JsonWebKey class.
     */
    public JsonWebKey() {
    }

    /**
     * Get the alg property: The "alg" (algorithm) parameter identifies the algorithm intended for
     * use with the key. The values used should either be registered in the
     * IANA "JSON Web Signature and Encryption Algorithms" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.
     * 
     * @return the alg value.
     */
    public String alg() {
        return this.alg;
    }

    /**
     * Set the alg property: The "alg" (algorithm) parameter identifies the algorithm intended for
     * use with the key. The values used should either be registered in the
     * IANA "JSON Web Signature and Encryption Algorithms" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.
     * 
     * @param alg the alg value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withAlg(String alg) {
        this.alg = alg;
        return this;
    }

    /**
     * Get the crv property: The "crv" (curve) parameter identifies the curve type.
     * 
     * @return the crv value.
     */
    public String crv() {
        return this.crv;
    }

    /**
     * Set the crv property: The "crv" (curve) parameter identifies the curve type.
     * 
     * @param crv the crv value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withCrv(String crv) {
        this.crv = crv;
        return this;
    }

    /**
     * Get the d property: RSA private exponent or ECC private key.
     * 
     * @return the d value.
     */
    public String d() {
        return this.d;
    }

    /**
     * Set the d property: RSA private exponent or ECC private key.
     * 
     * @param d the d value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withD(String d) {
        this.d = d;
        return this;
    }

    /**
     * Get the dp property: RSA Private Key Parameter.
     * 
     * @return the dp value.
     */
    public String dp() {
        return this.dp;
    }

    /**
     * Set the dp property: RSA Private Key Parameter.
     * 
     * @param dp the dp value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withDp(String dp) {
        this.dp = dp;
        return this;
    }

    /**
     * Get the dq property: RSA Private Key Parameter.
     * 
     * @return the dq value.
     */
    public String dq() {
        return this.dq;
    }

    /**
     * Set the dq property: RSA Private Key Parameter.
     * 
     * @param dq the dq value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withDq(String dq) {
        this.dq = dq;
        return this;
    }

    /**
     * Get the e property: RSA public exponent, in Base64.
     * 
     * @return the e value.
     */
    public String e() {
        return this.e;
    }

    /**
     * Set the e property: RSA public exponent, in Base64.
     * 
     * @param e the e value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withE(String e) {
        this.e = e;
        return this;
    }

    /**
     * Get the k property: Symmetric key.
     * 
     * @return the k value.
     */
    public String k() {
        return this.k;
    }

    /**
     * Set the k property: Symmetric key.
     * 
     * @param k the k value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withK(String k) {
        this.k = k;
        return this;
    }

    /**
     * Get the kid property: The "kid" (key ID) parameter is used to match a specific key. This
     * is used, for instance, to choose among a set of keys within a JWK Set
     * during key rollover. The structure of the "kid" value is
     * unspecified. When "kid" values are used within a JWK Set, different
     * keys within the JWK Set SHOULD use distinct "kid" values. (One
     * example in which different keys might use the same "kid" value is if
     * they have different "kty" (key type) values but are considered to be
     * equivalent alternatives by the application using them.) The "kid"
     * value is a case-sensitive string.
     * 
     * @return the kid value.
     */
    public String kid() {
        return this.kid;
    }

    /**
     * Set the kid property: The "kid" (key ID) parameter is used to match a specific key. This
     * is used, for instance, to choose among a set of keys within a JWK Set
     * during key rollover. The structure of the "kid" value is
     * unspecified. When "kid" values are used within a JWK Set, different
     * keys within the JWK Set SHOULD use distinct "kid" values. (One
     * example in which different keys might use the same "kid" value is if
     * they have different "kty" (key type) values but are considered to be
     * equivalent alternatives by the application using them.) The "kid"
     * value is a case-sensitive string.
     * 
     * @param kid the kid value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withKid(String kid) {
        this.kid = kid;
        return this;
    }

    /**
     * Get the kty property: The "kty" (key type) parameter identifies the cryptographic algorithm
     * family used with the key, such as "RSA" or "EC". "kty" values should
     * either be registered in the IANA "JSON Web Key Types" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name. The "kty" value is a case-sensitive string.
     * 
     * @return the kty value.
     */
    public String kty() {
        return this.kty;
    }

    /**
     * Set the kty property: The "kty" (key type) parameter identifies the cryptographic algorithm
     * family used with the key, such as "RSA" or "EC". "kty" values should
     * either be registered in the IANA "JSON Web Key Types" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name. The "kty" value is a case-sensitive string.
     * 
     * @param kty the kty value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withKty(String kty) {
        this.kty = kty;
        return this;
    }

    /**
     * Get the n property: RSA modulus, in Base64.
     * 
     * @return the n value.
     */
    public String n() {
        return this.n;
    }

    /**
     * Set the n property: RSA modulus, in Base64.
     * 
     * @param n the n value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withN(String n) {
        this.n = n;
        return this;
    }

    /**
     * Get the p property: RSA secret prime.
     * 
     * @return the p value.
     */
    public String p() {
        return this.p;
    }

    /**
     * Set the p property: RSA secret prime.
     * 
     * @param p the p value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withP(String p) {
        this.p = p;
        return this;
    }

    /**
     * Get the q property: RSA secret prime, with p &lt; q.
     * 
     * @return the q value.
     */
    public String q() {
        return this.q;
    }

    /**
     * Set the q property: RSA secret prime, with p &lt; q.
     * 
     * @param q the q value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withQ(String q) {
        this.q = q;
        return this;
    }

    /**
     * Get the qi property: RSA Private Key Parameter.
     * 
     * @return the qi value.
     */
    public String qi() {
        return this.qi;
    }

    /**
     * Set the qi property: RSA Private Key Parameter.
     * 
     * @param qi the qi value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withQi(String qi) {
        this.qi = qi;
        return this;
    }

    /**
     * Get the use property: Use ("public key use") identifies the intended use of
     * the public key. The "use" parameter is employed to indicate whether
     * a public key is used for encrypting data or verifying the signature
     * on data. Values are commonly "sig" (signature) or "enc" (encryption).
     * 
     * @return the use value.
     */
    public String use() {
        return this.use;
    }

    /**
     * Set the use property: Use ("public key use") identifies the intended use of
     * the public key. The "use" parameter is employed to indicate whether
     * a public key is used for encrypting data or verifying the signature
     * on data. Values are commonly "sig" (signature) or "enc" (encryption).
     * 
     * @param use the use value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withUse(String use) {
        this.use = use;
        return this;
    }

    /**
     * Get the x property: X coordinate for the Elliptic Curve point.
     * 
     * @return the x value.
     */
    public String x() {
        return this.x;
    }

    /**
     * Set the x property: X coordinate for the Elliptic Curve point.
     * 
     * @param x the x value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withX(String x) {
        this.x = x;
        return this;
    }

    /**
     * Get the x5C property: The "x5c" (X.509 certificate chain) parameter contains a chain of one
     * or more PKIX certificates [RFC5280]. The certificate chain is
     * represented as a JSON array of certificate value strings. Each
     * string in the array is a base64-encoded (Section 4 of [RFC4648] --
     * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     * The PKIX certificate containing the key value MUST be the first
     * certificate.
     * 
     * @return the x5C value.
     */
    public List<String> x5C() {
        return this.x5C;
    }

    /**
     * Set the x5C property: The "x5c" (X.509 certificate chain) parameter contains a chain of one
     * or more PKIX certificates [RFC5280]. The certificate chain is
     * represented as a JSON array of certificate value strings. Each
     * string in the array is a base64-encoded (Section 4 of [RFC4648] --
     * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     * The PKIX certificate containing the key value MUST be the first
     * certificate.
     * 
     * @param x5C the x5C value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withX5C(List<String> x5C) {
        this.x5C = x5C;
        return this;
    }

    /**
     * Get the y property: Y coordinate for the Elliptic Curve point.
     * 
     * @return the y value.
     */
    public String y() {
        return this.y;
    }

    /**
     * Set the y property: Y coordinate for the Elliptic Curve point.
     * 
     * @param y the y value to set.
     * @return the JsonWebKey object itself.
     */
    public JsonWebKey withY(String y) {
        this.y = y;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kty() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kty in model JsonWebKey"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(JsonWebKey.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kty", this.kty);
        jsonWriter.writeStringField("alg", this.alg);
        jsonWriter.writeStringField("crv", this.crv);
        jsonWriter.writeStringField("d", this.d);
        jsonWriter.writeStringField("dp", this.dp);
        jsonWriter.writeStringField("dq", this.dq);
        jsonWriter.writeStringField("e", this.e);
        jsonWriter.writeStringField("k", this.k);
        jsonWriter.writeStringField("kid", this.kid);
        jsonWriter.writeStringField("n", this.n);
        jsonWriter.writeStringField("p", this.p);
        jsonWriter.writeStringField("q", this.q);
        jsonWriter.writeStringField("qi", this.qi);
        jsonWriter.writeStringField("use", this.use);
        jsonWriter.writeStringField("x", this.x);
        jsonWriter.writeArrayField("x5c", this.x5C, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("y", this.y);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of JsonWebKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of JsonWebKey if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the JsonWebKey.
     */
    public static JsonWebKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonWebKey deserializedJsonWebKey = new JsonWebKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kty".equals(fieldName)) {
                    deserializedJsonWebKey.kty = reader.getString();
                } else if ("alg".equals(fieldName)) {
                    deserializedJsonWebKey.alg = reader.getString();
                } else if ("crv".equals(fieldName)) {
                    deserializedJsonWebKey.crv = reader.getString();
                } else if ("d".equals(fieldName)) {
                    deserializedJsonWebKey.d = reader.getString();
                } else if ("dp".equals(fieldName)) {
                    deserializedJsonWebKey.dp = reader.getString();
                } else if ("dq".equals(fieldName)) {
                    deserializedJsonWebKey.dq = reader.getString();
                } else if ("e".equals(fieldName)) {
                    deserializedJsonWebKey.e = reader.getString();
                } else if ("k".equals(fieldName)) {
                    deserializedJsonWebKey.k = reader.getString();
                } else if ("kid".equals(fieldName)) {
                    deserializedJsonWebKey.kid = reader.getString();
                } else if ("n".equals(fieldName)) {
                    deserializedJsonWebKey.n = reader.getString();
                } else if ("p".equals(fieldName)) {
                    deserializedJsonWebKey.p = reader.getString();
                } else if ("q".equals(fieldName)) {
                    deserializedJsonWebKey.q = reader.getString();
                } else if ("qi".equals(fieldName)) {
                    deserializedJsonWebKey.qi = reader.getString();
                } else if ("use".equals(fieldName)) {
                    deserializedJsonWebKey.use = reader.getString();
                } else if ("x".equals(fieldName)) {
                    deserializedJsonWebKey.x = reader.getString();
                } else if ("x5c".equals(fieldName)) {
                    List<String> x5C = reader.readArray(reader1 -> reader1.getString());
                    deserializedJsonWebKey.x5C = x5C;
                } else if ("y".equals(fieldName)) {
                    deserializedJsonWebKey.y = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedJsonWebKey;
        });
    }
}
