/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.attestation.v2020_10_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.attestation.v2020_10_01.AttestationServiceCreationParams;
import com.microsoft.azure.management.attestation.v2020_10_01.AttestationServicePatchParams;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in AttestationProviders.
 */
public class AttestationProvidersInner implements InnerSupportsGet<AttestationProviderInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private AttestationProvidersService service;
    /** The service client containing this operation class. */
    private AttestationManagementClientImpl client;

    /**
     * Initializes an instance of AttestationProvidersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AttestationProvidersInner(Retrofit retrofit, AttestationManagementClientImpl client) {
        this.service = retrofit.create(AttestationProvidersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for AttestationProviders to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AttestationProvidersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Body AttestationServiceCreationParams creationParams, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body AttestationServicePatchParams updateParams, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("providerName") String providerName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Attestation/attestationProviders")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders listDefault" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Attestation/defaultProviders")
        Observable<Response<ResponseBody>> listDefault(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.attestation.v2020_10_01.AttestationProviders getDefaultByLocation" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Attestation/locations/{location}/defaultProvider")
        Observable<Response<ResponseBody>> getDefaultByLocation(@Path("location") String location, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the status of Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderInner object if successful.
     */
    public AttestationProviderInner getByResourceGroup(String resourceGroupName, String providerName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, providerName).toBlocking().single().body();
    }

    /**
     * Get the status of Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderInner> getByResourceGroupAsync(String resourceGroupName, String providerName, final ServiceCallback<AttestationProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, providerName), serviceCallback);
    }

    /**
     * Get the status of Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<AttestationProviderInner> getByResourceGroupAsync(String resourceGroupName, String providerName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, providerName).map(new Func1<ServiceResponse<AttestationProviderInner>, AttestationProviderInner>() {
            @Override
            public AttestationProviderInner call(ServiceResponse<AttestationProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the status of Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<ServiceResponse<AttestationProviderInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String providerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationProviderInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationProviderInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationProviderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates a new Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param creationParams Client supplied parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderInner object if successful.
     */
    public AttestationProviderInner create(String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams) {
        return createWithServiceResponseAsync(resourceGroupName, providerName, creationParams).toBlocking().single().body();
    }

    /**
     * Creates a new Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param creationParams Client supplied parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderInner> createAsync(String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams, final ServiceCallback<AttestationProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, providerName, creationParams), serviceCallback);
    }

    /**
     * Creates a new Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param creationParams Client supplied parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<AttestationProviderInner> createAsync(String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams) {
        return createWithServiceResponseAsync(resourceGroupName, providerName, creationParams).map(new Func1<ServiceResponse<AttestationProviderInner>, AttestationProviderInner>() {
            @Override
            public AttestationProviderInner call(ServiceResponse<AttestationProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param creationParams Client supplied parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<ServiceResponse<AttestationProviderInner>> createWithServiceResponseAsync(String resourceGroupName, String providerName, AttestationServiceCreationParams creationParams) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (creationParams == null) {
            throw new IllegalArgumentException("Parameter creationParams is required and cannot be null.");
        }
        Validator.validate(creationParams);
        return service.create(this.client.subscriptionId(), resourceGroupName, providerName, this.client.apiVersion(), creationParams, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationProviderInner> createDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationProviderInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationProviderInner>() { }.getType())
                .register(201, new TypeToken<AttestationProviderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderInner object if successful.
     */
    public AttestationProviderInner update(String resourceGroupName, String providerName) {
        return updateWithServiceResponseAsync(resourceGroupName, providerName).toBlocking().single().body();
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderInner> updateAsync(String resourceGroupName, String providerName, final ServiceCallback<AttestationProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, providerName), serviceCallback);
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<AttestationProviderInner> updateAsync(String resourceGroupName, String providerName) {
        return updateWithServiceResponseAsync(resourceGroupName, providerName).map(new Func1<ServiceResponse<AttestationProviderInner>, AttestationProviderInner>() {
            @Override
            public AttestationProviderInner call(ServiceResponse<AttestationProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<ServiceResponse<AttestationProviderInner>> updateWithServiceResponseAsync(String resourceGroupName, String providerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        AttestationServicePatchParams updateParams = new AttestationServicePatchParams();
        updateParams.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), updateParams, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param tags The tags that will be assigned to the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderInner object if successful.
     */
    public AttestationProviderInner update(String resourceGroupName, String providerName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, providerName, tags).toBlocking().single().body();
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param tags The tags that will be assigned to the attestation provider.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderInner> updateAsync(String resourceGroupName, String providerName, Map<String, String> tags, final ServiceCallback<AttestationProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, providerName, tags), serviceCallback);
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param tags The tags that will be assigned to the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<AttestationProviderInner> updateAsync(String resourceGroupName, String providerName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, providerName, tags).map(new Func1<ServiceResponse<AttestationProviderInner>, AttestationProviderInner>() {
            @Override
            public AttestationProviderInner call(ServiceResponse<AttestationProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the Attestation Provider.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param tags The tags that will be assigned to the attestation provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<ServiceResponse<AttestationProviderInner>> updateWithServiceResponseAsync(String resourceGroupName, String providerName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        AttestationServicePatchParams updateParams = new AttestationServicePatchParams();
        updateParams.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), updateParams, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationProviderInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationProviderInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationProviderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete Attestation Service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String providerName) {
        deleteWithServiceResponseAsync(resourceGroupName, providerName).toBlocking().single().body();
    }

    /**
     * Delete Attestation Service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation service
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String providerName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, providerName), serviceCallback);
    }

    /**
     * Delete Attestation Service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String providerName) {
        return deleteWithServiceResponseAsync(resourceGroupName, providerName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete Attestation Service.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation service
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String providerName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (providerName == null) {
            throw new IllegalArgumentException("Parameter providerName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, providerName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns a list of attestation providers in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderListResultInner object if successful.
     */
    public AttestationProviderListResultInner list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Returns a list of attestation providers in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderListResultInner> listAsync(final ServiceCallback<AttestationProviderListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Returns a list of attestation providers in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderListResultInner object
     */
    public Observable<AttestationProviderListResultInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<AttestationProviderListResultInner>, AttestationProviderListResultInner>() {
            @Override
            public AttestationProviderListResultInner call(ServiceResponse<AttestationProviderListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Returns a list of attestation providers in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderListResultInner object
     */
    public Observable<ServiceResponse<AttestationProviderListResultInner>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderListResultInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationProviderListResultInner> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationProviderListResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationProviderListResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Returns attestation providers list in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the PagedList<AttestationProviderInner> object if successful.
     */
    public PagedList<AttestationProviderInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<AttestationProviderInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<AttestationProviderInner>(page) {
            @Override
            public Page<AttestationProviderInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Returns attestation providers list in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<AttestationProviderInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<AttestationProviderInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Returns attestation providers list in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the observable to the List&lt;AttestationProviderInner&gt; object
     */
    public Observable<Page<AttestationProviderInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<AttestationProviderInner>>, Page<AttestationProviderInner>>() {
            @Override
            public Page<AttestationProviderInner> call(ServiceResponse<List<AttestationProviderInner>> response) {
                PageImpl<AttestationProviderInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Returns attestation providers list in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the observable to the List&lt;AttestationProviderInner&gt; object
     */
    public Observable<ServiceResponse<List<AttestationProviderInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<AttestationProviderInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<AttestationProviderInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<AttestationProviderInner>> result = listByResourceGroupDelegate(response);
                        List<AttestationProviderInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<AttestationProviderInner>> clientResponse = new ServiceResponse<List<AttestationProviderInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<AttestationProviderInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<AttestationProviderInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<AttestationProviderInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get the default provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderListResultInner object if successful.
     */
    public AttestationProviderListResultInner listDefault() {
        return listDefaultWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get the default provider.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderListResultInner> listDefaultAsync(final ServiceCallback<AttestationProviderListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listDefaultWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get the default provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderListResultInner object
     */
    public Observable<AttestationProviderListResultInner> listDefaultAsync() {
        return listDefaultWithServiceResponseAsync().map(new Func1<ServiceResponse<AttestationProviderListResultInner>, AttestationProviderListResultInner>() {
            @Override
            public AttestationProviderListResultInner call(ServiceResponse<AttestationProviderListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the default provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderListResultInner object
     */
    public Observable<ServiceResponse<AttestationProviderListResultInner>> listDefaultWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listDefault(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderListResultInner> clientResponse = listDefaultDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationProviderListResultInner> listDefaultDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationProviderListResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationProviderListResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get the default provider by location.
     *
     * @param location The location of the default provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AttestationProviderInner object if successful.
     */
    public AttestationProviderInner getDefaultByLocation(String location) {
        return getDefaultByLocationWithServiceResponseAsync(location).toBlocking().single().body();
    }

    /**
     * Get the default provider by location.
     *
     * @param location The location of the default provider.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AttestationProviderInner> getDefaultByLocationAsync(String location, final ServiceCallback<AttestationProviderInner> serviceCallback) {
        return ServiceFuture.fromResponse(getDefaultByLocationWithServiceResponseAsync(location), serviceCallback);
    }

    /**
     * Get the default provider by location.
     *
     * @param location The location of the default provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<AttestationProviderInner> getDefaultByLocationAsync(String location) {
        return getDefaultByLocationWithServiceResponseAsync(location).map(new Func1<ServiceResponse<AttestationProviderInner>, AttestationProviderInner>() {
            @Override
            public AttestationProviderInner call(ServiceResponse<AttestationProviderInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the default provider by location.
     *
     * @param location The location of the default provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AttestationProviderInner object
     */
    public Observable<ServiceResponse<AttestationProviderInner>> getDefaultByLocationWithServiceResponseAsync(String location) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getDefaultByLocation(location, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AttestationProviderInner>>>() {
                @Override
                public Observable<ServiceResponse<AttestationProviderInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AttestationProviderInner> clientResponse = getDefaultByLocationDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AttestationProviderInner> getDefaultByLocationDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AttestationProviderInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AttestationProviderInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
