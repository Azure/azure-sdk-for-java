/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.attestation.v2020_10_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.management.attestation.v2020_10_01.implementation.AttestationProvidersInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing AttestationProviders.
 */
public interface AttestationProviders extends SupportsCreating<AttestationProvider.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<AttestationProvider>, SupportsListingByResourceGroup<AttestationProvider>, HasInner<AttestationProvidersInner> {
    /**
     * Returns a list of attestation providers in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AttestationProviderListResult> listAsync();

    /**
     * Get the default provider.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AttestationProviderListResult> listDefaultAsync();

    /**
     * Get the default provider by location.
     *
     * @param location The location of the default provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AttestationProvider> getDefaultByLocationAsync(String location);

}
