/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.attestation.v2020_10_01.implementation;

import com.microsoft.azure.management.attestation.v2020_10_01.PrivateEndpointConnection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.attestation.v2020_10_01.PrivateEndpointConnectionProvisioningState;

class PrivateEndpointConnectionImpl extends CreatableUpdatableImpl<PrivateEndpointConnection, PrivateEndpointConnectionInner, PrivateEndpointConnectionImpl> implements PrivateEndpointConnection, PrivateEndpointConnection.Definition, PrivateEndpointConnection.Update {
    private String resourceGroupName;
    private String providerName;
    private String privateEndpointConnectionName;
    private PrivateEndpointConnectionProvisioningState cprovisioningState;
    private PrivateEndpointConnectionProvisioningState uprovisioningState;
    private final AttestationManager manager;

    PrivateEndpointConnectionImpl(String name, AttestationManager manager) {
        super(name, new PrivateEndpointConnectionInner());
        this.manager = manager;
        // Set resource name
        this.privateEndpointConnectionName = name;
        //
    }

    PrivateEndpointConnectionImpl(PrivateEndpointConnectionInner inner, AttestationManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.privateEndpointConnectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.providerName = IdParsingUtils.getValueFromIdByName(inner.id(), "attestationProviders");
        this.privateEndpointConnectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateEndpointConnections");
        // set other parameters for create and update
    }

    @Override
    public AttestationManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PrivateEndpointConnection> createResourceAsync() {
        PrivateEndpointConnectionsInner client = this.manager().inner().privateEndpointConnections();
        return client.createAsync(this.resourceGroupName, this.providerName, this.privateEndpointConnectionName, this.cprovisioningState)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PrivateEndpointConnection> updateResourceAsync() {
        PrivateEndpointConnectionsInner client = this.manager().inner().privateEndpointConnections();
        return client.createAsync(this.resourceGroupName, this.providerName, this.privateEndpointConnectionName, this.uprovisioningState)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PrivateEndpointConnectionInner> getInnerAsync() {
        PrivateEndpointConnectionsInner client = this.manager().inner().privateEndpointConnections();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public PrivateEndpointConnectionProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PrivateEndpointConnectionImpl withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    @Override
    public PrivateEndpointConnectionImpl withProviderName(String providerName) {
        this.providerName = providerName;
        return this;
    }

    @Override
    public PrivateEndpointConnectionImpl withProvisioningState(PrivateEndpointConnectionProvisioningState provisioningState) {
        if (isInCreateMode()) {
            this.cprovisioningState = provisioningState;
        } else {
            this.uprovisioningState = provisioningState;
        }
        return this;
    }

}
