// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.security.attestation.implementation.PoliciesImpl;
import com.azure.security.attestation.models.AttestationType;
import com.azure.security.attestation.models.CloudErrorException;
import com.azure.security.attestation.models.PolicyResponse;

/** Initializes a new instance of the synchronous AttestationClient type. */
@ServiceClient(builder = AttestationClientBuilder.class)
public final class PolicyClient {
    private final PoliciesImpl serviceClient;

    /**
     * Initializes an instance of Policies client.
     *
     * @param serviceClient the service client implementation.
     */
    PolicyClient(PoliciesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves the current policy for an attestation type.
     *
     * @param attestationType Specifies the trusted execution environment to be used to validate the evidence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyResponse get(AttestationType attestationType) {
        return this.serviceClient.get(attestationType);
    }

    /**
     * Retrieves the current policy for an attestation type.
     *
     * @param attestationType Specifies the trusted execution environment to be used to validate the evidence.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolicyResponse> getWithResponse(AttestationType attestationType, Context context) {
        return this.serviceClient.getWithResponse(attestationType, context);
    }

    /**
     * Sets the policy for a given attestation type.
     *
     * @param attestationType Specifies the trusted execution environment to be used to validate the evidence.
     * @param newAttestationPolicy simple string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyResponse set(AttestationType attestationType, String newAttestationPolicy) {
        return this.serviceClient.set(attestationType, newAttestationPolicy);
    }

    /**
     * Sets the policy for a given attestation type.
     *
     * @param attestationType Specifies the trusted execution environment to be used to validate the evidence.
     * @param newAttestationPolicy simple string.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolicyResponse> setWithResponse(
            AttestationType attestationType, String newAttestationPolicy, Context context) {
        return this.serviceClient.setWithResponse(attestationType, newAttestationPolicy, context);
    }

    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy.
     *
     * @param attestationType Specifies the trusted execution environment to be used to validate the evidence.
     * @param policyJws simple string.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PolicyResponse reset(AttestationType attestationType, String policyJws) {
        return this.serviceClient.reset(attestationType, policyJws);
    }

    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy.
     *
     * @param attestationType Specifies the trusted execution environment to be used to validate the evidence.
     * @param policyJws simple string.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PolicyResponse> resetWithResponse(
            AttestationType attestationType, String policyJws, Context context) {
        return this.serviceClient.resetWithResponse(attestationType, policyJws, context);
    }
}
