// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.security.attestation.implementation.PolicyCertificatesImpl;
import com.azure.security.attestation.models.CloudErrorException;
import com.azure.security.attestation.models.PolicyCertificatesModifyResponse;
import com.azure.security.attestation.models.PolicyCertificatesResponse;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AttestationClient type. */
@ServiceClient(builder = AttestationClientBuilder.class, isAsync = true)
public final class PolicyCertificatesAsyncClient {
    private final PolicyCertificatesImpl serviceClient;

    /**
     * Initializes an instance of PolicyCertificates client.
     *
     * @param serviceClient the service client implementation.
     */
    PolicyCertificatesAsyncClient(PolicyCertificatesImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves the set of certificates used to express policy for the current tenant.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy management API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PolicyCertificatesResponse>> getWithResponse() {
        return this.serviceClient.getWithResponseAsync();
    }

    /**
     * Retrieves the set of certificates used to express policy for the current tenant.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy management API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyCertificatesResponse> get() {
        return this.serviceClient.getAsync();
    }

    /**
     * Adds a new attestation policy certificate to the set of policy management certificates.
     *
     * @param policyCertificateToAdd An RFC 7519 Json Web Token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy management API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PolicyCertificatesModifyResponse>> addWithResponse(String policyCertificateToAdd) {
        return this.serviceClient.addWithResponseAsync(policyCertificateToAdd);
    }

    /**
     * Adds a new attestation policy certificate to the set of policy management certificates.
     *
     * @param policyCertificateToAdd An RFC 7519 Json Web Token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy management API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyCertificatesModifyResponse> add(String policyCertificateToAdd) {
        return this.serviceClient.addAsync(policyCertificateToAdd);
    }

    /**
     * Removes the specified policy management certificate. Note that the final policy management certificate cannot be
     * removed.
     *
     * @param policyCertificateToRemove An RFC 7519 Json Web Token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy management API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PolicyCertificatesModifyResponse>> removeWithResponse(String policyCertificateToRemove) {
        return this.serviceClient.removeWithResponseAsync(policyCertificateToRemove);
    }

    /**
     * Removes the specified policy management certificate. Note that the final policy management certificate cannot be
     * removed.
     *
     * @param policyCertificateToRemove An RFC 7519 Json Web Token.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response to an attestation policy management API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PolicyCertificatesModifyResponse> remove(String policyCertificateToRemove) {
        return this.serviceClient.removeAsync(policyCertificateToRemove);
    }
}
