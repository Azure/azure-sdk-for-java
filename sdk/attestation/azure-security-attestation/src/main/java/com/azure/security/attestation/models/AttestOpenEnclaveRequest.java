// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;

import java.util.Objects;

/** Attestation request for OpenEnclave reports  generated from within Intel SGX enclaves. */
@Fluent
public final class AttestOpenEnclaveRequest {
    /*
     * OpenEnclave report from the enclave to be attested
     */
    private byte[] report;

    /*
     * Runtime data provided by the enclave at the time of report generation.
     * The MAA will verify that the first 32 bytes of the report_data field of
     * the quote contains the SHA256 hash of the decoded "data" field of the
     * runtime data.
     */
    private byte[] runtimeData;
    private com.azure.security.attestation.implementation.models.DataType runTimeDataType;

    /*
     * Base64Url encoded "InitTime data". The MAA will verify that the init
     * data was known to the enclave. Note that InitTimeData is invalid for
     * CoffeeLake processors.
     */
    private byte[] initTimeData;
    private com.azure.security.attestation.implementation.models.DataType initTimeDataType;

    /*
     * Attest against the provided draft policy. Note that the resulting token
     * cannot be validated.
     */
    private String draftPolicyForAttestation;

    /**
     * Get the report property: OpenEnclave report from the enclave to be attested.
     *
     * @return the report value.
     */
    public byte[] getReport() {
        return CoreUtils.clone(this.report);
    }

    /**
     * Set the report property: OpenEnclave report from the enclave to be attested.
     *
     * @param report the report value to set.
     * @return the AttestOpenEnclaveRequest object itself.
     */
    public AttestOpenEnclaveRequest setReport(byte[] report) {
        if (report == null) {
            this.report = null;
        } else {
            this.report = CoreUtils.clone(report);
        }
        return this;
    }

    /**
     * Get the runtimeData property: Runtime data provided by the enclave at the time of report generation. The MAA will
     * verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded
     * "data" field of the runtime data.
     *
     * @return the runtimeData value.
     */
    public byte[] getRuntimeData() {
        return CoreUtils.clone(this.runtimeData);
    }

    /**
     *
     * @return Returns the runtime data type.
     */
    public String getRunTimeDataType() {
        return this.runTimeDataType.toString();
    }

    /**
     * Set the runtimeData property: Runtime data provided by the enclave at the time of report generation. The MAA will
     * verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded
     * "data" field of the runtime data.
     *
     * @param runtimeData the runtimeData value to set.
     * @return the AttestOpenEnclaveRequest object itself.
     */
    public AttestOpenEnclaveRequest setRuntimeData(byte[] runtimeData) {
        this.runtimeData = CoreUtils.clone(runtimeData);
        this.runTimeDataType = com.azure.security.attestation.implementation.models.DataType.BINARY;
        return this;
    }

    /**
     * Set the runtimeData property: Runtime data provided by the enclave at the time of report generation. The MAA will
     * verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded
     * "data" field of the runtime data.
     *
     * @param runtimeData the runtimeData value to set.
     * @return the AttestOpenEnclaveRequest object itself.
     */
    public AttestOpenEnclaveRequest setRuntimeJson(byte[] runtimeData) {
        this.runtimeData = CoreUtils.clone(runtimeData);
        this.runTimeDataType = com.azure.security.attestation.implementation.models.DataType.JSON;
        return this;
    }


    /**
     * Get the initTimeData property: Base64Url encoded "InitTime data". The MAA will verify that the init data was
     * known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors.
     *
     * @return the initTimeData value.
     */
    public byte[] getInitTimeData() {
        return CoreUtils.clone(this.initTimeData);
    }

    /**
     *
     * @return Returns the data type of the InitTimeData property.
     */
    public String getInitTimeDataType() {
        return this.initTimeDataType.toString();
    }

    /**
     * Set the initTimeData property: Base64Url encoded "InitTime data". The MAA will verify that the init data was
     * known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors.
     *
     * @param initTimeData the initTimeData value to set.
     * @return the AttestOpenEnclaveRequest object itself.
     */
    public AttestOpenEnclaveRequest setInitTimeData(byte[] initTimeData) {
        this.initTimeData = CoreUtils.clone(initTimeData);
        this.initTimeDataType = com.azure.security.attestation.implementation.models.DataType.BINARY;
        return this;
    }

    /**
     * Set the initTimeData property: Base64Url encoded "InitTime data". The MAA will verify that the init data was
     * known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors.
     *
     * @param initTimeData the initTimeData value to set.
     * @return the AttestOpenEnclaveRequest object itself.
     */
    public AttestOpenEnclaveRequest setInitTimeJson(byte[] initTimeData) {
        this.initTimeData = CoreUtils.clone(initTimeData);
        this.initTimeDataType = com.azure.security.attestation.implementation.models.DataType.JSON;
        return this;
    }

    /**
     * Get the draftPolicyForAttestation property: Attest against the provided draft policy. Note that the resulting
     * token cannot be validated.
     *
     * @return the draftPolicyForAttestation value.
     */
    public String getDraftPolicyForAttestation() {
        return this.draftPolicyForAttestation;
    }

    /**
     * Set the draftPolicyForAttestation property: Attest against the provided draft policy. Note that the resulting
     * token cannot be validated.
     *
     * @param draftPolicyForAttestation the draftPolicyForAttestation value to set.
     * @return the AttestOpenEnclaveRequest object itself.
     */
    public AttestOpenEnclaveRequest setDraftPolicyForAttestation(String draftPolicyForAttestation) {
        this.draftPolicyForAttestation = draftPolicyForAttestation;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        Objects.requireNonNull(getReport());
    }
}
