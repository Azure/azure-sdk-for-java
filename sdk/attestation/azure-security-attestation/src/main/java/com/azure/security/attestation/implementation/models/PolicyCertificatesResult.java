// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The result of a call to retrieve policy certificates.
 */
@Fluent
public final class PolicyCertificatesResult implements JsonSerializable<PolicyCertificatesResult> {
    /*
     * SHA256 Hash of the binary representation certificate which was added or removed
     */
    private JsonWebKeySet policyCertificates;

    /**
     * Creates an instance of PolicyCertificatesResult class.
     */
    public PolicyCertificatesResult() {
    }

    /**
     * Get the policyCertificates property: SHA256 Hash of the binary representation certificate which was added or
     * removed.
     * 
     * @return the policyCertificates value.
     */
    public JsonWebKeySet getPolicyCertificates() {
        return this.policyCertificates;
    }

    /**
     * Set the policyCertificates property: SHA256 Hash of the binary representation certificate which was added or
     * removed.
     * 
     * @param policyCertificates the policyCertificates value to set.
     * @return the PolicyCertificatesResult object itself.
     */
    public PolicyCertificatesResult setPolicyCertificates(JsonWebKeySet policyCertificates) {
        this.policyCertificates = policyCertificates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getPolicyCertificates() != null) {
            getPolicyCertificates().validate();
        }
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("x-ms-policy-certificates", this.policyCertificates);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyCertificatesResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyCertificatesResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PolicyCertificatesResult.
     */
    public static PolicyCertificatesResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyCertificatesResult deserializedPolicyCertificatesResult = new PolicyCertificatesResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("x-ms-policy-certificates".equals(fieldName)) {
                    deserializedPolicyCertificatesResult.policyCertificates = JsonWebKeySet.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyCertificatesResult;
        });
    }
}
