// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.security.attestation.implementation.MetadataConfigurationsImpl;
import com.azure.security.attestation.models.CloudErrorException;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous AttestationClient type. */
@ServiceClient(builder = AttestationClientBuilder.class, isAsync = true)
public final class MetadataConfigurationAsyncClient {
    private final MetadataConfigurationsImpl serviceClient;

    /**
     * Initializes an instance of MetadataConfigurations client.
     *
     * @param serviceClient the service client implementation.
     */
    MetadataConfigurationAsyncClient(MetadataConfigurationsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Retrieves metadata about the attestation signing keys in use by the attestation service.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> getWithResponse() {
        return this.serviceClient.getWithResponseAsync();
    }

    /**
     * Retrieves metadata about the attestation signing keys in use by the attestation service.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> get() {
        return this.serviceClient.getAsync();
    }
}
