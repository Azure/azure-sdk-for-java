// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.Base64Url;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/**
 * Attestation request for Intel SGX enclaves.
 */
@Fluent
public final class AttestSgxEnclaveRequest implements JsonSerializable<AttestSgxEnclaveRequest> {
    /*
     * Quote of the enclave to be attested
     */
    private Base64Url quote;

    /*
     * Runtime data provided by the enclave at the time of quote generation. The MAA will verify that the first 32
     * bytes of the report_data field of the quote contains the SHA256 hash of the decoded "data" field of the runtime
     * data.
     */
    private RuntimeData runtimeData;

    /*
     * Initialization data provided when the enclave is created. MAA will verify that the init data was known to the
     * enclave. Note that InitTimeData is invalid for CoffeeLake processors.
     */
    private InitTimeData initTimeData;

    /*
     * Attest against the provided draft policy. Note that the resulting token cannot be validated.
     */
    private String draftPolicyForAttestation;

    /*
     * Nonce for incoming request - emitted in the generated attestation token
     */
    private String nonce;

    /**
     * Creates an instance of AttestSgxEnclaveRequest class.
     */
    public AttestSgxEnclaveRequest() {
    }

    /**
     * Get the quote property: Quote of the enclave to be attested.
     * 
     * @return the quote value.
     */
    public byte[] getQuote() {
        if (this.quote == null) {
            return null;
        }
        return this.quote.decodedBytes();
    }

    /**
     * Set the quote property: Quote of the enclave to be attested.
     * 
     * @param quote the quote value to set.
     * @return the AttestSgxEnclaveRequest object itself.
     */
    public AttestSgxEnclaveRequest setQuote(byte[] quote) {
        if (quote == null) {
            this.quote = null;
        } else {
            this.quote = Base64Url.encode(CoreUtils.clone(quote));
        }
        return this;
    }

    /**
     * Get the runtimeData property: Runtime data provided by the enclave at the time of quote generation. The MAA will
     * verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded
     * "data" field of the runtime data.
     * 
     * @return the runtimeData value.
     */
    public RuntimeData getRuntimeData() {
        return this.runtimeData;
    }

    /**
     * Set the runtimeData property: Runtime data provided by the enclave at the time of quote generation. The MAA will
     * verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded
     * "data" field of the runtime data.
     * 
     * @param runtimeData the runtimeData value to set.
     * @return the AttestSgxEnclaveRequest object itself.
     */
    public AttestSgxEnclaveRequest setRuntimeData(RuntimeData runtimeData) {
        this.runtimeData = runtimeData;
        return this;
    }

    /**
     * Get the initTimeData property: Initialization data provided when the enclave is created. MAA will verify that
     * the init data was known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors.
     * 
     * @return the initTimeData value.
     */
    public InitTimeData getInitTimeData() {
        return this.initTimeData;
    }

    /**
     * Set the initTimeData property: Initialization data provided when the enclave is created. MAA will verify that
     * the init data was known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors.
     * 
     * @param initTimeData the initTimeData value to set.
     * @return the AttestSgxEnclaveRequest object itself.
     */
    public AttestSgxEnclaveRequest setInitTimeData(InitTimeData initTimeData) {
        this.initTimeData = initTimeData;
        return this;
    }

    /**
     * Get the draftPolicyForAttestation property: Attest against the provided draft policy. Note that the resulting
     * token cannot be validated.
     * 
     * @return the draftPolicyForAttestation value.
     */
    public String getDraftPolicyForAttestation() {
        return this.draftPolicyForAttestation;
    }

    /**
     * Set the draftPolicyForAttestation property: Attest against the provided draft policy. Note that the resulting
     * token cannot be validated.
     * 
     * @param draftPolicyForAttestation the draftPolicyForAttestation value to set.
     * @return the AttestSgxEnclaveRequest object itself.
     */
    public AttestSgxEnclaveRequest setDraftPolicyForAttestation(String draftPolicyForAttestation) {
        this.draftPolicyForAttestation = draftPolicyForAttestation;
        return this;
    }

    /**
     * Get the nonce property: Nonce for incoming request - emitted in the generated attestation token.
     * 
     * @return the nonce value.
     */
    public String getNonce() {
        return this.nonce;
    }

    /**
     * Set the nonce property: Nonce for incoming request - emitted in the generated attestation token.
     * 
     * @param nonce the nonce value to set.
     * @return the AttestSgxEnclaveRequest object itself.
     */
    public AttestSgxEnclaveRequest setNonce(String nonce) {
        this.nonce = nonce;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (getRuntimeData() != null) {
            getRuntimeData().validate();
        }
        if (getInitTimeData() != null) {
            getInitTimeData().validate();
        }
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("quote", Objects.toString(this.quote, null));
        jsonWriter.writeJsonField("runtimeData", this.runtimeData);
        jsonWriter.writeJsonField("initTimeData", this.initTimeData);
        jsonWriter.writeStringField("draftPolicyForAttestation", this.draftPolicyForAttestation);
        jsonWriter.writeStringField("nonce", this.nonce);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AttestSgxEnclaveRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AttestSgxEnclaveRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AttestSgxEnclaveRequest.
     */
    public static AttestSgxEnclaveRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AttestSgxEnclaveRequest deserializedAttestSgxEnclaveRequest = new AttestSgxEnclaveRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("quote".equals(fieldName)) {
                    deserializedAttestSgxEnclaveRequest.quote
                        = reader.getNullable(nonNullReader -> new Base64Url(nonNullReader.getString()));
                } else if ("runtimeData".equals(fieldName)) {
                    deserializedAttestSgxEnclaveRequest.runtimeData = RuntimeData.fromJson(reader);
                } else if ("initTimeData".equals(fieldName)) {
                    deserializedAttestSgxEnclaveRequest.initTimeData = InitTimeData.fromJson(reader);
                } else if ("draftPolicyForAttestation".equals(fieldName)) {
                    deserializedAttestSgxEnclaveRequest.draftPolicyForAttestation = reader.getString();
                } else if ("nonce".equals(fieldName)) {
                    deserializedAttestSgxEnclaveRequest.nonce = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAttestSgxEnclaveRequest;
        });
    }
}
