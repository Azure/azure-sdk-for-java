// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation;

import com.azure.core.annotation.ServiceClientBuilder;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.security.attestation.implementation.AttestationClientImplBuilder;
import com.azure.security.attestation.implementation.AttestationClientImpl;

<<<<<<< HEAD
import java.net.MalformedURLException;
import java.net.URL;
=======
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
>>>>>>> main
import java.util.Objects;

/** A builder for creating a new instance of the AttestationClient type. */
@ServiceClientBuilder(
        serviceClients = {
            PolicyClient.class,
            PolicyCertificatesClient.class,
            AttestationClient.class,
            SigningCertificatesClient.class,
            PolicyAsyncClient.class,
            PolicyCertificatesAsyncClient.class,
        })
public final class AttestationClientBuilder {
    private static final String SDK_NAME = "name";

    private static final String SDK_VERSION = "version";

    private final AttestationClientImplBuilder clientImplBuilder;
    private final AttestationAsyncClientBuilder asyncClientBuilder;
    private final ClientLogger logger = new ClientLogger(AttestationClientBuilder.class);

    /**
     * Creates a new instance of the AttestationClientBuilder class.
     */
    public AttestationClientBuilder() {
        clientImplBuilder = new AttestationClientImplBuilder();
        asyncClientBuilder = new AttestationAsyncClientBuilder();
    }

    /*
     * The attestation instance base URI, for example
     * https://mytenant.attest.azure.net.
     */
    private String endpoint;

    /**
     * Sets The attestation endpoint URI, for example https://mytenant.attest.azure.net.
     *
     * @param endpoint The endpoint to connect to.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder endpoint(String endpoint) {
<<<<<<< HEAD
        Objects.requireNonNull(endpoint);
        try {
            URL url = new URL(endpoint);
        } catch (MalformedURLException ex) {
            logger.logExceptionAsError(new IllegalArgumentException(ex));
        }
        clientImplBuilder.instanceUrl(endpoint);
        asyncClientBuilder.endpoint(endpoint);
        return this;
    }

=======
        this.endpoint = endpoint;
        return this;
    }

    /*
     * The HTTP pipeline to send requests through
     */
    private HttpPipeline httpPipeline;

>>>>>>> main
    /**
     * Sets The HTTP pipeline to send requests through.
     *
     * @param pipeline the pipeline value.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder pipeline(HttpPipeline pipeline) {
<<<<<<< HEAD
        clientImplBuilder.pipeline(pipeline);
        asyncClientBuilder.pipeline(pipeline);
=======
        this.httpPipeline = pipeline;
>>>>>>> main
        return this;
    }

    /**
     * Sets The serializer to serialize an object into a string.
     *
     * @param serializerAdapter the serializerAdapter value.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder serializerAdapter(SerializerAdapter serializerAdapter) {
        clientImplBuilder.serializerAdapter(serializerAdapter);
        asyncClientBuilder.serializerAdapter(serializerAdapter);
        return this;
    }

    /**
     * Sets The HTTP client used to send the request.
     *
     * @param httpClient the httpClient value.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder httpClient(HttpClient httpClient) {
        clientImplBuilder.httpClient(httpClient);
        asyncClientBuilder.httpClient(httpClient);
        return this;
    }

    /**
     * Sets The configuration store that is used during construction of the service client.
     *
     * @param configuration the configuration value.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder configuration(Configuration configuration) {
        clientImplBuilder.configuration(configuration);
        asyncClientBuilder.configuration(configuration);
        return this;
    }

    /**
     * Sets The logging configuration for HTTP requests and responses.
     *
     * @param httpLogOptions the httpLogOptions value.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder httpLogOptions(HttpLogOptions httpLogOptions) {
        clientImplBuilder.httpLogOptions(httpLogOptions);
        asyncClientBuilder.httpLogOptions(httpLogOptions);
        return this;
    }

    /**
     * Sets The retry policy that will attempt to retry failed requests, if applicable.
     *
     * @param retryPolicy the retryPolicy value.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder retryPolicy(RetryPolicy retryPolicy) {
        clientImplBuilder.retryPolicy(retryPolicy);
        asyncClientBuilder.retryPolicy(retryPolicy);
        return this;
    }

<<<<<<< HEAD
=======
    /*
     * The list of Http pipeline policies to add.
     */
    private final List<HttpPipelinePolicy> pipelinePolicies;

>>>>>>> main
    /**
     * Adds a custom Http pipeline policy.
     *
     * @param customPolicy The custom Http pipeline policy to add.
     * @return the AttestationClientBuilder.
     */
    public AttestationClientBuilder addPolicy(HttpPipelinePolicy customPolicy) {
        clientImplBuilder.addPolicy(customPolicy);
        asyncClientBuilder.addPolicy(customPolicy);
        return this;
    }

    /**
     * Builds an instance of AttestationClient sync client.
     *
     * @return an instance of AttestationClient.
     */
<<<<<<< HEAD
    public AttestationClient buildAttestationClient() {
        return new AttestationClient(asyncClientBuilder.buildAttestationAsyncClient());
=======
    private AttestationClientImpl buildInnerClient() {
        Objects.requireNonNull(endpoint);

        HttpPipeline pipeline;
        if (httpPipeline != null) {
            pipeline = httpPipeline;
        } else {
            pipeline = createHttpPipeline();
        }
        if (serializerAdapter == null) {
            this.serializerAdapter = JacksonAdapter.createDefaultSerializerAdapter();
        }
        AttestationClientImplBuilder client = new AttestationClientImplBuilder()
            .pipeline(pipeline)
            .instanceUrl(endpoint)
            .serializerAdapter(serializerAdapter);
        return client.buildClient();
    }

    private HttpPipeline createHttpPipeline() {
        Configuration buildConfiguration =
                (configuration == null) ? Configuration.getGlobalConfiguration() : configuration;
        if (httpLogOptions == null) {
            httpLogOptions = new HttpLogOptions();
        }
        List<HttpPipelinePolicy> policies = new ArrayList<>();
        String clientName = properties.getOrDefault(SDK_NAME, "UnknownName");
        String clientVersion = properties.getOrDefault(SDK_VERSION, "UnknownVersion");
        policies.add(
                new UserAgentPolicy(httpLogOptions.getApplicationId(), clientName, clientVersion, buildConfiguration));
        HttpPolicyProviders.addBeforeRetryPolicies(policies);
        policies.add(retryPolicy == null ? new RetryPolicy() : retryPolicy);
        policies.add(new CookiePolicy());
        policies.addAll(this.pipelinePolicies);
        HttpPolicyProviders.addAfterRetryPolicies(policies);
        policies.add(new HttpLoggingPolicy(httpLogOptions));
        return new HttpPipelineBuilder()
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .httpClient(httpClient)
                .build();
>>>>>>> main
    }

    /**
     * Builds an instance of SigningCertificatesClient sync client.
     *
     * @return an instance of SigningCertificatesClient.
     */
    public SigningCertificatesClient buildSigningCertificatesClient() {
        return new SigningCertificatesClient(asyncClientBuilder.buildSigningCertificatesAsyncClient());
    }

    /**
     * Legacy API surface which will be removed shortly.
     */


    /**
     * Builds an instance of AttestationClientImpl with the provided parameters.
     *
     * @return an instance of AttestationClientImpl.
     */
    private AttestationClientImpl buildInnerClient() {
        return clientImplBuilder.buildClient();
    }

    /**
     * Builds an instance of PolicyAsyncClient async client.
     *
     * @return an instance of PolicyAsyncClient.
     */
    public PolicyAsyncClient buildPolicyAsyncClient() {
        return new PolicyAsyncClient(buildInnerClient().getPolicies());
    }

    /**
     * Builds an instance of PolicyCertificatesAsyncClient async client.
     *
     * @return an instance of PolicyCertificatesAsyncClient.
     */
    public PolicyCertificatesAsyncClient buildPolicyCertificatesAsyncClient() {
        return new PolicyCertificatesAsyncClient(buildInnerClient().getPolicyCertificates());
    }

    /**
     * Builds an instance of PolicyClient sync client.
     *
     * @return an instance of PolicyClient.
     */
    public PolicyClient buildPolicyClient() {
        return new PolicyClient(buildInnerClient().getPolicies());
    }

    /**
     * Builds an instance of PolicyCertificatesClient sync client.
     *
     * @return an instance of PolicyCertificatesClient.
     */
    public PolicyCertificatesClient buildPolicyCertificatesClient() {
        return new PolicyCertificatesClient(buildInnerClient().getPolicyCertificates());
    }

}
