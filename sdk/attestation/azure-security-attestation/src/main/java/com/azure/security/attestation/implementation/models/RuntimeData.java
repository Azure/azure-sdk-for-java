// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.Base64Url;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;

/**
 * Runtime data are a conduit for any information defined by the Trusted Execution Environment (TEE) when actually
 * running.
 */
@Fluent
public final class RuntimeData implements JsonSerializable<RuntimeData> {
    /*
     * Runtime data are generated by the Trusted Execution Environment (TEE). For an SGX quote (Coffeelake or Icelake),
     * the SHA256 hash of the RuntimeData must match the lower 32 bytes of the quote's "report data" attribute. For a
     * SEV-SNP quote, the SHA256 hash of the RuntimeData must match the quote's "report data" attribute.
     */
    private Base64Url data;

    /*
     * The type of data contained within the "data" field
     */
    private DataType dataType;

    /**
     * Creates an instance of RuntimeData class.
     */
    public RuntimeData() {
    }

    /**
     * Get the data property: Runtime data are generated by the Trusted Execution Environment (TEE). For an SGX quote
     * (Coffeelake or Icelake), the SHA256 hash of the RuntimeData must match the lower 32 bytes of the quote's "report
     * data" attribute. For a SEV-SNP quote, the SHA256 hash of the RuntimeData must match the quote's "report data"
     * attribute.
     * 
     * @return the data value.
     */
    public byte[] getData() {
        if (this.data == null) {
            return null;
        }
        return this.data.decodedBytes();
    }

    /**
     * Set the data property: Runtime data are generated by the Trusted Execution Environment (TEE). For an SGX quote
     * (Coffeelake or Icelake), the SHA256 hash of the RuntimeData must match the lower 32 bytes of the quote's "report
     * data" attribute. For a SEV-SNP quote, the SHA256 hash of the RuntimeData must match the quote's "report data"
     * attribute.
     * 
     * @param data the data value to set.
     * @return the RuntimeData object itself.
     */
    public RuntimeData setData(byte[] data) {
        if (data == null) {
            this.data = null;
        } else {
            this.data = Base64Url.encode(CoreUtils.clone(data));
        }
        return this;
    }

    /**
     * Get the dataType property: The type of data contained within the "data" field.
     * 
     * @return the dataType value.
     */
    public DataType getDataType() {
        return this.dataType;
    }

    /**
     * Set the dataType property: The type of data contained within the "data" field.
     * 
     * @param dataType the dataType value to set.
     * @return the RuntimeData object itself.
     */
    public RuntimeData setDataType(DataType dataType) {
        this.dataType = dataType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("data", Objects.toString(this.data, null));
        jsonWriter.writeStringField("dataType", this.dataType == null ? null : this.dataType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuntimeData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuntimeData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RuntimeData.
     */
    public static RuntimeData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuntimeData deserializedRuntimeData = new RuntimeData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("data".equals(fieldName)) {
                    deserializedRuntimeData.data
                        = reader.getNullable(nonNullReader -> new Base64Url(nonNullReader.getString()));
                } else if ("dataType".equals(fieldName)) {
                    deserializedRuntimeData.dataType = DataType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuntimeData;
        });
    }
}
