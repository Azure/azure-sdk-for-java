// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.security.attestation.implementation.AttestationClientImpl;
import com.azure.security.attestation.implementation.AttestationsImpl;
import com.azure.security.attestation.implementation.MetadataConfigurationsImpl;
import com.azure.security.attestation.implementation.SigningCertificatesImpl;
import com.azure.security.attestation.models.AttestOpenEnclaveRequest;
import com.azure.security.attestation.models.AttestSgxEnclaveRequest;
import com.azure.security.attestation.models.AttestationResponse;
import com.azure.security.attestation.models.AttestationSigner;
import com.azure.security.attestation.models.CloudErrorException;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;
import java.util.Objects;

import static com.azure.core.util.FluxUtil.withContext;

/** Initializes a new instance of the asynchronous AzureAttestationRestClient type. */
@ServiceClient(builder = AttestationAsyncClientBuilder.class, isAsync = true)
public final class AttestationAsyncClient {
    private final AttestationsImpl attestImpl;
    private final MetadataConfigurationsImpl metadataImpl;
    private final SigningCertificatesImpl signerImpl;

    /**
     * Initializes an instance of Attestations client.
     *
     * @param clientImpl the service client implementation.
     */
    AttestationAsyncClient(AttestationClientImpl clientImpl) {
        this.attestImpl = clientImpl.getAttestations();
        this.metadataImpl = clientImpl.getMetadataConfigurations();
        this.signerImpl = clientImpl.getSigningCertificates();
    }

    /**
     * Retrieves metadata about the attestation signing keys in use by the attestation service.
     *
     * @param context - Context for the operation
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> getOpenIdMetadataWithResponse(Context context) {
        return this.metadataImpl.getWithResponseAsync(context);
    }

    /**
     * Retrieves metadata about the attestation signing keys in use by the attestation service.
     *
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> getOpenIdMetadata() {
        // Forward the getOpenIdMetadata to the getOpenIdMetadataWithResponse API implementation.
        return withContext(context -> this.getOpenIdMetadataWithResponse(context))
            .map(Response::getValue);
    }

    /**
     * Retrieves the list of {@link AttestationSigner} objects associated with this attestation instance.
     * An {@link AttestationSigner} represents an X.509 certificate chain and KeyId which can be used
     * to validate an attestation token returned by the service.
     *
     * @return Returns an array of {@link AttestationSigner} objects.
     */

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationSigner[]> getAttestationSigners() {
        return withContext(context -> this.getAttestationSignersWithResponse(context))
            .map(Response::getValue);
    }

    /**
     * Retrieves the list of {@link AttestationSigner} objects associated with this attestation instance.
     *
     * An {@link AttestationSigner} represents an X.509 certificate chain and KeyId which can be used
     * to validate an attestation token returned by the service.
     *
     * @param context Context for the operation.
     * @return Returns an array of {@link AttestationSigner} objects.
     */
    public Mono<Response<AttestationSigner[]>> getAttestationSignersWithResponse(Context context) {
        return this.signerImpl.getWithResponseAsync(context)
            .map(response -> Utilities.generateResponseFromModelType(response, Utilities.attestationSignersFromJwks(response.getValue())));
    }

    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param request Attestation request for Intel SGX enclaves.
     * @param context - Context for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationResponse>> attestOpenEnclaveWithResponse(AttestOpenEnclaveRequest request, Context context) {
        return this.attestImpl.attestOpenEnclaveWithResponseAsync(request.toGenerated(), context)
            .map(response -> Utilities.generateResponseFromModelType(response, AttestationResponse.fromGenerated(response.getValue())));
    }

    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param request Attestation request for Intel SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationResponse> attestOpenEnclave(AttestOpenEnclaveRequest request) {
        return withContext(context -> attestOpenEnclaveWithResponse(request, context))
            .map(Response::getValue);
    }

    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param request Attestation request for Intel SGX enclaves.
     * @param context - Context for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationResponse>> attestSgxEnclaveWithResponse(AttestSgxEnclaveRequest request, Context context) {
        return this.attestImpl.attestSgxEnclaveWithResponseAsync(request.toGenerated(), context)
            .map(response ->  Utilities.generateResponseFromModelType(response, AttestationResponse.fromGenerated(response.getValue())));
    }

    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param request Attestation request for Intel SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationResponse> attestSgxEnclave(AttestSgxEnclaveRequest request) {
        return withContext(context -> attestSgxEnclaveWithResponse(request, context))
            .map(Response::getValue);
    }

    /**
     * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation result
     * produced is dependent upon the attestation policy.
     *
     * @param request Attestation request for Trusted Platform Module (TPM) attestation.
     * @param context - Context for the operation
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attestation response for Trusted Platform Module (TPM) attestation.
     */
//    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<String>> attestTpmWithResponse(String request, Context context) {
        Objects.requireNonNull(request);
        return this.attestImpl.attestTpmWithResponseAsync(new com.azure.security.attestation.implementation.models.TpmAttestationRequest().setData(request.getBytes(StandardCharsets.UTF_8)), context)
            .map(response -> Utilities.generateResponseFromModelType(response, new String(Objects.requireNonNull(response.getValue().getData()), StandardCharsets.UTF_8)));
    }

    /**
     * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation result
     * produced is dependent upon the attestation policy.
     *
     * @param request Attestation request for Trusted Platform Module (TPM) attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attestation response for Trusted Platform Module (TPM) attestation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> attestTpm(String request) {
        return withContext(context -> attestTpmWithResponse(request, context))
            .map(Response::getValue);
    }
}
