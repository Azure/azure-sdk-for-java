// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.security.attestation;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.security.attestation.implementation.AttestationClientImpl;
import com.azure.security.attestation.implementation.AttestationsImpl;
import com.azure.security.attestation.implementation.MetadataConfigurationsImpl;
import com.azure.security.attestation.implementation.SigningCertificatesImpl;
import com.azure.security.attestation.implementation.models.AttestationOptionsImpl;
import com.azure.security.attestation.implementation.models.AttestationResultImpl;
import com.azure.security.attestation.implementation.models.AttestationSignerImpl;
import com.azure.security.attestation.implementation.models.AttestationTokenImpl;
import com.azure.security.attestation.models.AttestationOptions;
import com.azure.security.attestation.models.AttestationResult;
import com.azure.security.attestation.models.AttestationSigner;
import com.azure.security.attestation.models.AttestationToken;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;
import java.security.InvalidParameterException;
import java.util.Objects;

import static com.azure.core.util.FluxUtil.withContext;

/**
 * The AttestationAsyncClient implements the functionality required by the "Attest" family of APIs.
 *
 */
@ServiceClient(builder = AttestationClientBuilder.class, isAsync = true)
public final class AttestationAsyncClient {
    private final AttestationsImpl attestImpl;
    private final MetadataConfigurationsImpl metadataImpl;
    private final SigningCertificatesImpl signerImpl;
    private final ClientLogger logger;

    /**
     * Initializes an instance of Attestations client.
     *
     * @param clientImpl the service client implementation.
     */
    AttestationAsyncClient(AttestationClientImpl clientImpl) {
        this.attestImpl = clientImpl.getAttestations();
        this.metadataImpl = clientImpl.getMetadataConfigurations();
        this.signerImpl = clientImpl.getSigningCertificates();
        this.logger = new ClientLogger(AttestationAsyncClient.class);
    }

    /**
     * Retrieves metadata about the attestation signing keys in use by the attestation service.
     *
     * <p><strong>Retrieve the OpenID metadata for this async client.</strong></p>
     * {@codesnippet com.azure.security.attestation.AttestationAsyncClient.getOpenIdMetadataWithResponse}
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Object>> getOpenIdMetadataWithResponse() {
        return withContext(context -> getOpenIdMetadataWithResponse(context));
    }

    Mono<Response<Object>> getOpenIdMetadataWithResponse(Context context) {
        return this.metadataImpl.getWithResponseAsync(context);
    }


    /**
     * Retrieves metadata about the attestation signing keys in use by the attestation service.

     * <p><strong>Retrieve the OpenID metadata for this async client.</strong></p>
     * {@codesnippet com.azure.security.attestation.AttestationAsyncClient.getOpenIdMetadata}
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return any object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Object> getOpenIdMetadata() {
        // Forward the getOpenIdMetadata to the getOpenIdMetadataWithResponse API implementation.
        return this.getOpenIdMetadataWithResponse()
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves the list of {@link AttestationSigner} objects associated with this attestation instance.
     * <p>
     *  An {@link AttestationSigner} represents an X.509 certificate chain and KeyId which can be used
     *  to validate an attestation token returned by the service.
     * </p>
     * <p><strong>Retrieve Attestation Signers for this async client.</strong></p>
     * {@codesnippet com.azure.security.attestation.AttestationAsyncClient.getAttestationSigners}
     *
     * @return Returns an array of {@link AttestationSigner} objects.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationSigner[]> getAttestationSigners() {
        return this.getAttestationSignersWithResponse()
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Retrieves the list of {@link AttestationSigner} objects associated with this attestation instance.
     *<p>
     * An {@link AttestationSigner} represents an X.509 certificate chain and KeyId which can be used
     * to validate an attestation token returned by the service.
     * </p>
     * <p><strong>Retrieve Attestation Signers for this async client.</strong></p>
     * {@codesnippet com.azure.security.attestation.AttestationAsyncClient.getAttestationSignersWithResponse}
     *
     * @return Returns an array of {@link AttestationSigner} objects.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationSigner[]>> getAttestationSignersWithResponse() {
        return withContext(context -> getAttestationSignersWithResponse(context));
    }

    Mono<Response<AttestationSigner[]>> getAttestationSignersWithResponse(Context context) {
        return  this.signerImpl.getWithResponseAsync(context)
            .map(response -> Utilities.generateResponseFromModelType(response, AttestationSignerImpl.attestationSignersFromJwks(response.getValue())));
    }


    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param report - OpenEnclave report to attest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationResult>> attestOpenEnclaveWithResponse(byte[] report) {
        return withContext(context -> this.attestOpenEnclaveWithResponse(report, context));
    }

    Mono<Response<AttestationResult>> attestOpenEnclaveWithResponse(byte[] report, Context context) {
        return this.attestOpenEnclaveWithResponse(new AttestationOptionsImpl().setEvidence(report), context);
    }
    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param options Attestation options for attesting SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationResult>> attestOpenEnclaveWithResponse(AttestationOptions options) {
        return withContext(context -> attestOpenEnclaveWithResponse(options, context));
    }

    Mono<Response<AttestationResult>> attestOpenEnclaveWithResponse(AttestationOptions options, Context context) {
        // Ensure that the incoming request makes sense.
        options.validate();
        if (!(options instanceof AttestationOptionsImpl)) {
            logger.logExceptionAsError(new InvalidParameterException("AttestationOptions must be an instance of AttestationOptionsImpl"));
        }
        final AttestationOptionsImpl optionsImpl = (AttestationOptionsImpl) options;

        return this.attestImpl.attestOpenEnclaveWithResponseAsync(optionsImpl.getInternalAttestOpenEnclaveRequest(), context)
            // Create an AttestationToken from the raw response from the service.
            .map(response -> Utilities.generateResponseFromModelType(response, new AttestationTokenImpl(response.getValue().getToken())))
            .map(response -> {
                // Extract the AttestationResult from the AttestationToken.
                com.azure.security.attestation.implementation.models.AttestationResult generated = response.getValue().getBody(com.azure.security.attestation.implementation.models.AttestationResult.class);
                return Utilities.generateAttestationResponseFromModelType(response, response.getValue(), AttestationResultImpl.fromGeneratedAttestationResult(generated));
            });
    }


    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param report OpenEnclave generated report.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationResult> attestOpenEnclave(byte[] report) {
        return attestOpenEnclaveWithResponse(new AttestationOptionsImpl().setEvidence(report))
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param options Attestation options for Intel SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationResult> attestOpenEnclave(AttestationOptions options) {
        return attestOpenEnclaveWithResponse(options)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param quote Attestation options for Intel SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationResult>> attestSgxEnclaveWithResponse(byte[] quote) {
        return withContext(context -> this.attestSgxEnclaveWithResponse(quote, context));
    }

    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param quote Attestation options for Intel SGX enclaves.
     * @param context Context for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    Mono<Response<AttestationResult>> attestSgxEnclaveWithResponse(byte[] quote, Context context) {
        return attestSgxEnclaveWithResponse(new AttestationOptionsImpl().setEvidence(quote), context);
    }

    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param options Attestation options for Intel SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AttestationResult>> attestSgxEnclaveWithResponse(AttestationOptions options) {
        return withContext(context -> attestSgxEnclaveWithResponse(options, context));
    }

    Mono<Response<AttestationResult>> attestSgxEnclaveWithResponse(AttestationOptions options, Context context) {
        // Ensure that the incoming request makes sense.
        options.validate();
        if (!(options instanceof AttestationOptionsImpl)) {
            logger.logExceptionAsError(new InvalidParameterException("AttestSgxEnclaveRequest must be an instance of AttestSgxEnclaveRequestImpl"));
        }
        AttestationOptionsImpl optionsImpl = (AttestationOptionsImpl) options;

        return  this.attestImpl.attestSgxEnclaveWithResponseAsync(optionsImpl.getInternalAttestSgxRequest(), context)
            .map(response -> {
                AttestationToken token = new AttestationTokenImpl(response.getValue().getToken());
                com.azure.security.attestation.implementation.models.AttestationResult generatedResult = token.getBody(com.azure.security.attestation.implementation.models.AttestationResult.class);
                return Utilities.generateAttestationResponseFromModelType(response, token, AttestationResultImpl.fromGeneratedAttestationResult(generatedResult));
            });
    }

    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param options Attestation options for Intel SGX enclaves.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationResult> attestSgxEnclave(AttestationOptions options) {
        return attestSgxEnclaveWithResponse(options)
            .flatMap(FluxUtil::toMono);
    }
    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent upon
     * attestation policy.
     *
     * @param quote SGX Quote to attest.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of an attestation operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AttestationResult> attestSgxEnclave(byte[] quote) {
        return attestSgxEnclaveWithResponse(quote)
            .flatMap(FluxUtil::toMono);
    }


    /**
     * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation result
     * produced is dependent upon the attestation policy.
     *
     * @param request Attestation request for Trusted Platform Module (TPM) attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attestation response for Trusted Platform Module (TPM) attestation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<String>> attestTpmWithResponse(String request) {
        return withContext(context -> this.attestTpmWithResponse(request, context));
    }

    Mono<Response<String>> attestTpmWithResponse(String request, Context context) {
        Objects.requireNonNull(request);
        return this.attestImpl.attestTpmWithResponseAsync(new com.azure.security.attestation.implementation.models.TpmAttestationRequest().setData(request.getBytes(StandardCharsets.UTF_8)), context)
            .map(response -> Utilities.generateResponseFromModelType(response, new String(Objects.requireNonNull(response.getValue().getData()), StandardCharsets.UTF_8)));
    }

    /**
     * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation result
     * produced is dependent upon the attestation policy.
     *
     * @param request Attestation request for Trusted Platform Module (TPM) attestation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return attestation response for Trusted Platform Module (TPM) attestation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> attestTpm(String request) {
        return attestTpmWithResponse(request)
            .flatMap(FluxUtil::toMono);
    }
}
