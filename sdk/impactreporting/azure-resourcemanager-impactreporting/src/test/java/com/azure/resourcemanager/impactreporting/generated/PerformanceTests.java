// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.impactreporting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.impactreporting.models.ExpectedValueRange;
import com.azure.resourcemanager.impactreporting.models.MetricUnit;
import com.azure.resourcemanager.impactreporting.models.Performance;
import org.junit.jupiter.api.Assertions;

public final class PerformanceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Performance model = BinaryData.fromString(
            "{\"metricName\":\"bpf\",\"expected\":5.98797419739574,\"actual\":52.25217379811007,\"expectedValueRange\":{\"min\":2.4924813165921322,\"max\":37.14829971385317},\"unit\":\"MilliCores\"}")
            .toObject(Performance.class);
        Assertions.assertEquals("bpf", model.metricName());
        Assertions.assertEquals(5.98797419739574D, model.expected());
        Assertions.assertEquals(52.25217379811007D, model.actual());
        Assertions.assertEquals(2.4924813165921322, model.expectedValueRange().min());
        Assertions.assertEquals(37.14829971385317, model.expectedValueRange().max());
        Assertions.assertEquals(MetricUnit.MILLI_CORES, model.unit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Performance model = new Performance().withMetricName("bpf")
            .withExpected(5.98797419739574D)
            .withActual(52.25217379811007D)
            .withExpectedValueRange(new ExpectedValueRange().withMin(2.4924813165921322).withMax(37.14829971385317))
            .withUnit(MetricUnit.MILLI_CORES);
        model = BinaryData.fromObject(model).toObject(Performance.class);
        Assertions.assertEquals("bpf", model.metricName());
        Assertions.assertEquals(5.98797419739574D, model.expected());
        Assertions.assertEquals(52.25217379811007D, model.actual());
        Assertions.assertEquals(2.4924813165921322, model.expectedValueRange().min());
        Assertions.assertEquals(37.14829971385317, model.expectedValueRange().max());
        Assertions.assertEquals(MetricUnit.MILLI_CORES, model.unit());
    }
}
