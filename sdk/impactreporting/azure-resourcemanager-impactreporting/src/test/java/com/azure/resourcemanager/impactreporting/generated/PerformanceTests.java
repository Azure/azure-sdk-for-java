// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.impactreporting.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.impactreporting.models.ExpectedValueRange;
import com.azure.resourcemanager.impactreporting.models.MetricUnit;
import com.azure.resourcemanager.impactreporting.models.Performance;
import org.junit.jupiter.api.Assertions;

public final class PerformanceTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Performance model = BinaryData.fromString(
            "{\"metricName\":\"xaolth\",\"expected\":84.89547912335365,\"actual\":14.134109255164462,\"expectedValueRange\":{\"min\":3.243842052228818,\"max\":95.85514226537904},\"unit\":\"Count\"}")
            .toObject(Performance.class);
        Assertions.assertEquals("xaolth", model.metricName());
        Assertions.assertEquals(84.89547912335365D, model.expected());
        Assertions.assertEquals(14.134109255164462D, model.actual());
        Assertions.assertEquals(3.243842052228818, model.expectedValueRange().min());
        Assertions.assertEquals(95.85514226537904, model.expectedValueRange().max());
        Assertions.assertEquals(MetricUnit.COUNT, model.unit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Performance model = new Performance().withMetricName("xaolth")
            .withExpected(84.89547912335365D)
            .withActual(14.134109255164462D)
            .withExpectedValueRange(new ExpectedValueRange().withMin(3.243842052228818).withMax(95.85514226537904))
            .withUnit(MetricUnit.COUNT);
        model = BinaryData.fromObject(model).toObject(Performance.class);
        Assertions.assertEquals("xaolth", model.metricName());
        Assertions.assertEquals(84.89547912335365D, model.expected());
        Assertions.assertEquals(14.134109255164462D, model.actual());
        Assertions.assertEquals(3.243842052228818, model.expectedValueRange().min());
        Assertions.assertEquals(95.85514226537904, model.expectedValueRange().max());
        Assertions.assertEquals(MetricUnit.COUNT, model.unit());
    }
}
