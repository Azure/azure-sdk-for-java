// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.peering.PeeringManager;
import com.azure.resourcemanager.peering.models.DirectPeeringType;
import com.azure.resourcemanager.peering.models.Family;
import com.azure.resourcemanager.peering.models.Kind;
import com.azure.resourcemanager.peering.models.Peering;
import com.azure.resourcemanager.peering.models.SessionAddressProvider;
import com.azure.resourcemanager.peering.models.Size;
import com.azure.resourcemanager.peering.models.Tier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PeeringsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"plcrpwjxeznoig\",\"tier\":\"Premium\",\"family\":\"Direct\",\"size\":\"Metered\"},\"kind\":\"Direct\",\"properties\":{\"direct\":{\"connections\":[{\"bandwidthInMbps\":1716189852,\"provisionedBandwidthInMbps\":1901897096,\"sessionAddressProvider\":\"Microsoft\",\"useForPeeringService\":true,\"microsoftTrackingId\":\"gfhsxttaugzxn\",\"peeringDBFacilityId\":1764275997,\"connectionState\":\"ProvisioningFailed\",\"bgpSession\":{},\"connectionIdentifier\":\"tnkdmkqj\",\"errorMessage\":\"wuenvr\"}],\"useForPeeringService\":false,\"peerAsn\":{\"id\":\"aibrebqaaysjkixq\"},\"directPeeringType\":\"IxRs\"},\"exchange\":{\"connections\":[{\"peeringDBFacilityId\":1501575035,\"connectionState\":\"Approved\",\"bgpSession\":{},\"connectionIdentifier\":\"iakp\",\"errorMessage\":\"qqmtedltmmji\"}],\"peerAsn\":{\"id\":\"ozphvwauyqncygu\"}},\"peeringLocation\":\"vipmdscwxqupevzh\",\"provisioningState\":\"Deleting\"},\"location\":\"otxhojujby\",\"tags\":{\"vhixbjxy\":\"mc\",\"yl\":\"w\",\"ujrywvtyl\":\"coolsttpkiwkkb\"},\"id\":\"fpncurdo\",\"name\":\"wiithtywub\",\"type\":\"cbihwqk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PeeringManager manager = PeeringManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Peering> response
            = manager.peerings().listByResourceGroup("elfk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("plcrpwjxeznoig", response.iterator().next().sku().name());
        Assertions.assertEquals(Tier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals(Family.DIRECT, response.iterator().next().sku().family());
        Assertions.assertEquals(Size.METERED, response.iterator().next().sku().size());
        Assertions.assertEquals(Kind.DIRECT, response.iterator().next().kind());
        Assertions.assertEquals("otxhojujby", response.iterator().next().location());
        Assertions.assertEquals("mc", response.iterator().next().tags().get("vhixbjxy"));
        Assertions.assertEquals(1716189852, response.iterator().next().direct().connections().get(0).bandwidthInMbps());
        Assertions.assertEquals(SessionAddressProvider.MICROSOFT,
            response.iterator().next().direct().connections().get(0).sessionAddressProvider());
        Assertions.assertEquals(true, response.iterator().next().direct().connections().get(0).useForPeeringService());
        Assertions.assertEquals(1764275997,
            response.iterator().next().direct().connections().get(0).peeringDBFacilityId());
        Assertions.assertEquals("tnkdmkqj",
            response.iterator().next().direct().connections().get(0).connectionIdentifier());
        Assertions.assertEquals("aibrebqaaysjkixq", response.iterator().next().direct().peerAsn().id());
        Assertions.assertEquals(DirectPeeringType.IX_RS, response.iterator().next().direct().directPeeringType());
        Assertions.assertEquals(1501575035,
            response.iterator().next().exchange().connections().get(0).peeringDBFacilityId());
        Assertions.assertEquals("iakp",
            response.iterator().next().exchange().connections().get(0).connectionIdentifier());
        Assertions.assertEquals("ozphvwauyqncygu", response.iterator().next().exchange().peerAsn().id());
        Assertions.assertEquals("vipmdscwxqupevzh", response.iterator().next().peeringLocation());
    }
}
