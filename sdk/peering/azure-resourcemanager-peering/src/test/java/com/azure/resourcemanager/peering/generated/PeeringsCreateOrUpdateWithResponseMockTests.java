// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.peering.PeeringManager;
import com.azure.resourcemanager.peering.models.DirectPeeringType;
import com.azure.resourcemanager.peering.models.Family;
import com.azure.resourcemanager.peering.models.Kind;
import com.azure.resourcemanager.peering.models.Peering;
import com.azure.resourcemanager.peering.models.PeeringPropertiesDirect;
import com.azure.resourcemanager.peering.models.PeeringPropertiesExchange;
import com.azure.resourcemanager.peering.models.PeeringSku;
import com.azure.resourcemanager.peering.models.Size;
import com.azure.resourcemanager.peering.models.Tier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PeeringsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"name\":\"cybxa\",\"tier\":\"Premium\",\"family\":\"Direct\",\"size\":\"Unlimited\"},\"kind\":\"Exchange\",\"properties\":{\"direct\":{\"connections\":[],\"useForPeeringService\":true,\"directPeeringType\":\"Ix\"},\"exchange\":{\"connections\":[]},\"peeringLocation\":\"iodhkhazxkhnz\",\"provisioningState\":\"Updating\"},\"location\":\"lwntoego\",\"tags\":{\"szzcmrvexztv\":\"bwh\"},\"id\":\"t\",\"name\":\"gsfraoyzkoow\",\"type\":\"lmnguxaw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        PeeringManager manager =
            PeeringManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        Peering response =
            manager
                .peerings()
                .define("mr")
                .withRegion("juetaebur")
                .withExistingResourceGroup("udutnco")
                .withSku(
                    new PeeringSku()
                        .withName("qtvcofudflvkgj")
                        .withTier(Tier.BASIC)
                        .withFamily(Family.EXCHANGE)
                        .withSize(Size.UNLIMITED))
                .withKind(Kind.EXCHANGE)
                .withTags(mapOf("kif", "movsmzlxwabmqoe", "btndo", "vtpuqujmqlgk"))
                .withDirect(
                    new PeeringPropertiesDirect()
                        .withConnections(Arrays.asList())
                        .withDirectPeeringType(DirectPeeringType.INTERNAL))
                .withExchange(new PeeringPropertiesExchange().withConnections(Arrays.asList()))
                .withPeeringLocation("sgsahmkycgr")
                .create();

        Assertions.assertEquals("cybxa", response.sku().name());
        Assertions.assertEquals(Tier.PREMIUM, response.sku().tier());
        Assertions.assertEquals(Family.DIRECT, response.sku().family());
        Assertions.assertEquals(Size.UNLIMITED, response.sku().size());
        Assertions.assertEquals(Kind.EXCHANGE, response.kind());
        Assertions.assertEquals("lwntoego", response.location());
        Assertions.assertEquals("bwh", response.tags().get("szzcmrvexztv"));
        Assertions.assertEquals(DirectPeeringType.IX, response.direct().directPeeringType());
        Assertions.assertEquals("iodhkhazxkhnz", response.peeringLocation());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
