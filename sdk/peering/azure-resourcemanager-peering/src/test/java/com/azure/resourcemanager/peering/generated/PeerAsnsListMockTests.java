// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.peering.PeeringManager;
import com.azure.resourcemanager.peering.models.PeerAsn;
import com.azure.resourcemanager.peering.models.Role;
import com.azure.resourcemanager.peering.models.ValidationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PeerAsnsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"peerAsn\":411799174,\"peerContactDetail\":[{\"role\":\"Technical\",\"email\":\"olmncwsobqwcs\",\"phone\":\"nwdcfhu\"},{\"role\":\"Technical\",\"email\":\"fuvglsbjjca\",\"phone\":\"xbvtvudu\"},{\"role\":\"Policy\",\"email\":\"rmrlxqtvcof\",\"phone\":\"f\"}],\"peerName\":\"kgjubgdknnqvsazn\",\"validationState\":\"None\",\"errorMessage\":\"rudsg\"},\"id\":\"a\",\"name\":\"mkycgra\",\"type\":\"wjue\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PeeringManager manager = PeeringManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PeerAsn> response = manager.peerAsns().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals(411799174, response.iterator().next().peerAsn());
        Assertions.assertEquals(Role.TECHNICAL, response.iterator().next().peerContactDetail().get(0).role());
        Assertions.assertEquals("olmncwsobqwcs", response.iterator().next().peerContactDetail().get(0).email());
        Assertions.assertEquals("nwdcfhu", response.iterator().next().peerContactDetail().get(0).phone());
        Assertions.assertEquals("kgjubgdknnqvsazn", response.iterator().next().peerName());
        Assertions.assertEquals(ValidationState.NONE, response.iterator().next().validationState());
    }
}
