// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.peering.fluent.models.PeeringServiceInner;
import com.azure.resourcemanager.peering.models.PeeringServiceListResult;
import com.azure.resourcemanager.peering.models.PeeringServiceSku;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PeeringServiceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PeeringServiceListResult model = BinaryData.fromString(
            "{\"value\":[{\"sku\":{\"name\":\"ipfpubji\"},\"properties\":{\"peeringServiceLocation\":\"iftohqkvpu\",\"peeringServiceProvider\":\"sgplsakn\",\"provisioningState\":\"Deleting\",\"providerPrimaryPeeringLocation\":\"ynl\",\"providerBackupPeeringLocation\":\"huopxodlqiynto\"},\"location\":\"zihleosjswsr\",\"tags\":{\"ox\":\"yzrpzbchckqqzq\",\"rwyhqmibzyhwitsm\":\"ysuiizynkedya\",\"pcdpumnz\":\"pyy\",\"abikns\":\"mwzn\"},\"id\":\"rgjhxb\",\"name\":\"dtlwwrlkd\",\"type\":\"tncvokot\"}],\"nextLink\":\"xdy\"}")
            .toObject(PeeringServiceListResult.class);
        Assertions.assertEquals("ipfpubji", model.value().get(0).sku().name());
        Assertions.assertEquals("zihleosjswsr", model.value().get(0).location());
        Assertions.assertEquals("yzrpzbchckqqzq", model.value().get(0).tags().get("ox"));
        Assertions.assertEquals("iftohqkvpu", model.value().get(0).peeringServiceLocation());
        Assertions.assertEquals("sgplsakn", model.value().get(0).peeringServiceProvider());
        Assertions.assertEquals("ynl", model.value().get(0).providerPrimaryPeeringLocation());
        Assertions.assertEquals("huopxodlqiynto", model.value().get(0).providerBackupPeeringLocation());
        Assertions.assertEquals("xdy", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PeeringServiceListResult model = new PeeringServiceListResult()
            .withValue(Arrays.asList(new PeeringServiceInner().withSku(new PeeringServiceSku().withName("ipfpubji"))
                .withLocation("zihleosjswsr")
                .withTags(mapOf("ox", "yzrpzbchckqqzq", "rwyhqmibzyhwitsm", "ysuiizynkedya", "pcdpumnz", "pyy",
                    "abikns", "mwzn"))
                .withPeeringServiceLocation("iftohqkvpu")
                .withPeeringServiceProvider("sgplsakn")
                .withProviderPrimaryPeeringLocation("ynl")
                .withProviderBackupPeeringLocation("huopxodlqiynto")))
            .withNextLink("xdy");
        model = BinaryData.fromObject(model).toObject(PeeringServiceListResult.class);
        Assertions.assertEquals("ipfpubji", model.value().get(0).sku().name());
        Assertions.assertEquals("zihleosjswsr", model.value().get(0).location());
        Assertions.assertEquals("yzrpzbchckqqzq", model.value().get(0).tags().get("ox"));
        Assertions.assertEquals("iftohqkvpu", model.value().get(0).peeringServiceLocation());
        Assertions.assertEquals("sgplsakn", model.value().get(0).peeringServiceProvider());
        Assertions.assertEquals("ynl", model.value().get(0).providerPrimaryPeeringLocation());
        Assertions.assertEquals("huopxodlqiynto", model.value().get(0).providerBackupPeeringLocation());
        Assertions.assertEquals("xdy", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
