// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.peering.PeeringManager;
import com.azure.resourcemanager.peering.models.DirectPeeringType;
import com.azure.resourcemanager.peering.models.Family;
import com.azure.resourcemanager.peering.models.Kind;
import com.azure.resourcemanager.peering.models.LegacyPeeringsKind;
import com.azure.resourcemanager.peering.models.Peering;
import com.azure.resourcemanager.peering.models.SessionAddressProvider;
import com.azure.resourcemanager.peering.models.Size;
import com.azure.resourcemanager.peering.models.Tier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LegacyPeeringsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"ealmfmtdaaygdvwv\",\"tier\":\"Premium\",\"family\":\"Exchange\",\"size\":\"Free\"},\"kind\":\"Exchange\",\"properties\":{\"direct\":{\"connections\":[{\"bandwidthInMbps\":1401740843,\"provisionedBandwidthInMbps\":999653937,\"sessionAddressProvider\":\"Peer\",\"useForPeeringService\":false,\"microsoftTrackingId\":\"gvr\",\"peeringDBFacilityId\":1104557585,\"connectionState\":\"None\",\"bgpSession\":{},\"connectionIdentifier\":\"ghimdblx\",\"errorMessage\":\"imfnjhfjx\"},{\"bandwidthInMbps\":205109580,\"provisionedBandwidthInMbps\":1343784830,\"sessionAddressProvider\":\"Peer\",\"useForPeeringService\":false,\"microsoftTrackingId\":\"eyfkzikfja\",\"peeringDBFacilityId\":398738394,\"connectionState\":\"PendingApproval\",\"bgpSession\":{},\"connectionIdentifier\":\"wczelpci\",\"errorMessage\":\"lsfeaenwabfatkld\"},{\"bandwidthInMbps\":2043314878,\"provisionedBandwidthInMbps\":1025445351,\"sessionAddressProvider\":\"Peer\",\"useForPeeringService\":false,\"microsoftTrackingId\":\"oz\",\"peeringDBFacilityId\":1294061553,\"connectionState\":\"ProvisioningStarted\",\"bgpSession\":{},\"connectionIdentifier\":\"ulpjr\",\"errorMessage\":\"ag\"}],\"useForPeeringService\":false,\"peerAsn\":{\"id\":\"jwosytxitcskfck\"},\"directPeeringType\":\"Internal\"},\"exchange\":{\"connections\":[{\"peeringDBFacilityId\":344446461,\"connectionState\":\"ProvisioningCompleted\",\"bgpSession\":{},\"connectionIdentifier\":\"khly\",\"errorMessage\":\"hdgqggeb\"},{\"peeringDBFacilityId\":1059730193,\"connectionState\":\"None\",\"bgpSession\":{},\"connectionIdentifier\":\"qidbqfatpxllrxcy\",\"errorMessage\":\"oadsuvar\"},{\"peeringDBFacilityId\":1301778060,\"connectionState\":\"Approved\",\"bgpSession\":{},\"connectionIdentifier\":\"jqbjhhy\",\"errorMessage\":\"rw\"},{\"peeringDBFacilityId\":324291601,\"connectionState\":\"Approved\",\"bgpSession\":{},\"connectionIdentifier\":\"p\",\"errorMessage\":\"kgymareqnajxqug\"}],\"peerAsn\":{\"id\":\"ycubeddgs\"}},\"peeringLocation\":\"fwqmzqalkrmn\",\"provisioningState\":\"Updating\"},\"location\":\"pxacqqudfn\",\"tags\":{\"jyvayffimrzrtuz\":\"baaa\",\"xnevfdnwn\":\"ogs\",\"uzsoi\":\"mewzsyyc\"},\"id\":\"judpfrxt\",\"name\":\"thzvaytdwkqbrqu\",\"type\":\"paxh\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PeeringManager manager = PeeringManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Peering> response = manager.legacyPeerings()
            .list("wq", LegacyPeeringsKind.DIRECT, 1018889547, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ealmfmtdaaygdvwv", response.iterator().next().sku().name());
        Assertions.assertEquals(Tier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals(Family.EXCHANGE, response.iterator().next().sku().family());
        Assertions.assertEquals(Size.FREE, response.iterator().next().sku().size());
        Assertions.assertEquals(Kind.EXCHANGE, response.iterator().next().kind());
        Assertions.assertEquals("pxacqqudfn", response.iterator().next().location());
        Assertions.assertEquals("baaa", response.iterator().next().tags().get("jyvayffimrzrtuz"));
        Assertions.assertEquals(1401740843, response.iterator().next().direct().connections().get(0).bandwidthInMbps());
        Assertions.assertEquals(SessionAddressProvider.PEER,
            response.iterator().next().direct().connections().get(0).sessionAddressProvider());
        Assertions.assertEquals(false, response.iterator().next().direct().connections().get(0).useForPeeringService());
        Assertions.assertEquals(1104557585,
            response.iterator().next().direct().connections().get(0).peeringDBFacilityId());
        Assertions.assertEquals("ghimdblx",
            response.iterator().next().direct().connections().get(0).connectionIdentifier());
        Assertions.assertEquals("jwosytxitcskfck", response.iterator().next().direct().peerAsn().id());
        Assertions.assertEquals(DirectPeeringType.INTERNAL, response.iterator().next().direct().directPeeringType());
        Assertions.assertEquals(344446461,
            response.iterator().next().exchange().connections().get(0).peeringDBFacilityId());
        Assertions.assertEquals("khly",
            response.iterator().next().exchange().connections().get(0).connectionIdentifier());
        Assertions.assertEquals("ycubeddgs", response.iterator().next().exchange().peerAsn().id());
        Assertions.assertEquals("fwqmzqalkrmn", response.iterator().next().peeringLocation());
    }
}
