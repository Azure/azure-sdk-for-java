// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.peering.PeeringManager;
import com.azure.resourcemanager.peering.models.PeeringService;
import com.azure.resourcemanager.peering.models.PeeringServiceSku;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PeeringServicesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"gmvecactxmw\"},\"properties\":{\"peeringServiceLocation\":\"yowc\",\"peeringServiceProvider\":\"qovekqvgqou\",\"provisioningState\":\"Deleting\",\"providerPrimaryPeeringLocation\":\"mpjw\",\"providerBackupPeeringLocation\":\"vqikfxcvhrfsphu\"},\"location\":\"grttikteusqczk\",\"tags\":{\"ff\":\"lxubyj\",\"ibrta\":\"mfblcqcuubg\"},\"id\":\"metttwgd\",\"name\":\"lqxihhrmooiz\",\"type\":\"seypxiutcxapz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PeeringManager manager = PeeringManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PeeringService response = manager.peeringServices()
            .define("mieknlraria")
            .withRegion("kb")
            .withExistingResourceGroup("vodggxdbee")
            .withTags(mapOf("pe", "jqctojcmisofie"))
            .withSku(new PeeringServiceSku().withName("uagydwqfbylyrf"))
            .withPeeringServiceLocation("gtcojocqwo")
            .withPeeringServiceProvider("nzjvusfzldm")
            .withProviderPrimaryPeeringLocation("ylfsbtk")
            .withProviderBackupPeeringLocation("pysownbt")
            .create();

        Assertions.assertEquals("gmvecactxmw", response.sku().name());
        Assertions.assertEquals("grttikteusqczk", response.location());
        Assertions.assertEquals("lxubyj", response.tags().get("ff"));
        Assertions.assertEquals("yowc", response.peeringServiceLocation());
        Assertions.assertEquals("qovekqvgqou", response.peeringServiceProvider());
        Assertions.assertEquals("mpjw", response.providerPrimaryPeeringLocation());
        Assertions.assertEquals("vqikfxcvhrfsphu", response.providerBackupPeeringLocation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
