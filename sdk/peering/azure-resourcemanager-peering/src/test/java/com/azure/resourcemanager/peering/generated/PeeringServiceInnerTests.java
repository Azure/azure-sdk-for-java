// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.peering.fluent.models.PeeringServiceInner;
import com.azure.resourcemanager.peering.models.PeeringServiceSku;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PeeringServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PeeringServiceInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"rjxgciqib\"},\"properties\":{\"peeringServiceLocation\":\"sxsdqrhzoymibm\",\"peeringServiceProvider\":\"yiba\",\"provisioningState\":\"Updating\",\"providerPrimaryPeeringLocation\":\"uszdtmhrkwof\",\"providerBackupPeeringLocation\":\"voqacpiexpbt\"},\"location\":\"iwbwoenwashrtdtk\",\"tags\":{\"aasipqi\":\"xwbpokulpiuj\",\"erpqlpqwcciuqg\":\"obyu\",\"hykojoxafnndlpic\":\"dbutauvfbtkuwhh\"},\"id\":\"koymkcd\",\"name\":\"h\",\"type\":\"pkkpw\"}")
            .toObject(PeeringServiceInner.class);
        Assertions.assertEquals("rjxgciqib", model.sku().name());
        Assertions.assertEquals("iwbwoenwashrtdtk", model.location());
        Assertions.assertEquals("xwbpokulpiuj", model.tags().get("aasipqi"));
        Assertions.assertEquals("sxsdqrhzoymibm", model.peeringServiceLocation());
        Assertions.assertEquals("yiba", model.peeringServiceProvider());
        Assertions.assertEquals("uszdtmhrkwof", model.providerPrimaryPeeringLocation());
        Assertions.assertEquals("voqacpiexpbt", model.providerBackupPeeringLocation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PeeringServiceInner model = new PeeringServiceInner().withSku(new PeeringServiceSku().withName("rjxgciqib"))
            .withLocation("iwbwoenwashrtdtk")
            .withTags(mapOf("aasipqi", "xwbpokulpiuj", "erpqlpqwcciuqg", "obyu", "hykojoxafnndlpic", "dbutauvfbtkuwhh"))
            .withPeeringServiceLocation("sxsdqrhzoymibm")
            .withPeeringServiceProvider("yiba")
            .withProviderPrimaryPeeringLocation("uszdtmhrkwof")
            .withProviderBackupPeeringLocation("voqacpiexpbt");
        model = BinaryData.fromObject(model).toObject(PeeringServiceInner.class);
        Assertions.assertEquals("rjxgciqib", model.sku().name());
        Assertions.assertEquals("iwbwoenwashrtdtk", model.location());
        Assertions.assertEquals("xwbpokulpiuj", model.tags().get("aasipqi"));
        Assertions.assertEquals("sxsdqrhzoymibm", model.peeringServiceLocation());
        Assertions.assertEquals("yiba", model.peeringServiceProvider());
        Assertions.assertEquals("uszdtmhrkwof", model.providerPrimaryPeeringLocation());
        Assertions.assertEquals("voqacpiexpbt", model.providerBackupPeeringLocation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
