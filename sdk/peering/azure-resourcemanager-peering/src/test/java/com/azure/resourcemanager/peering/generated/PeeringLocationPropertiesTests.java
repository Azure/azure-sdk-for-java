// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.peering.fluent.models.PeeringLocationProperties;
import com.azure.resourcemanager.peering.models.DirectPeeringFacility;
import com.azure.resourcemanager.peering.models.DirectPeeringType;
import com.azure.resourcemanager.peering.models.ExchangePeeringFacility;
import com.azure.resourcemanager.peering.models.PeeringBandwidthOffer;
import com.azure.resourcemanager.peering.models.PeeringLocationPropertiesDirect;
import com.azure.resourcemanager.peering.models.PeeringLocationPropertiesExchange;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PeeringLocationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PeeringLocationProperties model = BinaryData.fromString(
            "{\"direct\":{\"peeringFacilities\":[{\"address\":\"xjvuujqgidokg\",\"directPeeringType\":\"Ix\",\"peeringDBFacilityId\":1769769453,\"peeringDBFacilityLink\":\"gvcl\"}],\"bandwidthOffers\":[{\"offerName\":\"ncghkje\",\"valueInMbps\":279046587},{\"offerName\":\"bijhtxfvgxbf\",\"valueInMbps\":195417612},{\"offerName\":\"eh\",\"valueInMbps\":1229145222}]},\"exchange\":{\"peeringFacilities\":[{\"exchangeName\":\"odebfqkkrbmpu\",\"bandwidthInMbps\":175699877,\"microsoftIPv4Address\":\"wflzlfbxzpuzy\",\"microsoftIPv6Address\":\"spnqzahmgkb\",\"facilityIPv4Prefix\":\"yydhibnuqqk\",\"facilityIPv6Prefix\":\"kadrgvt\",\"peeringDBFacilityId\":1163936229,\"peeringDBFacilityLink\":\"buynhijggm\"},{\"exchangeName\":\"fsiarbutr\",\"bandwidthInMbps\":1477198207,\"microsoftIPv4Address\":\"azzmhjrunmpxt\",\"microsoftIPv6Address\":\"bh\",\"facilityIPv4Prefix\":\"nlankxmyskpb\",\"facilityIPv6Prefix\":\"nbtkcxywnytnr\",\"peeringDBFacilityId\":815551540,\"peeringDBFacilityLink\":\"qidybyx\"},{\"exchangeName\":\"fclhaaxdbabphlwr\",\"bandwidthInMbps\":818210611,\"microsoftIPv4Address\":\"tsthsucocm\",\"microsoftIPv6Address\":\"yazttbtwwrqpue\",\"facilityIPv4Prefix\":\"kzywbiex\",\"facilityIPv6Prefix\":\"eyueaxibxujwb\",\"peeringDBFacilityId\":913520848,\"peeringDBFacilityLink\":\"lmuzy\"},{\"exchangeName\":\"aepdkzjanc\",\"bandwidthInMbps\":901682674,\"microsoftIPv4Address\":\"d\",\"microsoftIPv6Address\":\"avxbniwdjswztsdb\",\"facilityIPv4Prefix\":\"nxytxh\",\"facilityIPv6Prefix\":\"xbzpfzab\",\"peeringDBFacilityId\":687811406,\"peeringDBFacilityLink\":\"hxw\"}]},\"peeringLocation\":\"tyq\",\"country\":\"lbbovplw\",\"azureRegion\":\"hvgyuguosvmk\"}")
            .toObject(PeeringLocationProperties.class);
        Assertions.assertEquals("xjvuujqgidokg", model.direct().peeringFacilities().get(0).address());
        Assertions.assertEquals(DirectPeeringType.IX, model.direct().peeringFacilities().get(0).directPeeringType());
        Assertions.assertEquals(1769769453, model.direct().peeringFacilities().get(0).peeringDBFacilityId());
        Assertions.assertEquals("gvcl", model.direct().peeringFacilities().get(0).peeringDBFacilityLink());
        Assertions.assertEquals("ncghkje", model.direct().bandwidthOffers().get(0).offerName());
        Assertions.assertEquals(279046587, model.direct().bandwidthOffers().get(0).valueInMbps());
        Assertions.assertEquals("odebfqkkrbmpu", model.exchange().peeringFacilities().get(0).exchangeName());
        Assertions.assertEquals(175699877, model.exchange().peeringFacilities().get(0).bandwidthInMbps());
        Assertions.assertEquals("wflzlfbxzpuzy", model.exchange().peeringFacilities().get(0).microsoftIPv4Address());
        Assertions.assertEquals("spnqzahmgkb", model.exchange().peeringFacilities().get(0).microsoftIPv6Address());
        Assertions.assertEquals("yydhibnuqqk", model.exchange().peeringFacilities().get(0).facilityIPv4Prefix());
        Assertions.assertEquals("kadrgvt", model.exchange().peeringFacilities().get(0).facilityIPv6Prefix());
        Assertions.assertEquals(1163936229, model.exchange().peeringFacilities().get(0).peeringDBFacilityId());
        Assertions.assertEquals("buynhijggm", model.exchange().peeringFacilities().get(0).peeringDBFacilityLink());
        Assertions.assertEquals("tyq", model.peeringLocation());
        Assertions.assertEquals("lbbovplw", model.country());
        Assertions.assertEquals("hvgyuguosvmk", model.azureRegion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PeeringLocationProperties model = new PeeringLocationProperties()
            .withDirect(new PeeringLocationPropertiesDirect()
                .withPeeringFacilities(Arrays.asList(new DirectPeeringFacility().withAddress("xjvuujqgidokg")
                    .withDirectPeeringType(DirectPeeringType.IX)
                    .withPeeringDBFacilityId(1769769453)
                    .withPeeringDBFacilityLink("gvcl")))
                .withBandwidthOffers(
                    Arrays.asList(new PeeringBandwidthOffer().withOfferName("ncghkje").withValueInMbps(279046587),
                        new PeeringBandwidthOffer().withOfferName("bijhtxfvgxbf").withValueInMbps(195417612),
                        new PeeringBandwidthOffer().withOfferName("eh").withValueInMbps(1229145222))))
            .withExchange(new PeeringLocationPropertiesExchange().withPeeringFacilities(Arrays.asList(
                new ExchangePeeringFacility().withExchangeName("odebfqkkrbmpu")
                    .withBandwidthInMbps(175699877)
                    .withMicrosoftIPv4Address("wflzlfbxzpuzy")
                    .withMicrosoftIPv6Address("spnqzahmgkb")
                    .withFacilityIPv4Prefix("yydhibnuqqk")
                    .withFacilityIPv6Prefix("kadrgvt")
                    .withPeeringDBFacilityId(1163936229)
                    .withPeeringDBFacilityLink("buynhijggm"),
                new ExchangePeeringFacility().withExchangeName("fsiarbutr")
                    .withBandwidthInMbps(1477198207)
                    .withMicrosoftIPv4Address("azzmhjrunmpxt")
                    .withMicrosoftIPv6Address("bh")
                    .withFacilityIPv4Prefix("nlankxmyskpb")
                    .withFacilityIPv6Prefix("nbtkcxywnytnr")
                    .withPeeringDBFacilityId(815551540)
                    .withPeeringDBFacilityLink("qidybyx"),
                new ExchangePeeringFacility().withExchangeName("fclhaaxdbabphlwr")
                    .withBandwidthInMbps(818210611)
                    .withMicrosoftIPv4Address("tsthsucocm")
                    .withMicrosoftIPv6Address("yazttbtwwrqpue")
                    .withFacilityIPv4Prefix("kzywbiex")
                    .withFacilityIPv6Prefix("eyueaxibxujwb")
                    .withPeeringDBFacilityId(913520848)
                    .withPeeringDBFacilityLink("lmuzy"),
                new ExchangePeeringFacility().withExchangeName("aepdkzjanc")
                    .withBandwidthInMbps(901682674)
                    .withMicrosoftIPv4Address("d")
                    .withMicrosoftIPv6Address("avxbniwdjswztsdb")
                    .withFacilityIPv4Prefix("nxytxh")
                    .withFacilityIPv6Prefix("xbzpfzab")
                    .withPeeringDBFacilityId(687811406)
                    .withPeeringDBFacilityLink("hxw"))))
            .withPeeringLocation("tyq")
            .withCountry("lbbovplw")
            .withAzureRegion("hvgyuguosvmk");
        model = BinaryData.fromObject(model).toObject(PeeringLocationProperties.class);
        Assertions.assertEquals("xjvuujqgidokg", model.direct().peeringFacilities().get(0).address());
        Assertions.assertEquals(DirectPeeringType.IX, model.direct().peeringFacilities().get(0).directPeeringType());
        Assertions.assertEquals(1769769453, model.direct().peeringFacilities().get(0).peeringDBFacilityId());
        Assertions.assertEquals("gvcl", model.direct().peeringFacilities().get(0).peeringDBFacilityLink());
        Assertions.assertEquals("ncghkje", model.direct().bandwidthOffers().get(0).offerName());
        Assertions.assertEquals(279046587, model.direct().bandwidthOffers().get(0).valueInMbps());
        Assertions.assertEquals("odebfqkkrbmpu", model.exchange().peeringFacilities().get(0).exchangeName());
        Assertions.assertEquals(175699877, model.exchange().peeringFacilities().get(0).bandwidthInMbps());
        Assertions.assertEquals("wflzlfbxzpuzy", model.exchange().peeringFacilities().get(0).microsoftIPv4Address());
        Assertions.assertEquals("spnqzahmgkb", model.exchange().peeringFacilities().get(0).microsoftIPv6Address());
        Assertions.assertEquals("yydhibnuqqk", model.exchange().peeringFacilities().get(0).facilityIPv4Prefix());
        Assertions.assertEquals("kadrgvt", model.exchange().peeringFacilities().get(0).facilityIPv6Prefix());
        Assertions.assertEquals(1163936229, model.exchange().peeringFacilities().get(0).peeringDBFacilityId());
        Assertions.assertEquals("buynhijggm", model.exchange().peeringFacilities().get(0).peeringDBFacilityLink());
        Assertions.assertEquals("tyq", model.peeringLocation());
        Assertions.assertEquals("lbbovplw", model.country());
        Assertions.assertEquals("hvgyuguosvmk", model.azureRegion());
    }
}
