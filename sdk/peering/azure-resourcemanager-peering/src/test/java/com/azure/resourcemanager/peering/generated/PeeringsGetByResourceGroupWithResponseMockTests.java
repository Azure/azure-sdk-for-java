// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.peering.PeeringManager;
import com.azure.resourcemanager.peering.models.DirectPeeringType;
import com.azure.resourcemanager.peering.models.Family;
import com.azure.resourcemanager.peering.models.Kind;
import com.azure.resourcemanager.peering.models.Peering;
import com.azure.resourcemanager.peering.models.SessionAddressProvider;
import com.azure.resourcemanager.peering.models.Size;
import com.azure.resourcemanager.peering.models.Tier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PeeringsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"fwynwcvtbvkay\",\"tier\":\"Premium\",\"family\":\"Direct\",\"size\":\"Free\"},\"kind\":\"Exchange\",\"properties\":{\"direct\":{\"connections\":[{\"bandwidthInMbps\":887205376,\"provisionedBandwidthInMbps\":108562460,\"sessionAddressProvider\":\"Peer\",\"useForPeeringService\":true,\"microsoftTrackingId\":\"a\",\"peeringDBFacilityId\":869640496,\"connectionState\":\"None\",\"bgpSession\":{},\"connectionIdentifier\":\"cyajguqf\",\"errorMessage\":\"ygz\"},{\"bandwidthInMbps\":1249464934,\"provisionedBandwidthInMbps\":826622083,\"sessionAddressProvider\":\"Microsoft\",\"useForPeeringService\":true,\"microsoftTrackingId\":\"mdwzrmuhapfcqdps\",\"peeringDBFacilityId\":399879139,\"connectionState\":\"ProvisioningFailed\",\"bgpSession\":{},\"connectionIdentifier\":\"uoymgccelvezry\",\"errorMessage\":\"lmfeokerq\"},{\"bandwidthInMbps\":835251373,\"provisionedBandwidthInMbps\":137094818,\"sessionAddressProvider\":\"Peer\",\"useForPeeringService\":false,\"microsoftTrackingId\":\"xedk\",\"peeringDBFacilityId\":615107136,\"connectionState\":\"PendingApproval\",\"bgpSession\":{},\"connectionIdentifier\":\"cr\",\"errorMessage\":\"bwccsnjvcdwxlpqe\"},{\"bandwidthInMbps\":426754390,\"provisionedBandwidthInMbps\":839437170,\"sessionAddressProvider\":\"Microsoft\",\"useForPeeringService\":true,\"microsoftTrackingId\":\"i\",\"peeringDBFacilityId\":2104302004,\"connectionState\":\"ProvisioningCompleted\",\"bgpSession\":{},\"connectionIdentifier\":\"mtdh\",\"errorMessage\":\"dvypgikdgsz\"}],\"useForPeeringService\":false,\"peerAsn\":{\"id\":\"rryuzhlhkjo\"},\"directPeeringType\":\"Voice\"},\"exchange\":{\"connections\":[{\"peeringDBFacilityId\":54237508,\"connectionState\":\"ProvisioningCompleted\",\"bgpSession\":{},\"connectionIdentifier\":\"vgoup\",\"errorMessage\":\"iibfggj\"},{\"peeringDBFacilityId\":1249202476,\"connectionState\":\"Approved\",\"bgpSession\":{},\"connectionIdentifier\":\"x\",\"errorMessage\":\"tkkgllqwjy\"},{\"peeringDBFacilityId\":104545862,\"connectionState\":\"ProvisioningFailed\",\"bgpSession\":{},\"connectionIdentifier\":\"lmhvkzuhbxv\",\"errorMessage\":\"hgsopbyrqufegx\"},{\"peeringDBFacilityId\":455492587,\"connectionState\":\"PendingApproval\",\"bgpSession\":{},\"connectionIdentifier\":\"hlmctlpdngitvgb\",\"errorMessage\":\"rixkwmyijejve\"}],\"peerAsn\":{\"id\":\"bpnaixexccbdre\"}},\"peeringLocation\":\"hcexdrrvqa\",\"provisioningState\":\"Deleting\"},\"location\":\"ghtpw\",\"tags\":{\"bfvoowvrv\":\"hyjsvfycx\",\"jqppyostronzmy\":\"t\"},\"id\":\"gfipnsxk\",\"name\":\"cwaekrrjre\",\"type\":\"fxtsgum\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PeeringManager manager = PeeringManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Peering response = manager.peerings()
            .getByResourceGroupWithResponse("phoszqz", "dphqamv", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fwynwcvtbvkay", response.sku().name());
        Assertions.assertEquals(Tier.PREMIUM, response.sku().tier());
        Assertions.assertEquals(Family.DIRECT, response.sku().family());
        Assertions.assertEquals(Size.FREE, response.sku().size());
        Assertions.assertEquals(Kind.EXCHANGE, response.kind());
        Assertions.assertEquals("ghtpw", response.location());
        Assertions.assertEquals("hyjsvfycx", response.tags().get("bfvoowvrv"));
        Assertions.assertEquals(887205376, response.direct().connections().get(0).bandwidthInMbps());
        Assertions.assertEquals(SessionAddressProvider.PEER,
            response.direct().connections().get(0).sessionAddressProvider());
        Assertions.assertEquals(true, response.direct().connections().get(0).useForPeeringService());
        Assertions.assertEquals(869640496, response.direct().connections().get(0).peeringDBFacilityId());
        Assertions.assertEquals("cyajguqf", response.direct().connections().get(0).connectionIdentifier());
        Assertions.assertEquals("rryuzhlhkjo", response.direct().peerAsn().id());
        Assertions.assertEquals(DirectPeeringType.VOICE, response.direct().directPeeringType());
        Assertions.assertEquals(54237508, response.exchange().connections().get(0).peeringDBFacilityId());
        Assertions.assertEquals("vgoup", response.exchange().connections().get(0).connectionIdentifier());
        Assertions.assertEquals("bpnaixexccbdre", response.exchange().peerAsn().id());
        Assertions.assertEquals("hcexdrrvqa", response.peeringLocation());
    }
}
