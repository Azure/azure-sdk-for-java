// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.peering.fluent.LookingGlassClient;
import com.azure.resourcemanager.peering.fluent.models.LookingGlassOutputInner;
import com.azure.resourcemanager.peering.models.LookingGlass;
import com.azure.resourcemanager.peering.models.LookingGlassCommand;
import com.azure.resourcemanager.peering.models.LookingGlassOutput;
import com.azure.resourcemanager.peering.models.LookingGlassSourceType;

public final class LookingGlassImpl implements LookingGlass {
    private static final ClientLogger LOGGER = new ClientLogger(LookingGlassImpl.class);

    private final LookingGlassClient innerClient;

    private final com.azure.resourcemanager.peering.PeeringManager serviceManager;

    public LookingGlassImpl(
        LookingGlassClient innerClient, com.azure.resourcemanager.peering.PeeringManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public LookingGlassOutput invoke(
        LookingGlassCommand command, LookingGlassSourceType sourceType, String sourceLocation, String destinationIp) {
        LookingGlassOutputInner inner = this.serviceClient().invoke(command, sourceType, sourceLocation, destinationIp);
        if (inner != null) {
            return new LookingGlassOutputImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<LookingGlassOutput> invokeWithResponse(
        LookingGlassCommand command,
        LookingGlassSourceType sourceType,
        String sourceLocation,
        String destinationIp,
        Context context) {
        Response<LookingGlassOutputInner> inner =
            this.serviceClient().invokeWithResponse(command, sourceType, sourceLocation, destinationIp, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new LookingGlassOutputImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private LookingGlassClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.peering.PeeringManager manager() {
        return this.serviceManager;
    }
}
