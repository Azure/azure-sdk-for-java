// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.io.IOException;

/**
 * The properties that define connectivity to the Peering Service.
 */
@Fluent
public final class PeeringServiceProperties implements JsonSerializable<PeeringServiceProperties> {
    /*
     * The location (state/province) of the customer.
     */
    private String peeringServiceLocation;

    /*
     * The name of the service provider.
     */
    private String peeringServiceProvider;

    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The primary peering (Microsoft/service provider) location to be used for customer traffic.
     */
    private String providerPrimaryPeeringLocation;

    /*
     * The backup peering (Microsoft/service provider) location to be used for customer traffic.
     */
    private String providerBackupPeeringLocation;

    /**
     * Creates an instance of PeeringServiceProperties class.
     */
    public PeeringServiceProperties() {
    }

    /**
     * Get the peeringServiceLocation property: The location (state/province) of the customer.
     * 
     * @return the peeringServiceLocation value.
     */
    public String peeringServiceLocation() {
        return this.peeringServiceLocation;
    }

    /**
     * Set the peeringServiceLocation property: The location (state/province) of the customer.
     * 
     * @param peeringServiceLocation the peeringServiceLocation value to set.
     * @return the PeeringServiceProperties object itself.
     */
    public PeeringServiceProperties withPeeringServiceLocation(String peeringServiceLocation) {
        this.peeringServiceLocation = peeringServiceLocation;
        return this;
    }

    /**
     * Get the peeringServiceProvider property: The name of the service provider.
     * 
     * @return the peeringServiceProvider value.
     */
    public String peeringServiceProvider() {
        return this.peeringServiceProvider;
    }

    /**
     * Set the peeringServiceProvider property: The name of the service provider.
     * 
     * @param peeringServiceProvider the peeringServiceProvider value to set.
     * @return the PeeringServiceProperties object itself.
     */
    public PeeringServiceProperties withPeeringServiceProvider(String peeringServiceProvider) {
        this.peeringServiceProvider = peeringServiceProvider;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the providerPrimaryPeeringLocation property: The primary peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @return the providerPrimaryPeeringLocation value.
     */
    public String providerPrimaryPeeringLocation() {
        return this.providerPrimaryPeeringLocation;
    }

    /**
     * Set the providerPrimaryPeeringLocation property: The primary peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @param providerPrimaryPeeringLocation the providerPrimaryPeeringLocation value to set.
     * @return the PeeringServiceProperties object itself.
     */
    public PeeringServiceProperties withProviderPrimaryPeeringLocation(String providerPrimaryPeeringLocation) {
        this.providerPrimaryPeeringLocation = providerPrimaryPeeringLocation;
        return this;
    }

    /**
     * Get the providerBackupPeeringLocation property: The backup peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @return the providerBackupPeeringLocation value.
     */
    public String providerBackupPeeringLocation() {
        return this.providerBackupPeeringLocation;
    }

    /**
     * Set the providerBackupPeeringLocation property: The backup peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @param providerBackupPeeringLocation the providerBackupPeeringLocation value to set.
     * @return the PeeringServiceProperties object itself.
     */
    public PeeringServiceProperties withProviderBackupPeeringLocation(String providerBackupPeeringLocation) {
        this.providerBackupPeeringLocation = providerBackupPeeringLocation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("peeringServiceLocation", this.peeringServiceLocation);
        jsonWriter.writeStringField("peeringServiceProvider", this.peeringServiceProvider);
        jsonWriter.writeStringField("providerPrimaryPeeringLocation", this.providerPrimaryPeeringLocation);
        jsonWriter.writeStringField("providerBackupPeeringLocation", this.providerBackupPeeringLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringServiceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeeringServiceProperties.
     */
    public static PeeringServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringServiceProperties deserializedPeeringServiceProperties = new PeeringServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peeringServiceLocation".equals(fieldName)) {
                    deserializedPeeringServiceProperties.peeringServiceLocation = reader.getString();
                } else if ("peeringServiceProvider".equals(fieldName)) {
                    deserializedPeeringServiceProperties.peeringServiceProvider = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPeeringServiceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("providerPrimaryPeeringLocation".equals(fieldName)) {
                    deserializedPeeringServiceProperties.providerPrimaryPeeringLocation = reader.getString();
                } else if ("providerBackupPeeringLocation".equals(fieldName)) {
                    deserializedPeeringServiceProperties.providerBackupPeeringLocation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringServiceProperties;
        });
    }
}
