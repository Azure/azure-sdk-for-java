// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.peering.fluent.LookingGlassClient;
import com.azure.resourcemanager.peering.fluent.models.LookingGlassOutputInner;
import com.azure.resourcemanager.peering.models.LookingGlassCommand;
import com.azure.resourcemanager.peering.models.LookingGlassSourceType;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in LookingGlassClient. */
public final class LookingGlassClientImpl implements LookingGlassClient {
    /** The proxy service used to perform REST calls. */
    private final LookingGlassService service;

    /** The service client containing this operation class. */
    private final PeeringManagementClientImpl client;

    /**
     * Initializes an instance of LookingGlassClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    LookingGlassClientImpl(PeeringManagementClientImpl client) {
        this.service =
            RestProxy.create(LookingGlassService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PeeringManagementClientLookingGlass to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PeeringManagementCli")
    private interface LookingGlassService {
        @Headers({"Content-Type: application/json"})
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Peering/lookingGlass")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LookingGlassOutputInner>> invoke(
            @HostParam("$host") String endpoint,
            @QueryParam("command") LookingGlassCommand command,
            @QueryParam("sourceType") LookingGlassSourceType sourceType,
            @QueryParam("sourceLocation") String sourceLocation,
            @QueryParam("destinationIP") String destinationIp,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Run looking glass functionality.
     *
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIp The IP address of the destination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return looking glass output model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LookingGlassOutputInner>> invokeWithResponseAsync(
        LookingGlassCommand command, LookingGlassSourceType sourceType, String sourceLocation, String destinationIp) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (command == null) {
            return Mono.error(new IllegalArgumentException("Parameter command is required and cannot be null."));
        }
        if (sourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceType is required and cannot be null."));
        }
        if (sourceLocation == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceLocation is required and cannot be null."));
        }
        if (destinationIp == null) {
            return Mono.error(new IllegalArgumentException("Parameter destinationIp is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .invoke(
                            this.client.getEndpoint(),
                            command,
                            sourceType,
                            sourceLocation,
                            destinationIp,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Run looking glass functionality.
     *
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIp The IP address of the destination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return looking glass output model along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LookingGlassOutputInner>> invokeWithResponseAsync(
        LookingGlassCommand command,
        LookingGlassSourceType sourceType,
        String sourceLocation,
        String destinationIp,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (command == null) {
            return Mono.error(new IllegalArgumentException("Parameter command is required and cannot be null."));
        }
        if (sourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceType is required and cannot be null."));
        }
        if (sourceLocation == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceLocation is required and cannot be null."));
        }
        if (destinationIp == null) {
            return Mono.error(new IllegalArgumentException("Parameter destinationIp is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .invoke(
                this.client.getEndpoint(),
                command,
                sourceType,
                sourceLocation,
                destinationIp,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Run looking glass functionality.
     *
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIp The IP address of the destination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return looking glass output model on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LookingGlassOutputInner> invokeAsync(
        LookingGlassCommand command, LookingGlassSourceType sourceType, String sourceLocation, String destinationIp) {
        return invokeWithResponseAsync(command, sourceType, sourceLocation, destinationIp)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Run looking glass functionality.
     *
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIp The IP address of the destination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return looking glass output model.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LookingGlassOutputInner invoke(
        LookingGlassCommand command, LookingGlassSourceType sourceType, String sourceLocation, String destinationIp) {
        return invokeAsync(command, sourceType, sourceLocation, destinationIp).block();
    }

    /**
     * Run looking glass functionality.
     *
     * @param command The command to be executed: ping, traceroute, bgpRoute.
     * @param sourceType The type of the source: Edge site or Azure Region.
     * @param sourceLocation The location of the source.
     * @param destinationIp The IP address of the destination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return looking glass output model along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LookingGlassOutputInner> invokeWithResponse(
        LookingGlassCommand command,
        LookingGlassSourceType sourceType,
        String sourceLocation,
        String destinationIp,
        Context context) {
        return invokeWithResponseAsync(command, sourceType, sourceLocation, destinationIp, context).block();
    }
}
