// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.peering.fluent.models.ConnectionMonitorTestInner;
import com.azure.resourcemanager.peering.models.ConnectionMonitorTest;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.util.Collections;
import java.util.List;

public final class ConnectionMonitorTestImpl
    implements ConnectionMonitorTest, ConnectionMonitorTest.Definition, ConnectionMonitorTest.Update {
    private ConnectionMonitorTestInner innerObject;

    private final com.azure.resourcemanager.peering.PeeringManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String sourceAgent() {
        return this.innerModel().sourceAgent();
    }

    public String destination() {
        return this.innerModel().destination();
    }

    public Integer destinationPort() {
        return this.innerModel().destinationPort();
    }

    public Integer testFrequencyInSec() {
        return this.innerModel().testFrequencyInSec();
    }

    public Boolean isTestSuccessful() {
        return this.innerModel().isTestSuccessful();
    }

    public List<String> path() {
        List<String> inner = this.innerModel().path();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectionMonitorTestInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.peering.PeeringManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String peeringServiceName;

    private String connectionMonitorTestName;

    public ConnectionMonitorTestImpl withExistingPeeringService(String resourceGroupName, String peeringServiceName) {
        this.resourceGroupName = resourceGroupName;
        this.peeringServiceName = peeringServiceName;
        return this;
    }

    public ConnectionMonitorTest create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectionMonitorTests()
                .createOrUpdateWithResponse(
                    resourceGroupName, peeringServiceName, connectionMonitorTestName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ConnectionMonitorTest create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectionMonitorTests()
                .createOrUpdateWithResponse(
                    resourceGroupName, peeringServiceName, connectionMonitorTestName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ConnectionMonitorTestImpl(String name, com.azure.resourcemanager.peering.PeeringManager serviceManager) {
        this.innerObject = new ConnectionMonitorTestInner();
        this.serviceManager = serviceManager;
        this.connectionMonitorTestName = name;
    }

    public ConnectionMonitorTestImpl update() {
        return this;
    }

    public ConnectionMonitorTest apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectionMonitorTests()
                .createOrUpdateWithResponse(
                    resourceGroupName, peeringServiceName, connectionMonitorTestName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ConnectionMonitorTest apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectionMonitorTests()
                .createOrUpdateWithResponse(
                    resourceGroupName, peeringServiceName, connectionMonitorTestName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ConnectionMonitorTestImpl(
        ConnectionMonitorTestInner innerObject, com.azure.resourcemanager.peering.PeeringManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.peeringServiceName = Utils.getValueFromIdByName(innerObject.id(), "peeringServices");
        this.connectionMonitorTestName = Utils.getValueFromIdByName(innerObject.id(), "connectionMonitorTests");
    }

    public ConnectionMonitorTest refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectionMonitorTests()
                .getWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, Context.NONE)
                .getValue();
        return this;
    }

    public ConnectionMonitorTest refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectionMonitorTests()
                .getWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, context)
                .getValue();
        return this;
    }

    public ConnectionMonitorTestImpl withSourceAgent(String sourceAgent) {
        this.innerModel().withSourceAgent(sourceAgent);
        return this;
    }

    public ConnectionMonitorTestImpl withDestination(String destination) {
        this.innerModel().withDestination(destination);
        return this;
    }

    public ConnectionMonitorTestImpl withDestinationPort(Integer destinationPort) {
        this.innerModel().withDestinationPort(destinationPort);
        return this;
    }

    public ConnectionMonitorTestImpl withTestFrequencyInSec(Integer testFrequencyInSec) {
        this.innerModel().withTestFrequencyInSec(testFrequencyInSec);
        return this;
    }
}
