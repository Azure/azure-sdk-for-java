// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.PeeringServiceSku;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.io.IOException;
import java.util.Map;

/**
 * Peering Service.
 */
@Fluent
public final class PeeringServiceInner extends ProxyResource {
    /*
     * The SKU that defines the type of the peering service.
     */
    private PeeringServiceSku sku;

    /*
     * The properties that define a peering service.
     */
    private PeeringServiceProperties innerProperties;

    /*
     * The location of the resource.
     */
    private String location;

    /*
     * The resource tags.
     */
    private Map<String, String> tags;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of PeeringServiceInner class.
     */
    public PeeringServiceInner() {
    }

    /**
     * Get the sku property: The SKU that defines the type of the peering service.
     * 
     * @return the sku value.
     */
    public PeeringServiceSku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU that defines the type of the peering service.
     * 
     * @param sku the sku value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withSku(PeeringServiceSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the innerProperties property: The properties that define a peering service.
     * 
     * @return the innerProperties value.
     */
    private PeeringServiceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the location property: The location of the resource.
     * 
     * @return the location value.
     */
    public String location() {
        return this.location;
    }

    /**
     * Set the location property: The location of the resource.
     * 
     * @param location the location value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the tags property: The resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the peeringServiceLocation property: The location (state/province) of the customer.
     * 
     * @return the peeringServiceLocation value.
     */
    public String peeringServiceLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().peeringServiceLocation();
    }

    /**
     * Set the peeringServiceLocation property: The location (state/province) of the customer.
     * 
     * @param peeringServiceLocation the peeringServiceLocation value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withPeeringServiceLocation(String peeringServiceLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PeeringServiceProperties();
        }
        this.innerProperties().withPeeringServiceLocation(peeringServiceLocation);
        return this;
    }

    /**
     * Get the peeringServiceProvider property: The name of the service provider.
     * 
     * @return the peeringServiceProvider value.
     */
    public String peeringServiceProvider() {
        return this.innerProperties() == null ? null : this.innerProperties().peeringServiceProvider();
    }

    /**
     * Set the peeringServiceProvider property: The name of the service provider.
     * 
     * @param peeringServiceProvider the peeringServiceProvider value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withPeeringServiceProvider(String peeringServiceProvider) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PeeringServiceProperties();
        }
        this.innerProperties().withPeeringServiceProvider(peeringServiceProvider);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the providerPrimaryPeeringLocation property: The primary peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @return the providerPrimaryPeeringLocation value.
     */
    public String providerPrimaryPeeringLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().providerPrimaryPeeringLocation();
    }

    /**
     * Set the providerPrimaryPeeringLocation property: The primary peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @param providerPrimaryPeeringLocation the providerPrimaryPeeringLocation value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withProviderPrimaryPeeringLocation(String providerPrimaryPeeringLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PeeringServiceProperties();
        }
        this.innerProperties().withProviderPrimaryPeeringLocation(providerPrimaryPeeringLocation);
        return this;
    }

    /**
     * Get the providerBackupPeeringLocation property: The backup peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @return the providerBackupPeeringLocation value.
     */
    public String providerBackupPeeringLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().providerBackupPeeringLocation();
    }

    /**
     * Set the providerBackupPeeringLocation property: The backup peering (Microsoft/service provider) location to be
     * used for customer traffic.
     * 
     * @param providerBackupPeeringLocation the providerBackupPeeringLocation value to set.
     * @return the PeeringServiceInner object itself.
     */
    public PeeringServiceInner withProviderBackupPeeringLocation(String providerBackupPeeringLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PeeringServiceProperties();
        }
        this.innerProperties().withProviderBackupPeeringLocation(providerBackupPeeringLocation);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (location() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property location in model PeeringServiceInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PeeringServiceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringServiceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringServiceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PeeringServiceInner.
     */
    public static PeeringServiceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringServiceInner deserializedPeeringServiceInner = new PeeringServiceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPeeringServiceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPeeringServiceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPeeringServiceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedPeeringServiceInner.location = reader.getString();
                } else if ("sku".equals(fieldName)) {
                    deserializedPeeringServiceInner.sku = PeeringServiceSku.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedPeeringServiceInner.innerProperties = PeeringServiceProperties.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPeeringServiceInner.tags = tags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringServiceInner;
        });
    }
}
