// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of PeeringServicePrefixes. */
public interface PeeringServicePrefixes {
    /**
     * Gets the peering service prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the peering service prefix.
     */
    PeeringServicePrefix get(String resourceGroupName, String peeringServiceName, String prefixName);

    /**
     * Gets the peering service prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the peering service prefix.
     */
    Response<PeeringServicePrefix> getWithResponse(
        String resourceGroupName, String peeringServiceName, String prefixName, Context context);

    /**
     * removes the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String peeringServiceName, String prefixName);

    /**
     * removes the peering prefix.
     *
     * @param resourceGroupName The resource group name.
     * @param peeringServiceName The peering service name.
     * @param prefixName The prefix name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringServiceName, String prefixName, Context context);

    /**
     * Gets the peering service prefix.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the peering service prefix.
     */
    PeeringServicePrefix getById(String id);

    /**
     * Gets the peering service prefix.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the peering service prefix.
     */
    Response<PeeringServicePrefix> getByIdWithResponse(String id, Context context);

    /**
     * removes the peering prefix.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * removes the peering prefix.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new PeeringServicePrefix resource.
     *
     * @param name resource name.
     * @return the first stage of the new PeeringServicePrefix definition.
     */
    PeeringServicePrefix.DefinitionStages.Blank define(String name);
}
