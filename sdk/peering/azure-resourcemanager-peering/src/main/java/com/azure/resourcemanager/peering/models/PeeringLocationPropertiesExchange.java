// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties that define an exchange peering location.
 */
@Fluent
public final class PeeringLocationPropertiesExchange implements JsonSerializable<PeeringLocationPropertiesExchange> {
    /*
     * The list of exchange peering facilities at the peering location.
     */
    private List<ExchangePeeringFacility> peeringFacilities;

    /**
     * Creates an instance of PeeringLocationPropertiesExchange class.
     */
    public PeeringLocationPropertiesExchange() {
    }

    /**
     * Get the peeringFacilities property: The list of exchange peering facilities at the peering location.
     * 
     * @return the peeringFacilities value.
     */
    public List<ExchangePeeringFacility> peeringFacilities() {
        return this.peeringFacilities;
    }

    /**
     * Set the peeringFacilities property: The list of exchange peering facilities at the peering location.
     * 
     * @param peeringFacilities the peeringFacilities value to set.
     * @return the PeeringLocationPropertiesExchange object itself.
     */
    public PeeringLocationPropertiesExchange withPeeringFacilities(List<ExchangePeeringFacility> peeringFacilities) {
        this.peeringFacilities = peeringFacilities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (peeringFacilities() != null) {
            peeringFacilities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("peeringFacilities", this.peeringFacilities,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringLocationPropertiesExchange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringLocationPropertiesExchange if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeeringLocationPropertiesExchange.
     */
    public static PeeringLocationPropertiesExchange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringLocationPropertiesExchange deserializedPeeringLocationPropertiesExchange
                = new PeeringLocationPropertiesExchange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peeringFacilities".equals(fieldName)) {
                    List<ExchangePeeringFacility> peeringFacilities
                        = reader.readArray(reader1 -> ExchangePeeringFacility.fromJson(reader1));
                    deserializedPeeringLocationPropertiesExchange.peeringFacilities = peeringFacilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringLocationPropertiesExchange;
        });
    }
}
