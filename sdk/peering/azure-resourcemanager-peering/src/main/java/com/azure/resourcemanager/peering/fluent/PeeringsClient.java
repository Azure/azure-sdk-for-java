// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.peering.fluent.models.PeeringInner;
import com.azure.resourcemanager.peering.models.ResourceTags;

/** An instance of this class provides access to all the operations defined in PeeringsClient. */
public interface PeeringsClient {
    /**
     * Gets an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing peering with the specified name under the given subscription and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringInner getByResourceGroup(String resourceGroupName, String peeringName);

    /**
     * Gets an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing peering with the specified name under the given subscription and resource group.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringInner> getByResourceGroupWithResponse(
        String resourceGroupName, String peeringName, Context context);

    /**
     * Creates a new peering or updates an existing peering with the specified name under the given subscription and
     * resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param peering The properties needed to create or update a peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringInner createOrUpdate(String resourceGroupName, String peeringName, PeeringInner peering);

    /**
     * Creates a new peering or updates an existing peering with the specified name under the given subscription and
     * resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param peering The properties needed to create or update a peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringInner> createOrUpdateWithResponse(
        String resourceGroupName, String peeringName, PeeringInner peering, Context context);

    /**
     * Deletes an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String peeringName);

    /**
     * Deletes an existing peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String peeringName, Context context);

    /**
     * Updates tags for a peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param tags The resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringInner update(String resourceGroupName, String peeringName, ResourceTags tags);

    /**
     * Updates tags for a peering with the specified name under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param tags The resource tags.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringInner> updateWithResponse(
        String resourceGroupName, String peeringName, ResourceTags tags, Context context);

    /**
     * Lists all of the peerings under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peerings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringInner> listByResourceGroup(String resourceGroupName);

    /**
     * Lists all of the peerings under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peerings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peerings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringInner> list();

    /**
     * Lists all of the peerings under the given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peerings.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringInner> list(Context context);
}
