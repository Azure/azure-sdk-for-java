// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties that define connectivity to the Peering Service Provider.
 */
@Fluent
public final class PeeringServiceProviderProperties implements JsonSerializable<PeeringServiceProviderProperties> {
    /*
     * The name of the service provider.
     */
    private String serviceProviderName;

    /*
     * The list of locations at which the service provider peers with Microsoft.
     */
    private List<String> peeringLocations;

    /**
     * Creates an instance of PeeringServiceProviderProperties class.
     */
    public PeeringServiceProviderProperties() {
    }

    /**
     * Get the serviceProviderName property: The name of the service provider.
     * 
     * @return the serviceProviderName value.
     */
    public String serviceProviderName() {
        return this.serviceProviderName;
    }

    /**
     * Set the serviceProviderName property: The name of the service provider.
     * 
     * @param serviceProviderName the serviceProviderName value to set.
     * @return the PeeringServiceProviderProperties object itself.
     */
    public PeeringServiceProviderProperties withServiceProviderName(String serviceProviderName) {
        this.serviceProviderName = serviceProviderName;
        return this;
    }

    /**
     * Get the peeringLocations property: The list of locations at which the service provider peers with Microsoft.
     * 
     * @return the peeringLocations value.
     */
    public List<String> peeringLocations() {
        return this.peeringLocations;
    }

    /**
     * Set the peeringLocations property: The list of locations at which the service provider peers with Microsoft.
     * 
     * @param peeringLocations the peeringLocations value to set.
     * @return the PeeringServiceProviderProperties object itself.
     */
    public PeeringServiceProviderProperties withPeeringLocations(List<String> peeringLocations) {
        this.peeringLocations = peeringLocations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceProviderName", this.serviceProviderName);
        jsonWriter.writeArrayField("peeringLocations", this.peeringLocations,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringServiceProviderProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringServiceProviderProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeeringServiceProviderProperties.
     */
    public static PeeringServiceProviderProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringServiceProviderProperties deserializedPeeringServiceProviderProperties
                = new PeeringServiceProviderProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceProviderName".equals(fieldName)) {
                    deserializedPeeringServiceProviderProperties.serviceProviderName = reader.getString();
                } else if ("peeringLocations".equals(fieldName)) {
                    List<String> peeringLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedPeeringServiceProviderProperties.peeringLocations = peeringLocations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringServiceProviderProperties;
        });
    }
}
