// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.peering.fluent.ConnectionMonitorTestsClient;
import com.azure.resourcemanager.peering.fluent.models.ConnectionMonitorTestInner;
import com.azure.resourcemanager.peering.models.ConnectionMonitorTestListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ConnectionMonitorTestsClient. */
public final class ConnectionMonitorTestsClientImpl implements ConnectionMonitorTestsClient {
    /** The proxy service used to perform REST calls. */
    private final ConnectionMonitorTestsService service;

    /** The service client containing this operation class. */
    private final PeeringManagementClientImpl client;

    /**
     * Initializes an instance of ConnectionMonitorTestsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ConnectionMonitorTestsClientImpl(PeeringManagementClientImpl client) {
        this.service =
            RestProxy
                .create(ConnectionMonitorTestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PeeringManagementClientConnectionMonitorTests to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PeeringManagementCli")
    private interface ConnectionMonitorTestsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering"
                + "/peeringServices/{peeringServiceName}/connectionMonitorTests/{connectionMonitorTestName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionMonitorTestInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("peeringServiceName") String peeringServiceName,
            @PathParam("connectionMonitorTestName") String connectionMonitorTestName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering"
                + "/peeringServices/{peeringServiceName}/connectionMonitorTests/{connectionMonitorTestName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionMonitorTestInner>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("peeringServiceName") String peeringServiceName,
            @PathParam("connectionMonitorTestName") String connectionMonitorTestName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ConnectionMonitorTestInner connectionMonitorTest,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering"
                + "/peeringServices/{peeringServiceName}/connectionMonitorTests/{connectionMonitorTestName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("peeringServiceName") String peeringServiceName,
            @PathParam("connectionMonitorTestName") String connectionMonitorTestName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering"
                + "/peeringServices/{peeringServiceName}/connectionMonitorTests")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionMonitorTestListResult>> listByPeeringService(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("peeringServiceName") String peeringServiceName,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ConnectionMonitorTestListResult>> listByPeeringServiceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionMonitorTestInner>> getWithResponseAsync(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (connectionMonitorTestName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter connectionMonitorTestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            peeringServiceName,
                            connectionMonitorTestName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionMonitorTestInner>> getWithResponseAsync(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (connectionMonitorTestName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter connectionMonitorTestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                resourceGroupName,
                peeringServiceName,
                connectionMonitorTestName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionMonitorTestInner> getAsync(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        return getWithResponseAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionMonitorTestInner get(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        return getAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName).block();
    }

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectionMonitorTestInner> getWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context) {
        return getWithResponseAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName, context).block();
    }

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionMonitorTestInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (connectionMonitorTestName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter connectionMonitorTestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionMonitorTest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionMonitorTest is required and cannot be null."));
        } else {
            connectionMonitorTest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            peeringServiceName,
                            connectionMonitorTestName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            connectionMonitorTest,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ConnectionMonitorTestInner>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (connectionMonitorTestName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter connectionMonitorTestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (connectionMonitorTest == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter connectionMonitorTest is required and cannot be null."));
        } else {
            connectionMonitorTest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                resourceGroupName,
                peeringServiceName,
                connectionMonitorTestName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                connectionMonitorTest,
                accept,
                context);
    }

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ConnectionMonitorTestInner> createOrUpdateAsync(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, peeringServiceName, connectionMonitorTestName, connectionMonitorTest)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionMonitorTestInner createOrUpdate(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest) {
        return createOrUpdateAsync(
                resourceGroupName, peeringServiceName, connectionMonitorTestName, connectionMonitorTest)
            .block();
    }

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ConnectionMonitorTestInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest,
        Context context) {
        return createOrUpdateWithResponseAsync(
                resourceGroupName, peeringServiceName, connectionMonitorTestName, connectionMonitorTest, context)
            .block();
    }

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (connectionMonitorTestName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter connectionMonitorTestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            peeringServiceName,
                            connectionMonitorTestName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (connectionMonitorTestName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter connectionMonitorTestName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                resourceGroupName,
                peeringServiceName,
                connectionMonitorTestName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        return deleteWithResponseAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        deleteAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName).block();
    }

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, peeringServiceName, connectionMonitorTestName, context)
            .block();
    }

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectionMonitorTestInner>> listByPeeringServiceSinglePageAsync(
        String resourceGroupName, String peeringServiceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByPeeringService(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            peeringServiceName,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<ConnectionMonitorTestInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectionMonitorTestInner>> listByPeeringServiceSinglePageAsync(
        String resourceGroupName, String peeringServiceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringServiceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter peeringServiceName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByPeeringService(
                this.client.getEndpoint(),
                resourceGroupName,
                peeringServiceName,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConnectionMonitorTestInner> listByPeeringServiceAsync(
        String resourceGroupName, String peeringServiceName) {
        return new PagedFlux<>(
            () -> listByPeeringServiceSinglePageAsync(resourceGroupName, peeringServiceName),
            nextLink -> listByPeeringServiceNextSinglePageAsync(nextLink));
    }

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ConnectionMonitorTestInner> listByPeeringServiceAsync(
        String resourceGroupName, String peeringServiceName, Context context) {
        return new PagedFlux<>(
            () -> listByPeeringServiceSinglePageAsync(resourceGroupName, peeringServiceName, context),
            nextLink -> listByPeeringServiceNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConnectionMonitorTestInner> listByPeeringService(
        String resourceGroupName, String peeringServiceName) {
        return new PagedIterable<>(listByPeeringServiceAsync(resourceGroupName, peeringServiceName));
    }

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ConnectionMonitorTestInner> listByPeeringService(
        String resourceGroupName, String peeringServiceName, Context context) {
        return new PagedIterable<>(listByPeeringServiceAsync(resourceGroupName, peeringServiceName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectionMonitorTestInner>> listByPeeringServiceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByPeeringServiceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ConnectionMonitorTestInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ConnectionMonitorTestInner>> listByPeeringServiceNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByPeeringServiceNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
