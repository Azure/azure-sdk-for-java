// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that define a direct peering facility.
 */
@Fluent
public final class DirectPeeringFacility implements JsonSerializable<DirectPeeringFacility> {
    /*
     * The address of the direct peering facility.
     */
    private String address;

    /*
     * The type of the direct peering.
     */
    private DirectPeeringType directPeeringType;

    /*
     * The PeeringDB.com ID of the facility.
     */
    private Integer peeringDBFacilityId;

    /*
     * The PeeringDB.com URL of the facility.
     */
    private String peeringDBFacilityLink;

    /**
     * Creates an instance of DirectPeeringFacility class.
     */
    public DirectPeeringFacility() {
    }

    /**
     * Get the address property: The address of the direct peering facility.
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: The address of the direct peering facility.
     * 
     * @param address the address value to set.
     * @return the DirectPeeringFacility object itself.
     */
    public DirectPeeringFacility withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the directPeeringType property: The type of the direct peering.
     * 
     * @return the directPeeringType value.
     */
    public DirectPeeringType directPeeringType() {
        return this.directPeeringType;
    }

    /**
     * Set the directPeeringType property: The type of the direct peering.
     * 
     * @param directPeeringType the directPeeringType value to set.
     * @return the DirectPeeringFacility object itself.
     */
    public DirectPeeringFacility withDirectPeeringType(DirectPeeringType directPeeringType) {
        this.directPeeringType = directPeeringType;
        return this;
    }

    /**
     * Get the peeringDBFacilityId property: The PeeringDB.com ID of the facility.
     * 
     * @return the peeringDBFacilityId value.
     */
    public Integer peeringDBFacilityId() {
        return this.peeringDBFacilityId;
    }

    /**
     * Set the peeringDBFacilityId property: The PeeringDB.com ID of the facility.
     * 
     * @param peeringDBFacilityId the peeringDBFacilityId value to set.
     * @return the DirectPeeringFacility object itself.
     */
    public DirectPeeringFacility withPeeringDBFacilityId(Integer peeringDBFacilityId) {
        this.peeringDBFacilityId = peeringDBFacilityId;
        return this;
    }

    /**
     * Get the peeringDBFacilityLink property: The PeeringDB.com URL of the facility.
     * 
     * @return the peeringDBFacilityLink value.
     */
    public String peeringDBFacilityLink() {
        return this.peeringDBFacilityLink;
    }

    /**
     * Set the peeringDBFacilityLink property: The PeeringDB.com URL of the facility.
     * 
     * @param peeringDBFacilityLink the peeringDBFacilityLink value to set.
     * @return the DirectPeeringFacility object itself.
     */
    public DirectPeeringFacility withPeeringDBFacilityLink(String peeringDBFacilityLink) {
        this.peeringDBFacilityLink = peeringDBFacilityLink;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("address", this.address);
        jsonWriter.writeStringField("directPeeringType",
            this.directPeeringType == null ? null : this.directPeeringType.toString());
        jsonWriter.writeNumberField("peeringDBFacilityId", this.peeringDBFacilityId);
        jsonWriter.writeStringField("peeringDBFacilityLink", this.peeringDBFacilityLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DirectPeeringFacility from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DirectPeeringFacility if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DirectPeeringFacility.
     */
    public static DirectPeeringFacility fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DirectPeeringFacility deserializedDirectPeeringFacility = new DirectPeeringFacility();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("address".equals(fieldName)) {
                    deserializedDirectPeeringFacility.address = reader.getString();
                } else if ("directPeeringType".equals(fieldName)) {
                    deserializedDirectPeeringFacility.directPeeringType
                        = DirectPeeringType.fromString(reader.getString());
                } else if ("peeringDBFacilityId".equals(fieldName)) {
                    deserializedDirectPeeringFacility.peeringDBFacilityId = reader.getNullable(JsonReader::getInt);
                } else if ("peeringDBFacilityLink".equals(fieldName)) {
                    deserializedDirectPeeringFacility.peeringDBFacilityLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDirectPeeringFacility;
        });
    }
}
