// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.peering.fluent.PeeringServiceProvidersClient;
import com.azure.resourcemanager.peering.fluent.models.PeeringServiceProviderInner;
import com.azure.resourcemanager.peering.models.PeeringServiceProvider;
import com.azure.resourcemanager.peering.models.PeeringServiceProviders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class PeeringServiceProvidersImpl implements PeeringServiceProviders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PeeringServiceProvidersImpl.class);

    private final PeeringServiceProvidersClient innerClient;

    private final com.azure.resourcemanager.peering.PeeringManager serviceManager;

    public PeeringServiceProvidersImpl(
        PeeringServiceProvidersClient innerClient, com.azure.resourcemanager.peering.PeeringManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PeeringServiceProvider> list() {
        PagedIterable<PeeringServiceProviderInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new PeeringServiceProviderImpl(inner1, this.manager()));
    }

    public PagedIterable<PeeringServiceProvider> list(Context context) {
        PagedIterable<PeeringServiceProviderInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new PeeringServiceProviderImpl(inner1, this.manager()));
    }

    private PeeringServiceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.peering.PeeringManager manager() {
        return this.serviceManager;
    }
}
