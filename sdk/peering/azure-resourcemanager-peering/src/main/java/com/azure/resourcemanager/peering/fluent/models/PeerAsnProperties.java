// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.ContactDetail;
import com.azure.resourcemanager.peering.models.ValidationState;
import java.io.IOException;
import java.util.List;

/**
 * The properties that define a peer's ASN.
 */
@Fluent
public final class PeerAsnProperties implements JsonSerializable<PeerAsnProperties> {
    /*
     * The Autonomous System Number (ASN) of the peer.
     */
    private Integer peerAsn;

    /*
     * The contact details of the peer.
     */
    private List<ContactDetail> peerContactDetail;

    /*
     * The name of the peer.
     */
    private String peerName;

    /*
     * The validation state of the ASN associated with the peer.
     */
    private ValidationState validationState;

    /*
     * The error message for the validation state
     */
    private String errorMessage;

    /**
     * Creates an instance of PeerAsnProperties class.
     */
    public PeerAsnProperties() {
    }

    /**
     * Get the peerAsn property: The Autonomous System Number (ASN) of the peer.
     * 
     * @return the peerAsn value.
     */
    public Integer peerAsn() {
        return this.peerAsn;
    }

    /**
     * Set the peerAsn property: The Autonomous System Number (ASN) of the peer.
     * 
     * @param peerAsn the peerAsn value to set.
     * @return the PeerAsnProperties object itself.
     */
    public PeerAsnProperties withPeerAsn(Integer peerAsn) {
        this.peerAsn = peerAsn;
        return this;
    }

    /**
     * Get the peerContactDetail property: The contact details of the peer.
     * 
     * @return the peerContactDetail value.
     */
    public List<ContactDetail> peerContactDetail() {
        return this.peerContactDetail;
    }

    /**
     * Set the peerContactDetail property: The contact details of the peer.
     * 
     * @param peerContactDetail the peerContactDetail value to set.
     * @return the PeerAsnProperties object itself.
     */
    public PeerAsnProperties withPeerContactDetail(List<ContactDetail> peerContactDetail) {
        this.peerContactDetail = peerContactDetail;
        return this;
    }

    /**
     * Get the peerName property: The name of the peer.
     * 
     * @return the peerName value.
     */
    public String peerName() {
        return this.peerName;
    }

    /**
     * Set the peerName property: The name of the peer.
     * 
     * @param peerName the peerName value to set.
     * @return the PeerAsnProperties object itself.
     */
    public PeerAsnProperties withPeerName(String peerName) {
        this.peerName = peerName;
        return this;
    }

    /**
     * Get the validationState property: The validation state of the ASN associated with the peer.
     * 
     * @return the validationState value.
     */
    public ValidationState validationState() {
        return this.validationState;
    }

    /**
     * Set the validationState property: The validation state of the ASN associated with the peer.
     * 
     * @param validationState the validationState value to set.
     * @return the PeerAsnProperties object itself.
     */
    public PeerAsnProperties withValidationState(ValidationState validationState) {
        this.validationState = validationState;
        return this;
    }

    /**
     * Get the errorMessage property: The error message for the validation state.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (peerContactDetail() != null) {
            peerContactDetail().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("peerAsn", this.peerAsn);
        jsonWriter.writeArrayField("peerContactDetail", this.peerContactDetail,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("peerName", this.peerName);
        jsonWriter.writeStringField("validationState",
            this.validationState == null ? null : this.validationState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeerAsnProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeerAsnProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeerAsnProperties.
     */
    public static PeerAsnProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeerAsnProperties deserializedPeerAsnProperties = new PeerAsnProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peerAsn".equals(fieldName)) {
                    deserializedPeerAsnProperties.peerAsn = reader.getNullable(JsonReader::getInt);
                } else if ("peerContactDetail".equals(fieldName)) {
                    List<ContactDetail> peerContactDetail
                        = reader.readArray(reader1 -> ContactDetail.fromJson(reader1));
                    deserializedPeerAsnProperties.peerContactDetail = peerContactDetail;
                } else if ("peerName".equals(fieldName)) {
                    deserializedPeerAsnProperties.peerName = reader.getString();
                } else if ("validationState".equals(fieldName)) {
                    deserializedPeerAsnProperties.validationState = ValidationState.fromString(reader.getString());
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedPeerAsnProperties.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeerAsnProperties;
        });
    }
}
