// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.peering.fluent.models.ConnectionMonitorTestInner;

/** An instance of this class provides access to all the operations defined in ConnectionMonitorTestsClient. */
public interface ConnectionMonitorTestsClient {
    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectionMonitorTestInner get(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName);

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectionMonitorTestInner> getWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context);

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectionMonitorTestInner createOrUpdate(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest);

    /**
     * Creates or updates a connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param connectionMonitorTest The properties needed to create a connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Connection Monitor Test class along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectionMonitorTestInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String peeringServiceName,
        String connectionMonitorTestName,
        ConnectionMonitorTestInner connectionMonitorTest,
        Context context);

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String peeringServiceName, String connectionMonitorTestName);

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context);

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectionMonitorTestInner> listByPeeringService(String resourceGroupName, String peeringServiceName);

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectionMonitorTestInner> listByPeeringService(
        String resourceGroupName, String peeringServiceName, Context context);
}
