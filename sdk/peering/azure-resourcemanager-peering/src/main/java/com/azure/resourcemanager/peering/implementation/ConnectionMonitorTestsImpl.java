// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.peering.fluent.ConnectionMonitorTestsClient;
import com.azure.resourcemanager.peering.fluent.models.ConnectionMonitorTestInner;
import com.azure.resourcemanager.peering.models.ConnectionMonitorTest;
import com.azure.resourcemanager.peering.models.ConnectionMonitorTests;

public final class ConnectionMonitorTestsImpl implements ConnectionMonitorTests {
    private static final ClientLogger LOGGER = new ClientLogger(ConnectionMonitorTestsImpl.class);

    private final ConnectionMonitorTestsClient innerClient;

    private final com.azure.resourcemanager.peering.PeeringManager serviceManager;

    public ConnectionMonitorTestsImpl(
        ConnectionMonitorTestsClient innerClient, com.azure.resourcemanager.peering.PeeringManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ConnectionMonitorTest get(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        ConnectionMonitorTestInner inner =
            this.serviceClient().get(resourceGroupName, peeringServiceName, connectionMonitorTestName);
        if (inner != null) {
            return new ConnectionMonitorTestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionMonitorTest> getWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context) {
        Response<ConnectionMonitorTestInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionMonitorTestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String peeringServiceName, String connectionMonitorTestName) {
        this.serviceClient().delete(resourceGroupName, peeringServiceName, connectionMonitorTestName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, context);
    }

    public PagedIterable<ConnectionMonitorTest> listByPeeringService(
        String resourceGroupName, String peeringServiceName) {
        PagedIterable<ConnectionMonitorTestInner> inner =
            this.serviceClient().listByPeeringService(resourceGroupName, peeringServiceName);
        return Utils.mapPage(inner, inner1 -> new ConnectionMonitorTestImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectionMonitorTest> listByPeeringService(
        String resourceGroupName, String peeringServiceName, Context context) {
        PagedIterable<ConnectionMonitorTestInner> inner =
            this.serviceClient().listByPeeringService(resourceGroupName, peeringServiceName, context);
        return Utils.mapPage(inner, inner1 -> new ConnectionMonitorTestImpl(inner1, this.manager()));
    }

    public ConnectionMonitorTest getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String peeringServiceName = Utils.getValueFromIdByName(id, "peeringServices");
        if (peeringServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'peeringServices'.", id)));
        }
        String connectionMonitorTestName = Utils.getValueFromIdByName(id, "connectionMonitorTests");
        if (connectionMonitorTestName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitorTests'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, Context.NONE)
            .getValue();
    }

    public Response<ConnectionMonitorTest> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String peeringServiceName = Utils.getValueFromIdByName(id, "peeringServices");
        if (peeringServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'peeringServices'.", id)));
        }
        String connectionMonitorTestName = Utils.getValueFromIdByName(id, "connectionMonitorTests");
        if (connectionMonitorTestName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitorTests'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String peeringServiceName = Utils.getValueFromIdByName(id, "peeringServices");
        if (peeringServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'peeringServices'.", id)));
        }
        String connectionMonitorTestName = Utils.getValueFromIdByName(id, "connectionMonitorTests");
        if (connectionMonitorTestName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitorTests'.",
                                id)));
        }
        this.deleteWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String peeringServiceName = Utils.getValueFromIdByName(id, "peeringServices");
        if (peeringServiceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'peeringServices'.", id)));
        }
        String connectionMonitorTestName = Utils.getValueFromIdByName(id, "connectionMonitorTests");
        if (connectionMonitorTestName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitorTests'.",
                                id)));
        }
        return this.deleteWithResponse(resourceGroupName, peeringServiceName, connectionMonitorTestName, context);
    }

    private ConnectionMonitorTestsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.peering.PeeringManager manager() {
        return this.serviceManager;
    }

    public ConnectionMonitorTestImpl define(String name) {
        return new ConnectionMonitorTestImpl(name, this.manager());
    }
}
