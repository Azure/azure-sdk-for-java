// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Class for CheckServiceProviderAvailabilityInput.
 */
@Fluent
public final class CheckServiceProviderAvailabilityInput
    implements JsonSerializable<CheckServiceProviderAvailabilityInput> {
    /*
     * Gets or sets the peering service location.
     */
    private String peeringServiceLocation;

    /*
     * Gets or sets the peering service provider.
     */
    private String peeringServiceProvider;

    /**
     * Creates an instance of CheckServiceProviderAvailabilityInput class.
     */
    public CheckServiceProviderAvailabilityInput() {
    }

    /**
     * Get the peeringServiceLocation property: Gets or sets the peering service location.
     * 
     * @return the peeringServiceLocation value.
     */
    public String peeringServiceLocation() {
        return this.peeringServiceLocation;
    }

    /**
     * Set the peeringServiceLocation property: Gets or sets the peering service location.
     * 
     * @param peeringServiceLocation the peeringServiceLocation value to set.
     * @return the CheckServiceProviderAvailabilityInput object itself.
     */
    public CheckServiceProviderAvailabilityInput withPeeringServiceLocation(String peeringServiceLocation) {
        this.peeringServiceLocation = peeringServiceLocation;
        return this;
    }

    /**
     * Get the peeringServiceProvider property: Gets or sets the peering service provider.
     * 
     * @return the peeringServiceProvider value.
     */
    public String peeringServiceProvider() {
        return this.peeringServiceProvider;
    }

    /**
     * Set the peeringServiceProvider property: Gets or sets the peering service provider.
     * 
     * @param peeringServiceProvider the peeringServiceProvider value to set.
     * @return the CheckServiceProviderAvailabilityInput object itself.
     */
    public CheckServiceProviderAvailabilityInput withPeeringServiceProvider(String peeringServiceProvider) {
        this.peeringServiceProvider = peeringServiceProvider;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("peeringServiceLocation", this.peeringServiceLocation);
        jsonWriter.writeStringField("peeringServiceProvider", this.peeringServiceProvider);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckServiceProviderAvailabilityInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckServiceProviderAvailabilityInput if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CheckServiceProviderAvailabilityInput.
     */
    public static CheckServiceProviderAvailabilityInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckServiceProviderAvailabilityInput deserializedCheckServiceProviderAvailabilityInput
                = new CheckServiceProviderAvailabilityInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peeringServiceLocation".equals(fieldName)) {
                    deserializedCheckServiceProviderAvailabilityInput.peeringServiceLocation = reader.getString();
                } else if ("peeringServiceProvider".equals(fieldName)) {
                    deserializedCheckServiceProviderAvailabilityInput.peeringServiceProvider = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckServiceProviderAvailabilityInput;
        });
    }
}
