// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.peering.fluent.ReceivedRoutesClient;
import com.azure.resourcemanager.peering.fluent.models.PeeringReceivedRouteInner;
import com.azure.resourcemanager.peering.models.PeeringReceivedRouteListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ReceivedRoutesClient. */
public final class ReceivedRoutesClientImpl implements ReceivedRoutesClient {
    private final ClientLogger logger = new ClientLogger(ReceivedRoutesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ReceivedRoutesService service;

    /** The service client containing this operation class. */
    private final PeeringManagementClientImpl client;

    /**
     * Initializes an instance of ReceivedRoutesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ReceivedRoutesClientImpl(PeeringManagementClientImpl client) {
        this.service =
            RestProxy.create(ReceivedRoutesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for PeeringManagementClientReceivedRoutes to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "PeeringManagementCli")
    private interface ReceivedRoutesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings"
                + "/{peeringName}/receivedRoutes")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PeeringReceivedRouteListResult>> listByPeering(
            @HostParam("$host") String endpoint,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("peeringName") String peeringName,
            @QueryParam("prefix") String prefix,
            @QueryParam("asPath") String asPath,
            @QueryParam("originAsValidationState") String originAsValidationState,
            @QueryParam("rpkiValidationState") String rpkiValidationState,
            @QueryParam("$skipToken") String skipToken,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<PeeringReceivedRouteListResult>> listByPeeringNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PeeringReceivedRouteInner>> listByPeeringSinglePageAsync(
        String resourceGroupName,
        String peeringName,
        String prefix,
        String asPath,
        String originAsValidationState,
        String rpkiValidationState,
        String skipToken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringName == null) {
            return Mono.error(new IllegalArgumentException("Parameter peeringName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByPeering(
                            this.client.getEndpoint(),
                            resourceGroupName,
                            peeringName,
                            prefix,
                            asPath,
                            originAsValidationState,
                            rpkiValidationState,
                            skipToken,
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<PeeringReceivedRouteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PeeringReceivedRouteInner>> listByPeeringSinglePageAsync(
        String resourceGroupName,
        String peeringName,
        String prefix,
        String asPath,
        String originAsValidationState,
        String rpkiValidationState,
        String skipToken,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (peeringName == null) {
            return Mono.error(new IllegalArgumentException("Parameter peeringName is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByPeering(
                this.client.getEndpoint(),
                resourceGroupName,
                peeringName,
                prefix,
                asPath,
                originAsValidationState,
                rpkiValidationState,
                skipToken,
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PeeringReceivedRouteInner> listByPeeringAsync(
        String resourceGroupName,
        String peeringName,
        String prefix,
        String asPath,
        String originAsValidationState,
        String rpkiValidationState,
        String skipToken) {
        return new PagedFlux<>(
            () ->
                listByPeeringSinglePageAsync(
                    resourceGroupName,
                    peeringName,
                    prefix,
                    asPath,
                    originAsValidationState,
                    rpkiValidationState,
                    skipToken),
            nextLink -> listByPeeringNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PeeringReceivedRouteInner> listByPeeringAsync(String resourceGroupName, String peeringName) {
        final String prefix = null;
        final String asPath = null;
        final String originAsValidationState = null;
        final String rpkiValidationState = null;
        final String skipToken = null;
        return new PagedFlux<>(
            () ->
                listByPeeringSinglePageAsync(
                    resourceGroupName,
                    peeringName,
                    prefix,
                    asPath,
                    originAsValidationState,
                    rpkiValidationState,
                    skipToken),
            nextLink -> listByPeeringNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<PeeringReceivedRouteInner> listByPeeringAsync(
        String resourceGroupName,
        String peeringName,
        String prefix,
        String asPath,
        String originAsValidationState,
        String rpkiValidationState,
        String skipToken,
        Context context) {
        return new PagedFlux<>(
            () ->
                listByPeeringSinglePageAsync(
                    resourceGroupName,
                    peeringName,
                    prefix,
                    asPath,
                    originAsValidationState,
                    rpkiValidationState,
                    skipToken,
                    context),
            nextLink -> listByPeeringNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PeeringReceivedRouteInner> listByPeering(String resourceGroupName, String peeringName) {
        final String prefix = null;
        final String asPath = null;
        final String originAsValidationState = null;
        final String rpkiValidationState = null;
        final String skipToken = null;
        return new PagedIterable<>(
            listByPeeringAsync(
                resourceGroupName,
                peeringName,
                prefix,
                asPath,
                originAsValidationState,
                rpkiValidationState,
                skipToken));
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PeeringReceivedRouteInner> listByPeering(
        String resourceGroupName,
        String peeringName,
        String prefix,
        String asPath,
        String originAsValidationState,
        String rpkiValidationState,
        String skipToken,
        Context context) {
        return new PagedIterable<>(
            listByPeeringAsync(
                resourceGroupName,
                peeringName,
                prefix,
                asPath,
                originAsValidationState,
                rpkiValidationState,
                skipToken,
                context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PeeringReceivedRouteInner>> listByPeeringNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByPeeringNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<PeeringReceivedRouteInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of received routes for the peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<PeeringReceivedRouteInner>> listByPeeringNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByPeeringNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
