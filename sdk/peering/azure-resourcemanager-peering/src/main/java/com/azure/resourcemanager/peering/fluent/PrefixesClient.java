// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.peering.fluent.models.PeeringServicePrefixInner;

/** An instance of this class provides access to all the operations defined in PrefixesClient. */
public interface PrefixesClient {
    /**
     * Gets an existing prefix with the specified name under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing prefix with the specified name under the given subscription, resource group and peering
     *     service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringServicePrefixInner get(String resourceGroupName, String peeringServiceName, String prefixName);

    /**
     * Gets an existing prefix with the specified name under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param expand The properties to be expanded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing prefix with the specified name under the given subscription, resource group and peering
     *     service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringServicePrefixInner> getWithResponse(
        String resourceGroupName, String peeringServiceName, String prefixName, String expand, Context context);

    /**
     * Creates a new prefix with the specified name under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param peeringServicePrefix The properties needed to create a prefix.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the peering service prefix class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringServicePrefixInner createOrUpdate(
        String resourceGroupName,
        String peeringServiceName,
        String prefixName,
        PeeringServicePrefixInner peeringServicePrefix);

    /**
     * Creates a new prefix with the specified name under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param peeringServicePrefix The properties needed to create a prefix.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the peering service prefix class.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringServicePrefixInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String peeringServiceName,
        String prefixName,
        PeeringServicePrefixInner peeringServicePrefix,
        Context context);

    /**
     * Deletes an existing prefix with the specified name under the given subscription, resource group and peering
     * service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String peeringServiceName, String prefixName);

    /**
     * Deletes an existing prefix with the specified name under the given subscription, resource group and peering
     * service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param prefixName The name of the prefix.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringServiceName, String prefixName, Context context);

    /**
     * Lists all prefixes under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peering service prefixes.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringServicePrefixInner> listByPeeringService(String resourceGroupName, String peeringServiceName);

    /**
     * Lists all prefixes under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param expand The properties to be expanded.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peering service prefixes.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringServicePrefixInner> listByPeeringService(
        String resourceGroupName, String peeringServiceName, String expand, Context context);
}
