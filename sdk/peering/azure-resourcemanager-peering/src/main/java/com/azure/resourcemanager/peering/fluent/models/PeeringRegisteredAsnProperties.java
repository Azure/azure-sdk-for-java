// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.io.IOException;

/**
 * The properties that define a registered ASN.
 */
@Fluent
public final class PeeringRegisteredAsnProperties implements JsonSerializable<PeeringRegisteredAsnProperties> {
    /*
     * The customer's ASN from which traffic originates.
     */
    private Integer asn;

    /*
     * The peering service prefix key that is to be shared with the customer.
     */
    private String peeringServicePrefixKey;

    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of PeeringRegisteredAsnProperties class.
     */
    public PeeringRegisteredAsnProperties() {
    }

    /**
     * Get the asn property: The customer's ASN from which traffic originates.
     * 
     * @return the asn value.
     */
    public Integer asn() {
        return this.asn;
    }

    /**
     * Set the asn property: The customer's ASN from which traffic originates.
     * 
     * @param asn the asn value to set.
     * @return the PeeringRegisteredAsnProperties object itself.
     */
    public PeeringRegisteredAsnProperties withAsn(Integer asn) {
        this.asn = asn;
        return this;
    }

    /**
     * Get the peeringServicePrefixKey property: The peering service prefix key that is to be shared with the customer.
     * 
     * @return the peeringServicePrefixKey value.
     */
    public String peeringServicePrefixKey() {
        return this.peeringServicePrefixKey;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("asn", this.asn);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringRegisteredAsnProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringRegisteredAsnProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeeringRegisteredAsnProperties.
     */
    public static PeeringRegisteredAsnProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringRegisteredAsnProperties deserializedPeeringRegisteredAsnProperties
                = new PeeringRegisteredAsnProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("asn".equals(fieldName)) {
                    deserializedPeeringRegisteredAsnProperties.asn = reader.getNullable(JsonReader::getInt);
                } else if ("peeringServicePrefixKey".equals(fieldName)) {
                    deserializedPeeringRegisteredAsnProperties.peeringServicePrefixKey = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPeeringRegisteredAsnProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringRegisteredAsnProperties;
        });
    }
}
