// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The SKU that defines the tier and kind of the peering.
 */
@Fluent
public final class PeeringSku implements JsonSerializable<PeeringSku> {
    /*
     * The name of the peering SKU.
     */
    private String name;

    /*
     * The tier of the peering SKU.
     */
    private Tier tier;

    /*
     * The family of the peering SKU.
     */
    private Family family;

    /*
     * The size of the peering SKU.
     */
    private Size size;

    /**
     * Creates an instance of PeeringSku class.
     */
    public PeeringSku() {
    }

    /**
     * Get the name property: The name of the peering SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the peering SKU.
     * 
     * @param name the name value to set.
     * @return the PeeringSku object itself.
     */
    public PeeringSku withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the tier property: The tier of the peering SKU.
     * 
     * @return the tier value.
     */
    public Tier tier() {
        return this.tier;
    }

    /**
     * Set the tier property: The tier of the peering SKU.
     * 
     * @param tier the tier value to set.
     * @return the PeeringSku object itself.
     */
    public PeeringSku withTier(Tier tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get the family property: The family of the peering SKU.
     * 
     * @return the family value.
     */
    public Family family() {
        return this.family;
    }

    /**
     * Set the family property: The family of the peering SKU.
     * 
     * @param family the family value to set.
     * @return the PeeringSku object itself.
     */
    public PeeringSku withFamily(Family family) {
        this.family = family;
        return this;
    }

    /**
     * Get the size property: The size of the peering SKU.
     * 
     * @return the size value.
     */
    public Size size() {
        return this.size;
    }

    /**
     * Set the size property: The size of the peering SKU.
     * 
     * @param size the size value to set.
     * @return the PeeringSku object itself.
     */
    public PeeringSku withSize(Size size) {
        this.size = size;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("tier", this.tier == null ? null : this.tier.toString());
        jsonWriter.writeStringField("family", this.family == null ? null : this.family.toString());
        jsonWriter.writeStringField("size", this.size == null ? null : this.size.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringSku from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringSku if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the PeeringSku.
     */
    public static PeeringSku fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringSku deserializedPeeringSku = new PeeringSku();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPeeringSku.name = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedPeeringSku.tier = Tier.fromString(reader.getString());
                } else if ("family".equals(fieldName)) {
                    deserializedPeeringSku.family = Family.fromString(reader.getString());
                } else if ("size".equals(fieldName)) {
                    deserializedPeeringSku.size = Size.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringSku;
        });
    }
}
