// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.peering.fluent.models.PeeringInner;
import java.util.Map;

/** An immutable client-side representation of Peering. */
public interface Peering {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the sku property: The SKU that defines the tier and kind of the peering.
     *
     * @return the sku value.
     */
    PeeringSku sku();

    /**
     * Gets the kind property: The kind of the peering.
     *
     * @return the kind value.
     */
    Kind kind();

    /**
     * Gets the location property: The location of the resource.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: The resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the direct property: The properties that define a direct peering.
     *
     * @return the direct value.
     */
    PeeringPropertiesDirect direct();

    /**
     * Gets the exchange property: The properties that define an exchange peering.
     *
     * @return the exchange value.
     */
    PeeringPropertiesExchange exchange();

    /**
     * Gets the peeringLocation property: The location of the peering.
     *
     * @return the peeringLocation value.
     */
    String peeringLocation();

    /**
     * Gets the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.peering.fluent.models.PeeringInner object.
     *
     * @return the inner object.
     */
    PeeringInner innerModel();

    /** The entirety of the Peering definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithSku,
            DefinitionStages.WithKind,
            DefinitionStages.WithCreate {
    }
    /** The Peering definition stages. */
    interface DefinitionStages {
        /** The first stage of the Peering definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the Peering definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The location of the resource.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The location of the resource.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the Peering definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithSku withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the Peering definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The SKU that defines the tier and kind of the peering..
             *
             * @param sku The SKU that defines the tier and kind of the peering.
             * @return the next definition stage.
             */
            WithKind withSku(PeeringSku sku);
        }
        /** The stage of the Peering definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: The kind of the peering..
             *
             * @param kind The kind of the peering.
             * @return the next definition stage.
             */
            WithCreate withKind(Kind kind);
        }
        /**
         * The stage of the Peering definition which contains all the minimum required properties for the resource to be
         * created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithDirect,
                DefinitionStages.WithExchange,
                DefinitionStages.WithPeeringLocation {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            Peering create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            Peering create(Context context);
        }
        /** The stage of the Peering definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The resource tags..
             *
             * @param tags The resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the Peering definition allowing to specify direct. */
        interface WithDirect {
            /**
             * Specifies the direct property: The properties that define a direct peering..
             *
             * @param direct The properties that define a direct peering.
             * @return the next definition stage.
             */
            WithCreate withDirect(PeeringPropertiesDirect direct);
        }
        /** The stage of the Peering definition allowing to specify exchange. */
        interface WithExchange {
            /**
             * Specifies the exchange property: The properties that define an exchange peering..
             *
             * @param exchange The properties that define an exchange peering.
             * @return the next definition stage.
             */
            WithCreate withExchange(PeeringPropertiesExchange exchange);
        }
        /** The stage of the Peering definition allowing to specify peeringLocation. */
        interface WithPeeringLocation {
            /**
             * Specifies the peeringLocation property: The location of the peering..
             *
             * @param peeringLocation The location of the peering.
             * @return the next definition stage.
             */
            WithCreate withPeeringLocation(String peeringLocation);
        }
    }
    /**
     * Begins update for the Peering resource.
     *
     * @return the stage of resource update.
     */
    Peering.Update update();

    /** The template for Peering update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        Peering apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        Peering apply(Context context);
    }
    /** The Peering update stages. */
    interface UpdateStages {
        /** The stage of the Peering update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Gets or sets the tags, a dictionary of descriptors arm object.
             *
             * @param tags Gets or sets the tags, a dictionary of descriptors arm object.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    Peering refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    Peering refresh(Context context);
}
