// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that define connectivity to the Peering Service Location.
 */
@Fluent
public final class PeeringServiceLocationProperties implements JsonSerializable<PeeringServiceLocationProperties> {
    /*
     * Country of the customer
     */
    private String country;

    /*
     * State of the customer
     */
    private String state;

    /*
     * Azure region for the location
     */
    private String azureRegion;

    /**
     * Creates an instance of PeeringServiceLocationProperties class.
     */
    public PeeringServiceLocationProperties() {
    }

    /**
     * Get the country property: Country of the customer.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: Country of the customer.
     * 
     * @param country the country value to set.
     * @return the PeeringServiceLocationProperties object itself.
     */
    public PeeringServiceLocationProperties withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the state property: State of the customer.
     * 
     * @return the state value.
     */
    public String state() {
        return this.state;
    }

    /**
     * Set the state property: State of the customer.
     * 
     * @param state the state value to set.
     * @return the PeeringServiceLocationProperties object itself.
     */
    public PeeringServiceLocationProperties withState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the azureRegion property: Azure region for the location.
     * 
     * @return the azureRegion value.
     */
    public String azureRegion() {
        return this.azureRegion;
    }

    /**
     * Set the azureRegion property: Azure region for the location.
     * 
     * @param azureRegion the azureRegion value to set.
     * @return the PeeringServiceLocationProperties object itself.
     */
    public PeeringServiceLocationProperties withAzureRegion(String azureRegion) {
        this.azureRegion = azureRegion;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("state", this.state);
        jsonWriter.writeStringField("azureRegion", this.azureRegion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringServiceLocationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringServiceLocationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeeringServiceLocationProperties.
     */
    public static PeeringServiceLocationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringServiceLocationProperties deserializedPeeringServiceLocationProperties
                = new PeeringServiceLocationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("country".equals(fieldName)) {
                    deserializedPeeringServiceLocationProperties.country = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedPeeringServiceLocationProperties.state = reader.getString();
                } else if ("azureRegion".equals(fieldName)) {
                    deserializedPeeringServiceLocationProperties.azureRegion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringServiceLocationProperties;
        });
    }
}
