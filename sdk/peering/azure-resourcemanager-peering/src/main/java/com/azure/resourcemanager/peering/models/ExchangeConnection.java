// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties that define an exchange connection.
 */
@Fluent
public final class ExchangeConnection implements JsonSerializable<ExchangeConnection> {
    /*
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     */
    private Integer peeringDBFacilityId;

    /*
     * The state of the connection.
     */
    private ConnectionState connectionState;

    /*
     * The BGP session associated with the connection.
     */
    private BgpSession bgpSession;

    /*
     * The unique identifier (GUID) for the connection.
     */
    private String connectionIdentifier;

    /*
     * The error message related to the connection state, if any.
     */
    private String errorMessage;

    /**
     * Creates an instance of ExchangeConnection class.
     */
    public ExchangeConnection() {
    }

    /**
     * Get the peeringDBFacilityId property: The PeeringDB.com ID of the facility at which the connection has to be set
     * up.
     * 
     * @return the peeringDBFacilityId value.
     */
    public Integer peeringDBFacilityId() {
        return this.peeringDBFacilityId;
    }

    /**
     * Set the peeringDBFacilityId property: The PeeringDB.com ID of the facility at which the connection has to be set
     * up.
     * 
     * @param peeringDBFacilityId the peeringDBFacilityId value to set.
     * @return the ExchangeConnection object itself.
     */
    public ExchangeConnection withPeeringDBFacilityId(Integer peeringDBFacilityId) {
        this.peeringDBFacilityId = peeringDBFacilityId;
        return this;
    }

    /**
     * Get the connectionState property: The state of the connection.
     * 
     * @return the connectionState value.
     */
    public ConnectionState connectionState() {
        return this.connectionState;
    }

    /**
     * Get the bgpSession property: The BGP session associated with the connection.
     * 
     * @return the bgpSession value.
     */
    public BgpSession bgpSession() {
        return this.bgpSession;
    }

    /**
     * Set the bgpSession property: The BGP session associated with the connection.
     * 
     * @param bgpSession the bgpSession value to set.
     * @return the ExchangeConnection object itself.
     */
    public ExchangeConnection withBgpSession(BgpSession bgpSession) {
        this.bgpSession = bgpSession;
        return this;
    }

    /**
     * Get the connectionIdentifier property: The unique identifier (GUID) for the connection.
     * 
     * @return the connectionIdentifier value.
     */
    public String connectionIdentifier() {
        return this.connectionIdentifier;
    }

    /**
     * Set the connectionIdentifier property: The unique identifier (GUID) for the connection.
     * 
     * @param connectionIdentifier the connectionIdentifier value to set.
     * @return the ExchangeConnection object itself.
     */
    public ExchangeConnection withConnectionIdentifier(String connectionIdentifier) {
        this.connectionIdentifier = connectionIdentifier;
        return this;
    }

    /**
     * Get the errorMessage property: The error message related to the connection state, if any.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bgpSession() != null) {
            bgpSession().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("peeringDBFacilityId", this.peeringDBFacilityId);
        jsonWriter.writeJsonField("bgpSession", this.bgpSession);
        jsonWriter.writeStringField("connectionIdentifier", this.connectionIdentifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExchangeConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExchangeConnection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExchangeConnection.
     */
    public static ExchangeConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExchangeConnection deserializedExchangeConnection = new ExchangeConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("peeringDBFacilityId".equals(fieldName)) {
                    deserializedExchangeConnection.peeringDBFacilityId = reader.getNullable(JsonReader::getInt);
                } else if ("connectionState".equals(fieldName)) {
                    deserializedExchangeConnection.connectionState = ConnectionState.fromString(reader.getString());
                } else if ("bgpSession".equals(fieldName)) {
                    deserializedExchangeConnection.bgpSession = BgpSession.fromJson(reader);
                } else if ("connectionIdentifier".equals(fieldName)) {
                    deserializedExchangeConnection.connectionIdentifier = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedExchangeConnection.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExchangeConnection;
        });
    }
}
