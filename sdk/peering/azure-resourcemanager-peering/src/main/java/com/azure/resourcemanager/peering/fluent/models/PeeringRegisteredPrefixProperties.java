// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.peering.models.PrefixValidationState;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties that define a registered prefix. */
@Fluent
public final class PeeringRegisteredPrefixProperties {
    /*
     * The customer's prefix from which traffic originates.
     */
    @JsonProperty(value = "prefix")
    private String prefix;

    /*
     * The prefix validation state.
     */
    @JsonProperty(value = "prefixValidationState", access = JsonProperty.Access.WRITE_ONLY)
    private PrefixValidationState prefixValidationState;

    /*
     * The peering service prefix key that is to be shared with the customer.
     */
    @JsonProperty(value = "peeringServicePrefixKey", access = JsonProperty.Access.WRITE_ONLY)
    private String peeringServicePrefixKey;

    /*
     * The error message associated with the validation state, if any.
     */
    @JsonProperty(value = "errorMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String errorMessage;

    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /** Creates an instance of PeeringRegisteredPrefixProperties class. */
    public PeeringRegisteredPrefixProperties() {
    }

    /**
     * Get the prefix property: The customer's prefix from which traffic originates.
     *
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: The customer's prefix from which traffic originates.
     *
     * @param prefix the prefix value to set.
     * @return the PeeringRegisteredPrefixProperties object itself.
     */
    public PeeringRegisteredPrefixProperties withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the prefixValidationState property: The prefix validation state.
     *
     * @return the prefixValidationState value.
     */
    public PrefixValidationState prefixValidationState() {
        return this.prefixValidationState;
    }

    /**
     * Get the peeringServicePrefixKey property: The peering service prefix key that is to be shared with the customer.
     *
     * @return the peeringServicePrefixKey value.
     */
    public String peeringServicePrefixKey() {
        return this.peeringServicePrefixKey;
    }

    /**
     * Get the errorMessage property: The error message associated with the validation state, if any.
     *
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
