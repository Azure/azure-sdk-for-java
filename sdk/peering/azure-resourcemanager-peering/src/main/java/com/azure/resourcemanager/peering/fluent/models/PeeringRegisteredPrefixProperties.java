// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.peering.models.PrefixValidationState;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import java.io.IOException;

/**
 * The properties that define a registered prefix.
 */
@Fluent
public final class PeeringRegisteredPrefixProperties implements JsonSerializable<PeeringRegisteredPrefixProperties> {
    /*
     * The customer's prefix from which traffic originates.
     */
    private String prefix;

    /*
     * The prefix validation state.
     */
    private PrefixValidationState prefixValidationState;

    /*
     * The peering service prefix key that is to be shared with the customer.
     */
    private String peeringServicePrefixKey;

    /*
     * The error message associated with the validation state, if any.
     */
    private String errorMessage;

    /*
     * The provisioning state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of PeeringRegisteredPrefixProperties class.
     */
    public PeeringRegisteredPrefixProperties() {
    }

    /**
     * Get the prefix property: The customer's prefix from which traffic originates.
     * 
     * @return the prefix value.
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the prefix property: The customer's prefix from which traffic originates.
     * 
     * @param prefix the prefix value to set.
     * @return the PeeringRegisteredPrefixProperties object itself.
     */
    public PeeringRegisteredPrefixProperties withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the prefixValidationState property: The prefix validation state.
     * 
     * @return the prefixValidationState value.
     */
    public PrefixValidationState prefixValidationState() {
        return this.prefixValidationState;
    }

    /**
     * Get the peeringServicePrefixKey property: The peering service prefix key that is to be shared with the customer.
     * 
     * @return the peeringServicePrefixKey value.
     */
    public String peeringServicePrefixKey() {
        return this.peeringServicePrefixKey;
    }

    /**
     * Get the errorMessage property: The error message associated with the validation state, if any.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("prefix", this.prefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PeeringRegisteredPrefixProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PeeringRegisteredPrefixProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PeeringRegisteredPrefixProperties.
     */
    public static PeeringRegisteredPrefixProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PeeringRegisteredPrefixProperties deserializedPeeringRegisteredPrefixProperties
                = new PeeringRegisteredPrefixProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("prefix".equals(fieldName)) {
                    deserializedPeeringRegisteredPrefixProperties.prefix = reader.getString();
                } else if ("prefixValidationState".equals(fieldName)) {
                    deserializedPeeringRegisteredPrefixProperties.prefixValidationState
                        = PrefixValidationState.fromString(reader.getString());
                } else if ("peeringServicePrefixKey".equals(fieldName)) {
                    deserializedPeeringRegisteredPrefixProperties.peeringServicePrefixKey = reader.getString();
                } else if ("errorMessage".equals(fieldName)) {
                    deserializedPeeringRegisteredPrefixProperties.errorMessage = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPeeringRegisteredPrefixProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPeeringRegisteredPrefixProperties;
        });
    }
}
