// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The properties that define a Connection Monitor Test. */
@Fluent
public final class ConnectionMonitorTestProperties {
    /*
     * The Connection Monitor test source agent
     */
    @JsonProperty(value = "sourceAgent")
    private String sourceAgent;

    /*
     * The Connection Monitor test destination
     */
    @JsonProperty(value = "destination")
    private String destination;

    /*
     * The Connection Monitor test destination port
     */
    @JsonProperty(value = "destinationPort")
    private Integer destinationPort;

    /*
     * The Connection Monitor test frequency in seconds
     */
    @JsonProperty(value = "testFrequencyInSec")
    private Integer testFrequencyInSec;

    /*
     * The flag that indicates if the Connection Monitor test is successful or not.
     */
    @JsonProperty(value = "isTestSuccessful", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean isTestSuccessful;

    /*
     * The path representing the Connection Monitor test.
     */
    @JsonProperty(value = "path", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> path;

    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the sourceAgent property: The Connection Monitor test source agent.
     *
     * @return the sourceAgent value.
     */
    public String sourceAgent() {
        return this.sourceAgent;
    }

    /**
     * Set the sourceAgent property: The Connection Monitor test source agent.
     *
     * @param sourceAgent the sourceAgent value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withSourceAgent(String sourceAgent) {
        this.sourceAgent = sourceAgent;
        return this;
    }

    /**
     * Get the destination property: The Connection Monitor test destination.
     *
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: The Connection Monitor test destination.
     *
     * @param destination the destination value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the destinationPort property: The Connection Monitor test destination port.
     *
     * @return the destinationPort value.
     */
    public Integer destinationPort() {
        return this.destinationPort;
    }

    /**
     * Set the destinationPort property: The Connection Monitor test destination port.
     *
     * @param destinationPort the destinationPort value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withDestinationPort(Integer destinationPort) {
        this.destinationPort = destinationPort;
        return this;
    }

    /**
     * Get the testFrequencyInSec property: The Connection Monitor test frequency in seconds.
     *
     * @return the testFrequencyInSec value.
     */
    public Integer testFrequencyInSec() {
        return this.testFrequencyInSec;
    }

    /**
     * Set the testFrequencyInSec property: The Connection Monitor test frequency in seconds.
     *
     * @param testFrequencyInSec the testFrequencyInSec value to set.
     * @return the ConnectionMonitorTestProperties object itself.
     */
    public ConnectionMonitorTestProperties withTestFrequencyInSec(Integer testFrequencyInSec) {
        this.testFrequencyInSec = testFrequencyInSec;
        return this;
    }

    /**
     * Get the isTestSuccessful property: The flag that indicates if the Connection Monitor test is successful or not.
     *
     * @return the isTestSuccessful value.
     */
    public Boolean isTestSuccessful() {
        return this.isTestSuccessful;
    }

    /**
     * Get the path property: The path representing the Connection Monitor test.
     *
     * @return the path value.
     */
    public List<String> path() {
        return this.path;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
