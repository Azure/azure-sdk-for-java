// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ConnectionMonitorTests. */
public interface ConnectionMonitorTests {
    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service.
     */
    ConnectionMonitorTest get(String resourceGroupName, String peeringServiceName, String connectionMonitorTestName);

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response}.
     */
    Response<ConnectionMonitorTest> getWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context);

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String peeringServiceName, String connectionMonitorTestName);

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param connectionMonitorTestName The name of the connection monitor test.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringServiceName, String connectionMonitorTestName, Context context);

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ConnectionMonitorTest> listByPeeringService(String resourceGroupName, String peeringServiceName);

    /**
     * Lists all connection monitor tests under the given subscription, resource group and peering service.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringServiceName The name of the peering service.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of [T] as paginated response with {@link PagedIterable}.
     */
    PagedIterable<ConnectionMonitorTest> listByPeeringService(
        String resourceGroupName, String peeringServiceName, Context context);

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response}.
     */
    ConnectionMonitorTest getById(String id);

    /**
     * Gets an existing connection monitor test with the specified name under the given subscription, resource group and
     * peering service.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing connection monitor test with the specified name under the given subscription, resource group
     *     and peering service along with {@link Response}.
     */
    Response<ConnectionMonitorTest> getByIdWithResponse(String id, Context context);

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Deletes an existing connection monitor test with the specified name under the given subscription, resource group
     * and peering service.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ConnectionMonitorTest resource.
     *
     * @param name resource name.
     * @return the first stage of the new ConnectionMonitorTest definition.
     */
    ConnectionMonitorTest.DefinitionStages.Blank define(String name);
}
