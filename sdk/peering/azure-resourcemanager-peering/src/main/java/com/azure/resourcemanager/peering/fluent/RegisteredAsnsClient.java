// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.peering.fluent.models.PeeringRegisteredAsnInner;

/** An instance of this class provides access to all the operations defined in RegisteredAsnsClient. */
public interface RegisteredAsnsClient {
    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing registered ASN with the specified name under the given subscription, resource group and
     *     peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringRegisteredAsnInner get(String resourceGroupName, String peeringName, String registeredAsnName);

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an existing registered ASN with the specified name under the given subscription, resource group and
     *     peering.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringRegisteredAsnInner> getWithResponse(
        String resourceGroupName, String peeringName, String registeredAsnName, Context context);

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param registeredAsn The properties needed to create a registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the customer's ASN that is registered by the peering service provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PeeringRegisteredAsnInner createOrUpdate(
        String resourceGroupName,
        String peeringName,
        String registeredAsnName,
        PeeringRegisteredAsnInner registeredAsn);

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param registeredAsn The properties needed to create a registered ASN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the customer's ASN that is registered by the peering service provider.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PeeringRegisteredAsnInner> createOrUpdateWithResponse(
        String resourceGroupName,
        String peeringName,
        String registeredAsnName,
        PeeringRegisteredAsnInner registeredAsn,
        Context context);

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and
     * peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String peeringName, String registeredAsnName);

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and
     * peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(
        String resourceGroupName, String peeringName, String registeredAsnName, Context context);

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peering registered ASNs.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringRegisteredAsnInner> listByPeering(String resourceGroupName, String peeringName);

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the paginated list of peering registered ASNs.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PeeringRegisteredAsnInner> listByPeering(
        String resourceGroupName, String peeringName, Context context);
}
