// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.peering.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.peering.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The customer's ASN that is registered by the peering service provider. */
@JsonFlatten
@Fluent
public class PeeringRegisteredAsnInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(PeeringRegisteredAsnInner.class);

    /*
     * The customer's ASN from which traffic originates.
     */
    @JsonProperty(value = "properties.asn")
    private Integer asn;

    /*
     * The peering service prefix key that is to be shared with the customer.
     */
    @JsonProperty(value = "properties.peeringServicePrefixKey", access = JsonProperty.Access.WRITE_ONLY)
    private String peeringServicePrefixKey;

    /*
     * The provisioning state of the resource.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the asn property: The customer's ASN from which traffic originates.
     *
     * @return the asn value.
     */
    public Integer asn() {
        return this.asn;
    }

    /**
     * Set the asn property: The customer's ASN from which traffic originates.
     *
     * @param asn the asn value to set.
     * @return the PeeringRegisteredAsnInner object itself.
     */
    public PeeringRegisteredAsnInner withAsn(Integer asn) {
        this.asn = asn;
        return this;
    }

    /**
     * Get the peeringServicePrefixKey property: The peering service prefix key that is to be shared with the customer.
     *
     * @return the peeringServicePrefixKey value.
     */
    public String peeringServicePrefixKey() {
        return this.peeringServicePrefixKey;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
