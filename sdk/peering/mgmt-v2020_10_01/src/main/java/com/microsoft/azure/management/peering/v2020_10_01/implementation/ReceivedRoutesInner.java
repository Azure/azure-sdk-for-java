/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2020_10_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.peering.v2020_10_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ReceivedRoutes.
 */
public class ReceivedRoutesInner {
    /** The Retrofit service to perform REST calls. */
    private ReceivedRoutesService service;
    /** The service client containing this operation class. */
    private PeeringManagementClientImpl client;

    /**
     * Initializes an instance of ReceivedRoutesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ReceivedRoutesInner(Retrofit retrofit, PeeringManagementClientImpl client) {
        this.service = retrofit.create(ReceivedRoutesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ReceivedRoutes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ReceivedRoutesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_10_01.ReceivedRoutes listByPeering" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/receivedRoutes")
        Observable<Response<ResponseBody>> listByPeering(@Path("resourceGroupName") String resourceGroupName, @Path("peeringName") String peeringName, @Path("subscriptionId") String subscriptionId, @Query("prefix") String prefix, @Query("asPath") String asPath, @Query("originAsValidationState") String originAsValidationState, @Query("rpkiValidationState") String rpkiValidationState, @Query("$skipToken") String skipToken, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_10_01.ReceivedRoutes listByPeeringNext" })
        @GET
        Observable<Response<ResponseBody>> listByPeeringNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringReceivedRouteInner&gt; object if successful.
     */
    public PagedList<PeeringReceivedRouteInner> listByPeering(final String resourceGroupName, final String peeringName) {
        ServiceResponse<Page<PeeringReceivedRouteInner>> response = listByPeeringSinglePageAsync(resourceGroupName, peeringName).toBlocking().single();
        return new PagedList<PeeringReceivedRouteInner>(response.body()) {
            @Override
            public Page<PeeringReceivedRouteInner> nextPage(String nextPageLink) {
                return listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringReceivedRouteInner>> listByPeeringAsync(final String resourceGroupName, final String peeringName, final ListOperationCallback<PeeringReceivedRouteInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPeeringSinglePageAsync(resourceGroupName, peeringName),
            new Func1<String, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(String nextPageLink) {
                    return listByPeeringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringReceivedRouteInner&gt; object
     */
    public Observable<Page<PeeringReceivedRouteInner>> listByPeeringAsync(final String resourceGroupName, final String peeringName) {
        return listByPeeringWithServiceResponseAsync(resourceGroupName, peeringName)
            .map(new Func1<ServiceResponse<Page<PeeringReceivedRouteInner>>, Page<PeeringReceivedRouteInner>>() {
                @Override
                public Page<PeeringReceivedRouteInner> call(ServiceResponse<Page<PeeringReceivedRouteInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringReceivedRouteInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> listByPeeringWithServiceResponseAsync(final String resourceGroupName, final String peeringName) {
        return listByPeeringSinglePageAsync(resourceGroupName, peeringName)
            .concatMap(new Func1<ServiceResponse<Page<PeeringReceivedRouteInner>>, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(ServiceResponse<Page<PeeringReceivedRouteInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPeeringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringReceivedRouteInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> listByPeeringSinglePageAsync(final String resourceGroupName, final String peeringName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String prefix = null;
        final String asPath = null;
        final String originAsValidationState = null;
        final String rpkiValidationState = null;
        final String skipToken = null;
        return service.listByPeering(resourceGroupName, peeringName, this.client.subscriptionId(), prefix, asPath, originAsValidationState, rpkiValidationState, skipToken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringReceivedRouteInner>> result = listByPeeringDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringReceivedRouteInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringReceivedRouteInner&gt; object if successful.
     */
    public PagedList<PeeringReceivedRouteInner> listByPeering(final String resourceGroupName, final String peeringName, final String prefix, final String asPath, final String originAsValidationState, final String rpkiValidationState, final String skipToken) {
        ServiceResponse<Page<PeeringReceivedRouteInner>> response = listByPeeringSinglePageAsync(resourceGroupName, peeringName, prefix, asPath, originAsValidationState, rpkiValidationState, skipToken).toBlocking().single();
        return new PagedList<PeeringReceivedRouteInner>(response.body()) {
            @Override
            public Page<PeeringReceivedRouteInner> nextPage(String nextPageLink) {
                return listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringReceivedRouteInner>> listByPeeringAsync(final String resourceGroupName, final String peeringName, final String prefix, final String asPath, final String originAsValidationState, final String rpkiValidationState, final String skipToken, final ListOperationCallback<PeeringReceivedRouteInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPeeringSinglePageAsync(resourceGroupName, peeringName, prefix, asPath, originAsValidationState, rpkiValidationState, skipToken),
            new Func1<String, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(String nextPageLink) {
                    return listByPeeringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringReceivedRouteInner&gt; object
     */
    public Observable<Page<PeeringReceivedRouteInner>> listByPeeringAsync(final String resourceGroupName, final String peeringName, final String prefix, final String asPath, final String originAsValidationState, final String rpkiValidationState, final String skipToken) {
        return listByPeeringWithServiceResponseAsync(resourceGroupName, peeringName, prefix, asPath, originAsValidationState, rpkiValidationState, skipToken)
            .map(new Func1<ServiceResponse<Page<PeeringReceivedRouteInner>>, Page<PeeringReceivedRouteInner>>() {
                @Override
                public Page<PeeringReceivedRouteInner> call(ServiceResponse<Page<PeeringReceivedRouteInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param prefix The optional prefix that can be used to filter the routes.
     * @param asPath The optional AS path that can be used to filter the routes.
     * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
     * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
     * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringReceivedRouteInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> listByPeeringWithServiceResponseAsync(final String resourceGroupName, final String peeringName, final String prefix, final String asPath, final String originAsValidationState, final String rpkiValidationState, final String skipToken) {
        return listByPeeringSinglePageAsync(resourceGroupName, peeringName, prefix, asPath, originAsValidationState, rpkiValidationState, skipToken)
            .concatMap(new Func1<ServiceResponse<Page<PeeringReceivedRouteInner>>, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(ServiceResponse<Page<PeeringReceivedRouteInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPeeringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param peeringName The name of the peering.
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param prefix The optional prefix that can be used to filter the routes.
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param asPath The optional AS path that can be used to filter the routes.
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param originAsValidationState The optional origin AS validation state that can be used to filter the routes.
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param rpkiValidationState The optional RPKI validation state that can be used to filter the routes.
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param skipToken The optional page continuation token that is used in the event of paginated result.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringReceivedRouteInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> listByPeeringSinglePageAsync(final String resourceGroupName, final String peeringName, final String prefix, final String asPath, final String originAsValidationState, final String rpkiValidationState, final String skipToken) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByPeering(resourceGroupName, peeringName, this.client.subscriptionId(), prefix, asPath, originAsValidationState, rpkiValidationState, skipToken, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringReceivedRouteInner>> result = listByPeeringDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringReceivedRouteInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringReceivedRouteInner>> listByPeeringDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringReceivedRouteInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringReceivedRouteInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringReceivedRouteInner&gt; object if successful.
     */
    public PagedList<PeeringReceivedRouteInner> listByPeeringNext(final String nextPageLink) {
        ServiceResponse<Page<PeeringReceivedRouteInner>> response = listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PeeringReceivedRouteInner>(response.body()) {
            @Override
            public Page<PeeringReceivedRouteInner> nextPage(String nextPageLink) {
                return listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringReceivedRouteInner>> listByPeeringNextAsync(final String nextPageLink, final ServiceFuture<List<PeeringReceivedRouteInner>> serviceFuture, final ListOperationCallback<PeeringReceivedRouteInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPeeringNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(String nextPageLink) {
                    return listByPeeringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringReceivedRouteInner&gt; object
     */
    public Observable<Page<PeeringReceivedRouteInner>> listByPeeringNextAsync(final String nextPageLink) {
        return listByPeeringNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PeeringReceivedRouteInner>>, Page<PeeringReceivedRouteInner>>() {
                @Override
                public Page<PeeringReceivedRouteInner> call(ServiceResponse<Page<PeeringReceivedRouteInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringReceivedRouteInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> listByPeeringNextWithServiceResponseAsync(final String nextPageLink) {
        return listByPeeringNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PeeringReceivedRouteInner>>, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(ServiceResponse<Page<PeeringReceivedRouteInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPeeringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the prefixes received over the specified peering under the given subscription and resource group.
     *
    ServiceResponse<PageImpl<PeeringReceivedRouteInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringReceivedRouteInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> listByPeeringNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByPeeringNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringReceivedRouteInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringReceivedRouteInner>> result = listByPeeringNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringReceivedRouteInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringReceivedRouteInner>> listByPeeringNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringReceivedRouteInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringReceivedRouteInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
