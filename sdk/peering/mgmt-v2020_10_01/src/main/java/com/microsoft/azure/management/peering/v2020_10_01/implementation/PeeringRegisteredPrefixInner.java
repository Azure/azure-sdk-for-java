/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2020_10_01.implementation;

import com.microsoft.azure.management.peering.v2020_10_01.PrefixValidationState;
import com.microsoft.azure.management.peering.v2020_10_01.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * The customer's prefix that is registered by the peering service provider.
 */
@JsonFlatten
public class PeeringRegisteredPrefixInner extends ProxyResource {
    /**
     * The customer's prefix from which traffic originates.
     */
    @JsonProperty(value = "properties.prefix")
    private String prefix;

    /**
     * The prefix validation state. Possible values include: 'None', 'Invalid',
     * 'Verified', 'Failed', 'Pending', 'Warning', 'Unknown'.
     */
    @JsonProperty(value = "properties.prefixValidationState", access = JsonProperty.Access.WRITE_ONLY)
    private PrefixValidationState prefixValidationState;

    /**
     * The peering service prefix key that is to be shared with the customer.
     */
    @JsonProperty(value = "properties.peeringServicePrefixKey", access = JsonProperty.Access.WRITE_ONLY)
    private String peeringServicePrefixKey;

    /**
     * The error message associated with the validation state, if any.
     */
    @JsonProperty(value = "properties.errorMessage", access = JsonProperty.Access.WRITE_ONLY)
    private String errorMessage;

    /**
     * The provisioning state of the resource. Possible values include:
     * 'Succeeded', 'Updating', 'Deleting', 'Failed'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the customer's prefix from which traffic originates.
     *
     * @return the prefix value
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set the customer's prefix from which traffic originates.
     *
     * @param prefix the prefix value to set
     * @return the PeeringRegisteredPrefixInner object itself.
     */
    public PeeringRegisteredPrefixInner withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the prefix validation state. Possible values include: 'None', 'Invalid', 'Verified', 'Failed', 'Pending', 'Warning', 'Unknown'.
     *
     * @return the prefixValidationState value
     */
    public PrefixValidationState prefixValidationState() {
        return this.prefixValidationState;
    }

    /**
     * Get the peering service prefix key that is to be shared with the customer.
     *
     * @return the peeringServicePrefixKey value
     */
    public String peeringServicePrefixKey() {
        return this.peeringServicePrefixKey;
    }

    /**
     * Get the error message associated with the validation state, if any.
     *
     * @return the errorMessage value
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Get the provisioning state of the resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

}
