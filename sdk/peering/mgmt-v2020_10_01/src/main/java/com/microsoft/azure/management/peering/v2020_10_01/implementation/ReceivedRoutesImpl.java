/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.peering.v2020_10_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.peering.v2020_10_01.ReceivedRoutes;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.peering.v2020_10_01.PeeringReceivedRoute;

class ReceivedRoutesImpl extends WrapperImpl<ReceivedRoutesInner> implements ReceivedRoutes {
    private final PeeringManager manager;

    ReceivedRoutesImpl(PeeringManager manager) {
        super(manager.inner().receivedRoutes());
        this.manager = manager;
    }

    public PeeringManager manager() {
        return this.manager;
    }

    private PeeringReceivedRouteImpl wrapModel(PeeringReceivedRouteInner inner) {
        return  new PeeringReceivedRouteImpl(inner, manager());
    }

    @Override
    public Observable<PeeringReceivedRoute> listByPeeringAsync(final String resourceGroupName, final String peeringName) {
        ReceivedRoutesInner client = this.inner();
        return client.listByPeeringAsync(resourceGroupName, peeringName)
        .flatMapIterable(new Func1<Page<PeeringReceivedRouteInner>, Iterable<PeeringReceivedRouteInner>>() {
            @Override
            public Iterable<PeeringReceivedRouteInner> call(Page<PeeringReceivedRouteInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PeeringReceivedRouteInner, PeeringReceivedRoute>() {
            @Override
            public PeeringReceivedRoute call(PeeringReceivedRouteInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
