/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServicePrefixes;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringServicePeeringServicePrefix;

class PeeringServicePrefixesImpl extends WrapperImpl<PeeringServicePrefixesInner> implements PeeringServicePrefixes {
    private final PeeringManager manager;

    PeeringServicePrefixesImpl(PeeringManager manager) {
        super(manager.inner().peeringServicePrefixes());
        this.manager = manager;
    }

    public PeeringManager manager() {
        return this.manager;
    }

    @Override
    public PeeringServicePeeringServicePrefixImpl define(String name) {
        return wrapModel(name);
    }

    private PeeringServicePeeringServicePrefixImpl wrapModel(PeeringServicePrefixInner inner) {
        return  new PeeringServicePeeringServicePrefixImpl(inner, manager());
    }

    private PeeringServicePeeringServicePrefixImpl wrapModel(String name) {
        return new PeeringServicePeeringServicePrefixImpl(name, this.manager());
    }

    @Override
    public Observable<PeeringServicePeeringServicePrefix> getAsync(String resourceGroupName, String peeringServiceName, String prefixName) {
        PeeringServicePrefixesInner client = this.inner();
        return client.getAsync(resourceGroupName, peeringServiceName, prefixName)
        .flatMap(new Func1<PeeringServicePrefixInner, Observable<PeeringServicePeeringServicePrefix>>() {
            @Override
            public Observable<PeeringServicePeeringServicePrefix> call(PeeringServicePrefixInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((PeeringServicePeeringServicePrefix)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String peeringServiceName, String prefixName) {
        PeeringServicePrefixesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, peeringServiceName, prefixName).toCompletable();
    }

}
