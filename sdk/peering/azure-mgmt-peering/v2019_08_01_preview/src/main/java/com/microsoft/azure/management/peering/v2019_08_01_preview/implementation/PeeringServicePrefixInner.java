/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.microsoft.azure.management.peering.v2019_08_01_preview.PrefixValidationState;
import com.microsoft.azure.management.peering.v2019_08_01_preview.LearnedType;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * The peering service prefix class.
 */
@JsonFlatten
public class PeeringServicePrefixInner extends ProxyResource {
    /**
     * Valid route prefix.
     */
    @JsonProperty(value = "properties.prefix")
    private String prefix;

    /**
     * The prefix validation state. Possible values include: 'None', 'Invalid',
     * 'Verified', 'Failed', 'Pending', 'Unknown'.
     */
    @JsonProperty(value = "properties.prefixValidationState")
    private PrefixValidationState prefixValidationState;

    /**
     * The prefix learned type. Possible values include: 'None', 'ViaPartner',
     * 'ViaSession'.
     */
    @JsonProperty(value = "properties.learnedType")
    private LearnedType learnedType;

    /**
     * The provisioning state of the resource. Possible values include:
     * 'Succeeded', 'Updating', 'Deleting', 'Failed'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get valid route prefix.
     *
     * @return the prefix value
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Set valid route prefix.
     *
     * @param prefix the prefix value to set
     * @return the PeeringServicePrefixInner object itself.
     */
    public PeeringServicePrefixInner withPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Get the prefix validation state. Possible values include: 'None', 'Invalid', 'Verified', 'Failed', 'Pending', 'Unknown'.
     *
     * @return the prefixValidationState value
     */
    public PrefixValidationState prefixValidationState() {
        return this.prefixValidationState;
    }

    /**
     * Set the prefix validation state. Possible values include: 'None', 'Invalid', 'Verified', 'Failed', 'Pending', 'Unknown'.
     *
     * @param prefixValidationState the prefixValidationState value to set
     * @return the PeeringServicePrefixInner object itself.
     */
    public PeeringServicePrefixInner withPrefixValidationState(PrefixValidationState prefixValidationState) {
        this.prefixValidationState = prefixValidationState;
        return this;
    }

    /**
     * Get the prefix learned type. Possible values include: 'None', 'ViaPartner', 'ViaSession'.
     *
     * @return the learnedType value
     */
    public LearnedType learnedType() {
        return this.learnedType;
    }

    /**
     * Set the prefix learned type. Possible values include: 'None', 'ViaPartner', 'ViaSession'.
     *
     * @param learnedType the learnedType value to set
     * @return the PeeringServicePrefixInner object itself.
     */
    public PeeringServicePrefixInner withLearnedType(LearnedType learnedType) {
        this.learnedType = learnedType;
        return this;
    }

    /**
     * Get the provisioning state of the resource. Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

}
