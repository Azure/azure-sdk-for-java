/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.microsoft.azure.management.peering.v2019_08_01_preview.PeerAsn;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ContactInfo;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ValidationState;

class PeerAsnImpl extends CreatableUpdatableImpl<PeerAsn, PeerAsnInner, PeerAsnImpl> implements PeerAsn, PeerAsn.Definition, PeerAsn.Update {
    private String peerAsnName;
    private final PeeringManager manager;

    PeerAsnImpl(String name, PeeringManager manager) {
        super(name, new PeerAsnInner());
        this.manager = manager;
        // Set resource name
        this.peerAsnName = name;
        //
    }

    PeerAsnImpl(PeerAsnInner inner, PeeringManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.peerAsnName = inner.name();
        // set resource ancestor and positional variables
        this.peerAsnName = IdParsingUtils.getValueFromIdByName(inner.id(), "peerAsns");
        // set other parameters for create and update
    }

    @Override
    public PeeringManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PeerAsn> createResourceAsync() {
        PeerAsnsInner client = this.manager().inner().peerAsns();
        return client.createOrUpdateAsync(this.peerAsnName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PeerAsn> updateResourceAsync() {
        PeerAsnsInner client = this.manager().inner().peerAsns();
        return client.createOrUpdateAsync(this.peerAsnName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PeerAsnInner> getInnerAsync() {
        PeerAsnsInner client = this.manager().inner().peerAsns();
        return client.getAsync(this.peerAsnName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public Integer peerAsn() {
        return this.inner().peerAsn();
    }

    @Override
    public ContactInfo peerContactInfo() {
        return this.inner().peerContactInfo();
    }

    @Override
    public String peerName() {
        return this.inner().peerName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ValidationState validationState() {
        return this.inner().validationState();
    }

    @Override
    public PeerAsnImpl withPeerAsn(Integer peerAsn) {
        this.inner().withPeerAsn(peerAsn);
        return this;
    }

    @Override
    public PeerAsnImpl withPeerContactInfo(ContactInfo peerContactInfo) {
        this.inner().withPeerContactInfo(peerContactInfo);
        return this;
    }

    @Override
    public PeerAsnImpl withPeerName(String peerName) {
        this.inner().withPeerName(peerName);
        return this;
    }

    @Override
    public PeerAsnImpl withValidationState(ValidationState validationState) {
        this.inner().withValidationState(validationState);
        return this;
    }

}
