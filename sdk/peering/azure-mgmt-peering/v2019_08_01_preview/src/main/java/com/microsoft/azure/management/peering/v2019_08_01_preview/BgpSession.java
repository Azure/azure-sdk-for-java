/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties that define a BGP session.
 */
public class BgpSession {
    /**
     * The IPv4 prefix that contains both ends' IPv4 addresses.
     */
    @JsonProperty(value = "sessionPrefixV4")
    private String sessionPrefixV4;

    /**
     * The IPv6 prefix that contains both ends' IPv6 addresses.
     */
    @JsonProperty(value = "sessionPrefixV6")
    private String sessionPrefixV6;

    /**
     * The IPv4 session address on Microsoft's end.
     */
    @JsonProperty(value = "microsoftSessionIPv4Address", access = JsonProperty.Access.WRITE_ONLY)
    private String microsoftSessionIPv4Address;

    /**
     * The IPv6 session address on Microsoft's end.
     */
    @JsonProperty(value = "microsoftSessionIPv6Address", access = JsonProperty.Access.WRITE_ONLY)
    private String microsoftSessionIPv6Address;

    /**
     * The IPv4 session address on peer's end.
     */
    @JsonProperty(value = "peerSessionIPv4Address")
    private String peerSessionIPv4Address;

    /**
     * The IPv6 session address on peer's end.
     */
    @JsonProperty(value = "peerSessionIPv6Address")
    private String peerSessionIPv6Address;

    /**
     * The state of the IPv4 session. Possible values include: 'None', 'Idle',
     * 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived',
     * 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'.
     */
    @JsonProperty(value = "sessionStateV4", access = JsonProperty.Access.WRITE_ONLY)
    private SessionStateV4 sessionStateV4;

    /**
     * The state of the IPv6 session. Possible values include: 'None', 'Idle',
     * 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived',
     * 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'.
     */
    @JsonProperty(value = "sessionStateV6", access = JsonProperty.Access.WRITE_ONLY)
    private SessionStateV6 sessionStateV6;

    /**
     * The maximum number of prefixes advertised over the IPv4 session.
     */
    @JsonProperty(value = "maxPrefixesAdvertisedV4")
    private Integer maxPrefixesAdvertisedV4;

    /**
     * The maximum number of prefixes advertised over the IPv6 session.
     */
    @JsonProperty(value = "maxPrefixesAdvertisedV6")
    private Integer maxPrefixesAdvertisedV6;

    /**
     * The MD5 authentication key of the session.
     */
    @JsonProperty(value = "md5AuthenticationKey")
    private String md5AuthenticationKey;

    /**
     * Get the IPv4 prefix that contains both ends' IPv4 addresses.
     *
     * @return the sessionPrefixV4 value
     */
    public String sessionPrefixV4() {
        return this.sessionPrefixV4;
    }

    /**
     * Set the IPv4 prefix that contains both ends' IPv4 addresses.
     *
     * @param sessionPrefixV4 the sessionPrefixV4 value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withSessionPrefixV4(String sessionPrefixV4) {
        this.sessionPrefixV4 = sessionPrefixV4;
        return this;
    }

    /**
     * Get the IPv6 prefix that contains both ends' IPv6 addresses.
     *
     * @return the sessionPrefixV6 value
     */
    public String sessionPrefixV6() {
        return this.sessionPrefixV6;
    }

    /**
     * Set the IPv6 prefix that contains both ends' IPv6 addresses.
     *
     * @param sessionPrefixV6 the sessionPrefixV6 value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withSessionPrefixV6(String sessionPrefixV6) {
        this.sessionPrefixV6 = sessionPrefixV6;
        return this;
    }

    /**
     * Get the IPv4 session address on Microsoft's end.
     *
     * @return the microsoftSessionIPv4Address value
     */
    public String microsoftSessionIPv4Address() {
        return this.microsoftSessionIPv4Address;
    }

    /**
     * Get the IPv6 session address on Microsoft's end.
     *
     * @return the microsoftSessionIPv6Address value
     */
    public String microsoftSessionIPv6Address() {
        return this.microsoftSessionIPv6Address;
    }

    /**
     * Get the IPv4 session address on peer's end.
     *
     * @return the peerSessionIPv4Address value
     */
    public String peerSessionIPv4Address() {
        return this.peerSessionIPv4Address;
    }

    /**
     * Set the IPv4 session address on peer's end.
     *
     * @param peerSessionIPv4Address the peerSessionIPv4Address value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withPeerSessionIPv4Address(String peerSessionIPv4Address) {
        this.peerSessionIPv4Address = peerSessionIPv4Address;
        return this;
    }

    /**
     * Get the IPv6 session address on peer's end.
     *
     * @return the peerSessionIPv6Address value
     */
    public String peerSessionIPv6Address() {
        return this.peerSessionIPv6Address;
    }

    /**
     * Set the IPv6 session address on peer's end.
     *
     * @param peerSessionIPv6Address the peerSessionIPv6Address value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withPeerSessionIPv6Address(String peerSessionIPv6Address) {
        this.peerSessionIPv6Address = peerSessionIPv6Address;
        return this;
    }

    /**
     * Get the state of the IPv4 session. Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'.
     *
     * @return the sessionStateV4 value
     */
    public SessionStateV4 sessionStateV4() {
        return this.sessionStateV4;
    }

    /**
     * Get the state of the IPv6 session. Possible values include: 'None', 'Idle', 'Connect', 'Active', 'OpenSent', 'OpenConfirm', 'OpenReceived', 'Established', 'PendingAdd', 'PendingUpdate', 'PendingRemove'.
     *
     * @return the sessionStateV6 value
     */
    public SessionStateV6 sessionStateV6() {
        return this.sessionStateV6;
    }

    /**
     * Get the maximum number of prefixes advertised over the IPv4 session.
     *
     * @return the maxPrefixesAdvertisedV4 value
     */
    public Integer maxPrefixesAdvertisedV4() {
        return this.maxPrefixesAdvertisedV4;
    }

    /**
     * Set the maximum number of prefixes advertised over the IPv4 session.
     *
     * @param maxPrefixesAdvertisedV4 the maxPrefixesAdvertisedV4 value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withMaxPrefixesAdvertisedV4(Integer maxPrefixesAdvertisedV4) {
        this.maxPrefixesAdvertisedV4 = maxPrefixesAdvertisedV4;
        return this;
    }

    /**
     * Get the maximum number of prefixes advertised over the IPv6 session.
     *
     * @return the maxPrefixesAdvertisedV6 value
     */
    public Integer maxPrefixesAdvertisedV6() {
        return this.maxPrefixesAdvertisedV6;
    }

    /**
     * Set the maximum number of prefixes advertised over the IPv6 session.
     *
     * @param maxPrefixesAdvertisedV6 the maxPrefixesAdvertisedV6 value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withMaxPrefixesAdvertisedV6(Integer maxPrefixesAdvertisedV6) {
        this.maxPrefixesAdvertisedV6 = maxPrefixesAdvertisedV6;
        return this;
    }

    /**
     * Get the MD5 authentication key of the session.
     *
     * @return the md5AuthenticationKey value
     */
    public String md5AuthenticationKey() {
        return this.md5AuthenticationKey;
    }

    /**
     * Set the MD5 authentication key of the session.
     *
     * @param md5AuthenticationKey the md5AuthenticationKey value to set
     * @return the BgpSession object itself.
     */
    public BgpSession withMd5AuthenticationKey(String md5AuthenticationKey) {
        this.md5AuthenticationKey = md5AuthenticationKey;
        return this;
    }

}
