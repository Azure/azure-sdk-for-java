/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.peering.v2019_08_01_preview.Peering;
import rx.Observable;
import com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringSku;
import com.microsoft.azure.management.peering.v2019_08_01_preview.Kind;
import com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringPropertiesDirect;
import com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringPropertiesExchange;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ProvisioningState;

class PeeringImpl extends GroupableResourceCoreImpl<Peering, PeeringInner, PeeringImpl, PeeringManager> implements Peering, Peering.Definition, Peering.Update {
    PeeringImpl(String name, PeeringInner inner, PeeringManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Peering> createResourceAsync() {
        PeeringsInner client = this.manager().inner().peerings();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Peering> updateResourceAsync() {
        PeeringsInner client = this.manager().inner().peerings();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PeeringInner> getInnerAsync() {
        PeeringsInner client = this.manager().inner().peerings();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public PeeringPropertiesDirect direct() {
        return this.inner().direct();
    }

    @Override
    public PeeringPropertiesExchange exchange() {
        return this.inner().exchange();
    }

    @Override
    public Kind kind() {
        return this.inner().kind();
    }

    @Override
    public String peeringLocation() {
        return this.inner().peeringLocation();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public PeeringSku sku() {
        return this.inner().sku();
    }

    @Override
    public PeeringImpl withKind(Kind kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public PeeringImpl withSku(PeeringSku sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public PeeringImpl withDirect(PeeringPropertiesDirect direct) {
        this.inner().withDirect(direct);
        return this;
    }

    @Override
    public PeeringImpl withExchange(PeeringPropertiesExchange exchange) {
        this.inner().withExchange(exchange);
        return this;
    }

    @Override
    public PeeringImpl withPeeringLocation(String peeringLocation) {
        this.inner().withPeeringLocation(peeringLocation);
        return this;
    }

}
