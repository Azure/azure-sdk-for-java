/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2019_08_01_preview.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureClient;
import com.microsoft.azure.AzureServiceClient;
import com.microsoft.azure.management.peering.v2019_08_01_preview.CheckServiceProviderAvailabilityInput;
import com.microsoft.azure.management.peering.v2019_08_01_preview.ErrorResponseException;
import com.microsoft.rest.credentials.ServiceClientCredentials;
import com.microsoft.rest.RestClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the PeeringManagementClientImpl class.
 */
public class PeeringManagementClientImpl extends AzureServiceClient {
    /** The Retrofit service to perform REST calls. */
    private PeeringManagementClientService service;
    /** the {@link AzureClient} used for long running operations. */
    private AzureClient azureClient;

    /**
     * Gets the {@link AzureClient} used for long running operations.
     * @return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }

    /** The Azure subscription ID. */
    private String subscriptionId;

    /**
     * Gets The Azure subscription ID.
     *
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets The Azure subscription ID.
     *
     * @param subscriptionId the subscriptionId value.
     * @return the service client itself
     */
    public PeeringManagementClientImpl withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /** The client API version. */
    private String apiVersion;

    /**
     * Gets The client API version.
     *
     * @return the apiVersion value.
     */
    public String apiVersion() {
        return this.apiVersion;
    }

    /** The preferred language for the response. */
    private String acceptLanguage;

    /**
     * Gets The preferred language for the response.
     *
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Sets The preferred language for the response.
     *
     * @param acceptLanguage the acceptLanguage value.
     * @return the service client itself
     */
    public PeeringManagementClientImpl withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /** The retry timeout in seconds for Long Running Operations. Default value is 30. */
    private int longRunningOperationRetryTimeout;

    /**
     * Gets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @return the longRunningOperationRetryTimeout value.
     */
    public int longRunningOperationRetryTimeout() {
        return this.longRunningOperationRetryTimeout;
    }

    /**
     * Sets The retry timeout in seconds for Long Running Operations. Default value is 30.
     *
     * @param longRunningOperationRetryTimeout the longRunningOperationRetryTimeout value.
     * @return the service client itself
     */
    public PeeringManagementClientImpl withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout) {
        this.longRunningOperationRetryTimeout = longRunningOperationRetryTimeout;
        return this;
    }

    /** Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true. */
    private boolean generateClientRequestId;

    /**
     * Gets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @return the generateClientRequestId value.
     */
    public boolean generateClientRequestId() {
        return this.generateClientRequestId;
    }

    /**
     * Sets Whether a unique x-ms-client-request-id should be generated. When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.
     *
     * @param generateClientRequestId the generateClientRequestId value.
     * @return the service client itself
     */
    public PeeringManagementClientImpl withGenerateClientRequestId(boolean generateClientRequestId) {
        this.generateClientRequestId = generateClientRequestId;
        return this;
    }

    /**
     * The LegacyPeeringsInner object to access its operations.
     */
    private LegacyPeeringsInner legacyPeerings;

    /**
     * Gets the LegacyPeeringsInner object to access its operations.
     * @return the LegacyPeeringsInner object.
     */
    public LegacyPeeringsInner legacyPeerings() {
        return this.legacyPeerings;
    }

    /**
     * The OperationsInner object to access its operations.
     */
    private OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /**
     * The PeerAsnsInner object to access its operations.
     */
    private PeerAsnsInner peerAsns;

    /**
     * Gets the PeerAsnsInner object to access its operations.
     * @return the PeerAsnsInner object.
     */
    public PeerAsnsInner peerAsns() {
        return this.peerAsns;
    }

    /**
     * The PeeringLocationsInner object to access its operations.
     */
    private PeeringLocationsInner peeringLocations;

    /**
     * Gets the PeeringLocationsInner object to access its operations.
     * @return the PeeringLocationsInner object.
     */
    public PeeringLocationsInner peeringLocations() {
        return this.peeringLocations;
    }

    /**
     * The PeeringsInner object to access its operations.
     */
    private PeeringsInner peerings;

    /**
     * Gets the PeeringsInner object to access its operations.
     * @return the PeeringsInner object.
     */
    public PeeringsInner peerings() {
        return this.peerings;
    }

    /**
     * The PeeringServiceLocationsInner object to access its operations.
     */
    private PeeringServiceLocationsInner peeringServiceLocations;

    /**
     * Gets the PeeringServiceLocationsInner object to access its operations.
     * @return the PeeringServiceLocationsInner object.
     */
    public PeeringServiceLocationsInner peeringServiceLocations() {
        return this.peeringServiceLocations;
    }

    /**
     * The PeeringServicePrefixesInner object to access its operations.
     */
    private PeeringServicePrefixesInner peeringServicePrefixes;

    /**
     * Gets the PeeringServicePrefixesInner object to access its operations.
     * @return the PeeringServicePrefixesInner object.
     */
    public PeeringServicePrefixesInner peeringServicePrefixes() {
        return this.peeringServicePrefixes;
    }

    /**
     * The PrefixesInner object to access its operations.
     */
    private PrefixesInner prefixes;

    /**
     * Gets the PrefixesInner object to access its operations.
     * @return the PrefixesInner object.
     */
    public PrefixesInner prefixes() {
        return this.prefixes;
    }

    /**
     * The PeeringServiceProvidersInner object to access its operations.
     */
    private PeeringServiceProvidersInner peeringServiceProviders;

    /**
     * Gets the PeeringServiceProvidersInner object to access its operations.
     * @return the PeeringServiceProvidersInner object.
     */
    public PeeringServiceProvidersInner peeringServiceProviders() {
        return this.peeringServiceProviders;
    }

    /**
     * The PeeringServicesInner object to access its operations.
     */
    private PeeringServicesInner peeringServices;

    /**
     * Gets the PeeringServicesInner object to access its operations.
     * @return the PeeringServicesInner object.
     */
    public PeeringServicesInner peeringServices() {
        return this.peeringServices;
    }

    /**
     * Initializes an instance of PeeringManagementClient client.
     *
     * @param credentials the management credentials for Azure
     */
    public PeeringManagementClientImpl(ServiceClientCredentials credentials) {
        this("https://management.azure.com", credentials);
    }

    /**
     * Initializes an instance of PeeringManagementClient client.
     *
     * @param baseUrl the base URL of the host
     * @param credentials the management credentials for Azure
     */
    public PeeringManagementClientImpl(String baseUrl, ServiceClientCredentials credentials) {
        super(baseUrl, credentials);
        initialize();
    }

    /**
     * Initializes an instance of PeeringManagementClient client.
     *
     * @param restClient the REST client to connect to Azure.
     */
    public PeeringManagementClientImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    protected void initialize() {
        this.apiVersion = "2019-08-01-preview";
        this.acceptLanguage = "en-US";
        this.longRunningOperationRetryTimeout = 30;
        this.generateClientRequestId = true;
        this.legacyPeerings = new LegacyPeeringsInner(restClient().retrofit(), this);
        this.operations = new OperationsInner(restClient().retrofit(), this);
        this.peerAsns = new PeerAsnsInner(restClient().retrofit(), this);
        this.peeringLocations = new PeeringLocationsInner(restClient().retrofit(), this);
        this.peerings = new PeeringsInner(restClient().retrofit(), this);
        this.peeringServiceLocations = new PeeringServiceLocationsInner(restClient().retrofit(), this);
        this.peeringServicePrefixes = new PeeringServicePrefixesInner(restClient().retrofit(), this);
        this.prefixes = new PrefixesInner(restClient().retrofit(), this);
        this.peeringServiceProviders = new PeeringServiceProvidersInner(restClient().retrofit(), this);
        this.peeringServices = new PeeringServicesInner(restClient().retrofit(), this);
        this.azureClient = new AzureClient(this);
        initializeService();
    }

    /**
     * Gets the User-Agent header for the client.
     *
     * @return the user agent string.
     */
    @Override
    public String userAgent() {
        return String.format("%s (%s, %s, auto-generated)", super.userAgent(), "PeeringManagementClient", "2019-08-01-preview");
    }

    private void initializeService() {
        service = restClient().retrofit().create(PeeringManagementClientService.class);
    }

    /**
     * The interface defining all the services for PeeringManagementClient to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PeeringManagementClientService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2019_08_01_preview.PeeringManagementClient checkServiceProviderAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Peering/CheckServiceProviderAvailability")
        Observable<Response<ResponseBody>> checkServiceProviderAvailability(@Path("subscriptionId") String subscriptionId, @Body CheckServiceProviderAvailabilityInput checkServiceProviderAvailabilityInput, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Checks if the peering service provider is present within 1000 miles of customer's location.
     *
     * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput
                 indicating customer location and service provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    public String checkServiceProviderAvailability(CheckServiceProviderAvailabilityInput checkServiceProviderAvailabilityInput) {
        return checkServiceProviderAvailabilityWithServiceResponseAsync(checkServiceProviderAvailabilityInput).toBlocking().single().body();
    }

    /**
     * Checks if the peering service provider is present within 1000 miles of customer's location.
     *
     * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput
                 indicating customer location and service provider.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<String> checkServiceProviderAvailabilityAsync(CheckServiceProviderAvailabilityInput checkServiceProviderAvailabilityInput, final ServiceCallback<String> serviceCallback) {
        return ServiceFuture.fromResponse(checkServiceProviderAvailabilityWithServiceResponseAsync(checkServiceProviderAvailabilityInput), serviceCallback);
    }

    /**
     * Checks if the peering service provider is present within 1000 miles of customer's location.
     *
     * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput
                 indicating customer location and service provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<String> checkServiceProviderAvailabilityAsync(CheckServiceProviderAvailabilityInput checkServiceProviderAvailabilityInput) {
        return checkServiceProviderAvailabilityWithServiceResponseAsync(checkServiceProviderAvailabilityInput).map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.body();
            }
        });
    }

    /**
     * Checks if the peering service provider is present within 1000 miles of customer's location.
     *
     * @param checkServiceProviderAvailabilityInput The CheckServiceProviderAvailabilityInput
                 indicating customer location and service provider.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> checkServiceProviderAvailabilityWithServiceResponseAsync(CheckServiceProviderAvailabilityInput checkServiceProviderAvailabilityInput) {
        if (this.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.subscriptionId() is required and cannot be null.");
        }
        if (checkServiceProviderAvailabilityInput == null) {
            throw new IllegalArgumentException("Parameter checkServiceProviderAvailabilityInput is required and cannot be null.");
        }
        if (this.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.apiVersion() is required and cannot be null.");
        }
        Validator.validate(checkServiceProviderAvailabilityInput);
        return service.checkServiceProviderAvailability(this.subscriptionId(), checkServiceProviderAvailabilityInput, this.apiVersion(), this.acceptLanguage(), this.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = checkServiceProviderAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> checkServiceProviderAvailabilityDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<String, ErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<String>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
