/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2020_01_01_preview.implementation;

import com.microsoft.azure.management.peering.v2020_01_01_preview.PeeringRegisteredAsn;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.peering.v2020_01_01_preview.ProvisioningState;

class PeeringRegisteredAsnImpl extends CreatableUpdatableImpl<PeeringRegisteredAsn, PeeringRegisteredAsnInner, PeeringRegisteredAsnImpl> implements PeeringRegisteredAsn, PeeringRegisteredAsn.Definition, PeeringRegisteredAsn.Update {
    private final PeeringManager manager;
    private String resourceGroupName;
    private String peeringName;
    private String registeredAsnName;
    private Integer casn;
    private Integer uasn;

    PeeringRegisteredAsnImpl(String name, PeeringManager manager) {
        super(name, new PeeringRegisteredAsnInner());
        this.manager = manager;
        // Set resource name
        this.registeredAsnName = name;
        //
    }

    PeeringRegisteredAsnImpl(PeeringRegisteredAsnInner inner, PeeringManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.registeredAsnName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.peeringName = IdParsingUtils.getValueFromIdByName(inner.id(), "peerings");
        this.registeredAsnName = IdParsingUtils.getValueFromIdByName(inner.id(), "registeredAsns");
        //
    }

    @Override
    public PeeringManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PeeringRegisteredAsn> createResourceAsync() {
        RegisteredAsnsInner client = this.manager().inner().registeredAsns();
        return client.createOrUpdateAsync(this.resourceGroupName, this.peeringName, this.registeredAsnName, this.casn)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PeeringRegisteredAsn> updateResourceAsync() {
        RegisteredAsnsInner client = this.manager().inner().registeredAsns();
        return client.createOrUpdateAsync(this.resourceGroupName, this.peeringName, this.registeredAsnName, this.uasn)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PeeringRegisteredAsnInner> getInnerAsync() {
        RegisteredAsnsInner client = this.manager().inner().registeredAsns();
        return client.getAsync(this.resourceGroupName, this.peeringName, this.registeredAsnName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public Integer asn() {
        return this.inner().asn();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String peeringServicePrefixKey() {
        return this.inner().peeringServicePrefixKey();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PeeringRegisteredAsnImpl withExistingPeering(String resourceGroupName, String peeringName) {
        this.resourceGroupName = resourceGroupName;
        this.peeringName = peeringName;
        return this;
    }

    @Override
    public PeeringRegisteredAsnImpl withAsn(Integer asn) {
        if (isInCreateMode()) {
            this.casn = asn;
        } else {
            this.uasn = asn;
        }
        return this;
    }

}
