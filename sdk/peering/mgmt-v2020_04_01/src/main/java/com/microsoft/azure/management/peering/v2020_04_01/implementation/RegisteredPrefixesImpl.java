/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.peering.v2020_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.peering.v2020_04_01.RegisteredPrefixes;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.peering.v2020_04_01.PeeringRegisteredPrefix;

class RegisteredPrefixesImpl extends WrapperImpl<RegisteredPrefixesInner> implements RegisteredPrefixes {
    private final PeeringManager manager;

    RegisteredPrefixesImpl(PeeringManager manager) {
        super(manager.inner().registeredPrefixes());
        this.manager = manager;
    }

    public PeeringManager manager() {
        return this.manager;
    }

    @Override
    public PeeringRegisteredPrefixImpl define(String name) {
        return wrapModel(name);
    }

    private PeeringRegisteredPrefixImpl wrapModel(PeeringRegisteredPrefixInner inner) {
        return  new PeeringRegisteredPrefixImpl(inner, manager());
    }

    private PeeringRegisteredPrefixImpl wrapModel(String name) {
        return new PeeringRegisteredPrefixImpl(name, this.manager());
    }

    @Override
    public Observable<PeeringRegisteredPrefix> listByPeeringAsync(final String resourceGroupName, final String peeringName) {
        RegisteredPrefixesInner client = this.inner();
        return client.listByPeeringAsync(resourceGroupName, peeringName)
        .flatMapIterable(new Func1<Page<PeeringRegisteredPrefixInner>, Iterable<PeeringRegisteredPrefixInner>>() {
            @Override
            public Iterable<PeeringRegisteredPrefixInner> call(Page<PeeringRegisteredPrefixInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PeeringRegisteredPrefixInner, PeeringRegisteredPrefix>() {
            @Override
            public PeeringRegisteredPrefix call(PeeringRegisteredPrefixInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<PeeringRegisteredPrefix> getAsync(String resourceGroupName, String peeringName, String registeredPrefixName) {
        RegisteredPrefixesInner client = this.inner();
        return client.getAsync(resourceGroupName, peeringName, registeredPrefixName)
        .flatMap(new Func1<PeeringRegisteredPrefixInner, Observable<PeeringRegisteredPrefix>>() {
            @Override
            public Observable<PeeringRegisteredPrefix> call(PeeringRegisteredPrefixInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((PeeringRegisteredPrefix)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String peeringName, String registeredPrefixName) {
        RegisteredPrefixesInner client = this.inner();
        return client.deleteAsync(resourceGroupName, peeringName, registeredPrefixName).toCompletable();
    }

}
