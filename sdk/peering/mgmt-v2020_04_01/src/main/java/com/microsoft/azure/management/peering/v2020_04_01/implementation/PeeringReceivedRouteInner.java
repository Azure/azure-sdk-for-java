/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2020_04_01.implementation;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The properties that define a received route.
 */
public class PeeringReceivedRouteInner {
    /**
     * The prefix.
     */
    @JsonProperty(value = "prefix", access = JsonProperty.Access.WRITE_ONLY)
    private String prefix;

    /**
     * The next hop for the prefix.
     */
    @JsonProperty(value = "nextHop", access = JsonProperty.Access.WRITE_ONLY)
    private String nextHop;

    /**
     * The AS path for the prefix.
     */
    @JsonProperty(value = "asPath", access = JsonProperty.Access.WRITE_ONLY)
    private String asPath;

    /**
     * The origin AS change information for the prefix.
     */
    @JsonProperty(value = "originAsValidationState", access = JsonProperty.Access.WRITE_ONLY)
    private String originAsValidationState;

    /**
     * The RPKI validation state for the prefix and origin AS that's listed in
     * the AS path.
     */
    @JsonProperty(value = "rpkiValidationState", access = JsonProperty.Access.WRITE_ONLY)
    private String rpkiValidationState;

    /**
     * The authority which holds the Route Origin Authorization record for the
     * prefix, if any.
     */
    @JsonProperty(value = "trustAnchor", access = JsonProperty.Access.WRITE_ONLY)
    private String trustAnchor;

    /**
     * The received timestamp associated with the prefix.
     */
    @JsonProperty(value = "receivedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private String receivedTimestamp;

    /**
     * Get the prefix.
     *
     * @return the prefix value
     */
    public String prefix() {
        return this.prefix;
    }

    /**
     * Get the next hop for the prefix.
     *
     * @return the nextHop value
     */
    public String nextHop() {
        return this.nextHop;
    }

    /**
     * Get the AS path for the prefix.
     *
     * @return the asPath value
     */
    public String asPath() {
        return this.asPath;
    }

    /**
     * Get the origin AS change information for the prefix.
     *
     * @return the originAsValidationState value
     */
    public String originAsValidationState() {
        return this.originAsValidationState;
    }

    /**
     * Get the RPKI validation state for the prefix and origin AS that's listed in the AS path.
     *
     * @return the rpkiValidationState value
     */
    public String rpkiValidationState() {
        return this.rpkiValidationState;
    }

    /**
     * Get the authority which holds the Route Origin Authorization record for the prefix, if any.
     *
     * @return the trustAnchor value
     */
    public String trustAnchor() {
        return this.trustAnchor;
    }

    /**
     * Get the received timestamp associated with the prefix.
     *
     * @return the receivedTimestamp value
     */
    public String receivedTimestamp() {
        return this.receivedTimestamp;
    }

}
