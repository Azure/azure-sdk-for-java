/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2020_04_01.implementation;

import com.microsoft.azure.management.peering.v2020_04_01.PeeringServicePrefix;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.peering.v2020_04_01.PrefixValidationState;
import com.microsoft.azure.management.peering.v2020_04_01.LearnedType;
import java.util.List;
import com.microsoft.azure.management.peering.v2020_04_01.PeeringServicePrefixEvent;
import com.microsoft.azure.management.peering.v2020_04_01.ProvisioningState;

class PeeringServicePrefixImpl extends CreatableUpdatableImpl<PeeringServicePrefix, PeeringServicePrefixInner, PeeringServicePrefixImpl> implements PeeringServicePrefix, PeeringServicePrefix.Definition, PeeringServicePrefix.Update {
    private final PeeringManager manager;
    private String resourceGroupName;
    private String peeringServiceName;
    private String prefixName;

    PeeringServicePrefixImpl(String name, PeeringManager manager) {
        super(name, new PeeringServicePrefixInner());
        this.manager = manager;
        // Set resource name
        this.prefixName = name;
        //
    }

    PeeringServicePrefixImpl(PeeringServicePrefixInner inner, PeeringManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.prefixName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.peeringServiceName = IdParsingUtils.getValueFromIdByName(inner.id(), "peeringServices");
        this.prefixName = IdParsingUtils.getValueFromIdByName(inner.id(), "prefixes");
        //
    }

    @Override
    public PeeringManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PeeringServicePrefix> createResourceAsync() {
        PrefixesInner client = this.manager().inner().prefixes();
        return client.createOrUpdateAsync(this.resourceGroupName, this.peeringServiceName, this.prefixName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PeeringServicePrefix> updateResourceAsync() {
        PrefixesInner client = this.manager().inner().prefixes();
        return client.createOrUpdateAsync(this.resourceGroupName, this.peeringServiceName, this.prefixName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PeeringServicePrefixInner> getInnerAsync() {
        PrefixesInner client = this.manager().inner().prefixes();
        return client.getAsync(this.resourceGroupName, this.peeringServiceName, this.prefixName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String errorMessage() {
        return this.inner().errorMessage();
    }

    @Override
    public List<PeeringServicePrefixEvent> events() {
        return this.inner().events();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public LearnedType learnedType() {
        return this.inner().learnedType();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String peeringServicePrefixKey() {
        return this.inner().peeringServicePrefixKey();
    }

    @Override
    public String prefix() {
        return this.inner().prefix();
    }

    @Override
    public PrefixValidationState prefixValidationState() {
        return this.inner().prefixValidationState();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PeeringServicePrefixImpl withExistingPeeringService(String resourceGroupName, String peeringServiceName) {
        this.resourceGroupName = resourceGroupName;
        this.peeringServiceName = peeringServiceName;
        return this;
    }

    @Override
    public PeeringServicePrefixImpl withPeeringServicePrefixKey(String peeringServicePrefixKey) {
        this.inner().withPeeringServicePrefixKey(peeringServicePrefixKey);
        return this;
    }

    @Override
    public PeeringServicePrefixImpl withPrefix(String prefix) {
        this.inner().withPrefix(prefix);
        return this;
    }

}
