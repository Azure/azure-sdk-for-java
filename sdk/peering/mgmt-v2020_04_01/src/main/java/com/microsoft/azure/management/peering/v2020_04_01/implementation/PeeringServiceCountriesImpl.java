/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.peering.v2020_04_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.peering.v2020_04_01.PeeringServiceCountries;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.peering.v2020_04_01.PeeringServiceCountry;

class PeeringServiceCountriesImpl extends WrapperImpl<PeeringServiceCountriesInner> implements PeeringServiceCountries {
    private PagedListConverter<PeeringServiceCountryInner, PeeringServiceCountry> converter;
    private final PeeringManager manager;

    PeeringServiceCountriesImpl(PeeringManager manager) {
        super(manager.inner().peeringServiceCountries());
        this.manager = manager;
        this.converter = new PagedListConverter<PeeringServiceCountryInner, PeeringServiceCountry>() {
            @Override
            public Observable<PeeringServiceCountry> typeConvertAsync(PeeringServiceCountryInner inner) {
                return Observable.just((PeeringServiceCountry) wrapModel(inner));
            }
        };
    }

    public PeeringManager manager() {
        return this.manager;
    }

    private PeeringServiceCountryImpl wrapModel(PeeringServiceCountryInner inner) {
        return  new PeeringServiceCountryImpl(inner, manager());
    }

    @Override
    public PagedList<PeeringServiceCountry> list() {
        PeeringServiceCountriesInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<PeeringServiceCountry> listAsync() {
        PeeringServiceCountriesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<PeeringServiceCountryInner>, Iterable<PeeringServiceCountryInner>>() {
            @Override
            public Iterable<PeeringServiceCountryInner> call(Page<PeeringServiceCountryInner> page) {
                return page.items();
            }
        })
        .map(new Func1<PeeringServiceCountryInner, PeeringServiceCountry>() {
            @Override
            public PeeringServiceCountry call(PeeringServiceCountryInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
