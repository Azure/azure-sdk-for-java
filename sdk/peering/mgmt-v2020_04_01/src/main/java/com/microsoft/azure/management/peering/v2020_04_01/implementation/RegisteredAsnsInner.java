/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.peering.v2020_04_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.peering.v2020_04_01.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RegisteredAsns.
 */
public class RegisteredAsnsInner {
    /** The Retrofit service to perform REST calls. */
    private RegisteredAsnsService service;
    /** The service client containing this operation class. */
    private PeeringManagementClientImpl client;

    /**
     * Initializes an instance of RegisteredAsnsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RegisteredAsnsInner(Retrofit retrofit, PeeringManagementClientImpl client) {
        this.service = retrofit.create(RegisteredAsnsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RegisteredAsns to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RegisteredAsnsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_04_01.RegisteredAsns get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("peeringName") String peeringName, @Path("registeredAsnName") String registeredAsnName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_04_01.RegisteredAsns createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("peeringName") String peeringName, @Path("registeredAsnName") String registeredAsnName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PeeringRegisteredAsnInner registeredAsn, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_04_01.RegisteredAsns delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns/{registeredAsnName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("peeringName") String peeringName, @Path("registeredAsnName") String registeredAsnName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_04_01.RegisteredAsns listByPeering" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/registeredAsns")
        Observable<Response<ResponseBody>> listByPeering(@Path("resourceGroupName") String resourceGroupName, @Path("peeringName") String peeringName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.peering.v2020_04_01.RegisteredAsns listByPeeringNext" })
        @GET
        Observable<Response<ResponseBody>> listByPeeringNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringRegisteredAsnInner object if successful.
     */
    public PeeringRegisteredAsnInner get(String resourceGroupName, String peeringName, String registeredAsnName) {
        return getWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName).toBlocking().single().body();
    }

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringRegisteredAsnInner> getAsync(String resourceGroupName, String peeringName, String registeredAsnName, final ServiceCallback<PeeringRegisteredAsnInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName), serviceCallback);
    }

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringRegisteredAsnInner object
     */
    public Observable<PeeringRegisteredAsnInner> getAsync(String resourceGroupName, String peeringName, String registeredAsnName) {
        return getWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName).map(new Func1<ServiceResponse<PeeringRegisteredAsnInner>, PeeringRegisteredAsnInner>() {
            @Override
            public PeeringRegisteredAsnInner call(ServiceResponse<PeeringRegisteredAsnInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringRegisteredAsnInner object
     */
    public Observable<ServiceResponse<PeeringRegisteredAsnInner>> getWithServiceResponseAsync(String resourceGroupName, String peeringName, String registeredAsnName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (registeredAsnName == null) {
            throw new IllegalArgumentException("Parameter registeredAsnName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, peeringName, registeredAsnName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringRegisteredAsnInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringRegisteredAsnInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringRegisteredAsnInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringRegisteredAsnInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringRegisteredAsnInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringRegisteredAsnInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringRegisteredAsnInner object if successful.
     */
    public PeeringRegisteredAsnInner createOrUpdate(String resourceGroupName, String peeringName, String registeredAsnName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName).toBlocking().single().body();
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringRegisteredAsnInner> createOrUpdateAsync(String resourceGroupName, String peeringName, String registeredAsnName, final ServiceCallback<PeeringRegisteredAsnInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName), serviceCallback);
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringRegisteredAsnInner object
     */
    public Observable<PeeringRegisteredAsnInner> createOrUpdateAsync(String resourceGroupName, String peeringName, String registeredAsnName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName).map(new Func1<ServiceResponse<PeeringRegisteredAsnInner>, PeeringRegisteredAsnInner>() {
            @Override
            public PeeringRegisteredAsnInner call(ServiceResponse<PeeringRegisteredAsnInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringRegisteredAsnInner object
     */
    public Observable<ServiceResponse<PeeringRegisteredAsnInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String peeringName, String registeredAsnName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (registeredAsnName == null) {
            throw new IllegalArgumentException("Parameter registeredAsnName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer asn = null;
        PeeringRegisteredAsnInner registeredAsn = new PeeringRegisteredAsnInner();
        registeredAsn.withAsn(null);
        return service.createOrUpdate(resourceGroupName, peeringName, registeredAsnName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), registeredAsn, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringRegisteredAsnInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringRegisteredAsnInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringRegisteredAsnInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param asn The customer's ASN from which traffic originates.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PeeringRegisteredAsnInner object if successful.
     */
    public PeeringRegisteredAsnInner createOrUpdate(String resourceGroupName, String peeringName, String registeredAsnName, Integer asn) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName, asn).toBlocking().single().body();
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param asn The customer's ASN from which traffic originates.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PeeringRegisteredAsnInner> createOrUpdateAsync(String resourceGroupName, String peeringName, String registeredAsnName, Integer asn, final ServiceCallback<PeeringRegisteredAsnInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName, asn), serviceCallback);
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param asn The customer's ASN from which traffic originates.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringRegisteredAsnInner object
     */
    public Observable<PeeringRegisteredAsnInner> createOrUpdateAsync(String resourceGroupName, String peeringName, String registeredAsnName, Integer asn) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName, asn).map(new Func1<ServiceResponse<PeeringRegisteredAsnInner>, PeeringRegisteredAsnInner>() {
            @Override
            public PeeringRegisteredAsnInner call(ServiceResponse<PeeringRegisteredAsnInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the ASN.
     * @param asn The customer's ASN from which traffic originates.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PeeringRegisteredAsnInner object
     */
    public Observable<ServiceResponse<PeeringRegisteredAsnInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String peeringName, String registeredAsnName, Integer asn) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (registeredAsnName == null) {
            throw new IllegalArgumentException("Parameter registeredAsnName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        PeeringRegisteredAsnInner registeredAsn = new PeeringRegisteredAsnInner();
        registeredAsn.withAsn(asn);
        return service.createOrUpdate(resourceGroupName, peeringName, registeredAsnName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), registeredAsn, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PeeringRegisteredAsnInner>>>() {
                @Override
                public Observable<ServiceResponse<PeeringRegisteredAsnInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PeeringRegisteredAsnInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PeeringRegisteredAsnInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PeeringRegisteredAsnInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PeeringRegisteredAsnInner>() { }.getType())
                .register(201, new TypeToken<PeeringRegisteredAsnInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String peeringName, String registeredAsnName) {
        deleteWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName).toBlocking().single().body();
    }

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String peeringName, String registeredAsnName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName), serviceCallback);
    }

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String peeringName, String registeredAsnName) {
        return deleteWithServiceResponseAsync(resourceGroupName, peeringName, registeredAsnName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes an existing registered ASN with the specified name under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param registeredAsnName The name of the registered ASN.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String peeringName, String registeredAsnName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (registeredAsnName == null) {
            throw new IllegalArgumentException("Parameter registeredAsnName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, peeringName, registeredAsnName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringRegisteredAsnInner&gt; object if successful.
     */
    public PagedList<PeeringRegisteredAsnInner> listByPeering(final String resourceGroupName, final String peeringName) {
        ServiceResponse<Page<PeeringRegisteredAsnInner>> response = listByPeeringSinglePageAsync(resourceGroupName, peeringName).toBlocking().single();
        return new PagedList<PeeringRegisteredAsnInner>(response.body()) {
            @Override
            public Page<PeeringRegisteredAsnInner> nextPage(String nextPageLink) {
                return listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringRegisteredAsnInner>> listByPeeringAsync(final String resourceGroupName, final String peeringName, final ListOperationCallback<PeeringRegisteredAsnInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPeeringSinglePageAsync(resourceGroupName, peeringName),
            new Func1<String, Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> call(String nextPageLink) {
                    return listByPeeringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringRegisteredAsnInner&gt; object
     */
    public Observable<Page<PeeringRegisteredAsnInner>> listByPeeringAsync(final String resourceGroupName, final String peeringName) {
        return listByPeeringWithServiceResponseAsync(resourceGroupName, peeringName)
            .map(new Func1<ServiceResponse<Page<PeeringRegisteredAsnInner>>, Page<PeeringRegisteredAsnInner>>() {
                @Override
                public Page<PeeringRegisteredAsnInner> call(ServiceResponse<Page<PeeringRegisteredAsnInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param resourceGroupName The name of the resource group.
     * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringRegisteredAsnInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> listByPeeringWithServiceResponseAsync(final String resourceGroupName, final String peeringName) {
        return listByPeeringSinglePageAsync(resourceGroupName, peeringName)
            .concatMap(new Func1<ServiceResponse<Page<PeeringRegisteredAsnInner>>, Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> call(ServiceResponse<Page<PeeringRegisteredAsnInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPeeringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
    ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> * @param peeringName The name of the peering.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringRegisteredAsnInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> listByPeeringSinglePageAsync(final String resourceGroupName, final String peeringName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (peeringName == null) {
            throw new IllegalArgumentException("Parameter peeringName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByPeering(resourceGroupName, peeringName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> result = listByPeeringDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringRegisteredAsnInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> listByPeeringDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringRegisteredAsnInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringRegisteredAsnInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PeeringRegisteredAsnInner&gt; object if successful.
     */
    public PagedList<PeeringRegisteredAsnInner> listByPeeringNext(final String nextPageLink) {
        ServiceResponse<Page<PeeringRegisteredAsnInner>> response = listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PeeringRegisteredAsnInner>(response.body()) {
            @Override
            public Page<PeeringRegisteredAsnInner> nextPage(String nextPageLink) {
                return listByPeeringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PeeringRegisteredAsnInner>> listByPeeringNextAsync(final String nextPageLink, final ServiceFuture<List<PeeringRegisteredAsnInner>> serviceFuture, final ListOperationCallback<PeeringRegisteredAsnInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPeeringNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> call(String nextPageLink) {
                    return listByPeeringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringRegisteredAsnInner&gt; object
     */
    public Observable<Page<PeeringRegisteredAsnInner>> listByPeeringNextAsync(final String nextPageLink) {
        return listByPeeringNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PeeringRegisteredAsnInner>>, Page<PeeringRegisteredAsnInner>>() {
                @Override
                public Page<PeeringRegisteredAsnInner> call(ServiceResponse<Page<PeeringRegisteredAsnInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PeeringRegisteredAsnInner&gt; object
     */
    public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> listByPeeringNextWithServiceResponseAsync(final String nextPageLink) {
        return listByPeeringNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PeeringRegisteredAsnInner>>, Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> call(ServiceResponse<Page<PeeringRegisteredAsnInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPeeringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all registered ASNs under the given subscription, resource group and peering.
     *
    ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PeeringRegisteredAsnInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> listByPeeringNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByPeeringNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PeeringRegisteredAsnInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> result = listByPeeringNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PeeringRegisteredAsnInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PeeringRegisteredAsnInner>> listByPeeringNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PeeringRegisteredAsnInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PeeringRegisteredAsnInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
