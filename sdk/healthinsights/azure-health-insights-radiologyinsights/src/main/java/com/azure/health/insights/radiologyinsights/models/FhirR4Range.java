// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A set of ordered Quantities defined by a low and high limit
 * Based on [FHIR Range](https://www.hl7.org/fhir/R4/datatypes.html#Range).
 */
@Fluent
public final class FhirR4Range extends FhirR4Element {

    /*
     * Low limit
     */
    @Generated
    private FhirR4Quantity low;

    /*
     * High limit
     */
    @Generated
    private FhirR4Quantity high;

    /**
     * Creates an instance of FhirR4Range class.
     */
    @Generated
    public FhirR4Range() {
    }

    /**
     * Get the low property: Low limit.
     *
     * @return the low value.
     */
    @Generated
    public FhirR4Quantity getLow() {
        return this.low;
    }

    /**
     * Set the low property: Low limit.
     *
     * @param low the low value to set.
     * @return the FhirR4Range object itself.
     */
    @Generated
    public FhirR4Range setLow(FhirR4Quantity low) {
        this.low = low;
        return this;
    }

    /**
     * Get the high property: High limit.
     *
     * @return the high value.
     */
    @Generated
    public FhirR4Quantity getHigh() {
        return this.high;
    }

    /**
     * Set the high property: High limit.
     *
     * @param high the high value to set.
     * @return the FhirR4Range object itself.
     */
    @Generated
    public FhirR4Range setHigh(FhirR4Quantity high) {
        this.high = high;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Range setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Range setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("low", this.low);
        jsonWriter.writeJsonField("high", this.high);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Range from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Range if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4Range.
     */
    @Generated
    public static FhirR4Range fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4Range deserializedFhirR4Range = new FhirR4Range();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4Range.setId(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4Range.setExtension(extension);
                } else if ("low".equals(fieldName)) {
                    deserializedFhirR4Range.low = FhirR4Quantity.fromJson(reader);
                } else if ("high".equals(fieldName)) {
                    deserializedFhirR4Range.high = FhirR4Quantity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4Range;
        });
    }
}
