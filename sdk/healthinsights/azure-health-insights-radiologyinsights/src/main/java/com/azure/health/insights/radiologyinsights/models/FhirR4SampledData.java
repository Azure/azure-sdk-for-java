// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A series of measurements taken by a device
 * Based on [FHIR SampledData](https://www.hl7.org/fhir/R4/datatypes.html#SampledData).
 */
@Fluent
public final class FhirR4SampledData extends FhirR4Element {

    /*
     * Zero value and units
     */
    @Generated
    private final FhirR4Quantity origin;

    /*
     * Number of milliseconds between samples
     */
    @Generated
    private final double period;

    /*
     * Multiply data by this before adding to origin
     */
    @Generated
    private Double factor;

    /*
     * Lower limit of detection
     */
    @Generated
    private Double lowerLimit;

    /*
     * Upper limit of detection
     */
    @Generated
    private Double upperLimit;

    /*
     * Number of sample points at each time point
     */
    @Generated
    private final int dimensions;

    /*
     * Decimal values with spaces, or "E" | "U" | "L"
     */
    @Generated
    private String data;

    /**
     * Creates an instance of FhirR4SampledData class.
     *
     * @param origin the origin value to set.
     * @param period the period value to set.
     * @param dimensions the dimensions value to set.
     */
    @Generated
    public FhirR4SampledData(FhirR4Quantity origin, double period, int dimensions) {
        this.origin = origin;
        this.period = period;
        this.dimensions = dimensions;
    }

    /**
     * Get the origin property: Zero value and units.
     *
     * @return the origin value.
     */
    @Generated
    public FhirR4Quantity getOrigin() {
        return this.origin;
    }

    /**
     * Get the period property: Number of milliseconds between samples.
     *
     * @return the period value.
     */
    @Generated
    public double getPeriod() {
        return this.period;
    }

    /**
     * Get the factor property: Multiply data by this before adding to origin.
     *
     * @return the factor value.
     */
    @Generated
    public Double getFactor() {
        return this.factor;
    }

    /**
     * Set the factor property: Multiply data by this before adding to origin.
     *
     * @param factor the factor value to set.
     * @return the FhirR4SampledData object itself.
     */
    @Generated
    public FhirR4SampledData setFactor(Double factor) {
        this.factor = factor;
        return this;
    }

    /**
     * Get the lowerLimit property: Lower limit of detection.
     *
     * @return the lowerLimit value.
     */
    @Generated
    public Double getLowerLimit() {
        return this.lowerLimit;
    }

    /**
     * Set the lowerLimit property: Lower limit of detection.
     *
     * @param lowerLimit the lowerLimit value to set.
     * @return the FhirR4SampledData object itself.
     */
    @Generated
    public FhirR4SampledData setLowerLimit(Double lowerLimit) {
        this.lowerLimit = lowerLimit;
        return this;
    }

    /**
     * Get the upperLimit property: Upper limit of detection.
     *
     * @return the upperLimit value.
     */
    @Generated
    public Double getUpperLimit() {
        return this.upperLimit;
    }

    /**
     * Set the upperLimit property: Upper limit of detection.
     *
     * @param upperLimit the upperLimit value to set.
     * @return the FhirR4SampledData object itself.
     */
    @Generated
    public FhirR4SampledData setUpperLimit(Double upperLimit) {
        this.upperLimit = upperLimit;
        return this;
    }

    /**
     * Get the dimensions property: Number of sample points at each time point.
     *
     * @return the dimensions value.
     */
    @Generated
    public int getDimensions() {
        return this.dimensions;
    }

    /**
     * Get the data property: Decimal values with spaces, or "E" | "U" | "L".
     *
     * @return the data value.
     */
    @Generated
    public String getData() {
        return this.data;
    }

    /**
     * Set the data property: Decimal values with spaces, or "E" | "U" | "L".
     *
     * @param data the data value to set.
     * @return the FhirR4SampledData object itself.
     */
    @Generated
    public FhirR4SampledData setData(String data) {
        this.data = data;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4SampledData setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4SampledData setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("origin", this.origin);
        jsonWriter.writeDoubleField("period", this.period);
        jsonWriter.writeIntField("dimensions", this.dimensions);
        jsonWriter.writeNumberField("factor", this.factor);
        jsonWriter.writeNumberField("lowerLimit", this.lowerLimit);
        jsonWriter.writeNumberField("upperLimit", this.upperLimit);
        jsonWriter.writeStringField("data", this.data);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4SampledData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4SampledData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FhirR4SampledData.
     */
    @Generated
    public static FhirR4SampledData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<FhirR4Extension> extension = null;
            FhirR4Quantity origin = null;
            double period = 0.0;
            int dimensions = 0;
            Double factor = null;
            Double lowerLimit = null;
            Double upperLimit = null;
            String data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("origin".equals(fieldName)) {
                    origin = FhirR4Quantity.fromJson(reader);
                } else if ("period".equals(fieldName)) {
                    period = reader.getDouble();
                } else if ("dimensions".equals(fieldName)) {
                    dimensions = reader.getInt();
                } else if ("factor".equals(fieldName)) {
                    factor = reader.getNullable(JsonReader::getDouble);
                } else if ("lowerLimit".equals(fieldName)) {
                    lowerLimit = reader.getNullable(JsonReader::getDouble);
                } else if ("upperLimit".equals(fieldName)) {
                    upperLimit = reader.getNullable(JsonReader::getDouble);
                } else if ("data".equals(fieldName)) {
                    data = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FhirR4SampledData deserializedFhirR4SampledData = new FhirR4SampledData(origin, period, dimensions);
            deserializedFhirR4SampledData.setId(id);
            deserializedFhirR4SampledData.setExtension(extension);
            deserializedFhirR4SampledData.factor = factor;
            deserializedFhirR4SampledData.lowerLimit = lowerLimit;
            deserializedFhirR4SampledData.upperLimit = upperLimit;
            deserializedFhirR4SampledData.data = data;
            return deserializedFhirR4SampledData;
        });
    }
}
