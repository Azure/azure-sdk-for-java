// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Guidance options.
 */
@Immutable
public final class GuidanceOptions implements JsonSerializable<GuidanceOptions> {

    /*
     * If this is true, also show guidances from a clinical history section i.e. if the first token of the associated
     * finding's clinical indicator is in this section. Default is false.
     */
    @Generated
    private final boolean showGuidanceInHistory;

    /**
     * Creates an instance of GuidanceOptions class.
     *
     * @param showGuidanceInHistory the showGuidanceInHistory value to set.
     */
    @Generated
    public GuidanceOptions(boolean showGuidanceInHistory) {
        this.showGuidanceInHistory = showGuidanceInHistory;
    }

    /**
     * Get the showGuidanceInHistory property: If this is true, also show guidances from a clinical history section i.e.
     * if the first token of the associated finding's clinical indicator is in this section. Default is false.
     *
     * @return the showGuidanceInHistory value.
     */
    @Generated
    public boolean isShowGuidanceInHistory() {
        return this.showGuidanceInHistory;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("showGuidanceInHistory", this.showGuidanceInHistory);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GuidanceOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GuidanceOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GuidanceOptions.
     */
    @Generated
    public static GuidanceOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            boolean showGuidanceInHistory = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("showGuidanceInHistory".equals(fieldName)) {
                    showGuidanceInHistory = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new GuidanceOptions(showGuidanceInHistory);
        });
    }
}
