// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Component results
 * Based on [FHIR Observation.component](https://www.hl7.org/fhir/R4/observation.html).
 */
@Immutable
public final class FhirR4ObservationComponent extends FhirR4Element {

    /*
     * Type of component observation (code / type)
     */
    @Generated
    private final FhirR4CodeableConcept code;

    /*
     * Value as Quantity
     */
    @Generated
    private FhirR4Quantity valueQuantity;

    /*
     * Value as CodeableConcept
     */
    @Generated
    private FhirR4CodeableConcept valueCodeableConcept;

    /*
     * Value as string
     */
    @Generated
    private String valueString;

    /*
     * Value as boolean
     */
    @Generated
    private Boolean valueBoolean;

    /*
     * Value as integer
     */
    @Generated
    private Integer valueInteger;

    /*
     * Value as Range.
     */
    @Generated
    private FhirR4Range valueRange;

    /*
     * Value as Ratio.
     */
    @Generated
    private FhirR4Ratio valueRatio;

    /*
     * Value as SampledData.
     */
    @Generated
    private FhirR4SampledData valueSampledData;

    /*
     * Value as time (hh:mm:ss)
     */
    @Generated
    private String valueTime;

    /*
     * Value as dateTime.
     */
    @Generated
    private String valueDateTime;

    /*
     * Value as Period.
     */
    @Generated
    private FhirR4Period valuePeriod;

    /*
     * Value as reference.
     */
    @Generated
    private FhirR4Reference valueReference;

    /*
     * Why the component result is missing
     */
    @Generated
    private FhirR4CodeableConcept dataAbsentReason;

    /*
     * High, low, normal, etc.
     */
    @Generated
    private List<FhirR4CodeableConcept> interpretation;

    /*
     * Provides guide for interpretation of component result
     */
    @Generated
    private List<FhirR4ObservationReferenceRange> referenceRange;

    /**
     * Creates an instance of FhirR4ObservationComponent class.
     *
     * @param code the code value to set.
     */
    @Generated
    private FhirR4ObservationComponent(FhirR4CodeableConcept code) {
        this.code = code;
    }

    /**
     * Get the code property: Type of component observation (code / type).
     *
     * @return the code value.
     */
    @Generated
    public FhirR4CodeableConcept getCode() {
        return this.code;
    }

    /**
     * Get the valueQuantity property: Value as Quantity.
     *
     * @return the valueQuantity value.
     */
    @Generated
    public FhirR4Quantity getValueQuantity() {
        return this.valueQuantity;
    }

    /**
     * Get the valueCodeableConcept property: Value as CodeableConcept.
     *
     * @return the valueCodeableConcept value.
     */
    @Generated
    public FhirR4CodeableConcept getValueCodeableConcept() {
        return this.valueCodeableConcept;
    }

    /**
     * Get the valueString property: Value as string.
     *
     * @return the valueString value.
     */
    @Generated
    public String getValueString() {
        return this.valueString;
    }

    /**
     * Get the valueBoolean property: Value as boolean.
     *
     * @return the valueBoolean value.
     */
    @Generated
    public Boolean isValueBoolean() {
        return this.valueBoolean;
    }

    /**
     * Get the valueInteger property: Value as integer.
     *
     * @return the valueInteger value.
     */
    @Generated
    public Integer getValueInteger() {
        return this.valueInteger;
    }

    /**
     * Get the valueRange property: Value as Range.
     *
     * @return the valueRange value.
     */
    @Generated
    public FhirR4Range getValueRange() {
        return this.valueRange;
    }

    /**
     * Get the valueRatio property: Value as Ratio.
     *
     * @return the valueRatio value.
     */
    @Generated
    public FhirR4Ratio getValueRatio() {
        return this.valueRatio;
    }

    /**
     * Get the valueSampledData property: Value as SampledData.
     *
     * @return the valueSampledData value.
     */
    @Generated
    public FhirR4SampledData getValueSampledData() {
        return this.valueSampledData;
    }

    /**
     * Get the valueTime property: Value as time (hh:mm:ss).
     *
     * @return the valueTime value.
     */
    @Generated
    public String getValueTime() {
        return this.valueTime;
    }

    /**
     * Get the valueDateTime property: Value as dateTime.
     *
     * @return the valueDateTime value.
     */
    @Generated
    public String getValueDateTime() {
        return this.valueDateTime;
    }

    /**
     * Get the valuePeriod property: Value as Period.
     *
     * @return the valuePeriod value.
     */
    @Generated
    public FhirR4Period getValuePeriod() {
        return this.valuePeriod;
    }

    /**
     * Get the valueReference property: Value as reference.
     *
     * @return the valueReference value.
     */
    @Generated
    public FhirR4Reference getValueReference() {
        return this.valueReference;
    }

    /**
     * Get the dataAbsentReason property: Why the component result is missing.
     *
     * @return the dataAbsentReason value.
     */
    @Generated
    public FhirR4CodeableConcept getDataAbsentReason() {
        return this.dataAbsentReason;
    }

    /**
     * Get the interpretation property: High, low, normal, etc.
     *
     * @return the interpretation value.
     */
    @Generated
    public List<FhirR4CodeableConcept> getInterpretation() {
        return this.interpretation;
    }

    /**
     * Get the referenceRange property: Provides guide for interpretation of component result.
     *
     * @return the referenceRange value.
     */
    @Generated
    public List<FhirR4ObservationReferenceRange> getReferenceRange() {
        return this.referenceRange;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeJsonField("valueQuantity", this.valueQuantity);
        jsonWriter.writeJsonField("valueCodeableConcept", this.valueCodeableConcept);
        jsonWriter.writeStringField("valueString", this.valueString);
        jsonWriter.writeBooleanField("valueBoolean", this.valueBoolean);
        jsonWriter.writeNumberField("valueInteger", this.valueInteger);
        jsonWriter.writeJsonField("valueRange", this.valueRange);
        jsonWriter.writeJsonField("valueRatio", this.valueRatio);
        jsonWriter.writeJsonField("valueSampledData", this.valueSampledData);
        jsonWriter.writeStringField("valueTime", this.valueTime);
        jsonWriter.writeStringField("valueDateTime", this.valueDateTime);
        jsonWriter.writeJsonField("valuePeriod", this.valuePeriod);
        jsonWriter.writeJsonField("valueReference", this.valueReference);
        jsonWriter.writeJsonField("dataAbsentReason", this.dataAbsentReason);
        jsonWriter.writeArrayField("interpretation", this.interpretation,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("referenceRange", this.referenceRange,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4ObservationComponent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4ObservationComponent if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FhirR4ObservationComponent.
     */
    @Generated
    public static FhirR4ObservationComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<FhirR4Extension> extension = null;
            FhirR4CodeableConcept code = null;
            FhirR4Quantity valueQuantity = null;
            FhirR4CodeableConcept valueCodeableConcept = null;
            String valueString = null;
            Boolean valueBoolean = null;
            Integer valueInteger = null;
            FhirR4Range valueRange = null;
            FhirR4Ratio valueRatio = null;
            FhirR4SampledData valueSampledData = null;
            String valueTime = null;
            String valueDateTime = null;
            FhirR4Period valuePeriod = null;
            FhirR4Reference valueReference = null;
            FhirR4CodeableConcept dataAbsentReason = null;
            List<FhirR4CodeableConcept> interpretation = null;
            List<FhirR4ObservationReferenceRange> referenceRange = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("code".equals(fieldName)) {
                    code = FhirR4CodeableConcept.fromJson(reader);
                } else if ("valueQuantity".equals(fieldName)) {
                    valueQuantity = FhirR4Quantity.fromJson(reader);
                } else if ("valueCodeableConcept".equals(fieldName)) {
                    valueCodeableConcept = FhirR4CodeableConcept.fromJson(reader);
                } else if ("valueString".equals(fieldName)) {
                    valueString = reader.getString();
                } else if ("valueBoolean".equals(fieldName)) {
                    valueBoolean = reader.getNullable(JsonReader::getBoolean);
                } else if ("valueInteger".equals(fieldName)) {
                    valueInteger = reader.getNullable(JsonReader::getInt);
                } else if ("valueRange".equals(fieldName)) {
                    valueRange = FhirR4Range.fromJson(reader);
                } else if ("valueRatio".equals(fieldName)) {
                    valueRatio = FhirR4Ratio.fromJson(reader);
                } else if ("valueSampledData".equals(fieldName)) {
                    valueSampledData = FhirR4SampledData.fromJson(reader);
                } else if ("valueTime".equals(fieldName)) {
                    valueTime = reader.getString();
                } else if ("valueDateTime".equals(fieldName)) {
                    valueDateTime = reader.getString();
                } else if ("valuePeriod".equals(fieldName)) {
                    valuePeriod = FhirR4Period.fromJson(reader);
                } else if ("valueReference".equals(fieldName)) {
                    valueReference = FhirR4Reference.fromJson(reader);
                } else if ("dataAbsentReason".equals(fieldName)) {
                    dataAbsentReason = FhirR4CodeableConcept.fromJson(reader);
                } else if ("interpretation".equals(fieldName)) {
                    interpretation = reader.readArray(reader1 -> FhirR4CodeableConcept.fromJson(reader1));
                } else if ("referenceRange".equals(fieldName)) {
                    referenceRange = reader.readArray(reader1 -> FhirR4ObservationReferenceRange.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            FhirR4ObservationComponent deserializedFhirR4ObservationComponent = new FhirR4ObservationComponent(code);
            deserializedFhirR4ObservationComponent.setId(id);
            deserializedFhirR4ObservationComponent.setExtension(extension);
            deserializedFhirR4ObservationComponent.valueQuantity = valueQuantity;
            deserializedFhirR4ObservationComponent.valueCodeableConcept = valueCodeableConcept;
            deserializedFhirR4ObservationComponent.valueString = valueString;
            deserializedFhirR4ObservationComponent.valueBoolean = valueBoolean;
            deserializedFhirR4ObservationComponent.valueInteger = valueInteger;
            deserializedFhirR4ObservationComponent.valueRange = valueRange;
            deserializedFhirR4ObservationComponent.valueRatio = valueRatio;
            deserializedFhirR4ObservationComponent.valueSampledData = valueSampledData;
            deserializedFhirR4ObservationComponent.valueTime = valueTime;
            deserializedFhirR4ObservationComponent.valueDateTime = valueDateTime;
            deserializedFhirR4ObservationComponent.valuePeriod = valuePeriod;
            deserializedFhirR4ObservationComponent.valueReference = valueReference;
            deserializedFhirR4ObservationComponent.dataAbsentReason = dataAbsentReason;
            deserializedFhirR4ObservationComponent.interpretation = interpretation;
            deserializedFhirR4ObservationComponent.referenceRange = referenceRange;
            return deserializedFhirR4ObservationComponent;
        });
    }
}
