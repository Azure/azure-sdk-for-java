// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A ratio of two Quantity values - a numerator and a denominator
 * Based on [FHIR Ratio](https://www.hl7.org/fhir/R4/datatypes.html#Ratio).
 */
@Fluent
public final class FhirR4Ratio extends FhirR4Element {

    /*
     * Numerator value
     */
    @Generated
    private FhirR4Quantity numerator;

    /*
     * Denominator value
     */
    @Generated
    private FhirR4Quantity denominator;

    /**
     * Creates an instance of FhirR4Ratio class.
     */
    @Generated
    public FhirR4Ratio() {
    }

    /**
     * Get the numerator property: Numerator value.
     *
     * @return the numerator value.
     */
    @Generated
    public FhirR4Quantity getNumerator() {
        return this.numerator;
    }

    /**
     * Set the numerator property: Numerator value.
     *
     * @param numerator the numerator value to set.
     * @return the FhirR4Ratio object itself.
     */
    @Generated
    public FhirR4Ratio setNumerator(FhirR4Quantity numerator) {
        this.numerator = numerator;
        return this;
    }

    /**
     * Get the denominator property: Denominator value.
     *
     * @return the denominator value.
     */
    @Generated
    public FhirR4Quantity getDenominator() {
        return this.denominator;
    }

    /**
     * Set the denominator property: Denominator value.
     *
     * @param denominator the denominator value to set.
     * @return the FhirR4Ratio object itself.
     */
    @Generated
    public FhirR4Ratio setDenominator(FhirR4Quantity denominator) {
        this.denominator = denominator;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Ratio setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Ratio setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("numerator", this.numerator);
        jsonWriter.writeJsonField("denominator", this.denominator);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Ratio from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Ratio if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4Ratio.
     */
    @Generated
    public static FhirR4Ratio fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4Ratio deserializedFhirR4Ratio = new FhirR4Ratio();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4Ratio.setId(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4Ratio.setExtension(extension);
                } else if ("numerator".equals(fieldName)) {
                    deserializedFhirR4Ratio.numerator = FhirR4Quantity.fromJson(reader);
                } else if ("denominator".equals(fieldName)) {
                    deserializedFhirR4Ratio.denominator = FhirR4Quantity.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4Ratio;
        });
    }
}
