// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The content of the patient document.
 */
@Immutable
public final class ClinicalDocumentContent implements JsonSerializable<ClinicalDocumentContent> {

    /*
     * The type of the content's source.
     * In case the source type is 'inline', the content is given as a string (for instance, text).
     * In case the source type is 'reference', the content is given as a URI.
     */
    @Generated
    private final DocumentContentSourceType sourceType;

    /*
     * The content of the document, given either inline (as a string) or as a reference (URI).
     */
    @Generated
    private final String value;

    /**
     * Creates an instance of ClinicalDocumentContent class.
     *
     * @param sourceType the sourceType value to set.
     * @param value the value value to set.
     */
    @Generated
    public ClinicalDocumentContent(DocumentContentSourceType sourceType, String value) {
        this.sourceType = sourceType;
        this.value = value;
    }

    /**
     * Get the sourceType property: The type of the content's source.
     * In case the source type is 'inline', the content is given as a string (for instance, text).
     * In case the source type is 'reference', the content is given as a URI.
     *
     * @return the sourceType value.
     */
    @Generated
    public DocumentContentSourceType getSourceType() {
        return this.sourceType;
    }

    /**
     * Get the value property: The content of the document, given either inline (as a string) or as a reference (URI).
     *
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        jsonWriter.writeStringField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClinicalDocumentContent from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClinicalDocumentContent if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClinicalDocumentContent.
     */
    @Generated
    public static ClinicalDocumentContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentContentSourceType sourceType = null;
            String value = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sourceType".equals(fieldName)) {
                    sourceType = DocumentContentSourceType.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ClinicalDocumentContent(sourceType, value);
        });
    }
}
