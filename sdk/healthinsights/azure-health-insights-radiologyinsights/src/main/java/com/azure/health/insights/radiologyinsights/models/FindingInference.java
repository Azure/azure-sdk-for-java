// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Findings in a radiology report typically describe abnormalities, lesions, or other notable observations related to the anatomy or pathology of the imaged area.
 */
@Immutable
public final class FindingInference extends FhirR4Extendible1 {

    /*
     * Finding data : contains extensions, fields and components linked with the finding.
     */
    @Generated
    private final FhirR4Observation finding;

    /**
     * Creates an instance of FindingInference class.
     *
     * @param finding the finding value to set.
     */
    @Generated
    private FindingInference(FhirR4Observation finding) {
        setKind(RadiologyInsightsInferenceType.FINDING);
        this.finding = finding;
    }

    /**
     * Get the finding property: Finding data : contains extensions, fields and components linked with the finding.
     *
     * @return the finding value.
     */
    @Generated
    public FhirR4Observation getFinding() {
        return this.finding;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("finding", this.finding);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FindingInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FindingInference if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FindingInference.
     */
    @Generated
    public static FindingInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.FINDING;
            List<FhirR4Extension> extension = null;
            FhirR4Observation finding = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    kind = RadiologyInsightsInferenceType.fromString(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("finding".equals(fieldName)) {
                    finding = FhirR4Observation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            FindingInference deserializedFindingInference = new FindingInference(finding);
            deserializedFindingInference.setKind(kind);
            deserializedFindingInference.setExtension(extension);
            return deserializedFindingInference;
        });
    }
}
