// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A text note which also contains information about who made the statement and when
 * Based on [FHIR Annotation](https://www.hl7.org/fhir/R4/datatypes.html#Annotation).
 */
@Immutable
public final class FhirR4Annotation extends FhirR4Element {

    /*
     * Individual responsible for the annotation
     */
    @Generated
    private String authorString;

    /*
     * When the annotation was made
     */
    @Generated
    private String time;

    /*
     * The annotation - text content (as markdown)
     */
    @Generated
    private final String text;

    /**
     * Creates an instance of FhirR4Annotation class.
     *
     * @param text the text value to set.
     */
    @Generated
    private FhirR4Annotation(String text) {
        this.text = text;
    }

    /**
     * Get the authorString property: Individual responsible for the annotation.
     *
     * @return the authorString value.
     */
    @Generated
    public String getAuthorString() {
        return this.authorString;
    }

    /**
     * Get the time property: When the annotation was made.
     *
     * @return the time value.
     */
    @Generated
    public String getTime() {
        return this.time;
    }

    /**
     * Get the text property: The annotation - text content (as markdown).
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("text", this.text);
        jsonWriter.writeStringField("authorString", this.authorString);
        jsonWriter.writeStringField("time", this.time);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Annotation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Annotation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FhirR4Annotation.
     */
    @Generated
    public static FhirR4Annotation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<FhirR4Extension> extension = null;
            String text = null;
            String authorString = null;
            String time = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else if ("authorString".equals(fieldName)) {
                    authorString = reader.getString();
                } else if ("time".equals(fieldName)) {
                    time = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FhirR4Annotation deserializedFhirR4Annotation = new FhirR4Annotation(text);
            deserializedFhirR4Annotation.setId(id);
            deserializedFhirR4Annotation.setExtension(extension);
            deserializedFhirR4Annotation.authorString = authorString;
            deserializedFhirR4Annotation.time = time;
            return deserializedFhirR4Annotation;
        });
    }
}
