// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A Coding is a representation of a defined concept using a symbol from a defined "code system".
 * Based on [FHIR Coding](https://www.hl7.org/fhir/R4/datatypes.html#Coding).
 */
@Fluent
public final class FhirR4Coding extends FhirR4Element {

    /*
     * Identity of the terminology system
     */
    @Generated
    private String system;

    /*
     * Version of the system - if relevant
     */
    @Generated
    private String version;

    /*
     * Symbol in syntax defined by the system
     */
    @Generated
    private String code;

    /*
     * Representation defined by the system
     */
    @Generated
    private String display;

    /**
     * Creates an instance of FhirR4Coding class.
     */
    @Generated
    public FhirR4Coding() {
    }

    /**
     * Get the system property: Identity of the terminology system.
     *
     * @return the system value.
     */
    @Generated
    public String getSystem() {
        return this.system;
    }

    /**
     * Set the system property: Identity of the terminology system.
     *
     * @param system the system value to set.
     * @return the FhirR4Coding object itself.
     */
    @Generated
    public FhirR4Coding setSystem(String system) {
        this.system = system;
        return this;
    }

    /**
     * Get the version property: Version of the system - if relevant.
     *
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Set the version property: Version of the system - if relevant.
     *
     * @param version the version value to set.
     * @return the FhirR4Coding object itself.
     */
    @Generated
    public FhirR4Coding setVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the code property: Symbol in syntax defined by the system.
     *
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Set the code property: Symbol in syntax defined by the system.
     *
     * @param code the code value to set.
     * @return the FhirR4Coding object itself.
     */
    @Generated
    public FhirR4Coding setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Get the display property: Representation defined by the system.
     *
     * @return the display value.
     */
    @Generated
    public String getDisplay() {
        return this.display;
    }

    /**
     * Set the display property: Representation defined by the system.
     *
     * @param display the display value to set.
     * @return the FhirR4Coding object itself.
     */
    @Generated
    public FhirR4Coding setDisplay(String display) {
        this.display = display;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Coding setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Coding setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("system", this.system);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("display", this.display);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Coding from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Coding if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4Coding.
     */
    @Generated
    public static FhirR4Coding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4Coding deserializedFhirR4Coding = new FhirR4Coding();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4Coding.setId(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4Coding.setExtension(extension);
                } else if ("system".equals(fieldName)) {
                    deserializedFhirR4Coding.system = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedFhirR4Coding.version = reader.getString();
                } else if ("code".equals(fieldName)) {
                    deserializedFhirR4Coding.code = reader.getString();
                } else if ("display".equals(fieldName)) {
                    deserializedFhirR4Coding.display = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4Coding;
        });
    }
}
