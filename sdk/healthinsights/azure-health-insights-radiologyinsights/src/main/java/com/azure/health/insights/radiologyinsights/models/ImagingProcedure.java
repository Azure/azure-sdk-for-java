// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Imaging procedure.
 */
@Immutable
public final class ImagingProcedure implements JsonSerializable<ImagingProcedure> {

    /*
     * Modality : SNOMED CT code.
     */
    @Generated
    private final FhirR4CodeableConcept modality;

    /*
     * Anatomy : SNOMED CT code.
     */
    @Generated
    private final FhirR4CodeableConcept anatomy;

    /*
     * Laterality : SNOMED CT code.
     */
    @Generated
    private FhirR4CodeableConcept laterality;

    /*
     * Contrast : see RadiologyCodeWithTypes (below).
     */
    @Generated
    private RadiologyCodeWithTypes contrast;

    /*
     * View : see RadiologyCodeWithTypes (below).
     */
    @Generated
    private RadiologyCodeWithTypes view;

    /**
     * Creates an instance of ImagingProcedure class.
     *
     * @param modality the modality value to set.
     * @param anatomy the anatomy value to set.
     */
    @Generated
    private ImagingProcedure(FhirR4CodeableConcept modality, FhirR4CodeableConcept anatomy) {
        this.modality = modality;
        this.anatomy = anatomy;
    }

    /**
     * Get the modality property: Modality : SNOMED CT code.
     *
     * @return the modality value.
     */
    @Generated
    public FhirR4CodeableConcept getModality() {
        return this.modality;
    }

    /**
     * Get the anatomy property: Anatomy : SNOMED CT code.
     *
     * @return the anatomy value.
     */
    @Generated
    public FhirR4CodeableConcept getAnatomy() {
        return this.anatomy;
    }

    /**
     * Get the laterality property: Laterality : SNOMED CT code.
     *
     * @return the laterality value.
     */
    @Generated
    public FhirR4CodeableConcept getLaterality() {
        return this.laterality;
    }

    /**
     * Get the contrast property: Contrast : see RadiologyCodeWithTypes (below).
     *
     * @return the contrast value.
     */
    @Generated
    public RadiologyCodeWithTypes getContrast() {
        return this.contrast;
    }

    /**
     * Get the view property: View : see RadiologyCodeWithTypes (below).
     *
     * @return the view value.
     */
    @Generated
    public RadiologyCodeWithTypes getView() {
        return this.view;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("modality", this.modality);
        jsonWriter.writeJsonField("anatomy", this.anatomy);
        jsonWriter.writeJsonField("laterality", this.laterality);
        jsonWriter.writeJsonField("contrast", this.contrast);
        jsonWriter.writeJsonField("view", this.view);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImagingProcedure from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImagingProcedure if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ImagingProcedure.
     */
    @Generated
    public static ImagingProcedure fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4CodeableConcept modality = null;
            FhirR4CodeableConcept anatomy = null;
            FhirR4CodeableConcept laterality = null;
            RadiologyCodeWithTypes contrast = null;
            RadiologyCodeWithTypes view = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("modality".equals(fieldName)) {
                    modality = FhirR4CodeableConcept.fromJson(reader);
                } else if ("anatomy".equals(fieldName)) {
                    anatomy = FhirR4CodeableConcept.fromJson(reader);
                } else if ("laterality".equals(fieldName)) {
                    laterality = FhirR4CodeableConcept.fromJson(reader);
                } else if ("contrast".equals(fieldName)) {
                    contrast = RadiologyCodeWithTypes.fromJson(reader);
                } else if ("view".equals(fieldName)) {
                    view = RadiologyCodeWithTypes.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ImagingProcedure deserializedImagingProcedure = new ImagingProcedure(modality, anatomy);
            deserializedImagingProcedure.laterality = laterality;
            deserializedImagingProcedure.contrast = contrast;
            deserializedImagingProcedure.view = view;
            return deserializedImagingProcedure;
        });
    }
}
