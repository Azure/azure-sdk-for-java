// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An identifier intended for computation
 * Based on [FHIR Identifier](https://www.hl7.org/fhir/R4/identifier.html).
 */
@Fluent
public final class FhirR4Identifier extends FhirR4Element {

    /*
     * usual | official | temp | secondary | old (If known)
     */
    @Generated
    private String use;

    /*
     * Description of identifier
     */
    @Generated
    private FhirR4CodeableConcept type;

    /*
     * The namespace for the identifier value
     */
    @Generated
    private String system;

    /*
     * The value that is unique
     */
    @Generated
    private String value;

    /*
     * Time period when id is/was valid for use
     */
    @Generated
    private FhirR4Period period;

    /*
     * Organization that issued id (may be just text)
     */
    @Generated
    private FhirR4Reference assigner;

    /**
     * Creates an instance of FhirR4Identifier class.
     */
    @Generated
    public FhirR4Identifier() {
    }

    /**
     * Get the use property: usual | official | temp | secondary | old (If known).
     *
     * @return the use value.
     */
    @Generated
    public String getUse() {
        return this.use;
    }

    /**
     * Set the use property: usual | official | temp | secondary | old (If known).
     *
     * @param use the use value to set.
     * @return the FhirR4Identifier object itself.
     */
    @Generated
    public FhirR4Identifier setUse(String use) {
        this.use = use;
        return this;
    }

    /**
     * Get the type property: Description of identifier.
     *
     * @return the type value.
     */
    @Generated
    public FhirR4CodeableConcept getType() {
        return this.type;
    }

    /**
     * Set the type property: Description of identifier.
     *
     * @param type the type value to set.
     * @return the FhirR4Identifier object itself.
     */
    @Generated
    public FhirR4Identifier setType(FhirR4CodeableConcept type) {
        this.type = type;
        return this;
    }

    /**
     * Get the system property: The namespace for the identifier value.
     *
     * @return the system value.
     */
    @Generated
    public String getSystem() {
        return this.system;
    }

    /**
     * Set the system property: The namespace for the identifier value.
     *
     * @param system the system value to set.
     * @return the FhirR4Identifier object itself.
     */
    @Generated
    public FhirR4Identifier setSystem(String system) {
        this.system = system;
        return this;
    }

    /**
     * Get the value property: The value that is unique.
     *
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * Set the value property: The value that is unique.
     *
     * @param value the value value to set.
     * @return the FhirR4Identifier object itself.
     */
    @Generated
    public FhirR4Identifier setValue(String value) {
        this.value = value;
        return this;
    }

    /**
     * Get the period property: Time period when id is/was valid for use.
     *
     * @return the period value.
     */
    @Generated
    public FhirR4Period getPeriod() {
        return this.period;
    }

    /**
     * Set the period property: Time period when id is/was valid for use.
     *
     * @param period the period value to set.
     * @return the FhirR4Identifier object itself.
     */
    @Generated
    public FhirR4Identifier setPeriod(FhirR4Period period) {
        this.period = period;
        return this;
    }

    /**
     * Get the assigner property: Organization that issued id (may be just text).
     *
     * @return the assigner value.
     */
    @Generated
    public FhirR4Reference getAssigner() {
        return this.assigner;
    }

    /**
     * Set the assigner property: Organization that issued id (may be just text).
     *
     * @param assigner the assigner value to set.
     * @return the FhirR4Identifier object itself.
     */
    @Generated
    public FhirR4Identifier setAssigner(FhirR4Reference assigner) {
        this.assigner = assigner;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Identifier setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Identifier setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("use", this.use);
        jsonWriter.writeJsonField("type", this.type);
        jsonWriter.writeStringField("system", this.system);
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeJsonField("period", this.period);
        jsonWriter.writeJsonField("assigner", this.assigner);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Identifier from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Identifier if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4Identifier.
     */
    @Generated
    public static FhirR4Identifier fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4Identifier deserializedFhirR4Identifier = new FhirR4Identifier();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4Identifier.setId(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4Identifier.setExtension(extension);
                } else if ("use".equals(fieldName)) {
                    deserializedFhirR4Identifier.use = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFhirR4Identifier.type = FhirR4CodeableConcept.fromJson(reader);
                } else if ("system".equals(fieldName)) {
                    deserializedFhirR4Identifier.system = reader.getString();
                } else if ("value".equals(fieldName)) {
                    deserializedFhirR4Identifier.value = reader.getString();
                } else if ("period".equals(fieldName)) {
                    deserializedFhirR4Identifier.period = FhirR4Period.fromJson(reader);
                } else if ("assigner".equals(fieldName)) {
                    deserializedFhirR4Identifier.assigner = FhirR4Reference.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4Identifier;
        });
    }
}
