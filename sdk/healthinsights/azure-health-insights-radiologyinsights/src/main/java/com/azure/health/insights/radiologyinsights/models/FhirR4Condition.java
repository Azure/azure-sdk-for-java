// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Detailed information about conditions, problems or diagnoses
 * Based on [FHIR Condition](https://www.hl7.org/fhir/R4/condition.html).
 */
@Immutable
public final class FhirR4Condition extends FhirR4DomainResource {

    /*
     * Discriminator property for Fhir_R4_DomainResource.
     */
    @Generated
    private String resourceType = "Condition";

    /*
     * External Ids for this condition
     */
    @Generated
    private List<FhirR4Identifier> identifier;

    /*
     * active | recurrence | relapse | inactive | remission | resolved
     */
    @Generated
    private FhirR4CodeableConcept clinicalStatus;

    /*
     * unconfirmed | provisional | differential | confirmed | refuted | entered-in-error
     */
    @Generated
    private FhirR4CodeableConcept verificationStatus;

    /*
     * problem-list-item | encounter-diagnosis
     */
    @Generated
    private List<FhirR4CodeableConcept> category;

    /*
     * Subjective severity of condition
     */
    @Generated
    private FhirR4CodeableConcept severity;

    /*
     * Identification of the condition, problem or diagnosis
     */
    @Generated
    private FhirR4CodeableConcept code;

    /*
     * Anatomical location, if relevant
     */
    @Generated
    private List<FhirR4CodeableConcept> bodySite;

    /*
     * Encounter created as part of
     */
    @Generated
    private FhirR4Reference encounter;

    /*
     * Estimated or actual date, date-time, or age
     */
    @Generated
    private String onsetDateTime;

    /*
     * Estimated or actual date, date-time, or age
     */
    @Generated
    private FhirR4Quantity onsetAge;

    /*
     * Estimated or actual date, date-time, or age
     */
    @Generated
    private FhirR4Period onsetPeriod;

    /*
     * Estimated or actual date, date-time, or age
     */
    @Generated
    private FhirR4Range onsetRange;

    /*
     * Estimated or actual date, date-time, or age
     */
    @Generated
    private String onsetString;

    /*
     * When in resolution/remission
     */
    @Generated
    private String abatementDateTime;

    /*
     * When in resolution/remission
     */
    @Generated
    private FhirR4Quantity abatementAge;

    /*
     * When in resolution/remission
     */
    @Generated
    private FhirR4Period abatementPeriod;

    /*
     * When in resolution/remission
     */
    @Generated
    private FhirR4Range abatementRange;

    /*
     * When in resolution/remission
     */
    @Generated
    private String abatementString;

    /*
     * Date record was first recorded
     */
    @Generated
    private String recordedDate;

    /*
     * stge/grade, usually assessed formally
     */
    @Generated
    private List<FhirR4ConditionStage> stage;

    /*
     * Additional information about the Condition
     */
    @Generated
    private List<FhirR4Annotation> note;

    /**
     * Creates an instance of FhirR4Condition class.
     *
     * @param resourceType the resourceType value to set.
     */
    @Generated
    private FhirR4Condition(String resourceType) {
        super(resourceType);
    }

    /**
     * Get the resourceType property: Discriminator property for Fhir_R4_DomainResource.
     *
     * @return the resourceType value.
     */
    @Generated
    @Override
    public String getResourceType() {
        return this.resourceType;
    }

    /**
     * Get the identifier property: External Ids for this condition.
     *
     * @return the identifier value.
     */
    @Generated
    public List<FhirR4Identifier> getIdentifier() {
        return this.identifier;
    }

    /**
     * Get the clinicalStatus property: active | recurrence | relapse | inactive | remission | resolved.
     *
     * @return the clinicalStatus value.
     */
    @Generated
    public FhirR4CodeableConcept getClinicalStatus() {
        return this.clinicalStatus;
    }

    /**
     * Get the verificationStatus property: unconfirmed | provisional | differential | confirmed | refuted |
     * entered-in-error.
     *
     * @return the verificationStatus value.
     */
    @Generated
    public FhirR4CodeableConcept getVerificationStatus() {
        return this.verificationStatus;
    }

    /**
     * Get the category property: problem-list-item | encounter-diagnosis.
     *
     * @return the category value.
     */
    @Generated
    public List<FhirR4CodeableConcept> getCategory() {
        return this.category;
    }

    /**
     * Get the severity property: Subjective severity of condition.
     *
     * @return the severity value.
     */
    @Generated
    public FhirR4CodeableConcept getSeverity() {
        return this.severity;
    }

    /**
     * Get the code property: Identification of the condition, problem or diagnosis.
     *
     * @return the code value.
     */
    @Generated
    public FhirR4CodeableConcept getCode() {
        return this.code;
    }

    /**
     * Get the bodySite property: Anatomical location, if relevant.
     *
     * @return the bodySite value.
     */
    @Generated
    public List<FhirR4CodeableConcept> getBodySite() {
        return this.bodySite;
    }

    /**
     * Get the encounter property: Encounter created as part of.
     *
     * @return the encounter value.
     */
    @Generated
    public FhirR4Reference getEncounter() {
        return this.encounter;
    }

    /**
     * Get the onsetDateTime property: Estimated or actual date, date-time, or age.
     *
     * @return the onsetDateTime value.
     */
    @Generated
    public String getOnsetDateTime() {
        return this.onsetDateTime;
    }

    /**
     * Get the onsetAge property: Estimated or actual date, date-time, or age.
     *
     * @return the onsetAge value.
     */
    @Generated
    public FhirR4Quantity getOnsetAge() {
        return this.onsetAge;
    }

    /**
     * Get the onsetPeriod property: Estimated or actual date, date-time, or age.
     *
     * @return the onsetPeriod value.
     */
    @Generated
    public FhirR4Period getOnsetPeriod() {
        return this.onsetPeriod;
    }

    /**
     * Get the onsetRange property: Estimated or actual date, date-time, or age.
     *
     * @return the onsetRange value.
     */
    @Generated
    public FhirR4Range getOnsetRange() {
        return this.onsetRange;
    }

    /**
     * Get the onsetString property: Estimated or actual date, date-time, or age.
     *
     * @return the onsetString value.
     */
    @Generated
    public String getOnsetString() {
        return this.onsetString;
    }

    /**
     * Get the abatementDateTime property: When in resolution/remission.
     *
     * @return the abatementDateTime value.
     */
    @Generated
    public String getAbatementDateTime() {
        return this.abatementDateTime;
    }

    /**
     * Get the abatementAge property: When in resolution/remission.
     *
     * @return the abatementAge value.
     */
    @Generated
    public FhirR4Quantity getAbatementAge() {
        return this.abatementAge;
    }

    /**
     * Get the abatementPeriod property: When in resolution/remission.
     *
     * @return the abatementPeriod value.
     */
    @Generated
    public FhirR4Period getAbatementPeriod() {
        return this.abatementPeriod;
    }

    /**
     * Get the abatementRange property: When in resolution/remission.
     *
     * @return the abatementRange value.
     */
    @Generated
    public FhirR4Range getAbatementRange() {
        return this.abatementRange;
    }

    /**
     * Get the abatementString property: When in resolution/remission.
     *
     * @return the abatementString value.
     */
    @Generated
    public String getAbatementString() {
        return this.abatementString;
    }

    /**
     * Get the recordedDate property: Date record was first recorded.
     *
     * @return the recordedDate value.
     */
    @Generated
    public String getRecordedDate() {
        return this.recordedDate;
    }

    /**
     * Get the stage property: stge/grade, usually assessed formally.
     *
     * @return the stage value.
     */
    @Generated
    public List<FhirR4ConditionStage> getStage() {
        return this.stage;
    }

    /**
     * Get the note property: Additional information about the Condition.
     *
     * @return the note value.
     */
    @Generated
    public List<FhirR4Annotation> getNote() {
        return this.note;
    }

    /*
     * Extensions that cannot be ignored
     */
    @Generated
    private List<FhirR4Extension> modifierExtension;

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /*
     * Contained, inline Resources
     */
    @Generated
    private List<FhirR4Resource> contained;

    /*
     * Text summary of the resource, for human interpretation
     */
    @Generated
    private FhirR4Narrative text;

    /**
     * Get the modifierExtension property: Extensions that cannot be ignored.
     *
     * @return the modifierExtension value.
     */
    @Generated
    @Override
    public List<FhirR4Extension> getModifierExtension() {
        return this.modifierExtension;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    @Override
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * Get the contained property: Contained, inline Resources.
     *
     * @return the contained value.
     */
    @Generated
    @Override
    public List<FhirR4Resource> getContained() {
        return this.contained;
    }

    /**
     * Get the text property: Text summary of the resource, for human interpretation.
     *
     * @return the text value.
     */
    @Generated
    @Override
    public FhirR4Narrative getText() {
        return this.text;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeJsonField("meta", getMeta());
        jsonWriter.writeStringField("implicitRules", getImplicitRules());
        jsonWriter.writeStringField("language", getLanguage());
        jsonWriter.writeJsonField("text", getText());
        jsonWriter.writeArrayField("contained", getContained(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("modifierExtension", getModifierExtension(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeArrayField("identifier", this.identifier, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("clinicalStatus", this.clinicalStatus);
        jsonWriter.writeJsonField("verificationStatus", this.verificationStatus);
        jsonWriter.writeArrayField("category", this.category, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("severity", this.severity);
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeArrayField("bodySite", this.bodySite, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("encounter", this.encounter);
        jsonWriter.writeStringField("onsetDateTime", this.onsetDateTime);
        jsonWriter.writeJsonField("onsetAge", this.onsetAge);
        jsonWriter.writeJsonField("onsetPeriod", this.onsetPeriod);
        jsonWriter.writeJsonField("onsetRange", this.onsetRange);
        jsonWriter.writeStringField("onsetString", this.onsetString);
        jsonWriter.writeStringField("abatementDateTime", this.abatementDateTime);
        jsonWriter.writeJsonField("abatementAge", this.abatementAge);
        jsonWriter.writeJsonField("abatementPeriod", this.abatementPeriod);
        jsonWriter.writeJsonField("abatementRange", this.abatementRange);
        jsonWriter.writeStringField("abatementString", this.abatementString);
        jsonWriter.writeStringField("recordedDate", this.recordedDate);
        jsonWriter.writeArrayField("stage", this.stage, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("note", this.note, (writer, element) -> writer.writeJson(element));
        if (getAdditionalProperties() != null) {
            for (Map.Entry<String, Object> additionalProperty : getAdditionalProperties().entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Condition from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Condition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FhirR4Condition.
     */
    @Generated
    public static FhirR4Condition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            FhirR4Meta meta = null;
            String implicitRules = null;
            String language = null;
            FhirR4Narrative text = null;
            List<FhirR4Resource> contained = null;
            List<FhirR4Extension> extension = null;
            List<FhirR4Extension> modifierExtension = null;
            String resourceType = "Condition";
            List<FhirR4Identifier> identifier = null;
            FhirR4CodeableConcept clinicalStatus = null;
            FhirR4CodeableConcept verificationStatus = null;
            List<FhirR4CodeableConcept> category = null;
            FhirR4CodeableConcept severity = null;
            FhirR4CodeableConcept code = null;
            List<FhirR4CodeableConcept> bodySite = null;
            FhirR4Reference encounter = null;
            String onsetDateTime = null;
            FhirR4Quantity onsetAge = null;
            FhirR4Period onsetPeriod = null;
            FhirR4Range onsetRange = null;
            String onsetString = null;
            String abatementDateTime = null;
            FhirR4Quantity abatementAge = null;
            FhirR4Period abatementPeriod = null;
            FhirR4Range abatementRange = null;
            String abatementString = null;
            String recordedDate = null;
            List<FhirR4ConditionStage> stage = null;
            List<FhirR4Annotation> note = null;
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("meta".equals(fieldName)) {
                    meta = FhirR4Meta.fromJson(reader);
                } else if ("implicitRules".equals(fieldName)) {
                    implicitRules = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else if ("text".equals(fieldName)) {
                    text = FhirR4Narrative.fromJson(reader);
                } else if ("contained".equals(fieldName)) {
                    contained = reader.readArray(reader1 -> FhirR4Resource.fromJson(reader1));
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("modifierExtension".equals(fieldName)) {
                    modifierExtension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("resourceType".equals(fieldName)) {
                    resourceType = reader.getString();
                } else if ("identifier".equals(fieldName)) {
                    identifier = reader.readArray(reader1 -> FhirR4Identifier.fromJson(reader1));
                } else if ("clinicalStatus".equals(fieldName)) {
                    clinicalStatus = FhirR4CodeableConcept.fromJson(reader);
                } else if ("verificationStatus".equals(fieldName)) {
                    verificationStatus = FhirR4CodeableConcept.fromJson(reader);
                } else if ("category".equals(fieldName)) {
                    category = reader.readArray(reader1 -> FhirR4CodeableConcept.fromJson(reader1));
                } else if ("severity".equals(fieldName)) {
                    severity = FhirR4CodeableConcept.fromJson(reader);
                } else if ("code".equals(fieldName)) {
                    code = FhirR4CodeableConcept.fromJson(reader);
                } else if ("bodySite".equals(fieldName)) {
                    bodySite = reader.readArray(reader1 -> FhirR4CodeableConcept.fromJson(reader1));
                } else if ("encounter".equals(fieldName)) {
                    encounter = FhirR4Reference.fromJson(reader);
                } else if ("onsetDateTime".equals(fieldName)) {
                    onsetDateTime = reader.getString();
                } else if ("onsetAge".equals(fieldName)) {
                    onsetAge = FhirR4Quantity.fromJson(reader);
                } else if ("onsetPeriod".equals(fieldName)) {
                    onsetPeriod = FhirR4Period.fromJson(reader);
                } else if ("onsetRange".equals(fieldName)) {
                    onsetRange = FhirR4Range.fromJson(reader);
                } else if ("onsetString".equals(fieldName)) {
                    onsetString = reader.getString();
                } else if ("abatementDateTime".equals(fieldName)) {
                    abatementDateTime = reader.getString();
                } else if ("abatementAge".equals(fieldName)) {
                    abatementAge = FhirR4Quantity.fromJson(reader);
                } else if ("abatementPeriod".equals(fieldName)) {
                    abatementPeriod = FhirR4Period.fromJson(reader);
                } else if ("abatementRange".equals(fieldName)) {
                    abatementRange = FhirR4Range.fromJson(reader);
                } else if ("abatementString".equals(fieldName)) {
                    abatementString = reader.getString();
                } else if ("recordedDate".equals(fieldName)) {
                    recordedDate = reader.getString();
                } else if ("stage".equals(fieldName)) {
                    stage = reader.readArray(reader1 -> FhirR4ConditionStage.fromJson(reader1));
                } else if ("note".equals(fieldName)) {
                    note = reader.readArray(reader1 -> FhirR4Annotation.fromJson(reader1));
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }
                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            FhirR4Condition deserializedFhirR4Condition = new FhirR4Condition(resourceType);
            deserializedFhirR4Condition.setId(id);
            deserializedFhirR4Condition.setMeta(meta);
            deserializedFhirR4Condition.setImplicitRules(implicitRules);
            deserializedFhirR4Condition.setLanguage(language);
            deserializedFhirR4Condition.text = text;
            deserializedFhirR4Condition.contained = contained;
            deserializedFhirR4Condition.extension = extension;
            deserializedFhirR4Condition.modifierExtension = modifierExtension;
            deserializedFhirR4Condition.resourceType = resourceType;
            deserializedFhirR4Condition.identifier = identifier;
            deserializedFhirR4Condition.clinicalStatus = clinicalStatus;
            deserializedFhirR4Condition.verificationStatus = verificationStatus;
            deserializedFhirR4Condition.category = category;
            deserializedFhirR4Condition.severity = severity;
            deserializedFhirR4Condition.code = code;
            deserializedFhirR4Condition.bodySite = bodySite;
            deserializedFhirR4Condition.encounter = encounter;
            deserializedFhirR4Condition.onsetDateTime = onsetDateTime;
            deserializedFhirR4Condition.onsetAge = onsetAge;
            deserializedFhirR4Condition.onsetPeriod = onsetPeriod;
            deserializedFhirR4Condition.onsetRange = onsetRange;
            deserializedFhirR4Condition.onsetString = onsetString;
            deserializedFhirR4Condition.abatementDateTime = abatementDateTime;
            deserializedFhirR4Condition.abatementAge = abatementAge;
            deserializedFhirR4Condition.abatementPeriod = abatementPeriod;
            deserializedFhirR4Condition.abatementRange = abatementRange;
            deserializedFhirR4Condition.abatementString = abatementString;
            deserializedFhirR4Condition.recordedDate = recordedDate;
            deserializedFhirR4Condition.stage = stage;
            deserializedFhirR4Condition.note = note;
            deserializedFhirR4Condition.setAdditionalProperties(additionalProperties);
            return deserializedFhirR4Condition;
        });
    }
}
