// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A limited order discrepancy occurs when there is a limited order, but all body parts and measurements that are needed
 * for a complete order are present in the document.
 */
@Immutable
public final class LimitedOrderDiscrepancyInference extends RadiologyInsightsInference {

    /*
     * Discriminator property for RadiologyInsightsInference.
     */
    @Generated
    private RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.LIMITED_ORDER_DISCREPANCY;

    /*
     * Order type : CPT ultrasound complete code for abdomen, retroperitoneal, pelvis or breast.
     */
    @Generated
    private final FhirR4CodeableConcept orderType;

    /*
     * List of body parts found in the document : SNOMED CT codes.
     */
    @Generated
    private List<FhirR4CodeableConcept> presentBodyParts;

    /*
     * List of body parts that are measured according to the document : SNOMED CT codes.
     */
    @Generated
    private List<FhirR4CodeableConcept> presentBodyPartMeasurements;

    /**
     * Creates an instance of LimitedOrderDiscrepancyInference class.
     *
     * @param orderType the orderType value to set.
     */
    @Generated
    private LimitedOrderDiscrepancyInference(FhirR4CodeableConcept orderType) {
        this.orderType = orderType;
    }

    /**
     * Get the kind property: Discriminator property for RadiologyInsightsInference.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public RadiologyInsightsInferenceType getKind() {
        return this.kind;
    }

    /**
     * Get the orderType property: Order type : CPT ultrasound complete code for abdomen, retroperitoneal, pelvis or
     * breast.
     *
     * @return the orderType value.
     */
    @Generated
    public FhirR4CodeableConcept getOrderType() {
        return this.orderType;
    }

    /**
     * Get the presentBodyParts property: List of body parts found in the document : SNOMED CT codes.
     *
     * @return the presentBodyParts value.
     */
    @Generated
    public List<FhirR4CodeableConcept> getPresentBodyParts() {
        return this.presentBodyParts;
    }

    /**
     * Get the presentBodyPartMeasurements property: List of body parts that are measured according to the document :
     * SNOMED CT codes.
     *
     * @return the presentBodyPartMeasurements value.
     */
    @Generated
    public List<FhirR4CodeableConcept> getPresentBodyPartMeasurements() {
        return this.presentBodyPartMeasurements;
    }

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    @Override
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("orderType", this.orderType);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("presentBodyParts", this.presentBodyParts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("presentBodyPartMeasurements", this.presentBodyPartMeasurements,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LimitedOrderDiscrepancyInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LimitedOrderDiscrepancyInference if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LimitedOrderDiscrepancyInference.
     */
    @Generated
    public static LimitedOrderDiscrepancyInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<FhirR4Extension> extension = null;
            FhirR4CodeableConcept orderType = null;
            RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.LIMITED_ORDER_DISCREPANCY;
            List<FhirR4CodeableConcept> presentBodyParts = null;
            List<FhirR4CodeableConcept> presentBodyPartMeasurements = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("orderType".equals(fieldName)) {
                    orderType = FhirR4CodeableConcept.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = RadiologyInsightsInferenceType.fromString(reader.getString());
                } else if ("presentBodyParts".equals(fieldName)) {
                    presentBodyParts = reader.readArray(reader1 -> FhirR4CodeableConcept.fromJson(reader1));
                } else if ("presentBodyPartMeasurements".equals(fieldName)) {
                    presentBodyPartMeasurements = reader.readArray(reader1 -> FhirR4CodeableConcept.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            LimitedOrderDiscrepancyInference deserializedLimitedOrderDiscrepancyInference
                = new LimitedOrderDiscrepancyInference(orderType);
            deserializedLimitedOrderDiscrepancyInference.extension = extension;
            deserializedLimitedOrderDiscrepancyInference.kind = kind;
            deserializedLimitedOrderDiscrepancyInference.presentBodyParts = presentBodyParts;
            deserializedLimitedOrderDiscrepancyInference.presentBodyPartMeasurements = presentBodyPartMeasurements;
            return deserializedLimitedOrderDiscrepancyInference;
        });
    }
}
