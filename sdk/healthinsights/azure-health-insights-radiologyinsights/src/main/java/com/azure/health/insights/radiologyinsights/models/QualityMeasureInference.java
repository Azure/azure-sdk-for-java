// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A QualityMeasure inference captures the MIPS ('measure based incentive payment system') quality measure criteria in
 * the document that are used to measure the data completeness.
 */
@Immutable
public final class QualityMeasureInference extends RadiologyInsightsInference {

    /*
     * Discriminator property for RadiologyInsightsInference.
     */
    @Generated
    private RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.QUALITY_MEASURE;

    /*
     * The denominator, which identifies the QualityMeasure kind.
     */
    @Generated
    private final String qualityMeasureDenominator;

    /*
     * The ComplianceType indicates whether the document is compliant for the specified QualityMeasure or not, or if
     * exceptions apply.
     */
    @Generated
    private final QualityMeasureComplianceType complianceType;

    /*
     * List of quality criteria identified in the document, if any.
     */
    @Generated
    private List<String> qualityCriteria;

    /**
     * Creates an instance of QualityMeasureInference class.
     *
     * @param qualityMeasureDenominator the qualityMeasureDenominator value to set.
     * @param complianceType the complianceType value to set.
     */
    @Generated
    private QualityMeasureInference(String qualityMeasureDenominator, QualityMeasureComplianceType complianceType) {
        this.qualityMeasureDenominator = qualityMeasureDenominator;
        this.complianceType = complianceType;
    }

    /**
     * Get the kind property: Discriminator property for RadiologyInsightsInference.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public RadiologyInsightsInferenceType getKind() {
        return this.kind;
    }

    /**
     * Get the qualityMeasureDenominator property: The denominator, which identifies the QualityMeasure kind.
     *
     * @return the qualityMeasureDenominator value.
     */
    @Generated
    public String getQualityMeasureDenominator() {
        return this.qualityMeasureDenominator;
    }

    /**
     * Get the complianceType property: The ComplianceType indicates whether the document is compliant for the specified
     * QualityMeasure or not, or if exceptions apply.
     *
     * @return the complianceType value.
     */
    @Generated
    public QualityMeasureComplianceType getComplianceType() {
        return this.complianceType;
    }

    /**
     * Get the qualityCriteria property: List of quality criteria identified in the document, if any.
     *
     * @return the qualityCriteria value.
     */
    @Generated
    public List<String> getQualityCriteria() {
        return this.qualityCriteria;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("qualityMeasureDenominator", this.qualityMeasureDenominator);
        jsonWriter.writeStringField("complianceType",
            this.complianceType == null ? null : this.complianceType.toString());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeArrayField("qualityCriteria", this.qualityCriteria,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QualityMeasureInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of QualityMeasureInference if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QualityMeasureInference.
     */
    @Generated
    public static QualityMeasureInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<FhirR4Extension> extension = null;
            String qualityMeasureDenominator = null;
            QualityMeasureComplianceType complianceType = null;
            RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.QUALITY_MEASURE;
            List<String> qualityCriteria = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("qualityMeasureDenominator".equals(fieldName)) {
                    qualityMeasureDenominator = reader.getString();
                } else if ("complianceType".equals(fieldName)) {
                    complianceType = QualityMeasureComplianceType.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    kind = RadiologyInsightsInferenceType.fromString(reader.getString());
                } else if ("qualityCriteria".equals(fieldName)) {
                    qualityCriteria = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            QualityMeasureInference deserializedQualityMeasureInference
                = new QualityMeasureInference(qualityMeasureDenominator, complianceType);
            deserializedQualityMeasureInference.setExtension(extension);
            deserializedQualityMeasureInference.kind = kind;
            deserializedQualityMeasureInference.qualityCriteria = qualityCriteria;
            return deserializedQualityMeasureInference;
        });
    }
}
