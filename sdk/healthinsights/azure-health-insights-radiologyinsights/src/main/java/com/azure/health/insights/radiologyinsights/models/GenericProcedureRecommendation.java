// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Generic procedure information.
 */
@Immutable
public final class GenericProcedureRecommendation extends ProcedureRecommendation {

    /*
     * Discriminator property for ProcedureRecommendation.
     */
    @Generated
    private String kind = "genericProcedureRecommendation";

    /*
     * Procedure modality : SNOMED CT code.
     */
    @Generated
    private final FhirR4CodeableConcept code;

    /*
     * Procedure description : MANAGEMENT PROCEDURE (PROCEDURE) or CONSULTATION (PROCEDURE) based on SNOMED CT.
     */
    @Generated
    private String description;

    /**
     * Creates an instance of GenericProcedureRecommendation class.
     *
     * @param code the code value to set.
     */
    @Generated
    private GenericProcedureRecommendation(FhirR4CodeableConcept code) {
        this.code = code;
    }

    /**
     * Get the kind property: Discriminator property for ProcedureRecommendation.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public String getKind() {
        return this.kind;
    }

    /**
     * Get the code property: Procedure modality : SNOMED CT code.
     *
     * @return the code value.
     */
    @Generated
    public FhirR4CodeableConcept getCode() {
        return this.code;
    }

    /**
     * Get the description property: Procedure description : MANAGEMENT PROCEDURE (PROCEDURE) or CONSULTATION
     * (PROCEDURE) based on SNOMED CT.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    @Override
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenericProcedureRecommendation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenericProcedureRecommendation if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GenericProcedureRecommendation.
     */
    @Generated
    public static GenericProcedureRecommendation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<FhirR4Extension> extension = null;
            FhirR4CodeableConcept code = null;
            String kind = "genericProcedureRecommendation";
            String description = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("code".equals(fieldName)) {
                    code = FhirR4CodeableConcept.fromJson(reader);
                } else if ("kind".equals(fieldName)) {
                    kind = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            GenericProcedureRecommendation deserializedGenericProcedureRecommendation
                = new GenericProcedureRecommendation(code);
            deserializedGenericProcedureRecommendation.extension = extension;
            deserializedGenericProcedureRecommendation.kind = kind;
            deserializedGenericProcedureRecommendation.description = description;
            return deserializedGenericProcedureRecommendation;
        });
    }
}
