// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * Follow-up recommendations offer guidance to healthcare providers on managing and monitoring patients based on the
 * findings of imaging studies.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("followupRecommendation")
@Fluent
public final class FollowupRecommendationInference extends RadiologyInsightsInference {
    /*
     * Date and time are displayed when the procedure is recommended to be done at a specific point in time.
     */
    @Generated
    @JsonProperty(value = "effectiveDateTime")
    private String effectiveDateTime;

    /*
     * The period is shown if a specific period is mentioned, with a start and end date-time.
     */
    @Generated
    @JsonProperty(value = "effectivePeriod")
    private PeriodModel effectivePeriod;

    /*
     * Findings related to the recommendation.
     */
    @Generated
    @JsonProperty(value = "findings")
    private List<RecommendationFinding> findings;

    /*
     * The conditional value indicates whether or not the sentence containing the recommendation includes a conditional
     * statement. Keywords for conditional statements include 'if', 'when', 'unless', and so on.
     */
    @Generated
    @JsonProperty(value = "isConditional")
    private boolean isConditional;

    /*
     * The option value indicates whether or not the sentence containing the recommendation includes an optional
     * statement. Keywords for optional statements include 'recommend', 'consider', and so on.
     */
    @Generated
    @JsonProperty(value = "isOption")
    private boolean isOption;

    /*
     * The guideline value indicates whether or not the recommendation is part of a guideline section that compiles all
     * recommendations applicable to various findings.
     */
    @Generated
    @JsonProperty(value = "isGuideline")
    private boolean isGuideline;

    /*
     * Hedging refers to ambiguous, vague or imprecise language within the sentence of the recommendation. Keywords for
     * hedging are 'can be','may be',and so on.
     */
    @Generated
    @JsonProperty(value = "isHedging")
    private boolean isHedging;

    /*
     * The procedure recommendation can be a generic procedure or an imaging procedure.
     */
    @Generated
    @JsonProperty(value = "recommendedProcedure")
    private ProcedureRecommendation recommendedProcedure;

    /**
     * Creates an instance of FollowupRecommendationInference class.
     * 
     * @param isConditional the isConditional value to set.
     * @param isOption the isOption value to set.
     * @param isGuideline the isGuideline value to set.
     * @param isHedging the isHedging value to set.
     * @param recommendedProcedure the recommendedProcedure value to set.
     */
    @Generated
    @JsonCreator
    public FollowupRecommendationInference(@JsonProperty(value = "isConditional") boolean isConditional,
        @JsonProperty(value = "isOption") boolean isOption, @JsonProperty(value = "isGuideline") boolean isGuideline,
        @JsonProperty(value = "isHedging") boolean isHedging,
        @JsonProperty(value = "recommendedProcedure") ProcedureRecommendation recommendedProcedure) {
        this.isConditional = isConditional;
        this.isOption = isOption;
        this.isGuideline = isGuideline;
        this.isHedging = isHedging;
        this.recommendedProcedure = recommendedProcedure;
    }

    /**
     * Get the effectiveDateTime property: Date and time are displayed when the procedure is recommended to be done at
     * a specific point in time.
     * 
     * @return the effectiveDateTime value.
     */
    @Generated
    public String getEffectiveDateTime() {
        return this.effectiveDateTime;
    }

    /**
     * Set the effectiveDateTime property: Date and time are displayed when the procedure is recommended to be done at
     * a specific point in time.
     * 
     * @param effectiveDateTime the effectiveDateTime value to set.
     * @return the FollowupRecommendationInference object itself.
     */
    @Generated
    public FollowupRecommendationInference setEffectiveDateTime(String effectiveDateTime) {
        this.effectiveDateTime = effectiveDateTime;
        return this;
    }

    /**
     * Get the effectivePeriod property: The period is shown if a specific period is mentioned, with a start and end
     * date-time.
     * 
     * @return the effectivePeriod value.
     */
    @Generated
    public PeriodModel getEffectivePeriod() {
        return this.effectivePeriod;
    }

    /**
     * Set the effectivePeriod property: The period is shown if a specific period is mentioned, with a start and end
     * date-time.
     * 
     * @param effectivePeriod the effectivePeriod value to set.
     * @return the FollowupRecommendationInference object itself.
     */
    @Generated
    public FollowupRecommendationInference setEffectivePeriod(PeriodModel effectivePeriod) {
        this.effectivePeriod = effectivePeriod;
        return this;
    }

    /**
     * Get the findings property: Findings related to the recommendation.
     * 
     * @return the findings value.
     */
    @Generated
    public List<RecommendationFinding> getFindings() {
        return this.findings;
    }

    /**
     * Set the findings property: Findings related to the recommendation.
     * 
     * @param findings the findings value to set.
     * @return the FollowupRecommendationInference object itself.
     */
    @Generated
    public FollowupRecommendationInference setFindings(List<RecommendationFinding> findings) {
        this.findings = findings;
        return this;
    }

    /**
     * Get the isConditional property: The conditional value indicates whether or not the sentence containing the
     * recommendation includes a conditional statement. Keywords for conditional statements include 'if', 'when',
     * 'unless', and so on.
     * 
     * @return the isConditional value.
     */
    @Generated
    public boolean isConditional() {
        return this.isConditional;
    }

    /**
     * Get the isOption property: The option value indicates whether or not the sentence containing the recommendation
     * includes an optional statement. Keywords for optional statements include 'recommend', 'consider', and so on.
     * 
     * @return the isOption value.
     */
    @Generated
    public boolean isOption() {
        return this.isOption;
    }

    /**
     * Get the isGuideline property: The guideline value indicates whether or not the recommendation is part of a
     * guideline section that compiles all recommendations applicable to various findings.
     * 
     * @return the isGuideline value.
     */
    @Generated
    public boolean isGuideline() {
        return this.isGuideline;
    }

    /**
     * Get the isHedging property: Hedging refers to ambiguous, vague or imprecise language within the sentence of the
     * recommendation. Keywords for hedging are 'can be','may be',and so on.
     * 
     * @return the isHedging value.
     */
    @Generated
    public boolean isHedging() {
        return this.isHedging;
    }

    /**
     * Get the recommendedProcedure property: The procedure recommendation can be a generic procedure or an imaging
     * procedure.
     * 
     * @return the recommendedProcedure value.
     */
    @Generated
    public ProcedureRecommendation getRecommendedProcedure() {
        return this.recommendedProcedure;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FollowupRecommendationInference setExtension(List<Extension> extension) {
        super.setExtension(extension);
        return this;
    }
}
