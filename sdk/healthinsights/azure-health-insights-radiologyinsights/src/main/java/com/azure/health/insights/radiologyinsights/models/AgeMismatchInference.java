// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A notification for age mismatch is displayed when the age mentioned in a document for a specific patient does not match the age specified in the patient information.
 */
@Immutable
public final class AgeMismatchInference extends FhirR4Extendible1 {

    /**
     * Creates an instance of AgeMismatchInference class.
     */
    @Generated
    private AgeMismatchInference() {
        setKind(RadiologyInsightsInferenceType.AGE_MISMATCH);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AgeMismatchInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AgeMismatchInference if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AgeMismatchInference.
     */
    @Generated
    public static AgeMismatchInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgeMismatchInference deserializedAgeMismatchInference = new AgeMismatchInference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedAgeMismatchInference
                        .setKind(RadiologyInsightsInferenceType.fromString(reader.getString()));
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedAgeMismatchInference.setExtension(extension);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAgeMismatchInference;
        });
    }
}
