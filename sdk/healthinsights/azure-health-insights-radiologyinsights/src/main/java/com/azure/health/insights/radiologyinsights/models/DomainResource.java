// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A resource with narrative, extensions, and contained resources
 * Based on [FHIR DomainResource](https://www.hl7.org/fhir/domainresource.html).
 */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "resourceType",
    defaultImpl = DomainResource.class)
@JsonTypeName("DomainResource")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "Observation", value = Observation.class),
    @JsonSubTypes.Type(name = "Condition", value = Condition.class),
    @JsonSubTypes.Type(name = "ResearchStudy", value = ResearchStudy.class) })
@Fluent
public class DomainResource {
    /*
     * Text summary of the resource, for human interpretation
     */
    @Generated
    @JsonProperty(value = "text")
    private Narrative text;

    /*
     * Contained, inline Resources
     */
    @Generated
    @JsonProperty(value = "contained")
    private List<Map<String, Object>> contained;

    /*
     * Additional Content defined by implementations
     */
    @Generated
    @JsonProperty(value = "extension")
    private List<Extension> extension;

    /*
     * Extensions that cannot be ignored
     */
    @Generated
    @JsonProperty(value = "modifierExtension")
    private List<Extension> modifierExtension;

    /*
     * Resource is the ancestor of DomainResource from which most resources are derived. Bundle, Parameters, and Binary
     * extend Resource directly.
     * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html
     */
    @Generated
    @JsonIgnore
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of DomainResource class.
     */
    @Generated
    public DomainResource() {
    }

    /**
     * Get the text property: Text summary of the resource, for human interpretation.
     * 
     * @return the text value.
     */
    @Generated
    public Narrative getText() {
        return this.text;
    }

    /**
     * Set the text property: Text summary of the resource, for human interpretation.
     * 
     * @param text the text value to set.
     * @return the DomainResource object itself.
     */
    @Generated
    public DomainResource setText(Narrative text) {
        this.text = text;
        return this;
    }

    /**
     * Get the contained property: Contained, inline Resources.
     * 
     * @return the contained value.
     */
    @Generated
    public List<Map<String, Object>> getContained() {
        return this.contained;
    }

    /**
     * Set the contained property: Contained, inline Resources.
     * 
     * @param contained the contained value to set.
     * @return the DomainResource object itself.
     */
    @Generated
    public DomainResource setContained(List<Map<String, Object>> contained) {
        this.contained = contained;
        return this;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     * 
     * @return the extension value.
     */
    @Generated
    public List<Extension> getExtension() {
        return this.extension;
    }

    /**
     * Set the extension property: Additional Content defined by implementations.
     * 
     * @param extension the extension value to set.
     * @return the DomainResource object itself.
     */
    @Generated
    public DomainResource setExtension(List<Extension> extension) {
        this.extension = extension;
        return this;
    }

    /**
     * Get the modifierExtension property: Extensions that cannot be ignored.
     * 
     * @return the modifierExtension value.
     */
    @Generated
    public List<Extension> getModifierExtension() {
        return this.modifierExtension;
    }

    /**
     * Set the modifierExtension property: Extensions that cannot be ignored.
     * 
     * @param modifierExtension the modifierExtension value to set.
     * @return the DomainResource object itself.
     */
    @Generated
    public DomainResource setModifierExtension(List<Extension> modifierExtension) {
        this.modifierExtension = modifierExtension;
        return this;
    }

    /**
     * Get the additionalProperties property: Resource is the ancestor of DomainResource from which most resources are
     * derived. Bundle, Parameters, and Binary extend Resource directly.
     * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Resource is the ancestor of DomainResource from which most resources are
     * derived. Bundle, Parameters, and Binary extend Resource directly.
     * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html.
     * 
     * @param additionalProperties the additionalProperties value to set.
     * @return the DomainResource object itself.
     */
    @Generated
    public DomainResource setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    @Generated
    @JsonAnySetter
    void setAdditionalProperties(String key, Object value) {
        if (additionalProperties == null) {
            additionalProperties = new HashMap<>();
        }
        additionalProperties.put(key, value);
    }
}
