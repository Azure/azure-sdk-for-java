// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Options regarding follow up recommendation inferences and finding inferences.
 */
@Fluent
public final class RadiologyInsightsInferenceOptions implements JsonSerializable<RadiologyInsightsInferenceOptions> {

    /*
     * Follow-up recommendation options.
     */
    @Generated
    private FollowupRecommendationOptions followupRecommendationOptions;

    /*
     * Finding options.
     */
    @Generated
    private FindingOptions findingOptions;

    /**
     * Creates an instance of RadiologyInsightsInferenceOptions class.
     */
    @Generated
    public RadiologyInsightsInferenceOptions() {
    }

    /**
     * Get the followupRecommendationOptions property: Follow-up recommendation options.
     *
     * @return the followupRecommendationOptions value.
     */
    @Generated
    public FollowupRecommendationOptions getFollowupRecommendationOptions() {
        return this.followupRecommendationOptions;
    }

    /**
     * Set the followupRecommendationOptions property: Follow-up recommendation options.
     *
     * @param followupRecommendationOptions the followupRecommendationOptions value to set.
     * @return the RadiologyInsightsInferenceOptions object itself.
     */
    @Generated
    public RadiologyInsightsInferenceOptions
        setFollowupRecommendationOptions(FollowupRecommendationOptions followupRecommendationOptions) {
        this.followupRecommendationOptions = followupRecommendationOptions;
        return this;
    }

    /**
     * Get the findingOptions property: Finding options.
     *
     * @return the findingOptions value.
     */
    @Generated
    public FindingOptions getFindingOptions() {
        return this.findingOptions;
    }

    /**
     * Set the findingOptions property: Finding options.
     *
     * @param findingOptions the findingOptions value to set.
     * @return the RadiologyInsightsInferenceOptions object itself.
     */
    @Generated
    public RadiologyInsightsInferenceOptions setFindingOptions(FindingOptions findingOptions) {
        this.findingOptions = findingOptions;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("followupRecommendationOptions", this.followupRecommendationOptions);
        jsonWriter.writeJsonField("findingOptions", this.findingOptions);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RadiologyInsightsInferenceOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RadiologyInsightsInferenceOptions if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RadiologyInsightsInferenceOptions.
     */
    @Generated
    public static RadiologyInsightsInferenceOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiologyInsightsInferenceOptions deserializedRadiologyInsightsInferenceOptions
                = new RadiologyInsightsInferenceOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("followupRecommendationOptions".equals(fieldName)) {
                    deserializedRadiologyInsightsInferenceOptions.followupRecommendationOptions
                        = FollowupRecommendationOptions.fromJson(reader);
                } else if ("findingOptions".equals(fieldName)) {
                    deserializedRadiologyInsightsInferenceOptions.findingOptions = FindingOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRadiologyInsightsInferenceOptions;
        });
    }
}
