// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Procedure information.
 */
@Fluent
public final class OrderedProcedure implements JsonSerializable<OrderedProcedure> {

    /*
     * Procedure code
     */
    @Generated
    private FhirR4CodeableConcept code;

    /*
     * Procedure description
     */
    @Generated
    private String description;

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Creates an instance of OrderedProcedure class.
     */
    @Generated
    public OrderedProcedure() {
    }

    /**
     * Get the code property: Procedure code.
     *
     * @return the code value.
     */
    @Generated
    public FhirR4CodeableConcept getCode() {
        return this.code;
    }

    /**
     * Set the code property: Procedure code.
     *
     * @param code the code value to set.
     * @return the OrderedProcedure object itself.
     */
    @Generated
    public OrderedProcedure setCode(FhirR4CodeableConcept code) {
        this.code = code;
        return this;
    }

    /**
     * Get the description property: Procedure description.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Set the description property: Procedure description.
     *
     * @param description the description value to set.
     * @return the OrderedProcedure object itself.
     */
    @Generated
    public OrderedProcedure setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * Set the extension property: Additional Content defined by implementations.
     *
     * @param extension the extension value to set.
     * @return the OrderedProcedure object itself.
     */
    @Generated
    public OrderedProcedure setExtension(List<FhirR4Extension> extension) {
        this.extension = extension;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("code", this.code);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("extension", this.extension, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OrderedProcedure from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OrderedProcedure if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the OrderedProcedure.
     */
    @Generated
    public static OrderedProcedure fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OrderedProcedure deserializedOrderedProcedure = new OrderedProcedure();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("code".equals(fieldName)) {
                    deserializedOrderedProcedure.code = FhirR4CodeableConcept.fromJson(reader);
                } else if ("description".equals(fieldName)) {
                    deserializedOrderedProcedure.description = reader.getString();
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedOrderedProcedure.extension = extension;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedOrderedProcedure;
        });
    }
}
