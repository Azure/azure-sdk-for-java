// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.health.insights.radiologyinsights.models.RadiologyInsightsData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The CustomInferenceRequest model.
 */
@Fluent
public final class CustomInferenceRequest implements JsonSerializable<CustomInferenceRequest> {

    /*
     * Contains the list of patients, and configuration data.
     */
    @Generated
    private final RadiologyInsightsData inferenceData;

    /*
     * Models to be used for inference. If this is not specified, the model will use the default model for inference.
     */
    @Generated
    private List<String> modelId;

    /**
     * Creates an instance of CustomInferenceRequest class.
     *
     * @param inferenceData the inferenceData value to set.
     */
    @Generated
    public CustomInferenceRequest(RadiologyInsightsData inferenceData) {
        this.inferenceData = inferenceData;
    }

    /**
     * Get the inferenceData property: Contains the list of patients, and configuration data.
     *
     * @return the inferenceData value.
     */
    @Generated
    public RadiologyInsightsData getInferenceData() {
        return this.inferenceData;
    }

    /**
     * Get the modelId property: Models to be used for inference. If this is not specified, the model will use the
     * default model for inference.
     *
     * @return the modelId value.
     */
    @Generated
    public List<String> getModelId() {
        return this.modelId;
    }

    /**
     * Set the modelId property: Models to be used for inference. If this is not specified, the model will use the
     * default model for inference.
     *
     * @param modelId the modelId value to set.
     * @return the CustomInferenceRequest object itself.
     */
    @Generated
    public CustomInferenceRequest setModelId(List<String> modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("inferenceData", this.inferenceData);
        jsonWriter.writeArrayField("modelId", this.modelId, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomInferenceRequest from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomInferenceRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomInferenceRequest.
     */
    @Generated
    public static CustomInferenceRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiologyInsightsData inferenceData = null;
            List<String> modelId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("inferenceData".equals(fieldName)) {
                    inferenceData = RadiologyInsightsData.fromJson(reader);
                } else if ("modelId".equals(fieldName)) {
                    modelId = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            CustomInferenceRequest deserializedCustomInferenceRequest = new CustomInferenceRequest(inferenceData);
            deserializedCustomInferenceRequest.modelId = modelId;
            return deserializedCustomInferenceRequest;
        });
    }
}
