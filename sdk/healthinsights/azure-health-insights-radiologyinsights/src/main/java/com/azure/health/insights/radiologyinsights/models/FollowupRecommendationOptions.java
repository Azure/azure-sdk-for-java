// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Follow-up recommendation options.
 */
@Fluent
public final class FollowupRecommendationOptions implements JsonSerializable<FollowupRecommendationOptions> {

    /*
     * Include/Exclude follow-up recommendations without a specific radiology procedure. Default is false.
     */
    @Generated
    private Boolean includeRecommendationsWithNoSpecifiedModality;

    /*
     * Include/Exclude follow-up recommendations in references to a guideline or article. Default is false.
     */
    @Generated
    private Boolean includeRecommendationsInReferences;

    /*
     * If this is true, provide one or more sentences as evidence for the recommendation, next to the token evidence.
     * The start and end positions of these sentences will be put in an extension with url 'modality_sentences'. Default
     * is false.
     */
    @Generated
    private Boolean provideFocusedSentenceEvidence;

    /**
     * Creates an instance of FollowupRecommendationOptions class.
     */
    @Generated
    public FollowupRecommendationOptions() {
    }

    /**
     * Get the includeRecommendationsWithNoSpecifiedModality property: Include/Exclude follow-up recommendations without
     * a specific radiology procedure. Default is false.
     *
     * @return the includeRecommendationsWithNoSpecifiedModality value.
     */
    @Generated
    public Boolean isIncludeRecommendationsWithNoSpecifiedModality() {
        return this.includeRecommendationsWithNoSpecifiedModality;
    }

    /**
     * Set the includeRecommendationsWithNoSpecifiedModality property: Include/Exclude follow-up recommendations without
     * a specific radiology procedure. Default is false.
     *
     * @param includeRecommendationsWithNoSpecifiedModality the includeRecommendationsWithNoSpecifiedModality value to
     * set.
     * @return the FollowupRecommendationOptions object itself.
     */
    @Generated
    public FollowupRecommendationOptions
        setIncludeRecommendationsWithNoSpecifiedModality(Boolean includeRecommendationsWithNoSpecifiedModality) {
        this.includeRecommendationsWithNoSpecifiedModality = includeRecommendationsWithNoSpecifiedModality;
        return this;
    }

    /**
     * Get the includeRecommendationsInReferences property: Include/Exclude follow-up recommendations in references to a
     * guideline or article. Default is false.
     *
     * @return the includeRecommendationsInReferences value.
     */
    @Generated
    public Boolean isIncludeRecommendationsInReferences() {
        return this.includeRecommendationsInReferences;
    }

    /**
     * Set the includeRecommendationsInReferences property: Include/Exclude follow-up recommendations in references to a
     * guideline or article. Default is false.
     *
     * @param includeRecommendationsInReferences the includeRecommendationsInReferences value to set.
     * @return the FollowupRecommendationOptions object itself.
     */
    @Generated
    public FollowupRecommendationOptions
        setIncludeRecommendationsInReferences(Boolean includeRecommendationsInReferences) {
        this.includeRecommendationsInReferences = includeRecommendationsInReferences;
        return this;
    }

    /**
     * Get the provideFocusedSentenceEvidence property: If this is true, provide one or more sentences as evidence for
     * the recommendation, next to the token evidence. The start and end positions of these sentences will be put in an
     * extension with url 'modality_sentences'. Default is false.
     *
     * @return the provideFocusedSentenceEvidence value.
     */
    @Generated
    public Boolean isProvideFocusedSentenceEvidence() {
        return this.provideFocusedSentenceEvidence;
    }

    /**
     * Set the provideFocusedSentenceEvidence property: If this is true, provide one or more sentences as evidence for
     * the recommendation, next to the token evidence. The start and end positions of these sentences will be put in an
     * extension with url 'modality_sentences'. Default is false.
     *
     * @param provideFocusedSentenceEvidence the provideFocusedSentenceEvidence value to set.
     * @return the FollowupRecommendationOptions object itself.
     */
    @Generated
    public FollowupRecommendationOptions setProvideFocusedSentenceEvidence(Boolean provideFocusedSentenceEvidence) {
        this.provideFocusedSentenceEvidence = provideFocusedSentenceEvidence;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("includeRecommendationsWithNoSpecifiedModality",
            this.includeRecommendationsWithNoSpecifiedModality);
        jsonWriter.writeBooleanField("includeRecommendationsInReferences", this.includeRecommendationsInReferences);
        jsonWriter.writeBooleanField("provideFocusedSentenceEvidence", this.provideFocusedSentenceEvidence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FollowupRecommendationOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FollowupRecommendationOptions if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FollowupRecommendationOptions.
     */
    @Generated
    public static FollowupRecommendationOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FollowupRecommendationOptions deserializedFollowupRecommendationOptions
                = new FollowupRecommendationOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("includeRecommendationsWithNoSpecifiedModality".equals(fieldName)) {
                    deserializedFollowupRecommendationOptions.includeRecommendationsWithNoSpecifiedModality
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeRecommendationsInReferences".equals(fieldName)) {
                    deserializedFollowupRecommendationOptions.includeRecommendationsInReferences
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("provideFocusedSentenceEvidence".equals(fieldName)) {
                    deserializedFollowupRecommendationOptions.provideFocusedSentenceEvidence
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFollowupRecommendationOptions;
        });
    }
}
