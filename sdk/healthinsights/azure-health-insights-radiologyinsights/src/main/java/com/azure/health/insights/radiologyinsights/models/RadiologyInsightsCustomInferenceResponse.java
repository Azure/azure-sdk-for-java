// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The inference results for the Radiology Insights request. If field 'status' has value 'succeeded', then field
 * 'result' will contain an instance of RadiologyInsightsInferenceResult.
 */
@Immutable
public final class RadiologyInsightsCustomInferenceResponse
    implements JsonSerializable<RadiologyInsightsCustomInferenceResponse> {

    /*
     * Results for the patients given in the request.
     */
    @Generated
    private final List<RadiologyInsightsPatientResult> patientResults;

    /*
     * Models to be used for inference. If this is not specified, the model will use the default model for inference.
     */
    @Generated
    private final List<String> id;

    /**
     * Creates an instance of RadiologyInsightsCustomInferenceResponse class.
     *
     * @param patientResults the patientResults value to set.
     * @param id the id value to set.
     */
    @Generated
    private RadiologyInsightsCustomInferenceResponse(List<RadiologyInsightsPatientResult> patientResults,
        List<String> id) {
        this.patientResults = patientResults;
        this.id = id;
    }

    /**
     * Get the patientResults property: Results for the patients given in the request.
     *
     * @return the patientResults value.
     */
    @Generated
    public List<RadiologyInsightsPatientResult> getPatientResults() {
        return this.patientResults;
    }

    /**
     * Get the id property: Models to be used for inference. If this is not specified, the model will use the default
     * model for inference.
     *
     * @return the id value.
     */
    @Generated
    public List<String> getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("patientResults", this.patientResults,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("id", this.id, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RadiologyInsightsCustomInferenceResponse from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RadiologyInsightsCustomInferenceResponse if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RadiologyInsightsCustomInferenceResponse.
     */
    @Generated
    public static RadiologyInsightsCustomInferenceResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<RadiologyInsightsPatientResult> patientResults = null;
            List<String> id = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("patientResults".equals(fieldName)) {
                    patientResults = reader.readArray(reader1 -> RadiologyInsightsPatientResult.fromJson(reader1));
                } else if ("id".equals(fieldName)) {
                    id = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new RadiologyInsightsCustomInferenceResponse(patientResults, id);
        });
    }
}
