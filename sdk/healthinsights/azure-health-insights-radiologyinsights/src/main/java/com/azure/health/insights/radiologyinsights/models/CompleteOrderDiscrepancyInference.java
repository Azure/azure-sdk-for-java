// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * A complete order discrepancy is shown when one or more body parts and/or measurements that should be in the document
 * (because there is a complete order) are not present.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("completeOrderDiscrepancy")
@Fluent
public final class CompleteOrderDiscrepancyInference extends RadiologyInsightsInference {
    /*
     * Order type : CPT ultrasound complete code for abdomen, retroperitoneal, pelvis or breast.
     */
    @Generated
    @JsonProperty(value = "orderType")
    private CodeableConcept orderType;

    /*
     * List of missing body parts required by a complete order : SNOMED CT codes.
     */
    @Generated
    @JsonProperty(value = "missingBodyParts")
    private List<CodeableConcept> missingBodyParts;

    /*
     * List of missing body parts that require measurement by a complete order : SNOMED CT codes.
     */
    @Generated
    @JsonProperty(value = "missingBodyPartMeasurements")
    private List<CodeableConcept> missingBodyPartMeasurements;

    /**
     * Creates an instance of CompleteOrderDiscrepancyInference class.
     * 
     * @param orderType the orderType value to set.
     */
    @Generated
    @JsonCreator
    public CompleteOrderDiscrepancyInference(@JsonProperty(value = "orderType") CodeableConcept orderType) {
        this.orderType = orderType;
    }

    /**
     * Get the orderType property: Order type : CPT ultrasound complete code for abdomen, retroperitoneal, pelvis or
     * breast.
     * 
     * @return the orderType value.
     */
    @Generated
    public CodeableConcept getOrderType() {
        return this.orderType;
    }

    /**
     * Get the missingBodyParts property: List of missing body parts required by a complete order : SNOMED CT codes.
     * 
     * @return the missingBodyParts value.
     */
    @Generated
    public List<CodeableConcept> getMissingBodyParts() {
        return this.missingBodyParts;
    }

    /**
     * Set the missingBodyParts property: List of missing body parts required by a complete order : SNOMED CT codes.
     * 
     * @param missingBodyParts the missingBodyParts value to set.
     * @return the CompleteOrderDiscrepancyInference object itself.
     */
    @Generated
    public CompleteOrderDiscrepancyInference setMissingBodyParts(List<CodeableConcept> missingBodyParts) {
        this.missingBodyParts = missingBodyParts;
        return this;
    }

    /**
     * Get the missingBodyPartMeasurements property: List of missing body parts that require measurement by a complete
     * order : SNOMED CT codes.
     * 
     * @return the missingBodyPartMeasurements value.
     */
    @Generated
    public List<CodeableConcept> getMissingBodyPartMeasurements() {
        return this.missingBodyPartMeasurements;
    }

    /**
     * Set the missingBodyPartMeasurements property: List of missing body parts that require measurement by a complete
     * order : SNOMED CT codes.
     * 
     * @param missingBodyPartMeasurements the missingBodyPartMeasurements value to set.
     * @return the CompleteOrderDiscrepancyInference object itself.
     */
    @Generated
    public CompleteOrderDiscrepancyInference
        setMissingBodyPartMeasurements(List<CodeableConcept> missingBodyPartMeasurements) {
        this.missingBodyPartMeasurements = missingBodyPartMeasurements;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public CompleteOrderDiscrepancyInference setExtension(List<Extension> extension) {
        super.setExtension(extension);
        return this;
    }
}
