// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Radiology procedures are the specific imaging studies or examinations ordered for the patient, extracted from the document information and text.
 */
@Immutable
public final class RadiologyProcedureInference extends FhirR4Extendible1 {

    /*
     * LOINC codes for the procedure.
     */
    @Generated
    private List<FhirR4CodeableConcept> procedureCodes;

    /*
     * Imaging procedures.
     */
    @Generated
    private final List<ImagingProcedure> imagingProcedures;

    /*
     * Ordered procedure information from the document information or text.
     */
    @Generated
    private final FhirR4Extendible orderedProcedure;

    /**
     * Creates an instance of RadiologyProcedureInference class.
     *
     * @param imagingProcedures the imagingProcedures value to set.
     * @param orderedProcedure the orderedProcedure value to set.
     */
    @Generated
    private RadiologyProcedureInference(List<ImagingProcedure> imagingProcedures, FhirR4Extendible orderedProcedure) {
        setKind(RadiologyInsightsInferenceType.RADIOLOGY_PROCEDURE);
        this.imagingProcedures = imagingProcedures;
        this.orderedProcedure = orderedProcedure;
    }

    /**
     * Get the procedureCodes property: LOINC codes for the procedure.
     *
     * @return the procedureCodes value.
     */
    @Generated
    public List<FhirR4CodeableConcept> getProcedureCodes() {
        return this.procedureCodes;
    }

    /**
     * Get the imagingProcedures property: Imaging procedures.
     *
     * @return the imagingProcedures value.
     */
    @Generated
    public List<ImagingProcedure> getImagingProcedures() {
        return this.imagingProcedures;
    }

    /**
     * Get the orderedProcedure property: Ordered procedure information from the document information or text.
     *
     * @return the orderedProcedure value.
     */
    @Generated
    public FhirR4Extendible getOrderedProcedure() {
        return this.orderedProcedure;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", getKind() == null ? null : getKind().toString());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("imagingProcedures", this.imagingProcedures,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("orderedProcedure", this.orderedProcedure);
        jsonWriter.writeArrayField("procedureCodes", this.procedureCodes,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RadiologyProcedureInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RadiologyProcedureInference if the JsonReader was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RadiologyProcedureInference.
     */
    @Generated
    public static RadiologyProcedureInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.RADIOLOGY_PROCEDURE;
            List<FhirR4Extension> extension = null;
            List<ImagingProcedure> imagingProcedures = null;
            FhirR4Extendible orderedProcedure = null;
            List<FhirR4CodeableConcept> procedureCodes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    kind = RadiologyInsightsInferenceType.fromString(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("imagingProcedures".equals(fieldName)) {
                    imagingProcedures = reader.readArray(reader1 -> ImagingProcedure.fromJson(reader1));
                } else if ("orderedProcedure".equals(fieldName)) {
                    orderedProcedure = FhirR4Extendible.fromJson(reader);
                } else if ("procedureCodes".equals(fieldName)) {
                    procedureCodes = reader.readArray(reader1 -> FhirR4CodeableConcept.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            RadiologyProcedureInference deserializedRadiologyProcedureInference
                = new RadiologyProcedureInference(imagingProcedures, orderedProcedure);
            deserializedRadiologyProcedureInference.setKind(kind);
            deserializedRadiologyProcedureInference.setExtension(extension);
            deserializedRadiologyProcedureInference.procedureCodes = procedureCodes;
            return deserializedRadiologyProcedureInference;
        });
    }
}
