// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration affecting the Radiology Insights model's inference.
 */
@Fluent
public final class RadiologyInsightsModelConfiguration
    implements JsonSerializable<RadiologyInsightsModelConfiguration> {

    /*
     * An indication whether the model should produce verbose output.
     */
    @Generated
    private Boolean verbose;

    /*
     * An indication whether the model's output should include evidence for the inferences.
     */
    @Generated
    private Boolean includeEvidence;

    /*
     * This is a list of inference types to be inferred for the current request. It could be used if only part of the
     * Radiology Insights inferences are required. If this list is omitted or empty, the model will return all the
     * inference types.
     */
    @Generated
    private List<RadiologyInsightsInferenceType> inferenceTypes;

    /*
     * Options regarding follow up recommendation inferences and finding inferences.
     */
    @Generated
    private RadiologyInsightsInferenceOptions inferenceOptions;

    /*
     * Local for the model to use. If not specified, the model will use the default locale.
     */
    @Generated
    private String locale;

    /**
     * Creates an instance of RadiologyInsightsModelConfiguration class.
     */
    @Generated
    public RadiologyInsightsModelConfiguration() {
    }

    /**
     * Get the verbose property: An indication whether the model should produce verbose output.
     *
     * @return the verbose value.
     */
    @Generated
    public Boolean isVerbose() {
        return this.verbose;
    }

    /**
     * Set the verbose property: An indication whether the model should produce verbose output.
     *
     * @param verbose the verbose value to set.
     * @return the RadiologyInsightsModelConfiguration object itself.
     */
    @Generated
    public RadiologyInsightsModelConfiguration setVerbose(Boolean verbose) {
        this.verbose = verbose;
        return this;
    }

    /**
     * Get the includeEvidence property: An indication whether the model's output should include evidence for the
     * inferences.
     *
     * @return the includeEvidence value.
     */
    @Generated
    public Boolean isIncludeEvidence() {
        return this.includeEvidence;
    }

    /**
     * Set the includeEvidence property: An indication whether the model's output should include evidence for the
     * inferences.
     *
     * @param includeEvidence the includeEvidence value to set.
     * @return the RadiologyInsightsModelConfiguration object itself.
     */
    @Generated
    public RadiologyInsightsModelConfiguration setIncludeEvidence(Boolean includeEvidence) {
        this.includeEvidence = includeEvidence;
        return this;
    }

    /**
     * Get the inferenceTypes property: This is a list of inference types to be inferred for the current request. It
     * could be used if only part of the Radiology Insights inferences are required. If this list is omitted or empty,
     * the model will return all the inference types.
     *
     * @return the inferenceTypes value.
     */
    @Generated
    public List<RadiologyInsightsInferenceType> getInferenceTypes() {
        return this.inferenceTypes;
    }

    /**
     * Set the inferenceTypes property: This is a list of inference types to be inferred for the current request. It
     * could be used if only part of the Radiology Insights inferences are required. If this list is omitted or empty,
     * the model will return all the inference types.
     *
     * @param inferenceTypes the inferenceTypes value to set.
     * @return the RadiologyInsightsModelConfiguration object itself.
     */
    @Generated
    public RadiologyInsightsModelConfiguration setInferenceTypes(List<RadiologyInsightsInferenceType> inferenceTypes) {
        this.inferenceTypes = inferenceTypes;
        return this;
    }

    /**
     * Get the inferenceOptions property: Options regarding follow up recommendation inferences and finding inferences.
     *
     * @return the inferenceOptions value.
     */
    @Generated
    public RadiologyInsightsInferenceOptions getInferenceOptions() {
        return this.inferenceOptions;
    }

    /**
     * Set the inferenceOptions property: Options regarding follow up recommendation inferences and finding inferences.
     *
     * @param inferenceOptions the inferenceOptions value to set.
     * @return the RadiologyInsightsModelConfiguration object itself.
     */
    @Generated
    public RadiologyInsightsModelConfiguration setInferenceOptions(RadiologyInsightsInferenceOptions inferenceOptions) {
        this.inferenceOptions = inferenceOptions;
        return this;
    }

    /**
     * Get the locale property: Local for the model to use. If not specified, the model will use the default locale.
     *
     * @return the locale value.
     */
    @Generated
    public String getLocale() {
        return this.locale;
    }

    /**
     * Set the locale property: Local for the model to use. If not specified, the model will use the default locale.
     *
     * @param locale the locale value to set.
     * @return the RadiologyInsightsModelConfiguration object itself.
     */
    @Generated
    public RadiologyInsightsModelConfiguration setLocale(String locale) {
        this.locale = locale;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("verbose", this.verbose);
        jsonWriter.writeBooleanField("includeEvidence", this.includeEvidence);
        jsonWriter.writeArrayField("inferenceTypes", this.inferenceTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeJsonField("inferenceOptions", this.inferenceOptions);
        jsonWriter.writeStringField("locale", this.locale);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RadiologyInsightsModelConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RadiologyInsightsModelConfiguration if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RadiologyInsightsModelConfiguration.
     */
    @Generated
    public static RadiologyInsightsModelConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiologyInsightsModelConfiguration deserializedRadiologyInsightsModelConfiguration
                = new RadiologyInsightsModelConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("verbose".equals(fieldName)) {
                    deserializedRadiologyInsightsModelConfiguration.verbose
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeEvidence".equals(fieldName)) {
                    deserializedRadiologyInsightsModelConfiguration.includeEvidence
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("inferenceTypes".equals(fieldName)) {
                    List<RadiologyInsightsInferenceType> inferenceTypes
                        = reader.readArray(reader1 -> RadiologyInsightsInferenceType.fromString(reader1.getString()));
                    deserializedRadiologyInsightsModelConfiguration.inferenceTypes = inferenceTypes;
                } else if ("inferenceOptions".equals(fieldName)) {
                    deserializedRadiologyInsightsModelConfiguration.inferenceOptions
                        = RadiologyInsightsInferenceOptions.fromJson(reader);
                } else if ("locale".equals(fieldName)) {
                    deserializedRadiologyInsightsModelConfiguration.locale = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRadiologyInsightsModelConfiguration;
        });
    }
}
