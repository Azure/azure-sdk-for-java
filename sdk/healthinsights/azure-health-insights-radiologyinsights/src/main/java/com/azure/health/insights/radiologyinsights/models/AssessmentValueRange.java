// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A range of values.
 */
@Immutable
public final class AssessmentValueRange implements JsonSerializable<AssessmentValueRange> {

    /*
     * The minimum value.
     */
    @Generated
    private final String minimum;

    /*
     * The maximum value.
     */
    @Generated
    private final String maximum;

    /**
     * Creates an instance of AssessmentValueRange class.
     *
     * @param minimum the minimum value to set.
     * @param maximum the maximum value to set.
     */
    @Generated
    private AssessmentValueRange(String minimum, String maximum) {
        this.minimum = minimum;
        this.maximum = maximum;
    }

    /**
     * Get the minimum property: The minimum value.
     *
     * @return the minimum value.
     */
    @Generated
    public String getMinimum() {
        return this.minimum;
    }

    /**
     * Get the maximum property: The maximum value.
     *
     * @return the maximum value.
     */
    @Generated
    public String getMaximum() {
        return this.maximum;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("minimum", this.minimum);
        jsonWriter.writeStringField("maximum", this.maximum);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentValueRange from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentValueRange if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AssessmentValueRange.
     */
    @Generated
    public static AssessmentValueRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String minimum = null;
            String maximum = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("minimum".equals(fieldName)) {
                    minimum = reader.getString();
                } else if ("maximum".equals(fieldName)) {
                    maximum = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AssessmentValueRange(minimum, maximum);
        });
    }
}
