// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Document author.
 */
@Fluent
public final class DocumentAuthor implements JsonSerializable<DocumentAuthor> {

    /*
     * author id
     */
    @Generated
    private String id;

    /*
     * Text representation of the full name
     */
    @Generated
    private String fullName;

    /**
     * Creates an instance of DocumentAuthor class.
     */
    @Generated
    public DocumentAuthor() {
    }

    /**
     * Get the id property: author id.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: author id.
     *
     * @param id the id value to set.
     * @return the DocumentAuthor object itself.
     */
    @Generated
    public DocumentAuthor setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the fullName property: Text representation of the full name.
     *
     * @return the fullName value.
     */
    @Generated
    public String getFullName() {
        return this.fullName;
    }

    /**
     * Set the fullName property: Text representation of the full name.
     *
     * @param fullName the fullName value to set.
     * @return the DocumentAuthor object itself.
     */
    @Generated
    public DocumentAuthor setFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("fullName", this.fullName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentAuthor from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentAuthor if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DocumentAuthor.
     */
    @Generated
    public static DocumentAuthor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentAuthor deserializedDocumentAuthor = new DocumentAuthor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedDocumentAuthor.id = reader.getString();
                } else if ("fullName".equals(fieldName)) {
                    deserializedDocumentAuthor.fullName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDocumentAuthor;
        });
    }
}
