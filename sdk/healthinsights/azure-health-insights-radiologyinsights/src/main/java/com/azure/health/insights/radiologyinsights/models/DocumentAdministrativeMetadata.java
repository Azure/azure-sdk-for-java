// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Document administrative metadata.
 */
@Fluent
public final class DocumentAdministrativeMetadata implements JsonSerializable<DocumentAdministrativeMetadata> {

    /*
     * List of procedure information associated with the document.
     */
    @Generated
    private List<OrderedProcedure> orderedProcedures;

    /*
     * Reference to the encounter associated with the document.
     */
    @Generated
    private String encounterId;

    /**
     * Creates an instance of DocumentAdministrativeMetadata class.
     */
    @Generated
    public DocumentAdministrativeMetadata() {
    }

    /**
     * Get the orderedProcedures property: List of procedure information associated with the document.
     *
     * @return the orderedProcedures value.
     */
    @Generated
    public List<OrderedProcedure> getOrderedProcedures() {
        return this.orderedProcedures;
    }

    /**
     * Set the orderedProcedures property: List of procedure information associated with the document.
     *
     * @param orderedProcedures the orderedProcedures value to set.
     * @return the DocumentAdministrativeMetadata object itself.
     */
    @Generated
    public DocumentAdministrativeMetadata setOrderedProcedures(List<OrderedProcedure> orderedProcedures) {
        this.orderedProcedures = orderedProcedures;
        return this;
    }

    /**
     * Get the encounterId property: Reference to the encounter associated with the document.
     *
     * @return the encounterId value.
     */
    @Generated
    public String getEncounterId() {
        return this.encounterId;
    }

    /**
     * Set the encounterId property: Reference to the encounter associated with the document.
     *
     * @param encounterId the encounterId value to set.
     * @return the DocumentAdministrativeMetadata object itself.
     */
    @Generated
    public DocumentAdministrativeMetadata setEncounterId(String encounterId) {
        this.encounterId = encounterId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("orderedProcedures", this.orderedProcedures,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("encounterId", this.encounterId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DocumentAdministrativeMetadata from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of DocumentAdministrativeMetadata if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DocumentAdministrativeMetadata.
     */
    @Generated
    public static DocumentAdministrativeMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DocumentAdministrativeMetadata deserializedDocumentAdministrativeMetadata
                = new DocumentAdministrativeMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("orderedProcedures".equals(fieldName)) {
                    List<OrderedProcedure> orderedProcedures
                        = reader.readArray(reader1 -> OrderedProcedure.fromJson(reader1));
                    deserializedDocumentAdministrativeMetadata.orderedProcedures = orderedProcedures;
                } else if ("encounterId".equals(fieldName)) {
                    deserializedDocumentAdministrativeMetadata.encounterId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedDocumentAdministrativeMetadata;
        });
    }
}
