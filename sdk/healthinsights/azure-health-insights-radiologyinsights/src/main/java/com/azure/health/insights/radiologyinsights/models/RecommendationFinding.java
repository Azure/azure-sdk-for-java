// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Finding reference for recommendation.
 */
@Immutable
public final class RecommendationFinding implements JsonSerializable<RecommendationFinding> {

    /*
     * Finding linked to a recommendation.
     */
    @Generated
    private FhirR4Observation finding;

    /*
     * Critical result linked to a recommendation.
     */
    @Generated
    private CriticalResult criticalFinding;

    /*
     * Recommendation finding status.
     */
    @Generated
    private final RecommendationFindingStatusType recommendationFindingStatus;

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Creates an instance of RecommendationFinding class.
     *
     * @param recommendationFindingStatus the recommendationFindingStatus value to set.
     */
    @Generated
    private RecommendationFinding(RecommendationFindingStatusType recommendationFindingStatus) {
        this.recommendationFindingStatus = recommendationFindingStatus;
    }

    /**
     * Get the finding property: Finding linked to a recommendation.
     *
     * @return the finding value.
     */
    @Generated
    public FhirR4Observation getFinding() {
        return this.finding;
    }

    /**
     * Get the criticalFinding property: Critical result linked to a recommendation.
     *
     * @return the criticalFinding value.
     */
    @Generated
    public CriticalResult getCriticalFinding() {
        return this.criticalFinding;
    }

    /**
     * Get the recommendationFindingStatus property: Recommendation finding status.
     *
     * @return the recommendationFindingStatus value.
     */
    @Generated
    public RecommendationFindingStatusType getRecommendationFindingStatus() {
        return this.recommendationFindingStatus;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recommendationFindingStatus",
            this.recommendationFindingStatus == null ? null : this.recommendationFindingStatus.toString());
        jsonWriter.writeJsonField("finding", this.finding);
        jsonWriter.writeJsonField("criticalFinding", this.criticalFinding);
        jsonWriter.writeArrayField("extension", this.extension, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendationFinding from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendationFinding if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RecommendationFinding.
     */
    @Generated
    public static RecommendationFinding fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationFindingStatusType recommendationFindingStatus = null;
            FhirR4Observation finding = null;
            CriticalResult criticalFinding = null;
            List<FhirR4Extension> extension = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("recommendationFindingStatus".equals(fieldName)) {
                    recommendationFindingStatus = RecommendationFindingStatusType.fromString(reader.getString());
                } else if ("finding".equals(fieldName)) {
                    finding = FhirR4Observation.fromJson(reader);
                } else if ("criticalFinding".equals(fieldName)) {
                    criticalFinding = CriticalResult.fromJson(reader);
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            RecommendationFinding deserializedRecommendationFinding
                = new RecommendationFinding(recommendationFindingStatus);
            deserializedRecommendationFinding.finding = finding;
            deserializedRecommendationFinding.criticalFinding = criticalFinding;
            deserializedRecommendationFinding.extension = extension;
            return deserializedRecommendationFinding;
        });
    }
}
