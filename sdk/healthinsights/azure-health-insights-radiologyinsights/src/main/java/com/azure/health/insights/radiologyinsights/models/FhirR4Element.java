// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The base definition for all elements contained inside a resource.
 * Based on [FHIR Element](https://www.hl7.org/fhir/R4/element.html).
 */
@Fluent
public class FhirR4Element implements JsonSerializable<FhirR4Element> {

    /*
     * Unique id for inter-element referencing
     */
    @Generated
    private String id;

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Creates an instance of FhirR4Element class.
     */
    @Generated
    public FhirR4Element() {
    }

    /**
     * Get the id property: Unique id for inter-element referencing.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Unique id for inter-element referencing.
     *
     * @param id the id value to set.
     * @return the FhirR4Element object itself.
     */
    @Generated
    public FhirR4Element setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * Set the extension property: Additional Content defined by implementations.
     *
     * @param extension the extension value to set.
     * @return the FhirR4Element object itself.
     */
    @Generated
    public FhirR4Element setExtension(List<FhirR4Extension> extension) {
        this.extension = extension;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("extension", this.extension, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Element from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Element if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4Element.
     */
    @Generated
    public static FhirR4Element fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4Element deserializedFhirR4Element = new FhirR4Element();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4Element.id = reader.getString();
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4Element.extension = extension;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4Element;
        });
    }
}
