// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Concept - reference to a terminology or just text
 * Based on [FHIR CodeableConcept](https://www.hl7.org/fhir/R4/datatypes.html#CodeableConcept).
 */
@Fluent
public final class FhirR4CodeableConcept extends FhirR4Element {

    /*
     * Code defined by a terminology system
     */
    @Generated
    private List<FhirR4Coding> coding;

    /*
     * Plain text representation of the concept
     */
    @Generated
    private String text;

    /**
     * Creates an instance of FhirR4CodeableConcept class.
     */
    @Generated
    public FhirR4CodeableConcept() {
    }

    /**
     * Get the coding property: Code defined by a terminology system.
     *
     * @return the coding value.
     */
    @Generated
    public List<FhirR4Coding> getCoding() {
        return this.coding;
    }

    /**
     * Set the coding property: Code defined by a terminology system.
     *
     * @param coding the coding value to set.
     * @return the FhirR4CodeableConcept object itself.
     */
    @Generated
    public FhirR4CodeableConcept setCoding(List<FhirR4Coding> coding) {
        this.coding = coding;
        return this;
    }

    /**
     * Get the text property: Plain text representation of the concept.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Set the text property: Plain text representation of the concept.
     *
     * @param text the text value to set.
     * @return the FhirR4CodeableConcept object itself.
     */
    @Generated
    public FhirR4CodeableConcept setText(String text) {
        this.text = text;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4CodeableConcept setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4CodeableConcept setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("coding", this.coding, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4CodeableConcept from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4CodeableConcept if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4CodeableConcept.
     */
    @Generated
    public static FhirR4CodeableConcept fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4CodeableConcept deserializedFhirR4CodeableConcept = new FhirR4CodeableConcept();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4CodeableConcept.setId(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4CodeableConcept.setExtension(extension);
                } else if ("coding".equals(fieldName)) {
                    List<FhirR4Coding> coding = reader.readArray(reader1 -> FhirR4Coding.fromJson(reader1));
                    deserializedFhirR4CodeableConcept.coding = coding;
                } else if ("text".equals(fieldName)) {
                    deserializedFhirR4CodeableConcept.text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4CodeableConcept;
        });
    }
}
