// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.List;

/**
 * A laterality mismatch occurs when there is a discrepancy between the clinical documentation and the ordered
 * procedure (orderLateralityMismatch), a contradiction within the clinical document (textLateralityContradiction), or
 * when no laterality is mentioned (textLateralityMissing).
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("lateralityDiscrepancy")
@Fluent
public final class LateralityDiscrepancyInference extends RadiologyInsightsInference {
    /*
     * Laterality indication : SNOMED CT code for laterality qualifier value.
     */
    @Generated
    @JsonProperty(value = "lateralityIndication")
    private CodeableConcept lateralityIndication;

    /*
     * Mismatch type : orderLateralityMismatch, textLateralityContradiction, textLateralityMissing.
     */
    @Generated
    @JsonProperty(value = "discrepancyType")
    private LateralityDiscrepancyType discrepancyType;

    /**
     * Creates an instance of LateralityDiscrepancyInference class.
     * 
     * @param discrepancyType the discrepancyType value to set.
     */
    @Generated
    @JsonCreator
    public LateralityDiscrepancyInference(
        @JsonProperty(value = "discrepancyType") LateralityDiscrepancyType discrepancyType) {
        this.discrepancyType = discrepancyType;
    }

    /**
     * Get the lateralityIndication property: Laterality indication : SNOMED CT code for laterality qualifier value.
     * 
     * @return the lateralityIndication value.
     */
    @Generated
    public CodeableConcept getLateralityIndication() {
        return this.lateralityIndication;
    }

    /**
     * Set the lateralityIndication property: Laterality indication : SNOMED CT code for laterality qualifier value.
     * 
     * @param lateralityIndication the lateralityIndication value to set.
     * @return the LateralityDiscrepancyInference object itself.
     */
    @Generated
    public LateralityDiscrepancyInference setLateralityIndication(CodeableConcept lateralityIndication) {
        this.lateralityIndication = lateralityIndication;
        return this;
    }

    /**
     * Get the discrepancyType property: Mismatch type : orderLateralityMismatch, textLateralityContradiction,
     * textLateralityMissing.
     * 
     * @return the discrepancyType value.
     */
    @Generated
    public LateralityDiscrepancyType getDiscrepancyType() {
        return this.discrepancyType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public LateralityDiscrepancyInference setExtension(List<Extension> extension) {
        super.setExtension(extension);
        return this;
    }
}
