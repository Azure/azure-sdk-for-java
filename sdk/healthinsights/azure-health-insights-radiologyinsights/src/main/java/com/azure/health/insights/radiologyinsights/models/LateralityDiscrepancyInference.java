// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A laterality mismatch occurs when there is a discrepancy between the clinical documentation and the ordered procedure
 * (orderLateralityMismatch), a contradiction within the clinical document (textLateralityContradiction), or when no
 * laterality is mentioned (textLateralityMissing).
 */
@Immutable
public final class LateralityDiscrepancyInference extends RadiologyInsightsInference {

    /*
     * Discriminator property for RadiologyInsightsInference.
     */
    @Generated
    private RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.LATERALITY_DISCREPANCY;

    /*
     * Laterality indication : SNOMED CT code for laterality qualifier value.
     */
    @Generated
    private FhirR4CodeableConcept lateralityIndication;

    /*
     * Mismatch type : orderLateralityMismatch, textLateralityContradiction, textLateralityMissing.
     */
    @Generated
    private final LateralityDiscrepancyType discrepancyType;

    /**
     * Creates an instance of LateralityDiscrepancyInference class.
     *
     * @param discrepancyType the discrepancyType value to set.
     */
    @Generated
    private LateralityDiscrepancyInference(LateralityDiscrepancyType discrepancyType) {
        this.discrepancyType = discrepancyType;
    }

    /**
     * Get the kind property: Discriminator property for RadiologyInsightsInference.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public RadiologyInsightsInferenceType getKind() {
        return this.kind;
    }

    /**
     * Get the lateralityIndication property: Laterality indication : SNOMED CT code for laterality qualifier value.
     *
     * @return the lateralityIndication value.
     */
    @Generated
    public FhirR4CodeableConcept getLateralityIndication() {
        return this.lateralityIndication;
    }

    /**
     * Get the discrepancyType property: Mismatch type : orderLateralityMismatch, textLateralityContradiction,
     * textLateralityMissing.
     *
     * @return the discrepancyType value.
     */
    @Generated
    public LateralityDiscrepancyType getDiscrepancyType() {
        return this.discrepancyType;
    }

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    @Override
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("discrepancyType",
            this.discrepancyType == null ? null : this.discrepancyType.toString());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("lateralityIndication", this.lateralityIndication);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LateralityDiscrepancyInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LateralityDiscrepancyInference if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LateralityDiscrepancyInference.
     */
    @Generated
    public static LateralityDiscrepancyInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<FhirR4Extension> extension = null;
            LateralityDiscrepancyType discrepancyType = null;
            RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.LATERALITY_DISCREPANCY;
            FhirR4CodeableConcept lateralityIndication = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("discrepancyType".equals(fieldName)) {
                    discrepancyType = LateralityDiscrepancyType.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    kind = RadiologyInsightsInferenceType.fromString(reader.getString());
                } else if ("lateralityIndication".equals(fieldName)) {
                    lateralityIndication = FhirR4CodeableConcept.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            LateralityDiscrepancyInference deserializedLateralityDiscrepancyInference
                = new LateralityDiscrepancyInference(discrepancyType);
            deserializedLateralityDiscrepancyInference.extension = extension;
            deserializedLateralityDiscrepancyInference.kind = kind;
            deserializedLateralityDiscrepancyInference.lateralityIndication = lateralityIndication;
            return deserializedLateralityDiscrepancyInference;
        });
    }
}
