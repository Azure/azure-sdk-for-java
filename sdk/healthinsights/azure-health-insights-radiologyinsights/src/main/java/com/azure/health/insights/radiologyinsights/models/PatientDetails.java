// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;

/**
 * Patient structured information, including demographics and known structured clinical information.
 */
@Fluent
public final class PatientDetails implements JsonSerializable<PatientDetails> {

    /*
     * The patient's sex.
     */
    @Generated
    private PatientSex sex;

    /*
     * The patient's date of birth.
     */
    @Generated
    private LocalDate birthDate;

    /*
     * Known clinical information for the patient, structured.
     */
    @Generated
    private List<FhirR4Resource> clinicalInfo;

    /**
     * Creates an instance of PatientDetails class.
     */
    @Generated
    public PatientDetails() {
    }

    /**
     * Get the sex property: The patient's sex.
     *
     * @return the sex value.
     */
    @Generated
    public PatientSex getSex() {
        return this.sex;
    }

    /**
     * Set the sex property: The patient's sex.
     *
     * @param sex the sex value to set.
     * @return the PatientDetails object itself.
     */
    @Generated
    public PatientDetails setSex(PatientSex sex) {
        this.sex = sex;
        return this;
    }

    /**
     * Get the birthDate property: The patient's date of birth.
     *
     * @return the birthDate value.
     */
    @Generated
    public LocalDate getBirthDate() {
        return this.birthDate;
    }

    /**
     * Set the birthDate property: The patient's date of birth.
     *
     * @param birthDate the birthDate value to set.
     * @return the PatientDetails object itself.
     */
    @Generated
    public PatientDetails setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
        return this;
    }

    /**
     * Get the clinicalInfo property: Known clinical information for the patient, structured.
     *
     * @return the clinicalInfo value.
     */
    @Generated
    public List<FhirR4Resource> getClinicalInfo() {
        return this.clinicalInfo;
    }

    /**
     * Set the clinicalInfo property: Known clinical information for the patient, structured.
     *
     * @param clinicalInfo the clinicalInfo value to set.
     * @return the PatientDetails object itself.
     */
    @Generated
    public PatientDetails setClinicalInfo(List<FhirR4Resource> clinicalInfo) {
        this.clinicalInfo = clinicalInfo;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sex", this.sex == null ? null : this.sex.toString());
        jsonWriter.writeStringField("birthDate", Objects.toString(this.birthDate, null));
        jsonWriter.writeArrayField("clinicalInfo", this.clinicalInfo, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatientDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatientDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PatientDetails.
     */
    @Generated
    public static PatientDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PatientDetails deserializedPatientDetails = new PatientDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sex".equals(fieldName)) {
                    deserializedPatientDetails.sex = PatientSex.fromString(reader.getString());
                } else if ("birthDate".equals(fieldName)) {
                    deserializedPatientDetails.birthDate
                        = reader.getNullable(nonNullReader -> LocalDate.parse(nonNullReader.getString()));
                } else if ("clinicalInfo".equals(fieldName)) {
                    List<FhirR4Resource> clinicalInfo = reader.readArray(reader1 -> FhirR4Resource.fromJson(reader1));
                    deserializedPatientDetails.clinicalInfo = clinicalInfo;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedPatientDetails;
        });
    }
}
