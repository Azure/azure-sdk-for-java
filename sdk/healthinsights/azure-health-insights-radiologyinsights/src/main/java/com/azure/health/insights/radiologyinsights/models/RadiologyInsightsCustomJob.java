// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Response for the Radiology Insights request.
 */
@Immutable
public final class RadiologyInsightsCustomJob implements JsonSerializable<RadiologyInsightsCustomJob> {

    /*
     * The request data for the operation.
     */
    @Generated
    private RadiologyInsightsData jobData;

    /*
     * The result of the operation.
     */
    @Generated
    private RadiologyInsightsCustomInferenceResult result;

    /*
     * The unique ID of the job.
     */
    @Generated
    private String id;

    /*
     * The status of the job.
     */
    @Generated
    private JobStatus status;

    /*
     * The date and time when the processing job was created.
     */
    @Generated
    private OffsetDateTime createdAt;

    /*
     * The date and time when the processing job is set to expire.
     */
    @Generated
    private OffsetDateTime expiresAt;

    /*
     * The date and time when the processing job was last updated.
     */
    @Generated
    private OffsetDateTime updatedAt;

    /*
     * Error object that describes the error when status is "Failed".
     */
    @Generated
    private ResponseError error;

    /**
     * Creates an instance of RadiologyInsightsCustomJob class.
     */
    @Generated
    private RadiologyInsightsCustomJob() {
    }

    /**
     * Get the jobData property: The request data for the operation.
     *
     * @return the jobData value.
     */
    @Generated
    public RadiologyInsightsData getJobData() {
        return this.jobData;
    }

    /**
     * Get the result property: The result of the operation.
     *
     * @return the result value.
     */
    @Generated
    public RadiologyInsightsCustomInferenceResult getResult() {
        return this.result;
    }

    /**
     * Get the id property: The unique ID of the job.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the status property: The status of the job.
     *
     * @return the status value.
     */
    @Generated
    public JobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdAt property: The date and time when the processing job was created.
     *
     * @return the createdAt value.
     */
    @Generated
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Get the expiresAt property: The date and time when the processing job is set to expire.
     *
     * @return the expiresAt value.
     */
    @Generated
    public OffsetDateTime getExpiresAt() {
        return this.expiresAt;
    }

    /**
     * Get the updatedAt property: The date and time when the processing job was last updated.
     *
     * @return the updatedAt value.
     */
    @Generated
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Get the error property: Error object that describes the error when status is "Failed".
     *
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("jobData", this.jobData);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RadiologyInsightsCustomJob from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of RadiologyInsightsCustomJob if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RadiologyInsightsCustomJob.
     */
    @Generated
    public static RadiologyInsightsCustomJob fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RadiologyInsightsCustomJob deserializedRadiologyInsightsCustomJob = new RadiologyInsightsCustomJob();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.id = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.status = JobStatus.fromString(reader.getString());
                } else if ("jobData".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.jobData = RadiologyInsightsData.fromJson(reader);
                } else if ("result".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.result
                        = RadiologyInsightsCustomInferenceResult.fromJson(reader);
                } else if ("createdAt".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expiresAt".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.expiresAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedAt".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.updatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    deserializedRadiologyInsightsCustomJob.error = ResponseError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedRadiologyInsightsCustomJob;
        });
    }
}
