// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A reference from one resource to another
 * Based on [FHIR Reference](https://www.hl7.org/fhir/R4/references.html).
 */
@Fluent
public final class FhirR4Reference extends FhirR4Element {

    /*
     * Literal reference, Relative, internal or absolute URL
     */
    @Generated
    private String reference;

    /*
     * Type the reference refers to (e.g. "Patient")
     */
    @Generated
    private String type;

    /*
     * Logical reference, when literal reference is not known
     */
    @Generated
    private FhirR4Identifier identifier;

    /*
     * Text alternative for the resource
     */
    @Generated
    private String display;

    /**
     * Creates an instance of FhirR4Reference class.
     */
    @Generated
    public FhirR4Reference() {
    }

    /**
     * Get the reference property: Literal reference, Relative, internal or absolute URL.
     *
     * @return the reference value.
     */
    @Generated
    public String getReference() {
        return this.reference;
    }

    /**
     * Set the reference property: Literal reference, Relative, internal or absolute URL.
     *
     * @param reference the reference value to set.
     * @return the FhirR4Reference object itself.
     */
    @Generated
    public FhirR4Reference setReference(String reference) {
        this.reference = reference;
        return this;
    }

    /**
     * Get the type property: Type the reference refers to (e.g. "Patient").
     *
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Set the type property: Type the reference refers to (e.g. "Patient").
     *
     * @param type the type value to set.
     * @return the FhirR4Reference object itself.
     */
    @Generated
    public FhirR4Reference setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the identifier property: Logical reference, when literal reference is not known.
     *
     * @return the identifier value.
     */
    @Generated
    public FhirR4Identifier getIdentifier() {
        return this.identifier;
    }

    /**
     * Set the identifier property: Logical reference, when literal reference is not known.
     *
     * @param identifier the identifier value to set.
     * @return the FhirR4Reference object itself.
     */
    @Generated
    public FhirR4Reference setIdentifier(FhirR4Identifier identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get the display property: Text alternative for the resource.
     *
     * @return the display value.
     */
    @Generated
    public String getDisplay() {
        return this.display;
    }

    /**
     * Set the display property: Text alternative for the resource.
     *
     * @param display the display value to set.
     * @return the FhirR4Reference object itself.
     */
    @Generated
    public FhirR4Reference setDisplay(String display) {
        this.display = display;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Reference setId(String id) {
        super.setId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public FhirR4Reference setExtension(List<FhirR4Extension> extension) {
        super.setExtension(extension);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("reference", this.reference);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeJsonField("identifier", this.identifier);
        jsonWriter.writeStringField("display", this.display);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Reference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Reference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FhirR4Reference.
     */
    @Generated
    public static FhirR4Reference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FhirR4Reference deserializedFhirR4Reference = new FhirR4Reference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    deserializedFhirR4Reference.setId(reader.getString());
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedFhirR4Reference.setExtension(extension);
                } else if ("reference".equals(fieldName)) {
                    deserializedFhirR4Reference.reference = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedFhirR4Reference.type = reader.getString();
                } else if ("identifier".equals(fieldName)) {
                    deserializedFhirR4Reference.identifier = FhirR4Identifier.fromJson(reader);
                } else if ("display".equals(fieldName)) {
                    deserializedFhirR4Reference.display = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFhirR4Reference;
        });
    }
}
