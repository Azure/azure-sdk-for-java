// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An item of the structured information (e.g. laterality or size) and one or more corresponding details (e.g. left or
 * size-value).
 */
@Immutable
public final class PresentGuidanceInformation implements JsonSerializable<PresentGuidanceInformation> {

    /*
     * The item of the structured information
     */
    @Generated
    private final String presentGuidanceItem;

    /*
     * A list of size values, if the item is about size.
     */
    @Generated
    private List<FhirR4Observation> sizes;

    /*
     * The maximum diameter value, if the item is about the maximum diameter.
     */
    @Generated
    private FhirR4Quantity maximumDiameterAsInText;

    /*
     * The list of item values that are mentioned in the report.
     */
    @Generated
    private List<String> presentGuidanceValues;

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Creates an instance of PresentGuidanceInformation class.
     *
     * @param presentGuidanceItem the presentGuidanceItem value to set.
     */
    @Generated
    private PresentGuidanceInformation(String presentGuidanceItem) {
        this.presentGuidanceItem = presentGuidanceItem;
    }

    /**
     * Get the presentGuidanceItem property: The item of the structured information.
     *
     * @return the presentGuidanceItem value.
     */
    @Generated
    public String getPresentGuidanceItem() {
        return this.presentGuidanceItem;
    }

    /**
     * Get the sizes property: A list of size values, if the item is about size.
     *
     * @return the sizes value.
     */
    @Generated
    public List<FhirR4Observation> getSizes() {
        return this.sizes;
    }

    /**
     * Get the maximumDiameterAsInText property: The maximum diameter value, if the item is about the maximum diameter.
     *
     * @return the maximumDiameterAsInText value.
     */
    @Generated
    public FhirR4Quantity getMaximumDiameterAsInText() {
        return this.maximumDiameterAsInText;
    }

    /**
     * Get the presentGuidanceValues property: The list of item values that are mentioned in the report.
     *
     * @return the presentGuidanceValues value.
     */
    @Generated
    public List<String> getPresentGuidanceValues() {
        return this.presentGuidanceValues;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("presentGuidanceItem", this.presentGuidanceItem);
        jsonWriter.writeArrayField("sizes", this.sizes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("maximumDiameterAsInText", this.maximumDiameterAsInText);
        jsonWriter.writeArrayField("presentGuidanceValues", this.presentGuidanceValues,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("extension", this.extension, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PresentGuidanceInformation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PresentGuidanceInformation if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PresentGuidanceInformation.
     */
    @Generated
    public static PresentGuidanceInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String presentGuidanceItem = null;
            List<FhirR4Observation> sizes = null;
            FhirR4Quantity maximumDiameterAsInText = null;
            List<String> presentGuidanceValues = null;
            List<FhirR4Extension> extension = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("presentGuidanceItem".equals(fieldName)) {
                    presentGuidanceItem = reader.getString();
                } else if ("sizes".equals(fieldName)) {
                    sizes = reader.readArray(reader1 -> FhirR4Observation.fromJson(reader1));
                } else if ("maximumDiameterAsInText".equals(fieldName)) {
                    maximumDiameterAsInText = FhirR4Quantity.fromJson(reader);
                } else if ("presentGuidanceValues".equals(fieldName)) {
                    presentGuidanceValues = reader.readArray(reader1 -> reader1.getString());
                } else if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            PresentGuidanceInformation deserializedPresentGuidanceInformation
                = new PresentGuidanceInformation(presentGuidanceItem);
            deserializedPresentGuidanceInformation.sizes = sizes;
            deserializedPresentGuidanceInformation.maximumDiameterAsInText = maximumDiameterAsInText;
            deserializedPresentGuidanceInformation.presentGuidanceValues = presentGuidanceValues;
            deserializedPresentGuidanceInformation.extension = extension;
            return deserializedPresentGuidanceInformation;
        });
    }
}
