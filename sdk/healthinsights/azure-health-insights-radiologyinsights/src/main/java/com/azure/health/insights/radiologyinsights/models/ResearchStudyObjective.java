// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The ResearchStudyObjective model.
 */
@Immutable
public final class ResearchStudyObjective implements JsonSerializable<ResearchStudyObjective> {

    /*
     * Label for the objective
     */
    @Generated
    private final String name;

    /*
     * primary | secondary | exploratory
     */
    @Generated
    private FhirR4CodeableConcept type;

    /**
     * Creates an instance of ResearchStudyObjective class.
     *
     * @param name the name value to set.
     */
    @Generated
    private ResearchStudyObjective(String name) {
        this.name = name;
    }

    /**
     * Get the name property: Label for the objective.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the type property: primary | secondary | exploratory.
     *
     * @return the type value.
     */
    @Generated
    public FhirR4CodeableConcept getType() {
        return this.type;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResearchStudyObjective from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResearchStudyObjective if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResearchStudyObjective.
     */
    @Generated
    public static ResearchStudyObjective fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            FhirR4CodeableConcept type = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = FhirR4CodeableConcept.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ResearchStudyObjective deserializedResearchStudyObjective = new ResearchStudyObjective(name);
            deserializedResearchStudyObjective.type = type;
            return deserializedResearchStudyObjective;
        });
    }
}
