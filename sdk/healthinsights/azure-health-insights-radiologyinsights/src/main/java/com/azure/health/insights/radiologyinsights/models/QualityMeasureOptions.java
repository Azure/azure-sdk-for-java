// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Quality Measure Options.
 */
@Immutable
public final class QualityMeasureOptions implements JsonSerializable<QualityMeasureOptions> {

    /*
     * Id(s) of the MIPS measures that need to be evaluated in the document
     */
    @Generated
    private final List<QualityMeasureType> measureTypes;

    /**
     * Creates an instance of QualityMeasureOptions class.
     *
     * @param measureTypes the measureTypes value to set.
     */
    @Generated
    public QualityMeasureOptions(List<QualityMeasureType> measureTypes) {
        this.measureTypes = measureTypes;
    }

    /**
     * Get the measureTypes property: Id(s) of the MIPS measures that need to be evaluated in the document.
     *
     * @return the measureTypes value.
     */
    @Generated
    public List<QualityMeasureType> getMeasureTypes() {
        return this.measureTypes;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("measureTypes", this.measureTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QualityMeasureOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of QualityMeasureOptions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the QualityMeasureOptions.
     */
    @Generated
    public static QualityMeasureOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<QualityMeasureType> measureTypes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("measureTypes".equals(fieldName)) {
                    measureTypes = reader.readArray(reader1 -> QualityMeasureType.fromString(reader1.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return new QualityMeasureOptions(measureTypes);
        });
    }
}
