// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Identifies and highlights Risk, Scoring, Assessment and Classifications and correspondent values dictated in a
 * report, e.g. 'BIRADS 5'.
 */
@Immutable
public final class ScoringAndAssessmentInference extends RadiologyInsightsInference {

    /*
     * Discriminator property for RadiologyInsightsInference.
     */
    @Generated
    private RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.SCORING_AND_ASSESSMENT;

    /*
     * Category, e.g. BIRADS
     */
    @Generated
    private final ScoringAndAssessmentCategoryType category;

    /*
     * The expansion of the category (which is an abbreviation.)
     */
    @Generated
    private final String categoryDescription;

    /*
     * The value. If the value is a range, use field valueRange.
     */
    @Generated
    private String singleValue;

    /*
     * The range.
     */
    @Generated
    private AssessmentValueRange rangeValue;

    /**
     * Creates an instance of ScoringAndAssessmentInference class.
     *
     * @param category the category value to set.
     * @param categoryDescription the categoryDescription value to set.
     */
    @Generated
    private ScoringAndAssessmentInference(ScoringAndAssessmentCategoryType category, String categoryDescription) {
        this.category = category;
        this.categoryDescription = categoryDescription;
    }

    /**
     * Get the kind property: Discriminator property for RadiologyInsightsInference.
     *
     * @return the kind value.
     */
    @Generated
    @Override
    public RadiologyInsightsInferenceType getKind() {
        return this.kind;
    }

    /**
     * Get the category property: Category, e.g. BIRADS.
     *
     * @return the category value.
     */
    @Generated
    public ScoringAndAssessmentCategoryType getCategory() {
        return this.category;
    }

    /**
     * Get the categoryDescription property: The expansion of the category (which is an abbreviation.).
     *
     * @return the categoryDescription value.
     */
    @Generated
    public String getCategoryDescription() {
        return this.categoryDescription;
    }

    /**
     * Get the singleValue property: The value. If the value is a range, use field valueRange.
     *
     * @return the singleValue value.
     */
    @Generated
    public String getSingleValue() {
        return this.singleValue;
    }

    /**
     * Get the rangeValue property: The range.
     *
     * @return the rangeValue value.
     */
    @Generated
    public AssessmentValueRange getRangeValue() {
        return this.rangeValue;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extension", getExtension(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("category", this.category == null ? null : this.category.toString());
        jsonWriter.writeStringField("categoryDescription", this.categoryDescription);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("singleValue", this.singleValue);
        jsonWriter.writeJsonField("rangeValue", this.rangeValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScoringAndAssessmentInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScoringAndAssessmentInference if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScoringAndAssessmentInference.
     */
    @Generated
    public static ScoringAndAssessmentInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<FhirR4Extension> extension = null;
            ScoringAndAssessmentCategoryType category = null;
            String categoryDescription = null;
            RadiologyInsightsInferenceType kind = RadiologyInsightsInferenceType.SCORING_AND_ASSESSMENT;
            String singleValue = null;
            AssessmentValueRange rangeValue = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("extension".equals(fieldName)) {
                    extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                } else if ("category".equals(fieldName)) {
                    category = ScoringAndAssessmentCategoryType.fromString(reader.getString());
                } else if ("categoryDescription".equals(fieldName)) {
                    categoryDescription = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    kind = RadiologyInsightsInferenceType.fromString(reader.getString());
                } else if ("singleValue".equals(fieldName)) {
                    singleValue = reader.getString();
                } else if ("rangeValue".equals(fieldName)) {
                    rangeValue = AssessmentValueRange.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ScoringAndAssessmentInference deserializedScoringAndAssessmentInference
                = new ScoringAndAssessmentInference(category, categoryDescription);
            deserializedScoringAndAssessmentInference.setExtension(extension);
            deserializedScoringAndAssessmentInference.kind = kind;
            deserializedScoringAndAssessmentInference.singleValue = singleValue;
            deserializedScoringAndAssessmentInference.rangeValue = rangeValue;
            return deserializedScoringAndAssessmentInference;
        });
    }
}
