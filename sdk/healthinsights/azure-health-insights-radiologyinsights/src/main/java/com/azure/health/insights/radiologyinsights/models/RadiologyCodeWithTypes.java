// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Radiology code with types : used in imaging procedure recommendation for contrast and view.
 */
@Immutable
public final class RadiologyCodeWithTypes {
    /*
     * The SNOMED CT code indicates whether imaging was conducted with or without contrast in the case of contrast, and
     * in the case of views, it denotes the number of views.
     */
    @Generated
    @JsonProperty(value = "code")
    private CodeableConcept code;

    /*
     * The collection of types will indicate the contrast substance used in the case of contrast and, in the case of
     * views, it will specify the types of views, such as lateral and frontal, etc.
     */
    @Generated
    @JsonProperty(value = "types")
    private List<CodeableConcept> types;

    /**
     * Creates an instance of RadiologyCodeWithTypes class.
     * 
     * @param code the code value to set.
     * @param types the types value to set.
     */
    @Generated
    @JsonCreator
    public RadiologyCodeWithTypes(@JsonProperty(value = "code") CodeableConcept code,
        @JsonProperty(value = "types") List<CodeableConcept> types) {
        this.code = code;
        this.types = types;
    }

    /**
     * Get the code property: The SNOMED CT code indicates whether imaging was conducted with or without contrast in
     * the case of contrast, and in the case of views, it denotes the number of views.
     * 
     * @return the code value.
     */
    @Generated
    public CodeableConcept getCode() {
        return this.code;
    }

    /**
     * Get the types property: The collection of types will indicate the contrast substance used in the case of
     * contrast and, in the case of views, it will specify the types of views, such as lateral and frontal, etc.
     * 
     * @return the types value.
     */
    @Generated
    public List<CodeableConcept> getTypes() {
        return this.types;
    }
}
