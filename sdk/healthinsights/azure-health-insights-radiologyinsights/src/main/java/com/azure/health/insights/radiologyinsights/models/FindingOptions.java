// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Finding options.
 */
@Fluent
public final class FindingOptions implements JsonSerializable<FindingOptions> {

    /*
     * If this is true, provide the sentence that contains the first token of the finding's clinical indicator (i.e. the
     * medical problem), if there is one. This sentence is provided as an extension with url 'ci_sentence', next to the
     * token evidence. Default is false.
     */
    @Generated
    private Boolean provideFocusedSentenceEvidence;

    /**
     * Creates an instance of FindingOptions class.
     */
    @Generated
    public FindingOptions() {
    }

    /**
     * Get the provideFocusedSentenceEvidence property: If this is true, provide the sentence that contains the first
     * token of the finding's clinical indicator (i.e. the medical problem), if there is one. This sentence is provided
     * as an extension with url 'ci_sentence', next to the token evidence. Default is false.
     *
     * @return the provideFocusedSentenceEvidence value.
     */
    @Generated
    public Boolean isProvideFocusedSentenceEvidence() {
        return this.provideFocusedSentenceEvidence;
    }

    /**
     * Set the provideFocusedSentenceEvidence property: If this is true, provide the sentence that contains the first
     * token of the finding's clinical indicator (i.e. the medical problem), if there is one. This sentence is provided
     * as an extension with url 'ci_sentence', next to the token evidence. Default is false.
     *
     * @param provideFocusedSentenceEvidence the provideFocusedSentenceEvidence value to set.
     * @return the FindingOptions object itself.
     */
    @Generated
    public FindingOptions setProvideFocusedSentenceEvidence(Boolean provideFocusedSentenceEvidence) {
        this.provideFocusedSentenceEvidence = provideFocusedSentenceEvidence;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("provideFocusedSentenceEvidence", this.provideFocusedSentenceEvidence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FindingOptions from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FindingOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FindingOptions.
     */
    @Generated
    public static FindingOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FindingOptions deserializedFindingOptions = new FindingOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("provideFocusedSentenceEvidence".equals(fieldName)) {
                    deserializedFindingOptions.provideFocusedSentenceEvidence
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFindingOptions;
        });
    }
}
