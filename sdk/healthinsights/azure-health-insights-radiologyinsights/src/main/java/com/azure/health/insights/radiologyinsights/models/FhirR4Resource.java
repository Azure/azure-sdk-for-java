// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Resource is the ancestor of DomainResource from which most resources are derived. Bundle, Parameters, and Binary
 * extend Resource directly.
 * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html.
 */
@Fluent
public class FhirR4Resource implements JsonSerializable<FhirR4Resource> {

    /*
     * The type of resource
     */
    @Generated
    private final String resourceType;

    /*
     * Resource Id
     */
    @Generated
    private String id;

    /*
     * Metadata about the resource
     */
    @Generated
    private FhirR4Meta meta;

    /*
     * A set of rules under which this content was created
     */
    @Generated
    private String implicitRules;

    /*
     * Language of the resource content
     */
    @Generated
    private String language;

    /*
     * Resource is the ancestor of DomainResource from which most resources are derived. Bundle, Parameters, and Binary
     * extend Resource directly.
     * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html
     */
    @Generated
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of FhirR4Resource class.
     *
     * @param resourceType the resourceType value to set.
     */
    @Generated
    public FhirR4Resource(String resourceType) {
        this.resourceType = resourceType;
    }

    /**
     * Get the resourceType property: The type of resource.
     *
     * @return the resourceType value.
     */
    @Generated
    public String getResourceType() {
        return this.resourceType;
    }

    /**
     * Get the id property: Resource Id.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: Resource Id.
     *
     * @param id the id value to set.
     * @return the FhirR4Resource object itself.
     */
    @Generated
    public FhirR4Resource setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the meta property: Metadata about the resource.
     *
     * @return the meta value.
     */
    @Generated
    public FhirR4Meta getMeta() {
        return this.meta;
    }

    /**
     * Set the meta property: Metadata about the resource.
     *
     * @param meta the meta value to set.
     * @return the FhirR4Resource object itself.
     */
    @Generated
    public FhirR4Resource setMeta(FhirR4Meta meta) {
        this.meta = meta;
        return this;
    }

    /**
     * Get the implicitRules property: A set of rules under which this content was created.
     *
     * @return the implicitRules value.
     */
    @Generated
    public String getImplicitRules() {
        return this.implicitRules;
    }

    /**
     * Set the implicitRules property: A set of rules under which this content was created.
     *
     * @param implicitRules the implicitRules value to set.
     * @return the FhirR4Resource object itself.
     */
    @Generated
    public FhirR4Resource setImplicitRules(String implicitRules) {
        this.implicitRules = implicitRules;
        return this;
    }

    /**
     * Get the language property: Language of the resource content.
     *
     * @return the language value.
     */
    @Generated
    public String getLanguage() {
        return this.language;
    }

    /**
     * Set the language property: Language of the resource content.
     *
     * @param language the language value to set.
     * @return the FhirR4Resource object itself.
     */
    @Generated
    public FhirR4Resource setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Get the additionalProperties property: Resource is the ancestor of DomainResource from which most resources are
     * derived. Bundle, Parameters, and Binary extend Resource directly.
     * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html.
     *
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties property: Resource is the ancestor of DomainResource from which most resources are
     * derived. Bundle, Parameters, and Binary extend Resource directly.
     * Based on [FHIR Resource](https://www.hl7.org/fhir/r4/resource.html.
     *
     * @param additionalProperties the additionalProperties value to set.
     * @return the FhirR4Resource object itself.
     */
    @Generated
    public FhirR4Resource setAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("meta", this.meta);
        jsonWriter.writeStringField("implicitRules", this.implicitRules);
        jsonWriter.writeStringField("language", this.language);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FhirR4Resource from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FhirR4Resource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FhirR4Resource.
     */
    @Generated
    public static FhirR4Resource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String resourceType = null;
            String id = null;
            FhirR4Meta meta = null;
            String implicitRules = null;
            String language = null;
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("resourceType".equals(fieldName)) {
                    resourceType = reader.getString();
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("meta".equals(fieldName)) {
                    meta = FhirR4Meta.fromJson(reader);
                } else if ("implicitRules".equals(fieldName)) {
                    implicitRules = reader.getString();
                } else if ("language".equals(fieldName)) {
                    language = reader.getString();
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }
                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            FhirR4Resource deserializedFhirR4Resource = new FhirR4Resource(resourceType);
            deserializedFhirR4Resource.id = id;
            deserializedFhirR4Resource.meta = meta;
            deserializedFhirR4Resource.implicitRules = implicitRules;
            deserializedFhirR4Resource.language = language;
            deserializedFhirR4Resource.additionalProperties = additionalProperties;
            return deserializedFhirR4Resource;
        });
    }
}
