// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.radiologyinsights.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The procedure recommendation can be a generic procedure or an imaging procedure.
 */
@Immutable
public class ProcedureRecommendation implements JsonSerializable<ProcedureRecommendation> {

    /*
     * Discriminator property for ProcedureRecommendation.
     */
    @Generated
    private String kind = "ProcedureRecommendation";

    /*
     * Additional Content defined by implementations
     */
    @Generated
    private List<FhirR4Extension> extension;

    /**
     * Creates an instance of ProcedureRecommendation class.
     */
    @Generated
    protected ProcedureRecommendation() {
    }

    /**
     * Get the kind property: Discriminator property for ProcedureRecommendation.
     *
     * @return the kind value.
     */
    @Generated
    public String getKind() {
        return this.kind;
    }

    /**
     * Get the extension property: Additional Content defined by implementations.
     *
     * @return the extension value.
     */
    @Generated
    public List<FhirR4Extension> getExtension() {
        return this.extension;
    }

    /**
     * Set the extension property: Additional Content defined by implementations.
     *
     * @param extension the extension value to set.
     * @return the ProcedureRecommendation object itself.
     */
    @Generated
    ProcedureRecommendation setExtension(List<FhirR4Extension> extension) {
        this.extension = extension;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeArrayField("extension", this.extension, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProcedureRecommendation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProcedureRecommendation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProcedureRecommendation.
     */
    @Generated
    public static ProcedureRecommendation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                // Prepare for reading
                readerToUse.nextToken();
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("genericProcedureRecommendation".equals(discriminatorValue)) {
                    return GenericProcedureRecommendation.fromJson(readerToUse.reset());
                } else if ("imagingProcedureRecommendation".equals(discriminatorValue)) {
                    return ImagingProcedureRecommendation.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static ProcedureRecommendation fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProcedureRecommendation deserializedProcedureRecommendation = new ProcedureRecommendation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("kind".equals(fieldName)) {
                    deserializedProcedureRecommendation.kind = reader.getString();
                } else if ("extension".equals(fieldName)) {
                    List<FhirR4Extension> extension = reader.readArray(reader1 -> FhirR4Extension.fromJson(reader1));
                    deserializedProcedureRecommendation.extension = extension;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedProcedureRecommendation;
        });
    }
}
