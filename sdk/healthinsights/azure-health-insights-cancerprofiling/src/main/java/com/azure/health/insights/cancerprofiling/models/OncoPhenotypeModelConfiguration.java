// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.cancerprofiling.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Configuration affecting the Onco Phenotype model's inference.
 */
@Fluent
public final class OncoPhenotypeModelConfiguration implements JsonSerializable<OncoPhenotypeModelConfiguration> {

    /*
     * An indication whether the model should produce verbose output.
     */
    @Generated
    private Boolean verbose;

    /*
     * An indication whether the model's output should include evidence for the inferences.
     */
    @Generated
    private Boolean includeEvidence;

    /*
     * A list of inference types to be inferred for the current request.
     * This could be used if only part of the Onco Phenotype inferences are required.
     * If this list is omitted or empty, the model will return all the inference types.
     */
    @Generated
    private List<OncoPhenotypeInferenceType> inferenceTypes;

    /*
     * An indication whether to perform a preliminary step on the patient's documents to determine whether they relate
     * to a Cancer case.
     */
    @Generated
    private Boolean checkForCancerCase;

    /**
     * Creates an instance of OncoPhenotypeModelConfiguration class.
     */
    @Generated
    public OncoPhenotypeModelConfiguration() {
    }

    /**
     * Get the verbose property: An indication whether the model should produce verbose output.
     *
     * @return the verbose value.
     */
    @Generated
    public Boolean isVerbose() {
        return this.verbose;
    }

    /**
     * Set the verbose property: An indication whether the model should produce verbose output.
     *
     * @param verbose the verbose value to set.
     * @return the OncoPhenotypeModelConfiguration object itself.
     */
    @Generated
    public OncoPhenotypeModelConfiguration setVerbose(Boolean verbose) {
        this.verbose = verbose;
        return this;
    }

    /**
     * Get the includeEvidence property: An indication whether the model's output should include evidence for the
     * inferences.
     *
     * @return the includeEvidence value.
     */
    @Generated
    public Boolean isIncludeEvidence() {
        return this.includeEvidence;
    }

    /**
     * Set the includeEvidence property: An indication whether the model's output should include evidence for the
     * inferences.
     *
     * @param includeEvidence the includeEvidence value to set.
     * @return the OncoPhenotypeModelConfiguration object itself.
     */
    @Generated
    public OncoPhenotypeModelConfiguration setIncludeEvidence(Boolean includeEvidence) {
        this.includeEvidence = includeEvidence;
        return this;
    }

    /**
     * Get the inferenceTypes property: A list of inference types to be inferred for the current request.
     * This could be used if only part of the Onco Phenotype inferences are required.
     * If this list is omitted or empty, the model will return all the inference types.
     *
     * @return the inferenceTypes value.
     */
    @Generated
    public List<OncoPhenotypeInferenceType> getInferenceTypes() {
        return this.inferenceTypes;
    }

    /**
     * Set the inferenceTypes property: A list of inference types to be inferred for the current request.
     * This could be used if only part of the Onco Phenotype inferences are required.
     * If this list is omitted or empty, the model will return all the inference types.
     *
     * @param inferenceTypes the inferenceTypes value to set.
     * @return the OncoPhenotypeModelConfiguration object itself.
     */
    @Generated
    public OncoPhenotypeModelConfiguration setInferenceTypes(List<OncoPhenotypeInferenceType> inferenceTypes) {
        this.inferenceTypes = inferenceTypes;
        return this;
    }

    /**
     * Get the checkForCancerCase property: An indication whether to perform a preliminary step on the patient's
     * documents to determine whether they relate to a Cancer case.
     *
     * @return the checkForCancerCase value.
     */
    @Generated
    public Boolean isCheckForCancerCase() {
        return this.checkForCancerCase;
    }

    /**
     * Set the checkForCancerCase property: An indication whether to perform a preliminary step on the patient's
     * documents to determine whether they relate to a Cancer case.
     *
     * @param checkForCancerCase the checkForCancerCase value to set.
     * @return the OncoPhenotypeModelConfiguration object itself.
     */
    @Generated
    public OncoPhenotypeModelConfiguration setCheckForCancerCase(Boolean checkForCancerCase) {
        this.checkForCancerCase = checkForCancerCase;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("verbose", this.verbose);
        jsonWriter.writeBooleanField("includeEvidence", this.includeEvidence);
        jsonWriter.writeArrayField("inferenceTypes", this.inferenceTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeBooleanField("checkForCancerCase", this.checkForCancerCase);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OncoPhenotypeModelConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OncoPhenotypeModelConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OncoPhenotypeModelConfiguration.
     */
    @Generated
    public static OncoPhenotypeModelConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OncoPhenotypeModelConfiguration deserializedOncoPhenotypeModelConfiguration
                = new OncoPhenotypeModelConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("verbose".equals(fieldName)) {
                    deserializedOncoPhenotypeModelConfiguration.verbose = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeEvidence".equals(fieldName)) {
                    deserializedOncoPhenotypeModelConfiguration.includeEvidence
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("inferenceTypes".equals(fieldName)) {
                    List<OncoPhenotypeInferenceType> inferenceTypes
                        = reader.readArray(reader1 -> OncoPhenotypeInferenceType.fromString(reader1.getString()));
                    deserializedOncoPhenotypeModelConfiguration.inferenceTypes = inferenceTypes;
                } else if ("checkForCancerCase".equals(fieldName)) {
                    deserializedOncoPhenotypeModelConfiguration.checkForCancerCase
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedOncoPhenotypeModelConfiguration;
        });
    }
}
