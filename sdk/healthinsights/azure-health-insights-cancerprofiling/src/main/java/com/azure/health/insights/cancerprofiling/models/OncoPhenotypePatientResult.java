// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.cancerprofiling.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The results of the model's work for a single patient.
 */
@Immutable
public final class OncoPhenotypePatientResult implements JsonSerializable<OncoPhenotypePatientResult> {

    /*
     * The identifier given for the patient in the request.
     */
    @Generated
    private final String id;

    /*
     * The model's inferences for the given patient.
     */
    @Generated
    private final List<OncoPhenotypeInference> inferences;

    /**
     * Creates an instance of OncoPhenotypePatientResult class.
     *
     * @param id the id value to set.
     * @param inferences the inferences value to set.
     */
    @Generated
    private OncoPhenotypePatientResult(String id, List<OncoPhenotypeInference> inferences) {
        this.id = id;
        this.inferences = inferences;
    }

    /**
     * Get the id property: The identifier given for the patient in the request.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the inferences property: The model's inferences for the given patient.
     *
     * @return the inferences value.
     */
    @Generated
    public List<OncoPhenotypeInference> getInferences() {
        return this.inferences;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeArrayField("inferences", this.inferences, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OncoPhenotypePatientResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OncoPhenotypePatientResult if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OncoPhenotypePatientResult.
     */
    @Generated
    public static OncoPhenotypePatientResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            List<OncoPhenotypeInference> inferences = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("inferences".equals(fieldName)) {
                    inferences = reader.readArray(reader1 -> OncoPhenotypeInference.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new OncoPhenotypePatientResult(id, inferences);
        });
    }
}
