// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.cancerprofiling.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * An inference made by the Onco Phenotype model regarding a patient.
 */
@Immutable
public final class OncoPhenotypeInference implements JsonSerializable<OncoPhenotypeInference> {

    /*
     * The type of the Onco Phenotype inference
     */
    @Generated
    private final OncoPhenotypeInferenceType type;

    /*
     * The value of the inference, as relevant for the given inference type.
     */
    @Generated
    private final String value;

    /*
     * The description corresponding to the inference value.
     */
    @Generated
    private String description;

    /*
     * Confidence score for this inference.
     */
    @Generated
    private Double confidenceScore;

    /*
     * The evidence corresponding to the inference value.
     */
    @Generated
    private List<InferenceEvidence> evidence;

    /*
     * An identifier for a clinical case, if there are multiple clinical cases regarding the same patient.
     */
    @Generated
    private String caseId;

    /**
     * Creates an instance of OncoPhenotypeInference class.
     *
     * @param type the type value to set.
     * @param value the value value to set.
     */
    @Generated
    private OncoPhenotypeInference(OncoPhenotypeInferenceType type, String value) {
        this.type = type;
        this.value = value;
    }

    /**
     * Get the type property: The type of the Onco Phenotype inference.
     *
     * @return the type value.
     */
    @Generated
    public OncoPhenotypeInferenceType getType() {
        return this.type;
    }

    /**
     * Get the value property: The value of the inference, as relevant for the given inference type.
     *
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * Get the description property: The description corresponding to the inference value.
     *
     * @return the description value.
     */
    @Generated
    public String getDescription() {
        return this.description;
    }

    /**
     * Get the confidenceScore property: Confidence score for this inference.
     *
     * @return the confidenceScore value.
     */
    @Generated
    public Double getConfidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the evidence property: The evidence corresponding to the inference value.
     *
     * @return the evidence value.
     */
    @Generated
    public List<InferenceEvidence> getEvidence() {
        return this.evidence;
    }

    /**
     * Get the caseId property: An identifier for a clinical case, if there are multiple clinical cases regarding the
     * same patient.
     *
     * @return the caseId value.
     */
    @Generated
    public String getCaseId() {
        return this.caseId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeNumberField("confidenceScore", this.confidenceScore);
        jsonWriter.writeArrayField("evidence", this.evidence, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("caseId", this.caseId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OncoPhenotypeInference from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OncoPhenotypeInference if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OncoPhenotypeInference.
     */
    @Generated
    public static OncoPhenotypeInference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OncoPhenotypeInferenceType type = null;
            String value = null;
            String description = null;
            Double confidenceScore = null;
            List<InferenceEvidence> evidence = null;
            String caseId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    type = OncoPhenotypeInferenceType.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else if ("description".equals(fieldName)) {
                    description = reader.getString();
                } else if ("confidenceScore".equals(fieldName)) {
                    confidenceScore = reader.getNullable(JsonReader::getDouble);
                } else if ("evidence".equals(fieldName)) {
                    evidence = reader.readArray(reader1 -> InferenceEvidence.fromJson(reader1));
                } else if ("caseId".equals(fieldName)) {
                    caseId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            OncoPhenotypeInference deserializedOncoPhenotypeInference = new OncoPhenotypeInference(type, value);
            deserializedOncoPhenotypeInference.description = description;
            deserializedOncoPhenotypeInference.confidenceScore = confidenceScore;
            deserializedOncoPhenotypeInference.evidence = evidence;
            deserializedOncoPhenotypeInference.caseId = caseId;
            return deserializedOncoPhenotypeInference;
        });
    }
}
