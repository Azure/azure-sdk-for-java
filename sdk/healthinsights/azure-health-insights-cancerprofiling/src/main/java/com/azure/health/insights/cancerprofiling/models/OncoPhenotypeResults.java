// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.cancerprofiling.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The inference results for the Onco Phenotype request.
 */
@Immutable
public final class OncoPhenotypeResults implements JsonSerializable<OncoPhenotypeResults> {

    /*
     * Results for the patients given in the request.
     */
    @Generated
    private final List<OncoPhenotypePatientResult> patients;

    /*
     * The version of the model used for inference, expressed as the model date.
     */
    @Generated
    private final String modelVersion;

    /**
     * Creates an instance of OncoPhenotypeResults class.
     *
     * @param patients the patients value to set.
     * @param modelVersion the modelVersion value to set.
     */
    @Generated
    private OncoPhenotypeResults(List<OncoPhenotypePatientResult> patients, String modelVersion) {
        this.patients = patients;
        this.modelVersion = modelVersion;
    }

    /**
     * Get the patients property: Results for the patients given in the request.
     *
     * @return the patients value.
     */
    @Generated
    public List<OncoPhenotypePatientResult> getPatients() {
        return this.patients;
    }

    /**
     * Get the modelVersion property: The version of the model used for inference, expressed as the model date.
     *
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("patients", this.patients, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OncoPhenotypeResults from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of OncoPhenotypeResults if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OncoPhenotypeResults.
     */
    @Generated
    public static OncoPhenotypeResults fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<OncoPhenotypePatientResult> patients = null;
            String modelVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("patients".equals(fieldName)) {
                    patients = reader.readArray(reader1 -> OncoPhenotypePatientResult.fromJson(reader1));
                } else if ("modelVersion".equals(fieldName)) {
                    modelVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new OncoPhenotypeResults(patients, modelVersion);
        });
    }
}
