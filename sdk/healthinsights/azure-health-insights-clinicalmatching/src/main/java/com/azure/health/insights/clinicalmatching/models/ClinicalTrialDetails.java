// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A description of a clinical trial.
 */
@Fluent
public final class ClinicalTrialDetails implements JsonSerializable<ClinicalTrialDetails> {

    /*
     * A given identifier for the clinical trial. Has to be unique within a list of clinical trials.
     */
    @Generated
    private final String id;

    /*
     * The eligibility criteria of the clinical trial (inclusion and exclusion), given as text.
     */
    @Generated
    private String eligibilityCriteriaText;

    /*
     * Demographic criteria for a clinical trial.
     */
    @Generated
    private ClinicalTrialDemographics demographics;

    /*
     * Trial data which is of interest to the potential participant.
     */
    @Generated
    private final ClinicalTrialMetadata metadata;

    /**
     * Creates an instance of ClinicalTrialDetails class.
     *
     * @param id the id value to set.
     * @param metadata the metadata value to set.
     */
    @Generated
    public ClinicalTrialDetails(String id, ClinicalTrialMetadata metadata) {
        this.id = id;
        this.metadata = metadata;
    }

    /**
     * Get the id property: A given identifier for the clinical trial. Has to be unique within a list of clinical
     * trials.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the eligibilityCriteriaText property: The eligibility criteria of the clinical trial (inclusion and
     * exclusion), given as text.
     *
     * @return the eligibilityCriteriaText value.
     */
    @Generated
    public String getEligibilityCriteriaText() {
        return this.eligibilityCriteriaText;
    }

    /**
     * Set the eligibilityCriteriaText property: The eligibility criteria of the clinical trial (inclusion and
     * exclusion), given as text.
     *
     * @param eligibilityCriteriaText the eligibilityCriteriaText value to set.
     * @return the ClinicalTrialDetails object itself.
     */
    @Generated
    public ClinicalTrialDetails setEligibilityCriteriaText(String eligibilityCriteriaText) {
        this.eligibilityCriteriaText = eligibilityCriteriaText;
        return this;
    }

    /**
     * Get the demographics property: Demographic criteria for a clinical trial.
     *
     * @return the demographics value.
     */
    @Generated
    public ClinicalTrialDemographics getDemographics() {
        return this.demographics;
    }

    /**
     * Set the demographics property: Demographic criteria for a clinical trial.
     *
     * @param demographics the demographics value to set.
     * @return the ClinicalTrialDetails object itself.
     */
    @Generated
    public ClinicalTrialDetails setDemographics(ClinicalTrialDemographics demographics) {
        this.demographics = demographics;
        return this;
    }

    /**
     * Get the metadata property: Trial data which is of interest to the potential participant.
     *
     * @return the metadata value.
     */
    @Generated
    public ClinicalTrialMetadata getMetadata() {
        return this.metadata;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("metadata", this.metadata);
        jsonWriter.writeStringField("eligibilityCriteriaText", this.eligibilityCriteriaText);
        jsonWriter.writeJsonField("demographics", this.demographics);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClinicalTrialDetails from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClinicalTrialDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClinicalTrialDetails.
     */
    @Generated
    public static ClinicalTrialDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            ClinicalTrialMetadata metadata = null;
            String eligibilityCriteriaText = null;
            ClinicalTrialDemographics demographics = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    metadata = ClinicalTrialMetadata.fromJson(reader);
                } else if ("eligibilityCriteriaText".equals(fieldName)) {
                    eligibilityCriteriaText = reader.getString();
                } else if ("demographics".equals(fieldName)) {
                    demographics = ClinicalTrialDemographics.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ClinicalTrialDetails deserializedClinicalTrialDetails = new ClinicalTrialDetails(id, metadata);
            deserializedClinicalTrialDetails.eligibilityCriteriaText = eligibilityCriteriaText;
            deserializedClinicalTrialDetails.demographics = demographics;
            return deserializedClinicalTrialDetails;
        });
    }
}
