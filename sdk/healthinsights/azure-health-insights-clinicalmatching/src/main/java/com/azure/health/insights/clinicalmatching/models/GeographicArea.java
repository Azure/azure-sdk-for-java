// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A geographic area, expressed as a `Circle` geometry represented using a `GeoJSON Feature` (see [GeoJSON
 * spec](https://tools.ietf.org/html/rfc7946)).
 */
@Immutable
public final class GeographicArea implements JsonSerializable<GeographicArea> {

    /*
     * `GeoJSON` type.
     */
    @Generated
    private final GeoJsonType type;

    /*
     * `GeoJSON` geometry, representing the area circle's center.
     */
    @Generated
    private final AreaGeometry geometry;

    /*
     * `GeoJSON` object properties.
     */
    @Generated
    private final AreaProperties properties;

    /**
     * Creates an instance of GeographicArea class.
     *
     * @param type the type value to set.
     * @param geometry the geometry value to set.
     * @param properties the properties value to set.
     */
    @Generated
    public GeographicArea(GeoJsonType type, AreaGeometry geometry, AreaProperties properties) {
        this.type = type;
        this.geometry = geometry;
        this.properties = properties;
    }

    /**
     * Get the type property: `GeoJSON` type.
     *
     * @return the type value.
     */
    @Generated
    public GeoJsonType getType() {
        return this.type;
    }

    /**
     * Get the geometry property: `GeoJSON` geometry, representing the area circle's center.
     *
     * @return the geometry value.
     */
    @Generated
    public AreaGeometry getGeometry() {
        return this.geometry;
    }

    /**
     * Get the properties property: `GeoJSON` object properties.
     *
     * @return the properties value.
     */
    @Generated
    public AreaProperties getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("geometry", this.geometry);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeographicArea from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeographicArea if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeographicArea.
     */
    @Generated
    public static GeographicArea fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoJsonType type = null;
            AreaGeometry geometry = null;
            AreaProperties properties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("type".equals(fieldName)) {
                    type = GeoJsonType.fromString(reader.getString());
                } else if ("geometry".equals(fieldName)) {
                    geometry = AreaGeometry.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    properties = AreaProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new GeographicArea(type, geometry, properties);
        });
    }
}
