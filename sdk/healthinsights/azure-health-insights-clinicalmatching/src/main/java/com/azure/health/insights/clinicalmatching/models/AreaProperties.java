// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * `GeoJSON` object properties.
 */
@Immutable
public final class AreaProperties implements JsonSerializable<AreaProperties> {

    /*
     * `GeoJSON` object sub-type.
     */
    @Generated
    private final GeoJsonPropertiesSubType subType;

    /*
     * The radius of the area's circle, in meters.
     */
    @Generated
    private final double radius;

    /**
     * Creates an instance of AreaProperties class.
     *
     * @param subType the subType value to set.
     * @param radius the radius value to set.
     */
    @Generated
    public AreaProperties(GeoJsonPropertiesSubType subType, double radius) {
        this.subType = subType;
        this.radius = radius;
    }

    /**
     * Get the subType property: `GeoJSON` object sub-type.
     *
     * @return the subType value.
     */
    @Generated
    public GeoJsonPropertiesSubType getSubType() {
        return this.subType;
    }

    /**
     * Get the radius property: The radius of the area's circle, in meters.
     *
     * @return the radius value.
     */
    @Generated
    public double getRadius() {
        return this.radius;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subType", this.subType == null ? null : this.subType.toString());
        jsonWriter.writeDoubleField("radius", this.radius);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AreaProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AreaProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AreaProperties.
     */
    @Generated
    public static AreaProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeoJsonPropertiesSubType subType = null;
            double radius = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("subType".equals(fieldName)) {
                    subType = GeoJsonPropertiesSubType.fromString(reader.getString());
                } else if ("radius".equals(fieldName)) {
                    radius = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new AreaProperties(subType, radius);
        });
    }
}
