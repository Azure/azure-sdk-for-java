// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A location given as a combination of city, state and country/region. It could specify a city, a state or a
 * country/region.
 * In case a city is specified, either state +country/region or country/region (for countries/regions where there are no
 * states) should be added.
 * In case a state is specified (without a city), country/region should be added.
 */
@Fluent
public final class GeographicLocation implements JsonSerializable<GeographicLocation> {

    /*
     * City name.
     */
    @Generated
    private String city;

    /*
     * State name.
     */
    @Generated
    private String state;

    /*
     * Country/region name.
     */
    @Generated
    private final String countryOrRegion;

    /**
     * Creates an instance of GeographicLocation class.
     *
     * @param countryOrRegion the countryOrRegion value to set.
     */
    @Generated
    public GeographicLocation(String countryOrRegion) {
        this.countryOrRegion = countryOrRegion;
    }

    /**
     * Get the city property: City name.
     *
     * @return the city value.
     */
    @Generated
    public String getCity() {
        return this.city;
    }

    /**
     * Set the city property: City name.
     *
     * @param city the city value to set.
     * @return the GeographicLocation object itself.
     */
    @Generated
    public GeographicLocation setCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the state property: State name.
     *
     * @return the state value.
     */
    @Generated
    public String getState() {
        return this.state;
    }

    /**
     * Set the state property: State name.
     *
     * @param state the state value to set.
     * @return the GeographicLocation object itself.
     */
    @Generated
    public GeographicLocation setState(String state) {
        this.state = state;
        return this;
    }

    /**
     * Get the countryOrRegion property: Country/region name.
     *
     * @return the countryOrRegion value.
     */
    @Generated
    public String getCountryOrRegion() {
        return this.countryOrRegion;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("countryOrRegion", this.countryOrRegion);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("state", this.state);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeographicLocation from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeographicLocation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GeographicLocation.
     */
    @Generated
    public static GeographicLocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String countryOrRegion = null;
            String city = null;
            String state = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("countryOrRegion".equals(fieldName)) {
                    countryOrRegion = reader.getString();
                } else if ("city".equals(fieldName)) {
                    city = reader.getString();
                } else if ("state".equals(fieldName)) {
                    state = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            GeographicLocation deserializedGeographicLocation = new GeographicLocation(countryOrRegion);
            deserializedGeographicLocation.city = city;
            deserializedGeographicLocation.state = state;
            return deserializedGeographicLocation;
        });
    }
}
