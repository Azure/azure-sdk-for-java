// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A piece of evidence from a clinical note (text document).
 */
@Immutable
public final class ClinicalNoteEvidence implements JsonSerializable<ClinicalNoteEvidence> {

    /*
     * The identifier of the document containing the evidence.
     */
    @Generated
    private final String id;

    /*
     * The actual text span which is evidence for the inference.
     */
    @Generated
    private String text;

    /*
     * The start index of the evidence text span in the document (0 based).
     */
    @Generated
    private final int offset;

    /*
     * The length of the evidence text span.
     */
    @Generated
    private final int length;

    /**
     * Creates an instance of ClinicalNoteEvidence class.
     *
     * @param id the id value to set.
     * @param offset the offset value to set.
     * @param length the length value to set.
     */
    @Generated
    private ClinicalNoteEvidence(String id, int offset, int length) {
        this.id = id;
        this.offset = offset;
        this.length = length;
    }

    /**
     * Get the id property: The identifier of the document containing the evidence.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the text property: The actual text span which is evidence for the inference.
     *
     * @return the text value.
     */
    @Generated
    public String getText() {
        return this.text;
    }

    /**
     * Get the offset property: The start index of the evidence text span in the document (0 based).
     *
     * @return the offset value.
     */
    @Generated
    public int getOffset() {
        return this.offset;
    }

    /**
     * Get the length property: The length of the evidence text span.
     *
     * @return the length value.
     */
    @Generated
    public int getLength() {
        return this.length;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeIntField("offset", this.offset);
        jsonWriter.writeIntField("length", this.length);
        jsonWriter.writeStringField("text", this.text);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClinicalNoteEvidence from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClinicalNoteEvidence if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClinicalNoteEvidence.
     */
    @Generated
    public static ClinicalNoteEvidence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            int offset = 0;
            int length = 0;
            String text = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("offset".equals(fieldName)) {
                    offset = reader.getInt();
                } else if ("length".equals(fieldName)) {
                    length = reader.getInt();
                } else if ("text".equals(fieldName)) {
                    text = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ClinicalNoteEvidence deserializedClinicalNoteEvidence = new ClinicalNoteEvidence(id, offset, length);
            deserializedClinicalNoteEvidence.text = text;
            return deserializedClinicalNoteEvidence;
        });
    }
}
