// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A piece of evidence corresponding to a Trial Matcher inference.
 */
@Immutable
public final class TrialMatcherInferenceEvidence implements JsonSerializable<TrialMatcherInferenceEvidence> {

    /*
     * A piece of evidence from the eligibility criteria text of a clinical trial.
     */
    @Generated
    private String eligibilityCriteriaEvidence;

    /*
     * A piece of evidence from a clinical note (text document).
     */
    @Generated
    private ClinicalNoteEvidence patientDataEvidence;

    /*
     * A piece of clinical information, expressed as a code in a clinical coding
     * system.
     */
    @Generated
    private ClinicalCodedElement patientInfoEvidence;

    /*
     * A value indicating how important this piece of evidence is for the inference.
     */
    @Generated
    private Double importance;

    /**
     * Creates an instance of TrialMatcherInferenceEvidence class.
     */
    @Generated
    private TrialMatcherInferenceEvidence() {
    }

    /**
     * Get the eligibilityCriteriaEvidence property: A piece of evidence from the eligibility criteria text of a
     * clinical trial.
     *
     * @return the eligibilityCriteriaEvidence value.
     */
    @Generated
    public String getEligibilityCriteriaEvidence() {
        return this.eligibilityCriteriaEvidence;
    }

    /**
     * Get the patientDataEvidence property: A piece of evidence from a clinical note (text document).
     *
     * @return the patientDataEvidence value.
     */
    @Generated
    public ClinicalNoteEvidence getPatientDataEvidence() {
        return this.patientDataEvidence;
    }

    /**
     * Get the patientInfoEvidence property: A piece of clinical information, expressed as a code in a clinical coding
     * system.
     *
     * @return the patientInfoEvidence value.
     */
    @Generated
    public ClinicalCodedElement getPatientInfoEvidence() {
        return this.patientInfoEvidence;
    }

    /**
     * Get the importance property: A value indicating how important this piece of evidence is for the inference.
     *
     * @return the importance value.
     */
    @Generated
    public Double getImportance() {
        return this.importance;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eligibilityCriteriaEvidence", this.eligibilityCriteriaEvidence);
        jsonWriter.writeJsonField("patientDataEvidence", this.patientDataEvidence);
        jsonWriter.writeJsonField("patientInfoEvidence", this.patientInfoEvidence);
        jsonWriter.writeNumberField("importance", this.importance);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrialMatcherInferenceEvidence from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrialMatcherInferenceEvidence if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TrialMatcherInferenceEvidence.
     */
    @Generated
    public static TrialMatcherInferenceEvidence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrialMatcherInferenceEvidence deserializedTrialMatcherInferenceEvidence
                = new TrialMatcherInferenceEvidence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("eligibilityCriteriaEvidence".equals(fieldName)) {
                    deserializedTrialMatcherInferenceEvidence.eligibilityCriteriaEvidence = reader.getString();
                } else if ("patientDataEvidence".equals(fieldName)) {
                    deserializedTrialMatcherInferenceEvidence.patientDataEvidence
                        = ClinicalNoteEvidence.fromJson(reader);
                } else if ("patientInfoEvidence".equals(fieldName)) {
                    deserializedTrialMatcherInferenceEvidence.patientInfoEvidence
                        = ClinicalCodedElement.fromJson(reader);
                } else if ("importance".equals(fieldName)) {
                    deserializedTrialMatcherInferenceEvidence.importance = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTrialMatcherInferenceEvidence;
        });
    }
}
