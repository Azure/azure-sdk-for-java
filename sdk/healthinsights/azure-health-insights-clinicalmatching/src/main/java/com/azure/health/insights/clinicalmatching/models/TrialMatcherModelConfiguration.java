// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration affecting the Trial Matcher model's inference.
 */
@Fluent
public final class TrialMatcherModelConfiguration implements JsonSerializable<TrialMatcherModelConfiguration> {

    /*
     * An indication whether the model should produce verbose output.
     */
    @Generated
    private Boolean verbose;

    /*
     * An indication whether the model's output should include evidence for the inferences.
     */
    @Generated
    private Boolean includeEvidence;

    /*
     * The clinical trials that the patient(s) should be matched to. <br />The trial
     * selection can be given as a list of custom clinical trials and/or a list of
     * filters to known clinical trial registries. In case both are given, the
     * resulting trial set is a union of the two sets.
     */
    @Generated
    private final ClinicalTrials clinicalTrials;

    /**
     * Creates an instance of TrialMatcherModelConfiguration class.
     *
     * @param clinicalTrials the clinicalTrials value to set.
     */
    @Generated
    public TrialMatcherModelConfiguration(ClinicalTrials clinicalTrials) {
        this.clinicalTrials = clinicalTrials;
    }

    /**
     * Get the verbose property: An indication whether the model should produce verbose output.
     *
     * @return the verbose value.
     */
    @Generated
    public Boolean isVerbose() {
        return this.verbose;
    }

    /**
     * Set the verbose property: An indication whether the model should produce verbose output.
     *
     * @param verbose the verbose value to set.
     * @return the TrialMatcherModelConfiguration object itself.
     */
    @Generated
    public TrialMatcherModelConfiguration setVerbose(Boolean verbose) {
        this.verbose = verbose;
        return this;
    }

    /**
     * Get the includeEvidence property: An indication whether the model's output should include evidence for the
     * inferences.
     *
     * @return the includeEvidence value.
     */
    @Generated
    public Boolean isIncludeEvidence() {
        return this.includeEvidence;
    }

    /**
     * Set the includeEvidence property: An indication whether the model's output should include evidence for the
     * inferences.
     *
     * @param includeEvidence the includeEvidence value to set.
     * @return the TrialMatcherModelConfiguration object itself.
     */
    @Generated
    public TrialMatcherModelConfiguration setIncludeEvidence(Boolean includeEvidence) {
        this.includeEvidence = includeEvidence;
        return this;
    }

    /**
     * Get the clinicalTrials property: The clinical trials that the patient(s) should be matched to. &lt;br /&gt;The
     * trial
     * selection can be given as a list of custom clinical trials and/or a list of
     * filters to known clinical trial registries. In case both are given, the
     * resulting trial set is a union of the two sets.
     *
     * @return the clinicalTrials value.
     */
    @Generated
    public ClinicalTrials getClinicalTrials() {
        return this.clinicalTrials;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("clinicalTrials", this.clinicalTrials);
        jsonWriter.writeBooleanField("verbose", this.verbose);
        jsonWriter.writeBooleanField("includeEvidence", this.includeEvidence);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrialMatcherModelConfiguration from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrialMatcherModelConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrialMatcherModelConfiguration.
     */
    @Generated
    public static TrialMatcherModelConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClinicalTrials clinicalTrials = null;
            Boolean verbose = null;
            Boolean includeEvidence = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("clinicalTrials".equals(fieldName)) {
                    clinicalTrials = ClinicalTrials.fromJson(reader);
                } else if ("verbose".equals(fieldName)) {
                    verbose = reader.getNullable(JsonReader::getBoolean);
                } else if ("includeEvidence".equals(fieldName)) {
                    includeEvidence = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            TrialMatcherModelConfiguration deserializedTrialMatcherModelConfiguration
                = new TrialMatcherModelConfiguration(clinicalTrials);
            deserializedTrialMatcherModelConfiguration.verbose = verbose;
            deserializedTrialMatcherModelConfiguration.includeEvidence = includeEvidence;
            return deserializedTrialMatcherModelConfiguration;
        });
    }
}
