// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Trial data which is of interest to the potential participant.
 */
@Fluent
public final class ClinicalTrialMetadata implements JsonSerializable<ClinicalTrialMetadata> {

    /*
     * Phases which are relevant for the clinical trial.
     * Each clinical trial can be in a certain phase or in multiple phases.
     */
    @Generated
    private List<ClinicalTrialPhase> phases;

    /*
     * Possible study types of a clinical trial.
     */
    @Generated
    private ClinicalTrialStudyType studyType;

    /*
     * Possible recruitment status of a clinical trial.
     */
    @Generated
    private ClinicalTrialRecruitmentStatus recruitmentStatus;

    /*
     * Medical conditions and their synonyms which are relevant for the clinical trial, given as strings.
     */
    @Generated
    private final List<String> conditions;

    /*
     * Sponsors/collaborators involved with the trial.
     */
    @Generated
    private List<String> sponsors;

    /*
     * Contact details of the trial administrators, for patients that want to participate in the trial.
     */
    @Generated
    private List<ContactDetails> contacts;

    /*
     * Research facilities where the clinical trial is conducted.
     */
    @Generated
    private List<ClinicalTrialResearchFacility> facilities;

    /**
     * Creates an instance of ClinicalTrialMetadata class.
     *
     * @param conditions the conditions value to set.
     */
    @Generated
    public ClinicalTrialMetadata(List<String> conditions) {
        this.conditions = conditions;
    }

    /**
     * Get the phases property: Phases which are relevant for the clinical trial.
     * Each clinical trial can be in a certain phase or in multiple phases.
     *
     * @return the phases value.
     */
    @Generated
    public List<ClinicalTrialPhase> getPhases() {
        return this.phases;
    }

    /**
     * Set the phases property: Phases which are relevant for the clinical trial.
     * Each clinical trial can be in a certain phase or in multiple phases.
     *
     * @param phases the phases value to set.
     * @return the ClinicalTrialMetadata object itself.
     */
    @Generated
    public ClinicalTrialMetadata setPhases(List<ClinicalTrialPhase> phases) {
        this.phases = phases;
        return this;
    }

    /**
     * Get the studyType property: Possible study types of a clinical trial.
     *
     * @return the studyType value.
     */
    @Generated
    public ClinicalTrialStudyType getStudyType() {
        return this.studyType;
    }

    /**
     * Set the studyType property: Possible study types of a clinical trial.
     *
     * @param studyType the studyType value to set.
     * @return the ClinicalTrialMetadata object itself.
     */
    @Generated
    public ClinicalTrialMetadata setStudyType(ClinicalTrialStudyType studyType) {
        this.studyType = studyType;
        return this;
    }

    /**
     * Get the recruitmentStatus property: Possible recruitment status of a clinical trial.
     *
     * @return the recruitmentStatus value.
     */
    @Generated
    public ClinicalTrialRecruitmentStatus getRecruitmentStatus() {
        return this.recruitmentStatus;
    }

    /**
     * Set the recruitmentStatus property: Possible recruitment status of a clinical trial.
     *
     * @param recruitmentStatus the recruitmentStatus value to set.
     * @return the ClinicalTrialMetadata object itself.
     */
    @Generated
    public ClinicalTrialMetadata setRecruitmentStatus(ClinicalTrialRecruitmentStatus recruitmentStatus) {
        this.recruitmentStatus = recruitmentStatus;
        return this;
    }

    /**
     * Get the conditions property: Medical conditions and their synonyms which are relevant for the clinical trial,
     * given as strings.
     *
     * @return the conditions value.
     */
    @Generated
    public List<String> getConditions() {
        return this.conditions;
    }

    /**
     * Get the sponsors property: Sponsors/collaborators involved with the trial.
     *
     * @return the sponsors value.
     */
    @Generated
    public List<String> getSponsors() {
        return this.sponsors;
    }

    /**
     * Set the sponsors property: Sponsors/collaborators involved with the trial.
     *
     * @param sponsors the sponsors value to set.
     * @return the ClinicalTrialMetadata object itself.
     */
    @Generated
    public ClinicalTrialMetadata setSponsors(List<String> sponsors) {
        this.sponsors = sponsors;
        return this;
    }

    /**
     * Get the contacts property: Contact details of the trial administrators, for patients that want to participate in
     * the trial.
     *
     * @return the contacts value.
     */
    @Generated
    public List<ContactDetails> getContacts() {
        return this.contacts;
    }

    /**
     * Set the contacts property: Contact details of the trial administrators, for patients that want to participate in
     * the trial.
     *
     * @param contacts the contacts value to set.
     * @return the ClinicalTrialMetadata object itself.
     */
    @Generated
    public ClinicalTrialMetadata setContacts(List<ContactDetails> contacts) {
        this.contacts = contacts;
        return this;
    }

    /**
     * Get the facilities property: Research facilities where the clinical trial is conducted.
     *
     * @return the facilities value.
     */
    @Generated
    public List<ClinicalTrialResearchFacility> getFacilities() {
        return this.facilities;
    }

    /**
     * Set the facilities property: Research facilities where the clinical trial is conducted.
     *
     * @param facilities the facilities value to set.
     * @return the ClinicalTrialMetadata object itself.
     */
    @Generated
    public ClinicalTrialMetadata setFacilities(List<ClinicalTrialResearchFacility> facilities) {
        this.facilities = facilities;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("conditions", this.conditions, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("phases", this.phases,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("studyType", this.studyType == null ? null : this.studyType.toString());
        jsonWriter.writeStringField("recruitmentStatus",
            this.recruitmentStatus == null ? null : this.recruitmentStatus.toString());
        jsonWriter.writeArrayField("sponsors", this.sponsors, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("contacts", this.contacts, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("facilities", this.facilities, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClinicalTrialMetadata from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClinicalTrialMetadata if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ClinicalTrialMetadata.
     */
    @Generated
    public static ClinicalTrialMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> conditions = null;
            List<ClinicalTrialPhase> phases = null;
            ClinicalTrialStudyType studyType = null;
            ClinicalTrialRecruitmentStatus recruitmentStatus = null;
            List<String> sponsors = null;
            List<ContactDetails> contacts = null;
            List<ClinicalTrialResearchFacility> facilities = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("conditions".equals(fieldName)) {
                    conditions = reader.readArray(reader1 -> reader1.getString());
                } else if ("phases".equals(fieldName)) {
                    phases = reader.readArray(reader1 -> ClinicalTrialPhase.fromString(reader1.getString()));
                } else if ("studyType".equals(fieldName)) {
                    studyType = ClinicalTrialStudyType.fromString(reader.getString());
                } else if ("recruitmentStatus".equals(fieldName)) {
                    recruitmentStatus = ClinicalTrialRecruitmentStatus.fromString(reader.getString());
                } else if ("sponsors".equals(fieldName)) {
                    sponsors = reader.readArray(reader1 -> reader1.getString());
                } else if ("contacts".equals(fieldName)) {
                    contacts = reader.readArray(reader1 -> ContactDetails.fromJson(reader1));
                } else if ("facilities".equals(fieldName)) {
                    facilities = reader.readArray(reader1 -> ClinicalTrialResearchFacility.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            ClinicalTrialMetadata deserializedClinicalTrialMetadata = new ClinicalTrialMetadata(conditions);
            deserializedClinicalTrialMetadata.phases = phases;
            deserializedClinicalTrialMetadata.studyType = studyType;
            deserializedClinicalTrialMetadata.recruitmentStatus = recruitmentStatus;
            deserializedClinicalTrialMetadata.sponsors = sponsors;
            deserializedClinicalTrialMetadata.contacts = contacts;
            deserializedClinicalTrialMetadata.facilities = facilities;
            return deserializedClinicalTrialMetadata;
        });
    }
}
