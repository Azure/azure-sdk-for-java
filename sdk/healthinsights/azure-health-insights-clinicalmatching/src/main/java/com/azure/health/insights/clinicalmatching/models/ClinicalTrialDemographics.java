// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Demographic criteria for a clinical trial.
 */
@Fluent
public final class ClinicalTrialDemographics implements JsonSerializable<ClinicalTrialDemographics> {

    /*
     * Indication of the sex of people who may participate in the clinical trial.
     */
    @Generated
    private ClinicalTrialAcceptedSex acceptedSex;

    /*
     * A definition of the range of ages accepted by a clinical trial. Contains a minimum age and/or a maximum age.
     */
    @Generated
    private AcceptedAgeRange acceptedAgeRange;

    /**
     * Creates an instance of ClinicalTrialDemographics class.
     */
    @Generated
    public ClinicalTrialDemographics() {
    }

    /**
     * Get the acceptedSex property: Indication of the sex of people who may participate in the clinical trial.
     *
     * @return the acceptedSex value.
     */
    @Generated
    public ClinicalTrialAcceptedSex getAcceptedSex() {
        return this.acceptedSex;
    }

    /**
     * Set the acceptedSex property: Indication of the sex of people who may participate in the clinical trial.
     *
     * @param acceptedSex the acceptedSex value to set.
     * @return the ClinicalTrialDemographics object itself.
     */
    @Generated
    public ClinicalTrialDemographics setAcceptedSex(ClinicalTrialAcceptedSex acceptedSex) {
        this.acceptedSex = acceptedSex;
        return this;
    }

    /**
     * Get the acceptedAgeRange property: A definition of the range of ages accepted by a clinical trial. Contains a
     * minimum age and/or a maximum age.
     *
     * @return the acceptedAgeRange value.
     */
    @Generated
    public AcceptedAgeRange getAcceptedAgeRange() {
        return this.acceptedAgeRange;
    }

    /**
     * Set the acceptedAgeRange property: A definition of the range of ages accepted by a clinical trial. Contains a
     * minimum age and/or a maximum age.
     *
     * @param acceptedAgeRange the acceptedAgeRange value to set.
     * @return the ClinicalTrialDemographics object itself.
     */
    @Generated
    public ClinicalTrialDemographics setAcceptedAgeRange(AcceptedAgeRange acceptedAgeRange) {
        this.acceptedAgeRange = acceptedAgeRange;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("acceptedSex", this.acceptedSex == null ? null : this.acceptedSex.toString());
        jsonWriter.writeJsonField("acceptedAgeRange", this.acceptedAgeRange);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClinicalTrialDemographics from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClinicalTrialDemographics if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClinicalTrialDemographics.
     */
    @Generated
    public static ClinicalTrialDemographics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClinicalTrialDemographics deserializedClinicalTrialDemographics = new ClinicalTrialDemographics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("acceptedSex".equals(fieldName)) {
                    deserializedClinicalTrialDemographics.acceptedSex
                        = ClinicalTrialAcceptedSex.fromString(reader.getString());
                } else if ("acceptedAgeRange".equals(fieldName)) {
                    deserializedClinicalTrialDemographics.acceptedAgeRange = AcceptedAgeRange.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedClinicalTrialDemographics;
        });
    }
}
