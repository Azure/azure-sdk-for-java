// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A definition of the range of ages accepted by a clinical trial. Contains a minimum age and/or a maximum age.
 */
@Fluent
public final class AcceptedAgeRange implements JsonSerializable<AcceptedAgeRange> {

    /*
     * A person's age, given as a number (value) and a unit (e.g. years, months)
     */
    @Generated
    private AcceptedAge minimumAge;

    /*
     * A person's age, given as a number (value) and a unit (e.g. years, months)
     */
    @Generated
    private AcceptedAge maximumAge;

    /**
     * Creates an instance of AcceptedAgeRange class.
     */
    @Generated
    public AcceptedAgeRange() {
    }

    /**
     * Get the minimumAge property: A person's age, given as a number (value) and a unit (e.g. years, months).
     *
     * @return the minimumAge value.
     */
    @Generated
    public AcceptedAge getMinimumAge() {
        return this.minimumAge;
    }

    /**
     * Set the minimumAge property: A person's age, given as a number (value) and a unit (e.g. years, months).
     *
     * @param minimumAge the minimumAge value to set.
     * @return the AcceptedAgeRange object itself.
     */
    @Generated
    public AcceptedAgeRange setMinimumAge(AcceptedAge minimumAge) {
        this.minimumAge = minimumAge;
        return this;
    }

    /**
     * Get the maximumAge property: A person's age, given as a number (value) and a unit (e.g. years, months).
     *
     * @return the maximumAge value.
     */
    @Generated
    public AcceptedAge getMaximumAge() {
        return this.maximumAge;
    }

    /**
     * Set the maximumAge property: A person's age, given as a number (value) and a unit (e.g. years, months).
     *
     * @param maximumAge the maximumAge value to set.
     * @return the AcceptedAgeRange object itself.
     */
    @Generated
    public AcceptedAgeRange setMaximumAge(AcceptedAge maximumAge) {
        this.maximumAge = maximumAge;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("minimumAge", this.minimumAge);
        jsonWriter.writeJsonField("maximumAge", this.maximumAge);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcceptedAgeRange from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcceptedAgeRange if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AcceptedAgeRange.
     */
    @Generated
    public static AcceptedAgeRange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcceptedAgeRange deserializedAcceptedAgeRange = new AcceptedAgeRange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("minimumAge".equals(fieldName)) {
                    deserializedAcceptedAgeRange.minimumAge = AcceptedAge.fromJson(reader);
                } else if ("maximumAge".equals(fieldName)) {
                    deserializedAcceptedAgeRange.maximumAge = AcceptedAge.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedAcceptedAgeRange;
        });
    }
}
