// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A patient record, including their clinical information and data.
 */
@Fluent
public final class PatientRecord implements JsonSerializable<PatientRecord> {

    /*
     * A given identifier for the patient. Has to be unique across all patients in a single request.
     */
    @Generated
    private final String id;

    /*
     * Patient structured information, including demographics and known structured clinical information.
     */
    @Generated
    private PatientInfo info;

    /*
     * Patient unstructured clinical data, given as documents.
     */
    @Generated
    private List<PatientDocument> data;

    /**
     * Creates an instance of PatientRecord class.
     *
     * @param id the id value to set.
     */
    @Generated
    public PatientRecord(String id) {
        this.id = id;
    }

    /**
     * Get the id property: A given identifier for the patient. Has to be unique across all patients in a single
     * request.
     *
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the info property: Patient structured information, including demographics and known structured clinical
     * information.
     *
     * @return the info value.
     */
    @Generated
    public PatientInfo getInfo() {
        return this.info;
    }

    /**
     * Set the info property: Patient structured information, including demographics and known structured clinical
     * information.
     *
     * @param info the info value to set.
     * @return the PatientRecord object itself.
     */
    @Generated
    public PatientRecord setInfo(PatientInfo info) {
        this.info = info;
        return this;
    }

    /**
     * Get the data property: Patient unstructured clinical data, given as documents.
     *
     * @return the data value.
     */
    @Generated
    public List<PatientDocument> getData() {
        return this.data;
    }

    /**
     * Set the data property: Patient unstructured clinical data, given as documents.
     *
     * @param data the data value to set.
     * @return the PatientRecord object itself.
     */
    @Generated
    public PatientRecord setData(List<PatientDocument> data) {
        this.data = data;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeJsonField("info", this.info);
        jsonWriter.writeArrayField("data", this.data, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PatientRecord from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of PatientRecord if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PatientRecord.
     */
    @Generated
    public static PatientRecord fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            PatientInfo info = null;
            List<PatientDocument> data = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("info".equals(fieldName)) {
                    info = PatientInfo.fromJson(reader);
                } else if ("data".equals(fieldName)) {
                    data = reader.readArray(reader1 -> PatientDocument.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            PatientRecord deserializedPatientRecord = new PatientRecord(id);
            deserializedPatientRecord.info = info;
            deserializedPatientRecord.data = data;
            return deserializedPatientRecord;
        });
    }
}
