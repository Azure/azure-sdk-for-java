// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The clinical trials that the patient(s) should be matched to.
 * The trial selection can be given as a list of custom clinical trials and/or a list of filters to known clinical trial
 * registries.
 * In case both are given, the resulting trial set is a union of the two sets.
 */
@Fluent
public final class ClinicalTrials implements JsonSerializable<ClinicalTrials> {

    /*
     * A list of clinical trials.
     */
    @Generated
    private List<ClinicalTrialDetails> customTrials;

    /*
     * A list of filters, each one creating a selection of trials from a given
     * clinical trial registry.
     */
    @Generated
    private List<ClinicalTrialRegistryFilter> registryFilters;

    /**
     * Creates an instance of ClinicalTrials class.
     */
    @Generated
    public ClinicalTrials() {
    }

    /**
     * Get the customTrials property: A list of clinical trials.
     *
     * @return the customTrials value.
     */
    @Generated
    public List<ClinicalTrialDetails> getCustomTrials() {
        return this.customTrials;
    }

    /**
     * Set the customTrials property: A list of clinical trials.
     *
     * @param customTrials the customTrials value to set.
     * @return the ClinicalTrials object itself.
     */
    @Generated
    public ClinicalTrials setCustomTrials(List<ClinicalTrialDetails> customTrials) {
        this.customTrials = customTrials;
        return this;
    }

    /**
     * Get the registryFilters property: A list of filters, each one creating a selection of trials from a given
     * clinical trial registry.
     *
     * @return the registryFilters value.
     */
    @Generated
    public List<ClinicalTrialRegistryFilter> getRegistryFilters() {
        return this.registryFilters;
    }

    /**
     * Set the registryFilters property: A list of filters, each one creating a selection of trials from a given
     * clinical trial registry.
     *
     * @param registryFilters the registryFilters value to set.
     * @return the ClinicalTrials object itself.
     */
    @Generated
    public ClinicalTrials setRegistryFilters(List<ClinicalTrialRegistryFilter> registryFilters) {
        this.registryFilters = registryFilters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("customTrials", this.customTrials, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("registryFilters", this.registryFilters,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClinicalTrials from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClinicalTrials if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClinicalTrials.
     */
    @Generated
    public static ClinicalTrials fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClinicalTrials deserializedClinicalTrials = new ClinicalTrials();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("customTrials".equals(fieldName)) {
                    List<ClinicalTrialDetails> customTrials
                        = reader.readArray(reader1 -> ClinicalTrialDetails.fromJson(reader1));
                    deserializedClinicalTrials.customTrials = customTrials;
                } else if ("registryFilters".equals(fieldName)) {
                    List<ClinicalTrialRegistryFilter> registryFilters
                        = reader.readArray(reader1 -> ClinicalTrialRegistryFilter.fromJson(reader1));
                    deserializedClinicalTrials.registryFilters = registryFilters;
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedClinicalTrials;
        });
    }
}
