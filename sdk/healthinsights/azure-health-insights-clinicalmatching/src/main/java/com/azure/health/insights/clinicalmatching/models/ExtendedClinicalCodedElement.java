// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A piece of clinical information, expressed as a code in a clinical coding system, extended by semantic information.
 */
@Immutable
public final class ExtendedClinicalCodedElement implements JsonSerializable<ExtendedClinicalCodedElement> {

    /*
     * The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS.
     */
    @Generated
    private final String system;

    /*
     * The code within the given clinical coding system.
     */
    @Generated
    private final String code;

    /*
     * The name of this coded concept in the coding system.
     */
    @Generated
    private String name;

    /*
     * A value associated with the code within the given clinical coding system.
     */
    @Generated
    private String value;

    /*
     * The [UMLS semantic type](https://www.nlm.nih.gov/research/umls/META3_current_semantic_types.html) associated with
     * the coded concept.
     */
    @Generated
    private String semanticType;

    /*
     * The bio-medical category related to the coded concept, e.g. Diagnosis, Symptom, Medication, Examination.
     */
    @Generated
    private String category;

    /**
     * Creates an instance of ExtendedClinicalCodedElement class.
     *
     * @param system the system value to set.
     * @param code the code value to set.
     */
    @Generated
    private ExtendedClinicalCodedElement(String system, String code) {
        this.system = system;
        this.code = code;
    }

    /**
     * Get the system property: The clinical coding system, e.g. ICD-10, SNOMED-CT, UMLS.
     *
     * @return the system value.
     */
    @Generated
    public String getSystem() {
        return this.system;
    }

    /**
     * Get the code property: The code within the given clinical coding system.
     *
     * @return the code value.
     */
    @Generated
    public String getCode() {
        return this.code;
    }

    /**
     * Get the name property: The name of this coded concept in the coding system.
     *
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the value property: A value associated with the code within the given clinical coding system.
     *
     * @return the value value.
     */
    @Generated
    public String getValue() {
        return this.value;
    }

    /**
     * Get the semanticType property: The [UMLS semantic
     * type](https://www.nlm.nih.gov/research/umls/META3_current_semantic_types.html) associated with the coded concept.
     *
     * @return the semanticType value.
     */
    @Generated
    public String getSemanticType() {
        return this.semanticType;
    }

    /**
     * Get the category property: The bio-medical category related to the coded concept, e.g. Diagnosis, Symptom,
     * Medication, Examination.
     *
     * @return the category value.
     */
    @Generated
    public String getCategory() {
        return this.category;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("system", this.system);
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("semanticType", this.semanticType);
        jsonWriter.writeStringField("category", this.category);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtendedClinicalCodedElement from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtendedClinicalCodedElement if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExtendedClinicalCodedElement.
     */
    @Generated
    public static ExtendedClinicalCodedElement fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String system = null;
            String code = null;
            String name = null;
            String value = null;
            String semanticType = null;
            String category = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("system".equals(fieldName)) {
                    system = reader.getString();
                } else if ("code".equals(fieldName)) {
                    code = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("value".equals(fieldName)) {
                    value = reader.getString();
                } else if ("semanticType".equals(fieldName)) {
                    semanticType = reader.getString();
                } else if ("category".equals(fieldName)) {
                    category = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ExtendedClinicalCodedElement deserializedExtendedClinicalCodedElement
                = new ExtendedClinicalCodedElement(system, code);
            deserializedExtendedClinicalCodedElement.name = name;
            deserializedExtendedClinicalCodedElement.value = value;
            deserializedExtendedClinicalCodedElement.semanticType = semanticType;
            deserializedExtendedClinicalCodedElement.category = category;
            return deserializedExtendedClinicalCodedElement;
        });
    }
}
