// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The response for the Trial Matcher request.
 */
@Immutable
public final class TrialMatcherResult implements JsonSerializable<TrialMatcherResult> {

    /*
     * A processing job identifier.
     */
    @Generated
    private String jobId;

    /*
     * The date and time when the processing job was created.
     */
    @Generated
    private OffsetDateTime createdDateTime;

    /*
     * The date and time when the processing job is set to expire.
     */
    @Generated
    private OffsetDateTime expirationDateTime;

    /*
     * The date and time when the processing job was last updated.
     */
    @Generated
    private OffsetDateTime lastUpdateDateTime;

    /*
     * The status of the processing job.
     */
    @Generated
    private JobStatus status;

    /*
     * An array of errors, if any errors occurred during the processing job.
     */
    @Generated
    private List<ResponseError> errors;

    /*
     * The inference results for the Trial Matcher request.
     */
    @Generated
    private TrialMatcherResults results;

    /**
     * Creates an instance of TrialMatcherResult class.
     */
    @Generated
    private TrialMatcherResult() {
    }

    /**
     * Get the jobId property: A processing job identifier.
     *
     * @return the jobId value.
     */
    @Generated
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Get the createdDateTime property: The date and time when the processing job was created.
     *
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the expirationDateTime property: The date and time when the processing job is set to expire.
     *
     * @return the expirationDateTime value.
     */
    @Generated
    public OffsetDateTime getExpirationDateTime() {
        return this.expirationDateTime;
    }

    /**
     * Get the lastUpdateDateTime property: The date and time when the processing job was last updated.
     *
     * @return the lastUpdateDateTime value.
     */
    @Generated
    public OffsetDateTime getLastUpdateDateTime() {
        return this.lastUpdateDateTime;
    }

    /**
     * Get the status property: The status of the processing job.
     *
     * @return the status value.
     */
    @Generated
    public JobStatus getStatus() {
        return this.status;
    }

    /**
     * Get the errors property: An array of errors, if any errors occurred during the processing job.
     *
     * @return the errors value.
     */
    @Generated
    public List<ResponseError> getErrors() {
        return this.errors;
    }

    /**
     * Get the results property: The inference results for the Trial Matcher request.
     *
     * @return the results value.
     */
    @Generated
    public TrialMatcherResults getResults() {
        return this.results;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TrialMatcherResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of TrialMatcherResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TrialMatcherResult.
     */
    @Generated
    public static TrialMatcherResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TrialMatcherResult deserializedTrialMatcherResult = new TrialMatcherResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("jobId".equals(fieldName)) {
                    deserializedTrialMatcherResult.jobId = reader.getString();
                } else if ("createdDateTime".equals(fieldName)) {
                    deserializedTrialMatcherResult.createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expirationDateTime".equals(fieldName)) {
                    deserializedTrialMatcherResult.expirationDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastUpdateDateTime".equals(fieldName)) {
                    deserializedTrialMatcherResult.lastUpdateDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedTrialMatcherResult.status = JobStatus.fromString(reader.getString());
                } else if ("errors".equals(fieldName)) {
                    List<ResponseError> errors = reader.readArray(reader1 -> ResponseError.fromJson(reader1));
                    deserializedTrialMatcherResult.errors = errors;
                } else if ("results".equals(fieldName)) {
                    deserializedTrialMatcherResult.results = TrialMatcherResults.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedTrialMatcherResult;
        });
    }
}
