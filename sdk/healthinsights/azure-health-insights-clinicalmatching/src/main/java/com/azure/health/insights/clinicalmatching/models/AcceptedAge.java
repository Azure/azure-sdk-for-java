// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.health.insights.clinicalmatching.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A person's age, given as a number (value) and a unit (e.g. years, months).
 */
@Immutable
public final class AcceptedAge implements JsonSerializable<AcceptedAge> {

    /*
     * Possible units for a person's age.
     */
    @Generated
    private final AgeUnit unit;

    /*
     * The number of years/months/days that represents the person's age.
     */
    @Generated
    private final double value;

    /**
     * Creates an instance of AcceptedAge class.
     *
     * @param unit the unit value to set.
     * @param value the value value to set.
     */
    @Generated
    public AcceptedAge(AgeUnit unit, double value) {
        this.unit = unit;
        this.value = value;
    }

    /**
     * Get the unit property: Possible units for a person's age.
     *
     * @return the unit value.
     */
    @Generated
    public AgeUnit getUnit() {
        return this.unit;
    }

    /**
     * Get the value property: The number of years/months/days that represents the person's age.
     *
     * @return the value value.
     */
    @Generated
    public double getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        jsonWriter.writeDoubleField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcceptedAge from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcceptedAge if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcceptedAge.
     */
    @Generated
    public static AcceptedAge fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AgeUnit unit = null;
            double value = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("unit".equals(fieldName)) {
                    unit = AgeUnit.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    value = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new AcceptedAge(unit, value);
        });
    }
}
