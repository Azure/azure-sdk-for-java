// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.CustomNamingConvention;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.DecommissionedManagementGroupProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.FirewallCreationOptions;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZConfiguration;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZConfigurationProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZManagementGroupProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ManagedIdentityProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ManagedIdentityResourceType;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ManagementGroupProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.PlatformManagementGroupProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.PolicyInitiativeAssignmentProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ResourceCreationOptions;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ResourceType;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.SandboxManagementGroupProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.Tags;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for LandingZoneConfigurationOperations Update.
 */
public final class LandingZoneConfigurationOperationsUpdateS {
    /*
     * x-ms-original-file: 2025-02-27-preview/LandingZoneConfigurationOperations_Update.json
     */
    /**
     * Sample code: LandingZoneConfigurationOperations_Update.
     * 
     * @param manager Entry point to RegulatedEnvironmentManagementManager.
     */
    public static void landingZoneConfigurationOperationsUpdate(
        com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager manager) {
        LZConfiguration resource = manager.landingZoneConfigurationOperations()
            .getWithResponse("ExampleResourceGroup", "ExampleLZA", "ExampleLZC", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withProperties(new LZConfigurationProperties()
                .withDdosProtectionCreationOption(ResourceCreationOptions.YES)
                .withLogAnalyticsWorkspaceCreationOption(ResourceCreationOptions.NO)
                .withTags(Arrays.asList(new Tags().withName("tag1").withValue("do"),
                    new Tags().withName("tag2").withValue("do")))
                .withFirewallCreationOption(FirewallCreationOptions.STANDARD)
                .withFirewallSubnetCidrBlock("10.20.255.0/24")
                .withGatewaySubnetCidrBlock("10.20.255.0/24")
                .withLogRetentionInDays(540L)
                .withHubNetworkCidrBlock("10.20.255.0/24")
                .withAzureBastionCreationOption(ResourceCreationOptions.YES)
                .withAzureBastionSubnetCidrBlock("10.20.255.0/24")
                .withLandingZonesMgChildren(Arrays
                    .asList(new LZManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList())
                        .withName("Corp")))
                .withTopLevelMgMetadata(new ManagementGroupProperties().withPolicyInitiativesAssignmentProperties(
                    Arrays.asList(new PolicyInitiativeAssignmentProperties().withPolicyInitiativeId(
                        "/providers/Microsoft.Authorization/policySetDefinitions/0a2ebd47-3fb9-4735-a006-b7f31ddadd9f")
                        .withAssignmentParameters(
                            mapOf("Effect", BinaryData.fromBytes("Audit".getBytes(StandardCharsets.UTF_8)))))))
                .withLandingZonesMgMetadata(
                    new ManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList()))
                .withPlatformMgMetadata(
                    new ManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList()))
                .withPlatformManagementMgMetadata(
                    new ManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList()))
                .withPlatformConnectivityMgMetadata(
                    new ManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList()))
                .withPlatformIdentityMgMetadata(
                    new ManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList()))
                .withDecommissionedMgMetadata(new DecommissionedManagementGroupProperties()
                    .withPolicyInitiativesAssignmentProperties(Arrays.asList())
                    .withCreate(false))
                .withSandboxMgMetadata(
                    new SandboxManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList())
                        .withCreate(true))
                .withManagedIdentity(
                    new ManagedIdentityProperties().withType(ManagedIdentityResourceType.SYSTEM_ASSIGNED))
                .withPlatformMgChildren(Arrays.asList(
                    new PlatformManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList())
                        .withName("childmg1"),
                    new PlatformManagementGroupProperties().withPolicyInitiativesAssignmentProperties(Arrays.asList())
                        .withName("childmg2")))
                .withNamingConventionFormula("{ResourceTypeAbbreviation}")
                .withCustomNamingConvention(
                    Arrays.asList(new CustomNamingConvention().withResourceType(ResourceType.AZURE_FIREWALLS)
                        .withFormula("{DeploymentSuffix}"))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
