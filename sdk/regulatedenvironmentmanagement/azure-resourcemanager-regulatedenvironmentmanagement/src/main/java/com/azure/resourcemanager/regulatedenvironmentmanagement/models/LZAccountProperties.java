// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of landing zone account resource type.
 */
@Fluent
public final class LZAccountProperties implements JsonSerializable<LZAccountProperties> {
    /*
     * The state that reflects the current stage in the creation, updating, or deletion process of the landing zone
     * account.
     */
    private ProvisioningState provisioningState;

    /*
     * The storage account that will host the generated infrastructure as code (IaC) for a landing zone deployment.
     */
    private String storageAccount;

    /**
     * Creates an instance of LZAccountProperties class.
     */
    public LZAccountProperties() {
    }

    /**
     * Get the provisioningState property: The state that reflects the current stage in the creation, updating, or
     * deletion process of the landing zone account.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the storageAccount property: The storage account that will host the generated infrastructure as code (IaC)
     * for a landing zone deployment.
     * 
     * @return the storageAccount value.
     */
    public String storageAccount() {
        return this.storageAccount;
    }

    /**
     * Set the storageAccount property: The storage account that will host the generated infrastructure as code (IaC)
     * for a landing zone deployment.
     * 
     * @param storageAccount the storageAccount value to set.
     * @return the LZAccountProperties object itself.
     */
    public LZAccountProperties withStorageAccount(String storageAccount) {
        this.storageAccount = storageAccount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageAccount() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageAccount in model LZAccountProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LZAccountProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccount", this.storageAccount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LZAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LZAccountProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LZAccountProperties.
     */
    public static LZAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LZAccountProperties deserializedLZAccountProperties = new LZAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccount".equals(fieldName)) {
                    deserializedLZAccountProperties.storageAccount = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLZAccountProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLZAccountProperties;
        });
    }
}
