// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.AuthoringStatus;
import java.io.IOException;

/**
 * The response for authoring status update request.
 */
@Immutable
public final class UpdateAuthoringStatusResultInner implements JsonSerializable<UpdateAuthoringStatusResultInner> {
    /*
     * The name of the landing zone configuration resource.
     */
    private String landingZoneConfigurationName;

    /*
     * The authoring status value to be updated.
     */
    private AuthoringStatus authoringStatus;

    /**
     * Creates an instance of UpdateAuthoringStatusResultInner class.
     */
    private UpdateAuthoringStatusResultInner() {
    }

    /**
     * Get the landingZoneConfigurationName property: The name of the landing zone configuration resource.
     * 
     * @return the landingZoneConfigurationName value.
     */
    public String landingZoneConfigurationName() {
        return this.landingZoneConfigurationName;
    }

    /**
     * Get the authoringStatus property: The authoring status value to be updated.
     * 
     * @return the authoringStatus value.
     */
    public AuthoringStatus authoringStatus() {
        return this.authoringStatus;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (landingZoneConfigurationName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property landingZoneConfigurationName in model UpdateAuthoringStatusResultInner"));
        }
        if (authoringStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authoringStatus in model UpdateAuthoringStatusResultInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateAuthoringStatusResultInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("landingZoneConfigurationName", this.landingZoneConfigurationName);
        jsonWriter.writeStringField("authoringStatus",
            this.authoringStatus == null ? null : this.authoringStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateAuthoringStatusResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateAuthoringStatusResultInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateAuthoringStatusResultInner.
     */
    public static UpdateAuthoringStatusResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateAuthoringStatusResultInner deserializedUpdateAuthoringStatusResultInner
                = new UpdateAuthoringStatusResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("landingZoneConfigurationName".equals(fieldName)) {
                    deserializedUpdateAuthoringStatusResultInner.landingZoneConfigurationName = reader.getString();
                } else if ("authoringStatus".equals(fieldName)) {
                    deserializedUpdateAuthoringStatusResultInner.authoringStatus
                        = AuthoringStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateAuthoringStatusResultInner;
        });
    }
}
