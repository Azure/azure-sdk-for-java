// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The properties of assigned policy initiatives.
 */
@Fluent
public final class PolicyInitiativeAssignmentProperties
    implements JsonSerializable<PolicyInitiativeAssignmentProperties> {
    /*
     * The fully qualified id of the policy initiative.
     */
    private String policyInitiativeId;

    /*
     * The parameters of the assigned policy initiative.
     */
    private Map<String, BinaryData> assignmentParameters;

    /**
     * Creates an instance of PolicyInitiativeAssignmentProperties class.
     */
    public PolicyInitiativeAssignmentProperties() {
    }

    /**
     * Get the policyInitiativeId property: The fully qualified id of the policy initiative.
     * 
     * @return the policyInitiativeId value.
     */
    public String policyInitiativeId() {
        return this.policyInitiativeId;
    }

    /**
     * Set the policyInitiativeId property: The fully qualified id of the policy initiative.
     * 
     * @param policyInitiativeId the policyInitiativeId value to set.
     * @return the PolicyInitiativeAssignmentProperties object itself.
     */
    public PolicyInitiativeAssignmentProperties withPolicyInitiativeId(String policyInitiativeId) {
        this.policyInitiativeId = policyInitiativeId;
        return this;
    }

    /**
     * Get the assignmentParameters property: The parameters of the assigned policy initiative.
     * 
     * @return the assignmentParameters value.
     */
    public Map<String, BinaryData> assignmentParameters() {
        return this.assignmentParameters;
    }

    /**
     * Set the assignmentParameters property: The parameters of the assigned policy initiative.
     * 
     * @param assignmentParameters the assignmentParameters value to set.
     * @return the PolicyInitiativeAssignmentProperties object itself.
     */
    public PolicyInitiativeAssignmentProperties withAssignmentParameters(Map<String, BinaryData> assignmentParameters) {
        this.assignmentParameters = assignmentParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyInitiativeId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property policyInitiativeId in model PolicyInitiativeAssignmentProperties"));
        }
        if (assignmentParameters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property assignmentParameters in model PolicyInitiativeAssignmentProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PolicyInitiativeAssignmentProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("policyInitiativeId", this.policyInitiativeId);
        jsonWriter.writeMapField("assignmentParameters", this.assignmentParameters,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PolicyInitiativeAssignmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PolicyInitiativeAssignmentProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PolicyInitiativeAssignmentProperties.
     */
    public static PolicyInitiativeAssignmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PolicyInitiativeAssignmentProperties deserializedPolicyInitiativeAssignmentProperties
                = new PolicyInitiativeAssignmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyInitiativeId".equals(fieldName)) {
                    deserializedPolicyInitiativeAssignmentProperties.policyInitiativeId = reader.getString();
                } else if ("assignmentParameters".equals(fieldName)) {
                    Map<String, BinaryData> assignmentParameters = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedPolicyInitiativeAssignmentProperties.assignmentParameters = assignmentParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPolicyInitiativeAssignmentProperties;
        });
    }
}
