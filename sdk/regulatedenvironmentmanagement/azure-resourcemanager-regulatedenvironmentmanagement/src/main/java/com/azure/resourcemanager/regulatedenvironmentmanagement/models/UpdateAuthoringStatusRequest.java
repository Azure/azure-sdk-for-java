// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request to update the authoring status of a configuration.
 */
@Fluent
public final class UpdateAuthoringStatusRequest implements JsonSerializable<UpdateAuthoringStatusRequest> {
    /*
     * The authoring status value to be updated. Possible values include: 'Authoring', 'ReadyForUse' and 'Disabled'.
     */
    private AuthoringStatus authoringStatus;

    /**
     * Creates an instance of UpdateAuthoringStatusRequest class.
     */
    public UpdateAuthoringStatusRequest() {
    }

    /**
     * Get the authoringStatus property: The authoring status value to be updated. Possible values include: 'Authoring',
     * 'ReadyForUse' and 'Disabled'.
     * 
     * @return the authoringStatus value.
     */
    public AuthoringStatus authoringStatus() {
        return this.authoringStatus;
    }

    /**
     * Set the authoringStatus property: The authoring status value to be updated. Possible values include: 'Authoring',
     * 'ReadyForUse' and 'Disabled'.
     * 
     * @param authoringStatus the authoringStatus value to set.
     * @return the UpdateAuthoringStatusRequest object itself.
     */
    public UpdateAuthoringStatusRequest withAuthoringStatus(AuthoringStatus authoringStatus) {
        this.authoringStatus = authoringStatus;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authoringStatus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authoringStatus in model UpdateAuthoringStatusRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UpdateAuthoringStatusRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authoringStatus",
            this.authoringStatus == null ? null : this.authoringStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateAuthoringStatusRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateAuthoringStatusRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UpdateAuthoringStatusRequest.
     */
    public static UpdateAuthoringStatusRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateAuthoringStatusRequest deserializedUpdateAuthoringStatusRequest = new UpdateAuthoringStatusRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authoringStatus".equals(fieldName)) {
                    deserializedUpdateAuthoringStatusRequest.authoringStatus
                        = AuthoringStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateAuthoringStatusRequest;
        });
    }
}
