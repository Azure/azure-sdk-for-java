// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.LandingZoneRegistrationOperationsClient;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.LandingZoneRegistrationResourceInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.implementation.models.LandingZoneRegistrationResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LandingZoneRegistrationOperationsClient.
 */
public final class LandingZoneRegistrationOperationsClientImpl implements LandingZoneRegistrationOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LandingZoneRegistrationOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final SovereignClientImpl client;

    /**
     * Initializes an instance of LandingZoneRegistrationOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LandingZoneRegistrationOperationsClientImpl(SovereignClientImpl client) {
        this.service = RestProxy.create(LandingZoneRegistrationOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SovereignClientLandingZoneRegistrationOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SovereignClientLandi")
    public interface LandingZoneRegistrationOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneRegistrationResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneRegistrationName") String landingZoneRegistrationName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneRegistrationName") String landingZoneRegistrationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") LandingZoneRegistrationResourceInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneRegistrationName") String landingZoneRegistrationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") LandingZoneRegistrationResourceInner properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations/{landingZoneRegistrationName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneRegistrationName") String landingZoneRegistrationName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneRegistrationResourceListResult>> listByResourceGroup(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneRegistrations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneRegistrationResourceListResult>> listBySubscription(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("landingZoneAccountName") String landingZoneAccountName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneRegistrationResourceListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneRegistrationResourceListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone registration along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LandingZoneRegistrationResourceInner>> getWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneRegistrationName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone registration along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LandingZoneRegistrationResourceInner>> getWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, accept, context);
    }

    /**
     * Get a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone registration on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneRegistrationResourceInner> getAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName) {
        return getWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone registration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LandingZoneRegistrationResourceInner> getWithResponse(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName, Context context) {
        return getWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, context)
            .block();
    }

    /**
     * Get a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone registration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneRegistrationResourceInner get(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName) {
        return getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, Context.NONE)
            .getValue();
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneRegistrationName,
                contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, contentType, accept, resource,
            context);
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginCreateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource);
        return this.client.<LandingZoneRegistrationResourceInner, LandingZoneRegistrationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneRegistrationResourceInner.class,
            LandingZoneRegistrationResourceInner.class, this.client.getContext());
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginCreateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneRegistrationName, resource, context);
        return this.client.<LandingZoneRegistrationResourceInner, LandingZoneRegistrationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneRegistrationResourceInner.class,
            LandingZoneRegistrationResourceInner.class, context);
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginCreate(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner resource) {
        return this.beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource)
            .getSyncPoller();
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginCreate(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner resource, Context context) {
        return this
            .beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource, context)
            .getSyncPoller();
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneRegistrationResourceInner> createAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner resource) {
        return beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneRegistrationResourceInner> createAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner resource, Context context) {
        return beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneRegistrationResourceInner create(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, LandingZoneRegistrationResourceInner resource) {
        return createAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource).block();
    }

    /**
     * Create a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneRegistrationResourceInner create(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, LandingZoneRegistrationResourceInner resource, Context context) {
        return createAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, resource, context)
            .block();
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneRegistrationName,
                contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, contentType, accept, properties,
            context);
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginUpdateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner properties) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneRegistrationName, properties);
        return this.client.<LandingZoneRegistrationResourceInner, LandingZoneRegistrationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneRegistrationResourceInner.class,
            LandingZoneRegistrationResourceInner.class, this.client.getContext());
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginUpdateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneRegistrationName, properties, context);
        return this.client.<LandingZoneRegistrationResourceInner, LandingZoneRegistrationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneRegistrationResourceInner.class,
            LandingZoneRegistrationResourceInner.class, context);
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginUpdate(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner properties) {
        return this.beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, properties)
            .getSyncPoller();
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneRegistrationResourceInner>, LandingZoneRegistrationResourceInner>
        beginUpdate(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName,
            LandingZoneRegistrationResourceInner properties, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, properties,
                context)
            .getSyncPoller();
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneRegistrationResourceInner> updateAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner properties) {
        return beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, properties)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneRegistrationResourceInner> updateAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneRegistrationName,
        LandingZoneRegistrationResourceInner properties, Context context) {
        return beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, properties,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneRegistrationResourceInner update(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, LandingZoneRegistrationResourceInner properties) {
        return updateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, properties).block();
    }

    /**
     * Update a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Landing zone registration resource type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneRegistrationResourceInner update(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, LandingZoneRegistrationResourceInner properties, Context context) {
        return updateAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, properties, context)
            .block();
    }

    /**
     * Delete a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneRegistrationName,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneRegistrationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneRegistrationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, accept, context);
    }

    /**
     * Delete a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName) {
        return deleteWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, context)
            .block();
    }

    /**
     * Delete a landing zone registration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneRegistrationName The name of the landing zone registration resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName) {
        deleteWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, Context.NONE);
    }

    /**
     * List the landing zone registrations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listByResourceGroupSinglePageAsync(String resourceGroupName, String landingZoneAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, accept, context))
            .<PagedResponse<LandingZoneRegistrationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the landing zone registrations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listByResourceGroupSinglePageAsync(String resourceGroupName, String landingZoneAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the landing zone registrations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneRegistrationResourceInner> listByResourceGroupAsync(String resourceGroupName,
        String landingZoneAccountName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, landingZoneAccountName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List the landing zone registrations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneRegistrationResourceInner> listByResourceGroupAsync(String resourceGroupName,
        String landingZoneAccountName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, landingZoneAccountName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the landing zone registrations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneRegistrationResourceInner> listByResourceGroup(String resourceGroupName,
        String landingZoneAccountName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, landingZoneAccountName));
    }

    /**
     * List the landing zone registrations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneRegistrationResourceInner> listByResourceGroup(String resourceGroupName,
        String landingZoneAccountName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, landingZoneAccountName, context));
    }

    /**
     * List the landing zone registrations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listBySubscriptionSinglePageAsync(String landingZoneAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), landingZoneAccountName, accept, context))
            .<PagedResponse<LandingZoneRegistrationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the landing zone registrations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listBySubscriptionSinglePageAsync(String landingZoneAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                landingZoneAccountName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the landing zone registrations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneRegistrationResourceInner> listBySubscriptionAsync(String landingZoneAccountName) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(landingZoneAccountName),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List the landing zone registrations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneRegistrationResourceInner> listBySubscriptionAsync(String landingZoneAccountName,
        Context context) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(landingZoneAccountName, context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the landing zone registrations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneRegistrationResourceInner> listBySubscription(String landingZoneAccountName) {
        return new PagedIterable<>(listBySubscriptionAsync(landingZoneAccountName));
    }

    /**
     * List the landing zone registrations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneRegistrationResourceInner> listBySubscription(String landingZoneAccountName,
        Context context) {
        return new PagedIterable<>(listBySubscriptionAsync(landingZoneAccountName, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<LandingZoneRegistrationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listByResourceGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<LandingZoneRegistrationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneRegistrationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneRegistrationResourceInner>>
        listBySubscriptionNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
