// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The 'Sandbox' management group properties.
 */
@Fluent
public final class SandboxManagementGroupProperties implements JsonSerializable<SandboxManagementGroupProperties> {
    /*
     * Array of policy initiatives applied to the management group.
     */
    private List<PolicyInitiativeAssignmentProperties> policyInitiativesAssignmentProperties;

    /*
     * This parameter determines whether the 'Sandbox' management group will be created. If set to true, the group will
     * be created; if set to false, it will not be created. The default value is false.
     */
    private boolean create;

    /**
     * Creates an instance of SandboxManagementGroupProperties class.
     */
    public SandboxManagementGroupProperties() {
    }

    /**
     * Get the policyInitiativesAssignmentProperties property: Array of policy initiatives applied to the management
     * group.
     * 
     * @return the policyInitiativesAssignmentProperties value.
     */
    public List<PolicyInitiativeAssignmentProperties> policyInitiativesAssignmentProperties() {
        return this.policyInitiativesAssignmentProperties;
    }

    /**
     * Set the policyInitiativesAssignmentProperties property: Array of policy initiatives applied to the management
     * group.
     * 
     * @param policyInitiativesAssignmentProperties the policyInitiativesAssignmentProperties value to set.
     * @return the SandboxManagementGroupProperties object itself.
     */
    public SandboxManagementGroupProperties withPolicyInitiativesAssignmentProperties(
        List<PolicyInitiativeAssignmentProperties> policyInitiativesAssignmentProperties) {
        this.policyInitiativesAssignmentProperties = policyInitiativesAssignmentProperties;
        return this;
    }

    /**
     * Get the create property: This parameter determines whether the 'Sandbox' management group will be created. If set
     * to true, the group will be created; if set to false, it will not be created. The default value is false.
     * 
     * @return the create value.
     */
    public boolean create() {
        return this.create;
    }

    /**
     * Set the create property: This parameter determines whether the 'Sandbox' management group will be created. If set
     * to true, the group will be created; if set to false, it will not be created. The default value is false.
     * 
     * @param create the create value to set.
     * @return the SandboxManagementGroupProperties object itself.
     */
    public SandboxManagementGroupProperties withCreate(boolean create) {
        this.create = create;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (policyInitiativesAssignmentProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property policyInitiativesAssignmentProperties in model SandboxManagementGroupProperties"));
        } else {
            policyInitiativesAssignmentProperties().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SandboxManagementGroupProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("policyInitiativesAssignmentProperties", this.policyInitiativesAssignmentProperties,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("create", this.create);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SandboxManagementGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SandboxManagementGroupProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SandboxManagementGroupProperties.
     */
    public static SandboxManagementGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SandboxManagementGroupProperties deserializedSandboxManagementGroupProperties
                = new SandboxManagementGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("policyInitiativesAssignmentProperties".equals(fieldName)) {
                    List<PolicyInitiativeAssignmentProperties> policyInitiativesAssignmentProperties
                        = reader.readArray(reader1 -> PolicyInitiativeAssignmentProperties.fromJson(reader1));
                    deserializedSandboxManagementGroupProperties.policyInitiativesAssignmentProperties
                        = policyInitiativesAssignmentProperties;
                } else if ("create".equals(fieldName)) {
                    deserializedSandboxManagementGroupProperties.create = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSandboxManagementGroupProperties;
        });
    }
}
