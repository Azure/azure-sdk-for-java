// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The properties of landing zone configuration resource type.
 */
@Fluent
public final class LZConfigurationProperties implements JsonSerializable<LZConfigurationProperties> {
    /*
     * The state that reflects the current stage in the creation, updating, or deletion process of the landing zone
     * configuration.
     */
    private ProvisioningState provisioningState;

    /*
     * The status that indicates the current phase of the configuration process for a deployment.
     */
    private AuthoringStatus authoringStatus;

    /*
     * Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to skip it, or
     * 'Existing' to reuse an existing DDoS protection plan.
     */
    private ResourceCreationOptions ddosProtectionCreationOption;

    /*
     * The resource ID of the DDoS protection plan when reusing an existing one.
     */
    private String existingDdosProtectionId;

    /*
     * Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to skip it, or
     * 'Existing' to reuse an existing log analytics workspace.
     */
    private ResourceCreationOptions logAnalyticsWorkspaceCreationOption;

    /*
     * The resource ID of the log analytics workspace when reusing an existing one.
     */
    private String existingLogAnalyticsWorkspaceId;

    /*
     * Tags are key-value pairs that can be assigned to a resource to organize and manage it more effectively. Example:
     * {'name': 'a tag name', 'value': 'a tag value'}
     */
    private List<Tags> tags;

    /*
     * Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy the Standard SKU,
     * or 'Premium' to deploy the Premium SKU.
     */
    private FirewallCreationOptions firewallCreationOption;

    /*
     * The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using IPv4 CIDR notation.
     */
    private String firewallSubnetCidrBlock;

    /*
     * The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4 CIDR notation.
     */
    private String gatewaySubnetCidrBlock;

    /*
     * Parameter to define the retention period for logs, in days. The minimum duration is 30 days and the maximum is
     * 730 days.
     */
    private long logRetentionInDays;

    /*
     * The Virtual Network address. Specify the address using IPv4 CIDR notation.
     */
    private String hubNetworkCidrBlock;

    /*
     * Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an
     * existing Bastion.
     */
    private ResourceCreationOptions azureBastionCreationOption;

    /*
     * The resource ID of the Bastion when reusing an existing one.
     */
    private String existingAzureBastionId;

    /*
     * The Bastion subnet address. Specify the address using IPv4 CIDR notation.
     */
    private String azureBastionSubnetCidrBlock;

    /*
     * The child management groups of 'Landing Zones' management group and their assigned policies.
     */
    private List<LZManagementGroupProperties> landingZonesMgChildren;

    /*
     * The assigned policies of the parent management group.
     */
    private ManagementGroupProperties topLevelMgMetadata;

    /*
     * The assigned policies of the 'Landing Zones' management group.
     */
    private ManagementGroupProperties landingZonesMgMetadata;

    /*
     * The assigned policies of the 'Platform' management group.
     */
    private ManagementGroupProperties platformMgMetadata;

    /*
     * The assigned policies of the 'Management' management group under 'Platform' management group.
     */
    private ManagementGroupProperties platformManagementMgMetadata;

    /*
     * The assigned policies of the 'Connectivity' management group under 'Platform' management group.
     */
    private ManagementGroupProperties platformConnectivityMgMetadata;

    /*
     * The assigned policies of the 'Identity' management group under 'Platform' management group.
     */
    private ManagementGroupProperties platformIdentityMgMetadata;

    /*
     * The assigned policies of the 'Decommissioned' management group and indicator to create it or not.
     */
    private DecommissionedManagementGroupProperties decommissionedMgMetadata;

    /*
     * The assigned policies of the 'Sandbox' management group and indicator to create it or not.
     */
    private SandboxManagementGroupProperties sandboxMgMetadata;

    /*
     * The managed identity to be assigned to this landing zone configuration.
     */
    private ManagedIdentityProperties managedIdentity;

    /*
     * The names of the 'Platform' child management groups and their assigned policies, excluding the default ones:
     * 'Connectivity', 'Identity', and 'Management'
     */
    private List<PlatformManagementGroupProperties> platformMgChildren;

    /*
     * The default naming convention applied to all resources for this landing zone configuration. Example -
     * {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing
     */
    private String namingConventionFormula;

    /*
     * The custom naming convention applied to specific resource types for this landing zone configuration, which
     * overrides the default naming convention for those resource types. Example - 'customNamingConvention':
     * [{'resourceType': 'azureFirewalls', 'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]
     */
    private List<CustomNamingConvention> customNamingConvention;

    /**
     * Creates an instance of LZConfigurationProperties class.
     */
    public LZConfigurationProperties() {
    }

    /**
     * Get the provisioningState property: The state that reflects the current stage in the creation, updating, or
     * deletion process of the landing zone configuration.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the authoringStatus property: The status that indicates the current phase of the configuration process for a
     * deployment.
     * 
     * @return the authoringStatus value.
     */
    public AuthoringStatus authoringStatus() {
        return this.authoringStatus;
    }

    /**
     * Get the ddosProtectionCreationOption property: Parameter used to deploy a DDoS protection plan: Select 'Yes' to
     * enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
     * 
     * @return the ddosProtectionCreationOption value.
     */
    public ResourceCreationOptions ddosProtectionCreationOption() {
        return this.ddosProtectionCreationOption;
    }

    /**
     * Set the ddosProtectionCreationOption property: Parameter used to deploy a DDoS protection plan: Select 'Yes' to
     * enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection plan.
     * 
     * @param ddosProtectionCreationOption the ddosProtectionCreationOption value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withDdosProtectionCreationOption(ResourceCreationOptions ddosProtectionCreationOption) {
        this.ddosProtectionCreationOption = ddosProtectionCreationOption;
        return this;
    }

    /**
     * Get the existingDdosProtectionId property: The resource ID of the DDoS protection plan when reusing an existing
     * one.
     * 
     * @return the existingDdosProtectionId value.
     */
    public String existingDdosProtectionId() {
        return this.existingDdosProtectionId;
    }

    /**
     * Set the existingDdosProtectionId property: The resource ID of the DDoS protection plan when reusing an existing
     * one.
     * 
     * @param existingDdosProtectionId the existingDdosProtectionId value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withExistingDdosProtectionId(String existingDdosProtectionId) {
        this.existingDdosProtectionId = existingDdosProtectionId;
        return this;
    }

    /**
     * Get the logAnalyticsWorkspaceCreationOption property: Parameter used to deploy a log analytics workspace: Select
     * 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
     * 
     * @return the logAnalyticsWorkspaceCreationOption value.
     */
    public ResourceCreationOptions logAnalyticsWorkspaceCreationOption() {
        return this.logAnalyticsWorkspaceCreationOption;
    }

    /**
     * Set the logAnalyticsWorkspaceCreationOption property: Parameter used to deploy a log analytics workspace: Select
     * 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing log analytics workspace.
     * 
     * @param logAnalyticsWorkspaceCreationOption the logAnalyticsWorkspaceCreationOption value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withLogAnalyticsWorkspaceCreationOption(ResourceCreationOptions logAnalyticsWorkspaceCreationOption) {
        this.logAnalyticsWorkspaceCreationOption = logAnalyticsWorkspaceCreationOption;
        return this;
    }

    /**
     * Get the existingLogAnalyticsWorkspaceId property: The resource ID of the log analytics workspace when reusing an
     * existing one.
     * 
     * @return the existingLogAnalyticsWorkspaceId value.
     */
    public String existingLogAnalyticsWorkspaceId() {
        return this.existingLogAnalyticsWorkspaceId;
    }

    /**
     * Set the existingLogAnalyticsWorkspaceId property: The resource ID of the log analytics workspace when reusing an
     * existing one.
     * 
     * @param existingLogAnalyticsWorkspaceId the existingLogAnalyticsWorkspaceId value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withExistingLogAnalyticsWorkspaceId(String existingLogAnalyticsWorkspaceId) {
        this.existingLogAnalyticsWorkspaceId = existingLogAnalyticsWorkspaceId;
        return this;
    }

    /**
     * Get the tags property: Tags are key-value pairs that can be assigned to a resource to organize and manage it more
     * effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}.
     * 
     * @return the tags value.
     */
    public List<Tags> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Tags are key-value pairs that can be assigned to a resource to organize and manage it more
     * effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}.
     * 
     * @param tags the tags value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withTags(List<Tags> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the firewallCreationOption property: Parameter used for deploying a Firewall: Select 'No' to skip deployment,
     * 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
     * 
     * @return the firewallCreationOption value.
     */
    public FirewallCreationOptions firewallCreationOption() {
        return this.firewallCreationOption;
    }

    /**
     * Set the firewallCreationOption property: Parameter used for deploying a Firewall: Select 'No' to skip deployment,
     * 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
     * 
     * @param firewallCreationOption the firewallCreationOption value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withFirewallCreationOption(FirewallCreationOptions firewallCreationOption) {
        this.firewallCreationOption = firewallCreationOption;
        return this;
    }

    /**
     * Get the firewallSubnetCidrBlock property: The Firewall subnet address used for deploying a firewall. Specify the
     * Firewall subnet using IPv4 CIDR notation.
     * 
     * @return the firewallSubnetCidrBlock value.
     */
    public String firewallSubnetCidrBlock() {
        return this.firewallSubnetCidrBlock;
    }

    /**
     * Set the firewallSubnetCidrBlock property: The Firewall subnet address used for deploying a firewall. Specify the
     * Firewall subnet using IPv4 CIDR notation.
     * 
     * @param firewallSubnetCidrBlock the firewallSubnetCidrBlock value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withFirewallSubnetCidrBlock(String firewallSubnetCidrBlock) {
        this.firewallSubnetCidrBlock = firewallSubnetCidrBlock;
        return this;
    }

    /**
     * Get the gatewaySubnetCidrBlock property: The gateway subnet address used for deploying a virtual network. Specify
     * the subnet using IPv4 CIDR notation.
     * 
     * @return the gatewaySubnetCidrBlock value.
     */
    public String gatewaySubnetCidrBlock() {
        return this.gatewaySubnetCidrBlock;
    }

    /**
     * Set the gatewaySubnetCidrBlock property: The gateway subnet address used for deploying a virtual network. Specify
     * the subnet using IPv4 CIDR notation.
     * 
     * @param gatewaySubnetCidrBlock the gatewaySubnetCidrBlock value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withGatewaySubnetCidrBlock(String gatewaySubnetCidrBlock) {
        this.gatewaySubnetCidrBlock = gatewaySubnetCidrBlock;
        return this;
    }

    /**
     * Get the logRetentionInDays property: Parameter to define the retention period for logs, in days. The minimum
     * duration is 30 days and the maximum is 730 days.
     * 
     * @return the logRetentionInDays value.
     */
    public long logRetentionInDays() {
        return this.logRetentionInDays;
    }

    /**
     * Set the logRetentionInDays property: Parameter to define the retention period for logs, in days. The minimum
     * duration is 30 days and the maximum is 730 days.
     * 
     * @param logRetentionInDays the logRetentionInDays value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withLogRetentionInDays(long logRetentionInDays) {
        this.logRetentionInDays = logRetentionInDays;
        return this;
    }

    /**
     * Get the hubNetworkCidrBlock property: The Virtual Network address. Specify the address using IPv4 CIDR notation.
     * 
     * @return the hubNetworkCidrBlock value.
     */
    public String hubNetworkCidrBlock() {
        return this.hubNetworkCidrBlock;
    }

    /**
     * Set the hubNetworkCidrBlock property: The Virtual Network address. Specify the address using IPv4 CIDR notation.
     * 
     * @param hubNetworkCidrBlock the hubNetworkCidrBlock value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withHubNetworkCidrBlock(String hubNetworkCidrBlock) {
        this.hubNetworkCidrBlock = hubNetworkCidrBlock;
        return this;
    }

    /**
     * Get the azureBastionCreationOption property: Parameter used to deploy a Bastion: Select 'Yes' to enable
     * deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
     * 
     * @return the azureBastionCreationOption value.
     */
    public ResourceCreationOptions azureBastionCreationOption() {
        return this.azureBastionCreationOption;
    }

    /**
     * Set the azureBastionCreationOption property: Parameter used to deploy a Bastion: Select 'Yes' to enable
     * deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion.
     * 
     * @param azureBastionCreationOption the azureBastionCreationOption value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withAzureBastionCreationOption(ResourceCreationOptions azureBastionCreationOption) {
        this.azureBastionCreationOption = azureBastionCreationOption;
        return this;
    }

    /**
     * Get the existingAzureBastionId property: The resource ID of the Bastion when reusing an existing one.
     * 
     * @return the existingAzureBastionId value.
     */
    public String existingAzureBastionId() {
        return this.existingAzureBastionId;
    }

    /**
     * Set the existingAzureBastionId property: The resource ID of the Bastion when reusing an existing one.
     * 
     * @param existingAzureBastionId the existingAzureBastionId value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withExistingAzureBastionId(String existingAzureBastionId) {
        this.existingAzureBastionId = existingAzureBastionId;
        return this;
    }

    /**
     * Get the azureBastionSubnetCidrBlock property: The Bastion subnet address. Specify the address using IPv4 CIDR
     * notation.
     * 
     * @return the azureBastionSubnetCidrBlock value.
     */
    public String azureBastionSubnetCidrBlock() {
        return this.azureBastionSubnetCidrBlock;
    }

    /**
     * Set the azureBastionSubnetCidrBlock property: The Bastion subnet address. Specify the address using IPv4 CIDR
     * notation.
     * 
     * @param azureBastionSubnetCidrBlock the azureBastionSubnetCidrBlock value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withAzureBastionSubnetCidrBlock(String azureBastionSubnetCidrBlock) {
        this.azureBastionSubnetCidrBlock = azureBastionSubnetCidrBlock;
        return this;
    }

    /**
     * Get the landingZonesMgChildren property: The child management groups of 'Landing Zones' management group and
     * their assigned policies.
     * 
     * @return the landingZonesMgChildren value.
     */
    public List<LZManagementGroupProperties> landingZonesMgChildren() {
        return this.landingZonesMgChildren;
    }

    /**
     * Set the landingZonesMgChildren property: The child management groups of 'Landing Zones' management group and
     * their assigned policies.
     * 
     * @param landingZonesMgChildren the landingZonesMgChildren value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withLandingZonesMgChildren(List<LZManagementGroupProperties> landingZonesMgChildren) {
        this.landingZonesMgChildren = landingZonesMgChildren;
        return this;
    }

    /**
     * Get the topLevelMgMetadata property: The assigned policies of the parent management group.
     * 
     * @return the topLevelMgMetadata value.
     */
    public ManagementGroupProperties topLevelMgMetadata() {
        return this.topLevelMgMetadata;
    }

    /**
     * Set the topLevelMgMetadata property: The assigned policies of the parent management group.
     * 
     * @param topLevelMgMetadata the topLevelMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withTopLevelMgMetadata(ManagementGroupProperties topLevelMgMetadata) {
        this.topLevelMgMetadata = topLevelMgMetadata;
        return this;
    }

    /**
     * Get the landingZonesMgMetadata property: The assigned policies of the 'Landing Zones' management group.
     * 
     * @return the landingZonesMgMetadata value.
     */
    public ManagementGroupProperties landingZonesMgMetadata() {
        return this.landingZonesMgMetadata;
    }

    /**
     * Set the landingZonesMgMetadata property: The assigned policies of the 'Landing Zones' management group.
     * 
     * @param landingZonesMgMetadata the landingZonesMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withLandingZonesMgMetadata(ManagementGroupProperties landingZonesMgMetadata) {
        this.landingZonesMgMetadata = landingZonesMgMetadata;
        return this;
    }

    /**
     * Get the platformMgMetadata property: The assigned policies of the 'Platform' management group.
     * 
     * @return the platformMgMetadata value.
     */
    public ManagementGroupProperties platformMgMetadata() {
        return this.platformMgMetadata;
    }

    /**
     * Set the platformMgMetadata property: The assigned policies of the 'Platform' management group.
     * 
     * @param platformMgMetadata the platformMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withPlatformMgMetadata(ManagementGroupProperties platformMgMetadata) {
        this.platformMgMetadata = platformMgMetadata;
        return this;
    }

    /**
     * Get the platformManagementMgMetadata property: The assigned policies of the 'Management' management group under
     * 'Platform' management group.
     * 
     * @return the platformManagementMgMetadata value.
     */
    public ManagementGroupProperties platformManagementMgMetadata() {
        return this.platformManagementMgMetadata;
    }

    /**
     * Set the platformManagementMgMetadata property: The assigned policies of the 'Management' management group under
     * 'Platform' management group.
     * 
     * @param platformManagementMgMetadata the platformManagementMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withPlatformManagementMgMetadata(ManagementGroupProperties platformManagementMgMetadata) {
        this.platformManagementMgMetadata = platformManagementMgMetadata;
        return this;
    }

    /**
     * Get the platformConnectivityMgMetadata property: The assigned policies of the 'Connectivity' management group
     * under 'Platform' management group.
     * 
     * @return the platformConnectivityMgMetadata value.
     */
    public ManagementGroupProperties platformConnectivityMgMetadata() {
        return this.platformConnectivityMgMetadata;
    }

    /**
     * Set the platformConnectivityMgMetadata property: The assigned policies of the 'Connectivity' management group
     * under 'Platform' management group.
     * 
     * @param platformConnectivityMgMetadata the platformConnectivityMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withPlatformConnectivityMgMetadata(ManagementGroupProperties platformConnectivityMgMetadata) {
        this.platformConnectivityMgMetadata = platformConnectivityMgMetadata;
        return this;
    }

    /**
     * Get the platformIdentityMgMetadata property: The assigned policies of the 'Identity' management group under
     * 'Platform' management group.
     * 
     * @return the platformIdentityMgMetadata value.
     */
    public ManagementGroupProperties platformIdentityMgMetadata() {
        return this.platformIdentityMgMetadata;
    }

    /**
     * Set the platformIdentityMgMetadata property: The assigned policies of the 'Identity' management group under
     * 'Platform' management group.
     * 
     * @param platformIdentityMgMetadata the platformIdentityMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withPlatformIdentityMgMetadata(ManagementGroupProperties platformIdentityMgMetadata) {
        this.platformIdentityMgMetadata = platformIdentityMgMetadata;
        return this;
    }

    /**
     * Get the decommissionedMgMetadata property: The assigned policies of the 'Decommissioned' management group and
     * indicator to create it or not.
     * 
     * @return the decommissionedMgMetadata value.
     */
    public DecommissionedManagementGroupProperties decommissionedMgMetadata() {
        return this.decommissionedMgMetadata;
    }

    /**
     * Set the decommissionedMgMetadata property: The assigned policies of the 'Decommissioned' management group and
     * indicator to create it or not.
     * 
     * @param decommissionedMgMetadata the decommissionedMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withDecommissionedMgMetadata(DecommissionedManagementGroupProperties decommissionedMgMetadata) {
        this.decommissionedMgMetadata = decommissionedMgMetadata;
        return this;
    }

    /**
     * Get the sandboxMgMetadata property: The assigned policies of the 'Sandbox' management group and indicator to
     * create it or not.
     * 
     * @return the sandboxMgMetadata value.
     */
    public SandboxManagementGroupProperties sandboxMgMetadata() {
        return this.sandboxMgMetadata;
    }

    /**
     * Set the sandboxMgMetadata property: The assigned policies of the 'Sandbox' management group and indicator to
     * create it or not.
     * 
     * @param sandboxMgMetadata the sandboxMgMetadata value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withSandboxMgMetadata(SandboxManagementGroupProperties sandboxMgMetadata) {
        this.sandboxMgMetadata = sandboxMgMetadata;
        return this;
    }

    /**
     * Get the managedIdentity property: The managed identity to be assigned to this landing zone configuration.
     * 
     * @return the managedIdentity value.
     */
    public ManagedIdentityProperties managedIdentity() {
        return this.managedIdentity;
    }

    /**
     * Set the managedIdentity property: The managed identity to be assigned to this landing zone configuration.
     * 
     * @param managedIdentity the managedIdentity value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withManagedIdentity(ManagedIdentityProperties managedIdentity) {
        this.managedIdentity = managedIdentity;
        return this;
    }

    /**
     * Get the platformMgChildren property: The names of the 'Platform' child management groups and their assigned
     * policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'.
     * 
     * @return the platformMgChildren value.
     */
    public List<PlatformManagementGroupProperties> platformMgChildren() {
        return this.platformMgChildren;
    }

    /**
     * Set the platformMgChildren property: The names of the 'Platform' child management groups and their assigned
     * policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'.
     * 
     * @param platformMgChildren the platformMgChildren value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties
        withPlatformMgChildren(List<PlatformManagementGroupProperties> platformMgChildren) {
        this.platformMgChildren = platformMgChildren;
        return this;
    }

    /**
     * Get the namingConventionFormula property: The default naming convention applied to all resources for this landing
     * zone configuration. Example -
     * {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing.
     * 
     * @return the namingConventionFormula value.
     */
    public String namingConventionFormula() {
        return this.namingConventionFormula;
    }

    /**
     * Set the namingConventionFormula property: The default naming convention applied to all resources for this landing
     * zone configuration. Example -
     * {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing.
     * 
     * @param namingConventionFormula the namingConventionFormula value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withNamingConventionFormula(String namingConventionFormula) {
        this.namingConventionFormula = namingConventionFormula;
        return this;
    }

    /**
     * Get the customNamingConvention property: The custom naming convention applied to specific resource types for this
     * landing zone configuration, which overrides the default naming convention for those resource types. Example -
     * 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula':
     * '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}].
     * 
     * @return the customNamingConvention value.
     */
    public List<CustomNamingConvention> customNamingConvention() {
        return this.customNamingConvention;
    }

    /**
     * Set the customNamingConvention property: The custom naming convention applied to specific resource types for this
     * landing zone configuration, which overrides the default naming convention for those resource types. Example -
     * 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula':
     * '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}].
     * 
     * @param customNamingConvention the customNamingConvention value to set.
     * @return the LZConfigurationProperties object itself.
     */
    public LZConfigurationProperties withCustomNamingConvention(List<CustomNamingConvention> customNamingConvention) {
        this.customNamingConvention = customNamingConvention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ddosProtectionCreationOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ddosProtectionCreationOption in model LZConfigurationProperties"));
        }
        if (logAnalyticsWorkspaceCreationOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property logAnalyticsWorkspaceCreationOption in model LZConfigurationProperties"));
        }
        if (tags() != null) {
            tags().forEach(e -> e.validate());
        }
        if (firewallCreationOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property firewallCreationOption in model LZConfigurationProperties"));
        }
        if (gatewaySubnetCidrBlock() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property gatewaySubnetCidrBlock in model LZConfigurationProperties"));
        }
        if (hubNetworkCidrBlock() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property hubNetworkCidrBlock in model LZConfigurationProperties"));
        }
        if (azureBastionCreationOption() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureBastionCreationOption in model LZConfigurationProperties"));
        }
        if (landingZonesMgChildren() != null) {
            landingZonesMgChildren().forEach(e -> e.validate());
        }
        if (topLevelMgMetadata() != null) {
            topLevelMgMetadata().validate();
        }
        if (landingZonesMgMetadata() != null) {
            landingZonesMgMetadata().validate();
        }
        if (platformMgMetadata() != null) {
            platformMgMetadata().validate();
        }
        if (platformManagementMgMetadata() != null) {
            platformManagementMgMetadata().validate();
        }
        if (platformConnectivityMgMetadata() != null) {
            platformConnectivityMgMetadata().validate();
        }
        if (platformIdentityMgMetadata() != null) {
            platformIdentityMgMetadata().validate();
        }
        if (decommissionedMgMetadata() != null) {
            decommissionedMgMetadata().validate();
        }
        if (sandboxMgMetadata() != null) {
            sandboxMgMetadata().validate();
        }
        if (managedIdentity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedIdentity in model LZConfigurationProperties"));
        } else {
            managedIdentity().validate();
        }
        if (platformMgChildren() != null) {
            platformMgChildren().forEach(e -> e.validate());
        }
        if (customNamingConvention() != null) {
            customNamingConvention().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LZConfigurationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ddosProtectionCreationOption",
            this.ddosProtectionCreationOption == null ? null : this.ddosProtectionCreationOption.toString());
        jsonWriter.writeStringField("logAnalyticsWorkspaceCreationOption",
            this.logAnalyticsWorkspaceCreationOption == null
                ? null
                : this.logAnalyticsWorkspaceCreationOption.toString());
        jsonWriter.writeStringField("firewallCreationOption",
            this.firewallCreationOption == null ? null : this.firewallCreationOption.toString());
        jsonWriter.writeStringField("gatewaySubnetCidrBlock", this.gatewaySubnetCidrBlock);
        jsonWriter.writeLongField("logRetentionInDays", this.logRetentionInDays);
        jsonWriter.writeStringField("hubNetworkCidrBlock", this.hubNetworkCidrBlock);
        jsonWriter.writeStringField("azureBastionCreationOption",
            this.azureBastionCreationOption == null ? null : this.azureBastionCreationOption.toString());
        jsonWriter.writeJsonField("managedIdentity", this.managedIdentity);
        jsonWriter.writeStringField("existingDdosProtectionId", this.existingDdosProtectionId);
        jsonWriter.writeStringField("existingLogAnalyticsWorkspaceId", this.existingLogAnalyticsWorkspaceId);
        jsonWriter.writeArrayField("tags", this.tags, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firewallSubnetCidrBlock", this.firewallSubnetCidrBlock);
        jsonWriter.writeStringField("existingAzureBastionId", this.existingAzureBastionId);
        jsonWriter.writeStringField("azureBastionSubnetCidrBlock", this.azureBastionSubnetCidrBlock);
        jsonWriter.writeArrayField("landingZonesMgChildren", this.landingZonesMgChildren,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("topLevelMgMetadata", this.topLevelMgMetadata);
        jsonWriter.writeJsonField("landingZonesMgMetadata", this.landingZonesMgMetadata);
        jsonWriter.writeJsonField("platformMgMetadata", this.platformMgMetadata);
        jsonWriter.writeJsonField("platformManagementMgMetadata", this.platformManagementMgMetadata);
        jsonWriter.writeJsonField("platformConnectivityMgMetadata", this.platformConnectivityMgMetadata);
        jsonWriter.writeJsonField("platformIdentityMgMetadata", this.platformIdentityMgMetadata);
        jsonWriter.writeJsonField("decommissionedMgMetadata", this.decommissionedMgMetadata);
        jsonWriter.writeJsonField("sandboxMgMetadata", this.sandboxMgMetadata);
        jsonWriter.writeArrayField("platformMgChildren", this.platformMgChildren,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("namingConventionFormula", this.namingConventionFormula);
        jsonWriter.writeArrayField("customNamingConvention", this.customNamingConvention,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LZConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LZConfigurationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LZConfigurationProperties.
     */
    public static LZConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LZConfigurationProperties deserializedLZConfigurationProperties = new LZConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ddosProtectionCreationOption".equals(fieldName)) {
                    deserializedLZConfigurationProperties.ddosProtectionCreationOption
                        = ResourceCreationOptions.fromString(reader.getString());
                } else if ("logAnalyticsWorkspaceCreationOption".equals(fieldName)) {
                    deserializedLZConfigurationProperties.logAnalyticsWorkspaceCreationOption
                        = ResourceCreationOptions.fromString(reader.getString());
                } else if ("firewallCreationOption".equals(fieldName)) {
                    deserializedLZConfigurationProperties.firewallCreationOption
                        = FirewallCreationOptions.fromString(reader.getString());
                } else if ("gatewaySubnetCidrBlock".equals(fieldName)) {
                    deserializedLZConfigurationProperties.gatewaySubnetCidrBlock = reader.getString();
                } else if ("logRetentionInDays".equals(fieldName)) {
                    deserializedLZConfigurationProperties.logRetentionInDays = reader.getLong();
                } else if ("hubNetworkCidrBlock".equals(fieldName)) {
                    deserializedLZConfigurationProperties.hubNetworkCidrBlock = reader.getString();
                } else if ("azureBastionCreationOption".equals(fieldName)) {
                    deserializedLZConfigurationProperties.azureBastionCreationOption
                        = ResourceCreationOptions.fromString(reader.getString());
                } else if ("managedIdentity".equals(fieldName)) {
                    deserializedLZConfigurationProperties.managedIdentity = ManagedIdentityProperties.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedLZConfigurationProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("authoringStatus".equals(fieldName)) {
                    deserializedLZConfigurationProperties.authoringStatus
                        = AuthoringStatus.fromString(reader.getString());
                } else if ("existingDdosProtectionId".equals(fieldName)) {
                    deserializedLZConfigurationProperties.existingDdosProtectionId = reader.getString();
                } else if ("existingLogAnalyticsWorkspaceId".equals(fieldName)) {
                    deserializedLZConfigurationProperties.existingLogAnalyticsWorkspaceId = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    List<Tags> tags = reader.readArray(reader1 -> Tags.fromJson(reader1));
                    deserializedLZConfigurationProperties.tags = tags;
                } else if ("firewallSubnetCidrBlock".equals(fieldName)) {
                    deserializedLZConfigurationProperties.firewallSubnetCidrBlock = reader.getString();
                } else if ("existingAzureBastionId".equals(fieldName)) {
                    deserializedLZConfigurationProperties.existingAzureBastionId = reader.getString();
                } else if ("azureBastionSubnetCidrBlock".equals(fieldName)) {
                    deserializedLZConfigurationProperties.azureBastionSubnetCidrBlock = reader.getString();
                } else if ("landingZonesMgChildren".equals(fieldName)) {
                    List<LZManagementGroupProperties> landingZonesMgChildren
                        = reader.readArray(reader1 -> LZManagementGroupProperties.fromJson(reader1));
                    deserializedLZConfigurationProperties.landingZonesMgChildren = landingZonesMgChildren;
                } else if ("topLevelMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.topLevelMgMetadata
                        = ManagementGroupProperties.fromJson(reader);
                } else if ("landingZonesMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.landingZonesMgMetadata
                        = ManagementGroupProperties.fromJson(reader);
                } else if ("platformMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.platformMgMetadata
                        = ManagementGroupProperties.fromJson(reader);
                } else if ("platformManagementMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.platformManagementMgMetadata
                        = ManagementGroupProperties.fromJson(reader);
                } else if ("platformConnectivityMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.platformConnectivityMgMetadata
                        = ManagementGroupProperties.fromJson(reader);
                } else if ("platformIdentityMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.platformIdentityMgMetadata
                        = ManagementGroupProperties.fromJson(reader);
                } else if ("decommissionedMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.decommissionedMgMetadata
                        = DecommissionedManagementGroupProperties.fromJson(reader);
                } else if ("sandboxMgMetadata".equals(fieldName)) {
                    deserializedLZConfigurationProperties.sandboxMgMetadata
                        = SandboxManagementGroupProperties.fromJson(reader);
                } else if ("platformMgChildren".equals(fieldName)) {
                    List<PlatformManagementGroupProperties> platformMgChildren
                        = reader.readArray(reader1 -> PlatformManagementGroupProperties.fromJson(reader1));
                    deserializedLZConfigurationProperties.platformMgChildren = platformMgChildren;
                } else if ("namingConventionFormula".equals(fieldName)) {
                    deserializedLZConfigurationProperties.namingConventionFormula = reader.getString();
                } else if ("customNamingConvention".equals(fieldName)) {
                    List<CustomNamingConvention> customNamingConvention
                        = reader.readArray(reader1 -> CustomNamingConvention.fromJson(reader1));
                    deserializedLZConfigurationProperties.customNamingConvention = customNamingConvention;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLZConfigurationProperties;
        });
    }
}
