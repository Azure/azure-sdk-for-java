// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.LandingZoneRegistrationOperationsClient;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.LZRegistrationInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZRegistration;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LandingZoneRegistrationOperations;

public final class LandingZoneRegistrationOperationsImpl implements LandingZoneRegistrationOperations {
    private static final ClientLogger LOGGER = new ClientLogger(LandingZoneRegistrationOperationsImpl.class);

    private final LandingZoneRegistrationOperationsClient innerClient;

    private final com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager serviceManager;

    public LandingZoneRegistrationOperationsImpl(LandingZoneRegistrationOperationsClient innerClient,
        com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<LZRegistration> getWithResponse(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, Context context) {
        Response<LZRegistrationInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LZRegistrationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LZRegistration get(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName) {
        LZRegistrationInner inner
            = this.serviceClient().get(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName);
        if (inner != null) {
            return new LZRegistrationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String landingZoneAccountName,
        String landingZoneRegistrationName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, context);
    }

    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneRegistrationName) {
        this.serviceClient().delete(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName);
    }

    public PagedIterable<LZRegistration> listByResourceGroup(String resourceGroupName, String landingZoneAccountName) {
        PagedIterable<LZRegistrationInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, landingZoneAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZRegistrationImpl(inner1, this.manager()));
    }

    public PagedIterable<LZRegistration> listByResourceGroup(String resourceGroupName, String landingZoneAccountName,
        Context context) {
        PagedIterable<LZRegistrationInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, landingZoneAccountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZRegistrationImpl(inner1, this.manager()));
    }

    public PagedIterable<LZRegistration> listBySubscription(String landingZoneAccountName) {
        PagedIterable<LZRegistrationInner> inner = this.serviceClient().listBySubscription(landingZoneAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZRegistrationImpl(inner1, this.manager()));
    }

    public PagedIterable<LZRegistration> listBySubscription(String landingZoneAccountName, Context context) {
        PagedIterable<LZRegistrationInner> inner
            = this.serviceClient().listBySubscription(landingZoneAccountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZRegistrationImpl(inner1, this.manager()));
    }

    public LZRegistration getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneRegistrationName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneRegistrations");
        if (landingZoneRegistrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneRegistrations'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, Context.NONE)
            .getValue();
    }

    public Response<LZRegistration> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneRegistrationName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneRegistrations");
        if (landingZoneRegistrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneRegistrations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneRegistrationName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneRegistrations");
        if (landingZoneRegistrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneRegistrations'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneRegistrationName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneRegistrations");
        if (landingZoneRegistrationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneRegistrations'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, landingZoneAccountName, landingZoneRegistrationName, context);
    }

    private LandingZoneRegistrationOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager manager() {
        return this.serviceManager;
    }

    public LZRegistrationImpl define(String name) {
        return new LZRegistrationImpl(name, this.manager());
    }
}
