// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.LandingZoneConfigurationOperationsClient;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.CreateLandingZoneConfigurationCopyResponseInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.GenerateLandingZoneResponseInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.LandingZoneConfigurationResourceInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.UpdateAuthoringStatusResponseInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.implementation.models.LandingZoneConfigurationResourceListResult;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.CreateLandingZoneConfigurationCopyRequest;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.GenerateLandingZoneRequest;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.UpdateAuthoringStatusRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LandingZoneConfigurationOperationsClient.
 */
public final class LandingZoneConfigurationOperationsClientImpl implements LandingZoneConfigurationOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LandingZoneConfigurationOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final SovereignClientImpl client;

    /**
     * Initializes an instance of LandingZoneConfigurationOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LandingZoneConfigurationOperationsClientImpl(SovereignClientImpl client) {
        this.service = RestProxy.create(LandingZoneConfigurationOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SovereignClientLandingZoneConfigurationOperations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "SovereignClientLandi")
    public interface LandingZoneConfigurationOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneConfigurationResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") LandingZoneConfigurationResourceInner resource, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") LandingZoneConfigurationResourceInner properties, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneConfigurationResourceListResult>> listByResourceGroup(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneConfigurationResourceListResult>> listBySubscription(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("landingZoneAccountName") String landingZoneAccountName, @HeaderParam("Accept") String accept,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/generateLandingZone")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> generateLandingZone(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GenerateLandingZoneRequest body, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/updateAuthoringStatus")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> updateAuthoringStatus(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") UpdateAuthoringStatusRequest body, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sovereign/landingZoneAccounts/{landingZoneAccountName}/landingZoneConfigurations/{landingZoneConfigurationName}/createCopy")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createCopy(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("landingZoneAccountName") String landingZoneAccountName,
            @PathParam("landingZoneConfigurationName") String landingZoneConfigurationName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") CreateLandingZoneConfigurationCopyRequest body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneConfigurationResourceListResult>> listByResourceGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<LandingZoneConfigurationResourceListResult>> listBySubscriptionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone configuration along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LandingZoneConfigurationResourceInner>> getWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone configuration along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<LandingZoneConfigurationResourceInner>> getWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, accept, context);
    }

    /**
     * Get a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone configuration on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneConfigurationResourceInner> getAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName) {
        return getWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone configuration along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<LandingZoneConfigurationResourceInner> getWithResponse(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, Context context) {
        return getWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context)
            .block();
    }

    /**
     * Get a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a landing zone configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneConfigurationResourceInner get(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName) {
        return getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, Context.NONE)
            .getValue();
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, contentType, accept, resource,
            context);
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginCreateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneConfigurationName, resource);
        return this.client.<LandingZoneConfigurationResourceInner, LandingZoneConfigurationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneConfigurationResourceInner.class,
            LandingZoneConfigurationResourceInner.class, this.client.getContext());
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginCreateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner resource, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneConfigurationName, resource, context);
        return this.client.<LandingZoneConfigurationResourceInner, LandingZoneConfigurationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneConfigurationResourceInner.class,
            LandingZoneConfigurationResourceInner.class, context);
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginCreate(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner resource) {
        return this.beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource)
            .getSyncPoller();
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginCreate(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner resource, Context context) {
        return this
            .beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource,
                context)
            .getSyncPoller();
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneConfigurationResourceInner> createAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner resource) {
        return beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneConfigurationResourceInner> createAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner resource, Context context) {
        return beginCreateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneConfigurationResourceInner create(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, LandingZoneConfigurationResourceInner resource) {
        return createAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource).block();
    }

    /**
     * Create a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneConfigurationResourceInner create(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, LandingZoneConfigurationResourceInner resource, Context context) {
        return createAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, resource, context)
            .block();
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, contentType, accept, properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner properties, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, contentType, accept, properties,
            context);
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginUpdateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner properties) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneConfigurationName, properties);
        return this.client.<LandingZoneConfigurationResourceInner, LandingZoneConfigurationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneConfigurationResourceInner.class,
            LandingZoneConfigurationResourceInner.class, this.client.getContext());
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginUpdateAsync(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner properties, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneConfigurationName, properties, context);
        return this.client.<LandingZoneConfigurationResourceInner, LandingZoneConfigurationResourceInner>getLroResult(
            mono, this.client.getHttpPipeline(), LandingZoneConfigurationResourceInner.class,
            LandingZoneConfigurationResourceInner.class, context);
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginUpdate(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner properties) {
        return this
            .beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties)
            .getSyncPoller();
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of concrete proxy resource types can be created by aliasing this type
     * using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<LandingZoneConfigurationResourceInner>, LandingZoneConfigurationResourceInner>
        beginUpdate(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            LandingZoneConfigurationResourceInner properties, Context context) {
        return this
            .beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties,
                context)
            .getSyncPoller();
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneConfigurationResourceInner> updateAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner properties) {
        return beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<LandingZoneConfigurationResourceInner> updateAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        LandingZoneConfigurationResourceInner properties, Context context) {
        return beginUpdateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneConfigurationResourceInner update(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, LandingZoneConfigurationResourceInner properties) {
        return updateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties).block();
    }

    /**
     * Update a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return concrete proxy resource types can be created by aliasing this type using a specific property type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LandingZoneConfigurationResourceInner update(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, LandingZoneConfigurationResourceInner properties, Context context) {
        return updateAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, properties, context)
            .block();
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, accept, context);
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            context);
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName) {
        return this.beginDeleteAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName)
            .getSyncPoller();
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context)
            .getSyncPoller();
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName) {
        return beginDeleteAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, Context context) {
        return beginDeleteAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName) {
        deleteAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName).block();
    }

    /**
     * Delete a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
        Context context) {
        deleteAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context).block();
    }

    /**
     * List the landing zone configurations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listByResourceGroupSinglePageAsync(String resourceGroupName, String landingZoneAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, accept, context))
            .<PagedResponse<LandingZoneConfigurationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the landing zone configurations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listByResourceGroupSinglePageAsync(String resourceGroupName, String landingZoneAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByResourceGroup(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the landing zone configurations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneConfigurationResourceInner> listByResourceGroupAsync(String resourceGroupName,
        String landingZoneAccountName) {
        return new PagedFlux<>(() -> listByResourceGroupSinglePageAsync(resourceGroupName, landingZoneAccountName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * List the landing zone configurations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneConfigurationResourceInner> listByResourceGroupAsync(String resourceGroupName,
        String landingZoneAccountName, Context context) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, landingZoneAccountName, context),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the landing zone configurations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneConfigurationResourceInner> listByResourceGroup(String resourceGroupName,
        String landingZoneAccountName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, landingZoneAccountName));
    }

    /**
     * List the landing zone configurations within a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneConfigurationResourceInner> listByResourceGroup(String resourceGroupName,
        String landingZoneAccountName, Context context) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, landingZoneAccountName, context));
    }

    /**
     * List the landing zone configurations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listBySubscriptionSinglePageAsync(String landingZoneAccountName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), landingZoneAccountName, accept, context))
            .<PagedResponse<LandingZoneConfigurationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List the landing zone configurations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listBySubscriptionSinglePageAsync(String landingZoneAccountName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySubscription(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                landingZoneAccountName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List the landing zone configurations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneConfigurationResourceInner> listBySubscriptionAsync(String landingZoneAccountName) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(landingZoneAccountName),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink));
    }

    /**
     * List the landing zone configurations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<LandingZoneConfigurationResourceInner> listBySubscriptionAsync(String landingZoneAccountName,
        Context context) {
        return new PagedFlux<>(() -> listBySubscriptionSinglePageAsync(landingZoneAccountName, context),
            nextLink -> listBySubscriptionNextSinglePageAsync(nextLink, context));
    }

    /**
     * List the landing zone configurations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneConfigurationResourceInner> listBySubscription(String landingZoneAccountName) {
        return new PagedIterable<>(listBySubscriptionAsync(landingZoneAccountName));
    }

    /**
     * List the landing zone configurations within a subscription.
     * 
     * @param landingZoneAccountName The landing zone account.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<LandingZoneConfigurationResourceInner> listBySubscription(String landingZoneAccountName,
        Context context) {
        return new PagedIterable<>(listBySubscriptionAsync(landingZoneAccountName, context));
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> generateLandingZoneWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.generateLandingZone(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> generateLandingZoneWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, GenerateLandingZoneRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.generateLandingZone(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            contentType, accept, body, context);
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GenerateLandingZoneResponseInner>, GenerateLandingZoneResponseInner>
        beginGenerateLandingZoneAsync(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = generateLandingZoneWithResponseAsync(resourceGroupName,
            landingZoneAccountName, landingZoneConfigurationName, body);
        return this.client.<GenerateLandingZoneResponseInner, GenerateLandingZoneResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), GenerateLandingZoneResponseInner.class,
            GenerateLandingZoneResponseInner.class, this.client.getContext());
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GenerateLandingZoneResponseInner>, GenerateLandingZoneResponseInner>
        beginGenerateLandingZoneAsync(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, GenerateLandingZoneRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = generateLandingZoneWithResponseAsync(resourceGroupName,
            landingZoneAccountName, landingZoneConfigurationName, body, context);
        return this.client.<GenerateLandingZoneResponseInner, GenerateLandingZoneResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), GenerateLandingZoneResponseInner.class,
            GenerateLandingZoneResponseInner.class, context);
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GenerateLandingZoneResponseInner>, GenerateLandingZoneResponseInner>
        beginGenerateLandingZone(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        return this
            .beginGenerateLandingZoneAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
                body)
            .getSyncPoller();
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GenerateLandingZoneResponseInner>, GenerateLandingZoneResponseInner>
        beginGenerateLandingZone(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, GenerateLandingZoneRequest body, Context context) {
        return this
            .beginGenerateLandingZoneAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
                body, context)
            .getSyncPoller();
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GenerateLandingZoneResponseInner> generateLandingZoneAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        return beginGenerateLandingZoneAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GenerateLandingZoneResponseInner> generateLandingZoneAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, GenerateLandingZoneRequest body,
        Context context) {
        return beginGenerateLandingZoneAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            body, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GenerateLandingZoneResponseInner generateLandingZone(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        return generateLandingZoneAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body)
            .block();
    }

    /**
     * Generate infrastructure as code (IaC) for a landing zone deployment.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GenerateLandingZoneResponseInner generateLandingZone(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, GenerateLandingZoneRequest body, Context context) {
        return generateLandingZoneAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
            context).block();
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateAuthoringStatusWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateAuthoringStatus(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateAuthoringStatusWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, UpdateAuthoringStatusRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateAuthoringStatus(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            contentType, accept, body, context);
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<UpdateAuthoringStatusResponseInner>, UpdateAuthoringStatusResponseInner>
        beginUpdateAuthoringStatusAsync(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateAuthoringStatusWithResponseAsync(resourceGroupName,
            landingZoneAccountName, landingZoneConfigurationName, body);
        return this.client.<UpdateAuthoringStatusResponseInner, UpdateAuthoringStatusResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), UpdateAuthoringStatusResponseInner.class,
            UpdateAuthoringStatusResponseInner.class, this.client.getContext());
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<UpdateAuthoringStatusResponseInner>, UpdateAuthoringStatusResponseInner>
        beginUpdateAuthoringStatusAsync(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, UpdateAuthoringStatusRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateAuthoringStatusWithResponseAsync(resourceGroupName,
            landingZoneAccountName, landingZoneConfigurationName, body, context);
        return this.client.<UpdateAuthoringStatusResponseInner, UpdateAuthoringStatusResponseInner>getLroResult(mono,
            this.client.getHttpPipeline(), UpdateAuthoringStatusResponseInner.class,
            UpdateAuthoringStatusResponseInner.class, context);
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<UpdateAuthoringStatusResponseInner>, UpdateAuthoringStatusResponseInner>
        beginUpdateAuthoringStatus(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        return this
            .beginUpdateAuthoringStatusAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
                body)
            .getSyncPoller();
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<UpdateAuthoringStatusResponseInner>, UpdateAuthoringStatusResponseInner>
        beginUpdateAuthoringStatus(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, UpdateAuthoringStatusRequest body, Context context) {
        return this
            .beginUpdateAuthoringStatusAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
                body, context)
            .getSyncPoller();
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UpdateAuthoringStatusResponseInner> updateAuthoringStatusAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        return beginUpdateAuthoringStatusAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<UpdateAuthoringStatusResponseInner> updateAuthoringStatusAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, UpdateAuthoringStatusRequest body,
        Context context) {
        return beginUpdateAuthoringStatusAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            body, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateAuthoringStatusResponseInner updateAuthoringStatus(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        return updateAuthoringStatusAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body)
            .block();
    }

    /**
     * Update the authoring status on a landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UpdateAuthoringStatusResponseInner updateAuthoringStatus(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName, UpdateAuthoringStatusRequest body,
        Context context) {
        return updateAuthoringStatusAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
            context).block();
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createCopyWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createCopy(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName,
                landingZoneConfigurationName, contentType, accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createCopyWithResponseAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (landingZoneAccountName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneAccountName is required and cannot be null."));
        }
        if (landingZoneConfigurationName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter landingZoneConfigurationName is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createCopy(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, landingZoneAccountName, landingZoneConfigurationName,
            contentType, accept, body, context);
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<CreateLandingZoneConfigurationCopyResponseInner>, CreateLandingZoneConfigurationCopyResponseInner>
        beginCreateCopyAsync(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, CreateLandingZoneConfigurationCopyRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono = createCopyWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneConfigurationName, body);
        return this.client
            .<CreateLandingZoneConfigurationCopyResponseInner, CreateLandingZoneConfigurationCopyResponseInner>getLroResult(
                mono, this.client.getHttpPipeline(), CreateLandingZoneConfigurationCopyResponseInner.class,
                CreateLandingZoneConfigurationCopyResponseInner.class, this.client.getContext());
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<CreateLandingZoneConfigurationCopyResponseInner>, CreateLandingZoneConfigurationCopyResponseInner>
        beginCreateCopyAsync(String resourceGroupName, String landingZoneAccountName,
            String landingZoneConfigurationName, CreateLandingZoneConfigurationCopyRequest body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createCopyWithResponseAsync(resourceGroupName, landingZoneAccountName,
            landingZoneConfigurationName, body, context);
        return this.client
            .<CreateLandingZoneConfigurationCopyResponseInner, CreateLandingZoneConfigurationCopyResponseInner>getLroResult(
                mono, this.client.getHttpPipeline(), CreateLandingZoneConfigurationCopyResponseInner.class,
                CreateLandingZoneConfigurationCopyResponseInner.class, context);
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<CreateLandingZoneConfigurationCopyResponseInner>, CreateLandingZoneConfigurationCopyResponseInner>
        beginCreateCopy(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            CreateLandingZoneConfigurationCopyRequest body) {
        return this.beginCreateCopyAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body)
            .getSyncPoller();
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<CreateLandingZoneConfigurationCopyResponseInner>, CreateLandingZoneConfigurationCopyResponseInner>
        beginCreateCopy(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
            CreateLandingZoneConfigurationCopyRequest body, Context context) {
        return this
            .beginCreateCopyAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
                context)
            .getSyncPoller();
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CreateLandingZoneConfigurationCopyResponseInner> createCopyAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body) {
        return beginCreateCopyAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CreateLandingZoneConfigurationCopyResponseInner> createCopyAsync(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body, Context context) {
        return beginCreateCopyAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateLandingZoneConfigurationCopyResponseInner createCopy(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body) {
        return createCopyAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body).block();
    }

    /**
     * Create a duplicate of the landing zone configuration.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param landingZoneAccountName The landing zone account.
     * @param landingZoneConfigurationName The landing zone configuration name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateLandingZoneConfigurationCopyResponseInner createCopy(String resourceGroupName,
        String landingZoneAccountName, String landingZoneConfigurationName,
        CreateLandingZoneConfigurationCopyRequest body, Context context) {
        return createCopyAsync(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, context)
            .block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listByResourceGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<LandingZoneConfigurationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listByResourceGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByResourceGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listBySubscriptionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<LandingZoneConfigurationResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a LandingZoneConfigurationResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<LandingZoneConfigurationResourceInner>>
        listBySubscriptionNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listBySubscriptionNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
