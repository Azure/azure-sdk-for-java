// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.LandingZoneConfigurationOperationsClient;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.CreateLZConfigurationCopyResultInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.GenerateLandingZoneResultInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.LZConfigurationInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.fluent.models.UpdateAuthoringStatusResultInner;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.CreateLZConfigurationCopyRequest;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.CreateLZConfigurationCopyResult;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.GenerateLandingZoneRequest;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.GenerateLandingZoneResult;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZConfiguration;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LandingZoneConfigurationOperations;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.UpdateAuthoringStatusRequest;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.UpdateAuthoringStatusResult;

public final class LandingZoneConfigurationOperationsImpl implements LandingZoneConfigurationOperations {
    private static final ClientLogger LOGGER = new ClientLogger(LandingZoneConfigurationOperationsImpl.class);

    private final LandingZoneConfigurationOperationsClient innerClient;

    private final com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager serviceManager;

    public LandingZoneConfigurationOperationsImpl(LandingZoneConfigurationOperationsClient innerClient,
        com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<LZConfiguration> getWithResponse(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, Context context) {
        Response<LZConfigurationInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LZConfigurationImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LZConfiguration get(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName) {
        LZConfigurationInner inner
            = this.serviceClient().get(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName);
        if (inner != null) {
            return new LZConfigurationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName) {
        this.serviceClient().delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName);
    }

    public void delete(String resourceGroupName, String landingZoneAccountName, String landingZoneConfigurationName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
    }

    public PagedIterable<LZConfiguration> listByResourceGroup(String resourceGroupName, String landingZoneAccountName) {
        PagedIterable<LZConfigurationInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, landingZoneAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<LZConfiguration> listByResourceGroup(String resourceGroupName, String landingZoneAccountName,
        Context context) {
        PagedIterable<LZConfigurationInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, landingZoneAccountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<LZConfiguration> listBySubscription(String landingZoneAccountName) {
        PagedIterable<LZConfigurationInner> inner = this.serviceClient().listBySubscription(landingZoneAccountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZConfigurationImpl(inner1, this.manager()));
    }

    public PagedIterable<LZConfiguration> listBySubscription(String landingZoneAccountName, Context context) {
        PagedIterable<LZConfigurationInner> inner
            = this.serviceClient().listBySubscription(landingZoneAccountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LZConfigurationImpl(inner1, this.manager()));
    }

    public GenerateLandingZoneResult generateLandingZone(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, GenerateLandingZoneRequest body) {
        GenerateLandingZoneResultInner inner = this.serviceClient()
            .generateLandingZone(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body);
        if (inner != null) {
            return new GenerateLandingZoneResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public GenerateLandingZoneResult generateLandingZone(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, GenerateLandingZoneRequest body, Context context) {
        GenerateLandingZoneResultInner inner = this.serviceClient()
            .generateLandingZone(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
                context);
        if (inner != null) {
            return new GenerateLandingZoneResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public UpdateAuthoringStatusResult updateAuthoringStatus(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, UpdateAuthoringStatusRequest body) {
        UpdateAuthoringStatusResultInner inner = this.serviceClient()
            .updateAuthoringStatus(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body);
        if (inner != null) {
            return new UpdateAuthoringStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public UpdateAuthoringStatusResult updateAuthoringStatus(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, UpdateAuthoringStatusRequest body, Context context) {
        UpdateAuthoringStatusResultInner inner = this.serviceClient()
            .updateAuthoringStatus(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body,
                context);
        if (inner != null) {
            return new UpdateAuthoringStatusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CreateLZConfigurationCopyResult createCopy(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, CreateLZConfigurationCopyRequest body) {
        CreateLZConfigurationCopyResultInner inner = this.serviceClient()
            .createCopy(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body);
        if (inner != null) {
            return new CreateLZConfigurationCopyResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CreateLZConfigurationCopyResult createCopy(String resourceGroupName, String landingZoneAccountName,
        String landingZoneConfigurationName, CreateLZConfigurationCopyRequest body, Context context) {
        CreateLZConfigurationCopyResultInner inner = this.serviceClient()
            .createCopy(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, body, context);
        if (inner != null) {
            return new CreateLZConfigurationCopyResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public LZConfiguration getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, Context.NONE)
            .getValue();
    }

    public Response<LZConfiguration> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        return this.getWithResponse(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        this.delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String landingZoneAccountName = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneAccounts");
        if (landingZoneAccountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'landingZoneAccounts'.", id)));
        }
        String landingZoneConfigurationName
            = ResourceManagerUtils.getValueFromIdByName(id, "landingZoneConfigurations");
        if (landingZoneConfigurationName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'landingZoneConfigurations'.", id)));
        }
        this.delete(resourceGroupName, landingZoneAccountName, landingZoneConfigurationName, context);
    }

    private LandingZoneConfigurationOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager manager() {
        return this.serviceManager;
    }

    public LZConfigurationImpl define(String name) {
        return new LZConfigurationImpl(name, this.manager());
    }
}
