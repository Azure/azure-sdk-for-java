// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.regulatedenvironmentmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.regulatedenvironmentmanagement.RegulatedEnvironmentManagementManager;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZAccount;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.LZAccountProperties;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ManagedServiceIdentity;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.regulatedenvironmentmanagement.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LandingZoneAccountOperationsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"storageAccount\":\"xv\"},\"identity\":{\"principalId\":\"yslqbhsfx\",\"tenantId\":\"lyt\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"ohxcrsbfova\":{\"clientId\":\"ewwwfbkrvrnsv\",\"principalId\":\"q\"}}},\"location\":\"ruvw\",\"tags\":{\"pybsrfbjfdtw\":\"qfsubcgjbirx\",\"bexilzznfqqnv\":\"sotftpvj\",\"ujmkcjhwqy\":\"pmqtaru\",\"naenqpehindo\":\"jrybnwjewgdrjer\"},\"id\":\"gmifthnzd\",\"name\":\"dslgnayqigynduh\",\"type\":\"vhqlkthumaqo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        RegulatedEnvironmentManagementManager manager = RegulatedEnvironmentManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        LZAccount response
            = manager.landingZoneAccountOperations()
                .define("qcslyjpkiid")
                .withRegion("hx")
                .withExistingResourceGroup("ixisxyawjoy")
                .withTags(mapOf("u", "n", "xqzvszjfa", "ivkrtsw"))
                .withProperties(new LZAccountProperties().withStorageAccount("znelixhnrztfolh"))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("zhxgktrmgucn", new UserAssignedIdentity(), "pfqbuaceopzf",
                            new UserAssignedIdentity(), "lzdahzxctobgbkdm", new UserAssignedIdentity(), "jy",
                            new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("ruvw", response.location());
        Assertions.assertEquals("qfsubcgjbirx", response.tags().get("pybsrfbjfdtw"));
        Assertions.assertEquals("xv", response.properties().storageAccount());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
