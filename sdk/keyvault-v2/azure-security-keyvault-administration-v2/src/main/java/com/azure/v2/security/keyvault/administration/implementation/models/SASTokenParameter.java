// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * An authentication method and location for the operation.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class SASTokenParameter implements JsonSerializable<SASTokenParameter> {
    /*
     * Azure Blob storage container Uri
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final String storageResourceUri;

    /*
     * The SAS token pointing to an Azure Blob storage container
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String token;

    /*
     * Indicates which authentication method should be used. If set to true, Managed HSM will use the configured
     * user-assigned managed identity to authenticate with Azure Storage. Otherwise, a SAS token has to be specified.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Boolean useManagedIdentity;

    /**
     * Creates an instance of SASTokenParameter class.
     * 
     * @param storageResourceUri the storageResourceUri value to set.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SASTokenParameter(String storageResourceUri) {
        this.storageResourceUri = storageResourceUri;
    }

    /**
     * Get the storageResourceUri property: Azure Blob storage container Uri.
     * 
     * @return the storageResourceUri value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getStorageResourceUri() {
        return this.storageResourceUri;
    }

    /**
     * Get the token property: The SAS token pointing to an Azure Blob storage container.
     * 
     * @return the token value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getToken() {
        return this.token;
    }

    /**
     * Set the token property: The SAS token pointing to an Azure Blob storage container.
     * 
     * @param token the token value to set.
     * @return the SASTokenParameter object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SASTokenParameter setToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Get the useManagedIdentity property: Indicates which authentication method should be used. If set to true,
     * Managed HSM will use the configured user-assigned managed identity to authenticate with Azure Storage. Otherwise,
     * a SAS token has to be specified.
     * 
     * @return the useManagedIdentity value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Boolean isUseManagedIdentity() {
        return this.useManagedIdentity;
    }

    /**
     * Set the useManagedIdentity property: Indicates which authentication method should be used. If set to true,
     * Managed HSM will use the configured user-assigned managed identity to authenticate with Azure Storage. Otherwise,
     * a SAS token has to be specified.
     * 
     * @param useManagedIdentity the useManagedIdentity value to set.
     * @return the SASTokenParameter object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SASTokenParameter setUseManagedIdentity(Boolean useManagedIdentity) {
        this.useManagedIdentity = useManagedIdentity;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageResourceUri", this.storageResourceUri);
        jsonWriter.writeStringField("token", this.token);
        jsonWriter.writeBooleanField("useManagedIdentity", this.useManagedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SASTokenParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SASTokenParameter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SASTokenParameter.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static SASTokenParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String storageResourceUri = null;
            String token = null;
            Boolean useManagedIdentity = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageResourceUri".equals(fieldName)) {
                    storageResourceUri = reader.getString();
                } else if ("token".equals(fieldName)) {
                    token = reader.getString();
                } else if ("useManagedIdentity".equals(fieldName)) {
                    useManagedIdentity = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }
            SASTokenParameter deserializedSASTokenParameter = new SASTokenParameter(storageResourceUri);
            deserializedSASTokenParameter.token = token;
            deserializedSASTokenParameter.useManagedIdentity = useManagedIdentity;

            return deserializedSASTokenParameter;
        });
    }
}
