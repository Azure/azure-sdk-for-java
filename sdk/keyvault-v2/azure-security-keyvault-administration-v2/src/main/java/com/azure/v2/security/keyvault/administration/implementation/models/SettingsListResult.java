// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The settings list result.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class SettingsListResult implements JsonSerializable<SettingsListResult> {
    /*
     * A response message containing a list of account settings with their associated value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private List<Setting> settings;

    /**
     * Creates an instance of SettingsListResult class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private SettingsListResult() {
    }

    /**
     * Get the settings property: A response message containing a list of account settings with their associated value.
     * 
     * @return the settings value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public List<Setting> getSettings() {
        return this.settings;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SettingsListResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SettingsListResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SettingsListResult.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static SettingsListResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SettingsListResult deserializedSettingsListResult = new SettingsListResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("settings".equals(fieldName)) {
                    List<Setting> settings = reader.readArray(reader1 -> Setting.fromJson(reader1));
                    deserializedSettingsListResult.settings = settings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSettingsListResult;
        });
    }
}
