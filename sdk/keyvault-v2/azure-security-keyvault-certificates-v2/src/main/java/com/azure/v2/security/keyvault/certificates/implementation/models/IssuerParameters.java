// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.certificates.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Parameters for the issuer of the X509 component of a certificate.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class IssuerParameters implements JsonSerializable<IssuerParameters> {
    /*
     * Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String name;

    /*
     * Certificate type as supported by the provider (optional); for example 'OV-SSL', 'EV-SSL'
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String certificateType;

    /*
     * Indicates if the certificates generated under this policy should be published to certificate transparency logs.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Boolean certificateTransparency;

    /**
     * Creates an instance of IssuerParameters class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public IssuerParameters() {
    }

    /**
     * Get the name property: Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
     * 
     * @return the name value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getName() {
        return this.name;
    }

    /**
     * Set the name property: Name of the referenced issuer object or reserved names; for example, 'Self' or 'Unknown'.
     * 
     * @param name the name value to set.
     * @return the IssuerParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public IssuerParameters setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the certificateType property: Certificate type as supported by the provider (optional); for example 'OV-SSL',
     * 'EV-SSL'.
     * 
     * @return the certificateType value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getCertificateType() {
        return this.certificateType;
    }

    /**
     * Set the certificateType property: Certificate type as supported by the provider (optional); for example 'OV-SSL',
     * 'EV-SSL'.
     * 
     * @param certificateType the certificateType value to set.
     * @return the IssuerParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public IssuerParameters setCertificateType(String certificateType) {
        this.certificateType = certificateType;
        return this;
    }

    /**
     * Get the certificateTransparency property: Indicates if the certificates generated under this policy should be
     * published to certificate transparency logs.
     * 
     * @return the certificateTransparency value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Boolean isCertificateTransparency() {
        return this.certificateTransparency;
    }

    /**
     * Set the certificateTransparency property: Indicates if the certificates generated under this policy should be
     * published to certificate transparency logs.
     * 
     * @param certificateTransparency the certificateTransparency value to set.
     * @return the IssuerParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public IssuerParameters setCertificateTransparency(Boolean certificateTransparency) {
        this.certificateTransparency = certificateTransparency;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("cty", this.certificateType);
        jsonWriter.writeBooleanField("cert_transparency", this.certificateTransparency);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IssuerParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IssuerParameters if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IssuerParameters.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static IssuerParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IssuerParameters deserializedIssuerParameters = new IssuerParameters();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIssuerParameters.name = reader.getString();
                } else if ("cty".equals(fieldName)) {
                    deserializedIssuerParameters.certificateType = reader.getString();
                } else if ("cert_transparency".equals(fieldName)) {
                    deserializedIssuerParameters.certificateTransparency = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIssuerParameters;
        });
    }
}
