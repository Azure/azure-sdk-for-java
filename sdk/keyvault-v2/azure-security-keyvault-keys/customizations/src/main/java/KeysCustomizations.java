// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

import com.azure.autorest.customization.ClassCustomization;
import com.azure.autorest.customization.Customization;
import com.azure.autorest.customization.Editor;
import com.azure.autorest.customization.LibraryCustomization;
import org.slf4j.Logger;

/**
 * Contains customizations for Azure Key Vault's Keys code generation.
 */
public class KeysCustomizations extends Customization {
    @Override
    public void customize(LibraryCustomization libraryCustomization, Logger logger) {
        removeFiles(libraryCustomization.getRawEditor());
        moveListResultFiles(libraryCustomization);
        customizeServiceVersion(libraryCustomization);
        customizeKeyAttestation(libraryCustomization);
        customizeKeyCurveName(libraryCustomization.getRawEditor());
        customizeKeyOperation(libraryCustomization.getRawEditor());
        customizeKeyRotationPolicyAction(libraryCustomization);
        customizeReleaseKeyResult(libraryCustomization);
        customizeModuleInfo(libraryCustomization.getRawEditor());
    }

    private static void removeFiles(Editor editor) {
        editor.removeFile("src/main/java/com/azure/v2/security/keyvault/keys/KeyClient.java");
        editor.removeFile("src/main/java/com/azure/v2/security/keyvault/keys/KeyClientBuilder.java");
        editor.removeFile("src/main/java/com/azure/v2/security/keyvault/keys/implementation/implementation/models/package-info.java");
    }

    private static void moveListResultFiles(LibraryCustomization libraryCustomization) {
        moveSingleFile(libraryCustomization,
            "com.azure.v2.security.keyvault.keys.implementation.implementation.models",
            "com.azure.v2.security.keyvault.keys.implementation.models", "DeletedKeyListResult");
        moveSingleFile(libraryCustomization,
            "com.azure.v2.security.keyvault.keys.implementation.implementation.models",
            "com.azure.v2.security.keyvault.keys.implementation.models", "KeyListResult");

        // Update imports statements for moved classes in impl client.
        String classPath = "src/main/java/com/azure/v2/security/keyvault/keys/implementation/KeyClientImpl.java";
        Editor editor = libraryCustomization.getRawEditor();
        String newFileContent = editor.getFileContent(classPath)
            .replace("implementation.implementation", "implementation");

        editor.replaceFile(classPath, newFileContent);
    }

    private static void moveSingleFile(LibraryCustomization libraryCustomization, String oldPackage, String newPackage,
        String className) {

        Editor editor = libraryCustomization.getRawEditor();
        String oldClassPath = "src/main/java/" + oldPackage.replace('.', '/') + "/" + className + ".java";
        String newClassPath = "src/main/java/" + newPackage.replace('.', '/') + "/" + className + ".java";

        // Update the package declaration.
        libraryCustomization.getPackage(oldPackage)
            .getClass(className)
            .customizeAst(ast -> ast.getPackageDeclaration()
                .ifPresent(packageDeclaration -> packageDeclaration.setName(newPackage)));

        // Remove unnecessary import statement.
        String newFileContent = editor.getFileContent(oldClassPath)
            .replace("import " + oldPackage + "." + className.replace("ListResult", "Item") + ";\n", "");

        // Replace file contents.
        editor.replaceFile(oldClassPath, newFileContent);

        // Move file to the new path.
        editor.renameFile(oldClassPath, newClassPath);
    }

    private static void customizeServiceVersion(LibraryCustomization libraryCustomization) {
        libraryCustomization.getPackage("com.azure.v2.security.keyvault.keys")
            .getClass("KeyVaultServiceVersion")
            .rename("KeyServiceVersion");

            libraryCustomization.getRawEditor()
            .replaceFile("src/main/java/com/azure/v2/security/keyvault/keys/KeyServiceVersion.java",
                joinWithNewline(
                    "// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "// Licensed under the MIT License.",
                    "// Code generated by Microsoft (R) TypeSpec Code Generator.",
                    "",
                    "package com.azure.v2.security.keyvault.keys;",
                    "",
                    "import io.clientcore.core.http.models.ServiceVersion;",
                    "",
                    "/**",
                    " * The versions of Azure Key Vault Keys supported by this client library.",
                    " */",
                    "public enum KeyServiceVersion implements ServiceVersion {",
                    "    /**",
                    "     * Service version {@code 7.0}.",
                    "     */",
                    "    V7_0(\"7.0\"),",
                    "",
                    "    /**",
                    "     * Service version {@code 7.1}.",
                    "     */",
                    "    V7_1(\"7.1\"),",
                    "",
                    "    /**",
                    "     * Service version {@code 7.2}.",
                    "     */",
                    "    V7_2(\"7.2\"),",
                    "",
                    "    /**",
                    "     * Service version {@code 7.3}.",
                    "     */",
                    "    V7_3(\"7.3\"),",
                    "",
                    "    /**",
                    "     * Service version {@code 7.4}.",
                    "     */",
                    "    V7_4(\"7.4\"),",
                    "",
                    "    /**",
                    "     * Service version {@code 7.5}.",
                    "     */",
                    "    V7_5(\"7.5\");",
                    "",
                    "    private final String version;",
                    "",
                    "    KeyServiceVersion(String version) {",
                    "        this.version = version;",
                    "    }",
                    "",
                    "    /**",
                    "     * {@inheritDoc}",
                    "     */",
                    "    @Override",
                    "    public String getVersion() {",
                    "        return this.version;",
                    "    }",
                    "",
                    "    /**",
                    "     * Gets the latest service version supported by this client library.",
                    "     *",
                    "     * @return The latest {@link KeyServiceVersion}.",
                    "     */",
                    "    public static KeyServiceVersion getLatest() {",
                    "        return V7_5;",
                    "    }",
                    "}",
                    ""));
    }

    private static void customizeKeyAttestation(LibraryCustomization libraryCustomization) {
        replaceInFile(
            libraryCustomization.getPackage("com.azure.v2.security.keyvault.keys.models").getClass("KeyAttestation"),
            "src/main/java/com/azure/v2/security/keyvault/keys/models/KeyAttestation.java",
            new String[] {
                "Creates an instance of KeyAttestation class.",
                "Get the certificatePemFile property: A base64url-encoded string containing certificates in PEM format, used for attestation validation.",
                "@return the certificatePemFile value.",
                "Get the privateKeyAttestation property: The attestation blob bytes encoded as base64url string corresponding to a private key.",
                "@return the privateKeyAttestation value.",
                "Get the publicKeyAttestation property: The attestation blob bytes encoded as base64url string corresponding to a public key in case of asymmetric key.",
                "@return the publicKeyAttestation value.",
                "Get the version property: The version of the attestation.",
                "@return the version value."
            }, new String[] {
                "Creates an instance of KeyAttestation.",
                "Get a base64url-encoded string containing certificates in PEM format, used for attestation validation.",
                "@return The certificate in PEM format.",
                "Get the attestation blob bytes encoded as base64url string corresponding to a private key.",
                "@return The attestation blob bytes for the private portion of the key.",
                "Get the attestation blob bytes encoded as base64url string corresponding to a public key in case of asymmetric key.",
                "@return The attestation blob bytes for the public portion of the key.",
                "Get the version of the attestation.",
                "@return The version of the attestation."
            });
    }

    private static void customizeKeyCurveName(Editor editor) {
        String classPath = "src/main/java/com/azure/v2/security/keyvault/keys/models/KeyCurveName.java";
        String newFileContent = editor.getFileContent(classPath)
            .replace(" For valid values, see JsonWebKeyCurveName.", "");

        editor.replaceFile(classPath, newFileContent);
    }

    private static void customizeKeyOperation(Editor editor) {
        String classPath = "src/main/java/com/azure/v2/security/keyvault/keys/models/KeyOperation.java";
        String newFileContent = editor.getFileContent(classPath).replace(joinWithNewline(
            "",
            "    /**",
            "     * Indicates that the private component of the key can be exported.",
            "     */",
            "    @Generated",
            "    public static final KeyOperation EXPORT = fromString(\"export\");",
            ""), "");

        editor.replaceFile(classPath, newFileContent);
    }

    private static void customizeKeyRotationPolicyAction(LibraryCustomization libraryCustomization) {
        replaceInFile(
            libraryCustomization.getPackage("com.azure.v2.security.keyvault.keys.models").getClass("KeyRotationPolicyAction"),
            "src/main/java/com/azure/v2/security/keyvault/keys/models/KeyRotationPolicyAction.java",
            new String[] {
                "ROTATE(\"Rotate\")",
                "NOTIFY(\"Notify\")" },
            new String[] {
                "ROTATE(\"rotate\")",
                "NOTIFY(\"notify\")" });
    }

    private static void customizeReleaseKeyResult(LibraryCustomization libraryCustomization) {
        replaceInFile(
            libraryCustomization.getPackage("com.azure.v2.security.keyvault.keys.models").getClass("ReleaseKeyResult"),
            "src/main/java/com/azure/v2/security/keyvault/keys/models/ReleaseKeyResult.java",
            new String[] {
                "Creates an instance of ReleaseKeyResult class.",
                "private ReleaseKeyResult(",
                "Get the value property: A signed object containing the released key.",
                "@return the value value." },
            new String[] {
                "Creates an instance of ReleaseKeyResult.",
                "public ReleaseKeyResult(",
                "A signed object containing the released key.",
                "@return The released key." });
    }

    private static void customizeModuleInfo(Editor editor) {
        editor.replaceFile("src/main/java/module-info.java", joinWithNewline(
            "// Copyright (c) Microsoft Corporation. All rights reserved.",
            "// Licensed under the MIT License.",
            "",
            "module com.azure.v2.security.keyvault.keys {",
            "    requires transitive com.azure.v2.core;",
            "",
            "    exports com.azure.v2.security.keyvault.keys;",
            "    exports com.azure.v2.security.keyvault.keys.models;",
            "    exports com.azure.v2.security.keyvault.keys.cryptography;",
            "    exports com.azure.v2.security.keyvault.keys.cryptography.models;",
            "}"));
    }

    private static void replaceInFile(ClassCustomization classCustomization, String classPath,
        String[] stringsToReplace, String[] replacementStrings) {

        if (stringsToReplace != null && replacementStrings != null) {
            Editor editor = classCustomization.getEditor();
            String fileContent = editor.getFileContent(classPath);

            if (stringsToReplace.length != replacementStrings.length) {
                throw new IllegalArgumentException(
                    "'stringsToReplace' must have the same number of elements as 'replacementStrings'.");
            }

            for (int i = 0; i < stringsToReplace.length; i++) {
                fileContent = fileContent.replace(stringsToReplace[i], replacementStrings[i]);
            }

            editor.replaceFile(classPath, fileContent);
        } else if (stringsToReplace != null || replacementStrings != null) {
            throw new IllegalArgumentException(
                "'stringsToReplace' must have the same number of elements as 'replacementStrings'.");
        }
    }

    private static String joinWithNewline(String... lines) {
        return String.join("\n", lines);
    }
}
