// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The release result, containing the released key.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class ReleaseKeyResult implements JsonSerializable<ReleaseKeyResult> {
    /*
     * A signed object containing the released key.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String value;

    /**
     * Creates an instance of ReleaseKeyResult.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public ReleaseKeyResult() {
    }

    /**
     * A signed object containing the released key.
     * 
     * @return The released key.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReleaseKeyResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReleaseKeyResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReleaseKeyResult.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static ReleaseKeyResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReleaseKeyResult deserializedReleaseKeyResult = new ReleaseKeyResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedReleaseKeyResult.value = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReleaseKeyResult;
        });
    }
}
