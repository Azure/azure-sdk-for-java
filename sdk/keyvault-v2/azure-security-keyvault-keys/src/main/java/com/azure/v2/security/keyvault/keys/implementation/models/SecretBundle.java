// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;

import java.io.IOException;
import java.util.Map;

/**
 * A secret consisting of a value, id and its attributes.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class SecretBundle implements JsonSerializable<SecretBundle> {
    /*
     * The secret value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String value;

    /*
     * The secret id.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String id;

    /*
     * The content type of the secret.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String contentType;

    /*
     * The secret management attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private SecretAttributes attributes;

    /*
     * Application specific metadata in the form of key-value pairs.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Map<String, String> tags;

    /*
     * If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV
     * certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String kid;

    /*
     * True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed
     * will be true.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Boolean managed;

    /**
     * Creates an instance of SecretBundle class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private SecretBundle() {
    }

    /**
     * Get the value property: The secret value.
     * 
     * @return the value value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getValue() {
        return this.value;
    }

    /**
     * Get the id property: The secret id.
     * 
     * @return the id value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getId() {
        return this.id;
    }

    /**
     * Get the contentType property: The content type of the secret.
     * 
     * @return the contentType value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Get the attributes property: The secret management attributes.
     * 
     * @return the attributes value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public SecretAttributes getAttributes() {
        return this.attributes;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @return the tags value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Get the kid property: If this is a secret backing a KV certificate, then this field specifies the corresponding
     * key backing the KV certificate.
     * 
     * @return the kid value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getKid() {
        return this.kid;
    }

    /**
     * Get the managed property: True if the secret's lifetime is managed by key vault. If this is a secret backing a
     * certificate, then managed will be true.
     * 
     * @return the managed value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Boolean isManaged() {
        return this.managed;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("value", this.value);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeJsonField("attributes", this.attributes);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SecretBundle from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SecretBundle if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SecretBundle.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static SecretBundle fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SecretBundle deserializedSecretBundle = new SecretBundle();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedSecretBundle.value = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedSecretBundle.id = reader.getString();
                } else if ("contentType".equals(fieldName)) {
                    deserializedSecretBundle.contentType = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    deserializedSecretBundle.attributes = SecretAttributes.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedSecretBundle.tags = tags;
                } else if ("kid".equals(fieldName)) {
                    deserializedSecretBundle.kid = reader.getString();
                } else if ("managed".equals(fieldName)) {
                    deserializedSecretBundle.managed = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSecretBundle;
        });
    }
}
