// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import com.azure.v2.security.keyvault.keys.models.KeyRotationPolicyAction;
import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The action that will be executed.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class LifetimeActionsType implements JsonSerializable<LifetimeActionsType> {
    /*
     * The type of the action. The value should be compared case-insensitively.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private KeyRotationPolicyAction type;

    /**
     * Creates an instance of LifetimeActionsType class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public LifetimeActionsType() {
    }

    /**
     * Get the type property: The type of the action. The value should be compared case-insensitively.
     * 
     * @return the type value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyRotationPolicyAction getType() {
        return this.type;
    }

    /**
     * Set the type property: The type of the action. The value should be compared case-insensitively.
     * 
     * @param type the type value to set.
     * @return the LifetimeActionsType object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public LifetimeActionsType setType(KeyRotationPolicyAction type) {
        this.type = type;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LifetimeActionsType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LifetimeActionsType if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LifetimeActionsType.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static LifetimeActionsType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LifetimeActionsType deserializedLifetimeActionsType = new LifetimeActionsType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedLifetimeActionsType.type = KeyRotationPolicyAction.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLifetimeActionsType;
        });
    }
}
