// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.keys.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.Base64Uri;
import java.io.IOException;
import java.util.Objects;

/**
 * The key operations parameters.
 */
@Metadata(properties = { MetadataProperties.FLUENT })
public final class KeyOperationsParameters implements JsonSerializable<KeyOperationsParameters> {
    /*
     * algorithm identifier
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final JsonWebKeyEncryptionAlgorithm algorithm;

    /*
     * The value to operate on.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private final Base64Uri value;

    /*
     * Cryptographically random, non-repeating initialization vector for symmetric algorithms.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Base64Uri iv;

    /*
     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Base64Uri aad;

    /*
     * The tag to authenticate when performing decryption with an authenticated algorithm.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Base64Uri tag;

    /**
     * Creates an instance of KeyOperationsParameters class.
     * 
     * @param algorithm the algorithm value to set.
     * @param value the value value to set.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyOperationsParameters(JsonWebKeyEncryptionAlgorithm algorithm, byte[] value) {
        this.algorithm = algorithm;
        if (value == null) {
            this.value = null;
        } else {
            this.value = Base64Uri.encode(value);
        }
    }

    /**
     * Get the algorithm property: algorithm identifier.
     * 
     * @return the algorithm value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public JsonWebKeyEncryptionAlgorithm getAlgorithm() {
        return this.algorithm;
    }

    /**
     * Get the value property: The value to operate on.
     * 
     * @return the value value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getValue() {
        if (this.value == null) {
            return null;
        }
        return this.value.decodedBytes();
    }

    /**
     * Get the iv property: Cryptographically random, non-repeating initialization vector for symmetric algorithms.
     * 
     * @return the iv value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getIv() {
        if (this.iv == null) {
            return null;
        }
        return this.iv.decodedBytes();
    }

    /**
     * Set the iv property: Cryptographically random, non-repeating initialization vector for symmetric algorithms.
     * 
     * @param iv the iv value to set.
     * @return the KeyOperationsParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyOperationsParameters setIv(byte[] iv) {
        if (iv == null) {
            this.iv = null;
        } else {
            this.iv = Base64Uri.encode(iv);
        }
        return this;
    }

    /**
     * Get the aad property: Additional data to authenticate but not encrypt/decrypt when using authenticated crypto
     * algorithms.
     * 
     * @return the aad value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getAad() {
        if (this.aad == null) {
            return null;
        }
        return this.aad.decodedBytes();
    }

    /**
     * Set the aad property: Additional data to authenticate but not encrypt/decrypt when using authenticated crypto
     * algorithms.
     * 
     * @param aad the aad value to set.
     * @return the KeyOperationsParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyOperationsParameters setAad(byte[] aad) {
        if (aad == null) {
            this.aad = null;
        } else {
            this.aad = Base64Uri.encode(aad);
        }
        return this;
    }

    /**
     * Get the tag property: The tag to authenticate when performing decryption with an authenticated algorithm.
     * 
     * @return the tag value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getTag() {
        if (this.tag == null) {
            return null;
        }
        return this.tag.decodedBytes();
    }

    /**
     * Set the tag property: The tag to authenticate when performing decryption with an authenticated algorithm.
     * 
     * @param tag the tag value to set.
     * @return the KeyOperationsParameters object itself.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public KeyOperationsParameters setTag(byte[] tag) {
        if (tag == null) {
            this.tag = null;
        } else {
            this.tag = Base64Uri.encode(tag);
        }
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("alg", this.algorithm == null ? null : this.algorithm.getValue());
        jsonWriter.writeStringField("value", Objects.toString(this.value, null));
        jsonWriter.writeStringField("iv", Objects.toString(this.iv, null));
        jsonWriter.writeStringField("aad", Objects.toString(this.aad, null));
        jsonWriter.writeStringField("tag", Objects.toString(this.tag, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyOperationsParameters from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyOperationsParameters if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyOperationsParameters.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static KeyOperationsParameters fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            JsonWebKeyEncryptionAlgorithm algorithm = null;
            byte[] value = null;
            Base64Uri iv = null;
            Base64Uri aad = null;
            Base64Uri tag = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alg".equals(fieldName)) {
                    algorithm = JsonWebKeyEncryptionAlgorithm.fromValue(reader.getString());
                } else if ("value".equals(fieldName)) {
                    Base64Uri valueHolder
                        = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                    if (valueHolder != null) {
                        value = valueHolder.decodedBytes();
                    }
                } else if ("iv".equals(fieldName)) {
                    iv = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                } else if ("aad".equals(fieldName)) {
                    aad = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                } else if ("tag".equals(fieldName)) {
                    tag = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            KeyOperationsParameters deserializedKeyOperationsParameters = new KeyOperationsParameters(algorithm, value);
            deserializedKeyOperationsParameters.iv = iv;
            deserializedKeyOperationsParameters.aad = aad;
            deserializedKeyOperationsParameters.tag = tag;

            return deserializedKeyOperationsParameters;
        });
    }
}
