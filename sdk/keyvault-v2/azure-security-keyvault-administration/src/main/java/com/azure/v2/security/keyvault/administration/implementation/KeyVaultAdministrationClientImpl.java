// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.v2.security.keyvault.administration.implementation;

import com.azure.v2.security.keyvault.administration.KeyVaultAdministrationServiceVersion;
import com.azure.v2.security.keyvault.administration.implementation.models.FullBackupOperation;
import com.azure.v2.security.keyvault.administration.implementation.models.KeyVaultError;
import com.azure.v2.security.keyvault.administration.implementation.models.RestoreOperation;
import com.azure.v2.security.keyvault.administration.implementation.models.RestoreOperationParameters;
import com.azure.v2.security.keyvault.administration.implementation.models.SASTokenParameter;
import com.azure.v2.security.keyvault.administration.implementation.models.SelectiveKeyRestoreOperation;
import com.azure.v2.security.keyvault.administration.implementation.models.SelectiveKeyRestoreOperationParameters;
import com.azure.v2.security.keyvault.administration.implementation.models.Setting;
import com.azure.v2.security.keyvault.administration.implementation.models.SettingsListResult;
import com.azure.v2.security.keyvault.administration.implementation.models.UpdateSettingRequest;
import io.clientcore.core.annotations.ReturnType;
import io.clientcore.core.annotations.ServiceInterface;
import io.clientcore.core.annotations.ServiceMethod;
import io.clientcore.core.http.annotations.BodyParam;
import io.clientcore.core.http.annotations.HeaderParam;
import io.clientcore.core.http.annotations.HostParam;
import io.clientcore.core.http.annotations.HttpRequestInformation;
import io.clientcore.core.http.annotations.PathParam;
import io.clientcore.core.http.annotations.QueryParam;
import io.clientcore.core.http.annotations.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.HttpResponseException;
import io.clientcore.core.http.models.RequestContext;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.http.pipeline.HttpPipeline;
import java.lang.reflect.InvocationTargetException;

/**
 * Initializes a new instance of the KeyVaultAdministrationClient type.
 */
public final class KeyVaultAdministrationClientImpl {

    /**
     * The proxy service used to perform REST calls.
     */
    private final KeyVaultAdministrationClientService service;

    /**
     */
    private final String vaultBaseUrl;

    /**
     * Gets.
     *
     * @return the vaultBaseUrl value.
     */
    public String getVaultBaseUrl() {
        return this.vaultBaseUrl;
    }

    /**
     * Service version.
     */
    private final KeyVaultAdministrationServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public KeyVaultAdministrationServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The RoleDefinitionsImpl object to access its operations.
     */
    private final RoleDefinitionsImpl roleDefinitions;

    /**
     * Gets the RoleDefinitionsImpl object to access its operations.
     *
     * @return the RoleDefinitionsImpl object.
     */
    public RoleDefinitionsImpl getRoleDefinitions() {
        return this.roleDefinitions;
    }

    /**
     * The RoleAssignmentsImpl object to access its operations.
     */
    private final RoleAssignmentsImpl roleAssignments;

    /**
     * Gets the RoleAssignmentsImpl object to access its operations.
     *
     * @return the RoleAssignmentsImpl object.
     */
    public RoleAssignmentsImpl getRoleAssignments() {
        return this.roleAssignments;
    }

    /**
     * Initializes an instance of KeyVaultAdministrationClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param vaultBaseUrl
     * @param serviceVersion Service version.
     */
    public KeyVaultAdministrationClientImpl(HttpPipeline httpPipeline, String vaultBaseUrl,
        KeyVaultAdministrationServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.vaultBaseUrl = vaultBaseUrl;
        this.serviceVersion = serviceVersion;
        this.roleDefinitions = new RoleDefinitionsImpl(this);
        this.roleAssignments = new RoleAssignmentsImpl(this);
        this.service = KeyVaultAdministrationClientService.getNewInstance(this.httpPipeline);
    }

    /**
     * The interface defining all the services for KeyVaultAdministrationClient to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "KeyVaultAdministrati", host = "{vaultBaseUrl}")
    public interface KeyVaultAdministrationClientService {

        static KeyVaultAdministrationClientService getNewInstance(HttpPipeline pipeline) {
            try {
                Class<?> clazz = Class.forName(
                    "com.azure.v2.security.keyvault.administration.implementation.KeyVaultAdministrationClientServiceImpl");
                return (KeyVaultAdministrationClientService) clazz.getMethod("getNewInstance", HttpPipeline.class)
                    .invoke(null, pipeline);
            } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException
                | InvocationTargetException e) {
                throw new RuntimeException(e);
            }
        }

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/backup/{jobId}/pending",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<FullBackupOperation> fullBackupStatus(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.POST, path = "/backup", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<FullBackupOperation> fullBackup(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SASTokenParameter azureStorageBlobContainerUri,
            RequestContext requestContext);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/restore/{jobId}/pending",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RestoreOperation> restoreStatus(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.PUT, path = "/restore", expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<RestoreOperation> fullRestoreOperation(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") RestoreOperationParameters restoreBlobDetails,
            RequestContext requestContext);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/restore/{jobId}/pending",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SelectiveKeyRestoreOperation> selectiveKeyRestoreStatus(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("jobId") String jobId,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(
            method = HttpMethod.PUT,
            path = "/keys/{keyName}/restore",
            expectedStatusCodes = { 202 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SelectiveKeyRestoreOperation> selectiveKeyRestoreOperation(
            @HostParam("vaultBaseUrl") String vaultBaseUrl, @QueryParam("api-version") String apiVersion,
            @PathParam("keyName") String keyName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SelectiveKeyRestoreOperationParameters restoreBlobDetails,
            RequestContext requestContext);

        @HttpRequestInformation(
            method = HttpMethod.PATCH,
            path = "/settings/{setting-name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<Setting> updateSetting(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("setting-name") String settingName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") UpdateSettingRequest parameters, RequestContext requestContext);

        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/settings/{setting-name}",
            expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<Setting> getSetting(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @PathParam("setting-name") String settingName,
            @HeaderParam("Accept") String accept, RequestContext requestContext);

        @HttpRequestInformation(method = HttpMethod.GET, path = "/settings", expectedStatusCodes = { 200 })
        @UnexpectedResponseExceptionDetail(exceptionBodyClass = KeyVaultError.class)
        Response<SettingsListResult> getSettings(@HostParam("vaultBaseUrl") String vaultBaseUrl,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept,
            RequestContext requestContext);
    }

    /**
     * Returns the status of full backup operation.
     *
     * @param jobId The id returned as part of the backup request.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return full backup operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<FullBackupOperation> fullBackupStatusWithResponse(String jobId, RequestContext requestContext) {
        final String accept = "application/json";
        return service.fullBackupStatus(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), jobId, accept,
            requestContext);
    }

    /**
     * Returns the status of full backup operation.
     *
     * @param jobId The id returned as part of the backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return full backup operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FullBackupOperation fullBackupStatus(String jobId) {
        return fullBackupStatusWithResponse(jobId, RequestContext.none()).getValue();
    }

    /**
     * Returns the status of restore operation.
     *
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return restore operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RestoreOperation> restoreStatusWithResponse(String jobId, RequestContext requestContext) {
        final String accept = "application/json";
        return service.restoreStatus(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), jobId, accept,
            requestContext);
    }

    /**
     * Returns the status of restore operation.
     *
     * @param jobId The Job Id returned part of the restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return restore operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreOperation restoreStatus(String jobId) {
        return restoreStatusWithResponse(jobId, RequestContext.none()).getValue();
    }

    /**
     * Returns the status of the selective key restore operation.
     *
     * @param jobId The Job Id returned part of the restore operation.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return selective Key Restore operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SelectiveKeyRestoreOperation> selectiveKeyRestoreStatusWithResponse(String jobId,
        RequestContext requestContext) {
        final String accept = "application/json";
        return service.selectiveKeyRestoreStatus(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), jobId,
            accept, requestContext);
    }

    /**
     * Returns the status of the selective key restore operation.
     *
     * @param jobId The Job Id returned part of the restore operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return selective Key Restore operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SelectiveKeyRestoreOperation selectiveKeyRestoreStatus(String jobId) {
        return selectiveKeyRestoreStatusWithResponse(jobId, RequestContext.none()).getValue();
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     *
     * Description of the pool setting to be updated.
     *
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Key Vault account setting.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Setting> updateSettingWithResponse(String settingName, UpdateSettingRequest parameters,
        RequestContext requestContext) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSetting(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), settingName,
            contentType, accept, parameters, requestContext);
    }

    /**
     * Updates key vault account setting, stores it, then returns the setting name and value to the client.
     *
     * Description of the pool setting to be updated.
     *
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param parameters The parameters to update an account setting.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Key Vault account setting.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Setting updateSetting(String settingName, UpdateSettingRequest parameters) {
        return updateSettingWithResponse(settingName, parameters, RequestContext.none()).getValue();
    }

    /**
     * Get specified account setting object.
     *
     * Retrieves the setting object of a specified setting name.
     *
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified account setting object.
     *
     * Retrieves the setting object of a specified setting name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Setting> getSettingWithResponse(String settingName, RequestContext requestContext) {
        final String accept = "application/json";
        return service.getSetting(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), settingName, accept,
            requestContext);
    }

    /**
     * Get specified account setting object.
     *
     * Retrieves the setting object of a specified setting name.
     *
     * @param settingName The name of the account setting. Must be a valid settings option.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return specified account setting object.
     *
     * Retrieves the setting object of a specified setting name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Setting getSetting(String settingName) {
        return getSettingWithResponse(settingName, RequestContext.none()).getValue();
    }

    /**
     * List account settings.
     *
     * Retrieves a list of all the available account settings that can be configured.
     *
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SettingsListResult> getSettingsWithResponse(RequestContext requestContext) {
        final String accept = "application/json";
        return service.getSettings(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), accept,
            requestContext);
    }

    /**
     * List account settings.
     *
     * Retrieves a list of all the available account settings that can be configured.
     *
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the settings list result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SettingsListResult getSettings() {
        return getSettingsWithResponse(RequestContext.none()).getValue();
    }

    /**
     * /**
     * Creates a full backup using a user-provided SAS token to an Azure blob storage container.
     *
     * @param azureStorageBlobContainerUri Azure blob shared access signature token pointing to a valid Azure blob
     * container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the
     * time of making this call.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return full backup operation.
     * /
     */
    public Response<FullBackupOperation> fullBackupStatusWithResponse(SASTokenParameter azureStorageBlobContainerUri,
        RequestContext requestContext) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.fullBackup(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), contentType, accept,
            azureStorageBlobContainerUri, requestContext);
    }

    /**
     * /**
     * Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder.
     *
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return restore operation.
     * /
     */
    public Response<RestoreOperation> fullRestoreOperationWithResponse(RestoreOperationParameters restoreBlobDetails,
        RequestContext requestContext) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.fullRestoreOperation(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(), contentType,
            accept, restoreBlobDetails, requestContext);
    }

    /**
     * /**
     * Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob
     * storage backup folder.
     *
     * @param keyName The name of the key to be restored from the user supplied backup.
     * @param restoreBlobDetails The Azure blob SAS token pointing to a folder where the previous successful full backup
     * was stored.
     * @param requestContext The context to configure the HTTP request before HTTP client sends it.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the service returns an error.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return selective Key Restore operation.
     * /
     */
    public Response<SelectiveKeyRestoreOperation> selectiveKeyRestoreOperationWithResponse(String keyName,
        SelectiveKeyRestoreOperationParameters restoreBlobDetails, RequestContext requestContext) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.selectiveKeyRestoreOperation(this.getVaultBaseUrl(), this.getServiceVersion().getVersion(),
            keyName, contentType, accept, restoreBlobDetails, requestContext);
    }
}
