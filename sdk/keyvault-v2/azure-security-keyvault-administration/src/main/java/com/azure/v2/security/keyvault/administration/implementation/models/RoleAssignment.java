// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.administration.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * Role Assignments.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class RoleAssignment implements JsonSerializable<RoleAssignment> {
    /*
     * The role assignment ID.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String id;

    /*
     * The role assignment name.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String name;

    /*
     * The role assignment type.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String type;

    /*
     * Role assignment properties.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private RoleAssignmentPropertiesWithScope properties;

    /**
     * Creates an instance of RoleAssignment class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private RoleAssignment() {
    }

    /**
     * Get the id property: The role assignment ID.
     * 
     * @return the id value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: The role assignment name.
     * 
     * @return the name value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getName() {
        return this.name;
    }

    /**
     * Get the type property: The role assignment type.
     * 
     * @return the type value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getType() {
        return this.type;
    }

    /**
     * Get the properties property: Role assignment properties.
     * 
     * @return the properties value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public RoleAssignmentPropertiesWithScope getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RoleAssignment from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RoleAssignment if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RoleAssignment.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static RoleAssignment fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RoleAssignment deserializedRoleAssignment = new RoleAssignment();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedRoleAssignment.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedRoleAssignment.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedRoleAssignment.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedRoleAssignment.properties = RoleAssignmentPropertiesWithScope.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRoleAssignment;
        });
    }
}
