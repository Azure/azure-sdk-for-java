// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.v2.security.keyvault.certificates.implementation.models;

import io.clientcore.core.annotations.Metadata;
import io.clientcore.core.annotations.MetadataProperties;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import io.clientcore.core.utils.Base64Uri;
import java.io.IOException;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Map;

/**
 * A Deleted Certificate consisting of its previous id, attributes and its tags, as well as information on when it will
 * be purged.
 */
@Metadata(properties = { MetadataProperties.IMMUTABLE })
public final class DeletedCertificateBundle implements JsonSerializable<DeletedCertificateBundle> {
    /*
     * The certificate id.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String id;

    /*
     * The key id.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String kid;

    /*
     * The secret id.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String sid;

    /*
     * Thumbprint of the certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Base64Uri x509Thumbprint;

    /*
     * The management policy.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private CertificatePolicy policy;

    /*
     * CER contents of x509 certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private byte[] cer;

    /*
     * The content type of the secret. eg. 'application/x-pem-file' or 'application/x-pkcs12',
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String contentType;

    /*
     * The certificate attributes.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private CertificateAttributes attributes;

    /*
     * Application specific metadata in the form of key-value pairs
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Map<String, String> tags;

    /*
     * The url of the recovery object, used to identify and recover the deleted certificate.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private String recoveryId;

    /*
     * The time when the certificate is scheduled to be purged, in UTC
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Long scheduledPurgeDate;

    /*
     * The time when the certificate was deleted, in UTC
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private Long deletedDate;

    /**
     * Creates an instance of DeletedCertificateBundle class.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    private DeletedCertificateBundle() {
    }

    /**
     * Get the id property: The certificate id.
     * 
     * @return the id value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getId() {
        return this.id;
    }

    /**
     * Get the kid property: The key id.
     * 
     * @return the kid value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getKid() {
        return this.kid;
    }

    /**
     * Get the sid property: The secret id.
     * 
     * @return the sid value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getSid() {
        return this.sid;
    }

    /**
     * Get the x509Thumbprint property: Thumbprint of the certificate.
     * 
     * @return the x509Thumbprint value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getX509Thumbprint() {
        if (this.x509Thumbprint == null) {
            return null;
        }
        return this.x509Thumbprint.decodedBytes();
    }

    /**
     * Get the policy property: The management policy.
     * 
     * @return the policy value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public CertificatePolicy getPolicy() {
        return this.policy;
    }

    /**
     * Get the cer property: CER contents of x509 certificate.
     * 
     * @return the cer value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public byte[] getCer() {
        return this.cer;
    }

    /**
     * Get the contentType property: The content type of the secret. eg. 'application/x-pem-file' or
     * 'application/x-pkcs12',.
     * 
     * @return the contentType value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Get the attributes property: The certificate attributes.
     * 
     * @return the attributes value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public CertificateAttributes getAttributes() {
        return this.attributes;
    }

    /**
     * Get the tags property: Application specific metadata in the form of key-value pairs.
     * 
     * @return the tags value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Get the recoveryId property: The url of the recovery object, used to identify and recover the deleted
     * certificate.
     * 
     * @return the recoveryId value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public String getRecoveryId() {
        return this.recoveryId;
    }

    /**
     * Get the scheduledPurgeDate property: The time when the certificate is scheduled to be purged, in UTC.
     * 
     * @return the scheduledPurgeDate value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public OffsetDateTime getScheduledPurgeDate() {
        if (this.scheduledPurgeDate == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.scheduledPurgeDate), ZoneOffset.UTC);
    }

    /**
     * Get the deletedDate property: The time when the certificate was deleted, in UTC.
     * 
     * @return the deletedDate value.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public OffsetDateTime getDeletedDate() {
        if (this.deletedDate == null) {
            return null;
        }
        return OffsetDateTime.ofInstant(Instant.ofEpochSecond(this.deletedDate), ZoneOffset.UTC);
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBinaryField("cer", this.cer);
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeJsonField("attributes", this.attributes);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("recoveryId", this.recoveryId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeletedCertificateBundle from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeletedCertificateBundle if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeletedCertificateBundle.
     */
    @Metadata(properties = { MetadataProperties.GENERATED })
    public static DeletedCertificateBundle fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeletedCertificateBundle deserializedDeletedCertificateBundle = new DeletedCertificateBundle();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.id = reader.getString();
                } else if ("kid".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.kid = reader.getString();
                } else if ("sid".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.sid = reader.getString();
                } else if ("x5t".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.x509Thumbprint
                        = reader.getNullable(nonNullReader -> new Base64Uri(nonNullReader.getString()));
                } else if ("policy".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.policy = CertificatePolicy.fromJson(reader);
                } else if ("cer".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.cer = reader.getBinary();
                } else if ("contentType".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.contentType = reader.getString();
                } else if ("attributes".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.attributes = CertificateAttributes.fromJson(reader);
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedDeletedCertificateBundle.tags = tags;
                } else if ("recoveryId".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.recoveryId = reader.getString();
                } else if ("scheduledPurgeDate".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.scheduledPurgeDate = reader.getNullable(JsonReader::getLong);
                } else if ("deletedDate".equals(fieldName)) {
                    deserializedDeletedCertificateBundle.deletedDate = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeletedCertificateBundle;
        });
    }
}
