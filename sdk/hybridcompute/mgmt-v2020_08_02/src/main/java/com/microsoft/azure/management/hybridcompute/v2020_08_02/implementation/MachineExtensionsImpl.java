/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.hybridcompute.v2020_08_02.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.hybridcompute.v2020_08_02.MachineExtensions;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.hybridcompute.v2020_08_02.MachineExtension;

class MachineExtensionsImpl extends WrapperImpl<MachineExtensionsInner> implements MachineExtensions {
    private final HybridComputeManager manager;

    MachineExtensionsImpl(HybridComputeManager manager) {
        super(manager.inner().machineExtensions());
        this.manager = manager;
    }

    public HybridComputeManager manager() {
        return this.manager;
    }

    @Override
    public MachineExtensionImpl define(String name) {
        return wrapModel(name);
    }

    private MachineExtensionImpl wrapModel(MachineExtensionInner inner) {
        return  new MachineExtensionImpl(inner, manager());
    }

    private MachineExtensionImpl wrapModel(String name) {
        return new MachineExtensionImpl(name, this.manager());
    }

    @Override
    public Observable<MachineExtension> listAsync(final String resourceGroupName, final String name) {
        MachineExtensionsInner client = this.inner();
        return client.listAsync(resourceGroupName, name)
        .flatMapIterable(new Func1<Page<MachineExtensionInner>, Iterable<MachineExtensionInner>>() {
            @Override
            public Iterable<MachineExtensionInner> call(Page<MachineExtensionInner> page) {
                return page.items();
            }
        })
        .map(new Func1<MachineExtensionInner, MachineExtension>() {
            @Override
            public MachineExtension call(MachineExtensionInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<MachineExtension> getAsync(String resourceGroupName, String name, String extensionName) {
        MachineExtensionsInner client = this.inner();
        return client.getAsync(resourceGroupName, name, extensionName)
        .flatMap(new Func1<MachineExtensionInner, Observable<MachineExtension>>() {
            @Override
            public Observable<MachineExtension> call(MachineExtensionInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((MachineExtension)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String name, String extensionName) {
        MachineExtensionsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name, extensionName).toCompletable();
    }

}
