/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridcompute.v2020_08_02;

import com.microsoft.azure.arm.collection.SupportsCreating;
import rx.Completable;
import rx.Observable;
import com.microsoft.azure.management.hybridcompute.v2020_08_02.implementation.MachineExtensionsInner;
import com.microsoft.azure.arm.model.HasInner;

/**
 * Type representing MachineExtensions.
 */
public interface MachineExtensions extends SupportsCreating<MachineExtension.DefinitionStages.Blank>, HasInner<MachineExtensionsInner> {
    /**
     * The operation to get the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MachineExtension> getAsync(String resourceGroupName, String name, String extensionName);

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MachineExtension> listAsync(final String resourceGroupName, final String name);

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String name, String extensionName);

}
