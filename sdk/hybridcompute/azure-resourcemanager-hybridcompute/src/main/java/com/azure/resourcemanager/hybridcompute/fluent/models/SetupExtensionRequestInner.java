// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionProperties;
import java.io.IOException;
import java.util.List;

/**
 * The SetupExtensionRequest model.
 */
@Fluent
public final class SetupExtensionRequestInner implements JsonSerializable<SetupExtensionRequestInner> {
    /*
     * The list of extensions
     */
    private List<MachineExtensionProperties> extensions;

    /**
     * Creates an instance of SetupExtensionRequestInner class.
     */
    public SetupExtensionRequestInner() {
    }

    /**
     * Get the extensions property: The list of extensions.
     * 
     * @return the extensions value.
     */
    public List<MachineExtensionProperties> extensions() {
        return this.extensions;
    }

    /**
     * Set the extensions property: The list of extensions.
     * 
     * @param extensions the extensions value to set.
     * @return the SetupExtensionRequestInner object itself.
     */
    public SetupExtensionRequestInner withExtensions(List<MachineExtensionProperties> extensions) {
        this.extensions = extensions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extensions() != null) {
            extensions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("extensions", this.extensions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SetupExtensionRequestInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SetupExtensionRequestInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SetupExtensionRequestInner.
     */
    public static SetupExtensionRequestInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SetupExtensionRequestInner deserializedSetupExtensionRequestInner = new SetupExtensionRequestInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("extensions".equals(fieldName)) {
                    List<MachineExtensionProperties> extensions
                        = reader.readArray(reader1 -> MachineExtensionProperties.fromJson(reader1));
                    deserializedSetupExtensionRequestInner.extensions = extensions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSetupExtensionRequestInner;
        });
    }
}
