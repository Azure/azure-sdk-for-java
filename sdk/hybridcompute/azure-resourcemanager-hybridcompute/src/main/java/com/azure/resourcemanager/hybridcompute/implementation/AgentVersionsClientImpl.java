// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.hybridcompute.fluent.AgentVersionsClient;
import com.azure.resourcemanager.hybridcompute.fluent.models.AgentVersionInner;
import com.azure.resourcemanager.hybridcompute.fluent.models.AgentVersionsListInner;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AgentVersionsClient. */
public final class AgentVersionsClientImpl implements AgentVersionsClient {
    /** The proxy service used to perform REST calls. */
    private final AgentVersionsService service;

    /** The service client containing this operation class. */
    private final HybridComputeManagementClientImpl client;

    /**
     * Initializes an instance of AgentVersionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AgentVersionsClientImpl(HybridComputeManagementClientImpl client) {
        this.service =
            RestProxy.create(AgentVersionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HybridComputeManagementClientAgentVersions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HybridComputeManagem")
    public interface AgentVersionsService {
        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentVersionsListInner>> list(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("osType") String osType,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions/{version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AgentVersionInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("osType") String osType,
            @PathParam("version") String version,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets all Agent Versions along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Agent Versions along with the download link currently present along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentVersionsListInner>> listWithResponseAsync(String osType) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (osType == null) {
            return Mono.error(new IllegalArgumentException("Parameter osType is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.list(this.client.getEndpoint(), this.client.getApiVersion(), osType, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all Agent Versions along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Agent Versions along with the download link currently present along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentVersionsListInner>> listWithResponseAsync(String osType, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (osType == null) {
            return Mono.error(new IllegalArgumentException("Parameter osType is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), this.client.getApiVersion(), osType, accept, context);
    }

    /**
     * Gets all Agent Versions along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Agent Versions along with the download link currently present on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentVersionsListInner> listAsync(String osType) {
        return listWithResponseAsync(osType).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets all Agent Versions along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Agent Versions along with the download link currently present along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AgentVersionsListInner> listWithResponse(String osType, Context context) {
        return listWithResponseAsync(osType, context).block();
    }

    /**
     * Gets all Agent Versions along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all Agent Versions along with the download link currently present.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentVersionsListInner list(String osType) {
        return listWithResponse(osType, Context.NONE).getValue();
    }

    /**
     * Gets an Agent Version along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param version Defines the agent version. To get latest, use latest or else a specific agent version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Agent Version along with the download link currently present along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentVersionInner>> getWithResponseAsync(String osType, String version) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (osType == null) {
            return Mono.error(new IllegalArgumentException("Parameter osType is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(this.client.getEndpoint(), this.client.getApiVersion(), osType, version, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets an Agent Version along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param version Defines the agent version. To get latest, use latest or else a specific agent version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Agent Version along with the download link currently present along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AgentVersionInner>> getWithResponseAsync(String osType, String version, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (osType == null) {
            return Mono.error(new IllegalArgumentException("Parameter osType is required and cannot be null."));
        }
        if (version == null) {
            return Mono.error(new IllegalArgumentException("Parameter version is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), osType, version, accept, context);
    }

    /**
     * Gets an Agent Version along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param version Defines the agent version. To get latest, use latest or else a specific agent version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Agent Version along with the download link currently present on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AgentVersionInner> getAsync(String osType, String version) {
        return getWithResponseAsync(osType, version).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an Agent Version along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param version Defines the agent version. To get latest, use latest or else a specific agent version.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Agent Version along with the download link currently present along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AgentVersionInner> getWithResponse(String osType, String version, Context context) {
        return getWithResponseAsync(osType, version, context).block();
    }

    /**
     * Gets an Agent Version along with the download link currently present.
     *
     * @param osType Defines the os type.
     * @param version Defines the agent version. To get latest, use latest or else a specific agent version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an Agent Version along with the download link currently present.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AgentVersionInner get(String osType, String version) {
        return getWithResponse(osType, version, Context.NONE).getValue();
    }
}
