// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes properties of the IP address.
 */
@Fluent
public final class IpAddress {
    /*
     * Represents the IP Address.
     */
    @JsonProperty(value = "address")
    private String address;

    /*
     * Represents the Ip Address Version.
     */
    @JsonProperty(value = "ipAddressVersion")
    private String ipAddressVersion;

    /*
     * The subnet to which this IP address belongs.
     */
    @JsonProperty(value = "subnet", access = JsonProperty.Access.WRITE_ONLY)
    private Subnet subnet;

    /**
     * Creates an instance of IpAddress class.
     */
    public IpAddress() {
    }

    /**
     * Get the address property: Represents the IP Address.
     * 
     * @return the address value.
     */
    public String address() {
        return this.address;
    }

    /**
     * Set the address property: Represents the IP Address.
     * 
     * @param address the address value to set.
     * @return the IpAddress object itself.
     */
    public IpAddress withAddress(String address) {
        this.address = address;
        return this;
    }

    /**
     * Get the ipAddressVersion property: Represents the Ip Address Version.
     * 
     * @return the ipAddressVersion value.
     */
    public String ipAddressVersion() {
        return this.ipAddressVersion;
    }

    /**
     * Set the ipAddressVersion property: Represents the Ip Address Version.
     * 
     * @param ipAddressVersion the ipAddressVersion value to set.
     * @return the IpAddress object itself.
     */
    public IpAddress withIpAddressVersion(String ipAddressVersion) {
        this.ipAddressVersion = ipAddressVersion;
        return this;
    }

    /**
     * Get the subnet property: The subnet to which this IP address belongs.
     * 
     * @return the subnet value.
     */
    public Subnet subnet() {
        return this.subnet;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnet() != null) {
            subnet().validate();
        }
    }
}
