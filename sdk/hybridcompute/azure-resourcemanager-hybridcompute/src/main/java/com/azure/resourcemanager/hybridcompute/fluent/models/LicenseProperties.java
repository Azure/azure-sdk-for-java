// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import com.azure.resourcemanager.hybridcompute.models.ProvisioningState;
import java.io.IOException;

/**
 * Describes the properties of a License Profile.
 */
@Fluent
public final class LicenseProperties implements JsonSerializable<LicenseProperties> {
    /*
     * The provisioning state, which only appears in the response.
     */
    private ProvisioningState provisioningState;

    /*
     * Describes the tenant id.
     */
    private String tenantId;

    /*
     * The type of the license resource.
     */
    private LicenseType licenseType;

    /*
     * Describes the properties of a License.
     */
    private LicenseDetails licenseDetails;

    /**
     * Creates an instance of LicenseProperties class.
     */
    public LicenseProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the tenantId property: Describes the tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Describes the tenant id.
     * 
     * @param tenantId the tenantId value to set.
     * @return the LicenseProperties object itself.
     */
    public LicenseProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the licenseType property: The type of the license resource.
     * 
     * @return the licenseType value.
     */
    public LicenseType licenseType() {
        return this.licenseType;
    }

    /**
     * Set the licenseType property: The type of the license resource.
     * 
     * @param licenseType the licenseType value to set.
     * @return the LicenseProperties object itself.
     */
    public LicenseProperties withLicenseType(LicenseType licenseType) {
        this.licenseType = licenseType;
        return this;
    }

    /**
     * Get the licenseDetails property: Describes the properties of a License.
     * 
     * @return the licenseDetails value.
     */
    public LicenseDetails licenseDetails() {
        return this.licenseDetails;
    }

    /**
     * Set the licenseDetails property: Describes the properties of a License.
     * 
     * @param licenseDetails the licenseDetails value to set.
     * @return the LicenseProperties object itself.
     */
    public LicenseProperties withLicenseDetails(LicenseDetails licenseDetails) {
        this.licenseDetails = licenseDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (licenseDetails() != null) {
            licenseDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("licenseType", this.licenseType == null ? null : this.licenseType.toString());
        jsonWriter.writeJsonField("licenseDetails", this.licenseDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LicenseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LicenseProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the LicenseProperties.
     */
    public static LicenseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LicenseProperties deserializedLicenseProperties = new LicenseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedLicenseProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedLicenseProperties.tenantId = reader.getString();
                } else if ("licenseType".equals(fieldName)) {
                    deserializedLicenseProperties.licenseType = LicenseType.fromString(reader.getString());
                } else if ("licenseDetails".equals(fieldName)) {
                    deserializedLicenseProperties.licenseDetails = LicenseDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLicenseProperties;
        });
    }
}
