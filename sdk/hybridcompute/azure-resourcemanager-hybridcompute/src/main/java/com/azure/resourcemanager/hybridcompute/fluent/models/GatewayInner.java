// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.hybridcompute.models.GatewayType;
import com.azure.resourcemanager.hybridcompute.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Describes an Arc Gateway.
 */
@Fluent
public final class GatewayInner extends Resource {
    /*
     * Hybrid Compute Gateway properties
     */
    @JsonProperty(value = "properties")
    private GatewayProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Creates an instance of GatewayInner class.
     */
    public GatewayInner() {
    }

    /**
     * Get the innerProperties property: Hybrid Compute Gateway properties.
     * 
     * @return the innerProperties value.
     */
    private GatewayProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GatewayInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GatewayInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the gatewayId property: A unique, immutable, identifier for the Gateway.
     * 
     * @return the gatewayId value.
     */
    public String gatewayId() {
        return this.innerProperties() == null ? null : this.innerProperties().gatewayId();
    }

    /**
     * Get the gatewayType property: The type of the Gateway resource.
     * 
     * @return the gatewayType value.
     */
    public GatewayType gatewayType() {
        return this.innerProperties() == null ? null : this.innerProperties().gatewayType();
    }

    /**
     * Set the gatewayType property: The type of the Gateway resource.
     * 
     * @param gatewayType the gatewayType value to set.
     * @return the GatewayInner object itself.
     */
    public GatewayInner withGatewayType(GatewayType gatewayType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayProperties();
        }
        this.innerProperties().withGatewayType(gatewayType);
        return this;
    }

    /**
     * Get the gatewayEndpoint property: The endpoint fqdn for the Gateway.
     * 
     * @return the gatewayEndpoint value.
     */
    public String gatewayEndpoint() {
        return this.innerProperties() == null ? null : this.innerProperties().gatewayEndpoint();
    }

    /**
     * Get the allowedFeatures property: Specifies the list of features that are enabled for this Gateway.
     * 
     * @return the allowedFeatures value.
     */
    public List<String> allowedFeatures() {
        return this.innerProperties() == null ? null : this.innerProperties().allowedFeatures();
    }

    /**
     * Set the allowedFeatures property: Specifies the list of features that are enabled for this Gateway.
     * 
     * @param allowedFeatures the allowedFeatures value to set.
     * @return the GatewayInner object itself.
     */
    public GatewayInner withAllowedFeatures(List<String> allowedFeatures) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayProperties();
        }
        this.innerProperties().withAllowedFeatures(allowedFeatures);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
