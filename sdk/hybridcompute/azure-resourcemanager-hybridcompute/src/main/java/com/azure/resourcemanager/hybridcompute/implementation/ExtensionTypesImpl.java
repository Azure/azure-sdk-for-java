// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcompute.fluent.ExtensionTypesClient;
import com.azure.resourcemanager.hybridcompute.fluent.models.ExtensionTypeInner;
import com.azure.resourcemanager.hybridcompute.models.ExtensionType;
import com.azure.resourcemanager.hybridcompute.models.ExtensionTypes;

public final class ExtensionTypesImpl implements ExtensionTypes {
    private static final ClientLogger LOGGER = new ClientLogger(ExtensionTypesImpl.class);

    private final ExtensionTypesClient innerClient;

    private final com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager;

    public ExtensionTypesImpl(ExtensionTypesClient innerClient,
        com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ExtensionType> list(String location, String publisher) {
        PagedIterable<ExtensionTypeInner> inner = this.serviceClient().list(location, publisher);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionTypeImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionType> list(String location, String publisher, Context context) {
        PagedIterable<ExtensionTypeInner> inner = this.serviceClient().list(location, publisher, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionTypeImpl(inner1, this.manager()));
    }

    private ExtensionTypesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcompute.HybridComputeManager manager() {
        return this.serviceManager;
    }
}
