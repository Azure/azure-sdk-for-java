// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties that define a Resource Association.
 */
@Immutable
public final class ResourceAssociation implements JsonSerializable<ResourceAssociation> {
    /*
     * Name of the Resource Association
     */
    private String name;

    /*
     * The access mode
     */
    private AccessMode accessMode;

    /**
     * Creates an instance of ResourceAssociation class.
     */
    public ResourceAssociation() {
    }

    /**
     * Get the name property: Name of the Resource Association.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the accessMode property: The access mode.
     * 
     * @return the accessMode value.
     */
    public AccessMode accessMode() {
        return this.accessMode;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceAssociation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceAssociation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceAssociation.
     */
    public static ResourceAssociation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceAssociation deserializedResourceAssociation = new ResourceAssociation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedResourceAssociation.name = reader.getString();
                } else if ("accessMode".equals(fieldName)) {
                    deserializedResourceAssociation.accessMode = AccessMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceAssociation;
        });
    }
}
