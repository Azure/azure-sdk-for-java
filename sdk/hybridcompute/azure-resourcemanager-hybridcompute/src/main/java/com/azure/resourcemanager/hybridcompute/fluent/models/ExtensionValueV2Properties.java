// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes Extension Metadata properties.
 */
@Immutable
public final class ExtensionValueV2Properties extends ExtensionValueProperties {
    /*
     * A list of locations where the extension packages can be found.
     */
    private List<String> extensionUris;

    /*
     * Location of the signature files for the extension.
     */
    private String extensionSignatureUri;

    /*
     * The operating system (Windows, Linux, etc.) this extension supports.
     */
    private String operatingSystem;

    /*
     * Architectures (x64, arms64, etc.) that this extension supports.
     */
    private List<String> architecture;

    /*
     * The publisher of the Extension being received.
     */
    private String publisher;

    /*
     * The type of the Extension being received.
     */
    private String extensionType;

    /*
     * The version of the Extension being received.
     */
    private String version;

    /**
     * Creates an instance of ExtensionValueV2Properties class.
     */
    public ExtensionValueV2Properties() {
    }

    /**
     * Get the extensionUris property: A list of locations where the extension packages can be found.
     * 
     * @return the extensionUris value.
     */
    public List<String> extensionUris() {
        return this.extensionUris;
    }

    /**
     * Get the extensionSignatureUri property: Location of the signature files for the extension.
     * 
     * @return the extensionSignatureUri value.
     */
    public String extensionSignatureUri() {
        return this.extensionSignatureUri;
    }

    /**
     * Get the operatingSystem property: The operating system (Windows, Linux, etc.) this extension supports.
     * 
     * @return the operatingSystem value.
     */
    public String operatingSystem() {
        return this.operatingSystem;
    }

    /**
     * Get the architecture property: Architectures (x64, arms64, etc.) that this extension supports.
     * 
     * @return the architecture value.
     */
    public List<String> architecture() {
        return this.architecture;
    }

    /**
     * Get the publisher property: The publisher of the Extension being received.
     * 
     * @return the publisher value.
     */
    @Override
    public String publisher() {
        return this.publisher;
    }

    /**
     * Get the extensionType property: The type of the Extension being received.
     * 
     * @return the extensionType value.
     */
    @Override
    public String extensionType() {
        return this.extensionType;
    }

    /**
     * Get the version property: The version of the Extension being received.
     * 
     * @return the version value.
     */
    @Override
    public String version() {
        return this.version;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtensionValueV2Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtensionValueV2Properties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExtensionValueV2Properties.
     */
    public static ExtensionValueV2Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtensionValueV2Properties deserializedExtensionValueV2Properties = new ExtensionValueV2Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedExtensionValueV2Properties.version = reader.getString();
                } else if ("extensionType".equals(fieldName)) {
                    deserializedExtensionValueV2Properties.extensionType = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedExtensionValueV2Properties.publisher = reader.getString();
                } else if ("extensionUris".equals(fieldName)) {
                    List<String> extensionUris = reader.readArray(reader1 -> reader1.getString());
                    deserializedExtensionValueV2Properties.extensionUris = extensionUris;
                } else if ("extensionSignatureUri".equals(fieldName)) {
                    deserializedExtensionValueV2Properties.extensionSignatureUri = reader.getString();
                } else if ("operatingSystem".equals(fieldName)) {
                    deserializedExtensionValueV2Properties.operatingSystem = reader.getString();
                } else if ("architecture".equals(fieldName)) {
                    List<String> architecture = reader.readArray(reader1 -> reader1.getString());
                    deserializedExtensionValueV2Properties.architecture = architecture;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtensionValueV2Properties;
        });
    }
}
