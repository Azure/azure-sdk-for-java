// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseProfileInner;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileUpdate;

/**
 * An instance of this class provides access to all the operations defined in LicenseProfilesClient.
 */
public interface LicenseProfilesClient {
    /**
     * The operation to create or update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Create or Update license profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LicenseProfileInner>, LicenseProfileInner> beginCreateOrUpdate(String resourceGroupName,
        String machineName, LicenseProfileInner parameters);

    /**
     * The operation to create or update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Create or Update license profile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LicenseProfileInner>, LicenseProfileInner> beginCreateOrUpdate(String resourceGroupName,
        String machineName, LicenseProfileInner parameters, Context context);

    /**
     * The operation to create or update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Create or Update license profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LicenseProfileInner createOrUpdate(String resourceGroupName, String machineName, LicenseProfileInner parameters);

    /**
     * The operation to create or update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Create or Update license profile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LicenseProfileInner createOrUpdate(String resourceGroupName, String machineName, LicenseProfileInner parameters,
        Context context);

    /**
     * The operation to update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Update license profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LicenseProfileInner>, LicenseProfileInner> beginUpdate(String resourceGroupName,
        String machineName, LicenseProfileUpdate parameters);

    /**
     * The operation to update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Update license profile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<LicenseProfileInner>, LicenseProfileInner> beginUpdate(String resourceGroupName,
        String machineName, LicenseProfileUpdate parameters, Context context);

    /**
     * The operation to update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Update license profile operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LicenseProfileInner update(String resourceGroupName, String machineName, LicenseProfileUpdate parameters);

    /**
     * The operation to update a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param parameters Parameters supplied to the Update license profile operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LicenseProfileInner update(String resourceGroupName, String machineName, LicenseProfileUpdate parameters,
        Context context);

    /**
     * Retrieves information about the view of a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license profile in a hybrid machine along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<LicenseProfileInner> getWithResponse(String resourceGroupName, String machineName, Context context);

    /**
     * Retrieves information about the view of a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license profile in a hybrid machine.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LicenseProfileInner get(String resourceGroupName, String machineName);

    /**
     * The operation to delete a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String machineName);

    /**
     * The operation to delete a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String machineName, Context context);

    /**
     * The operation to delete a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String machineName);

    /**
     * The operation to delete a license profile.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the hybrid machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String machineName, Context context);

    /**
     * The operation to get all license profiles of a non-Azure machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the machine.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List hybrid machine license profile operation response as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LicenseProfileInner> list(String resourceGroupName, String machineName);

    /**
     * The operation to get all license profiles of a non-Azure machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the machine.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List hybrid machine license profile operation response as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<LicenseProfileInner> list(String resourceGroupName, String machineName, Context context);
}
