// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.hybridcompute.models.EsuEligibility;
import com.azure.resourcemanager.hybridcompute.models.EsuKey;
import com.azure.resourcemanager.hybridcompute.models.EsuKeyState;
import com.azure.resourcemanager.hybridcompute.models.EsuServerType;
import com.azure.resourcemanager.hybridcompute.models.ProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Describes a license profile in a hybrid machine. */
@Fluent
public final class LicenseProfileInner extends Resource {
    /*
     * Describe the properties of a license profile.
     */
    @JsonProperty(value = "properties")
    private LicenseProfileProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of LicenseProfileInner class. */
    public LicenseProfileInner() {
    }

    /**
     * Get the innerProperties property: Describe the properties of a license profile.
     *
     * @return the innerProperties value.
     */
    private LicenseProfileProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /** {@inheritDoc} */
    @Override
    public LicenseProfileInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public LicenseProfileInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the assignedLicense property: The resource id of the license.
     *
     * @return the assignedLicense value.
     */
    public String assignedLicense() {
        return this.innerProperties() == null ? null : this.innerProperties().assignedLicense();
    }

    /**
     * Set the assignedLicense property: The resource id of the license.
     *
     * @param assignedLicense the assignedLicense value to set.
     * @return the LicenseProfileInner object itself.
     */
    public LicenseProfileInner withAssignedLicense(String assignedLicense) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LicenseProfileProperties();
        }
        this.innerProperties().withAssignedLicense(assignedLicense);
        return this;
    }

    /**
     * Get the serverType property: The type of the Esu servers.
     *
     * @return the serverType value.
     */
    public EsuServerType serverType() {
        return this.innerProperties() == null ? null : this.innerProperties().serverType();
    }

    /**
     * Get the esuEligibility property: Indicates the eligibility state of Esu.
     *
     * @return the esuEligibility value.
     */
    public EsuEligibility esuEligibility() {
        return this.innerProperties() == null ? null : this.innerProperties().esuEligibility();
    }

    /**
     * Get the esuKeyState property: Indicates whether there is an ESU Key currently active for the machine.
     *
     * @return the esuKeyState value.
     */
    public EsuKeyState esuKeyState() {
        return this.innerProperties() == null ? null : this.innerProperties().esuKeyState();
    }

    /**
     * Get the assignedLicenseImmutableId property: The guid id of the license.
     *
     * @return the assignedLicenseImmutableId value.
     */
    public String assignedLicenseImmutableId() {
        return this.innerProperties() == null ? null : this.innerProperties().assignedLicenseImmutableId();
    }

    /**
     * Get the esuKeys property: The list of ESU keys.
     *
     * @return the esuKeys value.
     */
    public List<EsuKey> esuKeys() {
        return this.innerProperties() == null ? null : this.innerProperties().esuKeys();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
