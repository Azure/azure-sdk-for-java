// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseProfileUpdateProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/** Describes a License Profile Update. */
@Fluent
public final class LicenseProfileUpdate extends ResourceUpdate {
    /*
     * Describe the Update properties of a license profile.
     */
    @JsonProperty(value = "properties")
    private LicenseProfileUpdateProperties innerProperties;

    /** Creates an instance of LicenseProfileUpdate class. */
    public LicenseProfileUpdate() {
    }

    /**
     * Get the innerProperties property: Describe the Update properties of a license profile.
     *
     * @return the innerProperties value.
     */
    private LicenseProfileUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public LicenseProfileUpdate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the assignedLicense property: The resource id of the license.
     *
     * @return the assignedLicense value.
     */
    public String assignedLicense() {
        return this.innerProperties() == null ? null : this.innerProperties().assignedLicense();
    }

    /**
     * Set the assignedLicense property: The resource id of the license.
     *
     * @param assignedLicense the assignedLicense value to set.
     * @return the LicenseProfileUpdate object itself.
     */
    public LicenseProfileUpdate withAssignedLicense(String assignedLicense) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LicenseProfileUpdateProperties();
        }
        this.innerProperties().withAssignedLicense(assignedLicense);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
