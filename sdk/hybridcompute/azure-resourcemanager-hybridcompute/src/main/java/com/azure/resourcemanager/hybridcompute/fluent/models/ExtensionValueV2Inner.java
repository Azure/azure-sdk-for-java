// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes an Extension Metadata.
 */
@Immutable
public final class ExtensionValueV2Inner extends ProxyResource {
    /*
     * The single extension based on search criteria.
     */
    private ExtensionValueV2Properties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ExtensionValueV2Inner class.
     */
    public ExtensionValueV2Inner() {
    }

    /**
     * Get the innerProperties property: The single extension based on search criteria.
     * 
     * @return the innerProperties value.
     */
    private ExtensionValueV2Properties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the extensionUris property: A list of locations where the extension packages can be found.
     * 
     * @return the extensionUris value.
     */
    public List<String> extensionUris() {
        return this.innerProperties() == null ? null : this.innerProperties().extensionUris();
    }

    /**
     * Get the extensionSignatureUri property: Location of the signature files for the extension.
     * 
     * @return the extensionSignatureUri value.
     */
    public String extensionSignatureUri() {
        return this.innerProperties() == null ? null : this.innerProperties().extensionSignatureUri();
    }

    /**
     * Get the operatingSystem property: The operating system (Windows, Linux, etc.) this extension supports.
     * 
     * @return the operatingSystem value.
     */
    public String operatingSystem() {
        return this.innerProperties() == null ? null : this.innerProperties().operatingSystem();
    }

    /**
     * Get the architecture property: Architectures (x64, arms64, etc.) that this extension supports.
     * 
     * @return the architecture value.
     */
    public List<String> architecture() {
        return this.innerProperties() == null ? null : this.innerProperties().architecture();
    }

    /**
     * Get the version property: The version of the Extension being received.
     * 
     * @return the version value.
     */
    public String version() {
        return this.innerProperties() == null ? null : this.innerProperties().version();
    }

    /**
     * Get the extensionType property: The type of the Extension being received.
     * 
     * @return the extensionType value.
     */
    public String extensionType() {
        return this.innerProperties() == null ? null : this.innerProperties().extensionType();
    }

    /**
     * Get the publisher property: The publisher of the Extension being received.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.innerProperties() == null ? null : this.innerProperties().publisher();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtensionValueV2Inner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtensionValueV2Inner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExtensionValueV2Inner.
     */
    public static ExtensionValueV2Inner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtensionValueV2Inner deserializedExtensionValueV2Inner = new ExtensionValueV2Inner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedExtensionValueV2Inner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedExtensionValueV2Inner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedExtensionValueV2Inner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedExtensionValueV2Inner.innerProperties = ExtensionValueV2Properties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedExtensionValueV2Inner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtensionValueV2Inner;
        });
    }
}
