// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Describes the hardware of the machine.
 */
@Immutable
public final class HardwareProfile implements JsonSerializable<HardwareProfile> {
    /*
     * The total physical memory on the machine
     */
    private Long totalPhysicalMemoryInBytes;

    /*
     * The total number of CPU sockets available on the machine
     */
    private Integer numberOfCpuSockets;

    /*
     * The physical processors of the machine.
     */
    private List<Processor> processors;

    /**
     * Creates an instance of HardwareProfile class.
     */
    public HardwareProfile() {
    }

    /**
     * Get the totalPhysicalMemoryInBytes property: The total physical memory on the machine.
     * 
     * @return the totalPhysicalMemoryInBytes value.
     */
    public Long totalPhysicalMemoryInBytes() {
        return this.totalPhysicalMemoryInBytes;
    }

    /**
     * Get the numberOfCpuSockets property: The total number of CPU sockets available on the machine.
     * 
     * @return the numberOfCpuSockets value.
     */
    public Integer numberOfCpuSockets() {
        return this.numberOfCpuSockets;
    }

    /**
     * Get the processors property: The physical processors of the machine.
     * 
     * @return the processors value.
     */
    public List<Processor> processors() {
        return this.processors;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (processors() != null) {
            processors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HardwareProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HardwareProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HardwareProfile.
     */
    public static HardwareProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HardwareProfile deserializedHardwareProfile = new HardwareProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalPhysicalMemoryInBytes".equals(fieldName)) {
                    deserializedHardwareProfile.totalPhysicalMemoryInBytes = reader.getNullable(JsonReader::getLong);
                } else if ("numberOfCpuSockets".equals(fieldName)) {
                    deserializedHardwareProfile.numberOfCpuSockets = reader.getNullable(JsonReader::getInt);
                } else if ("processors".equals(fieldName)) {
                    List<Processor> processors = reader.readArray(reader1 -> Processor.fromJson(reader1));
                    deserializedHardwareProfile.processors = processors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHardwareProfile;
        });
    }
}
