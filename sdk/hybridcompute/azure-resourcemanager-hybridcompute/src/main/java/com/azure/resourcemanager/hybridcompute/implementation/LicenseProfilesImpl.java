// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcompute.fluent.LicenseProfilesClient;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseProfileInner;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfile;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfiles;

public final class LicenseProfilesImpl implements LicenseProfiles {
    private static final ClientLogger LOGGER = new ClientLogger(LicenseProfilesImpl.class);

    private final LicenseProfilesClient innerClient;

    private final com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager;

    public LicenseProfilesImpl(LicenseProfilesClient innerClient,
        com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<LicenseProfile> getWithResponse(String resourceGroupName, String machineName, Context context) {
        Response<LicenseProfileInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, machineName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new LicenseProfileImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public LicenseProfile get(String resourceGroupName, String machineName) {
        LicenseProfileInner inner = this.serviceClient().get(resourceGroupName, machineName);
        if (inner != null) {
            return new LicenseProfileImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String machineName) {
        this.serviceClient().delete(resourceGroupName, machineName);
    }

    public void delete(String resourceGroupName, String machineName, Context context) {
        this.serviceClient().delete(resourceGroupName, machineName, context);
    }

    public PagedIterable<LicenseProfile> list(String resourceGroupName, String machineName) {
        PagedIterable<LicenseProfileInner> inner = this.serviceClient().list(resourceGroupName, machineName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LicenseProfileImpl(inner1, this.manager()));
    }

    public PagedIterable<LicenseProfile> list(String resourceGroupName, String machineName, Context context) {
        PagedIterable<LicenseProfileInner> inner = this.serviceClient().list(resourceGroupName, machineName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new LicenseProfileImpl(inner1, this.manager()));
    }

    public LicenseProfile getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        return this.getWithResponse(resourceGroupName, machineName, Context.NONE).getValue();
    }

    public Response<LicenseProfile> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        return this.getWithResponse(resourceGroupName, machineName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        this.delete(resourceGroupName, machineName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String machineName = ResourceManagerUtils.getValueFromIdByName(id, "machines");
        if (machineName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'machines'.", id)));
        }
        this.delete(resourceGroupName, machineName, context);
    }

    private LicenseProfilesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcompute.HybridComputeManager manager() {
        return this.serviceManager;
    }

    public LicenseProfileImpl define() {
        return new LicenseProfileImpl(this.manager());
    }
}
