// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcompute.models.Identity;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Defines the HybridIdentityMetadata. */
@Fluent
public final class HybridIdentityMetadataInner extends ProxyResource {
    /*
     * Resource properties.
     */
    @JsonProperty(value = "properties", required = true)
    private HybridIdentityMetadataProperties innerProperties = new HybridIdentityMetadataProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of HybridIdentityMetadataInner class. */
    public HybridIdentityMetadataInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     *
     * @return the innerProperties value.
     */
    private HybridIdentityMetadataProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the vmId property: The unique identifier for the resource.
     *
     * @return the vmId value.
     */
    public String vmId() {
        return this.innerProperties() == null ? null : this.innerProperties().vmId();
    }

    /**
     * Set the vmId property: The unique identifier for the resource.
     *
     * @param vmId the vmId value to set.
     * @return the HybridIdentityMetadataInner object itself.
     */
    public HybridIdentityMetadataInner withVmId(String vmId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HybridIdentityMetadataProperties();
        }
        this.innerProperties().withVmId(vmId);
        return this;
    }

    /**
     * Get the publicKey property: The Public Key.
     *
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.innerProperties() == null ? null : this.innerProperties().publicKey();
    }

    /**
     * Set the publicKey property: The Public Key.
     *
     * @param publicKey the publicKey value to set.
     * @return the HybridIdentityMetadataInner object itself.
     */
    public HybridIdentityMetadataInner withPublicKey(String publicKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HybridIdentityMetadataProperties();
        }
        this.innerProperties().withPublicKey(publicKey);
        return this;
    }

    /**
     * Get the identity property: Identity for the resource.
     *
     * @return the identity value.
     */
    public Identity identity() {
        return this.innerProperties() == null ? null : this.innerProperties().identity();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model HybridIdentityMetadataInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HybridIdentityMetadataInner.class);
}
