// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseProfileInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of LicenseProfile.
 */
public interface LicenseProfile {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     * 
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the softwareAssuranceCustomer property: Specifies if this machine is licensed as part of a Software
     * Assurance agreement.
     * 
     * @return the softwareAssuranceCustomer value.
     */
    Boolean softwareAssuranceCustomer();

    /**
     * Gets the assignedLicense property: The resource id of the license.
     * 
     * @return the assignedLicense value.
     */
    String assignedLicense();

    /**
     * Gets the serverType property: The type of the Esu servers.
     * 
     * @return the serverType value.
     */
    EsuServerType serverType();

    /**
     * Gets the esuEligibility property: Indicates the eligibility state of Esu.
     * 
     * @return the esuEligibility value.
     */
    EsuEligibility esuEligibility();

    /**
     * Gets the esuKeyState property: Indicates whether there is an ESU Key currently active for the machine.
     * 
     * @return the esuKeyState value.
     */
    EsuKeyState esuKeyState();

    /**
     * Gets the assignedLicenseImmutableId property: The guid id of the license.
     * 
     * @return the assignedLicenseImmutableId value.
     */
    String assignedLicenseImmutableId();

    /**
     * Gets the esuKeys property: The list of ESU keys.
     * 
     * @return the esuKeys value.
     */
    List<EsuKey> esuKeys();

    /**
     * Gets the subscriptionStatus property: Indicates the subscription status of the product.
     * 
     * @return the subscriptionStatus value.
     */
    LicenseProfileSubscriptionStatus subscriptionStatus();

    /**
     * Gets the productType property: Indicates the product type of the license.
     * 
     * @return the productType value.
     */
    LicenseProfileProductType productType();

    /**
     * Gets the enrollmentDate property: The timestamp in UTC when the user enrolls the feature.
     * 
     * @return the enrollmentDate value.
     */
    OffsetDateTime enrollmentDate();

    /**
     * Gets the billingStartDate property: The timestamp in UTC when the billing starts.
     * 
     * @return the billingStartDate value.
     */
    OffsetDateTime billingStartDate();

    /**
     * Gets the disenrollmentDate property: The timestamp in UTC when the user disenrolled the feature.
     * 
     * @return the disenrollmentDate value.
     */
    OffsetDateTime disenrollmentDate();

    /**
     * Gets the billingEndDate property: The timestamp in UTC when the billing ends.
     * 
     * @return the billingEndDate value.
     */
    OffsetDateTime billingEndDate();

    /**
     * Gets the error property: The errors that were encountered during the feature enrollment or disenrollment.
     * 
     * @return the error value.
     */
    ManagementError error();

    /**
     * Gets the productFeatures property: The list of product features.
     * 
     * @return the productFeatures value.
     */
    List<ProductFeature> productFeatures();

    /**
     * Gets the region of the resource.
     * 
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     * 
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     * 
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.hybridcompute.fluent.models.LicenseProfileInner object.
     * 
     * @return the inner object.
     */
    LicenseProfileInner innerModel();

    /**
     * The entirety of the LicenseProfile definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithLocation,
        DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }

    /**
     * The LicenseProfile definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the LicenseProfile definition.
         */
        interface Blank extends WithLocation {
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify location.
         */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(Region location);

            /**
             * Specifies the region for the resource.
             * 
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithParentResource withRegion(String location);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify parent resource.
         */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, machineName.
             * 
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param machineName The name of the hybrid machine.
             * @return the next definition stage.
             */
            WithCreate withExistingMachine(String resourceGroupName, String machineName);
        }

        /**
         * The stage of the LicenseProfile definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTags, DefinitionStages.WithSoftwareAssuranceCustomer,
            DefinitionStages.WithAssignedLicense, DefinitionStages.WithSubscriptionStatus,
            DefinitionStages.WithProductType, DefinitionStages.WithProductFeatures {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            LicenseProfile create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            LicenseProfile create(Context context);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify softwareAssuranceCustomer.
         */
        interface WithSoftwareAssuranceCustomer {
            /**
             * Specifies the softwareAssuranceCustomer property: Specifies if this machine is licensed as part of a
             * Software Assurance agreement..
             * 
             * @param softwareAssuranceCustomer Specifies if this machine is licensed as part of a Software Assurance
             * agreement.
             * @return the next definition stage.
             */
            WithCreate withSoftwareAssuranceCustomer(Boolean softwareAssuranceCustomer);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify assignedLicense.
         */
        interface WithAssignedLicense {
            /**
             * Specifies the assignedLicense property: The resource id of the license..
             * 
             * @param assignedLicense The resource id of the license.
             * @return the next definition stage.
             */
            WithCreate withAssignedLicense(String assignedLicense);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify subscriptionStatus.
         */
        interface WithSubscriptionStatus {
            /**
             * Specifies the subscriptionStatus property: Indicates the subscription status of the product..
             * 
             * @param subscriptionStatus Indicates the subscription status of the product.
             * @return the next definition stage.
             */
            WithCreate withSubscriptionStatus(LicenseProfileSubscriptionStatus subscriptionStatus);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify productType.
         */
        interface WithProductType {
            /**
             * Specifies the productType property: Indicates the product type of the license..
             * 
             * @param productType Indicates the product type of the license.
             * @return the next definition stage.
             */
            WithCreate withProductType(LicenseProfileProductType productType);
        }

        /**
         * The stage of the LicenseProfile definition allowing to specify productFeatures.
         */
        interface WithProductFeatures {
            /**
             * Specifies the productFeatures property: The list of product features..
             * 
             * @param productFeatures The list of product features.
             * @return the next definition stage.
             */
            WithCreate withProductFeatures(List<ProductFeature> productFeatures);
        }
    }

    /**
     * Begins update for the LicenseProfile resource.
     * 
     * @return the stage of resource update.
     */
    LicenseProfile.Update update();

    /**
     * The template for LicenseProfile update.
     */
    interface Update
        extends UpdateStages.WithTags, UpdateStages.WithSoftwareAssuranceCustomer, UpdateStages.WithAssignedLicense,
        UpdateStages.WithSubscriptionStatus, UpdateStages.WithProductType, UpdateStages.WithProductFeatures {
        /**
         * Executes the update request.
         * 
         * @return the updated resource.
         */
        LicenseProfile apply();

        /**
         * Executes the update request.
         * 
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        LicenseProfile apply(Context context);
    }

    /**
     * The LicenseProfile update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the LicenseProfile update allowing to specify tags.
         */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags.
             * 
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }

        /**
         * The stage of the LicenseProfile update allowing to specify softwareAssuranceCustomer.
         */
        interface WithSoftwareAssuranceCustomer {
            /**
             * Specifies the softwareAssuranceCustomer property: Specifies if this machine is licensed as part of a
             * Software Assurance agreement..
             * 
             * @param softwareAssuranceCustomer Specifies if this machine is licensed as part of a Software Assurance
             * agreement.
             * @return the next definition stage.
             */
            Update withSoftwareAssuranceCustomer(Boolean softwareAssuranceCustomer);
        }

        /**
         * The stage of the LicenseProfile update allowing to specify assignedLicense.
         */
        interface WithAssignedLicense {
            /**
             * Specifies the assignedLicense property: The resource id of the license..
             * 
             * @param assignedLicense The resource id of the license.
             * @return the next definition stage.
             */
            Update withAssignedLicense(String assignedLicense);
        }

        /**
         * The stage of the LicenseProfile update allowing to specify subscriptionStatus.
         */
        interface WithSubscriptionStatus {
            /**
             * Specifies the subscriptionStatus property: Indicates the subscription status of the product..
             * 
             * @param subscriptionStatus Indicates the subscription status of the product.
             * @return the next definition stage.
             */
            Update withSubscriptionStatus(LicenseProfileSubscriptionStatusUpdate subscriptionStatus);
        }

        /**
         * The stage of the LicenseProfile update allowing to specify productType.
         */
        interface WithProductType {
            /**
             * Specifies the productType property: Indicates the product type of the license..
             * 
             * @param productType Indicates the product type of the license.
             * @return the next definition stage.
             */
            Update withProductType(LicenseProfileProductType productType);
        }

        /**
         * The stage of the LicenseProfile update allowing to specify productFeatures.
         */
        interface WithProductFeatures {
            /**
             * Specifies the productFeatures property: The list of product feature updates..
             * 
             * @param productFeatures The list of product feature updates.
             * @return the next definition stage.
             */
            Update withProductFeaturesForUpdate(List<ProductFeatureUpdate> productFeatures);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    LicenseProfile refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    LicenseProfile refresh(Context context);
}
