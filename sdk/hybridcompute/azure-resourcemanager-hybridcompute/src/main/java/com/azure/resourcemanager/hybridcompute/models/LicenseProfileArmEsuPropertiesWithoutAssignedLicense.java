// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Immutable;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Describes the properties of a License Profile ARM model.
 */
@Immutable
public class LicenseProfileArmEsuPropertiesWithoutAssignedLicense extends LicenseProfileStorageModelEsuProperties {
    /*
     * The type of the Esu servers.
     */
    @JsonProperty(value = "serverType", access = JsonProperty.Access.WRITE_ONLY)
    private EsuServerType serverType;

    /*
     * Indicates the eligibility state of Esu.
     */
    @JsonProperty(value = "esuEligibility", access = JsonProperty.Access.WRITE_ONLY)
    private EsuEligibility esuEligibility;

    /*
     * Indicates whether there is an ESU Key currently active for the machine.
     */
    @JsonProperty(value = "esuKeyState", access = JsonProperty.Access.WRITE_ONLY)
    private EsuKeyState esuKeyState;

    /**
     * Creates an instance of LicenseProfileArmEsuPropertiesWithoutAssignedLicense class.
     */
    public LicenseProfileArmEsuPropertiesWithoutAssignedLicense() {
    }

    /**
     * Get the serverType property: The type of the Esu servers.
     * 
     * @return the serverType value.
     */
    public EsuServerType serverType() {
        return this.serverType;
    }

    /**
     * Get the esuEligibility property: Indicates the eligibility state of Esu.
     * 
     * @return the esuEligibility value.
     */
    public EsuEligibility esuEligibility() {
        return this.esuEligibility;
    }

    /**
     * Get the esuKeyState property: Indicates whether there is an ESU Key currently active for the machine.
     * 
     * @return the esuKeyState value.
     */
    public EsuKeyState esuKeyState() {
        return this.esuKeyState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
