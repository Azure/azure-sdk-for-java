// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseInner;

/**
 * Resource collection API of Licenses.
 */
public interface Licenses {
    /**
     * The operation to validate a license.
     * 
     * @param parameters Parameters supplied to the license validation operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license in a hybrid machine.
     */
    License validateLicense(LicenseInner parameters);

    /**
     * The operation to validate a license.
     * 
     * @param parameters Parameters supplied to the license validation operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license in a hybrid machine.
     */
    License validateLicense(LicenseInner parameters, Context context);

    /**
     * Retrieves information about the view of a license.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param licenseName The name of the license.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license in a hybrid machine along with {@link Response}.
     */
    Response<License> getByResourceGroupWithResponse(String resourceGroupName, String licenseName, Context context);

    /**
     * Retrieves information about the view of a license.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param licenseName The name of the license.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license in a hybrid machine.
     */
    License getByResourceGroup(String resourceGroupName, String licenseName);

    /**
     * The operation to delete a license.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param licenseName The name of the license.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String licenseName);

    /**
     * The operation to delete a license.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param licenseName The name of the license.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String licenseName, Context context);

    /**
     * The operation to get all licenses of a non-Azure machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List license operation response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<License> listByResourceGroup(String resourceGroupName);

    /**
     * The operation to get all licenses of a non-Azure machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List license operation response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<License> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * The operation to get all licenses of a non-Azure machine.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List license operation response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<License> list();

    /**
     * The operation to get all licenses of a non-Azure machine.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List license operation response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<License> list(Context context);

    /**
     * Retrieves information about the view of a license.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license in a hybrid machine along with {@link Response}.
     */
    License getById(String id);

    /**
     * Retrieves information about the view of a license.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return describes a license in a hybrid machine along with {@link Response}.
     */
    Response<License> getByIdWithResponse(String id, Context context);

    /**
     * The operation to delete a license.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * The operation to delete a license.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new License resource.
     * 
     * @param name resource name.
     * @return the first stage of the new License definition.
     */
    License.DefinitionStages.Blank define(String name);
}
