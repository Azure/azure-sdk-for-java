// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridcompute.fluent.models.AccessRuleProperties;
import java.io.IOException;
import java.util.List;

/**
 * Access rule.
 */
@Immutable
public final class AccessRule implements JsonSerializable<AccessRule> {
    /*
     * Name of the access rule.
     */
    private String name;

    /*
     * Access rule properties
     */
    private AccessRuleProperties innerProperties;

    /**
     * Creates an instance of AccessRule class.
     */
    public AccessRule() {
    }

    /**
     * Get the name property: Name of the access rule.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the innerProperties property: Access rule properties.
     * 
     * @return the innerProperties value.
     */
    private AccessRuleProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the direction property: Direction of the access rule.
     * 
     * @return the direction value.
     */
    public AccessRuleDirection direction() {
        return this.innerProperties() == null ? null : this.innerProperties().direction();
    }

    /**
     * Get the addressPrefixes property: Address prefixes that are allowed access.
     * 
     * @return the addressPrefixes value.
     */
    public List<String> addressPrefixes() {
        return this.innerProperties() == null ? null : this.innerProperties().addressPrefixes();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccessRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccessRule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the AccessRule.
     */
    public static AccessRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccessRule deserializedAccessRule = new AccessRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedAccessRule.name = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAccessRule.innerProperties = AccessRuleProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccessRule;
        });
    }
}
