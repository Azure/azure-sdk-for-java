// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import com.azure.resourcemanager.hybridcompute.models.ProvisioningState;
import java.io.IOException;
import java.util.Map;

/**
 * Describes a license in a hybrid machine.
 */
@Fluent
public final class LicenseInner extends Resource {
    /*
     * Hybrid Compute License properties
     */
    private LicenseProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of LicenseInner class.
     */
    public LicenseInner() {
    }

    /**
     * Get the innerProperties property: Hybrid Compute License properties.
     * 
     * @return the innerProperties value.
     */
    private LicenseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenseInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LicenseInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state, which only appears in the response.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the tenantId property: Describes the tenant id.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Set the tenantId property: Describes the tenant id.
     * 
     * @param tenantId the tenantId value to set.
     * @return the LicenseInner object itself.
     */
    public LicenseInner withTenantId(String tenantId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LicenseProperties();
        }
        this.innerProperties().withTenantId(tenantId);
        return this;
    }

    /**
     * Get the licenseType property: The type of the license resource.
     * 
     * @return the licenseType value.
     */
    public LicenseType licenseType() {
        return this.innerProperties() == null ? null : this.innerProperties().licenseType();
    }

    /**
     * Set the licenseType property: The type of the license resource.
     * 
     * @param licenseType the licenseType value to set.
     * @return the LicenseInner object itself.
     */
    public LicenseInner withLicenseType(LicenseType licenseType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LicenseProperties();
        }
        this.innerProperties().withLicenseType(licenseType);
        return this;
    }

    /**
     * Get the licenseDetails property: Describes the properties of a License.
     * 
     * @return the licenseDetails value.
     */
    public LicenseDetails licenseDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().licenseDetails();
    }

    /**
     * Set the licenseDetails property: Describes the properties of a License.
     * 
     * @param licenseDetails the licenseDetails value to set.
     * @return the LicenseInner object itself.
     */
    public LicenseInner withLicenseDetails(LicenseDetails licenseDetails) {
        if (this.innerProperties() == null) {
            this.innerProperties = new LicenseProperties();
        }
        this.innerProperties().withLicenseDetails(licenseDetails);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LicenseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LicenseInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LicenseInner.
     */
    public static LicenseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LicenseInner deserializedLicenseInner = new LicenseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedLicenseInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedLicenseInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedLicenseInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedLicenseInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedLicenseInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedLicenseInner.innerProperties = LicenseProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedLicenseInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLicenseInner;
        });
    }
}
