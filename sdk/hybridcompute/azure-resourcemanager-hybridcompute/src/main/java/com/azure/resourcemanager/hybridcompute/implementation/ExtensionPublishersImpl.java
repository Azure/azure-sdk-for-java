// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hybridcompute.fluent.ExtensionPublishersClient;
import com.azure.resourcemanager.hybridcompute.fluent.models.ExtensionPublisherInner;
import com.azure.resourcemanager.hybridcompute.models.ExtensionPublisher;
import com.azure.resourcemanager.hybridcompute.models.ExtensionPublishers;

public final class ExtensionPublishersImpl implements ExtensionPublishers {
    private static final ClientLogger LOGGER = new ClientLogger(ExtensionPublishersImpl.class);

    private final ExtensionPublishersClient innerClient;

    private final com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager;

    public ExtensionPublishersImpl(ExtensionPublishersClient innerClient,
        com.azure.resourcemanager.hybridcompute.HybridComputeManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ExtensionPublisher> list(String location) {
        PagedIterable<ExtensionPublisherInner> inner = this.serviceClient().list(location);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionPublisherImpl(inner1, this.manager()));
    }

    public PagedIterable<ExtensionPublisher> list(String location, Context context) {
        PagedIterable<ExtensionPublisherInner> inner = this.serviceClient().list(location, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ExtensionPublisherImpl(inner1, this.manager()));
    }

    private ExtensionPublishersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hybridcompute.HybridComputeManager manager() {
        return this.serviceManager;
    }
}
