// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the firmware of the machine.
 */
@Immutable
public final class Processor implements JsonSerializable<Processor> {
    /*
     * The name of the processor.
     */
    private String name;

    /*
     * The total number of physical cores on the processor.
     */
    private Integer numberOfCores;

    /**
     * Creates an instance of Processor class.
     */
    public Processor() {
    }

    /**
     * Get the name property: The name of the processor.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the numberOfCores property: The total number of physical cores on the processor.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Processor from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Processor if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Processor.
     */
    public static Processor fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Processor deserializedProcessor = new Processor();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedProcessor.name = reader.getString();
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedProcessor.numberOfCores = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProcessor;
        });
    }
}
