// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes Extension Metadata properties.
 */
@Immutable
public final class ExtensionValueProperties implements JsonSerializable<ExtensionValueProperties> {
    /*
     * The version of the Extension being received.
     */
    private String version;

    /*
     * The type of the Extension being received.
     */
    private String extensionType;

    /*
     * The publisher of the Extension being received.
     */
    private String publisher;

    /**
     * Creates an instance of ExtensionValueProperties class.
     */
    public ExtensionValueProperties() {
    }

    /**
     * Get the version property: The version of the Extension being received.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the extensionType property: The type of the Extension being received.
     * 
     * @return the extensionType value.
     */
    public String extensionType() {
        return this.extensionType;
    }

    /**
     * Get the publisher property: The publisher of the Extension being received.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExtensionValueProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExtensionValueProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExtensionValueProperties.
     */
    public static ExtensionValueProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExtensionValueProperties deserializedExtensionValueProperties = new ExtensionValueProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("version".equals(fieldName)) {
                    deserializedExtensionValueProperties.version = reader.getString();
                } else if ("extensionType".equals(fieldName)) {
                    deserializedExtensionValueProperties.extensionType = reader.getString();
                } else if ("publisher".equals(fieldName)) {
                    deserializedExtensionValueProperties.publisher = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExtensionValueProperties;
        });
    }
}
