// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileProductType;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileSubscriptionStatusUpdate;
import com.azure.resourcemanager.hybridcompute.models.LicenseProfileUpdate;
import com.azure.resourcemanager.hybridcompute.models.ProductFeatureUpdate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicenseProfileUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LicenseProfileUpdate model = BinaryData.fromString(
            "{\"properties\":{\"softwareAssurance\":{\"softwareAssuranceCustomer\":false},\"esuProfile\":{\"assignedLicense\":\"yqupedeojnabckh\"},\"productProfile\":{\"subscriptionStatus\":\"Disable\",\"productType\":\"WindowsIoTEnterprise\",\"productFeatures\":[{\"name\":\"tfhvpesapskrdqmh\",\"subscriptionStatus\":\"Disable\"},{\"name\":\"tldwkyzxuutk\",\"subscriptionStatus\":\"Enable\"},{\"name\":\"cwsvlxotog\",\"subscriptionStatus\":\"Disable\"}]}},\"tags\":{\"nmic\":\"qsx\",\"fcnj\":\"kvceoveilovnotyf\",\"nxdhbt\":\"k\"}}")
            .toObject(LicenseProfileUpdate.class);
        Assertions.assertEquals("qsx", model.tags().get("nmic"));
        Assertions.assertEquals(false, model.softwareAssuranceCustomer());
        Assertions.assertEquals("yqupedeojnabckh", model.assignedLicense());
        Assertions.assertEquals(LicenseProfileSubscriptionStatusUpdate.DISABLE, model.subscriptionStatus());
        Assertions.assertEquals(LicenseProfileProductType.WINDOWS_IO_TENTERPRISE, model.productType());
        Assertions.assertEquals("tfhvpesapskrdqmh", model.productFeatures().get(0).name());
        Assertions.assertEquals(LicenseProfileSubscriptionStatusUpdate.DISABLE,
            model.productFeatures().get(0).subscriptionStatus());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LicenseProfileUpdate model
            = new LicenseProfileUpdate().withTags(mapOf("nmic", "qsx", "fcnj", "kvceoveilovnotyf", "nxdhbt", "k"))
                .withSoftwareAssuranceCustomer(false)
                .withAssignedLicense("yqupedeojnabckh")
                .withSubscriptionStatus(LicenseProfileSubscriptionStatusUpdate.DISABLE)
                .withProductType(LicenseProfileProductType.WINDOWS_IO_TENTERPRISE)
                .withProductFeatures(Arrays.asList(
                    new ProductFeatureUpdate().withName("tfhvpesapskrdqmh")
                        .withSubscriptionStatus(LicenseProfileSubscriptionStatusUpdate.DISABLE),
                    new ProductFeatureUpdate().withName("tldwkyzxuutk")
                        .withSubscriptionStatus(LicenseProfileSubscriptionStatusUpdate.ENABLE),
                    new ProductFeatureUpdate().withName("cwsvlxotog")
                        .withSubscriptionStatus(LicenseProfileSubscriptionStatusUpdate.DISABLE)));
        model = BinaryData.fromObject(model).toObject(LicenseProfileUpdate.class);
        Assertions.assertEquals("qsx", model.tags().get("nmic"));
        Assertions.assertEquals(false, model.softwareAssuranceCustomer());
        Assertions.assertEquals("yqupedeojnabckh", model.assignedLicense());
        Assertions.assertEquals(LicenseProfileSubscriptionStatusUpdate.DISABLE, model.subscriptionStatus());
        Assertions.assertEquals(LicenseProfileProductType.WINDOWS_IO_TENTERPRISE, model.productType());
        Assertions.assertEquals("tfhvpesapskrdqmh", model.productFeatures().get(0).name());
        Assertions.assertEquals(LicenseProfileSubscriptionStatusUpdate.DISABLE,
            model.productFeatures().get(0).subscriptionStatus());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
