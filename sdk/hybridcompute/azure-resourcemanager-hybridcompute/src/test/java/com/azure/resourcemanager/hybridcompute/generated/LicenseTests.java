// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.License;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicenseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        License model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Deleting\",\"tenantId\":\"glmjth\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Deactivated\",\"target\":\"Windows Server 2012\",\"edition\":\"Standard\",\"type\":\"vCore\",\"processors\":1686193188,\"assignedLicenses\":102046613,\"immutableId\":\"hkh\"}},\"location\":\"uigdtopbobjog\",\"tags\":{\"a\":\"w\"},\"id\":\"a\",\"name\":\"hrzayvvtpgvdf\",\"type\":\"iotkftutqxl\"}")
            .toObject(License.class);
        Assertions.assertEquals("uigdtopbobjog", model.location());
        Assertions.assertEquals("w", model.tags().get("a"));
        Assertions.assertEquals("glmjth", model.tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, model.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, model.licenseDetails().type());
        Assertions.assertEquals(1686193188, model.licenseDetails().processors());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        License model = new License().withLocation("uigdtopbobjog")
            .withTags(mapOf("a", "w"))
            .withTenantId("glmjth")
            .withLicenseType(LicenseType.ESU)
            .withLicenseDetails(new LicenseDetails().withState(LicenseState.DEACTIVATED)
                .withTarget(LicenseTarget.WINDOWS_SERVER_2012)
                .withEdition(LicenseEdition.STANDARD)
                .withType(LicenseCoreType.V_CORE)
                .withProcessors(1686193188));
        model = BinaryData.fromObject(model).toObject(License.class);
        Assertions.assertEquals("uigdtopbobjog", model.location());
        Assertions.assertEquals("w", model.tags().get("a"));
        Assertions.assertEquals("glmjth", model.tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, model.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, model.licenseDetails().type());
        Assertions.assertEquals(1686193188, model.licenseDetails().processors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
