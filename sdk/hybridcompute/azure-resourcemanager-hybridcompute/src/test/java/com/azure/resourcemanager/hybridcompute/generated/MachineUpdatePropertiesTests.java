// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.MachineUpdateProperties;
import com.azure.resourcemanager.hybridcompute.models.AgentUpgrade;
import com.azure.resourcemanager.hybridcompute.models.AssessmentModeTypes;
import com.azure.resourcemanager.hybridcompute.models.CloudMetadata;
import com.azure.resourcemanager.hybridcompute.models.LocationData;
import com.azure.resourcemanager.hybridcompute.models.OSProfile;
import com.azure.resourcemanager.hybridcompute.models.OSProfileLinuxConfiguration;
import com.azure.resourcemanager.hybridcompute.models.OSProfileWindowsConfiguration;
import com.azure.resourcemanager.hybridcompute.models.PatchModeTypes;
import org.junit.jupiter.api.Assertions;

public final class MachineUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineUpdateProperties model =
            BinaryData
                .fromString(
                    "{\"locationData\":{\"name\":\"spughftqsxhq\",\"city\":\"j\",\"district\":\"kndxdigrjgu\",\"countryOrRegion\":\"zdmsyqtfi\"},\"osProfile\":{\"computerName\":\"botzingamvppho\",\"windowsConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"AutomaticByPlatform\",\"patchMode\":\"Manual\"}},\"linuxConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"ImageDefault\",\"patchMode\":\"ImageDefault\"}}},\"cloudMetadata\":{\"provider\":\"wynwcvtbvkayhm\"},\"agentUpgrade\":{\"desiredVersion\":\"yqiatkzwp\",\"correlationId\":\"p\",\"enableAutomaticUpgrade\":true,\"lastAttemptDesiredVersion\":\"a\",\"lastAttemptTimestamp\":\"gvvs\",\"lastAttemptStatus\":\"Failed\",\"lastAttemptMessage\":\"jguq\"},\"parentClusterResourceId\":\"wygzlvdnkfxusem\",\"privateLinkScopeResourceId\":\"zrmuhapfcqdps\"}")
                .toObject(MachineUpdateProperties.class);
        Assertions.assertEquals("spughftqsxhq", model.locationData().name());
        Assertions.assertEquals("j", model.locationData().city());
        Assertions.assertEquals("kndxdigrjgu", model.locationData().district());
        Assertions.assertEquals("zdmsyqtfi", model.locationData().countryOrRegion());
        Assertions
            .assertEquals(
                AssessmentModeTypes.AUTOMATIC_BY_PLATFORM, model.osProfile().windowsConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.MANUAL, model.osProfile().windowsConfiguration().patchMode());
        Assertions
            .assertEquals(AssessmentModeTypes.IMAGE_DEFAULT, model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.IMAGE_DEFAULT, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals("yqiatkzwp", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals("p", model.agentUpgrade().correlationId());
        Assertions.assertEquals(true, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("wygzlvdnkfxusem", model.parentClusterResourceId());
        Assertions.assertEquals("zrmuhapfcqdps", model.privateLinkScopeResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineUpdateProperties model =
            new MachineUpdateProperties()
                .withLocationData(
                    new LocationData()
                        .withName("spughftqsxhq")
                        .withCity("j")
                        .withDistrict("kndxdigrjgu")
                        .withCountryOrRegion("zdmsyqtfi"))
                .withOsProfile(
                    new OSProfile()
                        .withWindowsConfiguration(
                            new OSProfileWindowsConfiguration()
                                .withAssessmentMode(AssessmentModeTypes.AUTOMATIC_BY_PLATFORM)
                                .withPatchMode(PatchModeTypes.MANUAL))
                        .withLinuxConfiguration(
                            new OSProfileLinuxConfiguration()
                                .withAssessmentMode(AssessmentModeTypes.IMAGE_DEFAULT)
                                .withPatchMode(PatchModeTypes.IMAGE_DEFAULT)))
                .withCloudMetadata(new CloudMetadata())
                .withAgentUpgrade(
                    new AgentUpgrade()
                        .withDesiredVersion("yqiatkzwp")
                        .withCorrelationId("p")
                        .withEnableAutomaticUpgrade(true))
                .withParentClusterResourceId("wygzlvdnkfxusem")
                .withPrivateLinkScopeResourceId("zrmuhapfcqdps");
        model = BinaryData.fromObject(model).toObject(MachineUpdateProperties.class);
        Assertions.assertEquals("spughftqsxhq", model.locationData().name());
        Assertions.assertEquals("j", model.locationData().city());
        Assertions.assertEquals("kndxdigrjgu", model.locationData().district());
        Assertions.assertEquals("zdmsyqtfi", model.locationData().countryOrRegion());
        Assertions
            .assertEquals(
                AssessmentModeTypes.AUTOMATIC_BY_PLATFORM, model.osProfile().windowsConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.MANUAL, model.osProfile().windowsConfiguration().patchMode());
        Assertions
            .assertEquals(AssessmentModeTypes.IMAGE_DEFAULT, model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.IMAGE_DEFAULT, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals("yqiatkzwp", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals("p", model.agentUpgrade().correlationId());
        Assertions.assertEquals(true, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("wygzlvdnkfxusem", model.parentClusterResourceId());
        Assertions.assertEquals("zrmuhapfcqdps", model.privateLinkScopeResourceId());
    }
}
