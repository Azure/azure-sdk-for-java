// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.Disk;
import com.azure.resourcemanager.hybridcompute.models.StorageProfile;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StorageProfileTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StorageProfile model = BinaryData.fromString(
            "{\"disks\":[{\"path\":\"gqhcjrefovg\",\"diskType\":\"qsl\",\"generatedId\":\"yvxyqjp\",\"id\":\"attpngjcrcczsq\",\"name\":\"hvmdajvnysounq\",\"maxSizeInBytes\":418960561547005432,\"usedSpaceInBytes\":1672936425518901081},{\"path\":\"pfhyhl\",\"diskType\":\"pmopjmc\",\"generatedId\":\"tuo\",\"id\":\"hfuiuaodsfc\",\"name\":\"vxodpu\",\"maxSizeInBytes\":6217574440199654297,\"usedSpaceInBytes\":2005682789733735628},{\"path\":\"gf\",\"diskType\":\"xbezyiuokktwh\",\"generatedId\":\"xw\",\"id\":\"wqsmbsur\",\"name\":\"imoryocfsfksym\",\"maxSizeInBytes\":1617028943376388649,\"usedSpaceInBytes\":5124358423287325005}]}")
            .toObject(StorageProfile.class);
        Assertions.assertEquals("gqhcjrefovg", model.disks().get(0).path());
        Assertions.assertEquals("qsl", model.disks().get(0).diskType());
        Assertions.assertEquals("yvxyqjp", model.disks().get(0).generatedId());
        Assertions.assertEquals("attpngjcrcczsq", model.disks().get(0).id());
        Assertions.assertEquals("hvmdajvnysounq", model.disks().get(0).name());
        Assertions.assertEquals(418960561547005432L, model.disks().get(0).maxSizeInBytes());
        Assertions.assertEquals(1672936425518901081L, model.disks().get(0).usedSpaceInBytes());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StorageProfile model = new StorageProfile().withDisks(Arrays.asList(
            new Disk().withPath("gqhcjrefovg")
                .withDiskType("qsl")
                .withGeneratedId("yvxyqjp")
                .withId("attpngjcrcczsq")
                .withName("hvmdajvnysounq")
                .withMaxSizeInBytes(418960561547005432L)
                .withUsedSpaceInBytes(1672936425518901081L),
            new Disk().withPath("pfhyhl")
                .withDiskType("pmopjmc")
                .withGeneratedId("tuo")
                .withId("hfuiuaodsfc")
                .withName("vxodpu")
                .withMaxSizeInBytes(6217574440199654297L)
                .withUsedSpaceInBytes(2005682789733735628L),
            new Disk().withPath("gf")
                .withDiskType("xbezyiuokktwh")
                .withGeneratedId("xw")
                .withId("wqsmbsur")
                .withName("imoryocfsfksym")
                .withMaxSizeInBytes(1617028943376388649L)
                .withUsedSpaceInBytes(5124358423287325005L)));
        model = BinaryData.fromObject(model).toObject(StorageProfile.class);
        Assertions.assertEquals("gqhcjrefovg", model.disks().get(0).path());
        Assertions.assertEquals("qsl", model.disks().get(0).diskType());
        Assertions.assertEquals("yvxyqjp", model.disks().get(0).generatedId());
        Assertions.assertEquals("attpngjcrcczsq", model.disks().get(0).id());
        Assertions.assertEquals("hvmdajvnysounq", model.disks().get(0).name());
        Assertions.assertEquals(418960561547005432L, model.disks().get(0).maxSizeInBytes());
        Assertions.assertEquals(1672936425518901081L, model.disks().get(0).usedSpaceInBytes());
    }
}
