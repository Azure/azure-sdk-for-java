// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"pdbwnupgahxkum\",\"privateLinkScopeId\":\"jcaacfdmmcpugm\",\"privateEndpointConnections\":[{\"id\":\"pvufhbze\",\"name\":\"whoqhnlbqnbldxe\",\"type\":\"lgsc\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"mkrsrrmoucsofl\",\"description\":\"puviyfcaabe\"},\"provisioningState\":\"hbhlvbm\",\"groupIds\":[\"ibsxtkcud\"]}},{\"id\":\"sfar\",\"name\":\"iowl\",\"type\":\"xnq\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"fstmhqykizmdksao\",\"description\":\"fcluqvo\"},\"provisioningState\":\"ycjimryvwgcwwpbm\",\"groupIds\":[\"esyds\"]}},{\"id\":\"efoh\",\"name\":\"bvopwndyqle\",\"type\":\"lklmtkhlo\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"pvbrdfjmzsyz\",\"description\":\"hotlhikcyychunsj\"},\"provisioningState\":\"jrtwsz\",\"groupIds\":[\"uic\",\"hvtrrmhwrbfdpyf\"]}}]},\"location\":\"bhvjglr\",\"tags\":{\"memhooclutnpq\":\"yzlwh\",\"jk\":\"emc\"},\"id\":\"mykyujxsglhs\",\"name\":\"rryejylmbkzudnig\",\"type\":\"fihotj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<HybridComputePrivateLinkScope> response
            = manager.privateLinkScopes().listByResourceGroup("mfsvbpav", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bhvjglr", response.iterator().next().location());
        Assertions.assertEquals("yzlwh", response.iterator().next().tags().get("memhooclutnpq"));
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED,
            response.iterator().next().properties().publicNetworkAccess());
    }
}
