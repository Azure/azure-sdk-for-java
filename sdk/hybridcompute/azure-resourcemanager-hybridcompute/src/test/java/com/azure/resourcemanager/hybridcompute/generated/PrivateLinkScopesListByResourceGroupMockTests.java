// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"Enabled\",\"provisioningState\":\"rqgdgkkil\",\"privateLinkScopeId\":\"lkcsmknhwtbbae\",\"privateEndpointConnections\":[{\"id\":\"vmq\",\"name\":\"oygbdgwumgxd\",\"type\":\"hpabgdexjddvjs\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"tm\",\"description\":\"wllcolsr\"},\"provisioningState\":\"apte\",\"groupIds\":[\"xcgjokjljnhvlq\",\"bekpeeksnbksdqhj\",\"yklxe\",\"lkhhu\"]}},{\"id\":\"cpoq\",\"name\":\"vnwqjwgo\",\"type\":\"lejjjkxy\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"bkjbz\",\"description\":\"ensvkzykjtj\"},\"provisioningState\":\"sxfwushcdp\",\"groupIds\":[\"nq\"]}},{\"id\":\"gjfbpkuwxeoi\",\"name\":\"fiz\",\"type\":\"vkjzwfbcyaykm\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"bfw\",\"description\":\"rzx\"},\"provisioningState\":\"ewsrsxkrplbjaze\",\"groupIds\":[\"viyoypsuhbrnnhjx\"]}}]},\"location\":\"wjh\",\"tags\":{\"c\":\"iwetpoz\",\"ledynojpz\":\"qiqyhgfsetzlexbs\"},\"id\":\"uwfbzkkdtnhqsy\",\"name\":\"ljselp\",\"type\":\"pbafvafhlbylc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<HybridComputePrivateLinkScope> response
            = manager.privateLinkScopes().listByResourceGroup("syeipqd", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wjh", response.iterator().next().location());
        Assertions.assertEquals("iwetpoz", response.iterator().next().tags().get("c"));
        Assertions.assertEquals(PublicNetworkAccessType.ENABLED,
            response.iterator().next().properties().publicNetworkAccess());
    }
}
