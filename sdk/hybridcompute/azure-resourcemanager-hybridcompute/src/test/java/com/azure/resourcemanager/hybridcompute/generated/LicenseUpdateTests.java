// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import com.azure.resourcemanager.hybridcompute.models.LicenseUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicenseUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LicenseUpdate model = BinaryData.fromString(
            "{\"properties\":{\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Deactivated\",\"target\":\"Windows Server 2012 R2\",\"edition\":\"Datacenter\",\"type\":\"pCore\",\"processors\":441101019}},\"tags\":{\"bshrnsvbuswd\":\"pdso\",\"ybycnunvj\":\"z\"}}")
            .toObject(LicenseUpdate.class);
        Assertions.assertEquals("pdso", model.tags().get("bshrnsvbuswd"));
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, model.state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012_R2, model.target());
        Assertions.assertEquals(LicenseEdition.DATACENTER, model.edition());
        Assertions.assertEquals(LicenseCoreType.P_CORE, model.type());
        Assertions.assertEquals(441101019, model.processors());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LicenseUpdate model = new LicenseUpdate().withTags(mapOf("bshrnsvbuswd", "pdso", "ybycnunvj", "z"))
            .withLicenseType(LicenseType.ESU)
            .withState(LicenseState.DEACTIVATED)
            .withTarget(LicenseTarget.WINDOWS_SERVER_2012_R2)
            .withEdition(LicenseEdition.DATACENTER)
            .withType(LicenseCoreType.P_CORE)
            .withProcessors(441101019);
        model = BinaryData.fromObject(model).toObject(LicenseUpdate.class);
        Assertions.assertEquals("pdso", model.tags().get("bshrnsvbuswd"));
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, model.state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012_R2, model.target());
        Assertions.assertEquals(LicenseEdition.DATACENTER, model.edition());
        Assertions.assertEquals(LicenseCoreType.P_CORE, model.type());
        Assertions.assertEquals(441101019, model.processors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
