// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.Gateway;
import com.azure.resourcemanager.hybridcompute.models.GatewayType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GatewaysListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"gatewayId\":\"hqf\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"uxmmkjsvthnwp\",\"allowedFeatures\":[\"kovmribiatt\"]},\"location\":\"lu\",\"tags\":{\"swvxwlmzqwmv\":\"tangcfhnykzcu\",\"uqudtcvclxyn\":\"xnjmxm\",\"dugneiknp\":\"dkvgfabuiyjibuzp\",\"z\":\"oxgjiuqhibt\"},\"id\":\"pqwjedm\",\"name\":\"rrxxgewpktvq\",\"type\":\"lkm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Gateway> response
            = manager.gateways().listByResourceGroup("jfrnxousxauzlwv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lu", response.iterator().next().location());
        Assertions.assertEquals("tangcfhnykzcu", response.iterator().next().tags().get("swvxwlmzqwmv"));
        Assertions.assertEquals(GatewayType.PUBLIC, response.iterator().next().gatewayType());
        Assertions.assertEquals("kovmribiatt", response.iterator().next().allowedFeatures().get(0));
    }
}
