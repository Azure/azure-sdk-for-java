// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointConnection;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsListByPrivateLinkScopeMockTests {
    @Test
    public void testListByPrivateLinkScope() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"hlowkx\"},\"privateLinkServiceConnectionState\":{\"status\":\"vbrdfjmzsyzfho\",\"description\":\"lhikcyychunsj\",\"actionsRequired\":\"jrtwsz\"},\"provisioningState\":\"vuicp\",\"groupIds\":[\"rrmhwrbfdp\",\"f\"]},\"id\":\"bhvjglr\",\"name\":\"cuyzlwhhmemhoocl\",\"type\":\"tnpqmemczjk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PrivateEndpointConnection> response = manager.privateEndpointConnections()
            .listByPrivateLinkScope("efoh", "cbvopwndyqleallk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hlowkx", response.iterator().next().properties().privateEndpoint().id());
        Assertions.assertEquals("vbrdfjmzsyzfho",
            response.iterator().next().properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("lhikcyychunsj",
            response.iterator().next().properties().privateLinkServiceConnectionState().description());
    }
}
