// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointConnectionDataModel;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointProperty;
import com.azure.resourcemanager.hybridcompute.models.PrivateLinkServiceConnectionStateProperty;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionDataModelTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionDataModel model = BinaryData.fromString(
            "{\"id\":\"bejdcn\",\"name\":\"qmoa\",\"type\":\"fgmjzrwrdgrt\",\"properties\":{\"privateEndpoint\":{\"id\":\"u\"},\"privateLinkServiceConnectionState\":{\"status\":\"kopbminrf\",\"description\":\"woyuhhziuief\",\"actionsRequired\":\"bhdmsmlmzqhof\"},\"provisioningState\":\"maequiahxicslfa\",\"groupIds\":[\"piyylhalnswhccsp\"]}}")
            .toObject(PrivateEndpointConnectionDataModel.class);
        Assertions.assertEquals("u", model.properties().privateEndpoint().id());
        Assertions.assertEquals("kopbminrf", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("woyuhhziuief", model.properties().privateLinkServiceConnectionState().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionDataModel model = new PrivateEndpointConnectionDataModel().withProperties(
            new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpointProperty().withId("u"))
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionStateProperty().withStatus("kopbminrf")
                        .withDescription("woyuhhziuief")));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionDataModel.class);
        Assertions.assertEquals("u", model.properties().privateEndpoint().id());
        Assertions.assertEquals("kopbminrf", model.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("woyuhhziuief", model.properties().privateLinkServiceConnectionState().description());
    }
}
