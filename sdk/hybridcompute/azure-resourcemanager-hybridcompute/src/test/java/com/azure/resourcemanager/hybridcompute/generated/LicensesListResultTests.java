// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseInner;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import com.azure.resourcemanager.hybridcompute.models.LicensesListResult;
import com.azure.resourcemanager.hybridcompute.models.VolumeLicenseDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicensesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LicensesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"tenantId\":\"xgaudccs\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Deactivated\",\"target\":\"Windows Server 2012\",\"edition\":\"Standard\",\"type\":\"vCore\",\"processors\":1656493513,\"assignedLicenses\":761147414,\"immutableId\":\"pczwlo\",\"volumeLicenseDetails\":[{},{},{}]}},\"location\":\"mkkvnip\",\"tags\":{\"nchgej\":\"z\",\"huxinpmqnj\":\"podmailzydehojwy\",\"vcputegj\":\"qwixjspro\"},\"id\":\"wmfdatscmdvpjhul\",\"name\":\"uuvmkjozkrwfnd\",\"type\":\"odjpslwejd\"},{\"properties\":{\"provisioningState\":\"Updating\",\"tenantId\":\"oqpsoa\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Activated\",\"target\":\"Windows Server 2012 R2\",\"edition\":\"Datacenter\",\"type\":\"vCore\",\"processors\":276706615,\"assignedLicenses\":2140975130,\"immutableId\":\"fdfdosygexpa\",\"volumeLicenseDetails\":[{},{},{}]}},\"location\":\"hmsbzjhcrzevdp\",\"tags\":{\"jbp\":\"aolthqtrg\",\"jrwzox\":\"zfsinzgvf\"},\"id\":\"j\",\"name\":\"felluwfzitonpe\",\"type\":\"fpjkjlxofp\"}],\"nextLink\":\"hpf\"}")
            .toObject(LicensesListResult.class);
        Assertions.assertEquals("mkkvnip", model.value().get(0).location());
        Assertions.assertEquals("z", model.value().get(0).tags().get("nchgej"));
        Assertions.assertEquals("xgaudccs", model.value().get(0).tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.value().get(0).licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, model.value().get(0).licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.value().get(0).licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.value().get(0).licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, model.value().get(0).licenseDetails().type());
        Assertions.assertEquals(1656493513, model.value().get(0).licenseDetails().processors());
        Assertions.assertEquals("hpf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LicensesListResult model
            = new LicensesListResult()
                .withValue(
                    Arrays.asList(new LicenseInner().withLocation("mkkvnip")
                        .withTags(mapOf("nchgej", "z", "huxinpmqnj", "podmailzydehojwy", "vcputegj", "qwixjspro"))
                        .withTenantId("xgaudccs")
                        .withLicenseType(LicenseType.ESU)
                        .withLicenseDetails(new LicenseDetails().withState(LicenseState.DEACTIVATED)
                            .withTarget(LicenseTarget.WINDOWS_SERVER_2012)
                            .withEdition(LicenseEdition.STANDARD)
                            .withType(LicenseCoreType.V_CORE)
                            .withProcessors(1656493513)
                            .withVolumeLicenseDetails(Arrays.asList(new VolumeLicenseDetails(),
                                new VolumeLicenseDetails(), new VolumeLicenseDetails()))),
                        new LicenseInner().withLocation("hmsbzjhcrzevdp")
                            .withTags(mapOf("jbp", "aolthqtrg", "jrwzox", "zfsinzgvf"))
                            .withTenantId("oqpsoa")
                            .withLicenseType(LicenseType.ESU)
                            .withLicenseDetails(new LicenseDetails().withState(LicenseState.ACTIVATED)
                                .withTarget(LicenseTarget.WINDOWS_SERVER_2012_R2)
                                .withEdition(LicenseEdition.DATACENTER)
                                .withType(LicenseCoreType.V_CORE)
                                .withProcessors(276706615)
                                .withVolumeLicenseDetails(Arrays.asList(new VolumeLicenseDetails(),
                                    new VolumeLicenseDetails(), new VolumeLicenseDetails())))))
                .withNextLink("hpf");
        model = BinaryData.fromObject(model).toObject(LicensesListResult.class);
        Assertions.assertEquals("mkkvnip", model.value().get(0).location());
        Assertions.assertEquals("z", model.value().get(0).tags().get("nchgej"));
        Assertions.assertEquals("xgaudccs", model.value().get(0).tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.value().get(0).licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, model.value().get(0).licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.value().get(0).licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.value().get(0).licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, model.value().get(0).licenseDetails().type());
        Assertions.assertEquals(1656493513, model.value().get(0).licenseDetails().processors());
        Assertions.assertEquals("hpf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
