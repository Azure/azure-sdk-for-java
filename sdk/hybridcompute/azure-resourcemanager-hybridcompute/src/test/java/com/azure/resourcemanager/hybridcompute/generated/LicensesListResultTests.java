// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseInner;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import com.azure.resourcemanager.hybridcompute.models.LicensesListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicensesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LicensesListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Succeeded\",\"tenantId\":\"yrtih\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Activated\",\"target\":\"Windows"
                        + " Server"
                        + " 2012\",\"edition\":\"Datacenter\",\"type\":\"vCore\",\"processors\":706884387,\"assignedLicenses\":2084129316,\"immutableId\":\"lzufcyzkohdbi\"}},\"location\":\"nufhf\",\"tags\":{\"a\":\"y\",\"xwczbyscnp\":\"ithxqhabifpi\"},\"id\":\"x\",\"name\":\"hiv\",\"type\":\"qniwbybrkxvdumj\"}],\"nextLink\":\"tfwvukxgaudc\"}")
                .toObject(LicensesListResult.class);
        Assertions.assertEquals("nufhf", model.value().get(0).location());
        Assertions.assertEquals("y", model.value().get(0).tags().get("a"));
        Assertions.assertEquals("yrtih", model.value().get(0).tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.value().get(0).licenseType());
        Assertions.assertEquals(LicenseState.ACTIVATED, model.value().get(0).licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.value().get(0).licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.DATACENTER, model.value().get(0).licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, model.value().get(0).licenseDetails().type());
        Assertions.assertEquals(706884387, model.value().get(0).licenseDetails().processors());
        Assertions.assertEquals("tfwvukxgaudc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LicensesListResult model =
            new LicensesListResult()
                .withValue(
                    Arrays
                        .asList(
                            new LicenseInner()
                                .withLocation("nufhf")
                                .withTags(mapOf("a", "y", "xwczbyscnp", "ithxqhabifpi"))
                                .withTenantId("yrtih")
                                .withLicenseType(LicenseType.ESU)
                                .withLicenseDetails(
                                    new LicenseDetails()
                                        .withState(LicenseState.ACTIVATED)
                                        .withTarget(LicenseTarget.WINDOWS_SERVER_2012)
                                        .withEdition(LicenseEdition.DATACENTER)
                                        .withType(LicenseCoreType.V_CORE)
                                        .withProcessors(706884387))))
                .withNextLink("tfwvukxgaudc");
        model = BinaryData.fromObject(model).toObject(LicensesListResult.class);
        Assertions.assertEquals("nufhf", model.value().get(0).location());
        Assertions.assertEquals("y", model.value().get(0).tags().get("a"));
        Assertions.assertEquals("yrtih", model.value().get(0).tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.value().get(0).licenseType());
        Assertions.assertEquals(LicenseState.ACTIVATED, model.value().get(0).licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.value().get(0).licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.DATACENTER, model.value().get(0).licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, model.value().get(0).licenseDetails().type());
        Assertions.assertEquals(706884387, model.value().get(0).licenseDetails().processors());
        Assertions.assertEquals("tfwvukxgaudc", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
