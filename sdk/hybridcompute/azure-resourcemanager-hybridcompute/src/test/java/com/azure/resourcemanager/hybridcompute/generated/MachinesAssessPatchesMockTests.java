// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.MachineAssessPatchesResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MachinesAssessPatchesMockTests {
    @Test
    public void testAssessPatches() throws Exception {
        String responseStr
            = "{\"status\":\"Failed\",\"assessmentActivityId\":\"cd519191-3529-454e-8c76-00fe44572388\",\"rebootPending\":true,\"availablePatchCountByClassification\":{\"security\":2009658341,\"critical\":1885722966,\"definition\":1771051614,\"updateRollup\":1009217276,\"featurePack\":224865055,\"servicePack\":2134277506,\"tools\":186835160,\"updates\":847251167,\"other\":1074409808},\"startDateTime\":\"2021-10-10T00:01:47Z\",\"lastModifiedDateTime\":\"2021-05-11T01:17:38Z\",\"startedBy\":\"Platform\",\"patchServiceUsed\":\"Unknown\",\"osType\":\"Linux\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MachineAssessPatchesResult response
            = manager.machines().assessPatches("nsiru", "hzmme", com.azure.core.util.Context.NONE);

    }
}
