// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.PrivateLinkScopeValidationDetails;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesGetValidationDetailsForMachineWithResponseMockTests {
    @Test
    public void testGetValidationDetailsForMachineWithResponse() throws Exception {
        String responseStr
            = "{\"id\":\"xihspnxwq\",\"publicNetworkAccess\":\"Enabled\",\"connectionDetails\":[{\"id\":\"waklsbsbqq\",\"privateIpAddress\":\"gwwrxaomzis\",\"linkIdentifier\":\"rrczezkhhltnj\",\"groupId\":\"hqo\",\"memberName\":\"jqoyueayfbpcm\"},{\"id\":\"lbyrru\",\"privateIpAddress\":\"thwmgnmbsc\",\"linkIdentifier\":\"xigdhxiidlope\",\"groupId\":\"wdpyq\",\"memberName\":\"bxubmdna\"},{\"id\":\"bqwremjela\",\"privateIpAddress\":\"cigeleohdbvqvw\",\"linkIdentifier\":\"jopwbeonrlkwz\",\"groupId\":\"ybxc\",\"memberName\":\"kxcpt\"},{\"id\":\"qfyiaseqchkr\",\"privateIpAddress\":\"zrazisgyk\",\"linkIdentifier\":\"emv\",\"groupId\":\"bwzohmnrxxbs\",\"memberName\":\"klinhmdptysprq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateLinkScopeValidationDetails response = manager.privateLinkScopes()
            .getValidationDetailsForMachineWithResponse("vctafsrb", "rblmli", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(PublicNetworkAccessType.ENABLED, response.publicNetworkAccess());
    }
}
