// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointConnection;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.hybridcompute.models.PrivateEndpointProperty;
import com.azure.resourcemanager.hybridcompute.models.PrivateLinkServiceConnectionStateProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"nssxlgh\"},\"privateLinkServiceConnectionState\":{\"status\":\"egjlgvvpa\",\"description\":\"eksgbuxantuygd\",\"actionsRequired\":\"aq\"},\"provisioningState\":\"Succeeded\",\"groupIds\":[\"x\",\"hcbjpibk\"]},\"id\":\"hu\",\"name\":\"uerct\",\"type\":\"toyint\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("grebwggahttzlsw")
            .withExistingPrivateLinkScope("uatmzwcjjncqtj", "mizvgbgatzuuvbx")
            .withProperties(new PrivateEndpointConnectionProperties()
                .withPrivateEndpoint(new PrivateEndpointProperty().withId("fu"))
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionStateProperty().withStatus("x").withDescription("oqza")))
            .create();

        Assertions.assertEquals("nssxlgh", response.properties().privateEndpoint().id());
        Assertions.assertEquals("egjlgvvpa", response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("eksgbuxantuygd",
            response.properties().privateLinkServiceConnectionState().description());
    }
}
