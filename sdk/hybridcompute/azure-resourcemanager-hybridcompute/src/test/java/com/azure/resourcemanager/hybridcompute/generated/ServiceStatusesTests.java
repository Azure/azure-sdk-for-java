// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.ServiceStatus;
import com.azure.resourcemanager.hybridcompute.models.ServiceStatuses;
import org.junit.jupiter.api.Assertions;

public final class ServiceStatusesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServiceStatuses model =
            BinaryData
                .fromString(
                    "{\"extensionService\":{\"status\":\"wzrlovmclwhij\",\"startupType\":\"ejctbzaqsqsycb\"},\"guestConfigurationService\":{\"status\":\"k\",\"startupType\":\"kdkexxp\"}}")
                .toObject(ServiceStatuses.class);
        Assertions.assertEquals("wzrlovmclwhij", model.extensionService().status());
        Assertions.assertEquals("ejctbzaqsqsycb", model.extensionService().startupType());
        Assertions.assertEquals("k", model.guestConfigurationService().status());
        Assertions.assertEquals("kdkexxp", model.guestConfigurationService().startupType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServiceStatuses model =
            new ServiceStatuses()
                .withExtensionService(new ServiceStatus().withStatus("wzrlovmclwhij").withStartupType("ejctbzaqsqsycb"))
                .withGuestConfigurationService(new ServiceStatus().withStatus("k").withStartupType("kdkexxp"));
        model = BinaryData.fromObject(model).toObject(ServiceStatuses.class);
        Assertions.assertEquals("wzrlovmclwhij", model.extensionService().status());
        Assertions.assertEquals("ejctbzaqsqsycb", model.extensionService().startupType());
        Assertions.assertEquals("k", model.guestConfigurationService().status());
        Assertions.assertEquals("kdkexxp", model.guestConfigurationService().startupType());
    }
}
