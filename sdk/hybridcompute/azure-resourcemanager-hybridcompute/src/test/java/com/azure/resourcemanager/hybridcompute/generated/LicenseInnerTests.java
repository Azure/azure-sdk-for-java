// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseInner;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicenseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LicenseInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Creating\",\"tenantId\":\"uv\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Activated\",\"target\":\"Windows"
                        + " Server"
                        + " 2012\",\"edition\":\"Standard\",\"type\":\"pCore\",\"processors\":1567088551,\"assignedLicenses\":910142536,\"immutableId\":\"sphrupidgs\"}},\"location\":\"bejhphoycmsxa\",\"tags\":{\"zehtbmu\":\"dxbmtqioq\",\"wnoi\":\"p\",\"bqsoqijg\":\"hwlrx\"},\"id\":\"dmbpazlobcufpdz\",\"name\":\"rbt\",\"type\":\"qqjnqgl\"}")
                .toObject(LicenseInner.class);
        Assertions.assertEquals("bejhphoycmsxa", model.location());
        Assertions.assertEquals("dxbmtqioq", model.tags().get("zehtbmu"));
        Assertions.assertEquals("uv", model.tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.ACTIVATED, model.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.P_CORE, model.licenseDetails().type());
        Assertions.assertEquals(1567088551, model.licenseDetails().processors());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LicenseInner model =
            new LicenseInner()
                .withLocation("bejhphoycmsxa")
                .withTags(mapOf("zehtbmu", "dxbmtqioq", "wnoi", "p", "bqsoqijg", "hwlrx"))
                .withTenantId("uv")
                .withLicenseType(LicenseType.ESU)
                .withLicenseDetails(
                    new LicenseDetails()
                        .withState(LicenseState.ACTIVATED)
                        .withTarget(LicenseTarget.WINDOWS_SERVER_2012)
                        .withEdition(LicenseEdition.STANDARD)
                        .withType(LicenseCoreType.P_CORE)
                        .withProcessors(1567088551));
        model = BinaryData.fromObject(model).toObject(LicenseInner.class);
        Assertions.assertEquals("bejhphoycmsxa", model.location());
        Assertions.assertEquals("dxbmtqioq", model.tags().get("zehtbmu"));
        Assertions.assertEquals("uv", model.tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.ACTIVATED, model.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.P_CORE, model.licenseDetails().type());
        Assertions.assertEquals(1567088551, model.licenseDetails().processors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
