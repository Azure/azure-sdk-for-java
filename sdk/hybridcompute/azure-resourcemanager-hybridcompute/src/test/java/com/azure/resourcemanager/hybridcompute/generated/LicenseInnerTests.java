// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.LicenseInner;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import com.azure.resourcemanager.hybridcompute.models.ProgramYear;
import com.azure.resourcemanager.hybridcompute.models.VolumeLicenseDetails;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LicenseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LicenseInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Creating\",\"tenantId\":\"uv\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Activated\",\"target\":\"Windows Server 2012\",\"edition\":\"Standard\",\"type\":\"pCore\",\"processors\":1567088551,\"assignedLicenses\":910142536,\"immutableId\":\"sphrupidgs\",\"volumeLicenseDetails\":[{\"programYear\":\"Year 1\",\"invoiceId\":\"ph\"},{\"programYear\":\"Year 2\",\"invoiceId\":\"sx\"},{\"programYear\":\"Year 3\",\"invoiceId\":\"dxbmtqioq\"},{\"programYear\":\"Year 2\",\"invoiceId\":\"tbmufpo\"}]}},\"location\":\"oizh\",\"tags\":{\"k\":\"xybqsoqij\",\"btcqq\":\"mbpazlobcufpdzn\"},\"id\":\"nq\",\"name\":\"lhqgnufooojy\",\"type\":\"ifsqesaagdfmg\"}")
            .toObject(LicenseInner.class);
        Assertions.assertEquals("oizh", model.location());
        Assertions.assertEquals("xybqsoqij", model.tags().get("k"));
        Assertions.assertEquals("uv", model.tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.ACTIVATED, model.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.P_CORE, model.licenseDetails().type());
        Assertions.assertEquals(1567088551, model.licenseDetails().processors());
        Assertions.assertEquals(ProgramYear.YEAR_1, model.licenseDetails().volumeLicenseDetails().get(0).programYear());
        Assertions.assertEquals("ph", model.licenseDetails().volumeLicenseDetails().get(0).invoiceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LicenseInner model
            = new LicenseInner().withLocation("oizh")
                .withTags(mapOf("k", "xybqsoqij", "btcqq", "mbpazlobcufpdzn"))
                .withTenantId("uv")
                .withLicenseType(LicenseType.ESU)
                .withLicenseDetails(new LicenseDetails().withState(LicenseState.ACTIVATED)
                    .withTarget(LicenseTarget.WINDOWS_SERVER_2012)
                    .withEdition(LicenseEdition.STANDARD)
                    .withType(LicenseCoreType.P_CORE)
                    .withProcessors(1567088551)
                    .withVolumeLicenseDetails(Arrays.asList(
                        new VolumeLicenseDetails().withProgramYear(ProgramYear.YEAR_1).withInvoiceId("ph"),
                        new VolumeLicenseDetails().withProgramYear(ProgramYear.YEAR_2).withInvoiceId("sx"),
                        new VolumeLicenseDetails().withProgramYear(ProgramYear.YEAR_3).withInvoiceId("dxbmtqioq"),
                        new VolumeLicenseDetails().withProgramYear(ProgramYear.YEAR_2).withInvoiceId("tbmufpo"))));
        model = BinaryData.fromObject(model).toObject(LicenseInner.class);
        Assertions.assertEquals("oizh", model.location());
        Assertions.assertEquals("xybqsoqij", model.tags().get("k"));
        Assertions.assertEquals("uv", model.tenantId());
        Assertions.assertEquals(LicenseType.ESU, model.licenseType());
        Assertions.assertEquals(LicenseState.ACTIVATED, model.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, model.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.STANDARD, model.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.P_CORE, model.licenseDetails().type());
        Assertions.assertEquals(1567088551, model.licenseDetails().processors());
        Assertions.assertEquals(ProgramYear.YEAR_1, model.licenseDetails().volumeLicenseDetails().get(0).programYear());
        Assertions.assertEquals("ph", model.licenseDetails().volumeLicenseDetails().get(0).invoiceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
