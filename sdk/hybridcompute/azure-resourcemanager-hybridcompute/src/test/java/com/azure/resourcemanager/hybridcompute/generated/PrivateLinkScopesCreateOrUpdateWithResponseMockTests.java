// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeProperties;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"publicNetworkAccess\":\"SecuredByPerimeter\",\"provisioningState\":\"gpxvkqmaupxvpi\",\"privateLinkScopeId\":\"f\",\"privateEndpointConnections\":[{\"id\":\"zyzeyuubeidsz\",\"name\":\"ytoithgygvfl\",\"type\":\"vdihoynkrx\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"kdrcyrucp\",\"description\":\"unnuzdqumoenodn\"},\"provisioningState\":\"enhqhskndnelq\",\"groupIds\":[\"dlknwfoanniyop\",\"txiv\",\"nrlyxnuc\"]}},{\"id\":\"p\",\"name\":\"lkwq\",\"type\":\"tv\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"tcjb\",\"description\":\"tvivuzqym\"},\"provisioningState\":\"owog\",\"groupIds\":[\"tsqhzvbrzcdban\"]}},{\"id\":\"ndscxmxeatk\",\"name\":\"mwnrdj\",\"type\":\"bqbnaomhjrmkuh\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"jalfihcjmobcanc\",\"description\":\"exxqcwg\"},\"provisioningState\":\"fgvaknokzwj\",\"groupIds\":[\"ltixldzyyfytpq\"]}}]},\"location\":\"x\",\"tags\":{\"vyqlkjuvsmbmslzo\":\"puj\"},\"id\":\"ovwzdbpqvybefg\",\"name\":\"mx\",\"type\":\"okcvtlubses\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        HybridComputePrivateLinkScope response = manager.privateLinkScopes()
            .define("zmwntopagt")
            .withRegion("fdsajred")
            .withExistingResourceGroup("bdweade")
            .withTags(mapOf("afpwzyifrkgwl", "yshtuwgmev", "zdyi", "xeqipx", "abnsmj", "sfayorpravkjoges",
                "qpkevmyltjc", "wynqxaekqsykvwj"))
            .withProperties(
                new HybridComputePrivateLinkScopeProperties().withPublicNetworkAccess(PublicNetworkAccessType.ENABLED))
            .create();

        Assertions.assertEquals("x", response.location());
        Assertions.assertEquals("puj", response.tags().get("vyqlkjuvsmbmslzo"));
        Assertions.assertEquals(PublicNetworkAccessType.SECURED_BY_PERIMETER,
            response.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
