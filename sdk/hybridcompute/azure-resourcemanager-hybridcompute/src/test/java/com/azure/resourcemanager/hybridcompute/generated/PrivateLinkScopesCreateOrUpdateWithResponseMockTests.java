// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeProperties;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"kzykjtjk\",\"privateLinkScopeId\":\"xfwush\",\"privateEndpointConnections\":[{\"id\":\"upnqrmgjfb\",\"name\":\"uwxeoiojfizf\",\"type\":\"kjzwfbcyayk\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"sbfwxr\",\"description\":\"xmdewsrsxkrplbj\"},\"provisioningState\":\"ejwwviyoyps\",\"groupIds\":[\"rnnhjxs\",\"wjh\",\"kbiwetpozyc\"]}},{\"id\":\"iqyhgfse\",\"name\":\"lexbsf\",\"type\":\"dynojpziuwfb\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"tnhqsycl\",\"description\":\"selpkpbaf\"},\"provisioningState\":\"fhlbylccbev\",\"groupIds\":[\"yzd\",\"wrso\"]}}]},\"location\":\"ltdb\",\"tags\":{\"g\":\"rrhvhfnracwnpq\",\"ouhdawsigrb\":\"uuj\"},\"id\":\"bxsjybvitvqkj\",\"name\":\"az\",\"type\":\"umtggmuwdchozfn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        HybridComputePrivateLinkScope response = manager.privateLinkScopes()
            .define("bugtywatmqa")
            .withRegion("gxdgdhpab")
            .withExistingResourceGroup("twknvgm")
            .withTags(mapOf("vjsaqwotm", "xjd", "xaptefhexcgjok", "wllcolsr", "ek", "ljnhvlqj", "xeslkhhustcpoqm",
                "eeksnbksdqhjvyk"))
            .withProperties(new HybridComputePrivateLinkScopeProperties()
                .withPublicNetworkAccess(PublicNetworkAccessType.SECURED_BY_PERIMETER))
            .create();

        Assertions.assertEquals("ltdb", response.location());
        Assertions.assertEquals("rrhvhfnracwnpq", response.tags().get("g"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, response.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
