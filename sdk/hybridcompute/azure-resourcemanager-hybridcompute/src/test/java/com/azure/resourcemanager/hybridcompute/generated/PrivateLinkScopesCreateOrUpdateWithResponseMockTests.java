// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeProperties;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"yjede\",\"privateLinkScopeId\":\"mlfmkqs\",\"privateEndpointConnections\":[{\"id\":\"awx\",\"name\":\"x\",\"type\":\"amwabzxrvxcushsp\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"mxyasflvgsgzw\",\"description\":\"wakoihkn\"},\"provisioningState\":\"jblmljhlnymz\",\"groupIds\":[\"yryuzcb\",\"qqvxmvwfgtayxons\",\"peujlzqn\",\"cvsql\"]}},{\"id\":\"zoibgsxg\",\"name\":\"fyq\",\"type\":\"mpqoxw\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"bxiqxeiiqbimht\",\"description\":\"wwinhehf\"},\"provisioningState\":\"ofvwbcb\",\"groupIds\":[\"b\",\"kbwvqvxkdiv\"]}},{\"id\":\"heb\",\"name\":\"swbzuwfmdurage\",\"type\":\"zvcjfelisdjubggb\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"xkbsazgakgac\",\"description\":\"rcmjdmspofapvuh\"},\"provisioningState\":\"lniofrzgbzje\",\"groupIds\":[\"tkvnlvxbcuiiznkt\"]}},{\"id\":\"ansnvp\",\"name\":\"bmikost\",\"type\":\"bkiw\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"yophz\",\"description\":\"yls\"},\"provisioningState\":\"rpfbcunezz\",\"groupIds\":[\"elfwy\",\"wl\",\"xjwet\"]}}]},\"location\":\"sihclafzvaylp\",\"tags\":{\"mwqkchcxwaxf\":\"qqwzt\"},\"id\":\"w\",\"name\":\"jkjexf\",\"type\":\"eqvhpsylkk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        HybridComputePrivateLinkScope response = manager.privateLinkScopes()
            .define("svtui")
            .withRegion("jutifdwfmvigorqj")
            .withExistingResourceGroup("sf")
            .withTags(mapOf("n", "zhraglkafh"))
            .withProperties(
                new HybridComputePrivateLinkScopeProperties().withPublicNetworkAccess(PublicNetworkAccessType.ENABLED))
            .create();

        Assertions.assertEquals("sihclafzvaylp", response.location());
        Assertions.assertEquals("qqwzt", response.tags().get("mwqkchcxwaxf"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED, response.properties().publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
