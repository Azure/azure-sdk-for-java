// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"SecuredByPerimeter\",\"provisioningState\":\"jww\",\"privateLinkScopeId\":\"z\",\"privateEndpointConnections\":[{\"id\":\"mxqhndvnoamldse\",\"name\":\"ohdjhhflzok\",\"type\":\"ox\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"jetagltsxoatft\",\"description\":\"zpnpbswv\"},\"provisioningState\":\"loccsrmozihm\",\"groupIds\":[\"awtxxpk\"]}},{\"id\":\"cxcjxgry\",\"name\":\"mpcycilrmcaykgg\",\"type\":\"xu\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"sxwpndfcpfnznthj\",\"description\":\"wkjaos\"},\"provisioningState\":\"uzvoamktcqiosm\",\"groupIds\":[\"ahgx\"]}},{\"id\":\"lyrtltlaprlt\",\"name\":\"atbhjmznn\",\"type\":\"oqeq\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"vlagun\",\"description\":\"tgfebwln\"},\"provisioningState\":\"hyreeu\",\"groupIds\":[\"av\",\"pdqmjxlyyzglgouw\",\"lmjjyuo\"]}},{\"id\":\"tob\",\"name\":\"kjeytunl\",\"type\":\"jkwrusnkq\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"rqunjq\",\"description\":\"denxau\"},\"provisioningState\":\"pakdkifmjnnawt\",\"groupIds\":[\"pxuckpggq\",\"wey\",\"rdhlis\",\"gwflq\"]}}]},\"location\":\"pizruwnpqxpxiw\",\"tags\":{\"zjvkviirhgfgrws\":\"gjsaasiixtm\",\"tctbrxkjzwrgxffm\":\"pgratzvzbglbyvi\"},\"id\":\"hkwfbkgozxwop\",\"name\":\"bydpizqaclnapxb\",\"type\":\"yg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<HybridComputePrivateLinkScope> response
            = manager.privateLinkScopes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pizruwnpqxpxiw", response.iterator().next().location());
        Assertions.assertEquals("gjsaasiixtm", response.iterator().next().tags().get("zjvkviirhgfgrws"));
        Assertions.assertEquals(PublicNetworkAccessType.SECURED_BY_PERIMETER,
            response.iterator().next().properties().publicNetworkAccess());
    }
}
