// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScope;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateLinkScopesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"t\",\"privateLinkScopeId\":\"oyin\",\"privateEndpointConnections\":[{\"id\":\"rlcyrduc\",\"name\":\"go\",\"type\":\"y\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"cvcrrp\",\"description\":\"jttbstv\"},\"provisioningState\":\"aqnrmvvfkoxmlg\",\"groupIds\":[\"uidvrmazlpdwwex\",\"mzvlazipbh\",\"wvqsgny\"]}},{\"id\":\"uzivensrpmeyyvp\",\"name\":\"atlb\",\"type\":\"pzgsk\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"fvolmknbnxwcd\",\"description\":\"mmpvf\"},\"provisioningState\":\"wzfgbrttuiaclkie\",\"groupIds\":[\"jlfnthiq\",\"yuttdiygbpvnwswm\",\"xkyctwwgzwx\"]}},{\"id\":\"mecvogygzyvneeza\",\"name\":\"gh\",\"type\":\"oqqtl\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"bkrkjj\",\"description\":\"avfqnvhnqoewdogi\"},\"provisioningState\":\"tesypvidbztjh\",\"groupIds\":[\"b\"]}},{\"id\":\"nynkbwet\",\"name\":\"uhpsprkzyaupia\",\"type\":\"xnafbw\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"htuov\",\"description\":\"aonurjtumg\"},\"provisioningState\":\"hpv\",\"groupIds\":[\"slclblyjxltbsju\",\"c\",\"sfxigctmgx\"]}}]},\"location\":\"pbezqccydrtceu\",\"tags\":{\"eq\":\"kkyihzt\",\"ecfehuwa\":\"gqzgwldoychill\",\"uhicqllizstacsjv\":\"a\",\"wqejpmvsse\":\"rweft\"},\"id\":\"aepwamcxtcz\",\"name\":\"upeuknijduyye\",\"type\":\"pydjfboc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<HybridComputePrivateLinkScope> response
            = manager.privateLinkScopes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pbezqccydrtceu", response.iterator().next().location());
        Assertions.assertEquals("kkyihzt", response.iterator().next().tags().get("eq"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED,
            response.iterator().next().properties().publicNetworkAccess());
    }
}
