// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.HybridComputePrivateLinkScopeInner;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeListResult;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeProperties;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HybridComputePrivateLinkScopeListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridComputePrivateLinkScopeListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"SecuredByPerimeter\",\"provisioningState\":\"zimejzanlfzx\",\"privateLinkScopeId\":\"vrmbzono\",\"privateEndpointConnections\":[{\"id\":\"jq\",\"name\":\"rgz\",\"type\":\"rlazszrnw\",\"properties\":{}},{\"id\":\"ndfpwpj\",\"name\":\"wbtlhflsjcdh\",\"type\":\"fjvfbgofeljagr\",\"properties\":{}},{\"id\":\"hldvriii\",\"name\":\"nalghfkvtvsexso\",\"type\":\"el\",\"properties\":{}},{\"id\":\"hahhxvrhmzkwpj\",\"name\":\"wspughftqsxhqx\",\"type\":\"xukndxdigr\",\"properties\":{}}]},\"location\":\"ufzdmsyq\",\"tags\":{\"phoszqz\":\"hwhbotzingamv\",\"kfwynw\":\"dphqamv\",\"tnvyqiatkzwp\":\"vtbvkayh\",\"vvsccyajguq\":\"npwzcjaes\"},\"id\":\"hwyg\",\"name\":\"lvdnkfx\",\"type\":\"semdwzrmu\"},{\"properties\":{\"publicNetworkAccess\":\"SecuredByPerimeter\",\"provisioningState\":\"qdpsqxqvpsvu\",\"privateLinkScopeId\":\"mgccelvezrypq\",\"privateEndpointConnections\":[{\"id\":\"okerqwkyhkobop\",\"name\":\"edkowepbqpcrfk\",\"type\":\"ccsnjvcdwxlpq\",\"properties\":{}}]},\"location\":\"tn\",\"tags\":{\"dhtmdvypgikd\":\"jsyingwfqatm\",\"hlhkjoqrvqqaatj\":\"szywkbirryu\"},\"id\":\"nrvgoupmfiibfgg\",\"name\":\"ioolvrwxkvtkkgll\",\"type\":\"wjygvjayvblmhvk\"},{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"vvyhg\",\"privateLinkScopeId\":\"pbyrqufegxu\",\"privateEndpointConnections\":[{\"id\":\"bnhlmc\",\"name\":\"p\",\"type\":\"gitvg\",\"properties\":{}}]},\"location\":\"rixkwmyijejve\",\"tags\":{\"xhcexdrrvqahq\":\"bpnaixexccbdre\",\"jnhyjsvf\":\"ghtpw\",\"mtg\":\"cxzbfvoowvr\",\"y\":\"qp\"},\"id\":\"s\",\"name\":\"ronzmyhgfip\",\"type\":\"sxkm\"}],\"nextLink\":\"a\"}")
            .toObject(HybridComputePrivateLinkScopeListResult.class);
        Assertions.assertEquals("ufzdmsyq", model.value().get(0).location());
        Assertions.assertEquals("hwhbotzingamv", model.value().get(0).tags().get("phoszqz"));
        Assertions.assertEquals(PublicNetworkAccessType.SECURED_BY_PERIMETER,
            model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("a", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridComputePrivateLinkScopeListResult model
            = new HybridComputePrivateLinkScopeListResult().withValue(Arrays.asList(
                new HybridComputePrivateLinkScopeInner().withLocation("ufzdmsyq")
                    .withTags(mapOf("phoszqz", "hwhbotzingamv", "kfwynw", "dphqamv", "tnvyqiatkzwp", "vtbvkayh",
                        "vvsccyajguq", "npwzcjaes"))
                    .withProperties(new HybridComputePrivateLinkScopeProperties()
                        .withPublicNetworkAccess(PublicNetworkAccessType.SECURED_BY_PERIMETER)),
                new HybridComputePrivateLinkScopeInner().withLocation("tn")
                    .withTags(mapOf("dhtmdvypgikd", "jsyingwfqatm", "hlhkjoqrvqqaatj", "szywkbirryu"))
                    .withProperties(new HybridComputePrivateLinkScopeProperties()
                        .withPublicNetworkAccess(PublicNetworkAccessType.SECURED_BY_PERIMETER)),
                new HybridComputePrivateLinkScopeInner().withLocation("rixkwmyijejve")
                    .withTags(
                        mapOf("xhcexdrrvqahq", "bpnaixexccbdre", "jnhyjsvf", "ghtpw", "mtg", "cxzbfvoowvr", "y", "qp"))
                    .withProperties(new HybridComputePrivateLinkScopeProperties()
                        .withPublicNetworkAccess(PublicNetworkAccessType.DISABLED))))
                .withNextLink("a");
        model = BinaryData.fromObject(model).toObject(HybridComputePrivateLinkScopeListResult.class);
        Assertions.assertEquals("ufzdmsyq", model.value().get(0).location());
        Assertions.assertEquals("hwhbotzingamv", model.value().get(0).tags().get("phoszqz"));
        Assertions.assertEquals(PublicNetworkAccessType.SECURED_BY_PERIMETER,
            model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("a", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
