// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.HybridComputePrivateLinkScopeInner;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeListResult;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeProperties;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HybridComputePrivateLinkScopeListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridComputePrivateLinkScopeListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"n\",\"privateLinkScopeId\":\"jcntuj\",\"privateEndpointConnections\":[{\"id\":\"ed\",\"name\":\"wwa\",\"type\":\"kojvd\",\"properties\":{}}]},\"location\":\"foqouicybx\",\"tags\":{\"amcio\":\"gszufoxciqopid\"},\"id\":\"hkh\",\"name\":\"zxkhnzbonlwnto\",\"type\":\"gokdwbwhks\"}],\"nextLink\":\"cmrvexzt\"}")
            .toObject(HybridComputePrivateLinkScopeListResult.class);
        Assertions.assertEquals("foqouicybx", model.value().get(0).location());
        Assertions.assertEquals("gszufoxciqopid", model.value().get(0).tags().get("amcio"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED,
            model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("cmrvexzt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridComputePrivateLinkScopeListResult model
            = new HybridComputePrivateLinkScopeListResult()
                .withValue(
                    Arrays
                        .asList(
                            new HybridComputePrivateLinkScopeInner().withLocation("foqouicybx")
                                .withTags(mapOf("amcio", "gszufoxciqopid"))
                                .withProperties(new HybridComputePrivateLinkScopeProperties()
                                    .withPublicNetworkAccess(PublicNetworkAccessType.DISABLED))))
                .withNextLink("cmrvexzt");
        model = BinaryData.fromObject(model).toObject(HybridComputePrivateLinkScopeListResult.class);
        Assertions.assertEquals("foqouicybx", model.value().get(0).location());
        Assertions.assertEquals("gszufoxciqopid", model.value().get(0).tags().get("amcio"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED,
            model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("cmrvexzt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
