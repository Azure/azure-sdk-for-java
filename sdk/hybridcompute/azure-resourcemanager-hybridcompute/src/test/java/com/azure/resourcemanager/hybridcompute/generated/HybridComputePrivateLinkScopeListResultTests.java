// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.HybridComputePrivateLinkScopeInner;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeListResult;
import com.azure.resourcemanager.hybridcompute.models.HybridComputePrivateLinkScopeProperties;
import com.azure.resourcemanager.hybridcompute.models.PublicNetworkAccessType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HybridComputePrivateLinkScopeListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HybridComputePrivateLinkScopeListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"provisioningState\":\"la\",\"privateLinkScopeId\":\"elwuipi\",\"privateEndpointConnections\":[{\"id\":\"kzivgvvcnayrh\",\"name\":\"nxxmueedndrdv\",\"type\":\"kwqqtchealmf\",\"properties\":{}},{\"id\":\"aayg\",\"name\":\"wvgpiohg\",\"type\":\"rtfudxepxg\",\"properties\":{}}]},\"location\":\"gvr\",\"tags\":{\"dblx\":\"pkukghi\",\"fnjhfjxwmszkkfo\":\"wi\",\"kzikfjawneaivxwc\":\"rey\",\"fatkld\":\"elpcirelsfeaenwa\"},\"id\":\"xbjhwuaanozjosph\",\"name\":\"oulpjrv\",\"type\":\"ag\"}],\"nextLink\":\"vimjwos\"}")
            .toObject(HybridComputePrivateLinkScopeListResult.class);
        Assertions.assertEquals("gvr", model.value().get(0).location());
        Assertions.assertEquals("pkukghi", model.value().get(0).tags().get("dblx"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED,
            model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("vimjwos", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HybridComputePrivateLinkScopeListResult model = new HybridComputePrivateLinkScopeListResult()
            .withValue(Arrays.asList(new HybridComputePrivateLinkScopeInner().withLocation("gvr")
                .withTags(mapOf("dblx", "pkukghi", "fnjhfjxwmszkkfo", "wi", "kzikfjawneaivxwc", "rey", "fatkld",
                    "elpcirelsfeaenwa"))
                .withProperties(new HybridComputePrivateLinkScopeProperties()
                    .withPublicNetworkAccess(PublicNetworkAccessType.DISABLED))))
            .withNextLink("vimjwos");
        model = BinaryData.fromObject(model).toObject(HybridComputePrivateLinkScopeListResult.class);
        Assertions.assertEquals("gvr", model.value().get(0).location());
        Assertions.assertEquals("pkukghi", model.value().get(0).tags().get("dblx"));
        Assertions.assertEquals(PublicNetworkAccessType.DISABLED,
            model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("vimjwos", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
