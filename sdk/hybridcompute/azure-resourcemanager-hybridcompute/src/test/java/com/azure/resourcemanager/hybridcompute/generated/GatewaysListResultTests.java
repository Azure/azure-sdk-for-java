// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.GatewayInner;
import com.azure.resourcemanager.hybridcompute.models.GatewayType;
import com.azure.resourcemanager.hybridcompute.models.GatewaysListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GatewaysListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GatewaysListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"gatewayId\":\"ltiugcxnavv\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"byqunyow\",\"allowedFeatures\":[\"mdjrkvfgbvfvp\",\"bodacizsjq\",\"hkr\",\"ibdeibq\"]},\"location\":\"qkgh\",\"tags\":{\"rwkq\":\"dzwmkrefajpj\",\"sjabibs\":\"yhgbijtjivfx\",\"bjxbkzbzk\":\"stawfsdjpvkv\"},\"id\":\"vncjabudurgk\",\"name\":\"kmokz\",\"type\":\"jjklff\"}],\"nextLink\":\"ouw\"}")
            .toObject(GatewaysListResult.class);
        Assertions.assertEquals("qkgh", model.value().get(0).location());
        Assertions.assertEquals("dzwmkrefajpj", model.value().get(0).tags().get("rwkq"));
        Assertions.assertEquals(GatewayType.PUBLIC, model.value().get(0).gatewayType());
        Assertions.assertEquals("mdjrkvfgbvfvp", model.value().get(0).allowedFeatures().get(0));
        Assertions.assertEquals("ouw", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GatewaysListResult model = new GatewaysListResult()
            .withValue(Arrays.asList(new GatewayInner().withLocation("qkgh")
                .withTags(mapOf("rwkq", "dzwmkrefajpj", "sjabibs", "yhgbijtjivfx", "bjxbkzbzk", "stawfsdjpvkv"))
                .withGatewayType(GatewayType.PUBLIC)
                .withAllowedFeatures(Arrays.asList("mdjrkvfgbvfvp", "bodacizsjq", "hkr", "ibdeibq"))))
            .withNextLink("ouw");
        model = BinaryData.fromObject(model).toObject(GatewaysListResult.class);
        Assertions.assertEquals("qkgh", model.value().get(0).location());
        Assertions.assertEquals("dzwmkrefajpj", model.value().get(0).tags().get("rwkq"));
        Assertions.assertEquals(GatewayType.PUBLIC, model.value().get(0).gatewayType());
        Assertions.assertEquals("mdjrkvfgbvfvp", model.value().get(0).allowedFeatures().get(0));
        Assertions.assertEquals("ouw", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
