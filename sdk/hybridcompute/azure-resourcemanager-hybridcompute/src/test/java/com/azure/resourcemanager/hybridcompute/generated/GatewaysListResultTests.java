// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.GatewayInner;
import com.azure.resourcemanager.hybridcompute.models.GatewaysListResult;
import com.azure.resourcemanager.hybridcompute.models.GatewayType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GatewaysListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GatewaysListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Deleted\",\"gatewayId\":\"dnw\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"wzsyyceuzs\",\"allowedFeatures\":[\"judpfrxt\",\"thzvaytdwkqbrqu\",\"paxh\",\"xiilivpdtiirqt\"]},\"location\":\"oaxoruzfgsqu\",\"tags\":{\"tramxjez\":\"rxxle\",\"tdooaoj\":\"lwnwxuqlcvydyp\"},\"id\":\"niodkooeb\",\"name\":\"nuj\",\"type\":\"emmsbvdkc\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"gatewayId\":\"infwjlfltkacjve\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"foakgg\",\"allowedFeatures\":[\"agaowpulpqblylsy\",\"k\"]},\"location\":\"nsj\",\"tags\":{\"dszue\":\"tiagx\"},\"id\":\"psbzkfzbeyvpn\",\"name\":\"icvi\",\"type\":\"v\"},{\"properties\":{\"provisioningState\":\"Updating\",\"gatewayId\":\"xrbuukzclew\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"wp\",\"allowedFeatures\":[\"zpof\",\"cckwyfzqwhxxbu\",\"qa\",\"zfeqztppri\"]},\"location\":\"xorjaltolmncwsob\",\"tags\":{\"vglsbjjca\":\"sdbnwdcfhucqdpf\",\"t\":\"vxb\",\"mr\":\"udutnco\"},\"id\":\"xqtvcofu\",\"name\":\"f\",\"type\":\"vkg\"}],\"nextLink\":\"bgdknnqv\"}")
            .toObject(GatewaysListResult.class);
        Assertions.assertEquals("oaxoruzfgsqu", model.value().get(0).location());
        Assertions.assertEquals("rxxle", model.value().get(0).tags().get("tramxjez"));
        Assertions.assertEquals(GatewayType.PUBLIC, model.value().get(0).gatewayType());
        Assertions.assertEquals("judpfrxt", model.value().get(0).allowedFeatures().get(0));
        Assertions.assertEquals("bgdknnqv", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GatewaysListResult model = new GatewaysListResult()
            .withValue(Arrays.asList(
                new GatewayInner().withLocation("oaxoruzfgsqu")
                    .withTags(mapOf("tramxjez", "rxxle", "tdooaoj", "lwnwxuqlcvydyp"))
                    .withGatewayType(GatewayType.PUBLIC)
                    .withAllowedFeatures(Arrays.asList("judpfrxt", "thzvaytdwkqbrqu", "paxh", "xiilivpdtiirqt")),
                new GatewayInner().withLocation("nsj")
                    .withTags(mapOf("dszue", "tiagx"))
                    .withGatewayType(GatewayType.PUBLIC)
                    .withAllowedFeatures(Arrays.asList("agaowpulpqblylsy", "k")),
                new GatewayInner().withLocation("xorjaltolmncwsob")
                    .withTags(mapOf("vglsbjjca", "sdbnwdcfhucqdpf", "t", "vxb", "mr", "udutnco"))
                    .withGatewayType(GatewayType.PUBLIC)
                    .withAllowedFeatures(Arrays.asList("zpof", "cckwyfzqwhxxbu", "qa", "zfeqztppri"))))
            .withNextLink("bgdknnqv");
        model = BinaryData.fromObject(model).toObject(GatewaysListResult.class);
        Assertions.assertEquals("oaxoruzfgsqu", model.value().get(0).location());
        Assertions.assertEquals("rxxle", model.value().get(0).tags().get("tramxjez"));
        Assertions.assertEquals(GatewayType.PUBLIC, model.value().get(0).gatewayType());
        Assertions.assertEquals("judpfrxt", model.value().get(0).allowedFeatures().get(0));
        Assertions.assertEquals("bgdknnqv", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
