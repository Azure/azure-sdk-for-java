// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.GatewayInner;
import com.azure.resourcemanager.hybridcompute.models.GatewaysListResult;
import com.azure.resourcemanager.hybridcompute.models.GatewayType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class GatewaysListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GatewaysListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"gatewayId\":\"areqna\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"gjhkycubeddg\",\"allowedFeatures\":[\"fwqmzqalkrmn\"]},\"location\":\"jpxac\",\"tags\":{\"yffimrzrtuzqogs\":\"dfnbyxbaaabjyv\",\"mewzsyyc\":\"xnevfdnwn\",\"judpfrxt\":\"uzsoi\"},\"id\":\"thzvaytdwkqbrqu\",\"name\":\"paxh\",\"type\":\"xiilivpdtiirqt\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"gatewayId\":\"oruzfgsquyfxrxx\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"ramxjezwlwnw\",\"allowedFeatures\":[\"lcvydy\",\"atdooaojkniod\"]},\"location\":\"oebwnujhemms\",\"tags\":{\"lfltka\":\"kcrodtjinfw\",\"gaowpulpqblylsyx\":\"jvefkdlfoakggkfp\"},\"id\":\"qjnsjervtia\",\"name\":\"xsdszuempsb\",\"type\":\"kfzbeyvpnqicvi\"},{\"properties\":{\"provisioningState\":\"Updating\",\"gatewayId\":\"xdxr\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"zclewyhmlw\",\"allowedFeatures\":[\"tzpofncckwyfzq\"]},\"location\":\"xxbuyq\",\"tags\":{\"or\":\"feqztppriol\",\"ncwsob\":\"altol\",\"pfuvglsbjjca\":\"wcsdbnwdcfhucq\"},\"id\":\"vxb\",\"name\":\"t\",\"type\":\"udutnco\"},{\"properties\":{\"provisioningState\":\"Accepted\",\"gatewayId\":\"qtvcofudflvkgj\",\"gatewayType\":\"Public\",\"gatewayEndpoint\":\"knnqvsaznq\",\"allowedFeatures\":[\"rudsg\",\"a\"]},\"location\":\"kycgrauwj\",\"tags\":{\"s\":\"aeburuvdmo\",\"tpuqujmq\":\"zlxwabmqoefkifr\",\"jcntuj\":\"gkfbtndoaong\"},\"id\":\"tcje\",\"name\":\"ftwwaezkojvdc\",\"type\":\"zfoqouicybxar\"}],\"nextLink\":\"szufoxciqopidoa\"}")
            .toObject(GatewaysListResult.class);
        Assertions.assertEquals("jpxac", model.value().get(0).location());
        Assertions.assertEquals("dfnbyxbaaabjyv", model.value().get(0).tags().get("yffimrzrtuzqogs"));
        Assertions.assertEquals(GatewayType.PUBLIC, model.value().get(0).gatewayType());
        Assertions.assertEquals("fwqmzqalkrmn", model.value().get(0).allowedFeatures().get(0));
        Assertions.assertEquals("szufoxciqopidoa", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GatewaysListResult model
            = new GatewaysListResult()
                .withValue(
                    Arrays.asList(
                        new GatewayInner().withLocation("jpxac")
                            .withTags(mapOf("yffimrzrtuzqogs", "dfnbyxbaaabjyv", "mewzsyyc", "xnevfdnwn", "judpfrxt",
                                "uzsoi"))
                            .withGatewayType(GatewayType.PUBLIC)
                            .withAllowedFeatures(Arrays.asList("fwqmzqalkrmn")),
                        new GatewayInner().withLocation("oebwnujhemms")
                            .withTags(mapOf("lfltka", "kcrodtjinfw", "gaowpulpqblylsyx", "jvefkdlfoakggkfp"))
                            .withGatewayType(GatewayType.PUBLIC)
                            .withAllowedFeatures(Arrays.asList("lcvydy", "atdooaojkniod")),
                        new GatewayInner().withLocation("xxbuyq")
                            .withTags(mapOf("or", "feqztppriol", "ncwsob", "altol", "pfuvglsbjjca", "wcsdbnwdcfhucq"))
                            .withGatewayType(GatewayType.PUBLIC)
                            .withAllowedFeatures(Arrays.asList("tzpofncckwyfzq")),
                        new GatewayInner().withLocation("kycgrauwj")
                            .withTags(mapOf("s", "aeburuvdmo", "tpuqujmq", "zlxwabmqoefkifr", "jcntuj", "gkfbtndoaong"))
                            .withGatewayType(GatewayType.PUBLIC)
                            .withAllowedFeatures(Arrays.asList("rudsg", "a"))))
                .withNextLink("szufoxciqopidoa");
        model = BinaryData.fromObject(model).toObject(GatewaysListResult.class);
        Assertions.assertEquals("jpxac", model.value().get(0).location());
        Assertions.assertEquals("dfnbyxbaaabjyv", model.value().get(0).tags().get("yffimrzrtuzqogs"));
        Assertions.assertEquals(GatewayType.PUBLIC, model.value().get(0).gatewayType());
        Assertions.assertEquals("fwqmzqalkrmn", model.value().get(0).allowedFeatures().get(0));
        Assertions.assertEquals("szufoxciqopidoa", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
