// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.License;
import com.azure.resourcemanager.hybridcompute.models.LicenseCoreType;
import com.azure.resourcemanager.hybridcompute.models.LicenseDetails;
import com.azure.resourcemanager.hybridcompute.models.LicenseEdition;
import com.azure.resourcemanager.hybridcompute.models.LicenseState;
import com.azure.resourcemanager.hybridcompute.models.LicenseTarget;
import com.azure.resourcemanager.hybridcompute.models.LicenseType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class LicensesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"tenantId\":\"ih\",\"licenseType\":\"ESU\",\"licenseDetails\":{\"state\":\"Deactivated\",\"target\":\"Windows"
                + " Server"
                + " 2012\",\"edition\":\"Datacenter\",\"type\":\"vCore\",\"processors\":479355012,\"assignedLicenses\":315596091,\"immutableId\":\"jv\"}},\"location\":\"imwkslircizj\",\"tags\":{\"vlhv\":\"dfcea\",\"jslb\":\"gdyftumrtwna\"},\"id\":\"wkojgcyztsfmzn\",\"name\":\"aeqphchqnr\",\"type\":\"rpxeh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HybridComputeManager manager =
            HybridComputeManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        License response =
            manager
                .licenses()
                .define("vp")
                .withRegion("tpipiwyczuhx")
                .withExistingResourceGroup("rujbzbomvzzbtdc")
                .withTags(mapOf("dvlmfwdgzxul", "qjlihhyuspska", "rsre", "cvpa", "xifqjzgxm", "zvxurisjnhny"))
                .withTenantId("viylwdshfssnrbgy")
                .withLicenseType(LicenseType.ESU)
                .withLicenseDetails(
                    new LicenseDetails()
                        .withState(LicenseState.DEACTIVATED)
                        .withTarget(LicenseTarget.WINDOWS_SERVER_2012)
                        .withEdition(LicenseEdition.STANDARD)
                        .withType(LicenseCoreType.P_CORE)
                        .withProcessors(326840480))
                .create();

        Assertions.assertEquals("imwkslircizj", response.location());
        Assertions.assertEquals("dfcea", response.tags().get("vlhv"));
        Assertions.assertEquals("ih", response.tenantId());
        Assertions.assertEquals(LicenseType.ESU, response.licenseType());
        Assertions.assertEquals(LicenseState.DEACTIVATED, response.licenseDetails().state());
        Assertions.assertEquals(LicenseTarget.WINDOWS_SERVER_2012, response.licenseDetails().target());
        Assertions.assertEquals(LicenseEdition.DATACENTER, response.licenseDetails().edition());
        Assertions.assertEquals(LicenseCoreType.V_CORE, response.licenseDetails().type());
        Assertions.assertEquals(479355012, response.licenseDetails().processors());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
