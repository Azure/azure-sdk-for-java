// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.AgentUpgrade;
import com.azure.resourcemanager.hybridcompute.models.ArcKindEnum;
import com.azure.resourcemanager.hybridcompute.models.AssessmentModeTypes;
import com.azure.resourcemanager.hybridcompute.models.CloudMetadata;
import com.azure.resourcemanager.hybridcompute.models.Identity;
import com.azure.resourcemanager.hybridcompute.models.LocationData;
import com.azure.resourcemanager.hybridcompute.models.MachineUpdate;
import com.azure.resourcemanager.hybridcompute.models.OSProfile;
import com.azure.resourcemanager.hybridcompute.models.OSProfileLinuxConfiguration;
import com.azure.resourcemanager.hybridcompute.models.OSProfileWindowsConfiguration;
import com.azure.resourcemanager.hybridcompute.models.PatchModeTypes;
import com.azure.resourcemanager.hybridcompute.models.ResourceIdentityType;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class MachineUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"qddrihpfhoqcaae\",\"tenantId\":\"aomdjvlpjxx\",\"type\":\"SystemAssigned\"},\"kind\":\"AVS\",\"properties\":{\"locationData\":{\"name\":\"eivsiykzkdnc\",\"city\":\"xonbzoggculapz\",\"district\":\"rpgogtqxep\",\"countryOrRegion\":\"lbfu\"},\"osProfile\":{\"computerName\":\"yjt\",\"windowsConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"ImageDefault\",\"patchMode\":\"AutomaticByOS\"}},\"linuxConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"ImageDefault\",\"patchMode\":\"ImageDefault\"}}},\"cloudMetadata\":{\"provider\":\"owuxrkjpvdwx\"},\"agentUpgrade\":{\"desiredVersion\":\"iivwzjbhyzsxjrka\",\"correlationId\":\"879e1ca6-7541-4b3d-8f2b-67c5dfcba3d9\",\"enableAutomaticUpgrade\":false,\"lastAttemptDesiredVersion\":\"egv\",\"lastAttemptTimestamp\":\"2021-11-01T05:28:23Z\",\"lastAttemptStatus\":\"Success\",\"lastAttemptMessage\":\"qvldspastjbkkd\"},\"parentClusterResourceId\":\"lves\",\"privateLinkScopeResourceId\":\"jlxr\"},\"tags\":{\"hpxlktwkuziycs\":\"ozapeew\",\"yhjtqedcgzu\":\"evufuztck\",\"zrrjvpgly\":\"wmmrq\",\"vtoepryutnw\":\"zgkrvqe\"}}")
            .toObject(MachineUpdate.class);
        Assertions.assertEquals("ozapeew", model.tags().get("hpxlktwkuziycs"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ArcKindEnum.AVS, model.kind());
        Assertions.assertEquals("eivsiykzkdnc", model.locationData().name());
        Assertions.assertEquals("xonbzoggculapz", model.locationData().city());
        Assertions.assertEquals("rpgogtqxep", model.locationData().district());
        Assertions.assertEquals("lbfu", model.locationData().countryOrRegion());
        Assertions.assertEquals(AssessmentModeTypes.IMAGE_DEFAULT,
            model.osProfile().windowsConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.AUTOMATIC_BY_OS, model.osProfile().windowsConfiguration().patchMode());
        Assertions.assertEquals(AssessmentModeTypes.IMAGE_DEFAULT,
            model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.IMAGE_DEFAULT, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals("iivwzjbhyzsxjrka", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals(UUID.fromString("879e1ca6-7541-4b3d-8f2b-67c5dfcba3d9"),
            model.agentUpgrade().correlationId());
        Assertions.assertEquals(false, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("lves", model.parentClusterResourceId());
        Assertions.assertEquals("jlxr", model.privateLinkScopeResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineUpdate model = new MachineUpdate()
            .withTags(mapOf("hpxlktwkuziycs", "ozapeew", "yhjtqedcgzu", "evufuztck", "zrrjvpgly", "wmmrq",
                "vtoepryutnw", "zgkrvqe"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withKind(ArcKindEnum.AVS)
            .withLocationData(new LocationData().withName("eivsiykzkdnc")
                .withCity("xonbzoggculapz")
                .withDistrict("rpgogtqxep")
                .withCountryOrRegion("lbfu"))
            .withOsProfile(new OSProfile()
                .withWindowsConfiguration(
                    new OSProfileWindowsConfiguration().withAssessmentMode(AssessmentModeTypes.IMAGE_DEFAULT)
                        .withPatchMode(PatchModeTypes.AUTOMATIC_BY_OS))
                .withLinuxConfiguration(
                    new OSProfileLinuxConfiguration().withAssessmentMode(AssessmentModeTypes.IMAGE_DEFAULT)
                        .withPatchMode(PatchModeTypes.IMAGE_DEFAULT)))
            .withCloudMetadata(new CloudMetadata())
            .withAgentUpgrade(new AgentUpgrade().withDesiredVersion("iivwzjbhyzsxjrka")
                .withCorrelationId(UUID.fromString("879e1ca6-7541-4b3d-8f2b-67c5dfcba3d9"))
                .withEnableAutomaticUpgrade(false))
            .withParentClusterResourceId("lves")
            .withPrivateLinkScopeResourceId("jlxr");
        model = BinaryData.fromObject(model).toObject(MachineUpdate.class);
        Assertions.assertEquals("ozapeew", model.tags().get("hpxlktwkuziycs"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ArcKindEnum.AVS, model.kind());
        Assertions.assertEquals("eivsiykzkdnc", model.locationData().name());
        Assertions.assertEquals("xonbzoggculapz", model.locationData().city());
        Assertions.assertEquals("rpgogtqxep", model.locationData().district());
        Assertions.assertEquals("lbfu", model.locationData().countryOrRegion());
        Assertions.assertEquals(AssessmentModeTypes.IMAGE_DEFAULT,
            model.osProfile().windowsConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.AUTOMATIC_BY_OS, model.osProfile().windowsConfiguration().patchMode());
        Assertions.assertEquals(AssessmentModeTypes.IMAGE_DEFAULT,
            model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.IMAGE_DEFAULT, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals("iivwzjbhyzsxjrka", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals(UUID.fromString("879e1ca6-7541-4b3d-8f2b-67c5dfcba3d9"),
            model.agentUpgrade().correlationId());
        Assertions.assertEquals(false, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("lves", model.parentClusterResourceId());
        Assertions.assertEquals("jlxr", model.privateLinkScopeResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
