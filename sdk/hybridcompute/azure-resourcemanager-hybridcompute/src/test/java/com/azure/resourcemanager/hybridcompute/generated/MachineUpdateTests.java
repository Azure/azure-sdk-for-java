// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.AgentUpgrade;
import com.azure.resourcemanager.hybridcompute.models.ArcKindEnum;
import com.azure.resourcemanager.hybridcompute.models.AssessmentModeTypes;
import com.azure.resourcemanager.hybridcompute.models.CloudMetadata;
import com.azure.resourcemanager.hybridcompute.models.Identity;
import com.azure.resourcemanager.hybridcompute.models.LocationData;
import com.azure.resourcemanager.hybridcompute.models.MachineUpdate;
import com.azure.resourcemanager.hybridcompute.models.OSProfile;
import com.azure.resourcemanager.hybridcompute.models.OSProfileLinuxConfiguration;
import com.azure.resourcemanager.hybridcompute.models.OSProfileWindowsConfiguration;
import com.azure.resourcemanager.hybridcompute.models.PatchModeTypes;
import com.azure.resourcemanager.hybridcompute.models.ResourceIdentityType;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class MachineUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"fffwafqroudaspav\",\"tenantId\":\"hrv\",\"type\":\"SystemAssigned\"},\"kind\":\"GCP\",\"properties\":{\"locationData\":{\"name\":\"ud\",\"city\":\"xg\",\"district\":\"oyxcdyuib\",\"countryOrRegion\":\"fdn\"},\"osProfile\":{\"computerName\":\"dvfvfcjnaeoi\",\"windowsConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"AutomaticByPlatform\",\"patchMode\":\"AutomaticByOS\",\"enableHotpatching\":true,\"status\":{\"hotpatchEnablementStatus\":\"PendingEvaluation\"}}},\"linuxConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"ImageDefault\",\"patchMode\":\"Manual\",\"enableHotpatching\":true,\"status\":{\"hotpatchEnablementStatus\":\"Disabled\"}}}},\"cloudMetadata\":{\"provider\":\"vxilcbt\"},\"agentUpgrade\":{\"desiredVersion\":\"nzeyqxtjj\",\"correlationId\":\"926e45dd-c416-46f6-98b5-e72de383dee8\",\"enableAutomaticUpgrade\":false,\"lastAttemptDesiredVersion\":\"hycav\",\"lastAttemptTimestamp\":\"2021-06-01T16:37:29Z\",\"lastAttemptStatus\":\"Failed\",\"lastAttemptMessage\":\"beesmieknlra\"},\"parentClusterResourceId\":\"aawiuagydwqfb\",\"privateLinkScopeResourceId\":\"yr\"},\"tags\":{\"ojocqwogf\":\"agt\",\"uxylfsbtkadpy\":\"zjvusfzldmo\"}}")
            .toObject(MachineUpdate.class);
        Assertions.assertEquals("agt", model.tags().get("ojocqwogf"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ArcKindEnum.GCP, model.kind());
        Assertions.assertEquals("ud", model.locationData().name());
        Assertions.assertEquals("xg", model.locationData().city());
        Assertions.assertEquals("oyxcdyuib", model.locationData().district());
        Assertions.assertEquals("fdn", model.locationData().countryOrRegion());
        Assertions.assertEquals(AssessmentModeTypes.AUTOMATIC_BY_PLATFORM,
            model.osProfile().windowsConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.AUTOMATIC_BY_OS, model.osProfile().windowsConfiguration().patchMode());
        Assertions.assertEquals(true, model.osProfile().windowsConfiguration().enableHotpatching());
        Assertions.assertEquals(AssessmentModeTypes.IMAGE_DEFAULT,
            model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.MANUAL, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals(true, model.osProfile().linuxConfiguration().enableHotpatching());
        Assertions.assertEquals("nzeyqxtjj", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals(UUID.fromString("926e45dd-c416-46f6-98b5-e72de383dee8"),
            model.agentUpgrade().correlationId());
        Assertions.assertEquals(false, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("aawiuagydwqfb", model.parentClusterResourceId());
        Assertions.assertEquals("yr", model.privateLinkScopeResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineUpdate model = new MachineUpdate().withTags(mapOf("ojocqwogf", "agt", "uxylfsbtkadpy", "zjvusfzldmo"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withKind(ArcKindEnum.GCP)
            .withLocationData(
                new LocationData().withName("ud").withCity("xg").withDistrict("oyxcdyuib").withCountryOrRegion("fdn"))
            .withOsProfile(new OSProfile()
                .withWindowsConfiguration(
                    new OSProfileWindowsConfiguration().withAssessmentMode(AssessmentModeTypes.AUTOMATIC_BY_PLATFORM)
                        .withPatchMode(PatchModeTypes.AUTOMATIC_BY_OS)
                        .withEnableHotpatching(true))
                .withLinuxConfiguration(
                    new OSProfileLinuxConfiguration().withAssessmentMode(AssessmentModeTypes.IMAGE_DEFAULT)
                        .withPatchMode(PatchModeTypes.MANUAL)
                        .withEnableHotpatching(true)))
            .withCloudMetadata(new CloudMetadata())
            .withAgentUpgrade(new AgentUpgrade().withDesiredVersion("nzeyqxtjj")
                .withCorrelationId(UUID.fromString("926e45dd-c416-46f6-98b5-e72de383dee8"))
                .withEnableAutomaticUpgrade(false))
            .withParentClusterResourceId("aawiuagydwqfb")
            .withPrivateLinkScopeResourceId("yr");
        model = BinaryData.fromObject(model).toObject(MachineUpdate.class);
        Assertions.assertEquals("agt", model.tags().get("ojocqwogf"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ArcKindEnum.GCP, model.kind());
        Assertions.assertEquals("ud", model.locationData().name());
        Assertions.assertEquals("xg", model.locationData().city());
        Assertions.assertEquals("oyxcdyuib", model.locationData().district());
        Assertions.assertEquals("fdn", model.locationData().countryOrRegion());
        Assertions.assertEquals(AssessmentModeTypes.AUTOMATIC_BY_PLATFORM,
            model.osProfile().windowsConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.AUTOMATIC_BY_OS, model.osProfile().windowsConfiguration().patchMode());
        Assertions.assertEquals(true, model.osProfile().windowsConfiguration().enableHotpatching());
        Assertions.assertEquals(AssessmentModeTypes.IMAGE_DEFAULT,
            model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.MANUAL, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals(true, model.osProfile().linuxConfiguration().enableHotpatching());
        Assertions.assertEquals("nzeyqxtjj", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals(UUID.fromString("926e45dd-c416-46f6-98b5-e72de383dee8"),
            model.agentUpgrade().correlationId());
        Assertions.assertEquals(false, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("aawiuagydwqfb", model.parentClusterResourceId());
        Assertions.assertEquals("yr", model.privateLinkScopeResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
