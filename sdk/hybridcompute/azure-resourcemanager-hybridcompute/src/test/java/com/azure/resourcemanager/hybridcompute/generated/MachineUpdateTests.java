// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.AgentUpgrade;
import com.azure.resourcemanager.hybridcompute.models.ArcKindEnum;
import com.azure.resourcemanager.hybridcompute.models.AssessmentModeTypes;
import com.azure.resourcemanager.hybridcompute.models.CloudMetadata;
import com.azure.resourcemanager.hybridcompute.models.Identity;
import com.azure.resourcemanager.hybridcompute.models.LocationData;
import com.azure.resourcemanager.hybridcompute.models.MachineUpdate;
import com.azure.resourcemanager.hybridcompute.models.OSProfile;
import com.azure.resourcemanager.hybridcompute.models.OSProfileLinuxConfiguration;
import com.azure.resourcemanager.hybridcompute.models.OSProfileWindowsConfiguration;
import com.azure.resourcemanager.hybridcompute.models.PatchModeTypes;
import com.azure.resourcemanager.hybridcompute.models.ResourceIdentityType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineUpdate model =
            BinaryData
                .fromString(
                    "{\"identity\":{\"principalId\":\"vpsvuoymgcce\",\"tenantId\":\"ezrypql\",\"type\":\"SystemAssigned\"},\"kind\":\"VMware\",\"properties\":{\"locationData\":{\"name\":\"qwkyhkobop\",\"city\":\"edkowepbqpcrfk\",\"district\":\"ccsnjvcdwxlpq\",\"countryOrRegion\":\"ftnkhtj\"},\"osProfile\":{\"computerName\":\"ngwfqatm\",\"windowsConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"ImageDefault\",\"patchMode\":\"AutomaticByPlatform\"}},\"linuxConfiguration\":{\"patchSettings\":{\"assessmentMode\":\"AutomaticByPlatform\",\"patchMode\":\"Manual\"}}},\"cloudMetadata\":{\"provider\":\"zywkb\"},\"agentUpgrade\":{\"desiredVersion\":\"yuzhlhkjoqrvq\",\"correlationId\":\"atjinrvgoupmfiib\",\"enableAutomaticUpgrade\":false,\"lastAttemptDesiredVersion\":\"ioolvrwxkvtkkgll\",\"lastAttemptTimestamp\":\"jygvjayvbl\",\"lastAttemptStatus\":\"Failed\",\"lastAttemptMessage\":\"zuhbxvvyhgsopb\"},\"parentClusterResourceId\":\"qufegxuvwzfbn\",\"privateLinkScopeResourceId\":\"mctlpdngitv\"},\"tags\":{\"jejveg\":\"hrixkwmy\",\"eaxhcexdrrvqahqk\":\"hbpnaixexccbd\",\"hyjsvfycx\":\"htpwij\",\"t\":\"bfvoowvrv\"}}")
                .toObject(MachineUpdate.class);
        Assertions.assertEquals("hrixkwmy", model.tags().get("jejveg"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ArcKindEnum.VMWARE, model.kind());
        Assertions.assertEquals("qwkyhkobop", model.locationData().name());
        Assertions.assertEquals("edkowepbqpcrfk", model.locationData().city());
        Assertions.assertEquals("ccsnjvcdwxlpq", model.locationData().district());
        Assertions.assertEquals("ftnkhtj", model.locationData().countryOrRegion());
        Assertions
            .assertEquals(AssessmentModeTypes.IMAGE_DEFAULT, model.osProfile().windowsConfiguration().assessmentMode());
        Assertions
            .assertEquals(PatchModeTypes.AUTOMATIC_BY_PLATFORM, model.osProfile().windowsConfiguration().patchMode());
        Assertions
            .assertEquals(
                AssessmentModeTypes.AUTOMATIC_BY_PLATFORM, model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.MANUAL, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals("yuzhlhkjoqrvq", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals("atjinrvgoupmfiib", model.agentUpgrade().correlationId());
        Assertions.assertEquals(false, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("qufegxuvwzfbn", model.parentClusterResourceId());
        Assertions.assertEquals("mctlpdngitv", model.privateLinkScopeResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineUpdate model =
            new MachineUpdate()
                .withTags(
                    mapOf(
                        "jejveg",
                        "hrixkwmy",
                        "eaxhcexdrrvqahqk",
                        "hbpnaixexccbd",
                        "hyjsvfycx",
                        "htpwij",
                        "t",
                        "bfvoowvrv"))
                .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
                .withKind(ArcKindEnum.VMWARE)
                .withLocationData(
                    new LocationData()
                        .withName("qwkyhkobop")
                        .withCity("edkowepbqpcrfk")
                        .withDistrict("ccsnjvcdwxlpq")
                        .withCountryOrRegion("ftnkhtj"))
                .withOsProfile(
                    new OSProfile()
                        .withWindowsConfiguration(
                            new OSProfileWindowsConfiguration()
                                .withAssessmentMode(AssessmentModeTypes.IMAGE_DEFAULT)
                                .withPatchMode(PatchModeTypes.AUTOMATIC_BY_PLATFORM))
                        .withLinuxConfiguration(
                            new OSProfileLinuxConfiguration()
                                .withAssessmentMode(AssessmentModeTypes.AUTOMATIC_BY_PLATFORM)
                                .withPatchMode(PatchModeTypes.MANUAL)))
                .withCloudMetadata(new CloudMetadata())
                .withAgentUpgrade(
                    new AgentUpgrade()
                        .withDesiredVersion("yuzhlhkjoqrvq")
                        .withCorrelationId("atjinrvgoupmfiib")
                        .withEnableAutomaticUpgrade(false))
                .withParentClusterResourceId("qufegxuvwzfbn")
                .withPrivateLinkScopeResourceId("mctlpdngitv");
        model = BinaryData.fromObject(model).toObject(MachineUpdate.class);
        Assertions.assertEquals("hrixkwmy", model.tags().get("jejveg"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals(ArcKindEnum.VMWARE, model.kind());
        Assertions.assertEquals("qwkyhkobop", model.locationData().name());
        Assertions.assertEquals("edkowepbqpcrfk", model.locationData().city());
        Assertions.assertEquals("ccsnjvcdwxlpq", model.locationData().district());
        Assertions.assertEquals("ftnkhtj", model.locationData().countryOrRegion());
        Assertions
            .assertEquals(AssessmentModeTypes.IMAGE_DEFAULT, model.osProfile().windowsConfiguration().assessmentMode());
        Assertions
            .assertEquals(PatchModeTypes.AUTOMATIC_BY_PLATFORM, model.osProfile().windowsConfiguration().patchMode());
        Assertions
            .assertEquals(
                AssessmentModeTypes.AUTOMATIC_BY_PLATFORM, model.osProfile().linuxConfiguration().assessmentMode());
        Assertions.assertEquals(PatchModeTypes.MANUAL, model.osProfile().linuxConfiguration().patchMode());
        Assertions.assertEquals("yuzhlhkjoqrvq", model.agentUpgrade().desiredVersion());
        Assertions.assertEquals("atjinrvgoupmfiib", model.agentUpgrade().correlationId());
        Assertions.assertEquals(false, model.agentUpgrade().enableAutomaticUpgrade());
        Assertions.assertEquals("qufegxuvwzfbn", model.parentClusterResourceId());
        Assertions.assertEquals("mctlpdngitv", model.privateLinkScopeResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
