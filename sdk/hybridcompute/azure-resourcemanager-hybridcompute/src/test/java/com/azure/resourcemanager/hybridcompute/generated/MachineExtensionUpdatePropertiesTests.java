// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.fluent.models.MachineExtensionUpdateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdateProperties model = BinaryData.fromString(
            "{\"forceUpdateTag\":\"gk\",\"publisher\":\"lvmbmpaxmodfvuef\",\"type\":\"sbpfvmwyhr\",\"typeHandlerVersion\":\"uyfta\",\"enableAutomaticUpgrade\":false,\"autoUpgradeMinorVersion\":true,\"settings\":{\"ksmond\":\"datazvqtmnubexkp\",\"gkopkwhojvpajqgx\":\"datamquxvypo\"},\"protectedSettings\":{\"vhelxprglyatdd\":\"dataocmbqfqvmkcxoza\",\"rjxgciqib\":\"datakcbcue\",\"sdqrhzoymibmrq\":\"datahos\"}}")
            .toObject(MachineExtensionUpdateProperties.class);
        Assertions.assertEquals("gk", model.forceUpdateTag());
        Assertions.assertEquals("lvmbmpaxmodfvuef", model.publisher());
        Assertions.assertEquals("sbpfvmwyhr", model.type());
        Assertions.assertEquals("uyfta", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdateProperties model = new MachineExtensionUpdateProperties().withForceUpdateTag("gk")
            .withPublisher("lvmbmpaxmodfvuef")
            .withType("sbpfvmwyhr")
            .withTypeHandlerVersion("uyfta")
            .withEnableAutomaticUpgrade(false)
            .withAutoUpgradeMinorVersion(true)
            .withSettings(mapOf("ksmond", "datazvqtmnubexkp", "gkopkwhojvpajqgx", "datamquxvypo"))
            .withProtectedSettings(
                mapOf("vhelxprglyatdd", "dataocmbqfqvmkcxoza", "rjxgciqib", "datakcbcue", "sdqrhzoymibmrq", "datahos"));
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdateProperties.class);
        Assertions.assertEquals("gk", model.forceUpdateTag());
        Assertions.assertEquals("lvmbmpaxmodfvuef", model.publisher());
        Assertions.assertEquals("sbpfvmwyhr", model.type());
        Assertions.assertEquals("uyfta", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
