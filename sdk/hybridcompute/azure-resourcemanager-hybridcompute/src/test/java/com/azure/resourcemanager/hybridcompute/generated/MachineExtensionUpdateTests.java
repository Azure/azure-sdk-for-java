// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionUpdate;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionUpdateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"forceUpdateTag\":\"njbiksqrglssain\",\"publisher\":\"jwnzlljfmp\",\"type\":\"ebvmgxsabkyqd\",\"typeHandlerVersion\":\"jitcjczdzevn\",\"autoUpgradeMinorVersion\":false,\"settings\":\"datawpdappdsbdkv\",\"protectedSettings\":\"datawjfeusnhutjel\"},\"tags\":{\"cdgea\":\"ldhugjzzdatqxh\"}}")
                .toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("ldhugjzzdatqxh", model.tags().get("cdgea"));
        Assertions.assertEquals("njbiksqrglssain", model.properties().forceUpdateTag());
        Assertions.assertEquals("jwnzlljfmp", model.properties().publisher());
        Assertions.assertEquals("ebvmgxsabkyqd", model.properties().type());
        Assertions.assertEquals("jitcjczdzevn", model.properties().typeHandlerVersion());
        Assertions.assertEquals(false, model.properties().autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdate model =
            new MachineExtensionUpdate()
                .withTags(mapOf("cdgea", "ldhugjzzdatqxh"))
                .withProperties(
                    new MachineExtensionUpdateProperties()
                        .withForceUpdateTag("njbiksqrglssain")
                        .withPublisher("jwnzlljfmp")
                        .withType("ebvmgxsabkyqd")
                        .withTypeHandlerVersion("jitcjczdzevn")
                        .withAutoUpgradeMinorVersion(false)
                        .withSettings("datawpdappdsbdkv")
                        .withProtectedSettings("datawjfeusnhutjel"));
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("ldhugjzzdatqxh", model.tags().get("cdgea"));
        Assertions.assertEquals("njbiksqrglssain", model.properties().forceUpdateTag());
        Assertions.assertEquals("jwnzlljfmp", model.properties().publisher());
        Assertions.assertEquals("ebvmgxsabkyqd", model.properties().type());
        Assertions.assertEquals("jitcjczdzevn", model.properties().typeHandlerVersion());
        Assertions.assertEquals(false, model.properties().autoUpgradeMinorVersion());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
