// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdate model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"forceUpdateTag\":\"ceoveilovno\",\"publisher\":\"fj\",\"type\":\"njbkcnxdhbttkph\",\"typeHandlerVersion\":\"pnvjtoqnermclf\",\"enableAutomaticUpgrade\":false,\"autoUpgradeMinorVersion\":true,\"settings\":{\"zq\":\"datascrpabgyepsbjt\",\"fjz\":\"datagxywpmue\",\"dsuyonobgla\":\"datafqkquj\",\"tcc\":\"datacq\"},\"protectedSettings\":{\"wfudwpzntxhdzhl\":\"dataudxytlmoyrx\",\"hckfrlhrx\":\"dataqj\",\"ca\":\"databkyvp\"}},\"tags\":{\"nwbmeh\":\"bpzkafkuwbc\"}}")
                .toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("bpzkafkuwbc", model.tags().get("nwbmeh"));
        Assertions.assertEquals("ceoveilovno", model.forceUpdateTag());
        Assertions.assertEquals("fj", model.publisher());
        Assertions.assertEquals("njbkcnxdhbttkph", model.type());
        Assertions.assertEquals("pnvjtoqnermclf", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdate model =
            new MachineExtensionUpdate()
                .withTags(mapOf("nwbmeh", "bpzkafkuwbc"))
                .withForceUpdateTag("ceoveilovno")
                .withPublisher("fj")
                .withType("njbkcnxdhbttkph")
                .withTypeHandlerVersion("pnvjtoqnermclf")
                .withEnableAutomaticUpgrade(false)
                .withAutoUpgradeMinorVersion(true)
                .withSettings(
                    mapOf(
                        "zq",
                        "datascrpabgyepsbjt",
                        "fjz",
                        "datagxywpmue",
                        "dsuyonobgla",
                        "datafqkquj",
                        "tcc",
                        "datacq"))
                .withProtectedSettings(
                    mapOf("wfudwpzntxhdzhl", "dataudxytlmoyrx", "hckfrlhrx", "dataqj", "ca", "databkyvp"));
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("bpzkafkuwbc", model.tags().get("nwbmeh"));
        Assertions.assertEquals("ceoveilovno", model.forceUpdateTag());
        Assertions.assertEquals("fj", model.publisher());
        Assertions.assertEquals("njbkcnxdhbttkph", model.type());
        Assertions.assertEquals("pnvjtoqnermclf", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
