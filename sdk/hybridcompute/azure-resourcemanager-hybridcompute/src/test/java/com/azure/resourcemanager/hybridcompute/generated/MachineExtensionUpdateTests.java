// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdate model = BinaryData.fromString(
            "{\"properties\":{\"forceUpdateTag\":\"txmedj\",\"publisher\":\"slynqwwnc\",\"type\":\"zhxgktrmgucn\",\"typeHandlerVersion\":\"kteo\",\"enableAutomaticUpgrade\":false,\"autoUpgradeMinorVersion\":false,\"settings\":{\"gpfqbuace\":\"datad\",\"qeqxo\":\"datapzfqrhhuaoppp\",\"ahzxctobgbk\":\"dataz\",\"mgrcfbu\":\"datamoizpos\"},\"protectedSettings\":{\"xxjyngudivkrtsw\":\"datafqjhhkxbpvjymj\",\"vjfdx\":\"dataxqzvszjfa\",\"qtdo\":\"dataivetvtcq\"}},\"tags\":{\"yslqbhsfx\":\"bxvwv\",\"lmpewwwfbkr\":\"blytk\",\"vshqjohxcr\":\"rn\",\"sub\":\"bfovasrruvwbhsq\"}}")
            .toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("bxvwv", model.tags().get("yslqbhsfx"));
        Assertions.assertEquals("txmedj", model.forceUpdateTag());
        Assertions.assertEquals("slynqwwnc", model.publisher());
        Assertions.assertEquals("zhxgktrmgucn", model.type());
        Assertions.assertEquals("kteo", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(false, model.autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdate model = new MachineExtensionUpdate()
            .withTags(mapOf("yslqbhsfx", "bxvwv", "lmpewwwfbkr", "blytk", "vshqjohxcr", "rn", "sub", "bfovasrruvwbhsq"))
            .withForceUpdateTag("txmedj")
            .withPublisher("slynqwwnc")
            .withType("zhxgktrmgucn")
            .withTypeHandlerVersion("kteo")
            .withEnableAutomaticUpgrade(false)
            .withAutoUpgradeMinorVersion(false)
            .withSettings(mapOf("gpfqbuace", "datad", "qeqxo", "datapzfqrhhuaoppp", "ahzxctobgbk", "dataz", "mgrcfbu",
                "datamoizpos"))
            .withProtectedSettings(
                mapOf("xxjyngudivkrtsw", "datafqjhhkxbpvjymj", "vjfdx", "dataxqzvszjfa", "qtdo", "dataivetvtcq"));
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("bxvwv", model.tags().get("yslqbhsfx"));
        Assertions.assertEquals("txmedj", model.forceUpdateTag());
        Assertions.assertEquals("slynqwwnc", model.publisher());
        Assertions.assertEquals("zhxgktrmgucn", model.type());
        Assertions.assertEquals("kteo", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(false, model.autoUpgradeMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
