// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdate model = BinaryData.fromString(
            "{\"properties\":{\"forceUpdateTag\":\"pxebmnzbt\",\"publisher\":\"jpglkfgohdne\",\"type\":\"lfphsdyhtozfikd\",\"typeHandlerVersion\":\"wq\",\"enableAutomaticUpgrade\":false,\"autoUpgradeMinorVersion\":false,\"settings\":{\"hcohfwdsjnk\":\"datalvithhqzonosgg\",\"swacffgdkzz\":\"dataljuti\"},\"protectedSettings\":{\"a\":\"datafvhqc\",\"uflrwd\":\"datalvpnpp\",\"hgw\":\"datahdlxyjrxsagafcn\",\"q\":\"dataapnedgfbcvkc\"}},\"tags\":{\"rhvoods\":\"eqdcv\",\"opcjwvnhd\":\"tbobz\",\"mgxcxrslpm\":\"d\",\"qsluicp\":\"twuoegrpkhjwni\"}}")
            .toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("eqdcv", model.tags().get("rhvoods"));
        Assertions.assertEquals("pxebmnzbt", model.forceUpdateTag());
        Assertions.assertEquals("jpglkfgohdne", model.publisher());
        Assertions.assertEquals("lfphsdyhtozfikd", model.type());
        Assertions.assertEquals("wq", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(false, model.autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdate model = new MachineExtensionUpdate()
            .withTags(mapOf("rhvoods", "eqdcv", "opcjwvnhd", "tbobz", "mgxcxrslpm", "d", "qsluicp", "twuoegrpkhjwni"))
            .withForceUpdateTag("pxebmnzbt")
            .withPublisher("jpglkfgohdne")
            .withType("lfphsdyhtozfikd")
            .withTypeHandlerVersion("wq")
            .withEnableAutomaticUpgrade(false)
            .withAutoUpgradeMinorVersion(false)
            .withSettings(mapOf("hcohfwdsjnk", "datalvithhqzonosgg", "swacffgdkzz", "dataljuti"))
            .withProtectedSettings(
                mapOf("a", "datafvhqc", "uflrwd", "datalvpnpp", "hgw", "datahdlxyjrxsagafcn", "q", "dataapnedgfbcvkc"));
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("eqdcv", model.tags().get("rhvoods"));
        Assertions.assertEquals("pxebmnzbt", model.forceUpdateTag());
        Assertions.assertEquals("jpglkfgohdne", model.publisher());
        Assertions.assertEquals("lfphsdyhtozfikd", model.type());
        Assertions.assertEquals("wq", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(false, model.autoUpgradeMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
