// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hybridcompute.models.MachineExtensionUpdate;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MachineExtensionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MachineExtensionUpdate model = BinaryData.fromString(
            "{\"properties\":{\"forceUpdateTag\":\"zqlveualupjmkhf\",\"publisher\":\"bbcswsrtjri\",\"type\":\"rbpbewtghfgblcg\",\"typeHandlerVersion\":\"zvlvqhjkbegib\",\"enableAutomaticUpgrade\":false,\"autoUpgradeMinorVersion\":true,\"settings\":{\"j\":\"datawwaloayqcgwrt\",\"yzm\":\"datazg\"},\"protectedSettings\":{\"jcbpwxqpsrknft\":\"dataongmtsa\",\"yvxqtayriwwroy\":\"datauvriuhprwm\",\"bycnojvkn\":\"databexrmcq\",\"qsgzvahapj\":\"datae\"}},\"tags\":{\"lxkvu\":\"pvgqzcjrvxdjzlm\",\"n\":\"fhzovawjvzunluth\"}}")
            .toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("pvgqzcjrvxdjzlm", model.tags().get("lxkvu"));
        Assertions.assertEquals("zqlveualupjmkhf", model.forceUpdateTag());
        Assertions.assertEquals("bbcswsrtjri", model.publisher());
        Assertions.assertEquals("rbpbewtghfgblcg", model.type());
        Assertions.assertEquals("zvlvqhjkbegib", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MachineExtensionUpdate model
            = new MachineExtensionUpdate().withTags(mapOf("lxkvu", "pvgqzcjrvxdjzlm", "n", "fhzovawjvzunluth"))
                .withForceUpdateTag("zqlveualupjmkhf")
                .withPublisher("bbcswsrtjri")
                .withType("rbpbewtghfgblcg")
                .withTypeHandlerVersion("zvlvqhjkbegib")
                .withEnableAutomaticUpgrade(false)
                .withAutoUpgradeMinorVersion(true)
                .withSettings(mapOf("j", "datawwaloayqcgwrt", "yzm", "datazg"))
                .withProtectedSettings(mapOf("jcbpwxqpsrknft", "dataongmtsa", "yvxqtayriwwroy", "datauvriuhprwm",
                    "bycnojvkn", "databexrmcq", "qsgzvahapj", "datae"));
        model = BinaryData.fromObject(model).toObject(MachineExtensionUpdate.class);
        Assertions.assertEquals("pvgqzcjrvxdjzlm", model.tags().get("lxkvu"));
        Assertions.assertEquals("zqlveualupjmkhf", model.forceUpdateTag());
        Assertions.assertEquals("bbcswsrtjri", model.publisher());
        Assertions.assertEquals("rbpbewtghfgblcg", model.type());
        Assertions.assertEquals("zvlvqhjkbegib", model.typeHandlerVersion());
        Assertions.assertEquals(false, model.enableAutomaticUpgrade());
        Assertions.assertEquals(true, model.autoUpgradeMinorVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
