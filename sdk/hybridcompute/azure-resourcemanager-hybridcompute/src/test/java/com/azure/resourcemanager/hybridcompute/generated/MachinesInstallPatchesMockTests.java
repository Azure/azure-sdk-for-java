// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.LinuxParameters;
import com.azure.resourcemanager.hybridcompute.models.MachineInstallPatchesParameters;
import com.azure.resourcemanager.hybridcompute.models.MachineInstallPatchesResult;
import com.azure.resourcemanager.hybridcompute.models.VMGuestPatchClassificationLinux;
import com.azure.resourcemanager.hybridcompute.models.VMGuestPatchClassificationWindows;
import com.azure.resourcemanager.hybridcompute.models.VMGuestPatchRebootSetting;
import com.azure.resourcemanager.hybridcompute.models.WindowsParameters;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class MachinesInstallPatchesMockTests {
    @Test
    public void testInstallPatches() throws Exception {
        String responseStr
            = "{\"status\":\"CompletedWithWarnings\",\"installationActivityId\":\"vpdvjdhttzae\",\"rebootStatus\":\"Unknown\",\"maintenanceWindowExceeded\":true,\"excludedPatchCount\":439511971,\"notSelectedPatchCount\":1616798862,\"pendingPatchCount\":361772142,\"installedPatchCount\":120151065,\"failedPatchCount\":525308452,\"startDateTime\":\"2021-08-24T07:14:11Z\",\"lastModifiedDateTime\":\"2021-07-17T20:12:30Z\",\"startedBy\":\"Platform\",\"patchServiceUsed\":\"YUM\",\"osType\":\"Windows\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        HybridComputeManager manager = HybridComputeManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        MachineInstallPatchesResult response = manager.machines()
            .installPatches("rjlnacgcck", "nhxk", new MachineInstallPatchesParameters()
                .withMaximumDuration(Duration.parse("PT176H50M30S"))
                .withRebootSetting(VMGuestPatchRebootSetting.ALWAYS)
                .withWindowsParameters(new WindowsParameters()
                    .withClassificationsToInclude(Arrays.asList(VMGuestPatchClassificationWindows.UPDATE_ROLL_UP,
                        VMGuestPatchClassificationWindows.UPDATE_ROLL_UP, VMGuestPatchClassificationWindows.UPDATES))
                    .withKbNumbersToInclude(Arrays.asList("jraaeranokqguk"))
                    .withKbNumbersToExclude(Arrays.asList("nvbroylaxx"))
                    .withExcludeKbsRequiringReboot(false)
                    .withMaxPatchPublishDate(OffsetDateTime.parse("2021-04-08T11:51:17Z")))
                .withLinuxParameters(new LinuxParameters()
                    .withClassificationsToInclude(
                        Arrays.asList(VMGuestPatchClassificationLinux.OTHER, VMGuestPatchClassificationLinux.SECURITY))
                    .withPackageNameMasksToInclude(Arrays.asList("jsvg"))
                    .withPackageNameMasksToExclude(Arrays.asList("hryvy", "ytdc", "xgccknfnw"))),
                com.azure.core.util.Context.NONE);

    }
}
