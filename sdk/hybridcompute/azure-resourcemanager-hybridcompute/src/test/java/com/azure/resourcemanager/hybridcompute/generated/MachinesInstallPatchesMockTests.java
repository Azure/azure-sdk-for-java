// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hybridcompute.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hybridcompute.HybridComputeManager;
import com.azure.resourcemanager.hybridcompute.models.LinuxParameters;
import com.azure.resourcemanager.hybridcompute.models.MachineInstallPatchesParameters;
import com.azure.resourcemanager.hybridcompute.models.MachineInstallPatchesResult;
import com.azure.resourcemanager.hybridcompute.models.VMGuestPatchClassificationLinux;
import com.azure.resourcemanager.hybridcompute.models.VMGuestPatchClassificationWindows;
import com.azure.resourcemanager.hybridcompute.models.VMGuestPatchRebootSetting;
import com.azure.resourcemanager.hybridcompute.models.WindowsParameters;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MachinesInstallPatchesMockTests {
    @Test
    public void testInstallPatches() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"status\":\"InProgress\",\"installationActivityId\":\"lgy\",\"rebootStatus\":\"Completed\",\"maintenanceWindowExceeded\":false,\"excludedPatchCount\":1322513595,\"notSelectedPatchCount\":1107140158,\"pendingPatchCount\":1814921702,\"installedPatchCount\":1315761996,\"failedPatchCount\":624648984,\"startDateTime\":\"2021-09-03T17:34:04Z\",\"lastModifiedDateTime\":\"2021-08-10T19:53:45Z\",\"startedBy\":\"User\",\"patchServiceUsed\":\"WU\",\"osType\":\"Linux\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HybridComputeManager manager =
            HybridComputeManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MachineInstallPatchesResult response =
            manager
                .machines()
                .installPatches(
                    "ieuzaofjchvcyyy",
                    "fgdo",
                    new MachineInstallPatchesParameters()
                        .withMaximumDuration("cubiipuipw")
                        .withRebootSetting(VMGuestPatchRebootSetting.ALWAYS)
                        .withWindowsParameters(
                            new WindowsParameters()
                                .withClassificationsToInclude(
                                    Arrays
                                        .asList(
                                            VMGuestPatchClassificationWindows.FEATURE_PACK,
                                            VMGuestPatchClassificationWindows.SECURITY))
                                .withKbNumbersToInclude(Arrays.asList("k"))
                                .withKbNumbersToExclude(Arrays.asList("shqvcimpev"))
                                .withExcludeKbsRequiringReboot(true)
                                .withMaxPatchPublishDate(OffsetDateTime.parse("2021-10-01T23:14:47Z")))
                        .withLinuxParameters(
                            new LinuxParameters()
                                .withClassificationsToInclude(
                                    Arrays
                                        .asList(
                                            VMGuestPatchClassificationLinux.CRITICAL,
                                            VMGuestPatchClassificationLinux.OTHER,
                                            VMGuestPatchClassificationLinux.CRITICAL))
                                .withPackageNameMasksToInclude(Arrays.asList("xsmiccwrwfscjf"))
                                .withPackageNameMasksToExclude(Arrays.asList("szqujizdvoq", "tiby"))),
                    com.azure.core.util.Context.NONE);
    }
}
