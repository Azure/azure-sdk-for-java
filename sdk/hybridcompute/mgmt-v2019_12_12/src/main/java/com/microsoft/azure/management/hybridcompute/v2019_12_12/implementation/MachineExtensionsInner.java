/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.hybridcompute.v2019_12_12.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensionUpdate;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in MachineExtensions.
 */
public class MachineExtensionsInner {
    /** The Retrofit service to perform REST calls. */
    private MachineExtensionsService service;
    /** The service client containing this operation class. */
    private HybridComputeManagementClientImpl client;

    /**
     * Initializes an instance of MachineExtensionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public MachineExtensionsInner(Retrofit retrofit, HybridComputeManagementClientImpl client) {
        this.service = retrofit.create(MachineExtensionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for MachineExtensions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MachineExtensionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Body MachineExtensionInner extensionParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Body MachineExtensionInner extensionParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Body MachineExtensionUpdate extensionParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Body MachineExtensionUpdate extensionParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions/{extensionName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("extensionName") String extensionName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions list" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{name}/extensions")
        Observable<Response<ResponseBody>> list(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("$expand") String expand, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.hybridcompute.v2019_12_12.MachineExtensions listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MachineExtensionInner object if successful.
     */
    public MachineExtensionInner createOrUpdate(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).toBlocking().last().body();
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MachineExtensionInner> createOrUpdateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters, final ServiceCallback<MachineExtensionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters), serviceCallback);
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MachineExtensionInner> createOrUpdateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).map(new Func1<ServiceResponse<MachineExtensionInner>, MachineExtensionInner>() {
            @Override
            public MachineExtensionInner call(ServiceResponse<MachineExtensionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MachineExtensionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (extensionParameters == null) {
            throw new IllegalArgumentException("Parameter extensionParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(extensionParameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(resourceGroupName, name, extensionName, this.client.subscriptionId(), extensionParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MachineExtensionInner>() { }.getType());
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MachineExtensionInner object if successful.
     */
    public MachineExtensionInner beginCreateOrUpdate(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).toBlocking().single().body();
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MachineExtensionInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters, final ServiceCallback<MachineExtensionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters), serviceCallback);
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MachineExtensionInner object
     */
    public Observable<MachineExtensionInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).map(new Func1<ServiceResponse<MachineExtensionInner>, MachineExtensionInner>() {
            @Override
            public MachineExtensionInner call(ServiceResponse<MachineExtensionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MachineExtensionInner object
     */
    public Observable<ServiceResponse<MachineExtensionInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, String extensionName, MachineExtensionInner extensionParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (extensionParameters == null) {
            throw new IllegalArgumentException("Parameter extensionParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(extensionParameters);
        return service.beginCreateOrUpdate(resourceGroupName, name, extensionName, this.client.subscriptionId(), extensionParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MachineExtensionInner>>>() {
                @Override
                public Observable<ServiceResponse<MachineExtensionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MachineExtensionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MachineExtensionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MachineExtensionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MachineExtensionInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MachineExtensionInner object if successful.
     */
    public MachineExtensionInner update(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).toBlocking().last().body();
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MachineExtensionInner> updateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters, final ServiceCallback<MachineExtensionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters), serviceCallback);
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<MachineExtensionInner> updateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).map(new Func1<ServiceResponse<MachineExtensionInner>, MachineExtensionInner>() {
            @Override
            public MachineExtensionInner call(ServiceResponse<MachineExtensionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<MachineExtensionInner>> updateWithServiceResponseAsync(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (extensionParameters == null) {
            throw new IllegalArgumentException("Parameter extensionParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(extensionParameters);
        Observable<Response<ResponseBody>> observable = service.update(resourceGroupName, name, extensionName, this.client.subscriptionId(), extensionParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<MachineExtensionInner>() { }.getType());
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MachineExtensionInner object if successful.
     */
    public MachineExtensionInner beginUpdate(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).toBlocking().single().body();
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MachineExtensionInner> beginUpdateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters, final ServiceCallback<MachineExtensionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters), serviceCallback);
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MachineExtensionInner object
     */
    public Observable<MachineExtensionInner> beginUpdateAsync(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, name, extensionName, extensionParameters).map(new Func1<ServiceResponse<MachineExtensionInner>, MachineExtensionInner>() {
            @Override
            public MachineExtensionInner call(ServiceResponse<MachineExtensionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to create or update the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be created or updated.
     * @param extensionName The name of the machine extension.
     * @param extensionParameters Parameters supplied to the Create Machine Extension operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MachineExtensionInner object
     */
    public Observable<ServiceResponse<MachineExtensionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String name, String extensionName, MachineExtensionUpdate extensionParameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (extensionParameters == null) {
            throw new IllegalArgumentException("Parameter extensionParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(extensionParameters);
        return service.beginUpdate(resourceGroupName, name, extensionName, this.client.subscriptionId(), extensionParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MachineExtensionInner>>>() {
                @Override
                public Observable<ServiceResponse<MachineExtensionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MachineExtensionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MachineExtensionInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MachineExtensionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MachineExtensionInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String name, String extensionName) {
        deleteWithServiceResponseAsync(resourceGroupName, name, extensionName).toBlocking().last().body();
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String name, String extensionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, name, extensionName), serviceCallback);
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String name, String extensionName) {
        return deleteWithServiceResponseAsync(resourceGroupName, name, extensionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String name, String extensionName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, name, extensionName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String name, String extensionName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, name, extensionName).toBlocking().single().body();
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String name, String extensionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, name, extensionName), serviceCallback);
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String name, String extensionName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, name, extensionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to delete the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine where the extension should be deleted.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String name, String extensionName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, name, extensionName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The operation to get the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MachineExtensionInner object if successful.
     */
    public MachineExtensionInner get(String resourceGroupName, String name, String extensionName) {
        return getWithServiceResponseAsync(resourceGroupName, name, extensionName).toBlocking().single().body();
    }

    /**
     * The operation to get the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param extensionName The name of the machine extension.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<MachineExtensionInner> getAsync(String resourceGroupName, String name, String extensionName, final ServiceCallback<MachineExtensionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, name, extensionName), serviceCallback);
    }

    /**
     * The operation to get the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MachineExtensionInner object
     */
    public Observable<MachineExtensionInner> getAsync(String resourceGroupName, String name, String extensionName) {
        return getWithServiceResponseAsync(resourceGroupName, name, extensionName).map(new Func1<ServiceResponse<MachineExtensionInner>, MachineExtensionInner>() {
            @Override
            public MachineExtensionInner call(ServiceResponse<MachineExtensionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * The operation to get the extension.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param extensionName The name of the machine extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MachineExtensionInner object
     */
    public Observable<ServiceResponse<MachineExtensionInner>> getWithServiceResponseAsync(String resourceGroupName, String name, String extensionName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (extensionName == null) {
            throw new IllegalArgumentException("Parameter extensionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, name, extensionName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<MachineExtensionInner>>>() {
                @Override
                public Observable<ServiceResponse<MachineExtensionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<MachineExtensionInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<MachineExtensionInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<MachineExtensionInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<MachineExtensionInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MachineExtensionInner&gt; object if successful.
     */
    public PagedList<MachineExtensionInner> list(final String resourceGroupName, final String name) {
        ServiceResponse<Page<MachineExtensionInner>> response = listSinglePageAsync(resourceGroupName, name).toBlocking().single();
        return new PagedList<MachineExtensionInner>(response.body()) {
            @Override
            public Page<MachineExtensionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MachineExtensionInner>> listAsync(final String resourceGroupName, final String name, final ListOperationCallback<MachineExtensionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, name),
            new Func1<String, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MachineExtensionInner&gt; object
     */
    public Observable<Page<MachineExtensionInner>> listAsync(final String resourceGroupName, final String name) {
        return listWithServiceResponseAsync(resourceGroupName, name)
            .map(new Func1<ServiceResponse<Page<MachineExtensionInner>>, Page<MachineExtensionInner>>() {
                @Override
                public Page<MachineExtensionInner> call(ServiceResponse<Page<MachineExtensionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MachineExtensionInner&gt; object
     */
    public Observable<ServiceResponse<Page<MachineExtensionInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String name) {
        return listSinglePageAsync(resourceGroupName, name)
            .concatMap(new Func1<ServiceResponse<Page<MachineExtensionInner>>, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(ServiceResponse<Page<MachineExtensionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MachineExtensionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MachineExtensionInner>>> listSinglePageAsync(final String resourceGroupName, final String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String expand = null;
        return service.list(resourceGroupName, name, this.client.subscriptionId(), expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MachineExtensionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MachineExtensionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param expand The expand expression to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MachineExtensionInner&gt; object if successful.
     */
    public PagedList<MachineExtensionInner> list(final String resourceGroupName, final String name, final String expand) {
        ServiceResponse<Page<MachineExtensionInner>> response = listSinglePageAsync(resourceGroupName, name, expand).toBlocking().single();
        return new PagedList<MachineExtensionInner>(response.body()) {
            @Override
            public Page<MachineExtensionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param expand The expand expression to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MachineExtensionInner>> listAsync(final String resourceGroupName, final String name, final String expand, final ListOperationCallback<MachineExtensionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(resourceGroupName, name, expand),
            new Func1<String, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param expand The expand expression to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MachineExtensionInner&gt; object
     */
    public Observable<Page<MachineExtensionInner>> listAsync(final String resourceGroupName, final String name, final String expand) {
        return listWithServiceResponseAsync(resourceGroupName, name, expand)
            .map(new Func1<ServiceResponse<Page<MachineExtensionInner>>, Page<MachineExtensionInner>>() {
                @Override
                public Page<MachineExtensionInner> call(ServiceResponse<Page<MachineExtensionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the machine containing the extension.
     * @param expand The expand expression to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MachineExtensionInner&gt; object
     */
    public Observable<ServiceResponse<Page<MachineExtensionInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String name, final String expand) {
        return listSinglePageAsync(resourceGroupName, name, expand)
            .concatMap(new Func1<ServiceResponse<Page<MachineExtensionInner>>, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(ServiceResponse<Page<MachineExtensionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
    ServiceResponse<PageImpl<MachineExtensionInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<MachineExtensionInner>> * @param name The name of the machine containing the extension.
    ServiceResponse<PageImpl<MachineExtensionInner>> * @param expand The expand expression to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MachineExtensionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MachineExtensionInner>>> listSinglePageAsync(final String resourceGroupName, final String name, final String expand) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(resourceGroupName, name, this.client.subscriptionId(), expand, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MachineExtensionInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MachineExtensionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MachineExtensionInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MachineExtensionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MachineExtensionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;MachineExtensionInner&gt; object if successful.
     */
    public PagedList<MachineExtensionInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<MachineExtensionInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<MachineExtensionInner>(response.body()) {
            @Override
            public Page<MachineExtensionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<MachineExtensionInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<MachineExtensionInner>> serviceFuture, final ListOperationCallback<MachineExtensionInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MachineExtensionInner&gt; object
     */
    public Observable<Page<MachineExtensionInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<MachineExtensionInner>>, Page<MachineExtensionInner>>() {
                @Override
                public Page<MachineExtensionInner> call(ServiceResponse<Page<MachineExtensionInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;MachineExtensionInner&gt; object
     */
    public Observable<ServiceResponse<Page<MachineExtensionInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<MachineExtensionInner>>, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(ServiceResponse<Page<MachineExtensionInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * The operation to get all extensions of a non-Azure machine.
     *
    ServiceResponse<PageImpl<MachineExtensionInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;MachineExtensionInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<MachineExtensionInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<MachineExtensionInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<MachineExtensionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<MachineExtensionInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<MachineExtensionInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<MachineExtensionInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<MachineExtensionInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<MachineExtensionInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
