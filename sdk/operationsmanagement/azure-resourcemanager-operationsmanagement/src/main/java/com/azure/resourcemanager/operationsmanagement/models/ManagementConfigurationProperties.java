// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.operationsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * ManagementConfiguration properties supported by the OperationsManagement resource provider.
 */
@Fluent
public final class ManagementConfigurationProperties implements JsonSerializable<ManagementConfigurationProperties> {
    /*
     * The applicationId of the appliance for this Management.
     */
    private String applicationId;

    /*
     * The type of the parent resource.
     */
    private String parentResourceType;

    /*
     * Parameters to run the ARM template
     */
    private List<ArmTemplateParameter> parameters;

    /*
     * The provisioning state for the ManagementConfiguration.
     */
    private String provisioningState;

    /*
     * The Json object containing the ARM template to deploy
     */
    private Object template;

    /**
     * Creates an instance of ManagementConfigurationProperties class.
     */
    public ManagementConfigurationProperties() {
    }

    /**
     * Get the applicationId property: The applicationId of the appliance for this Management.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: The applicationId of the appliance for this Management.
     * 
     * @param applicationId the applicationId value to set.
     * @return the ManagementConfigurationProperties object itself.
     */
    public ManagementConfigurationProperties withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the parentResourceType property: The type of the parent resource.
     * 
     * @return the parentResourceType value.
     */
    public String parentResourceType() {
        return this.parentResourceType;
    }

    /**
     * Set the parentResourceType property: The type of the parent resource.
     * 
     * @param parentResourceType the parentResourceType value to set.
     * @return the ManagementConfigurationProperties object itself.
     */
    public ManagementConfigurationProperties withParentResourceType(String parentResourceType) {
        this.parentResourceType = parentResourceType;
        return this;
    }

    /**
     * Get the parameters property: Parameters to run the ARM template.
     * 
     * @return the parameters value.
     */
    public List<ArmTemplateParameter> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Parameters to run the ARM template.
     * 
     * @param parameters the parameters value to set.
     * @return the ManagementConfigurationProperties object itself.
     */
    public ManagementConfigurationProperties withParameters(List<ArmTemplateParameter> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state for the ManagementConfiguration.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the template property: The Json object containing the ARM template to deploy.
     * 
     * @return the template value.
     */
    public Object template() {
        return this.template;
    }

    /**
     * Set the template property: The Json object containing the ARM template to deploy.
     * 
     * @param template the template value to set.
     * @return the ManagementConfigurationProperties object itself.
     */
    public ManagementConfigurationProperties withTemplate(Object template) {
        this.template = template;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parentResourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property parentResourceType in model ManagementConfigurationProperties"));
        }
        if (parameters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property parameters in model ManagementConfigurationProperties"));
        } else {
            parameters().forEach(e -> e.validate());
        }
        if (template() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property template in model ManagementConfigurationProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagementConfigurationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("parentResourceType", this.parentResourceType);
        jsonWriter.writeArrayField("parameters", this.parameters, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeUntypedField("template", this.template);
        jsonWriter.writeStringField("applicationId", this.applicationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagementConfigurationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagementConfigurationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagementConfigurationProperties.
     */
    public static ManagementConfigurationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagementConfigurationProperties deserializedManagementConfigurationProperties
                = new ManagementConfigurationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("parentResourceType".equals(fieldName)) {
                    deserializedManagementConfigurationProperties.parentResourceType = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    List<ArmTemplateParameter> parameters
                        = reader.readArray(reader1 -> ArmTemplateParameter.fromJson(reader1));
                    deserializedManagementConfigurationProperties.parameters = parameters;
                } else if ("template".equals(fieldName)) {
                    deserializedManagementConfigurationProperties.template = reader.readUntyped();
                } else if ("applicationId".equals(fieldName)) {
                    deserializedManagementConfigurationProperties.applicationId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedManagementConfigurationProperties.provisioningState = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagementConfigurationProperties;
        });
    }
}
