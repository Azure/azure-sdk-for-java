// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.operationsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solution properties supported by the OperationsManagement resource provider.
 */
@Fluent
public final class SolutionProperties implements JsonSerializable<SolutionProperties> {
    /*
     * The azure resourceId for the workspace where the solution will be deployed/enabled.
     */
    private String workspaceResourceId;

    /*
     * The provisioning state for the solution.
     */
    private String provisioningState;

    /*
     * The azure resources that will be contained within the solutions. They will be locked and gets deleted
     * automatically when the solution is deleted.
     */
    private List<String> containedResources;

    /*
     * The resources that will be referenced from this solution. Deleting any of those solution out of band will break
     * the solution.
     */
    private List<String> referencedResources;

    /**
     * Creates an instance of SolutionProperties class.
     */
    public SolutionProperties() {
    }

    /**
     * Get the workspaceResourceId property: The azure resourceId for the workspace where the solution will be
     * deployed/enabled.
     * 
     * @return the workspaceResourceId value.
     */
    public String workspaceResourceId() {
        return this.workspaceResourceId;
    }

    /**
     * Set the workspaceResourceId property: The azure resourceId for the workspace where the solution will be
     * deployed/enabled.
     * 
     * @param workspaceResourceId the workspaceResourceId value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withWorkspaceResourceId(String workspaceResourceId) {
        this.workspaceResourceId = workspaceResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state for the solution.
     * 
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the containedResources property: The azure resources that will be contained within the solutions. They will
     * be locked and gets deleted automatically when the solution is deleted.
     * 
     * @return the containedResources value.
     */
    public List<String> containedResources() {
        return this.containedResources;
    }

    /**
     * Set the containedResources property: The azure resources that will be contained within the solutions. They will
     * be locked and gets deleted automatically when the solution is deleted.
     * 
     * @param containedResources the containedResources value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withContainedResources(List<String> containedResources) {
        this.containedResources = containedResources;
        return this;
    }

    /**
     * Get the referencedResources property: The resources that will be referenced from this solution. Deleting any of
     * those solution out of band will break the solution.
     * 
     * @return the referencedResources value.
     */
    public List<String> referencedResources() {
        return this.referencedResources;
    }

    /**
     * Set the referencedResources property: The resources that will be referenced from this solution. Deleting any of
     * those solution out of band will break the solution.
     * 
     * @param referencedResources the referencedResources value to set.
     * @return the SolutionProperties object itself.
     */
    public SolutionProperties withReferencedResources(List<String> referencedResources) {
        this.referencedResources = referencedResources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (workspaceResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property workspaceResourceId in model SolutionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SolutionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("workspaceResourceId", this.workspaceResourceId);
        jsonWriter.writeArrayField("containedResources", this.containedResources,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("referencedResources", this.referencedResources,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SolutionProperties.
     */
    public static SolutionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionProperties deserializedSolutionProperties = new SolutionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("workspaceResourceId".equals(fieldName)) {
                    deserializedSolutionProperties.workspaceResourceId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSolutionProperties.provisioningState = reader.getString();
                } else if ("containedResources".equals(fieldName)) {
                    List<String> containedResources = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionProperties.containedResources = containedResources;
                } else if ("referencedResources".equals(fieldName)) {
                    List<String> referencedResources = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionProperties.referencedResources = referencedResources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionProperties;
        });
    }
}
