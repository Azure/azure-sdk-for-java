/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.CodeMessageErrorException;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.SolutionPatch;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Solutions.
 */
public class SolutionsInner implements InnerSupportsGet<SolutionInner>, InnerSupportsDelete<Void>, InnerSupportsListing<SolutionInner> {
    /** The Retrofit service to perform REST calls. */
    private SolutionsService service;
    /** The service client containing this operation class. */
    private OperationsManagementClientImpl client;

    /**
     * Initializes an instance of SolutionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SolutionsInner(Retrofit retrofit, OperationsManagementClientImpl client) {
        this.service = retrofit.create(SolutionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Solutions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SolutionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Body SolutionInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Body SolutionInner parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions update" })
        @PATCH("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SolutionPatch parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SolutionPatch parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions/{solutionName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("solutionName") String solutionName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationsManagement/solutions")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solutions list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.OperationsManagement/solutions")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner createOrUpdate(String resourceGroupName, String solutionName, SolutionInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, solutionName, parameters).toBlocking().last().body();
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> createOrUpdateAsync(String resourceGroupName, String solutionName, SolutionInner parameters, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, solutionName, parameters), serviceCallback);
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SolutionInner> createOrUpdateAsync(String resourceGroupName, String solutionName, SolutionInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, solutionName, parameters).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SolutionInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String solutionName, SolutionInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SolutionInner>() { }.getType());
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner beginCreateOrUpdate(String resourceGroupName, String solutionName, SolutionInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, solutionName, parameters).toBlocking().single().body();
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> beginCreateOrUpdateAsync(String resourceGroupName, String solutionName, SolutionInner parameters, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, solutionName, parameters), serviceCallback);
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<SolutionInner> beginCreateOrUpdateAsync(String resourceGroupName, String solutionName, SolutionInner parameters) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, solutionName, parameters).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create/Update Solution.
     * Creates or updates the Solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param parameters The parameters required to create OMS Solution.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<ServiceResponse<SolutionInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String solutionName, SolutionInner parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SolutionInner>>>() {
                @Override
                public Observable<ServiceResponse<SolutionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SolutionInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SolutionInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CodeMessageErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SolutionInner, CodeMessageErrorException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<SolutionInner>() { }.getType())
                .registerError(CodeMessageErrorException.class)
                .build(response);
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner update(String resourceGroupName, String solutionName) {
        return updateWithServiceResponseAsync(resourceGroupName, solutionName).toBlocking().last().body();
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> updateAsync(String resourceGroupName, String solutionName, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, solutionName), serviceCallback);
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SolutionInner> updateAsync(String resourceGroupName, String solutionName) {
        return updateWithServiceResponseAsync(resourceGroupName, solutionName).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SolutionInner>> updateWithServiceResponseAsync(String resourceGroupName, String solutionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        SolutionPatch parameters = new SolutionPatch();
        parameters.withTags(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SolutionInner>() { }.getType());
    }
    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner update(String resourceGroupName, String solutionName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, solutionName, tags).toBlocking().last().body();
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> updateAsync(String resourceGroupName, String solutionName, Map<String, String> tags, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, solutionName, tags), serviceCallback);
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SolutionInner> updateAsync(String resourceGroupName, String solutionName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, solutionName, tags).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SolutionInner>> updateWithServiceResponseAsync(String resourceGroupName, String solutionName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        SolutionPatch parameters = new SolutionPatch();
        parameters.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SolutionInner>() { }.getType());
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner beginUpdate(String resourceGroupName, String solutionName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, solutionName).toBlocking().single().body();
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> beginUpdateAsync(String resourceGroupName, String solutionName, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, solutionName), serviceCallback);
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<SolutionInner> beginUpdateAsync(String resourceGroupName, String solutionName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, solutionName).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<ServiceResponse<SolutionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String solutionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        SolutionPatch parameters = new SolutionPatch();
        parameters.withTags(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SolutionInner>>>() {
                @Override
                public Observable<ServiceResponse<SolutionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SolutionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner beginUpdate(String resourceGroupName, String solutionName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, solutionName, tags).toBlocking().single().body();
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> beginUpdateAsync(String resourceGroupName, String solutionName, Map<String, String> tags, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, solutionName, tags), serviceCallback);
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<SolutionInner> beginUpdateAsync(String resourceGroupName, String solutionName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, solutionName, tags).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a Solution.
     * Patch a Solution. Only updating tags supported.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param tags Resource tags
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<ServiceResponse<SolutionInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String solutionName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        SolutionPatch parameters = new SolutionPatch();
        parameters.withTags(tags);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SolutionInner>>>() {
                @Override
                public Observable<ServiceResponse<SolutionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SolutionInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SolutionInner> beginUpdateDelegate(Response<ResponseBody> response) throws CodeMessageErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SolutionInner, CodeMessageErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SolutionInner>() { }.getType())
                .registerError(CodeMessageErrorException.class)
                .build(response);
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String solutionName) {
        deleteWithServiceResponseAsync(resourceGroupName, solutionName).toBlocking().last().body();
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String solutionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, solutionName), serviceCallback);
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String solutionName) {
        return deleteWithServiceResponseAsync(resourceGroupName, solutionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String solutionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String solutionName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, solutionName).toBlocking().single().body();
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String solutionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, solutionName), serviceCallback);
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String solutionName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, solutionName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the solution.
     * Deletes the solution in the subscription.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String solutionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CodeMessageErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CodeMessageErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CodeMessageErrorException.class)
                .build(response);
    }

    /**
     * Retrieve solution.
     * Retrieves the user solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CodeMessageErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SolutionInner object if successful.
     */
    public SolutionInner getByResourceGroup(String resourceGroupName, String solutionName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, solutionName).toBlocking().single().body();
    }

    /**
     * Retrieve solution.
     * Retrieves the user solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SolutionInner> getByResourceGroupAsync(String resourceGroupName, String solutionName, final ServiceCallback<SolutionInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, solutionName), serviceCallback);
    }

    /**
     * Retrieve solution.
     * Retrieves the user solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<SolutionInner> getByResourceGroupAsync(String resourceGroupName, String solutionName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, solutionName).map(new Func1<ServiceResponse<SolutionInner>, SolutionInner>() {
            @Override
            public SolutionInner call(ServiceResponse<SolutionInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve solution.
     * Retrieves the user solution.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param solutionName User Solution Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SolutionInner object
     */
    public Observable<ServiceResponse<SolutionInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String solutionName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (solutionName == null) {
            throw new IllegalArgumentException("Parameter solutionName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, solutionName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SolutionInner>>>() {
                @Override
                public Observable<ServiceResponse<SolutionInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SolutionInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SolutionInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CodeMessageErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SolutionInner, CodeMessageErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SolutionInner>() { }.getType())
                .registerError(CodeMessageErrorException.class)
                .build(response);
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @return the PagedList<SolutionInner> object if successful.
     */
    public PagedList<SolutionInner> listByResourceGroup(String resourceGroupName) {
        PageImpl<SolutionInner> page = new PageImpl<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<SolutionInner>(page) {
            @Override
            public Page<SolutionInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SolutionInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<SolutionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @return the observable to the List&lt;SolutionInner&gt; object
     */
    public Observable<Page<SolutionInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<SolutionInner>>, Page<SolutionInner>>() {
            @Override
            public Page<SolutionInner> call(ServiceResponse<List<SolutionInner>> response) {
                PageImpl<SolutionInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive.
     * @return the observable to the List&lt;SolutionInner&gt; object
     */
    public Observable<ServiceResponse<List<SolutionInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SolutionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<SolutionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SolutionInner>> result = listByResourceGroupDelegate(response);
                        List<SolutionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<SolutionInner>> clientResponse = new ServiceResponse<List<SolutionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SolutionInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CodeMessageErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SolutionInner>, CodeMessageErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SolutionInner>>() { }.getType())
                .registerError(CodeMessageErrorException.class)
                .build(response);
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @return the PagedList<SolutionInner> object if successful.
     */
    public PagedList<SolutionInner> list() {
        PageImpl<SolutionInner> page = new PageImpl<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<SolutionInner>(page) {
            @Override
            public Page<SolutionInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SolutionInner>> listAsync(final ServiceCallback<List<SolutionInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @return the observable to the List&lt;SolutionInner&gt; object
     */
    public Observable<Page<SolutionInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<SolutionInner>>, Page<SolutionInner>>() {
            @Override
            public Page<SolutionInner> call(ServiceResponse<List<SolutionInner>> response) {
                PageImpl<SolutionInner> page = new PageImpl<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Retrieves the solution list for the subscription.
     * Retrieves the solution list. It will retrieve both first party and third party solutions.
     *
     * @return the observable to the List&lt;SolutionInner&gt; object
     */
    public Observable<ServiceResponse<List<SolutionInner>>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SolutionInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<SolutionInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<SolutionInner>> result = listDelegate(response);
                        List<SolutionInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<SolutionInner>> clientResponse = new ServiceResponse<List<SolutionInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<SolutionInner>> listDelegate(Response<ResponseBody> response) throws CodeMessageErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SolutionInner>, CodeMessageErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SolutionInner>>() { }.getType())
                .registerError(CodeMessageErrorException.class)
                .build(response);
    }

}
