/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.Solution;
import rx.Observable;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.SolutionPlan;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.SolutionProperties;

class SolutionImpl extends GroupableResourceCoreImpl<Solution, SolutionInner, SolutionImpl, OperationsManagementManager> implements Solution, Solution.Definition, Solution.Update {
    SolutionImpl(String name, SolutionInner inner, OperationsManagementManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Solution> createResourceAsync() {
        SolutionsInner client = this.manager().inner().solutions();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Solution> updateResourceAsync() {
        SolutionsInner client = this.manager().inner().solutions();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<SolutionInner> getInnerAsync() {
        SolutionsInner client = this.manager().inner().solutions();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public SolutionPlan plan() {
        return this.inner().plan();
    }

    @Override
    public SolutionProperties properties() {
        return this.inner().properties();
    }

    @Override
    public SolutionImpl withPlan(SolutionPlan plan) {
        this.inner().withPlan(plan);
        return this;
    }

    @Override
    public SolutionImpl withProperties(SolutionProperties properties) {
        this.inner().withProperties(properties);
        return this;
    }

}
