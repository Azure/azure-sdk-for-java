/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.ManagementConfigurations;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.operationsmanagement.v2015_11_01_preview.ManagementConfiguration;

class ManagementConfigurationsImpl extends WrapperImpl<ManagementConfigurationsInner> implements ManagementConfigurations {
    private PagedListConverter<ManagementConfigurationInner, ManagementConfiguration> converter;
    private final OperationsManagementManager manager;

    ManagementConfigurationsImpl(OperationsManagementManager manager) {
        super(manager.inner().managementConfigurations());
        this.manager = manager;
        this.converter = new PagedListConverter<ManagementConfigurationInner, ManagementConfiguration>() {
            @Override
            public Observable<ManagementConfiguration> typeConvertAsync(ManagementConfigurationInner inner) {
                return Observable.just((ManagementConfiguration) wrapModel(inner));
            }
        };
    }

    public OperationsManagementManager manager() {
        return this.manager;
    }

    @Override
    public ManagementConfigurationImpl define(String name) {
        return wrapModel(name);
    }

    private ManagementConfigurationImpl wrapModel(ManagementConfigurationInner inner) {
        return  new ManagementConfigurationImpl(inner, manager());
    }

    private ManagementConfigurationImpl wrapModel(String name) {
        return new ManagementConfigurationImpl(name, this.manager());
    }

    @Override
    public PagedList<ManagementConfiguration> list() {
        ManagementConfigurationsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<ManagementConfiguration> listAsync() {
        ManagementConfigurationsInner client = this.inner();
        return client.listAsync()
        .flatMap(new Func1<Page<ManagementConfigurationInner>, Observable<ManagementConfigurationInner>>() {
            @Override
            public Observable<ManagementConfigurationInner> call(Page<ManagementConfigurationInner> innerPage) {
                return Observable.from(innerPage.items());
            }
        })
        .map(new Func1<ManagementConfigurationInner, ManagementConfiguration>() {
            @Override
            public ManagementConfiguration call(ManagementConfigurationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    private Observable<ManagementConfigurationInner> getInnerAsync(String resourceGroupName, String name) {
        ManagementConfigurationsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    public ManagementConfiguration getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupAsync(resourceGroupName, name).toBlocking().last();
    }

    @Override
    public Observable<ManagementConfiguration> getByResourceGroupAsync(String resourceGroupName, String name) {
        return this.getInnerAsync(resourceGroupName, name).map(new Func1<ManagementConfigurationInner, ManagementConfiguration> () {
            @Override
            public ManagementConfiguration call(ManagementConfigurationInner innerT) {
                return wrapModel(innerT);
            }
        });
    }

    @Override
    public ServiceFuture<ManagementConfiguration> getByResourceGroupAsync(String resourceGroupName, String name, ServiceCallback<ManagementConfiguration> callback) {
        return ServiceFuture.fromBody(getByResourceGroupAsync(resourceGroupName, name), callback);
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.deleteByResourceGroupAsync(resourceGroupName, name).await();
    }

    @Override
    public Completable deleteByResourceGroupAsync(String resourceGroupName, String name) {
        return this.inner().deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public ServiceFuture<Void> deleteByResourceGroupAsync(String resourceGroupName, String name, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteByResourceGroupAsync(resourceGroupName, name), serviceCallback);
    }

}
