// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.AlertRuleProperties;
import com.azure.resourcemanager.alertsmanagement.models.ActionGroup;
import com.azure.resourcemanager.alertsmanagement.models.ActionList;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleAllOfCondition;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleAnyOfOrLeafCondition;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleLeafCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertRuleProperties model = BinaryData.fromString(
            "{\"tenantScope\":\"dtutnwldu\",\"scopes\":[\"uzhyrmewipmvekdx\",\"kuqgsjjxundxgket\"],\"condition\":{\"allOf\":[{\"anyOf\":[{\"field\":\"jhfjmhvvmuvgpm\",\"equals\":\"eqsx\",\"containsAny\":[\"fbuzjyihs\",\"sbhud\",\"pohyuemslynsqyr\",\"foobrlttyms\"]},{\"field\":\"ygqdnfwqzdz\",\"equals\":\"ilaxhn\",\"containsAny\":[\"lyvijouwiv\",\"xoyzunbix\"]}],\"field\":\"ti\",\"equals\":\"cpwpg\",\"containsAny\":[\"civtsoxfrkenxp\"]},{\"anyOf\":[{\"field\":\"frpmpdnqqskaw\",\"equals\":\"qvmmbn\",\"containsAny\":[\"rtql\"]},{\"field\":\"megni\",\"equals\":\"vkxlz\",\"containsAny\":[\"rfe\"]},{\"field\":\"ealzxwhcansymoyq\",\"equals\":\"wigdi\",\"containsAny\":[\"bxgomfaj\",\"wasqvdaeyyg\"]},{\"field\":\"akjsqz\",\"equals\":\"bezkgimsidxasic\",\"containsAny\":[\"vvjskgfmocwahp\",\"gat\",\"eaahhvjhhn\"]}],\"field\":\"zybbj\",\"equals\":\"dj\",\"containsAny\":[\"xkyxvxevblbj\",\"dnlj\"]},{\"anyOf\":[{\"field\":\"uaulxunsm\",\"equals\":\"nkppxynen\",\"containsAny\":[\"xeizzg\"]},{\"field\":\"lnsrmffe\",\"equals\":\"xcktpiymerteeamm\",\"containsAny\":[\"ekkkzd\",\"rtkgdojbmxvavref\",\"eesvecu\",\"jpxtxsuwprtuj\"]}],\"field\":\"awddjibab\",\"equals\":\"ititvtzeexavoxt\",\"containsAny\":[\"ecdmdqbwpy\",\"q\",\"gsfjac\"]},{\"anyOf\":[{\"field\":\"hxudbxvodht\",\"equals\":\"irudh\",\"containsAny\":[\"es\"]},{\"field\":\"dlpagzrcxfail\",\"equals\":\"xwmdboxd\",\"containsAny\":[\"ft\",\"fqob\",\"jln\",\"cgcckknhxkizvyt\"]},{\"field\":\"zvulj\",\"equals\":\"aeranokqgukkjqnv\",\"containsAny\":[\"ylaxxulcdi\",\"dosfjbjsvgjrw\"]},{\"field\":\"yvycytdclxgcckn\",\"equals\":\"wmbtmvpdvjdhtt\",\"containsAny\":[\"fedxihchrphkm\",\"rjdqnsdfzp\",\"gtgkylkdghr\",\"euutlwxezwzh\"]}],\"field\":\"vbwnhhtq\",\"equals\":\"ehgpp\",\"containsAny\":[\"fhpfeoajvgcxtx\",\"csheafidltugsr\"]}]},\"actions\":{\"actionGroups\":[{\"actionGroupId\":\"kssjhoiftxfk\",\"webhookProperties\":{\"ptil\":\"gpr\",\"qtgdqohmcwsl\":\"ucb\",\"tpwb\":\"riz\"},\"actionProperties\":{\"kan\":\"llibphbqzmizak\",\"zhajoylhjlmuo\":\"jpdn\"}}]},\"enabled\":false,\"description\":\"imrsopteecjmei\"}")
            .toObject(AlertRuleProperties.class);
        Assertions.assertEquals("dtutnwldu", model.tenantScope());
        Assertions.assertEquals("uzhyrmewipmvekdx", model.scopes().get(0));
        Assertions.assertEquals("ti", model.condition().allOf().get(0).field());
        Assertions.assertEquals("cpwpg", model.condition().allOf().get(0).equals());
        Assertions.assertEquals("civtsoxfrkenxp", model.condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("jhfjmhvvmuvgpm", model.condition().allOf().get(0).anyOf().get(0).field());
        Assertions.assertEquals("eqsx", model.condition().allOf().get(0).anyOf().get(0).equals());
        Assertions.assertEquals("fbuzjyihs", model.condition().allOf().get(0).anyOf().get(0).containsAny().get(0));
        Assertions.assertEquals("kssjhoiftxfk", model.actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("gpr", model.actions().actionGroups().get(0).webhookProperties().get("ptil"));
        Assertions.assertEquals("llibphbqzmizak", model.actions().actionGroups().get(0).actionProperties().get("kan"));
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("imrsopteecjmei", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertRuleProperties model
            = new AlertRuleProperties().withTenantScope("dtutnwldu")
                .withScopes(Arrays.asList("uzhyrmewipmvekdx", "kuqgsjjxundxgket"))
                .withCondition(
                    new AlertRuleAllOfCondition()
                        .withAllOf(
                            Arrays
                                .asList(
                                    new AlertRuleAnyOfOrLeafCondition().withField("ti")
                                        .withEquals("cpwpg")
                                        .withContainsAny(Arrays.asList("civtsoxfrkenxp"))
                                        .withAnyOf(
                                            Arrays.asList(
                                                new AlertRuleLeafCondition().withField("jhfjmhvvmuvgpm")
                                                    .withEquals("eqsx")
                                                    .withContainsAny(Arrays.asList("fbuzjyihs", "sbhud",
                                                        "pohyuemslynsqyr", "foobrlttyms")),
                                                new AlertRuleLeafCondition().withField("ygqdnfwqzdz")
                                                    .withEquals("ilaxhn")
                                                    .withContainsAny(Arrays.asList("lyvijouwiv", "xoyzunbix")))),
                                    new AlertRuleAnyOfOrLeafCondition().withField("zybbj")
                                        .withEquals("dj")
                                        .withContainsAny(Arrays.asList("xkyxvxevblbj", "dnlj"))
                                        .withAnyOf(Arrays.asList(
                                            new AlertRuleLeafCondition().withField("frpmpdnqqskaw")
                                                .withEquals("qvmmbn")
                                                .withContainsAny(Arrays.asList("rtql")),
                                            new AlertRuleLeafCondition().withField("megni")
                                                .withEquals("vkxlz")
                                                .withContainsAny(Arrays.asList("rfe")),
                                            new AlertRuleLeafCondition().withField("ealzxwhcansymoyq")
                                                .withEquals("wigdi")
                                                .withContainsAny(Arrays.asList("bxgomfaj", "wasqvdaeyyg")),
                                            new AlertRuleLeafCondition().withField("akjsqz")
                                                .withEquals("bezkgimsidxasic")
                                                .withContainsAny(
                                                    Arrays.asList("vvjskgfmocwahp", "gat", "eaahhvjhhn")))),
                                    new AlertRuleAnyOfOrLeafCondition().withField("awddjibab")
                                        .withEquals("ititvtzeexavoxt")
                                        .withContainsAny(Arrays.asList("ecdmdqbwpy", "q", "gsfjac"))
                                        .withAnyOf(Arrays.asList(
                                            new AlertRuleLeafCondition().withField("uaulxunsm")
                                                .withEquals("nkppxynen")
                                                .withContainsAny(Arrays.asList("xeizzg")),
                                            new AlertRuleLeafCondition().withField("lnsrmffe")
                                                .withEquals("xcktpiymerteeamm")
                                                .withContainsAny(Arrays.asList("ekkkzd", "rtkgdojbmxvavref", "eesvecu",
                                                    "jpxtxsuwprtuj")))),
                                    new AlertRuleAnyOfOrLeafCondition().withField("vbwnhhtq")
                                        .withEquals("ehgpp")
                                        .withContainsAny(Arrays.asList("fhpfeoajvgcxtx", "csheafidltugsr"))
                                        .withAnyOf(Arrays.asList(
                                            new AlertRuleLeafCondition().withField("hxudbxvodht")
                                                .withEquals("irudh")
                                                .withContainsAny(Arrays.asList("es")),
                                            new AlertRuleLeafCondition().withField("dlpagzrcxfail")
                                                .withEquals("xwmdboxd")
                                                .withContainsAny(Arrays.asList("ft", "fqob", "jln", "cgcckknhxkizvyt")),
                                            new AlertRuleLeafCondition().withField("zvulj")
                                                .withEquals("aeranokqgukkjqnv")
                                                .withContainsAny(Arrays.asList("ylaxxulcdi", "dosfjbjsvgjrw")),
                                            new AlertRuleLeafCondition().withField("yvycytdclxgcckn")
                                                .withEquals("wmbtmvpdvjdhtt")
                                                .withContainsAny(Arrays.asList("fedxihchrphkm", "rjdqnsdfzp",
                                                    "gtgkylkdghr", "euutlwxezwzh")))))))
                .withActions(
                    new ActionList().withActionGroups(Arrays.asList(new ActionGroup().withActionGroupId("kssjhoiftxfk")
                        .withWebhookProperties(mapOf("ptil", "gpr", "qtgdqohmcwsl", "ucb", "tpwb", "riz"))
                        .withActionProperties(mapOf("kan", "llibphbqzmizak", "zhajoylhjlmuo", "jpdn")))))
                .withEnabled(false)
                .withDescription("imrsopteecjmei");
        model = BinaryData.fromObject(model).toObject(AlertRuleProperties.class);
        Assertions.assertEquals("dtutnwldu", model.tenantScope());
        Assertions.assertEquals("uzhyrmewipmvekdx", model.scopes().get(0));
        Assertions.assertEquals("ti", model.condition().allOf().get(0).field());
        Assertions.assertEquals("cpwpg", model.condition().allOf().get(0).equals());
        Assertions.assertEquals("civtsoxfrkenxp", model.condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("jhfjmhvvmuvgpm", model.condition().allOf().get(0).anyOf().get(0).field());
        Assertions.assertEquals("eqsx", model.condition().allOf().get(0).anyOf().get(0).equals());
        Assertions.assertEquals("fbuzjyihs", model.condition().allOf().get(0).anyOf().get(0).containsAny().get(0));
        Assertions.assertEquals("kssjhoiftxfk", model.actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("gpr", model.actions().actionGroups().get(0).webhookProperties().get("ptil"));
        Assertions.assertEquals("llibphbqzmizak", model.actions().actionGroups().get(0).actionProperties().get("kan"));
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("imrsopteecjmei", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
