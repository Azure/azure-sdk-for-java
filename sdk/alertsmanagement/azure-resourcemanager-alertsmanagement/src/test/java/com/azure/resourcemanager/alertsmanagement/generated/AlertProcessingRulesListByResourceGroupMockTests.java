// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRule;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertProcessingRulesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"scopes\":[\"h\",\"jjtbxqmuluxlxqz\",\"nersb\"],\"conditions\":[{\"field\":\"Description\",\"operator\":\"DoesNotContain\",\"values\":[\"ikzebr\",\"bsmswziqgf\"]},{\"field\":\"AlertRuleId\",\"operator\":\"NotEquals\",\"values\":[\"swhvhczznvfbycj\",\"xjww\",\"xzv\",\"mwmxqhndvnoamld\"]}],\"schedule\":{\"effectiveFrom\":\"aohdjh\",\"effectiveUntil\":\"lzok\",\"timeZone\":\"ox\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\",\"startTime\":\"jetagltsxoatft\",\"endTime\":\"pnpbswveflocc\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"mozi\",\"endTime\":\"ipgawtxx\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"y\",\"endTime\":\"xcjxgrytfmpcy\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"rmcaykgg\",\"enabled\":false},\"location\":\"ztrksxwpndf\",\"tags\":{\"jaosrxuzv\":\"nznthjtw\",\"xqdlyrtltlapr\":\"amktcqiosmgbzah\"},\"id\":\"tz\",\"name\":\"atbhjmznn\",\"type\":\"s\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AlertProcessingRule> response
            = manager.alertProcessingRules().listByResourceGroup("stmninwjizcilng", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ztrksxwpndf", response.iterator().next().location());
        Assertions.assertEquals("nznthjtw", response.iterator().next().tags().get("jaosrxuzv"));
        Assertions.assertEquals("h", response.iterator().next().properties().scopes().get(0));
        Assertions.assertEquals(Field.DESCRIPTION, response.iterator().next().properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.DOES_NOT_CONTAIN,
            response.iterator().next().properties().conditions().get(0).operator());
        Assertions.assertEquals("ikzebr", response.iterator().next().properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("aohdjh", response.iterator().next().properties().schedule().effectiveFrom());
        Assertions.assertEquals("lzok", response.iterator().next().properties().schedule().effectiveUntil());
        Assertions.assertEquals("ox", response.iterator().next().properties().schedule().timeZone());
        Assertions.assertEquals("jetagltsxoatft",
            response.iterator().next().properties().schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("pnpbswveflocc",
            response.iterator().next().properties().schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("rmcaykgg", response.iterator().next().properties().description());
        Assertions.assertEquals(false, response.iterator().next().properties().enabled());
    }
}
