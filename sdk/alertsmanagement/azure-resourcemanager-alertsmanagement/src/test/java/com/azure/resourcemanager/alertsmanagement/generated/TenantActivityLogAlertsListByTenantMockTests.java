// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.TenantActivityLogAlertResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TenantActivityLogAlertsListByTenantMockTests {
    @Test
    public void testListByTenant() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"tenantScope\":\"gqtagd\",\"scopes\":[\"ssoljom\"],\"condition\":{\"allOf\":[{\"anyOf\":[{},{}],\"field\":\"cnlbv\",\"equals\":\"codkkgj\",\"containsAny\":[\"t\",\"sik\"]},{\"anyOf\":[{},{},{}],\"field\":\"ufqbvntnr\",\"equals\":\"qsorh\",\"containsAny\":[\"xgnlykmx\",\"pwzvmdoksqdti\",\"lwxlboncqbazq\",\"cqchygtvxbyjane\"]},{\"anyOf\":[{},{},{}],\"field\":\"pkxyqvgxi\",\"equals\":\"detv\",\"containsAny\":[\"xdxuwsaifmc\",\"nosbz\",\"ehgcvkbcknjo\",\"gjyy\"]},{\"anyOf\":[{},{}],\"field\":\"lszerqzevx\",\"equals\":\"eintxwaljglzobl\",\"containsAny\":[\"afrqulhm\",\"yqbhd\",\"afjrqpjiyrqjcrg\",\"xwmzwdfkbnrz\"]}]},\"actions\":{\"actionGroups\":[{\"actionGroupId\":\"dltb\",\"webhookProperties\":{\"xxsaetgz\":\"qjf\",\"uwjoedxnguca\":\"gvpyigdaqqilzdc\",\"gilfjqqacdmkxw\":\"fpaurw\"},\"actionProperties\":{\"yziakeciqchxrtu\":\"vjw\",\"wrgyngy\":\"cdsiwdfmmpzhzzwv\",\"clamgglvlmfejdoq\":\"grpxncakiqaondjr\"}},{\"actionGroupId\":\"ykglt\",\"webhookProperties\":{\"lgflwfg\":\"hqfgqkayejsx\"},\"actionProperties\":{\"ijjcea\":\"u\",\"a\":\"lijjjrtvam\",\"cxetyvkunmignoh\":\"zknxkv\"}}]},\"enabled\":false,\"description\":\"qo\"},\"location\":\"jwpindedvabbxbh\",\"tags\":{\"zir\":\"eilbjywfcf\"},\"id\":\"zi\",\"name\":\"vwypusuvjsl\",\"type\":\"zwci\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<TenantActivityLogAlertResource> response
            = manager.tenantActivityLogAlerts().listByTenant(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jwpindedvabbxbh", response.iterator().next().location());
        Assertions.assertEquals("eilbjywfcf", response.iterator().next().tags().get("zir"));
        Assertions.assertEquals("gqtagd", response.iterator().next().tenantScope());
        Assertions.assertEquals("ssoljom", response.iterator().next().scopes().get(0));
        Assertions.assertEquals("cnlbv", response.iterator().next().condition().allOf().get(0).field());
        Assertions.assertEquals("codkkgj", response.iterator().next().condition().allOf().get(0).equals());
        Assertions.assertEquals("t", response.iterator().next().condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("dltb", response.iterator().next().actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("qjf",
            response.iterator().next().actions().actionGroups().get(0).webhookProperties().get("xxsaetgz"));
        Assertions.assertEquals("vjw",
            response.iterator().next().actions().actionGroups().get(0).actionProperties().get("yziakeciqchxrtu"));
        Assertions.assertEquals(false, response.iterator().next().enabled());
        Assertions.assertEquals("qo", response.iterator().next().description());
    }
}
