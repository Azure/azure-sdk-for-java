// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.AlertProcessingRuleInner;
import com.azure.resourcemanager.alertsmanagement.models.Action;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRuleProperties;
import com.azure.resourcemanager.alertsmanagement.models.Condition;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import com.azure.resourcemanager.alertsmanagement.models.Recurrence;
import com.azure.resourcemanager.alertsmanagement.models.Schedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertProcessingRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertProcessingRuleInner model = BinaryData.fromString(
            "{\"properties\":{\"scopes\":[\"dmgloug\",\"b\"],\"conditions\":[{\"field\":\"AlertRuleId\",\"operator\":\"NotEquals\",\"values\":[\"ktapspwgcuertu\",\"kdosvqw\",\"bmdg\",\"bjf\"]}],\"schedule\":{\"effectiveFrom\":\"mbmbexppbh\",\"effectiveUntil\":\"qrolfpf\",\"timeZone\":\"algbquxigjyjg\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\",\"startTime\":\"yfhrtxilnerkujy\",\"endTime\":\"l\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"uvfqawrlyxwj\",\"endTime\":\"prbnwbxgjvtbv\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"sszdnru\",\"endTime\":\"guhmuouqfpr\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"wbnguitnwui\",\"endTime\":\"a\"}]},\"actions\":[{\"actionType\":\"Action\"}],\"description\":\"fizuckyf\",\"enabled\":true},\"location\":\"idf\",\"tags\":{\"dkfthwxmnt\":\"dzuhtymwi\",\"aop\":\"i\",\"jcmmxdcufufsrp\":\"km\"},\"id\":\"mzidnsezcxtb\",\"name\":\"sgfyccsnew\",\"type\":\"dwzjeiach\"}")
            .toObject(AlertProcessingRuleInner.class);
        Assertions.assertEquals("idf", model.location());
        Assertions.assertEquals("dzuhtymwi", model.tags().get("dkfthwxmnt"));
        Assertions.assertEquals("dmgloug", model.properties().scopes().get(0));
        Assertions.assertEquals(Field.ALERT_RULE_ID, model.properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.NOT_EQUALS, model.properties().conditions().get(0).operator());
        Assertions.assertEquals("ktapspwgcuertu", model.properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("mbmbexppbh", model.properties().schedule().effectiveFrom());
        Assertions.assertEquals("qrolfpf", model.properties().schedule().effectiveUntil());
        Assertions.assertEquals("algbquxigjyjg", model.properties().schedule().timeZone());
        Assertions.assertEquals("yfhrtxilnerkujy", model.properties().schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("l", model.properties().schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("fizuckyf", model.properties().description());
        Assertions.assertEquals(true, model.properties().enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertProcessingRuleInner model = new AlertProcessingRuleInner().withLocation("idf")
            .withTags(mapOf("dkfthwxmnt", "dzuhtymwi", "aop", "i", "jcmmxdcufufsrp", "km"))
            .withProperties(new AlertProcessingRuleProperties().withScopes(Arrays.asList("dmgloug", "b"))
                .withConditions(Arrays.asList(new Condition().withField(Field.ALERT_RULE_ID)
                    .withOperator(Operator.NOT_EQUALS)
                    .withValues(Arrays.asList("ktapspwgcuertu", "kdosvqw", "bmdg", "bjf"))))
                .withSchedule(new Schedule().withEffectiveFrom("mbmbexppbh")
                    .withEffectiveUntil("qrolfpf")
                    .withTimeZone("algbquxigjyjg")
                    .withRecurrences(Arrays.asList(new Recurrence().withStartTime("yfhrtxilnerkujy").withEndTime("l"),
                        new Recurrence().withStartTime("uvfqawrlyxwj").withEndTime("prbnwbxgjvtbv"),
                        new Recurrence().withStartTime("sszdnru").withEndTime("guhmuouqfpr"),
                        new Recurrence().withStartTime("wbnguitnwui").withEndTime("a"))))
                .withActions(Arrays.asList(new Action()))
                .withDescription("fizuckyf")
                .withEnabled(true));
        model = BinaryData.fromObject(model).toObject(AlertProcessingRuleInner.class);
        Assertions.assertEquals("idf", model.location());
        Assertions.assertEquals("dzuhtymwi", model.tags().get("dkfthwxmnt"));
        Assertions.assertEquals("dmgloug", model.properties().scopes().get(0));
        Assertions.assertEquals(Field.ALERT_RULE_ID, model.properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.NOT_EQUALS, model.properties().conditions().get(0).operator());
        Assertions.assertEquals("ktapspwgcuertu", model.properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("mbmbexppbh", model.properties().schedule().effectiveFrom());
        Assertions.assertEquals("qrolfpf", model.properties().schedule().effectiveUntil());
        Assertions.assertEquals("algbquxigjyjg", model.properties().schedule().timeZone());
        Assertions.assertEquals("yfhrtxilnerkujy", model.properties().schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("l", model.properties().schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("fizuckyf", model.properties().description());
        Assertions.assertEquals(true, model.properties().enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
