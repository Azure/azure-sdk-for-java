// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.AlertProcessingRuleInner;
import com.azure.resourcemanager.alertsmanagement.models.Action;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRuleProperties;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRulesList;
import com.azure.resourcemanager.alertsmanagement.models.Condition;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import com.azure.resourcemanager.alertsmanagement.models.Recurrence;
import com.azure.resourcemanager.alertsmanagement.models.Schedule;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertProcessingRulesListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertProcessingRulesList model = BinaryData.fromString(
            "{\"nextLink\":\"mhquvgjxp\",\"value\":[{\"properties\":{\"scopes\":[\"ehmtzop\"],\"conditions\":[{\"field\":\"Severity\",\"operator\":\"DoesNotContain\",\"values\":[\"gsybbejhp\"]},{\"field\":\"AlertContext\",\"operator\":\"NotEquals\",\"values\":[\"ao\",\"hdxbmtqio\",\"jzehtb\",\"ufpo\"]},{\"field\":\"AlertContext\",\"operator\":\"NotEquals\",\"values\":[\"lrxybqsoq\",\"jgkdmbpazlobcu\"]},{\"field\":\"Description\",\"operator\":\"Contains\",\"values\":[\"t\",\"qqjnqgl\"]}],\"schedule\":{\"effectiveFrom\":\"nufo\",\"effectiveUntil\":\"jywif\",\"timeZone\":\"esaagdfm\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\"},{\"recurrenceType\":\"Recurrence\"},{\"recurrenceType\":\"Recurrence\"},{\"recurrenceType\":\"Recurrence\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"j\",\"enabled\":true},\"location\":\"kwm\",\"tags\":{\"psqucmpoyf\":\"tsizntocipaoua\",\"knygjofjddeq\":\"kfo\",\"upewnwreitjzy\":\"rd\",\"ofcqhsm\":\"lusarh\"},\"id\":\"urkdtmlx\",\"name\":\"ekuksjtx\",\"type\":\"kc\"},{\"properties\":{\"scopes\":[\"arcryuanzwuxzdxt\",\"yrlhmwhfpmrqobm\"],\"conditions\":[{\"field\":\"MonitorCondition\",\"operator\":\"NotEquals\",\"values\":[\"ihfxtijbpzvgnwzs\",\"mglzufcy\"]},{\"field\":\"TargetResourceGroup\",\"operator\":\"DoesNotContain\",\"values\":[\"hanufhfcbjysagi\",\"hxqh\"]},{\"field\":\"MonitorCondition\",\"operator\":\"DoesNotContain\",\"values\":[\"xwczbyscnp\",\"x\",\"hiv\",\"qniwbybrkxvdumj\"]}],\"schedule\":{\"effectiveFrom\":\"fwvuk\",\"effectiveUntil\":\"audccsnhs\",\"timeZone\":\"nyejhkryhtnap\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\"},{\"recurrenceType\":\"Recurrence\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"kjyemkk\",\"enabled\":true},\"location\":\"joxzjnchgejspodm\",\"tags\":{\"o\":\"zyde\",\"wixjsprozvcp\":\"wyahuxinpmqnja\",\"atscmd\":\"tegjvwmf\",\"zkrwfn\":\"pjhulsuuvmkj\"},\"id\":\"iodjp\",\"name\":\"lwejdpv\",\"type\":\"ryo\"},{\"properties\":{\"scopes\":[\"oacctaza\",\"ljlahbcryf\",\"dfdosygexp\"],\"conditions\":[{\"field\":\"AlertRuleId\",\"operator\":\"Contains\",\"values\":[\"zjhcrzevdphlx\",\"olthqtrgqjbp\",\"zfsinzgvf\"]},{\"field\":\"Severity\",\"operator\":\"NotEquals\",\"values\":[\"xjtfelluwfzit\",\"np\"]},{\"field\":\"TargetResourceType\",\"operator\":\"DoesNotContain\",\"values\":[\"lxofpdvhpfxxypin\",\"nmayhuybb\",\"podepoo\",\"inuvamiheogn\"]}],\"schedule\":{\"effectiveFrom\":\"zxtheotusivyevcc\",\"effectiveUntil\":\"ihnhun\",\"timeZone\":\"wjzrnfygxgisp\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"fkufublj\",\"enabled\":true},\"location\":\"eofjaeqjh\",\"tags\":{\"mjqulngsn\":\"asvm\"},\"id\":\"nbybkzgcwrwcl\",\"name\":\"xwrljdouskcqvkoc\",\"type\":\"cjdkwtnhxbnjbi\"},{\"properties\":{\"scopes\":[\"rglssainqpj\",\"nzl\",\"jfm\",\"pee\"],\"conditions\":[{\"field\":\"TargetResourceGroup\",\"operator\":\"DoesNotContain\",\"values\":[\"yqduujit\",\"jczdzevndh\",\"rwpdappdsbdkvwrw\"]},{\"field\":\"TargetResourceType\",\"operator\":\"Equals\",\"values\":[\"utjeltmrldhugj\",\"zdatqxhocdg\"]}],\"schedule\":{\"effectiveFrom\":\"lgphu\",\"effectiveUntil\":\"cndvkaozwyiftyhx\",\"timeZone\":\"rokft\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\"},{\"recurrenceType\":\"Recurrence\"},{\"recurrenceType\":\"Recurrence\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"iwpwcuk\",\"enabled\":true},\"location\":\"iawxklry\",\"tags\":{\"sgcbac\":\"ckbasyypndd\",\"zndlikwy\":\"hejkotynqgou\",\"bmadgak\":\"kgfg\"},\"id\":\"qsrxybzqqed\",\"name\":\"ytb\",\"type\":\"iqfouflmmnkz\"}]}")
            .toObject(AlertProcessingRulesList.class);
        Assertions.assertEquals("mhquvgjxp", model.nextLink());
        Assertions.assertEquals("kwm", model.value().get(0).location());
        Assertions.assertEquals("tsizntocipaoua", model.value().get(0).tags().get("psqucmpoyf"));
        Assertions.assertEquals("ehmtzop", model.value().get(0).properties().scopes().get(0));
        Assertions.assertEquals(Field.SEVERITY, model.value().get(0).properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.DOES_NOT_CONTAIN,
            model.value().get(0).properties().conditions().get(0).operator());
        Assertions.assertEquals("gsybbejhp", model.value().get(0).properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("nufo", model.value().get(0).properties().schedule().effectiveFrom());
        Assertions.assertEquals("jywif", model.value().get(0).properties().schedule().effectiveUntil());
        Assertions.assertEquals("esaagdfm", model.value().get(0).properties().schedule().timeZone());
        Assertions.assertEquals("j", model.value().get(0).properties().description());
        Assertions.assertEquals(true, model.value().get(0).properties().enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertProcessingRulesList model = new AlertProcessingRulesList().withNextLink("mhquvgjxp")
            .withValue(
                Arrays.asList(
                    new AlertProcessingRuleInner().withLocation("kwm")
                        .withTags(mapOf("psqucmpoyf", "tsizntocipaoua", "knygjofjddeq", "kfo", "upewnwreitjzy", "rd",
                            "ofcqhsm", "lusarh"))
                        .withProperties(new AlertProcessingRuleProperties().withScopes(Arrays.asList("ehmtzop"))
                            .withConditions(Arrays.asList(
                                new Condition().withField(Field.SEVERITY)
                                    .withOperator(Operator.DOES_NOT_CONTAIN)
                                    .withValues(Arrays.asList("gsybbejhp")),
                                new Condition().withField(Field.ALERT_CONTEXT)
                                    .withOperator(Operator.NOT_EQUALS)
                                    .withValues(Arrays.asList("ao", "hdxbmtqio", "jzehtb", "ufpo")),
                                new Condition().withField(Field.ALERT_CONTEXT)
                                    .withOperator(Operator.NOT_EQUALS)
                                    .withValues(Arrays.asList("lrxybqsoq", "jgkdmbpazlobcu")),
                                new Condition().withField(Field.DESCRIPTION)
                                    .withOperator(Operator.CONTAINS)
                                    .withValues(Arrays.asList("t", "qqjnqgl"))))
                            .withSchedule(new Schedule().withEffectiveFrom("nufo")
                                .withEffectiveUntil("jywif")
                                .withTimeZone("esaagdfm")
                                .withRecurrences(Arrays.asList(new Recurrence(), new Recurrence(), new Recurrence(),
                                    new Recurrence())))
                            .withActions(Arrays.asList(new Action(), new Action()))
                            .withDescription("j")
                            .withEnabled(true)),
                    new AlertProcessingRuleInner().withLocation("joxzjnchgejspodm")
                        .withTags(mapOf("o", "zyde", "wixjsprozvcp", "wyahuxinpmqnja", "atscmd", "tegjvwmf", "zkrwfn",
                            "pjhulsuuvmkj"))
                        .withProperties(
                            new AlertProcessingRuleProperties()
                                .withScopes(Arrays.asList("arcryuanzwuxzdxt", "yrlhmwhfpmrqobm"))
                                .withConditions(Arrays.asList(
                                    new Condition().withField(Field.MONITOR_CONDITION)
                                        .withOperator(Operator.NOT_EQUALS)
                                        .withValues(Arrays.asList("ihfxtijbpzvgnwzs", "mglzufcy")),
                                    new Condition().withField(Field.TARGET_RESOURCE_GROUP)
                                        .withOperator(Operator.DOES_NOT_CONTAIN)
                                        .withValues(Arrays.asList("hanufhfcbjysagi", "hxqh")),
                                    new Condition().withField(Field.MONITOR_CONDITION)
                                        .withOperator(Operator.DOES_NOT_CONTAIN)
                                        .withValues(Arrays.asList("xwczbyscnp", "x", "hiv", "qniwbybrkxvdumj"))))
                                .withSchedule(new Schedule().withEffectiveFrom("fwvuk")
                                    .withEffectiveUntil("audccsnhs")
                                    .withTimeZone("nyejhkryhtnap")
                                    .withRecurrences(Arrays.asList(new Recurrence(), new Recurrence())))
                                .withActions(Arrays.asList(new Action(), new Action(), new Action()))
                                .withDescription("kjyemkk")
                                .withEnabled(true)),
                    new AlertProcessingRuleInner().withLocation("eofjaeqjh")
                        .withTags(mapOf("mjqulngsn", "asvm"))
                        .withProperties(
                            new AlertProcessingRuleProperties()
                                .withScopes(Arrays.asList("oacctaza", "ljlahbcryf", "dfdosygexp"))
                                .withConditions(
                                    Arrays.asList(
                                        new Condition().withField(Field.ALERT_RULE_ID)
                                            .withOperator(Operator.CONTAINS)
                                            .withValues(Arrays.asList("zjhcrzevdphlx", "olthqtrgqjbp", "zfsinzgvf")),
                                        new Condition().withField(Field.SEVERITY)
                                            .withOperator(Operator.NOT_EQUALS)
                                            .withValues(Arrays.asList("xjtfelluwfzit", "np")),
                                        new Condition().withField(Field.TARGET_RESOURCE_TYPE)
                                            .withOperator(Operator.DOES_NOT_CONTAIN)
                                            .withValues(Arrays.asList("lxofpdvhpfxxypin", "nmayhuybb", "podepoo",
                                                "inuvamiheogn"))))
                                .withSchedule(
                                    new Schedule()
                                        .withEffectiveFrom("zxtheotusivyevcc")
                                        .withEffectiveUntil("ihnhun")
                                        .withTimeZone("wjzrnfygxgisp")
                                        .withRecurrences(Arrays.asList(new Recurrence())))
                                .withActions(Arrays.asList(new Action(), new Action(), new Action()))
                                .withDescription("fkufublj")
                                .withEnabled(true)),
                    new AlertProcessingRuleInner().withLocation("iawxklry")
                        .withTags(mapOf("sgcbac", "ckbasyypndd", "zndlikwy", "hejkotynqgou", "bmadgak", "kgfg"))
                        .withProperties(new AlertProcessingRuleProperties()
                            .withScopes(Arrays.asList("rglssainqpj", "nzl", "jfm", "pee"))
                            .withConditions(Arrays.asList(
                                new Condition().withField(Field.TARGET_RESOURCE_GROUP)
                                    .withOperator(Operator.DOES_NOT_CONTAIN)
                                    .withValues(Arrays.asList("yqduujit", "jczdzevndh", "rwpdappdsbdkvwrw")),
                                new Condition().withField(Field.TARGET_RESOURCE_TYPE)
                                    .withOperator(Operator.EQUALS)
                                    .withValues(Arrays.asList("utjeltmrldhugj", "zdatqxhocdg"))))
                            .withSchedule(new Schedule().withEffectiveFrom("lgphu")
                                .withEffectiveUntil("cndvkaozwyiftyhx")
                                .withTimeZone("rokft")
                                .withRecurrences(Arrays.asList(new Recurrence(), new Recurrence(), new Recurrence())))
                            .withActions(Arrays.asList(new Action(), new Action(), new Action(), new Action()))
                            .withDescription("iwpwcuk")
                            .withEnabled(true))));
        model = BinaryData.fromObject(model).toObject(AlertProcessingRulesList.class);
        Assertions.assertEquals("mhquvgjxp", model.nextLink());
        Assertions.assertEquals("kwm", model.value().get(0).location());
        Assertions.assertEquals("tsizntocipaoua", model.value().get(0).tags().get("psqucmpoyf"));
        Assertions.assertEquals("ehmtzop", model.value().get(0).properties().scopes().get(0));
        Assertions.assertEquals(Field.SEVERITY, model.value().get(0).properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.DOES_NOT_CONTAIN,
            model.value().get(0).properties().conditions().get(0).operator());
        Assertions.assertEquals("gsybbejhp", model.value().get(0).properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("nufo", model.value().get(0).properties().schedule().effectiveFrom());
        Assertions.assertEquals("jywif", model.value().get(0).properties().schedule().effectiveUntil());
        Assertions.assertEquals("esaagdfm", model.value().get(0).properties().schedule().timeZone());
        Assertions.assertEquals("j", model.value().get(0).properties().description());
        Assertions.assertEquals(true, model.value().get(0).properties().enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
