// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.TenantActivityLogAlertResource;
import com.azure.resourcemanager.alertsmanagement.models.TenantAlertRulePatchObject;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TenantActivityLogAlertsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantScope\":\"mxzkr\",\"scopes\":[\"iisb\",\"mnppccekuztd\",\"bezaxyfukzxuiz\",\"y\"],\"condition\":{\"allOf\":[{\"anyOf\":[{},{},{}],\"field\":\"peti\",\"equals\":\"xqiubxdukecpx\",\"containsAny\":[\"v\",\"hctmmkosz\",\"dblnsntrp\"]}]},\"actions\":{\"actionGroups\":[{\"actionGroupId\":\"kiofkbt\",\"webhookProperties\":{\"nldpvcbhhezyquwu\":\"kl\",\"vlm\":\"qxutrpbrruyuua\",\"lbnwtpcpahp\":\"jwcolbm\"},\"actionProperties\":{\"ngxno\":\"vxhmtfhocnxzcmj\",\"sn\":\"rxtd\",\"hepfwwtjfdoes\":\"evhdlmydid\",\"dbckyo\":\"xhmw\"}}]},\"enabled\":true,\"description\":\"xhn\"},\"location\":\"gknjzr\",\"tags\":{\"lvukaobrlb\":\"me\"},\"id\":\"gsnbagnchjh\",\"name\":\"emuowakyw\",\"type\":\"lhjym\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TenantActivityLogAlertResource response = manager.tenantActivityLogAlerts()
            .updateWithResponse("ollgry", "qiuasigrows",
                new TenantAlertRulePatchObject()
                    .withTags(mapOf("kqevadrmmw", "equygdjboqgrmtq", "iidisczskoswoqiq", "uawvcmjzk"))
                    .withEnabled(true),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gknjzr", response.location());
        Assertions.assertEquals("me", response.tags().get("lvukaobrlb"));
        Assertions.assertEquals("mxzkr", response.tenantScope());
        Assertions.assertEquals("iisb", response.scopes().get(0));
        Assertions.assertEquals("peti", response.condition().allOf().get(0).field());
        Assertions.assertEquals("xqiubxdukecpx", response.condition().allOf().get(0).equals());
        Assertions.assertEquals("v", response.condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("kiofkbt", response.actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("kl",
            response.actions().actionGroups().get(0).webhookProperties().get("nldpvcbhhezyquwu"));
        Assertions.assertEquals("vxhmtfhocnxzcmj",
            response.actions().actionGroups().get(0).actionProperties().get("ngxno"));
        Assertions.assertEquals(true, response.enabled());
        Assertions.assertEquals("xhn", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
