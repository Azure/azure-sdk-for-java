// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.models.Action;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRuleProperties;
import com.azure.resourcemanager.alertsmanagement.models.Condition;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import com.azure.resourcemanager.alertsmanagement.models.Recurrence;
import com.azure.resourcemanager.alertsmanagement.models.Schedule;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AlertProcessingRulePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertProcessingRuleProperties model = BinaryData.fromString(
            "{\"scopes\":[\"osfln\",\"osfqpteehzzv\"],\"conditions\":[{\"field\":\"Description\",\"operator\":\"Contains\",\"values\":[\"npvswjdkirso\",\"dqxhcrmnohjtckwh\",\"soifiyipjxsqw\",\"gr\"]},{\"field\":\"AlertRuleId\",\"operator\":\"Contains\",\"values\":[\"jxvsnbyxqabn\",\"ocpcy\",\"hurzafblj\"]}],\"schedule\":{\"effectiveFrom\":\"btoqcjmkljavbqid\",\"effectiveUntil\":\"ajzyul\",\"timeZone\":\"u\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\",\"startTime\":\"lkhbz\",\"endTime\":\"epgzgqexz\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"c\",\"endTime\":\"c\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"ierhhbcsglummaj\",\"endTime\":\"aodxo\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"dxkqpx\",\"enabled\":true}")
            .toObject(AlertProcessingRuleProperties.class);
        Assertions.assertEquals("osfln", model.scopes().get(0));
        Assertions.assertEquals(Field.DESCRIPTION, model.conditions().get(0).field());
        Assertions.assertEquals(Operator.CONTAINS, model.conditions().get(0).operator());
        Assertions.assertEquals("npvswjdkirso", model.conditions().get(0).values().get(0));
        Assertions.assertEquals("btoqcjmkljavbqid", model.schedule().effectiveFrom());
        Assertions.assertEquals("ajzyul", model.schedule().effectiveUntil());
        Assertions.assertEquals("u", model.schedule().timeZone());
        Assertions.assertEquals("lkhbz", model.schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("epgzgqexz", model.schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("dxkqpx", model.description());
        Assertions.assertEquals(true, model.enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertProcessingRuleProperties model
            = new AlertProcessingRuleProperties().withScopes(Arrays.asList("osfln", "osfqpteehzzv"))
                .withConditions(Arrays.asList(
                    new Condition().withField(Field.DESCRIPTION)
                        .withOperator(Operator.CONTAINS)
                        .withValues(Arrays.asList("npvswjdkirso", "dqxhcrmnohjtckwh", "soifiyipjxsqw", "gr")),
                    new Condition().withField(Field.ALERT_RULE_ID)
                        .withOperator(Operator.CONTAINS)
                        .withValues(Arrays.asList("jxvsnbyxqabn", "ocpcy", "hurzafblj"))))
                .withSchedule(new Schedule().withEffectiveFrom("btoqcjmkljavbqid")
                    .withEffectiveUntil("ajzyul")
                    .withTimeZone("u")
                    .withRecurrences(Arrays.asList(new Recurrence().withStartTime("lkhbz").withEndTime("epgzgqexz"),
                        new Recurrence().withStartTime("c").withEndTime("c"),
                        new Recurrence().withStartTime("ierhhbcsglummaj").withEndTime("aodxo"))))
                .withActions(Arrays.asList(new Action(), new Action()))
                .withDescription("dxkqpx")
                .withEnabled(true);
        model = BinaryData.fromObject(model).toObject(AlertProcessingRuleProperties.class);
        Assertions.assertEquals("osfln", model.scopes().get(0));
        Assertions.assertEquals(Field.DESCRIPTION, model.conditions().get(0).field());
        Assertions.assertEquals(Operator.CONTAINS, model.conditions().get(0).operator());
        Assertions.assertEquals("npvswjdkirso", model.conditions().get(0).values().get(0));
        Assertions.assertEquals("btoqcjmkljavbqid", model.schedule().effectiveFrom());
        Assertions.assertEquals("ajzyul", model.schedule().effectiveUntil());
        Assertions.assertEquals("u", model.schedule().timeZone());
        Assertions.assertEquals("lkhbz", model.schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("epgzgqexz", model.schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("dxkqpx", model.description());
        Assertions.assertEquals(true, model.enabled());
    }
}
