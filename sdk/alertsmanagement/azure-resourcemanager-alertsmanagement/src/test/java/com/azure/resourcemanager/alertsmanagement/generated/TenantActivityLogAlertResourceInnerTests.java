// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.TenantActivityLogAlertResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.ActionGroup;
import com.azure.resourcemanager.alertsmanagement.models.ActionList;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleAllOfCondition;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleAnyOfOrLeafCondition;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleLeafCondition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TenantActivityLogAlertResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TenantActivityLogAlertResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"tenantScope\":\"jqctojcmisofie\",\"scopes\":[\"foj\",\"qdhcu\",\"lcplc\"],\"condition\":{\"allOf\":[{\"anyOf\":[{}],\"field\":\"ihlhzdsqtzb\",\"equals\":\"gnowcjhfgmveca\",\"containsAny\":[\"mwotey\",\"wcluqovekqvgq\",\"uwifzmpjwyiv\",\"ikf\"]},{\"anyOf\":[{},{},{}],\"field\":\"rfsphuagrt\",\"equals\":\"kteusqczk\",\"containsAny\":[\"lxubyj\",\"ff\"]},{\"anyOf\":[{},{}],\"field\":\"lcqcuubgqibrt\",\"equals\":\"metttwgd\",\"containsAny\":[\"xih\",\"rmooizqse\",\"pxiutc\"]}]},\"actions\":{\"actionGroups\":[{\"actionGroupId\":\"zhyrpeto\",\"webhookProperties\":{\"rqnkkzjcjbtr\":\"joxslhvnhla\",\"eitpkxztmo\":\"aehvvibrxjjstoq\"},\"actionProperties\":{\"qxzhem\":\"lftidgfcwqmpim\"}},{\"actionGroupId\":\"yhohujswtwkozzwc\",\"webhookProperties\":{\"j\":\"bawpfajnjwltlwt\"},\"actionProperties\":{\"oaimlnw\":\"talhsnvkcdmxzr\",\"cse\":\"aaomylweazu\",\"jhlfzswpchwahf\":\"hwwn\",\"wlyxgncxyk\":\"ousnfepgfewe\"}}]},\"enabled\":false,\"description\":\"h\"},\"location\":\"immbcx\",\"tags\":{\"qizxfpxtgqscjavf\":\"cporxvxcjz\",\"r\":\"juhdqazkmtgguwpi\",\"f\":\"jcivmmg\",\"uvyinzqodfvpgs\":\"fiwrxgkn\"},\"id\":\"oxgsgbpfgzdjtx\",\"name\":\"zflbqvg\",\"type\":\"qvlgafcqusrdvetn\"}")
            .toObject(TenantActivityLogAlertResourceInner.class);
        Assertions.assertEquals("immbcx", model.location());
        Assertions.assertEquals("cporxvxcjz", model.tags().get("qizxfpxtgqscjavf"));
        Assertions.assertEquals("jqctojcmisofie", model.tenantScope());
        Assertions.assertEquals("foj", model.scopes().get(0));
        Assertions.assertEquals("ihlhzdsqtzb", model.condition().allOf().get(0).field());
        Assertions.assertEquals("gnowcjhfgmveca", model.condition().allOf().get(0).equals());
        Assertions.assertEquals("mwotey", model.condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("zhyrpeto", model.actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("joxslhvnhla",
            model.actions().actionGroups().get(0).webhookProperties().get("rqnkkzjcjbtr"));
        Assertions.assertEquals("lftidgfcwqmpim",
            model.actions().actionGroups().get(0).actionProperties().get("qxzhem"));
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("h", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TenantActivityLogAlertResourceInner model = new TenantActivityLogAlertResourceInner().withLocation("immbcx")
            .withTags(mapOf("qizxfpxtgqscjavf", "cporxvxcjz", "r", "juhdqazkmtgguwpi", "f", "jcivmmg", "uvyinzqodfvpgs",
                "fiwrxgkn"))
            .withTenantScope("jqctojcmisofie")
            .withScopes(Arrays.asList("foj", "qdhcu", "lcplc"))
            .withCondition(new AlertRuleAllOfCondition().withAllOf(Arrays.asList(
                new AlertRuleAnyOfOrLeafCondition().withField("ihlhzdsqtzb")
                    .withEquals("gnowcjhfgmveca")
                    .withContainsAny(Arrays.asList("mwotey", "wcluqovekqvgq", "uwifzmpjwyiv", "ikf"))
                    .withAnyOf(Arrays.asList(new AlertRuleLeafCondition())),
                new AlertRuleAnyOfOrLeafCondition().withField("rfsphuagrt")
                    .withEquals("kteusqczk")
                    .withContainsAny(Arrays.asList("lxubyj", "ff"))
                    .withAnyOf(Arrays.asList(new AlertRuleLeafCondition(), new AlertRuleLeafCondition(),
                        new AlertRuleLeafCondition())),
                new AlertRuleAnyOfOrLeafCondition().withField("lcqcuubgqibrt")
                    .withEquals("metttwgd")
                    .withContainsAny(Arrays.asList("xih", "rmooizqse", "pxiutc"))
                    .withAnyOf(Arrays.asList(new AlertRuleLeafCondition(), new AlertRuleLeafCondition())))))
            .withActions(
                new ActionList()
                    .withActionGroups(Arrays.asList(
                        new ActionGroup().withActionGroupId("zhyrpeto")
                            .withWebhookProperties(
                                mapOf("rqnkkzjcjbtr", "joxslhvnhla", "eitpkxztmo", "aehvvibrxjjstoq"))
                            .withActionProperties(mapOf("qxzhem", "lftidgfcwqmpim")),
                        new ActionGroup().withActionGroupId("yhohujswtwkozzwc")
                            .withWebhookProperties(mapOf("j", "bawpfajnjwltlwt"))
                            .withActionProperties(mapOf("oaimlnw", "talhsnvkcdmxzr", "cse", "aaomylweazu",
                                "jhlfzswpchwahf", "hwwn", "wlyxgncxyk", "ousnfepgfewe")))))
            .withEnabled(false)
            .withDescription("h");
        model = BinaryData.fromObject(model).toObject(TenantActivityLogAlertResourceInner.class);
        Assertions.assertEquals("immbcx", model.location());
        Assertions.assertEquals("cporxvxcjz", model.tags().get("qizxfpxtgqscjavf"));
        Assertions.assertEquals("jqctojcmisofie", model.tenantScope());
        Assertions.assertEquals("foj", model.scopes().get(0));
        Assertions.assertEquals("ihlhzdsqtzb", model.condition().allOf().get(0).field());
        Assertions.assertEquals("gnowcjhfgmveca", model.condition().allOf().get(0).equals());
        Assertions.assertEquals("mwotey", model.condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("zhyrpeto", model.actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("joxslhvnhla",
            model.actions().actionGroups().get(0).webhookProperties().get("rqnkkzjcjbtr"));
        Assertions.assertEquals("lftidgfcwqmpim",
            model.actions().actionGroups().get(0).actionProperties().get("qxzhem"));
        Assertions.assertEquals(false, model.enabled());
        Assertions.assertEquals("h", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
