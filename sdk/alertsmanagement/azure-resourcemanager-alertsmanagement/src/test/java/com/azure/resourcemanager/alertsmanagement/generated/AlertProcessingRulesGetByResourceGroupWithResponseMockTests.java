// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRule;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertProcessingRulesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"scopes\":[\"febwlnbmhyreeudz\",\"av\"],\"conditions\":[{\"field\":\"AlertContext\",\"operator\":\"Contains\",\"values\":[\"yzglgo\",\"wtlmjjyuo\",\"qtobaxkjeyt\",\"nlb\"]},{\"field\":\"SignalType\",\"operator\":\"NotEquals\",\"values\":[\"nkqbhsyrq\"]}],\"schedule\":{\"effectiveFrom\":\"qhd\",\"effectiveUntil\":\"xaulkpakdkifmjnn\",\"timeZone\":\"tqabpxuckpgg\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\",\"startTime\":\"yirdhlisngwflqq\",\"endTime\":\"izruwnpqxpxiwfc\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"saasiixtmkzj\",\"enabled\":true},\"location\":\"irhgfgrwsdp\",\"tags\":{\"vzbglbyvi\":\"t\"},\"id\":\"tctbrxkjzwrgxffm\",\"name\":\"hkwfbkgozxwop\",\"type\":\"bydpizqaclnapxb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AlertProcessingRule response = manager.alertProcessingRules()
            .getByResourceGroupWithResponse("qeqala", "vlagun", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("irhgfgrwsdp", response.location());
        Assertions.assertEquals("t", response.tags().get("vzbglbyvi"));
        Assertions.assertEquals("febwlnbmhyreeudz", response.properties().scopes().get(0));
        Assertions.assertEquals(Field.ALERT_CONTEXT, response.properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.CONTAINS, response.properties().conditions().get(0).operator());
        Assertions.assertEquals("yzglgo", response.properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("qhd", response.properties().schedule().effectiveFrom());
        Assertions.assertEquals("xaulkpakdkifmjnn", response.properties().schedule().effectiveUntil());
        Assertions.assertEquals("tqabpxuckpgg", response.properties().schedule().timeZone());
        Assertions.assertEquals("yirdhlisngwflqq", response.properties().schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("izruwnpqxpxiwfc", response.properties().schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("saasiixtmkzj", response.properties().description());
        Assertions.assertEquals(true, response.properties().enabled());
    }
}
