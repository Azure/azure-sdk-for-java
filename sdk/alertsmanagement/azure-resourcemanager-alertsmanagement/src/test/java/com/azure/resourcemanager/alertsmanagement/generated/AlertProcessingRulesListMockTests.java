// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRule;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertProcessingRulesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"scopes\":[\"kxkbsazgakgacyr\",\"m\",\"dmspof\"],\"conditions\":[{\"field\":\"AlertRuleName\",\"operator\":\"NotEquals\",\"values\":[\"iofrzgbzjedmstk\"]},{\"field\":\"AlertContext\",\"operator\":\"Contains\",\"values\":[\"uiiznktwfansnvpd\"]}],\"schedule\":{\"effectiveFrom\":\"ikostbzbkiwbuqny\",\"effectiveUntil\":\"hzfylsgcrpfbc\",\"timeZone\":\"ezzcez\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\",\"startTime\":\"yfwlwxjwet\",\"endTime\":\"sihclafzvaylp\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"sqqw\",\"endTime\":\"cmwqkchcxwa\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"ewzjkjexfd\",\"endTime\":\"vhpsylkkshkbffmb\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"jrgywwpgjxsn\",\"enabled\":false},\"location\":\"jgicgaao\",\"tags\":{\"swvr\":\"taqutdewem\",\"kimrt\":\"unzzjgehk\",\"jqepqwhi\":\"xokffqyin\"},\"id\":\"monstshiyxgve\",\"name\":\"fclduccbirdsv\",\"type\":\"wcobie\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AlertProcessingRule> response
            = manager.alertProcessingRules().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jgicgaao", response.iterator().next().location());
        Assertions.assertEquals("taqutdewem", response.iterator().next().tags().get("swvr"));
        Assertions.assertEquals("kxkbsazgakgacyr", response.iterator().next().properties().scopes().get(0));
        Assertions.assertEquals(Field.ALERT_RULE_NAME,
            response.iterator().next().properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.NOT_EQUALS,
            response.iterator().next().properties().conditions().get(0).operator());
        Assertions.assertEquals("iofrzgbzjedmstk",
            response.iterator().next().properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("ikostbzbkiwbuqny", response.iterator().next().properties().schedule().effectiveFrom());
        Assertions.assertEquals("hzfylsgcrpfbc", response.iterator().next().properties().schedule().effectiveUntil());
        Assertions.assertEquals("ezzcez", response.iterator().next().properties().schedule().timeZone());
        Assertions.assertEquals("yfwlwxjwet",
            response.iterator().next().properties().schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("sihclafzvaylp",
            response.iterator().next().properties().schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("jrgywwpgjxsn", response.iterator().next().properties().description());
        Assertions.assertEquals(false, response.iterator().next().properties().enabled());
    }
}
