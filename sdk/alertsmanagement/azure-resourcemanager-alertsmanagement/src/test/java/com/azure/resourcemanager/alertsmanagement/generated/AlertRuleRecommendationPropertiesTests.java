// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.AlertRuleRecommendationProperties;
import com.azure.resourcemanager.alertsmanagement.models.RuleArmTemplate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertRuleRecommendationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertRuleRecommendationProperties model = BinaryData.fromString(
            "{\"alertRuleType\":\"bunzozudh\",\"displayInformation\":{\"bzydvfvfcj\":\"gkmoyxcdyuibhmfd\"},\"ruleArmTemplate\":{\"$schema\":\"aeoisrvh\",\"contentVersion\":\"gorf\",\"variables\":\"dataukiscvwmzhw\",\"parameters\":\"datalefaxvxilcbtgn\",\"resources\":[\"datazeyqxtjjfzqlqhyc\",\"datavodggxdbee\",\"datamieknlraria\"]}}")
            .toObject(AlertRuleRecommendationProperties.class);
        Assertions.assertEquals("bunzozudh", model.alertRuleType());
        Assertions.assertEquals("gkmoyxcdyuibhmfd", model.displayInformation().get("bzydvfvfcj"));
        Assertions.assertEquals("aeoisrvh", model.ruleArmTemplate().schema());
        Assertions.assertEquals("gorf", model.ruleArmTemplate().contentVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertRuleRecommendationProperties model = new AlertRuleRecommendationProperties().withAlertRuleType("bunzozudh")
            .withDisplayInformation(mapOf("bzydvfvfcj", "gkmoyxcdyuibhmfd"))
            .withRuleArmTemplate(new RuleArmTemplate().withSchema("aeoisrvh")
                .withContentVersion("gorf")
                .withVariables("dataukiscvwmzhw")
                .withParameters("datalefaxvxilcbtgn")
                .withResources(Arrays.asList("datazeyqxtjjfzqlqhyc", "datavodggxdbee", "datamieknlraria")));
        model = BinaryData.fromObject(model).toObject(AlertRuleRecommendationProperties.class);
        Assertions.assertEquals("bunzozudh", model.alertRuleType());
        Assertions.assertEquals("gkmoyxcdyuibhmfd", model.displayInformation().get("bzydvfvfcj"));
        Assertions.assertEquals("aeoisrvh", model.ruleArmTemplate().schema());
        Assertions.assertEquals("gorf", model.ruleArmTemplate().contentVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
