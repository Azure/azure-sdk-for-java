// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.Action;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRule;
import com.azure.resourcemanager.alertsmanagement.models.AlertProcessingRuleProperties;
import com.azure.resourcemanager.alertsmanagement.models.Condition;
import com.azure.resourcemanager.alertsmanagement.models.Field;
import com.azure.resourcemanager.alertsmanagement.models.Operator;
import com.azure.resourcemanager.alertsmanagement.models.Recurrence;
import com.azure.resourcemanager.alertsmanagement.models.Schedule;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AlertProcessingRulesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"scopes\":[\"kjsvthnwpzteko\"],\"conditions\":[{\"field\":\"MonitorService\",\"operator\":\"NotEquals\",\"values\":[\"gplucfotangcfhny\",\"zcugswvxwlmzqw\",\"vtxnjmxmcuqud\"]}],\"schedule\":{\"effectiveFrom\":\"clxyn\",\"effectiveUntil\":\"k\",\"timeZone\":\"fabuiyjibu\",\"recurrences\":[{\"recurrenceType\":\"Recurrence\",\"startTime\":\"ugneikn\",\"endTime\":\"oxgjiuqhibt\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"ipq\",\"endTime\":\"edmurrxxge\"},{\"recurrenceType\":\"Recurrence\",\"startTime\":\"ktvqylkmqpzoy\",\"endTime\":\"fbcgwgcloxoebqin\"}]},\"actions\":[{\"actionType\":\"Action\"},{\"actionType\":\"Action\"}],\"description\":\"nwjfu\",\"enabled\":false},\"location\":\"fcbahhp\",\"tags\":{\"kkholvdndvia\":\"foiyjwpfilk\",\"yefchnm\":\"ogphuartvtiu\"},\"id\":\"ahmnxhkxjqirw\",\"name\":\"weooxffifhxwrs\",\"type\":\"ewmozqvbu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AlertProcessingRule response = manager.alertProcessingRules()
            .define("uyilflqoiquvrehm")
            .withRegion("orqzdfuy")
            .withExistingResourceGroup("mfcttux")
            .withTags(mapOf("xqpswok", "kfvxcnq", "kzsz", "vkhlggdhbemz", "fpgpicrmnzhrgm", "wiwtglxxhl",
                "qcbfrmbodths", "gjsxv"))
            .withProperties(new AlertProcessingRuleProperties().withScopes(Arrays.asList("hvsujztc", "ytqj", "w"))
                .withConditions(Arrays.asList(
                    new Condition().withField(Field.ALERT_RULE_ID)
                        .withOperator(Operator.CONTAINS)
                        .withValues(Arrays.asList("jletlxsmrpddo")),
                    new Condition().withField(Field.TARGET_RESOURCE_GROUP)
                        .withOperator(Operator.DOES_NOT_CONTAIN)
                        .withValues(Arrays.asList("aziynknlqwzdv", "iwhxqszdtmaajq")),
                    new Condition().withField(Field.MONITOR_CONDITION)
                        .withOperator(Operator.EQUALS)
                        .withValues(Arrays.asList("jvmtygjbmz", "ospspshckf", "yjpmspbpssdfppyo", "tieyujtvczkcny")),
                    new Condition().withField(Field.ALERT_CONTEXT)
                        .withOperator(Operator.NOT_EQUALS)
                        .withValues(Arrays.asList("d", "vg", "nkvxlxpaglqi", "bgkc"))))
                .withSchedule(new Schedule().withEffectiveFrom("pzvuqdflvo")
                    .withEffectiveUntil("yp")
                    .withTimeZone("ubcpzgpxti")
                    .withRecurrences(Arrays.asList(new Recurrence().withStartTime("nidibgqjxg").withEndTime("r"))))
                .withActions(Arrays.asList(new Action(), new Action(), new Action(), new Action()))
                .withDescription("vfgpikqmhhaowjrm")
                .withEnabled(true))
            .create();

        Assertions.assertEquals("fcbahhp", response.location());
        Assertions.assertEquals("foiyjwpfilk", response.tags().get("kkholvdndvia"));
        Assertions.assertEquals("kjsvthnwpzteko", response.properties().scopes().get(0));
        Assertions.assertEquals(Field.MONITOR_SERVICE, response.properties().conditions().get(0).field());
        Assertions.assertEquals(Operator.NOT_EQUALS, response.properties().conditions().get(0).operator());
        Assertions.assertEquals("gplucfotangcfhny", response.properties().conditions().get(0).values().get(0));
        Assertions.assertEquals("clxyn", response.properties().schedule().effectiveFrom());
        Assertions.assertEquals("k", response.properties().schedule().effectiveUntil());
        Assertions.assertEquals("fabuiyjibu", response.properties().schedule().timeZone());
        Assertions.assertEquals("ugneikn", response.properties().schedule().recurrences().get(0).startTime());
        Assertions.assertEquals("oxgjiuqhibt", response.properties().schedule().recurrences().get(0).endTime());
        Assertions.assertEquals("nwjfu", response.properties().description());
        Assertions.assertEquals(false, response.properties().enabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
