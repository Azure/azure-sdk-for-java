// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRule;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroupAction;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroupResource;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleResolveConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrometheusRuleGroupsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"ypxrx\",\"enabled\":false,\"clusterName\":\"hwuhvctaf\",\"scopes\":[\"bxrblmliowxihspn\",\"wqagnepzwa\",\"lsbs\",\"qqqagwwrxaomzi\"],\"interval\":\"lrrcz\",\"rules\":[{\"record\":\"hhltnjadhqo\",\"alert\":\"jqoyueayfbpcm\",\"enabled\":false,\"expression\":\"byrrueqth\",\"severity\":1348542937,\"for\":\"mbscbbx\",\"labels\":{\"dpyqyybxubmd\":\"hxiidlopedb\",\"e\":\"afcbqw\",\"hdbvqvwzkjop\":\"jelaqacigele\",\"bxcea\":\"beonrlkwzdq\"},\"annotations\":{\"chkrttzr\":\"ptsoqfyiase\",\"zohmnrxxbs\":\"zisgykiuemvanb\",\"dptysprqs\":\"jklinh\"},\"actions\":[{},{},{}],\"resolveConfiguration\":{\"autoResolved\":false,\"timeToResolve\":\"slsvjgpliu\"}},{\"record\":\"qwoyxqvapco\",\"alert\":\"oucqpqojx\",\"enabled\":false,\"expression\":\"rzdcgdzbenribcaw\",\"severity\":1265070523,\"for\":\"ddtjwfljhznam\",\"labels\":{\"qtjzmizvgbg\":\"tmzwcjjn\",\"ngrebwg\":\"tzuuvb\"},\"annotations\":{\"oqza\":\"ttzlswvajqfutlx\",\"zfrgqhaohcm\":\"unwqr\",\"xameblydyvkfkm\":\"uocnjrohmbpyr\",\"pyapucygvoav\":\"ocxnehvsmtodl\"},\"actions\":[{},{}],\"resolveConfiguration\":{\"autoResolved\":true,\"timeToResolve\":\"ghiee\"}},{\"record\":\"lgvvpaseksgbu\",\"alert\":\"ntuygdhgaqipir\",\"enabled\":false,\"expression\":\"rqofulopmjnlexwh\",\"severity\":844046114,\"for\":\"ibkeph\",\"labels\":{\"qpbrlc\":\"erctatoyin\",\"uc\":\"rduczkgofxyfs\"},\"annotations\":{\"vvf\":\"rpcjttbstvjeaqnr\"},\"actions\":[{},{}],\"resolveConfiguration\":{\"autoResolved\":true,\"timeToResolve\":\"ktuidvrm\"}},{\"record\":\"lpdwwexymzvlazi\",\"alert\":\"hpwvqsgnyyuu\",\"enabled\":false,\"expression\":\"ens\",\"severity\":830941651,\"for\":\"yyvpkpatlb\",\"labels\":{\"srfhf\":\"zgs\",\"bnxwc\":\"olmk\"},\"annotations\":{\"fqawzfgbrttui\":\"mp\",\"n\":\"clkiexhajl\"},\"actions\":[{},{},{}],\"resolveConfiguration\":{\"autoResolved\":true,\"timeToResolve\":\"t\"}}]},\"location\":\"iygbpvn\",\"tags\":{\"yctww\":\"mtx\",\"cvogygzyvne\":\"zwxjlm\",\"zbkr\":\"zaifghtmoqqtlff\"},\"id\":\"jjjavfqnvhnq\",\"name\":\"ewdogiyetesy\",\"type\":\"vidbztjhqtfb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrometheusRuleGroupResource response
            = manager.prometheusRuleGroups()
                .define("t")
                .withRegion("isqcssffxuifmcs")
                .withExistingResourceGroup("kcoeqswank")
                .withScopes(Arrays.asList("ywaeeczgf"))
                .withRules(Arrays.asList(
                    new PrometheusRule().withRecord("jks")
                        .withAlert("smdesqplpvmjcd")
                        .withEnabled(false)
                        .withExpression("bidyv")
                        .withSeverity(542120184)
                        .withForProperty("xvgpiude")
                        .withLabels(mapOf("paxwkufyk", "sxze", "pmru", "vuhx"))
                        .withAnnotations(mapOf("mvguihywart", "abaobnslujdjltym", "j", "pphkixkykxds",
                            "kkflrmymyincqlhr", "emmucfxh"))
                        .withActions(Arrays.asList(new PrometheusRuleGroupAction(), new PrometheusRuleGroupAction(),
                            new PrometheusRuleGroupAction(), new PrometheusRuleGroupAction()))
                        .withResolveConfiguration(new PrometheusRuleResolveConfiguration().withAutoResolved(false)
                            .withTimeToResolve("iiovgqcgxu")),
                    new PrometheusRule().withRecord("qkctotiowlxte")
                        .withAlert("ptjgwdt")
                        .withEnabled(true)
                        .withExpression("ranblwphqlkccu")
                        .withSeverity(225398981)
                        .withForProperty("qwahoi")
                        .withLabels(mapOf("wzdufypivlsbb", "gniiprglvaw", "phavpmhbrb", "pmcubkmifoxxkub"))
                        .withAnnotations(mapOf("joknssqyzqedik", "govpbbtte", "lg", "frdbiqmrjgeihf", "byephmgt",
                            "wfiwzcxmj", "myqwcab", "ljvrcmyfqipgxhnp"))
                        .withActions(Arrays.asList(new PrometheusRuleGroupAction()))
                        .withResolveConfiguration(new PrometheusRuleResolveConfiguration().withAutoResolved(false)
                            .withTimeToResolve("yaswlpaugmr")),
                    new PrometheusRule().withRecord("jlrxwtoaukhfk")
                        .withAlert("isizm")
                        .withEnabled(false)
                        .withExpression("dsxjwuivedw")
                        .withSeverity(877522372)
                        .withForProperty("ewxeiqbpsm")
                        .withLabels(mapOf("l", "guamlj", "ewgnxkympqanxrj", "gmsplzgaufcshhv"))
                        .withAnnotations(mapOf("taoypnyghshxc", "tw", "ycphdrwjjkhvyo", "lhkgmnsghp"))
                        .withActions(Arrays.asList(new PrometheusRuleGroupAction()))
                        .withResolveConfiguration(new PrometheusRuleResolveConfiguration().withAutoResolved(true)
                            .withTimeToResolve("xnqmhrpqpdfwm"))))
                .withTags(mapOf("rdzsylollgtrczzy", "bkdq", "rkihcirld", "mxzjijpvua", "dcoxnbk", "fx"))
                .withDescription("mhdroznnhdrlktg")
                .withEnabled(false)
                .withClusterName("guxhem")
                .withInterval("kklelssxblycs")
                .create();

        Assertions.assertEquals("iygbpvn", response.location());
        Assertions.assertEquals("mtx", response.tags().get("yctww"));
        Assertions.assertEquals("ypxrx", response.description());
        Assertions.assertEquals(false, response.enabled());
        Assertions.assertEquals("hwuhvctaf", response.clusterName());
        Assertions.assertEquals("bxrblmliowxihspn", response.scopes().get(0));
        Assertions.assertEquals("lrrcz", response.interval());
        Assertions.assertEquals("hhltnjadhqo", response.rules().get(0).record());
        Assertions.assertEquals("jqoyueayfbpcm", response.rules().get(0).alert());
        Assertions.assertEquals(false, response.rules().get(0).enabled());
        Assertions.assertEquals("byrrueqth", response.rules().get(0).expression());
        Assertions.assertEquals(1348542937, response.rules().get(0).severity());
        Assertions.assertEquals("mbscbbx", response.rules().get(0).forProperty());
        Assertions.assertEquals("hxiidlopedb", response.rules().get(0).labels().get("dpyqyybxubmd"));
        Assertions.assertEquals("ptsoqfyiase", response.rules().get(0).annotations().get("chkrttzr"));
        Assertions.assertEquals(false, response.rules().get(0).resolveConfiguration().autoResolved());
        Assertions.assertEquals("slsvjgpliu", response.rules().get(0).resolveConfiguration().timeToResolve());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
