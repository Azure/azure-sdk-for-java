// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRule;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroupAction;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleResolveConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PrometheusRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrometheusRule model = BinaryData.fromString(
            "{\"record\":\"lya\",\"alert\":\"dckcbc\",\"enabled\":true,\"expression\":\"rjxgciqib\",\"severity\":703095811,\"for\":\"xsdqrhzoymibmrqy\",\"labels\":{\"zdtmhrkwofy\":\"hwflu\",\"iwbwoenwashrtdtk\":\"voqacpiexpbt\",\"kulpiujwaasi\":\"nqxwbp\",\"qlpqwcciuq\":\"qiiobyuqer\"},\"annotations\":{\"kuwhh\":\"butauvfb\",\"koymkcd\":\"hykojoxafnndlpic\",\"pkkpw\":\"h\",\"jxywsuws\":\"reqnovvqfov\"},\"actions\":[{\"actionGroupId\":\"dsytgadgvr\",\"actionProperties\":{\"qnzarrwl\":\"en\",\"jfqka\":\"uu\",\"iipfpubj\":\"e\"}}],\"resolveConfiguration\":{\"autoResolved\":false,\"timeToResolve\":\"f\"}}")
            .toObject(PrometheusRule.class);
        Assertions.assertEquals("lya", model.record());
        Assertions.assertEquals("dckcbc", model.alert());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("rjxgciqib", model.expression());
        Assertions.assertEquals(703095811, model.severity());
        Assertions.assertEquals("xsdqrhzoymibmrqy", model.forProperty());
        Assertions.assertEquals("hwflu", model.labels().get("zdtmhrkwofy"));
        Assertions.assertEquals("butauvfb", model.annotations().get("kuwhh"));
        Assertions.assertEquals("dsytgadgvr", model.actions().get(0).actionGroupId());
        Assertions.assertEquals("en", model.actions().get(0).actionProperties().get("qnzarrwl"));
        Assertions.assertEquals(false, model.resolveConfiguration().autoResolved());
        Assertions.assertEquals("f", model.resolveConfiguration().timeToResolve());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrometheusRule model = new PrometheusRule().withRecord("lya")
            .withAlert("dckcbc")
            .withEnabled(true)
            .withExpression("rjxgciqib")
            .withSeverity(703095811)
            .withForProperty("xsdqrhzoymibmrqy")
            .withLabels(mapOf("zdtmhrkwofy", "hwflu", "iwbwoenwashrtdtk", "voqacpiexpbt", "kulpiujwaasi", "nqxwbp",
                "qlpqwcciuq", "qiiobyuqer"))
            .withAnnotations(
                mapOf("kuwhh", "butauvfb", "koymkcd", "hykojoxafnndlpic", "pkkpw", "h", "jxywsuws", "reqnovvqfov"))
            .withActions(Arrays.asList(new PrometheusRuleGroupAction().withActionGroupId("dsytgadgvr")
                .withActionProperties(mapOf("qnzarrwl", "en", "jfqka", "uu", "iipfpubj", "e"))))
            .withResolveConfiguration(
                new PrometheusRuleResolveConfiguration().withAutoResolved(false).withTimeToResolve("f"));
        model = BinaryData.fromObject(model).toObject(PrometheusRule.class);
        Assertions.assertEquals("lya", model.record());
        Assertions.assertEquals("dckcbc", model.alert());
        Assertions.assertEquals(true, model.enabled());
        Assertions.assertEquals("rjxgciqib", model.expression());
        Assertions.assertEquals(703095811, model.severity());
        Assertions.assertEquals("xsdqrhzoymibmrqy", model.forProperty());
        Assertions.assertEquals("hwflu", model.labels().get("zdtmhrkwofy"));
        Assertions.assertEquals("butauvfb", model.annotations().get("kuwhh"));
        Assertions.assertEquals("dsytgadgvr", model.actions().get(0).actionGroupId());
        Assertions.assertEquals("en", model.actions().get(0).actionProperties().get("qnzarrwl"));
        Assertions.assertEquals(false, model.resolveConfiguration().autoResolved());
        Assertions.assertEquals("f", model.resolveConfiguration().timeToResolve());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
