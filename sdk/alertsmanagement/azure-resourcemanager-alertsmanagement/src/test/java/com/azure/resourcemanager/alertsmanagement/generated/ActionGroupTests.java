// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.models.ActionGroup;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ActionGroupTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ActionGroup model = BinaryData.fromString(
            "{\"actionGroupId\":\"nmgixh\",\"webhookProperties\":{\"rhc\":\"vmqfoud\",\"ndm\":\"yyprotwyp\",\"k\":\"xhugcm\"},\"actionProperties\":{\"tzfjltf\":\"gorbmftpm\",\"opv\":\"nzcyjtotp\"}}")
            .toObject(ActionGroup.class);
        Assertions.assertEquals("nmgixh", model.actionGroupId());
        Assertions.assertEquals("vmqfoud", model.webhookProperties().get("rhc"));
        Assertions.assertEquals("gorbmftpm", model.actionProperties().get("tzfjltf"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ActionGroup model = new ActionGroup().withActionGroupId("nmgixh")
            .withWebhookProperties(mapOf("rhc", "vmqfoud", "ndm", "yyprotwyp", "k", "xhugcm"))
            .withActionProperties(mapOf("tzfjltf", "gorbmftpm", "opv", "nzcyjtotp"));
        model = BinaryData.fromObject(model).toObject(ActionGroup.class);
        Assertions.assertEquals("nmgixh", model.actionGroupId());
        Assertions.assertEquals("vmqfoud", model.webhookProperties().get("rhc"));
        Assertions.assertEquals("gorbmftpm", model.actionProperties().get("tzfjltf"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
