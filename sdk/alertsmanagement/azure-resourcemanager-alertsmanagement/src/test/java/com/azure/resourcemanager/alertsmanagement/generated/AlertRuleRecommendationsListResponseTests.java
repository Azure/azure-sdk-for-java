// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.AlertRuleRecommendationResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleRecommendationsListResponse;
import com.azure.resourcemanager.alertsmanagement.models.RuleArmTemplate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertRuleRecommendationsListResponseTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertRuleRecommendationsListResponse model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"alertRuleType\":\"fzwiivwzjbhyz\",\"displayInformation\":{\"q\":\"jrkambtrnegvmnv\"},\"ruleArmTemplate\":{\"$schema\":\"qvldspastjbkkd\",\"contentVersion\":\"flvestmjlxrrilo\",\"variables\":\"dataapeewchpxlkt\",\"parameters\":\"datakuziycsle\",\"resources\":[\"dataf\",\"dataztcktyh\",\"datatqedcgzulwm\",\"datarqzz\"]}},\"id\":\"jvpglydzgk\",\"name\":\"vqeevtoep\",\"type\":\"yutnwytpzdmov\"},{\"properties\":{\"alertRuleType\":\"vf\",\"displayInformation\":{\"z\":\"awzqadfl\",\"ndtic\":\"riglaec\",\"mldgxobfirc\":\"kpvzmlq\"},\"ruleArmTemplate\":{\"$schema\":\"npkc\",\"contentVersion\":\"ayzri\",\"variables\":\"datakhyawfvjlboxqv\",\"parameters\":\"datajlmxhomdynhd\",\"resources\":[\"dataigu\",\"databnraauzzptjazysd\"]}},\"id\":\"ezwwv\",\"name\":\"iqyuvvfo\",\"type\":\"kphhq\"}],\"nextLink\":\"kvylauyavl\"}")
            .toObject(AlertRuleRecommendationsListResponse.class);
        Assertions.assertEquals("fzwiivwzjbhyz", model.value().get(0).alertRuleType());
        Assertions.assertEquals("jrkambtrnegvmnv", model.value().get(0).displayInformation().get("q"));
        Assertions.assertEquals("qvldspastjbkkd", model.value().get(0).ruleArmTemplate().schema());
        Assertions.assertEquals("flvestmjlxrrilo", model.value().get(0).ruleArmTemplate().contentVersion());
        Assertions.assertEquals("kvylauyavl", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertRuleRecommendationsListResponse model = new AlertRuleRecommendationsListResponse().withValue(Arrays.asList(
            new AlertRuleRecommendationResourceInner().withAlertRuleType("fzwiivwzjbhyz")
                .withDisplayInformation(mapOf("q", "jrkambtrnegvmnv"))
                .withRuleArmTemplate(new RuleArmTemplate().withSchema("qvldspastjbkkd")
                    .withContentVersion("flvestmjlxrrilo")
                    .withVariables("dataapeewchpxlkt")
                    .withParameters("datakuziycsle")
                    .withResources(Arrays.asList("dataf", "dataztcktyh", "datatqedcgzulwm", "datarqzz"))),
            new AlertRuleRecommendationResourceInner().withAlertRuleType("vf")
                .withDisplayInformation(mapOf("z", "awzqadfl", "ndtic", "riglaec", "mldgxobfirc", "kpvzmlq"))
                .withRuleArmTemplate(new RuleArmTemplate().withSchema("npkc")
                    .withContentVersion("ayzri")
                    .withVariables("datakhyawfvjlboxqv")
                    .withParameters("datajlmxhomdynhd")
                    .withResources(Arrays.asList("dataigu", "databnraauzzptjazysd")))))
            .withNextLink("kvylauyavl");
        model = BinaryData.fromObject(model).toObject(AlertRuleRecommendationsListResponse.class);
        Assertions.assertEquals("fzwiivwzjbhyz", model.value().get(0).alertRuleType());
        Assertions.assertEquals("jrkambtrnegvmnv", model.value().get(0).displayInformation().get("q"));
        Assertions.assertEquals("qvldspastjbkkd", model.value().get(0).ruleArmTemplate().schema());
        Assertions.assertEquals("flvestmjlxrrilo", model.value().get(0).ruleArmTemplate().contentVersion());
        Assertions.assertEquals("kvylauyavl", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
