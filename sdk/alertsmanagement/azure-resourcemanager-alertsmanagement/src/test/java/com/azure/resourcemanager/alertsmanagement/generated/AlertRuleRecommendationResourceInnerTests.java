// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.alertsmanagement.fluent.models.AlertRuleRecommendationResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.RuleArmTemplate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AlertRuleRecommendationResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AlertRuleRecommendationResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"alertRuleType\":\"wmn\",\"displayInformation\":{\"sgbdhuz\":\"ttijfybvpoekrs\",\"h\":\"gnjdgkynscliqhz\",\"mtk\":\"nk\"},\"ruleArmTemplate\":{\"$schema\":\"bo\",\"contentVersion\":\"ppnvdxz\",\"variables\":\"datahihfrbbcevqagtlt\",\"parameters\":\"datahlfkqojpy\",\"resources\":[\"datagtrd\",\"datanifmzzsdymbrnysu\",\"datam\",\"datarafwgckhocxvdf\"]}},\"id\":\"wafqroud\",\"name\":\"spave\",\"type\":\"hrv\"}")
            .toObject(AlertRuleRecommendationResourceInner.class);
        Assertions.assertEquals("wmn", model.alertRuleType());
        Assertions.assertEquals("ttijfybvpoekrs", model.displayInformation().get("sgbdhuz"));
        Assertions.assertEquals("bo", model.ruleArmTemplate().schema());
        Assertions.assertEquals("ppnvdxz", model.ruleArmTemplate().contentVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AlertRuleRecommendationResourceInner model = new AlertRuleRecommendationResourceInner().withAlertRuleType("wmn")
            .withDisplayInformation(mapOf("sgbdhuz", "ttijfybvpoekrs", "h", "gnjdgkynscliqhz", "mtk", "nk"))
            .withRuleArmTemplate(new RuleArmTemplate().withSchema("bo")
                .withContentVersion("ppnvdxz")
                .withVariables("datahihfrbbcevqagtlt")
                .withParameters("datahlfkqojpy")
                .withResources(Arrays.asList("datagtrd", "datanifmzzsdymbrnysu", "datam", "datarafwgckhocxvdf")));
        model = BinaryData.fromObject(model).toObject(AlertRuleRecommendationResourceInner.class);
        Assertions.assertEquals("wmn", model.alertRuleType());
        Assertions.assertEquals("ttijfybvpoekrs", model.displayInformation().get("sgbdhuz"));
        Assertions.assertEquals("bo", model.ruleArmTemplate().schema());
        Assertions.assertEquals("ppnvdxz", model.ruleArmTemplate().contentVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
