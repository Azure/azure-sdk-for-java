// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.alertsmanagement.AlertsManagementManager;
import com.azure.resourcemanager.alertsmanagement.fluent.models.TenantActivityLogAlertResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.ActionGroup;
import com.azure.resourcemanager.alertsmanagement.models.ActionList;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleAllOfCondition;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleAnyOfOrLeafCondition;
import com.azure.resourcemanager.alertsmanagement.models.AlertRuleLeafCondition;
import com.azure.resourcemanager.alertsmanagement.models.TenantActivityLogAlertResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TenantActivityLogAlertsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantScope\":\"yorpr\",\"scopes\":[\"jogeslabnsmjkwyn\"],\"condition\":{\"allOf\":[{\"anyOf\":[{},{},{},{}],\"field\":\"qs\",\"equals\":\"vwjtqpkevmyltjc\",\"containsAny\":[\"xklurcclfgxannno\",\"t\",\"posew\"]}]},\"actions\":{\"actionGroups\":[{\"actionGroupId\":\"pxvkqma\",\"webhookProperties\":{\"aifyzyzeyuubeids\":\"vpifd\",\"ytoithgygvfl\":\"l\"},\"actionProperties\":{\"rxwe\":\"dihoyn\",\"cy\":\"wkd\",\"dnaienhqhskndnel\":\"ucpcunnuzdqumoen\"}},{\"actionGroupId\":\"kaa\",\"webhookProperties\":{\"anniyopetxivcnr\":\"nwf\",\"aephblkw\":\"yxnu\",\"bqsdtcjbctvi\":\"pat\"},\"actionProperties\":{\"hzvb\":\"qymtuowogtgits\",\"fzndscxmxeatkd\":\"zcdba\",\"ibqbnaomhjrm\":\"mwnrdj\",\"maxljalfihcj\":\"u\"}},{\"actionGroupId\":\"obcancdexxqcw\",\"webhookProperties\":{\"zrltixldzyyf\":\"fgvaknokzwj\"},\"actionProperties\":{\"mmpuj\":\"qsix\",\"ovwzdbpqvybefg\":\"vyqlkjuvsmbmslzo\",\"okcvtlubses\":\"mx\"}},{\"actionGroupId\":\"vcuartrhun\",\"webhookProperties\":{\"uykbbmn\":\"rykycndzfqivjr\",\"xoe\":\"aglt\"},\"actionProperties\":{\"y\":\"qlnfw\",\"rcssbzhddubbnq\":\"mvqdbpbhfckdvez\",\"h\":\"b\",\"wugiqjti\":\"alehpav\"}}]},\"enabled\":false,\"description\":\"dminic\"},\"location\":\"teajohiyg\",\"tags\":{\"wxqcsehchkhufmpq\":\"bonhpczykmktp\"},\"id\":\"mqyjgy\",\"name\":\"zulo\",\"type\":\"saeuzanhsfnhsenw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AlertsManagementManager manager = AlertsManagementManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        TenantActivityLogAlertResource response = manager.tenantActivityLogAlerts()
            .createOrUpdateWithResponse("zjd", "r",
                new TenantActivityLogAlertResourceInner().withLocation("jpnwynudql")
                    .withTags(mapOf("ehuxiqhzlraym", "auzpjlx", "dsajrednwyysh", "zxlskihmxr"))
                    .withTenantScope("btxjeaoqaqbzg")
                    .withScopes(Arrays.asList("w", "v", "atbwbqam", "e"))
                    .withCondition(new AlertRuleAllOfCondition()
                        .withAllOf(Arrays.asList(new AlertRuleAnyOfOrLeafCondition().withField("lpkcvmwfauxxep")
                            .withEquals("wbormcqmi")
                            .withContainsAny(Arrays.asList("jqpkzfbo", "xjmcsmyqwixvcpw", "kwywzwofalic", "duoiqt"))
                            .withAnyOf(Arrays.asList(new AlertRuleLeafCondition(), new AlertRuleLeafCondition(),
                                new AlertRuleLeafCondition())))))
                    .withActions(
                        new ActionList().withActionGroups(Arrays.asList(new ActionGroup().withActionGroupId("yvsk")
                            .withWebhookProperties(
                                mapOf("hycvdimwrzre", "wzawnvsbcfhzagxn", "eryekzkdhmeottaw", "zgyufutrwp"))
                            .withActionProperties(mapOf("p", "sxwwhnhjtf")))))
                    .withEnabled(false)
                    .withDescription("i"),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("teajohiyg", response.location());
        Assertions.assertEquals("bonhpczykmktp", response.tags().get("wxqcsehchkhufmpq"));
        Assertions.assertEquals("yorpr", response.tenantScope());
        Assertions.assertEquals("jogeslabnsmjkwyn", response.scopes().get(0));
        Assertions.assertEquals("qs", response.condition().allOf().get(0).field());
        Assertions.assertEquals("vwjtqpkevmyltjc", response.condition().allOf().get(0).equals());
        Assertions.assertEquals("xklurcclfgxannno", response.condition().allOf().get(0).containsAny().get(0));
        Assertions.assertEquals("pxvkqma", response.actions().actionGroups().get(0).actionGroupId());
        Assertions.assertEquals("vpifd",
            response.actions().actionGroups().get(0).webhookProperties().get("aifyzyzeyuubeids"));
        Assertions.assertEquals("dihoyn", response.actions().actionGroups().get(0).actionProperties().get("rxwe"));
        Assertions.assertEquals(false, response.enabled());
        Assertions.assertEquals("dminic", response.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
