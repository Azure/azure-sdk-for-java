// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.alertsmanagement.fluent.TenantActivityLogAlertsClient;
import com.azure.resourcemanager.alertsmanagement.fluent.models.TenantActivityLogAlertResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.TenantAlertRuleList;
import com.azure.resourcemanager.alertsmanagement.models.TenantAlertRulePatchObject;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TenantActivityLogAlertsClient.
 */
public final class TenantActivityLogAlertsClientImpl implements TenantActivityLogAlertsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TenantActivityLogAlertsService service;

    /**
     * The service client containing this operation class.
     */
    private final AlertsManagementClientImpl client;

    /**
     * Initializes an instance of TenantActivityLogAlertsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TenantActivityLogAlertsClientImpl(AlertsManagementClientImpl client) {
        this.service = RestProxy.create(TenantActivityLogAlertsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AlertsManagementClientTenantActivityLogAlerts to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AlertsManagementClie")
    public interface TenantActivityLogAlertsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.AlertsManagement/tenantActivityLogAlerts/{alertRuleName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActivityLogAlertResourceInner>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("managementGroupName") String managementGroupName,
            @PathParam("alertRuleName") String alertRuleName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TenantActivityLogAlertResourceInner tenantActivityLogAlertRule,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.AlertsManagement/tenantActivityLogAlerts/{alertRuleName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActivityLogAlertResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam("managementGroupName") String managementGroupName,
            @PathParam("alertRuleName") String alertRuleName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.AlertsManagement/tenantActivityLogAlerts/{alertRuleName}")
        @ExpectedResponses({ 200, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint,
            @PathParam("managementGroupName") String managementGroupName,
            @PathParam("alertRuleName") String alertRuleName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.AlertsManagement/tenantActivityLogAlerts/{alertRuleName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantActivityLogAlertResourceInner>> update(@HostParam("$host") String endpoint,
            @PathParam("managementGroupName") String managementGroupName,
            @PathParam("alertRuleName") String alertRuleName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TenantAlertRulePatchObject tenantActivityLogAlertRulePatch,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.AlertsManagement/tenantActivityLogAlerts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantAlertRuleList>> listByTenant(@HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupName}/providers/Microsoft.AlertsManagement/tenantActivityLogAlerts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantAlertRuleList>> listByManagementGroup(@HostParam("$host") String endpoint,
            @PathParam("managementGroupName") String managementGroupName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantAlertRuleList>> listByTenantNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TenantAlertRuleList>> listByManagementGroupNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Create a new Tenant Activity Log Alert rule or update an existing one.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRule The Tenant Activity Log Alert rule to create or use for the update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActivityLogAlertResourceInner>> createOrUpdateWithResponseAsync(
        String managementGroupName, String alertRuleName,
        TenantActivityLogAlertResourceInner tenantActivityLogAlertRule) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        if (tenantActivityLogAlertRule == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter tenantActivityLogAlertRule is required and cannot be null."));
        } else {
            tenantActivityLogAlertRule.validate();
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), managementGroupName,
                alertRuleName, apiVersion, tenantActivityLogAlertRule, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new Tenant Activity Log Alert rule or update an existing one.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRule The Tenant Activity Log Alert rule to create or use for the update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActivityLogAlertResourceInner>> createOrUpdateWithResponseAsync(
        String managementGroupName, String alertRuleName,
        TenantActivityLogAlertResourceInner tenantActivityLogAlertRule, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        if (tenantActivityLogAlertRule == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter tenantActivityLogAlertRule is required and cannot be null."));
        } else {
            tenantActivityLogAlertRule.validate();
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), managementGroupName, alertRuleName, apiVersion,
            tenantActivityLogAlertRule, accept, context);
    }

    /**
     * Create a new Tenant Activity Log Alert rule or update an existing one.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRule The Tenant Activity Log Alert rule to create or use for the update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantActivityLogAlertResourceInner> createOrUpdateAsync(String managementGroupName,
        String alertRuleName, TenantActivityLogAlertResourceInner tenantActivityLogAlertRule) {
        return createOrUpdateWithResponseAsync(managementGroupName, alertRuleName, tenantActivityLogAlertRule)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Create a new Tenant Activity Log Alert rule or update an existing one.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRule The Tenant Activity Log Alert rule to create or use for the update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantActivityLogAlertResourceInner> createOrUpdateWithResponse(String managementGroupName,
        String alertRuleName, TenantActivityLogAlertResourceInner tenantActivityLogAlertRule, Context context) {
        return createOrUpdateWithResponseAsync(managementGroupName, alertRuleName, tenantActivityLogAlertRule, context)
            .block();
    }

    /**
     * Create a new Tenant Activity Log Alert rule or update an existing one.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRule The Tenant Activity Log Alert rule to create or use for the update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantActivityLogAlertResourceInner createOrUpdate(String managementGroupName, String alertRuleName,
        TenantActivityLogAlertResourceInner tenantActivityLogAlertRule) {
        return createOrUpdateWithResponse(managementGroupName, alertRuleName, tenantActivityLogAlertRule, Context.NONE)
            .getValue();
    }

    /**
     * Get Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenant Activity Log Alert rule along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActivityLogAlertResourceInner>> getWithResponseAsync(String managementGroupName,
        String alertRuleName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), managementGroupName, alertRuleName,
                apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenant Activity Log Alert rule along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActivityLogAlertResourceInner>> getWithResponseAsync(String managementGroupName,
        String alertRuleName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), managementGroupName, alertRuleName, apiVersion, accept, context);
    }

    /**
     * Get Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenant Activity Log Alert rule on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantActivityLogAlertResourceInner> getAsync(String managementGroupName, String alertRuleName) {
        return getWithResponseAsync(managementGroupName, alertRuleName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenant Activity Log Alert rule along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantActivityLogAlertResourceInner> getWithResponse(String managementGroupName,
        String alertRuleName, Context context) {
        return getWithResponseAsync(managementGroupName, alertRuleName, context).block();
    }

    /**
     * Get Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return tenant Activity Log Alert rule.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantActivityLogAlertResourceInner get(String managementGroupName, String alertRuleName) {
        return getWithResponse(managementGroupName, alertRuleName, Context.NONE).getValue();
    }

    /**
     * Delete a Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String managementGroupName, String alertRuleName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), managementGroupName, alertRuleName,
                apiVersion, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String managementGroupName, String alertRuleName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), managementGroupName, alertRuleName, apiVersion, accept,
            context);
    }

    /**
     * Delete a Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupName, String alertRuleName) {
        return deleteWithResponseAsync(managementGroupName, alertRuleName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Delete a Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String managementGroupName, String alertRuleName, Context context) {
        return deleteWithResponseAsync(managementGroupName, alertRuleName, context).block();
    }

    /**
     * Delete a Tenant Activity Log Alert rule.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupName, String alertRuleName) {
        deleteWithResponse(managementGroupName, alertRuleName, Context.NONE);
    }

    /**
     * Updates 'tags' and 'enabled' fields in an existing Tenant Alert rule. This method is used to update the Alert
     * rule tags, and to enable or disable the Alert rule. To update other fields use CreateOrUpdate operation.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRulePatch Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActivityLogAlertResourceInner>> updateWithResponseAsync(String managementGroupName,
        String alertRuleName, TenantAlertRulePatchObject tenantActivityLogAlertRulePatch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        if (tenantActivityLogAlertRulePatch == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter tenantActivityLogAlertRulePatch is required and cannot be null."));
        } else {
            tenantActivityLogAlertRulePatch.validate();
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), managementGroupName, alertRuleName,
                apiVersion, tenantActivityLogAlertRulePatch, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates 'tags' and 'enabled' fields in an existing Tenant Alert rule. This method is used to update the Alert
     * rule tags, and to enable or disable the Alert rule. To update other fields use CreateOrUpdate operation.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRulePatch Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TenantActivityLogAlertResourceInner>> updateWithResponseAsync(String managementGroupName,
        String alertRuleName, TenantAlertRulePatchObject tenantActivityLogAlertRulePatch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        if (alertRuleName == null) {
            return Mono.error(new IllegalArgumentException("Parameter alertRuleName is required and cannot be null."));
        }
        if (tenantActivityLogAlertRulePatch == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter tenantActivityLogAlertRulePatch is required and cannot be null."));
        } else {
            tenantActivityLogAlertRulePatch.validate();
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), managementGroupName, alertRuleName, apiVersion,
            tenantActivityLogAlertRulePatch, accept, context);
    }

    /**
     * Updates 'tags' and 'enabled' fields in an existing Tenant Alert rule. This method is used to update the Alert
     * rule tags, and to enable or disable the Alert rule. To update other fields use CreateOrUpdate operation.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRulePatch Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TenantActivityLogAlertResourceInner> updateAsync(String managementGroupName, String alertRuleName,
        TenantAlertRulePatchObject tenantActivityLogAlertRulePatch) {
        return updateWithResponseAsync(managementGroupName, alertRuleName, tenantActivityLogAlertRulePatch)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates 'tags' and 'enabled' fields in an existing Tenant Alert rule. This method is used to update the Alert
     * rule tags, and to enable or disable the Alert rule. To update other fields use CreateOrUpdate operation.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRulePatch Parameters supplied to the operation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TenantActivityLogAlertResourceInner> updateWithResponse(String managementGroupName,
        String alertRuleName, TenantAlertRulePatchObject tenantActivityLogAlertRulePatch, Context context) {
        return updateWithResponseAsync(managementGroupName, alertRuleName, tenantActivityLogAlertRulePatch, context)
            .block();
    }

    /**
     * Updates 'tags' and 'enabled' fields in an existing Tenant Alert rule. This method is used to update the Alert
     * rule tags, and to enable or disable the Alert rule. To update other fields use CreateOrUpdate operation.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param alertRuleName The name of the Tenant Activity Log Alert rule.
     * @param tenantActivityLogAlertRulePatch Parameters supplied to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Tenant Activity Log Alert rule resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TenantActivityLogAlertResourceInner update(String managementGroupName, String alertRuleName,
        TenantAlertRulePatchObject tenantActivityLogAlertRulePatch) {
        return updateWithResponse(managementGroupName, alertRuleName, tenantActivityLogAlertRulePatch, Context.NONE)
            .getValue();
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in the tenant.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in the tenant along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>> listByTenantSinglePageAsync() {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByTenant(this.client.getEndpoint(), apiVersion, accept, context))
            .<PagedResponse<TenantActivityLogAlertResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in the tenant.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in the tenant along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>> listByTenantSinglePageAsync(Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByTenant(this.client.getEndpoint(), apiVersion, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in the tenant.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in the tenant as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TenantActivityLogAlertResourceInner> listByTenantAsync() {
        return new PagedFlux<>(() -> listByTenantSinglePageAsync(),
            nextLink -> listByTenantNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in the tenant.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in the tenant as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TenantActivityLogAlertResourceInner> listByTenantAsync(Context context) {
        return new PagedFlux<>(() -> listByTenantSinglePageAsync(context),
            nextLink -> listByTenantNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in the tenant.
     * 
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in the tenant as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TenantActivityLogAlertResourceInner> listByTenant() {
        return new PagedIterable<>(listByTenantAsync());
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in the tenant.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in the tenant as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TenantActivityLogAlertResourceInner> listByTenant(Context context) {
        return new PagedIterable<>(listByTenantAsync(context));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in a management group.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in a management group along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>>
        listByManagementGroupSinglePageAsync(String managementGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByManagementGroup(this.client.getEndpoint(), managementGroupName,
                apiVersion, accept, context))
            .<PagedResponse<TenantActivityLogAlertResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in a management group.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in a management group along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>>
        listByManagementGroupSinglePageAsync(String managementGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupName is required and cannot be null."));
        }
        final String apiVersion = "2023-04-01-preview";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByManagementGroup(this.client.getEndpoint(), managementGroupName, apiVersion, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in a management group.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in a management group as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TenantActivityLogAlertResourceInner> listByManagementGroupAsync(String managementGroupName) {
        return new PagedFlux<>(() -> listByManagementGroupSinglePageAsync(managementGroupName),
            nextLink -> listByManagementGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in a management group.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in a management group as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<TenantActivityLogAlertResourceInner> listByManagementGroupAsync(String managementGroupName,
        Context context) {
        return new PagedFlux<>(() -> listByManagementGroupSinglePageAsync(managementGroupName, context),
            nextLink -> listByManagementGroupNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in a management group.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in a management group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TenantActivityLogAlertResourceInner> listByManagementGroup(String managementGroupName) {
        return new PagedIterable<>(listByManagementGroupAsync(managementGroupName));
    }

    /**
     * Get a list of all Tenant Activity Log Alert rules in a management group.
     * 
     * @param managementGroupName The name of the management group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of all Tenant Activity Log Alert rules in a management group as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TenantActivityLogAlertResourceInner> listByManagementGroup(String managementGroupName,
        Context context) {
        return new PagedIterable<>(listByManagementGroupAsync(managementGroupName, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Tenant Activity Log Alert rules along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>> listByTenantNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByTenantNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TenantActivityLogAlertResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Tenant Activity Log Alert rules along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>> listByTenantNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByTenantNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Tenant Activity Log Alert rules along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>>
        listByManagementGroupNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByManagementGroupNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<TenantActivityLogAlertResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Tenant Activity Log Alert rules along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<TenantActivityLogAlertResourceInner>>
        listByManagementGroupNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByManagementGroupNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
