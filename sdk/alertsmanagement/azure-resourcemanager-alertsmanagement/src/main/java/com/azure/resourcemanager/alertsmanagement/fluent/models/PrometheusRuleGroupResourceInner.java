// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRule;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The Prometheus rule group resource.
 */
@Fluent
public final class PrometheusRuleGroupResourceInner extends Resource {
    /*
     * The Prometheus rule group properties of the resource.
     */
    private PrometheusRuleGroupProperties innerProperties = new PrometheusRuleGroupProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of PrometheusRuleGroupResourceInner class.
     */
    public PrometheusRuleGroupResourceInner() {
    }

    /**
     * Get the innerProperties property: The Prometheus rule group properties of the resource.
     * 
     * @return the innerProperties value.
     */
    private PrometheusRuleGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusRuleGroupResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PrometheusRuleGroupResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the description property: the description of the Prometheus rule group that will be included in the alert
     * email.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: the description of the Prometheus rule group that will be included in the alert
     * email.
     * 
     * @param description the description value to set.
     * @return the PrometheusRuleGroupResourceInner object itself.
     */
    public PrometheusRuleGroupResourceInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrometheusRuleGroupProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the enabled property: the flag that indicates whether the Prometheus rule group is enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.innerProperties() == null ? null : this.innerProperties().enabled();
    }

    /**
     * Set the enabled property: the flag that indicates whether the Prometheus rule group is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the PrometheusRuleGroupResourceInner object itself.
     */
    public PrometheusRuleGroupResourceInner withEnabled(Boolean enabled) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrometheusRuleGroupProperties();
        }
        this.innerProperties().withEnabled(enabled);
        return this;
    }

    /**
     * Get the clusterName property: the cluster name of the rule group evaluation.
     * 
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterName();
    }

    /**
     * Set the clusterName property: the cluster name of the rule group evaluation.
     * 
     * @param clusterName the clusterName value to set.
     * @return the PrometheusRuleGroupResourceInner object itself.
     */
    public PrometheusRuleGroupResourceInner withClusterName(String clusterName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrometheusRuleGroupProperties();
        }
        this.innerProperties().withClusterName(clusterName);
        return this;
    }

    /**
     * Get the scopes property: the list of resource id's that this rule group is scoped to.
     * 
     * @return the scopes value.
     */
    public List<String> scopes() {
        return this.innerProperties() == null ? null : this.innerProperties().scopes();
    }

    /**
     * Set the scopes property: the list of resource id's that this rule group is scoped to.
     * 
     * @param scopes the scopes value to set.
     * @return the PrometheusRuleGroupResourceInner object itself.
     */
    public PrometheusRuleGroupResourceInner withScopes(List<String> scopes) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrometheusRuleGroupProperties();
        }
        this.innerProperties().withScopes(scopes);
        return this;
    }

    /**
     * Get the interval property: the interval in which to run the Prometheus rule group represented in ISO 8601
     * duration format. Should be between 1 and 15 minutes.
     * 
     * @return the interval value.
     */
    public String interval() {
        return this.innerProperties() == null ? null : this.innerProperties().interval();
    }

    /**
     * Set the interval property: the interval in which to run the Prometheus rule group represented in ISO 8601
     * duration format. Should be between 1 and 15 minutes.
     * 
     * @param interval the interval value to set.
     * @return the PrometheusRuleGroupResourceInner object itself.
     */
    public PrometheusRuleGroupResourceInner withInterval(String interval) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrometheusRuleGroupProperties();
        }
        this.innerProperties().withInterval(interval);
        return this;
    }

    /**
     * Get the rules property: defines the rules in the Prometheus rule group.
     * 
     * @return the rules value.
     */
    public List<PrometheusRule> rules() {
        return this.innerProperties() == null ? null : this.innerProperties().rules();
    }

    /**
     * Set the rules property: defines the rules in the Prometheus rule group.
     * 
     * @param rules the rules value to set.
     * @return the PrometheusRuleGroupResourceInner object itself.
     */
    public PrometheusRuleGroupResourceInner withRules(List<PrometheusRule> rules) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrometheusRuleGroupProperties();
        }
        this.innerProperties().withRules(rules);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model PrometheusRuleGroupResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PrometheusRuleGroupResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrometheusRuleGroupResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrometheusRuleGroupResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PrometheusRuleGroupResourceInner.
     */
    public static PrometheusRuleGroupResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrometheusRuleGroupResourceInner deserializedPrometheusRuleGroupResourceInner
                = new PrometheusRuleGroupResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPrometheusRuleGroupResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPrometheusRuleGroupResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedPrometheusRuleGroupResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedPrometheusRuleGroupResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPrometheusRuleGroupResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedPrometheusRuleGroupResourceInner.innerProperties
                        = PrometheusRuleGroupProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedPrometheusRuleGroupResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrometheusRuleGroupResourceInner;
        });
    }
}
