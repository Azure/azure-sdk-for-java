// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.alertsmanagement.models.RuleArmTemplate;
import java.io.IOException;
import java.util.Map;

/**
 * Describes the format of Alert Rule Recommendations response.
 */
@Fluent
public final class AlertRuleRecommendationProperties implements JsonSerializable<AlertRuleRecommendationProperties> {
    /*
     * The recommendation alert rule type.
     */
    private String alertRuleType;

    /*
     * A dictionary that provides the display information for an alert rule recommendation.
     */
    private Map<String, String> displayInformation;

    /*
     * A complete ARM template to deploy the alert rules.
     */
    private RuleArmTemplate ruleArmTemplate;

    /**
     * Creates an instance of AlertRuleRecommendationProperties class.
     */
    public AlertRuleRecommendationProperties() {
    }

    /**
     * Get the alertRuleType property: The recommendation alert rule type.
     * 
     * @return the alertRuleType value.
     */
    public String alertRuleType() {
        return this.alertRuleType;
    }

    /**
     * Set the alertRuleType property: The recommendation alert rule type.
     * 
     * @param alertRuleType the alertRuleType value to set.
     * @return the AlertRuleRecommendationProperties object itself.
     */
    public AlertRuleRecommendationProperties withAlertRuleType(String alertRuleType) {
        this.alertRuleType = alertRuleType;
        return this;
    }

    /**
     * Get the displayInformation property: A dictionary that provides the display information for an alert rule
     * recommendation.
     * 
     * @return the displayInformation value.
     */
    public Map<String, String> displayInformation() {
        return this.displayInformation;
    }

    /**
     * Set the displayInformation property: A dictionary that provides the display information for an alert rule
     * recommendation.
     * 
     * @param displayInformation the displayInformation value to set.
     * @return the AlertRuleRecommendationProperties object itself.
     */
    public AlertRuleRecommendationProperties withDisplayInformation(Map<String, String> displayInformation) {
        this.displayInformation = displayInformation;
        return this;
    }

    /**
     * Get the ruleArmTemplate property: A complete ARM template to deploy the alert rules.
     * 
     * @return the ruleArmTemplate value.
     */
    public RuleArmTemplate ruleArmTemplate() {
        return this.ruleArmTemplate;
    }

    /**
     * Set the ruleArmTemplate property: A complete ARM template to deploy the alert rules.
     * 
     * @param ruleArmTemplate the ruleArmTemplate value to set.
     * @return the AlertRuleRecommendationProperties object itself.
     */
    public AlertRuleRecommendationProperties withRuleArmTemplate(RuleArmTemplate ruleArmTemplate) {
        this.ruleArmTemplate = ruleArmTemplate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (alertRuleType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property alertRuleType in model AlertRuleRecommendationProperties"));
        }
        if (displayInformation() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property displayInformation in model AlertRuleRecommendationProperties"));
        }
        if (ruleArmTemplate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property ruleArmTemplate in model AlertRuleRecommendationProperties"));
        } else {
            ruleArmTemplate().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AlertRuleRecommendationProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("alertRuleType", this.alertRuleType);
        jsonWriter.writeMapField("displayInformation", this.displayInformation,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("ruleArmTemplate", this.ruleArmTemplate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertRuleRecommendationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertRuleRecommendationProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AlertRuleRecommendationProperties.
     */
    public static AlertRuleRecommendationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertRuleRecommendationProperties deserializedAlertRuleRecommendationProperties
                = new AlertRuleRecommendationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("alertRuleType".equals(fieldName)) {
                    deserializedAlertRuleRecommendationProperties.alertRuleType = reader.getString();
                } else if ("displayInformation".equals(fieldName)) {
                    Map<String, String> displayInformation = reader.readMap(reader1 -> reader1.getString());
                    deserializedAlertRuleRecommendationProperties.displayInformation = displayInformation;
                } else if ("ruleArmTemplate".equals(fieldName)) {
                    deserializedAlertRuleRecommendationProperties.ruleArmTemplate = RuleArmTemplate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertRuleRecommendationProperties;
        });
    }
}
