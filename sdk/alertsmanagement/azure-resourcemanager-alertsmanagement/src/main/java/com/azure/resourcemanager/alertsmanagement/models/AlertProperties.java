// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Alert property bag.
 */
@Fluent
public final class AlertProperties implements JsonSerializable<AlertProperties> {
    /*
     * This object contains consistent fields across different monitor services.
     */
    private Essentials essentials;

    /*
     * Information specific to the monitor service that gives more contextual details about the alert.
     */
    private Object context;

    /*
     * Config which would be used for displaying the data in portal.
     */
    private Object egressConfig;

    /**
     * Creates an instance of AlertProperties class.
     */
    public AlertProperties() {
    }

    /**
     * Get the essentials property: This object contains consistent fields across different monitor services.
     * 
     * @return the essentials value.
     */
    public Essentials essentials() {
        return this.essentials;
    }

    /**
     * Set the essentials property: This object contains consistent fields across different monitor services.
     * 
     * @param essentials the essentials value to set.
     * @return the AlertProperties object itself.
     */
    public AlertProperties withEssentials(Essentials essentials) {
        this.essentials = essentials;
        return this;
    }

    /**
     * Get the context property: Information specific to the monitor service that gives more contextual details about
     * the alert.
     * 
     * @return the context value.
     */
    public Object context() {
        return this.context;
    }

    /**
     * Get the egressConfig property: Config which would be used for displaying the data in portal.
     * 
     * @return the egressConfig value.
     */
    public Object egressConfig() {
        return this.egressConfig;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (essentials() != null) {
            essentials().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("essentials", this.essentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AlertProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AlertProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AlertProperties.
     */
    public static AlertProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AlertProperties deserializedAlertProperties = new AlertProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("essentials".equals(fieldName)) {
                    deserializedAlertProperties.essentials = Essentials.fromJson(reader);
                } else if ("context".equals(fieldName)) {
                    deserializedAlertProperties.context = reader.readUntyped();
                } else if ("egressConfig".equals(fieldName)) {
                    deserializedAlertProperties.egressConfig = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlertProperties;
        });
    }
}
