// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.alertsmanagement.fluent.TenantActivityLogAlertsClient;
import com.azure.resourcemanager.alertsmanagement.fluent.models.TenantActivityLogAlertResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.TenantActivityLogAlertResource;
import com.azure.resourcemanager.alertsmanagement.models.TenantActivityLogAlerts;
import com.azure.resourcemanager.alertsmanagement.models.TenantAlertRulePatchObject;

public final class TenantActivityLogAlertsImpl implements TenantActivityLogAlerts {
    private static final ClientLogger LOGGER = new ClientLogger(TenantActivityLogAlertsImpl.class);

    private final TenantActivityLogAlertsClient innerClient;

    private final com.azure.resourcemanager.alertsmanagement.AlertsManagementManager serviceManager;

    public TenantActivityLogAlertsImpl(TenantActivityLogAlertsClient innerClient,
        com.azure.resourcemanager.alertsmanagement.AlertsManagementManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<TenantActivityLogAlertResource> createOrUpdateWithResponse(String managementGroupName,
        String alertRuleName, TenantActivityLogAlertResourceInner tenantActivityLogAlertRule, Context context) {
        Response<TenantActivityLogAlertResourceInner> inner = this.serviceClient()
            .createOrUpdateWithResponse(managementGroupName, alertRuleName, tenantActivityLogAlertRule, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TenantActivityLogAlertResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TenantActivityLogAlertResource createOrUpdate(String managementGroupName, String alertRuleName,
        TenantActivityLogAlertResourceInner tenantActivityLogAlertRule) {
        TenantActivityLogAlertResourceInner inner
            = this.serviceClient().createOrUpdate(managementGroupName, alertRuleName, tenantActivityLogAlertRule);
        if (inner != null) {
            return new TenantActivityLogAlertResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TenantActivityLogAlertResource> getWithResponse(String managementGroupName, String alertRuleName,
        Context context) {
        Response<TenantActivityLogAlertResourceInner> inner
            = this.serviceClient().getWithResponse(managementGroupName, alertRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TenantActivityLogAlertResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TenantActivityLogAlertResource get(String managementGroupName, String alertRuleName) {
        TenantActivityLogAlertResourceInner inner = this.serviceClient().get(managementGroupName, alertRuleName);
        if (inner != null) {
            return new TenantActivityLogAlertResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String managementGroupName, String alertRuleName,
        Context context) {
        return this.serviceClient().deleteWithResponse(managementGroupName, alertRuleName, context);
    }

    public void deleteByResourceGroup(String managementGroupName, String alertRuleName) {
        this.serviceClient().delete(managementGroupName, alertRuleName);
    }

    public Response<TenantActivityLogAlertResource> updateWithResponse(String managementGroupName, String alertRuleName,
        TenantAlertRulePatchObject tenantActivityLogAlertRulePatch, Context context) {
        Response<TenantActivityLogAlertResourceInner> inner = this.serviceClient()
            .updateWithResponse(managementGroupName, alertRuleName, tenantActivityLogAlertRulePatch, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TenantActivityLogAlertResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TenantActivityLogAlertResource update(String managementGroupName, String alertRuleName,
        TenantAlertRulePatchObject tenantActivityLogAlertRulePatch) {
        TenantActivityLogAlertResourceInner inner
            = this.serviceClient().update(managementGroupName, alertRuleName, tenantActivityLogAlertRulePatch);
        if (inner != null) {
            return new TenantActivityLogAlertResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<TenantActivityLogAlertResource> listByTenant() {
        PagedIterable<TenantActivityLogAlertResourceInner> inner = this.serviceClient().listByTenant();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TenantActivityLogAlertResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TenantActivityLogAlertResource> listByTenant(Context context) {
        PagedIterable<TenantActivityLogAlertResourceInner> inner = this.serviceClient().listByTenant(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TenantActivityLogAlertResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TenantActivityLogAlertResource> listByManagementGroup(String managementGroupName) {
        PagedIterable<TenantActivityLogAlertResourceInner> inner
            = this.serviceClient().listByManagementGroup(managementGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TenantActivityLogAlertResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<TenantActivityLogAlertResource> listByManagementGroup(String managementGroupName,
        Context context) {
        PagedIterable<TenantActivityLogAlertResourceInner> inner
            = this.serviceClient().listByManagementGroup(managementGroupName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new TenantActivityLogAlertResourceImpl(inner1, this.manager()));
    }

    private TenantActivityLogAlertsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.alertsmanagement.AlertsManagementManager manager() {
        return this.serviceManager;
    }
}
