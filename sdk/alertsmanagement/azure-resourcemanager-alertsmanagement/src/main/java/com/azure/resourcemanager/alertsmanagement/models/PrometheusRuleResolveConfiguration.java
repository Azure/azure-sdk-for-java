// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the Prometheus alert rule configuration.
 */
@Fluent
public final class PrometheusRuleResolveConfiguration implements JsonSerializable<PrometheusRuleResolveConfiguration> {
    /*
     * the flag that indicates whether or not to auto resolve a fired alert.
     */
    private Boolean autoResolved;

    /*
     * the duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO
     * 8601 duration format. Should be between 1 and 15 minutes
     */
    private String timeToResolve;

    /**
     * Creates an instance of PrometheusRuleResolveConfiguration class.
     */
    public PrometheusRuleResolveConfiguration() {
    }

    /**
     * Get the autoResolved property: the flag that indicates whether or not to auto resolve a fired alert.
     * 
     * @return the autoResolved value.
     */
    public Boolean autoResolved() {
        return this.autoResolved;
    }

    /**
     * Set the autoResolved property: the flag that indicates whether or not to auto resolve a fired alert.
     * 
     * @param autoResolved the autoResolved value to set.
     * @return the PrometheusRuleResolveConfiguration object itself.
     */
    public PrometheusRuleResolveConfiguration withAutoResolved(Boolean autoResolved) {
        this.autoResolved = autoResolved;
        return this;
    }

    /**
     * Get the timeToResolve property: the duration a rule must evaluate as healthy before the fired alert is
     * automatically resolved represented in ISO 8601 duration format. Should be between 1 and 15 minutes.
     * 
     * @return the timeToResolve value.
     */
    public String timeToResolve() {
        return this.timeToResolve;
    }

    /**
     * Set the timeToResolve property: the duration a rule must evaluate as healthy before the fired alert is
     * automatically resolved represented in ISO 8601 duration format. Should be between 1 and 15 minutes.
     * 
     * @param timeToResolve the timeToResolve value to set.
     * @return the PrometheusRuleResolveConfiguration object itself.
     */
    public PrometheusRuleResolveConfiguration withTimeToResolve(String timeToResolve) {
        this.timeToResolve = timeToResolve;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("autoResolved", this.autoResolved);
        jsonWriter.writeStringField("timeToResolve", this.timeToResolve);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrometheusRuleResolveConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrometheusRuleResolveConfiguration if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrometheusRuleResolveConfiguration.
     */
    public static PrometheusRuleResolveConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrometheusRuleResolveConfiguration deserializedPrometheusRuleResolveConfiguration
                = new PrometheusRuleResolveConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("autoResolved".equals(fieldName)) {
                    deserializedPrometheusRuleResolveConfiguration.autoResolved
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("timeToResolve".equals(fieldName)) {
                    deserializedPrometheusRuleResolveConfiguration.timeToResolve = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrometheusRuleResolveConfiguration;
        });
    }
}
