// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * A pointer to an Azure Action Group.
 */
@Fluent
public final class ActionGroup implements JsonSerializable<ActionGroup> {
    /*
     * The resource ID of the Action Group. This cannot be null or empty.
     */
    private String actionGroupId;

    /*
     * the dictionary of custom properties to include with the post operation. These data are appended to the webhook
     * payload.
     */
    private Map<String, String> webhookProperties;

    /*
     * Predefined list of properties and configuration items for the action group.
     */
    private Map<String, String> actionProperties;

    /**
     * Creates an instance of ActionGroup class.
     */
    public ActionGroup() {
    }

    /**
     * Get the actionGroupId property: The resource ID of the Action Group. This cannot be null or empty.
     * 
     * @return the actionGroupId value.
     */
    public String actionGroupId() {
        return this.actionGroupId;
    }

    /**
     * Set the actionGroupId property: The resource ID of the Action Group. This cannot be null or empty.
     * 
     * @param actionGroupId the actionGroupId value to set.
     * @return the ActionGroup object itself.
     */
    public ActionGroup withActionGroupId(String actionGroupId) {
        this.actionGroupId = actionGroupId;
        return this;
    }

    /**
     * Get the webhookProperties property: the dictionary of custom properties to include with the post operation. These
     * data are appended to the webhook payload.
     * 
     * @return the webhookProperties value.
     */
    public Map<String, String> webhookProperties() {
        return this.webhookProperties;
    }

    /**
     * Set the webhookProperties property: the dictionary of custom properties to include with the post operation. These
     * data are appended to the webhook payload.
     * 
     * @param webhookProperties the webhookProperties value to set.
     * @return the ActionGroup object itself.
     */
    public ActionGroup withWebhookProperties(Map<String, String> webhookProperties) {
        this.webhookProperties = webhookProperties;
        return this;
    }

    /**
     * Get the actionProperties property: Predefined list of properties and configuration items for the action group.
     * 
     * @return the actionProperties value.
     */
    public Map<String, String> actionProperties() {
        return this.actionProperties;
    }

    /**
     * Set the actionProperties property: Predefined list of properties and configuration items for the action group.
     * 
     * @param actionProperties the actionProperties value to set.
     * @return the ActionGroup object itself.
     */
    public ActionGroup withActionProperties(Map<String, String> actionProperties) {
        this.actionProperties = actionProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (actionGroupId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property actionGroupId in model ActionGroup"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ActionGroup.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("actionGroupId", this.actionGroupId);
        jsonWriter.writeMapField("webhookProperties", this.webhookProperties,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("actionProperties", this.actionProperties,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ActionGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ActionGroup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ActionGroup.
     */
    public static ActionGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ActionGroup deserializedActionGroup = new ActionGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("actionGroupId".equals(fieldName)) {
                    deserializedActionGroup.actionGroupId = reader.getString();
                } else if ("webhookProperties".equals(fieldName)) {
                    Map<String, String> webhookProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedActionGroup.webhookProperties = webhookProperties;
                } else if ("actionProperties".equals(fieldName)) {
                    Map<String, String> actionProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedActionGroup.actionProperties = actionProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedActionGroup;
        });
    }
}
