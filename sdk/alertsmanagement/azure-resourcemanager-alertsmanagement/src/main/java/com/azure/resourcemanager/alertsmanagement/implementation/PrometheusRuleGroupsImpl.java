// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.alertsmanagement.fluent.PrometheusRuleGroupsClient;
import com.azure.resourcemanager.alertsmanagement.fluent.models.PrometheusRuleGroupResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroupResource;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroups;

public final class PrometheusRuleGroupsImpl implements PrometheusRuleGroups {
    private static final ClientLogger LOGGER = new ClientLogger(PrometheusRuleGroupsImpl.class);

    private final PrometheusRuleGroupsClient innerClient;

    private final com.azure.resourcemanager.alertsmanagement.AlertsManagementManager serviceManager;

    public PrometheusRuleGroupsImpl(PrometheusRuleGroupsClient innerClient,
        com.azure.resourcemanager.alertsmanagement.AlertsManagementManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PrometheusRuleGroupResource> list() {
        PagedIterable<PrometheusRuleGroupResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new PrometheusRuleGroupResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<PrometheusRuleGroupResource> list(Context context) {
        PagedIterable<PrometheusRuleGroupResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new PrometheusRuleGroupResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<PrometheusRuleGroupResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<PrometheusRuleGroupResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new PrometheusRuleGroupResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<PrometheusRuleGroupResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<PrometheusRuleGroupResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new PrometheusRuleGroupResourceImpl(inner1, this.manager()));
    }

    public Response<PrometheusRuleGroupResource> getByResourceGroupWithResponse(String resourceGroupName,
        String ruleGroupName, Context context) {
        Response<PrometheusRuleGroupResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, ruleGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrometheusRuleGroupResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrometheusRuleGroupResource getByResourceGroup(String resourceGroupName, String ruleGroupName) {
        PrometheusRuleGroupResourceInner inner
            = this.serviceClient().getByResourceGroup(resourceGroupName, ruleGroupName);
        if (inner != null) {
            return new PrometheusRuleGroupResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String ruleGroupName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, ruleGroupName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String ruleGroupName) {
        this.serviceClient().delete(resourceGroupName, ruleGroupName);
    }

    public PrometheusRuleGroupResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ruleGroupName = ResourceManagerUtils.getValueFromIdByName(id, "prometheusRuleGroups");
        if (ruleGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'prometheusRuleGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, ruleGroupName, Context.NONE).getValue();
    }

    public Response<PrometheusRuleGroupResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ruleGroupName = ResourceManagerUtils.getValueFromIdByName(id, "prometheusRuleGroups");
        if (ruleGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'prometheusRuleGroups'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, ruleGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ruleGroupName = ResourceManagerUtils.getValueFromIdByName(id, "prometheusRuleGroups");
        if (ruleGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'prometheusRuleGroups'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, ruleGroupName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String ruleGroupName = ResourceManagerUtils.getValueFromIdByName(id, "prometheusRuleGroups");
        if (ruleGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'prometheusRuleGroups'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, ruleGroupName, context);
    }

    private PrometheusRuleGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.alertsmanagement.AlertsManagementManager manager() {
        return this.serviceManager;
    }

    public PrometheusRuleGroupResourceImpl define(String name) {
        return new PrometheusRuleGroupResourceImpl(name, this.manager());
    }
}
