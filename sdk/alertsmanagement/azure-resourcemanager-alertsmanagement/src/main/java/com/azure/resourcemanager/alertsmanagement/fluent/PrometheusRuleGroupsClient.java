// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.alertsmanagement.fluent.models.PrometheusRuleGroupResourceInner;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroupResourcePatch;

/**
 * An instance of this class provides access to all the operations defined in PrometheusRuleGroupsClient.
 */
public interface PrometheusRuleGroupsClient {
    /**
     * Retrieve Prometheus rule group definitions in a subscription.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a collection of alert rule resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrometheusRuleGroupResourceInner> list();

    /**
     * Retrieve Prometheus rule group definitions in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a collection of alert rule resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrometheusRuleGroupResourceInner> list(Context context);

    /**
     * Retrieve Prometheus rule group definitions in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a collection of alert rule resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrometheusRuleGroupResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * Retrieve Prometheus rule group definitions in a resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a collection of alert rule resources as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<PrometheusRuleGroupResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Retrieve a Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Prometheus rule group resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PrometheusRuleGroupResourceInner> getByResourceGroupWithResponse(String resourceGroupName,
        String ruleGroupName, Context context);

    /**
     * Retrieve a Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Prometheus rule group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrometheusRuleGroupResourceInner getByResourceGroup(String resourceGroupName, String ruleGroupName);

    /**
     * Create or update a Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @param parameters The parameters of the rule group to create or update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Prometheus rule group resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PrometheusRuleGroupResourceInner> createOrUpdateWithResponse(String resourceGroupName,
        String ruleGroupName, PrometheusRuleGroupResourceInner parameters, Context context);

    /**
     * Create or update a Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @param parameters The parameters of the rule group to create or update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Prometheus rule group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrometheusRuleGroupResourceInner createOrUpdate(String resourceGroupName, String ruleGroupName,
        PrometheusRuleGroupResourceInner parameters);

    /**
     * Update an Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @param parameters The parameters of the rule group to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Prometheus rule group resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<PrometheusRuleGroupResourceInner> updateWithResponse(String resourceGroupName, String ruleGroupName,
        PrometheusRuleGroupResourcePatch parameters, Context context);

    /**
     * Update an Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @param parameters The parameters of the rule group to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Prometheus rule group resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    PrometheusRuleGroupResourceInner update(String resourceGroupName, String ruleGroupName,
        PrometheusRuleGroupResourcePatch parameters);

    /**
     * Delete a Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String ruleGroupName, Context context);

    /**
     * Delete a Prometheus rule group definition.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param ruleGroupName The name of the rule group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String ruleGroupName);
}
