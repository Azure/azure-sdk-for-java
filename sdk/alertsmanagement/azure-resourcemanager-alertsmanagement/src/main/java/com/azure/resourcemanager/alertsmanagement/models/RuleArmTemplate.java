// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A complete ARM template to deploy the alert rules.
 */
@Fluent
public final class RuleArmTemplate implements JsonSerializable<RuleArmTemplate> {
    /*
     * JSON schema reference
     */
    private String schema;

    /*
     * A 4 number format for the version number of this template file. For example, 1.0.0.0
     */
    private String contentVersion;

    /*
     * Variable definitions
     */
    private Object variables;

    /*
     * Input parameter definitions
     */
    private Object parameters;

    /*
     * Alert rule resource definitions
     */
    private List<Object> resources;

    /**
     * Creates an instance of RuleArmTemplate class.
     */
    public RuleArmTemplate() {
    }

    /**
     * Get the schema property: JSON schema reference.
     * 
     * @return the schema value.
     */
    public String schema() {
        return this.schema;
    }

    /**
     * Set the schema property: JSON schema reference.
     * 
     * @param schema the schema value to set.
     * @return the RuleArmTemplate object itself.
     */
    public RuleArmTemplate withSchema(String schema) {
        this.schema = schema;
        return this;
    }

    /**
     * Get the contentVersion property: A 4 number format for the version number of this template file. For example,
     * 1.0.0.0.
     * 
     * @return the contentVersion value.
     */
    public String contentVersion() {
        return this.contentVersion;
    }

    /**
     * Set the contentVersion property: A 4 number format for the version number of this template file. For example,
     * 1.0.0.0.
     * 
     * @param contentVersion the contentVersion value to set.
     * @return the RuleArmTemplate object itself.
     */
    public RuleArmTemplate withContentVersion(String contentVersion) {
        this.contentVersion = contentVersion;
        return this;
    }

    /**
     * Get the variables property: Variable definitions.
     * 
     * @return the variables value.
     */
    public Object variables() {
        return this.variables;
    }

    /**
     * Set the variables property: Variable definitions.
     * 
     * @param variables the variables value to set.
     * @return the RuleArmTemplate object itself.
     */
    public RuleArmTemplate withVariables(Object variables) {
        this.variables = variables;
        return this;
    }

    /**
     * Get the parameters property: Input parameter definitions.
     * 
     * @return the parameters value.
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Input parameter definitions.
     * 
     * @param parameters the parameters value to set.
     * @return the RuleArmTemplate object itself.
     */
    public RuleArmTemplate withParameters(Object parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the resources property: Alert rule resource definitions.
     * 
     * @return the resources value.
     */
    public List<Object> resources() {
        return this.resources;
    }

    /**
     * Set the resources property: Alert rule resource definitions.
     * 
     * @param resources the resources value to set.
     * @return the RuleArmTemplate object itself.
     */
    public RuleArmTemplate withResources(List<Object> resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (schema() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property schema in model RuleArmTemplate"));
        }
        if (contentVersion() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property contentVersion in model RuleArmTemplate"));
        }
        if (variables() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property variables in model RuleArmTemplate"));
        }
        if (parameters() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property parameters in model RuleArmTemplate"));
        }
        if (resources() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resources in model RuleArmTemplate"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RuleArmTemplate.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("$schema", this.schema);
        jsonWriter.writeStringField("contentVersion", this.contentVersion);
        jsonWriter.writeUntypedField("variables", this.variables);
        jsonWriter.writeUntypedField("parameters", this.parameters);
        jsonWriter.writeArrayField("resources", this.resources, (writer, element) -> writer.writeUntyped(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RuleArmTemplate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RuleArmTemplate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RuleArmTemplate.
     */
    public static RuleArmTemplate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RuleArmTemplate deserializedRuleArmTemplate = new RuleArmTemplate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("$schema".equals(fieldName)) {
                    deserializedRuleArmTemplate.schema = reader.getString();
                } else if ("contentVersion".equals(fieldName)) {
                    deserializedRuleArmTemplate.contentVersion = reader.getString();
                } else if ("variables".equals(fieldName)) {
                    deserializedRuleArmTemplate.variables = reader.readUntyped();
                } else if ("parameters".equals(fieldName)) {
                    deserializedRuleArmTemplate.parameters = reader.readUntyped();
                } else if ("resources".equals(fieldName)) {
                    List<Object> resources = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedRuleArmTemplate.resources = resources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRuleArmTemplate;
        });
    }
}
