// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Recurrence object.
 */
@Fluent
public class Recurrence implements JsonSerializable<Recurrence> {
    /*
     * Specifies when the recurrence should be applied.
     */
    private RecurrenceType recurrenceType = RecurrenceType.fromString("Recurrence");

    /*
     * Start time for recurrence.
     */
    private String startTime;

    /*
     * End time for recurrence.
     */
    private String endTime;

    /**
     * Creates an instance of Recurrence class.
     */
    public Recurrence() {
    }

    /**
     * Get the recurrenceType property: Specifies when the recurrence should be applied.
     * 
     * @return the recurrenceType value.
     */
    public RecurrenceType recurrenceType() {
        return this.recurrenceType;
    }

    /**
     * Get the startTime property: Start time for recurrence.
     * 
     * @return the startTime value.
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Start time for recurrence.
     * 
     * @param startTime the startTime value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withStartTime(String startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: End time for recurrence.
     * 
     * @return the endTime value.
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: End time for recurrence.
     * 
     * @param endTime the endTime value to set.
     * @return the Recurrence object itself.
     */
    public Recurrence withEndTime(String endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("recurrenceType",
            this.recurrenceType == null ? null : this.recurrenceType.toString());
        jsonWriter.writeStringField("startTime", this.startTime);
        jsonWriter.writeStringField("endTime", this.endTime);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Recurrence from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Recurrence if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Recurrence.
     */
    public static Recurrence fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("recurrenceType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("Daily".equals(discriminatorValue)) {
                    return DailyRecurrence.fromJson(readerToUse.reset());
                } else if ("Weekly".equals(discriminatorValue)) {
                    return WeeklyRecurrence.fromJson(readerToUse.reset());
                } else if ("Monthly".equals(discriminatorValue)) {
                    return MonthlyRecurrence.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static Recurrence fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Recurrence deserializedRecurrence = new Recurrence();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recurrenceType".equals(fieldName)) {
                    deserializedRecurrence.recurrenceType = RecurrenceType.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedRecurrence.startTime = reader.getString();
                } else if ("endTime".equals(fieldName)) {
                    deserializedRecurrence.endTime = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecurrence;
        });
    }
}
