// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Scheduling configuration for a given alert processing rule.
 */
@Fluent
public final class Schedule implements JsonSerializable<Schedule> {
    /*
     * Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
     */
    private String effectiveFrom;

    /*
     * Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
     */
    private String effectiveUntil;

    /*
     * Scheduling time zone.
     */
    private String timeZone;

    /*
     * List of recurrences.
     */
    private List<Recurrence> recurrences;

    /**
     * Creates an instance of Schedule class.
     */
    public Schedule() {
    }

    /**
     * Get the effectiveFrom property: Scheduling effective from time. Date-Time in ISO-8601 format without timezone
     * suffix.
     * 
     * @return the effectiveFrom value.
     */
    public String effectiveFrom() {
        return this.effectiveFrom;
    }

    /**
     * Set the effectiveFrom property: Scheduling effective from time. Date-Time in ISO-8601 format without timezone
     * suffix.
     * 
     * @param effectiveFrom the effectiveFrom value to set.
     * @return the Schedule object itself.
     */
    public Schedule withEffectiveFrom(String effectiveFrom) {
        this.effectiveFrom = effectiveFrom;
        return this;
    }

    /**
     * Get the effectiveUntil property: Scheduling effective until time. Date-Time in ISO-8601 format without timezone
     * suffix.
     * 
     * @return the effectiveUntil value.
     */
    public String effectiveUntil() {
        return this.effectiveUntil;
    }

    /**
     * Set the effectiveUntil property: Scheduling effective until time. Date-Time in ISO-8601 format without timezone
     * suffix.
     * 
     * @param effectiveUntil the effectiveUntil value to set.
     * @return the Schedule object itself.
     */
    public Schedule withEffectiveUntil(String effectiveUntil) {
        this.effectiveUntil = effectiveUntil;
        return this;
    }

    /**
     * Get the timeZone property: Scheduling time zone.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: Scheduling time zone.
     * 
     * @param timeZone the timeZone value to set.
     * @return the Schedule object itself.
     */
    public Schedule withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the recurrences property: List of recurrences.
     * 
     * @return the recurrences value.
     */
    public List<Recurrence> recurrences() {
        return this.recurrences;
    }

    /**
     * Set the recurrences property: List of recurrences.
     * 
     * @param recurrences the recurrences value to set.
     * @return the Schedule object itself.
     */
    public Schedule withRecurrences(List<Recurrence> recurrences) {
        this.recurrences = recurrences;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recurrences() != null) {
            recurrences().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("effectiveFrom", this.effectiveFrom);
        jsonWriter.writeStringField("effectiveUntil", this.effectiveUntil);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeArrayField("recurrences", this.recurrences, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Schedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Schedule if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Schedule.
     */
    public static Schedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Schedule deserializedSchedule = new Schedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("effectiveFrom".equals(fieldName)) {
                    deserializedSchedule.effectiveFrom = reader.getString();
                } else if ("effectiveUntil".equals(fieldName)) {
                    deserializedSchedule.effectiveUntil = reader.getString();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedSchedule.timeZone = reader.getString();
                } else if ("recurrences".equals(fieldName)) {
                    List<Recurrence> recurrences = reader.readArray(reader1 -> Recurrence.fromJson(reader1));
                    deserializedSchedule.recurrences = recurrences;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedule;
        });
    }
}
