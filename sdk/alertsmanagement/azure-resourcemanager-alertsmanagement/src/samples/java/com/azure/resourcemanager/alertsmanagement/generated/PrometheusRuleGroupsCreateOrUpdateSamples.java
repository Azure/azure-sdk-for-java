// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.alertsmanagement.generated;

import com.azure.resourcemanager.alertsmanagement.models.PrometheusRule;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleGroupAction;
import com.azure.resourcemanager.alertsmanagement.models.PrometheusRuleResolveConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for PrometheusRuleGroups CreateOrUpdate.
 */
public final class PrometheusRuleGroupsCreateOrUpdateSamples {
    /*
     * x-ms-original-file:
     * specification/alertsmanagement/resource-manager/Microsoft.AlertsManagement/preview/2021-07-22-preview/examples/
     * createOrUpdatePrometheusRuleGroup.json
     */
    /**
     * Sample code: CreatePrometheusRuleGroup.
     * 
     * @param manager Entry point to AlertsManagementManager.
     */
    public static void
        createPrometheusRuleGroup(com.azure.resourcemanager.alertsmanagement.AlertsManagementManager manager) {
        manager.prometheusRuleGroups()
            .define("myPrometheusRuleGroup")
            .withRegion("East US")
            .withExistingResourceGroup("promResourceGroup")
            .withScopes(Arrays.asList(
                "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/promResourceGroup/providers/microsoft.monitor/accounts/myMonitoringAccount"))
            .withRules(Arrays.asList(new PrometheusRule().withRecord("job_type:billing_jobs_duration_seconds:99p5m")
                .withExpression(
                    "histogram_quantile(0.99, sum(rate(jobs_duration_seconds_bucket{service=\"billing-processing\"}[5m])) by (job_type))")
                .withLabels(mapOf("team", "prod")),
                new PrometheusRule().withAlert("Billing_Processing_Very_Slow")
                    .withExpression("job_type:billing_jobs_duration_seconds:99p5m > 30")
                    .withSeverity(2)
                    .withForProperty("PT5M")
                    .withLabels(mapOf("team", "prod"))
                    .withAnnotations(mapOf("annotationName1", "annotationValue1"))
                    .withActions(Arrays.asList(new PrometheusRuleGroupAction().withActionGroupId(
                        "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourcegroups/promResourceGroup/providers/microsoft.insights/actiongroups/group2")
                        .withActionProperties(mapOf("key11", "fakeTokenPlaceholder", "key12", "fakeTokenPlaceholder"))))
                    .withResolveConfiguration(
                        new PrometheusRuleResolveConfiguration().withAutoResolved(true).withTimeToResolve("PT10M"))))
            .withDescription("This is the description of the first rule group")
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
