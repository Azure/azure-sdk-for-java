// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Calculate exchange request properties.
 */
@Fluent
public final class CalculateExchangeRequestProperties implements JsonSerializable<CalculateExchangeRequestProperties> {
    /*
     * List of reservations that are being purchased in this exchange.
     */
    private List<PurchaseRequest> reservationsToPurchase;

    /*
     * List of savings plans that are being purchased in this exchange.
     */
    private List<SavingsPlanPurchaseRequest> savingsPlansToPurchase;

    /*
     * List of reservations that are being returned in this exchange.
     */
    private List<ReservationToReturn> reservationsToExchange;

    /**
     * Creates an instance of CalculateExchangeRequestProperties class.
     */
    public CalculateExchangeRequestProperties() {
    }

    /**
     * Get the reservationsToPurchase property: List of reservations that are being purchased in this exchange.
     * 
     * @return the reservationsToPurchase value.
     */
    public List<PurchaseRequest> reservationsToPurchase() {
        return this.reservationsToPurchase;
    }

    /**
     * Set the reservationsToPurchase property: List of reservations that are being purchased in this exchange.
     * 
     * @param reservationsToPurchase the reservationsToPurchase value to set.
     * @return the CalculateExchangeRequestProperties object itself.
     */
    public CalculateExchangeRequestProperties withReservationsToPurchase(List<PurchaseRequest> reservationsToPurchase) {
        this.reservationsToPurchase = reservationsToPurchase;
        return this;
    }

    /**
     * Get the savingsPlansToPurchase property: List of savings plans that are being purchased in this exchange.
     * 
     * @return the savingsPlansToPurchase value.
     */
    public List<SavingsPlanPurchaseRequest> savingsPlansToPurchase() {
        return this.savingsPlansToPurchase;
    }

    /**
     * Set the savingsPlansToPurchase property: List of savings plans that are being purchased in this exchange.
     * 
     * @param savingsPlansToPurchase the savingsPlansToPurchase value to set.
     * @return the CalculateExchangeRequestProperties object itself.
     */
    public CalculateExchangeRequestProperties
        withSavingsPlansToPurchase(List<SavingsPlanPurchaseRequest> savingsPlansToPurchase) {
        this.savingsPlansToPurchase = savingsPlansToPurchase;
        return this;
    }

    /**
     * Get the reservationsToExchange property: List of reservations that are being returned in this exchange.
     * 
     * @return the reservationsToExchange value.
     */
    public List<ReservationToReturn> reservationsToExchange() {
        return this.reservationsToExchange;
    }

    /**
     * Set the reservationsToExchange property: List of reservations that are being returned in this exchange.
     * 
     * @param reservationsToExchange the reservationsToExchange value to set.
     * @return the CalculateExchangeRequestProperties object itself.
     */
    public CalculateExchangeRequestProperties
        withReservationsToExchange(List<ReservationToReturn> reservationsToExchange) {
        this.reservationsToExchange = reservationsToExchange;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (reservationsToPurchase() != null) {
            reservationsToPurchase().forEach(e -> e.validate());
        }
        if (savingsPlansToPurchase() != null) {
            savingsPlansToPurchase().forEach(e -> e.validate());
        }
        if (reservationsToExchange() != null) {
            reservationsToExchange().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("reservationsToPurchase", this.reservationsToPurchase,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("savingsPlansToPurchase", this.savingsPlansToPurchase,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("reservationsToExchange", this.reservationsToExchange,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalculateExchangeRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalculateExchangeRequestProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CalculateExchangeRequestProperties.
     */
    public static CalculateExchangeRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CalculateExchangeRequestProperties deserializedCalculateExchangeRequestProperties
                = new CalculateExchangeRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservationsToPurchase".equals(fieldName)) {
                    List<PurchaseRequest> reservationsToPurchase
                        = reader.readArray(reader1 -> PurchaseRequest.fromJson(reader1));
                    deserializedCalculateExchangeRequestProperties.reservationsToPurchase = reservationsToPurchase;
                } else if ("savingsPlansToPurchase".equals(fieldName)) {
                    List<SavingsPlanPurchaseRequest> savingsPlansToPurchase
                        = reader.readArray(reader1 -> SavingsPlanPurchaseRequest.fromJson(reader1));
                    deserializedCalculateExchangeRequestProperties.savingsPlansToPurchase = savingsPlansToPurchase;
                } else if ("reservationsToExchange".equals(fieldName)) {
                    List<ReservationToReturn> reservationsToExchange
                        = reader.readArray(reader1 -> ReservationToReturn.fromJson(reader1));
                    deserializedCalculateExchangeRequestProperties.reservationsToExchange = reservationsToExchange;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCalculateExchangeRequestProperties;
        });
    }
}
