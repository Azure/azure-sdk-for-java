// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ResourceProviders. */
public interface ResourceProviders {
    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the regions and skus that are available for RI purchase for the specified Azure subscription as paginated
     *     response with {@link PagedIterable}.
     */
    PagedIterable<Catalog> list(String subscriptionId);

    /**
     * Get the regions and skus that are available for RI purchase for the specified Azure subscription.
     *
     * @param subscriptionId Id of the subscription.
     * @param reservedResourceType The type of the resource for which the skus should be provided.
     * @param location Filters the skus based on the location specified in this parameter. This can be an Azure region
     *     or global.
     * @param publisherId Publisher id used to get the third party products.
     * @param offerId Offer id used to get the third party products.
     * @param planId Plan id used to get the third party products.
     * @param filter May be used to filter by Catalog properties. The filter supports 'eq', 'or', and 'and'.
     * @param skip The number of reservations to skip from the list before returning results.
     * @param take To number of reservations to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the regions and skus that are available for RI purchase for the specified Azure subscription as paginated
     *     response with {@link PagedIterable}.
     */
    PagedIterable<Catalog> list(
        String subscriptionId,
        String reservedResourceType,
        String location,
        String publisherId,
        String offerId,
        String planId,
        String filter,
        Float skip,
        Float take,
        Context context);

    /**
     * Get list of applicable `Reservation`s.
     *
     * <p>Get applicable `Reservation`s that are applied to this subscription or a resource group under this
     * subscription.
     *
     * @param subscriptionId Id of the subscription.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return applicable `Reservation`s that are applied to this subscription or a resource group under this
     *     subscription along with {@link Response}.
     */
    Response<AppliedReservations> getAppliedReservationListWithResponse(String subscriptionId, Context context);

    /**
     * Get list of applicable `Reservation`s.
     *
     * <p>Get applicable `Reservation`s that are applied to this subscription or a resource group under this
     * subscription.
     *
     * @param subscriptionId Id of the subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return applicable `Reservation`s that are applied to this subscription or a resource group under this
     *     subscription.
     */
    AppliedReservations getAppliedReservationList(String subscriptionId);
}
