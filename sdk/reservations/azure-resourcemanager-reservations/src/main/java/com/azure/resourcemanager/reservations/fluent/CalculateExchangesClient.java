// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.reservations.fluent.models.CalculateExchangeOperationResultResponseInner;
import com.azure.resourcemanager.reservations.models.CalculateExchangeRequest;

/** An instance of this class provides access to all the operations defined in CalculateExchangesClient. */
public interface CalculateExchangesClient {
    /**
     * Calculates the refund amounts and price of the new purchases.
     *
     * <p>Calculates price for exchanging `Reservations` if there are no policy errors.
     *
     * @param body Request containing purchases and refunds that need to be executed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of calculateExchange operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CalculateExchangeOperationResultResponseInner>, CalculateExchangeOperationResultResponseInner>
        beginPost(CalculateExchangeRequest body);

    /**
     * Calculates the refund amounts and price of the new purchases.
     *
     * <p>Calculates price for exchanging `Reservations` if there are no policy errors.
     *
     * @param body Request containing purchases and refunds that need to be executed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of calculateExchange operation result.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<CalculateExchangeOperationResultResponseInner>, CalculateExchangeOperationResultResponseInner>
        beginPost(CalculateExchangeRequest body, Context context);

    /**
     * Calculates the refund amounts and price of the new purchases.
     *
     * <p>Calculates price for exchanging `Reservations` if there are no policy errors.
     *
     * @param body Request containing purchases and refunds that need to be executed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateExchange operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CalculateExchangeOperationResultResponseInner post(CalculateExchangeRequest body);

    /**
     * Calculates the refund amounts and price of the new purchases.
     *
     * <p>Calculates price for exchanging `Reservations` if there are no policy errors.
     *
     * @param body Request containing purchases and refunds that need to be executed.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return calculateExchange operation result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CalculateExchangeOperationResultResponseInner post(CalculateExchangeRequest body, Context context);
}
