// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.reservations.models.AppliedReservationList;
import java.io.IOException;

/**
 * Properties for applied reservations returned.
 */
@Fluent
public final class AppliedReservationsProperties implements JsonSerializable<AppliedReservationsProperties> {
    /*
     * Paginated list of applied reservations
     */
    private AppliedReservationList reservationOrderIds;

    /**
     * Creates an instance of AppliedReservationsProperties class.
     */
    public AppliedReservationsProperties() {
    }

    /**
     * Get the reservationOrderIds property: Paginated list of applied reservations.
     * 
     * @return the reservationOrderIds value.
     */
    public AppliedReservationList reservationOrderIds() {
        return this.reservationOrderIds;
    }

    /**
     * Set the reservationOrderIds property: Paginated list of applied reservations.
     * 
     * @param reservationOrderIds the reservationOrderIds value to set.
     * @return the AppliedReservationsProperties object itself.
     */
    public AppliedReservationsProperties withReservationOrderIds(AppliedReservationList reservationOrderIds) {
        this.reservationOrderIds = reservationOrderIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (reservationOrderIds() != null) {
            reservationOrderIds().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("reservationOrderIds", this.reservationOrderIds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppliedReservationsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppliedReservationsProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AppliedReservationsProperties.
     */
    public static AppliedReservationsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppliedReservationsProperties deserializedAppliedReservationsProperties
                = new AppliedReservationsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservationOrderIds".equals(fieldName)) {
                    deserializedAppliedReservationsProperties.reservationOrderIds
                        = AppliedReservationList.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppliedReservationsProperties;
        });
    }
}
