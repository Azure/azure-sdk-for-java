// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.reservations.fluent.models.ReservationOrderResponseInner;
import com.azure.resourcemanager.reservations.models.RefundRequest;

/** An instance of this class provides access to all the operations defined in ReturnsClient. */
public interface ReturnsClient {
    /**
     * Return a reservation.
     *
     * <p>Return a reservation and get refund information.
     *
     * @param reservationOrderId Order Id of the reservation.
     * @param body Information needed for returning reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of details of a reservation order being returned.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReservationOrderResponseInner>, ReservationOrderResponseInner> beginPost(
        String reservationOrderId, RefundRequest body);

    /**
     * Return a reservation.
     *
     * <p>Return a reservation and get refund information.
     *
     * @param reservationOrderId Order Id of the reservation.
     * @param body Information needed for returning reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of details of a reservation order being returned.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReservationOrderResponseInner>, ReservationOrderResponseInner> beginPost(
        String reservationOrderId, RefundRequest body, Context context);

    /**
     * Return a reservation.
     *
     * <p>Return a reservation and get refund information.
     *
     * @param reservationOrderId Order Id of the reservation.
     * @param body Information needed for returning reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a reservation order being returned.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationOrderResponseInner post(String reservationOrderId, RefundRequest body);

    /**
     * Return a reservation.
     *
     * <p>Return a reservation and get refund information.
     *
     * @param reservationOrderId Order Id of the reservation.
     * @param body Information needed for returning reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of a reservation order being returned.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationOrderResponseInner post(String reservationOrderId, RefundRequest body, Context context);
}
