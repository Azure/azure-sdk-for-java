// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The refund properties of reservation.
 */
@Fluent
public final class RefundResponseProperties implements JsonSerializable<RefundResponseProperties> {
    /*
     * Refund session identifier
     */
    private String sessionId;

    /*
     * Quantity to be returned
     */
    private Integer quantity;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price billingRefundAmount;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price pricingRefundAmount;

    /*
     * Refund policy result
     */
    private RefundPolicyResult policyResult;

    /*
     * billing information
     */
    private RefundBillingInformation billingInformation;

    /**
     * Creates an instance of RefundResponseProperties class.
     */
    public RefundResponseProperties() {
    }

    /**
     * Get the sessionId property: Refund session identifier.
     * 
     * @return the sessionId value.
     */
    public String sessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: Refund session identifier.
     * 
     * @param sessionId the sessionId value to set.
     * @return the RefundResponseProperties object itself.
     */
    public RefundResponseProperties withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the quantity property: Quantity to be returned.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: Quantity to be returned.
     * 
     * @param quantity the quantity value to set.
     * @return the RefundResponseProperties object itself.
     */
    public RefundResponseProperties withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get the billingRefundAmount property: Pricing information containing the amount and the currency code.
     * 
     * @return the billingRefundAmount value.
     */
    public Price billingRefundAmount() {
        return this.billingRefundAmount;
    }

    /**
     * Set the billingRefundAmount property: Pricing information containing the amount and the currency code.
     * 
     * @param billingRefundAmount the billingRefundAmount value to set.
     * @return the RefundResponseProperties object itself.
     */
    public RefundResponseProperties withBillingRefundAmount(Price billingRefundAmount) {
        this.billingRefundAmount = billingRefundAmount;
        return this;
    }

    /**
     * Get the pricingRefundAmount property: Pricing information containing the amount and the currency code.
     * 
     * @return the pricingRefundAmount value.
     */
    public Price pricingRefundAmount() {
        return this.pricingRefundAmount;
    }

    /**
     * Set the pricingRefundAmount property: Pricing information containing the amount and the currency code.
     * 
     * @param pricingRefundAmount the pricingRefundAmount value to set.
     * @return the RefundResponseProperties object itself.
     */
    public RefundResponseProperties withPricingRefundAmount(Price pricingRefundAmount) {
        this.pricingRefundAmount = pricingRefundAmount;
        return this;
    }

    /**
     * Get the policyResult property: Refund policy result.
     * 
     * @return the policyResult value.
     */
    public RefundPolicyResult policyResult() {
        return this.policyResult;
    }

    /**
     * Set the policyResult property: Refund policy result.
     * 
     * @param policyResult the policyResult value to set.
     * @return the RefundResponseProperties object itself.
     */
    public RefundResponseProperties withPolicyResult(RefundPolicyResult policyResult) {
        this.policyResult = policyResult;
        return this;
    }

    /**
     * Get the billingInformation property: billing information.
     * 
     * @return the billingInformation value.
     */
    public RefundBillingInformation billingInformation() {
        return this.billingInformation;
    }

    /**
     * Set the billingInformation property: billing information.
     * 
     * @param billingInformation the billingInformation value to set.
     * @return the RefundResponseProperties object itself.
     */
    public RefundResponseProperties withBillingInformation(RefundBillingInformation billingInformation) {
        this.billingInformation = billingInformation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (billingRefundAmount() != null) {
            billingRefundAmount().validate();
        }
        if (pricingRefundAmount() != null) {
            pricingRefundAmount().validate();
        }
        if (policyResult() != null) {
            policyResult().validate();
        }
        if (billingInformation() != null) {
            billingInformation().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeNumberField("quantity", this.quantity);
        jsonWriter.writeJsonField("billingRefundAmount", this.billingRefundAmount);
        jsonWriter.writeJsonField("pricingRefundAmount", this.pricingRefundAmount);
        jsonWriter.writeJsonField("policyResult", this.policyResult);
        jsonWriter.writeJsonField("billingInformation", this.billingInformation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefundResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefundResponseProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RefundResponseProperties.
     */
    public static RefundResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RefundResponseProperties deserializedRefundResponseProperties = new RefundResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sessionId".equals(fieldName)) {
                    deserializedRefundResponseProperties.sessionId = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedRefundResponseProperties.quantity = reader.getNullable(JsonReader::getInt);
                } else if ("billingRefundAmount".equals(fieldName)) {
                    deserializedRefundResponseProperties.billingRefundAmount = Price.fromJson(reader);
                } else if ("pricingRefundAmount".equals(fieldName)) {
                    deserializedRefundResponseProperties.pricingRefundAmount = Price.fromJson(reader);
                } else if ("policyResult".equals(fieldName)) {
                    deserializedRefundResponseProperties.policyResult = RefundPolicyResult.fromJson(reader);
                } else if ("billingInformation".equals(fieldName)) {
                    deserializedRefundResponseProperties.billingInformation = RefundBillingInformation.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefundResponseProperties;
        });
    }
}
