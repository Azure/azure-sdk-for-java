// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Restriction of a sku.
 */
@Fluent
public final class SkuRestriction implements JsonSerializable<SkuRestriction> {
    /*
     * The type of restrictions.
     */
    private String type;

    /*
     * The value of restrictions. If the restriction type is set to location. This would be different locations where
     * the sku is restricted.
     */
    private List<String> values;

    /*
     * The reason for restriction.
     */
    private String reasonCode;

    /**
     * Creates an instance of SkuRestriction class.
     */
    public SkuRestriction() {
    }

    /**
     * Get the type property: The type of restrictions.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of restrictions.
     * 
     * @param type the type value to set.
     * @return the SkuRestriction object itself.
     */
    public SkuRestriction withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the values property: The value of restrictions. If the restriction type is set to location. This would be
     * different locations where the sku is restricted.
     * 
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Set the values property: The value of restrictions. If the restriction type is set to location. This would be
     * different locations where the sku is restricted.
     * 
     * @param values the values value to set.
     * @return the SkuRestriction object itself.
     */
    public SkuRestriction withValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Get the reasonCode property: The reason for restriction.
     * 
     * @return the reasonCode value.
     */
    public String reasonCode() {
        return this.reasonCode;
    }

    /**
     * Set the reasonCode property: The reason for restriction.
     * 
     * @param reasonCode the reasonCode value to set.
     * @return the SkuRestriction object itself.
     */
    public SkuRestriction withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("reasonCode", this.reasonCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuRestriction from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuRestriction if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuRestriction.
     */
    public static SkuRestriction fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuRestriction deserializedSkuRestriction = new SkuRestriction();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedSkuRestriction.type = reader.getString();
                } else if ("values".equals(fieldName)) {
                    List<String> values = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuRestriction.values = values;
                } else if ("reasonCode".equals(fieldName)) {
                    deserializedSkuRestriction.reasonCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuRestriction;
        });
    }
}
