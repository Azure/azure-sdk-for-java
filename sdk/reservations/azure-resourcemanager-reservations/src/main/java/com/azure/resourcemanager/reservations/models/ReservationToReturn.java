// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Reservation to return.
 */
@Fluent
public final class ReservationToReturn implements JsonSerializable<ReservationToReturn> {
    /*
     * Fully qualified identifier of the reservation being returned
     */
    private String reservationId;

    /*
     * Quantity to be returned. Must be greater than zero.
     */
    private Integer quantity;

    /**
     * Creates an instance of ReservationToReturn class.
     */
    public ReservationToReturn() {
    }

    /**
     * Get the reservationId property: Fully qualified identifier of the reservation being returned.
     * 
     * @return the reservationId value.
     */
    public String reservationId() {
        return this.reservationId;
    }

    /**
     * Set the reservationId property: Fully qualified identifier of the reservation being returned.
     * 
     * @param reservationId the reservationId value to set.
     * @return the ReservationToReturn object itself.
     */
    public ReservationToReturn withReservationId(String reservationId) {
        this.reservationId = reservationId;
        return this;
    }

    /**
     * Get the quantity property: Quantity to be returned. Must be greater than zero.
     * 
     * @return the quantity value.
     */
    public Integer quantity() {
        return this.quantity;
    }

    /**
     * Set the quantity property: Quantity to be returned. Must be greater than zero.
     * 
     * @param quantity the quantity value to set.
     * @return the ReservationToReturn object itself.
     */
    public ReservationToReturn withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reservationId", this.reservationId);
        jsonWriter.writeNumberField("quantity", this.quantity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationToReturn from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationToReturn if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationToReturn.
     */
    public static ReservationToReturn fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationToReturn deserializedReservationToReturn = new ReservationToReturn();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservationId".equals(fieldName)) {
                    deserializedReservationToReturn.reservationId = reader.getString();
                } else if ("quantity".equals(fieldName)) {
                    deserializedReservationToReturn.quantity = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationToReturn;
        });
    }
}
