// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.reservations.models.AppliedReservationList;
import java.io.IOException;

/**
 * The response for applied reservations api.
 */
@Fluent
public final class AppliedReservationsInner implements JsonSerializable<AppliedReservationsInner> {
    /*
     * Identifier of the applied reservations
     */
    private String id;

    /*
     * Name of resource
     */
    private String name;

    /*
     * Type of resource. "Microsoft.Capacity/AppliedReservations"
     */
    private String type;

    /*
     * Properties for applied reservations returned
     */
    private AppliedReservationsProperties innerProperties;

    /**
     * Creates an instance of AppliedReservationsInner class.
     */
    public AppliedReservationsInner() {
    }

    /**
     * Get the id property: Identifier of the applied reservations.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: Type of resource. "Microsoft.Capacity/AppliedReservations".
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the innerProperties property: Properties for applied reservations returned.
     * 
     * @return the innerProperties value.
     */
    private AppliedReservationsProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the reservationOrderIds property: Paginated list of applied reservations.
     * 
     * @return the reservationOrderIds value.
     */
    public AppliedReservationList reservationOrderIds() {
        return this.innerProperties() == null ? null : this.innerProperties().reservationOrderIds();
    }

    /**
     * Set the reservationOrderIds property: Paginated list of applied reservations.
     * 
     * @param reservationOrderIds the reservationOrderIds value to set.
     * @return the AppliedReservationsInner object itself.
     */
    public AppliedReservationsInner withReservationOrderIds(AppliedReservationList reservationOrderIds) {
        if (this.innerProperties() == null) {
            this.innerProperties = new AppliedReservationsProperties();
        }
        this.innerProperties().withReservationOrderIds(reservationOrderIds);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AppliedReservationsInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AppliedReservationsInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AppliedReservationsInner.
     */
    public static AppliedReservationsInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AppliedReservationsInner deserializedAppliedReservationsInner = new AppliedReservationsInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedAppliedReservationsInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedAppliedReservationsInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAppliedReservationsInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedAppliedReservationsInner.innerProperties
                        = AppliedReservationsProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAppliedReservationsInner;
        });
    }
}
