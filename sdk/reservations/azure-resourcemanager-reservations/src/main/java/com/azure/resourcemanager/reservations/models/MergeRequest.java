// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.reservations.fluent.models.MergeProperties;
import java.io.IOException;
import java.util.List;

/**
 * The request for reservation merge.
 */
@Fluent
public final class MergeRequest implements JsonSerializable<MergeRequest> {
    /*
     * Properties for reservation merge
     */
    private MergeProperties innerProperties;

    /**
     * Creates an instance of MergeRequest class.
     */
    public MergeRequest() {
    }

    /**
     * Get the innerProperties property: Properties for reservation merge.
     * 
     * @return the innerProperties value.
     */
    private MergeProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the sources property: Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
     * 
     * @return the sources value.
     */
    public List<String> sources() {
        return this.innerProperties() == null ? null : this.innerProperties().sources();
    }

    /**
     * Set the sources property: Format of the resource id should be
     * /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
     * 
     * @param sources the sources value to set.
     * @return the MergeRequest object itself.
     */
    public MergeRequest withSources(List<String> sources) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MergeProperties();
        }
        this.innerProperties().withSources(sources);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MergeRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MergeRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MergeRequest.
     */
    public static MergeRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MergeRequest deserializedMergeRequest = new MergeRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedMergeRequest.innerProperties = MergeProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMergeRequest;
        });
    }
}
