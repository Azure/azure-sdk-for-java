// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Savings plan purchase details.
 */
@Fluent
public final class SavingsPlanToPurchaseCalculateExchange
    implements JsonSerializable<SavingsPlanToPurchaseCalculateExchange> {
    /*
     * Request body for savings plan purchase
     */
    private SavingsPlanPurchaseRequest properties;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price billingCurrencyTotal;

    /**
     * Creates an instance of SavingsPlanToPurchaseCalculateExchange class.
     */
    public SavingsPlanToPurchaseCalculateExchange() {
    }

    /**
     * Get the properties property: Request body for savings plan purchase.
     * 
     * @return the properties value.
     */
    public SavingsPlanPurchaseRequest properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Request body for savings plan purchase.
     * 
     * @param properties the properties value to set.
     * @return the SavingsPlanToPurchaseCalculateExchange object itself.
     */
    public SavingsPlanToPurchaseCalculateExchange withProperties(SavingsPlanPurchaseRequest properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the billingCurrencyTotal property: Pricing information containing the amount and the currency code.
     * 
     * @return the billingCurrencyTotal value.
     */
    public Price billingCurrencyTotal() {
        return this.billingCurrencyTotal;
    }

    /**
     * Set the billingCurrencyTotal property: Pricing information containing the amount and the currency code.
     * 
     * @param billingCurrencyTotal the billingCurrencyTotal value to set.
     * @return the SavingsPlanToPurchaseCalculateExchange object itself.
     */
    public SavingsPlanToPurchaseCalculateExchange withBillingCurrencyTotal(Price billingCurrencyTotal) {
        this.billingCurrencyTotal = billingCurrencyTotal;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
        if (billingCurrencyTotal() != null) {
            billingCurrencyTotal().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeJsonField("billingCurrencyTotal", this.billingCurrencyTotal);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SavingsPlanToPurchaseCalculateExchange from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SavingsPlanToPurchaseCalculateExchange if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SavingsPlanToPurchaseCalculateExchange.
     */
    public static SavingsPlanToPurchaseCalculateExchange fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SavingsPlanToPurchaseCalculateExchange deserializedSavingsPlanToPurchaseCalculateExchange
                = new SavingsPlanToPurchaseCalculateExchange();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedSavingsPlanToPurchaseCalculateExchange.properties
                        = SavingsPlanPurchaseRequest.fromJson(reader);
                } else if ("billingCurrencyTotal".equals(fieldName)) {
                    deserializedSavingsPlanToPurchaseCalculateExchange.billingCurrencyTotal = Price.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSavingsPlanToPurchaseCalculateExchange;
        });
    }
}
