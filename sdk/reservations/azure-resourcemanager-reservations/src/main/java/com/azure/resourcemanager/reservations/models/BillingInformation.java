// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * billing information.
 */
@Fluent
public final class BillingInformation implements JsonSerializable<BillingInformation> {
    /*
     * Pricing information containing the amount and the currency code
     */
    private Price billingCurrencyTotalPaidAmount;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price billingCurrencyProratedAmount;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price billingCurrencyRemainingCommitmentAmount;

    /**
     * Creates an instance of BillingInformation class.
     */
    public BillingInformation() {
    }

    /**
     * Get the billingCurrencyTotalPaidAmount property: Pricing information containing the amount and the currency code.
     * 
     * @return the billingCurrencyTotalPaidAmount value.
     */
    public Price billingCurrencyTotalPaidAmount() {
        return this.billingCurrencyTotalPaidAmount;
    }

    /**
     * Set the billingCurrencyTotalPaidAmount property: Pricing information containing the amount and the currency code.
     * 
     * @param billingCurrencyTotalPaidAmount the billingCurrencyTotalPaidAmount value to set.
     * @return the BillingInformation object itself.
     */
    public BillingInformation withBillingCurrencyTotalPaidAmount(Price billingCurrencyTotalPaidAmount) {
        this.billingCurrencyTotalPaidAmount = billingCurrencyTotalPaidAmount;
        return this;
    }

    /**
     * Get the billingCurrencyProratedAmount property: Pricing information containing the amount and the currency code.
     * 
     * @return the billingCurrencyProratedAmount value.
     */
    public Price billingCurrencyProratedAmount() {
        return this.billingCurrencyProratedAmount;
    }

    /**
     * Set the billingCurrencyProratedAmount property: Pricing information containing the amount and the currency code.
     * 
     * @param billingCurrencyProratedAmount the billingCurrencyProratedAmount value to set.
     * @return the BillingInformation object itself.
     */
    public BillingInformation withBillingCurrencyProratedAmount(Price billingCurrencyProratedAmount) {
        this.billingCurrencyProratedAmount = billingCurrencyProratedAmount;
        return this;
    }

    /**
     * Get the billingCurrencyRemainingCommitmentAmount property: Pricing information containing the amount and the
     * currency code.
     * 
     * @return the billingCurrencyRemainingCommitmentAmount value.
     */
    public Price billingCurrencyRemainingCommitmentAmount() {
        return this.billingCurrencyRemainingCommitmentAmount;
    }

    /**
     * Set the billingCurrencyRemainingCommitmentAmount property: Pricing information containing the amount and the
     * currency code.
     * 
     * @param billingCurrencyRemainingCommitmentAmount the billingCurrencyRemainingCommitmentAmount value to set.
     * @return the BillingInformation object itself.
     */
    public BillingInformation
        withBillingCurrencyRemainingCommitmentAmount(Price billingCurrencyRemainingCommitmentAmount) {
        this.billingCurrencyRemainingCommitmentAmount = billingCurrencyRemainingCommitmentAmount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (billingCurrencyTotalPaidAmount() != null) {
            billingCurrencyTotalPaidAmount().validate();
        }
        if (billingCurrencyProratedAmount() != null) {
            billingCurrencyProratedAmount().validate();
        }
        if (billingCurrencyRemainingCommitmentAmount() != null) {
            billingCurrencyRemainingCommitmentAmount().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("billingCurrencyTotalPaidAmount", this.billingCurrencyTotalPaidAmount);
        jsonWriter.writeJsonField("billingCurrencyProratedAmount", this.billingCurrencyProratedAmount);
        jsonWriter.writeJsonField("billingCurrencyRemainingCommitmentAmount",
            this.billingCurrencyRemainingCommitmentAmount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingInformation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingInformation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingInformation.
     */
    public static BillingInformation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingInformation deserializedBillingInformation = new BillingInformation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("billingCurrencyTotalPaidAmount".equals(fieldName)) {
                    deserializedBillingInformation.billingCurrencyTotalPaidAmount = Price.fromJson(reader);
                } else if ("billingCurrencyProratedAmount".equals(fieldName)) {
                    deserializedBillingInformation.billingCurrencyProratedAmount = Price.fromJson(reader);
                } else if ("billingCurrencyRemainingCommitmentAmount".equals(fieldName)) {
                    deserializedBillingInformation.billingCurrencyRemainingCommitmentAmount = Price.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingInformation;
        });
    }
}
