// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Reservation utilization.
 */
@Fluent
public final class ReservationsPropertiesUtilization implements JsonSerializable<ReservationsPropertiesUtilization> {
    /*
     * last 7 day utilization trend for a reservation
     */
    private String trend;

    /*
     * The array of aggregates of a reservation's utilization
     */
    private List<ReservationUtilizationAggregates> aggregates;

    /**
     * Creates an instance of ReservationsPropertiesUtilization class.
     */
    public ReservationsPropertiesUtilization() {
    }

    /**
     * Get the trend property: last 7 day utilization trend for a reservation.
     * 
     * @return the trend value.
     */
    public String trend() {
        return this.trend;
    }

    /**
     * Get the aggregates property: The array of aggregates of a reservation's utilization.
     * 
     * @return the aggregates value.
     */
    public List<ReservationUtilizationAggregates> aggregates() {
        return this.aggregates;
    }

    /**
     * Set the aggregates property: The array of aggregates of a reservation's utilization.
     * 
     * @param aggregates the aggregates value to set.
     * @return the ReservationsPropertiesUtilization object itself.
     */
    public ReservationsPropertiesUtilization withAggregates(List<ReservationUtilizationAggregates> aggregates) {
        this.aggregates = aggregates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aggregates() != null) {
            aggregates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("aggregates", this.aggregates, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationsPropertiesUtilization from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationsPropertiesUtilization if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationsPropertiesUtilization.
     */
    public static ReservationsPropertiesUtilization fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationsPropertiesUtilization deserializedReservationsPropertiesUtilization
                = new ReservationsPropertiesUtilization();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trend".equals(fieldName)) {
                    deserializedReservationsPropertiesUtilization.trend = reader.getString();
                } else if ("aggregates".equals(fieldName)) {
                    List<ReservationUtilizationAggregates> aggregates
                        = reader.readArray(reader1 -> ReservationUtilizationAggregates.fromJson(reader1));
                    deserializedReservationsPropertiesUtilization.aggregates = aggregates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationsPropertiesUtilization;
        });
    }
}
