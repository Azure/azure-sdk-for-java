// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.reservations.models.ChangeDirectoryResult;
import java.io.IOException;
import java.util.List;

/**
 * Change directory response.
 */
@Fluent
public final class ChangeDirectoryResponseInner implements JsonSerializable<ChangeDirectoryResponseInner> {
    /*
     * Change directory result for reservation order or reservation
     */
    private ChangeDirectoryResult reservationOrder;

    /*
     * The reservations property.
     */
    private List<ChangeDirectoryResult> reservations;

    /**
     * Creates an instance of ChangeDirectoryResponseInner class.
     */
    public ChangeDirectoryResponseInner() {
    }

    /**
     * Get the reservationOrder property: Change directory result for reservation order or reservation.
     * 
     * @return the reservationOrder value.
     */
    public ChangeDirectoryResult reservationOrder() {
        return this.reservationOrder;
    }

    /**
     * Set the reservationOrder property: Change directory result for reservation order or reservation.
     * 
     * @param reservationOrder the reservationOrder value to set.
     * @return the ChangeDirectoryResponseInner object itself.
     */
    public ChangeDirectoryResponseInner withReservationOrder(ChangeDirectoryResult reservationOrder) {
        this.reservationOrder = reservationOrder;
        return this;
    }

    /**
     * Get the reservations property: The reservations property.
     * 
     * @return the reservations value.
     */
    public List<ChangeDirectoryResult> reservations() {
        return this.reservations;
    }

    /**
     * Set the reservations property: The reservations property.
     * 
     * @param reservations the reservations value to set.
     * @return the ChangeDirectoryResponseInner object itself.
     */
    public ChangeDirectoryResponseInner withReservations(List<ChangeDirectoryResult> reservations) {
        this.reservations = reservations;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (reservationOrder() != null) {
            reservationOrder().validate();
        }
        if (reservations() != null) {
            reservations().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("reservationOrder", this.reservationOrder);
        jsonWriter.writeArrayField("reservations", this.reservations, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ChangeDirectoryResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ChangeDirectoryResponseInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ChangeDirectoryResponseInner.
     */
    public static ChangeDirectoryResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ChangeDirectoryResponseInner deserializedChangeDirectoryResponseInner = new ChangeDirectoryResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reservationOrder".equals(fieldName)) {
                    deserializedChangeDirectoryResponseInner.reservationOrder = ChangeDirectoryResult.fromJson(reader);
                } else if ("reservations".equals(fieldName)) {
                    List<ChangeDirectoryResult> reservations
                        = reader.readArray(reader1 -> ChangeDirectoryResult.fromJson(reader1));
                    deserializedChangeDirectoryResponseInner.reservations = reservations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedChangeDirectoryResponseInner;
        });
    }
}
