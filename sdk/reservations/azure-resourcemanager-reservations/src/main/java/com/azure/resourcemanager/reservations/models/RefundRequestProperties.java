// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties needed for refund request including the session id from calculate refund, the scope, the reservation to be
 * returned and the return reason.
 */
@Fluent
public final class RefundRequestProperties implements JsonSerializable<RefundRequestProperties> {
    /*
     * SessionId that was returned by CalculateRefund API.
     */
    private String sessionId;

    /*
     * The scope of the refund, e.g. Reservation
     */
    private String scope;

    /*
     * Reservation to return
     */
    private ReservationToReturn reservationToReturn;

    /*
     * The reason of returning the reservation
     */
    private String returnReason;

    /**
     * Creates an instance of RefundRequestProperties class.
     */
    public RefundRequestProperties() {
    }

    /**
     * Get the sessionId property: SessionId that was returned by CalculateRefund API.
     * 
     * @return the sessionId value.
     */
    public String sessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: SessionId that was returned by CalculateRefund API.
     * 
     * @param sessionId the sessionId value to set.
     * @return the RefundRequestProperties object itself.
     */
    public RefundRequestProperties withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the scope property: The scope of the refund, e.g. Reservation.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The scope of the refund, e.g. Reservation.
     * 
     * @param scope the scope value to set.
     * @return the RefundRequestProperties object itself.
     */
    public RefundRequestProperties withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the reservationToReturn property: Reservation to return.
     * 
     * @return the reservationToReturn value.
     */
    public ReservationToReturn reservationToReturn() {
        return this.reservationToReturn;
    }

    /**
     * Set the reservationToReturn property: Reservation to return.
     * 
     * @param reservationToReturn the reservationToReturn value to set.
     * @return the RefundRequestProperties object itself.
     */
    public RefundRequestProperties withReservationToReturn(ReservationToReturn reservationToReturn) {
        this.reservationToReturn = reservationToReturn;
        return this;
    }

    /**
     * Get the returnReason property: The reason of returning the reservation.
     * 
     * @return the returnReason value.
     */
    public String returnReason() {
        return this.returnReason;
    }

    /**
     * Set the returnReason property: The reason of returning the reservation.
     * 
     * @param returnReason the returnReason value to set.
     * @return the RefundRequestProperties object itself.
     */
    public RefundRequestProperties withReturnReason(String returnReason) {
        this.returnReason = returnReason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (reservationToReturn() != null) {
            reservationToReturn().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeStringField("scope", this.scope);
        jsonWriter.writeJsonField("reservationToReturn", this.reservationToReturn);
        jsonWriter.writeStringField("returnReason", this.returnReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefundRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefundRequestProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RefundRequestProperties.
     */
    public static RefundRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RefundRequestProperties deserializedRefundRequestProperties = new RefundRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sessionId".equals(fieldName)) {
                    deserializedRefundRequestProperties.sessionId = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedRefundRequestProperties.scope = reader.getString();
                } else if ("reservationToReturn".equals(fieldName)) {
                    deserializedRefundRequestProperties.reservationToReturn = ReservationToReturn.fromJson(reader);
                } else if ("returnReason".equals(fieldName)) {
                    deserializedRefundRequestProperties.returnReason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefundRequestProperties;
        });
    }
}
