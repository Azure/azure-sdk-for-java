// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Exchange response properties.
 */
@Fluent
public final class ExchangeResponseProperties implements JsonSerializable<ExchangeResponseProperties> {
    /*
     * Exchange session identifier
     */
    private String sessionId;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price netPayable;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price refundsTotal;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price purchasesTotal;

    /*
     * Details of the reservations being purchased
     */
    private List<ReservationToPurchaseExchange> reservationsToPurchase;

    /*
     * Details of the savings plans being purchased
     */
    private List<SavingsPlanToPurchaseExchange> savingsPlansToPurchase;

    /*
     * Details of the reservations being returned
     */
    private List<ReservationToReturnForExchange> reservationsToExchange;

    /*
     * Exchange policy errors
     */
    private ExchangePolicyErrors policyResult;

    /**
     * Creates an instance of ExchangeResponseProperties class.
     */
    public ExchangeResponseProperties() {
    }

    /**
     * Get the sessionId property: Exchange session identifier.
     * 
     * @return the sessionId value.
     */
    public String sessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: Exchange session identifier.
     * 
     * @param sessionId the sessionId value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the netPayable property: Pricing information containing the amount and the currency code.
     * 
     * @return the netPayable value.
     */
    public Price netPayable() {
        return this.netPayable;
    }

    /**
     * Set the netPayable property: Pricing information containing the amount and the currency code.
     * 
     * @param netPayable the netPayable value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties withNetPayable(Price netPayable) {
        this.netPayable = netPayable;
        return this;
    }

    /**
     * Get the refundsTotal property: Pricing information containing the amount and the currency code.
     * 
     * @return the refundsTotal value.
     */
    public Price refundsTotal() {
        return this.refundsTotal;
    }

    /**
     * Set the refundsTotal property: Pricing information containing the amount and the currency code.
     * 
     * @param refundsTotal the refundsTotal value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties withRefundsTotal(Price refundsTotal) {
        this.refundsTotal = refundsTotal;
        return this;
    }

    /**
     * Get the purchasesTotal property: Pricing information containing the amount and the currency code.
     * 
     * @return the purchasesTotal value.
     */
    public Price purchasesTotal() {
        return this.purchasesTotal;
    }

    /**
     * Set the purchasesTotal property: Pricing information containing the amount and the currency code.
     * 
     * @param purchasesTotal the purchasesTotal value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties withPurchasesTotal(Price purchasesTotal) {
        this.purchasesTotal = purchasesTotal;
        return this;
    }

    /**
     * Get the reservationsToPurchase property: Details of the reservations being purchased.
     * 
     * @return the reservationsToPurchase value.
     */
    public List<ReservationToPurchaseExchange> reservationsToPurchase() {
        return this.reservationsToPurchase;
    }

    /**
     * Set the reservationsToPurchase property: Details of the reservations being purchased.
     * 
     * @param reservationsToPurchase the reservationsToPurchase value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties
        withReservationsToPurchase(List<ReservationToPurchaseExchange> reservationsToPurchase) {
        this.reservationsToPurchase = reservationsToPurchase;
        return this;
    }

    /**
     * Get the savingsPlansToPurchase property: Details of the savings plans being purchased.
     * 
     * @return the savingsPlansToPurchase value.
     */
    public List<SavingsPlanToPurchaseExchange> savingsPlansToPurchase() {
        return this.savingsPlansToPurchase;
    }

    /**
     * Set the savingsPlansToPurchase property: Details of the savings plans being purchased.
     * 
     * @param savingsPlansToPurchase the savingsPlansToPurchase value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties
        withSavingsPlansToPurchase(List<SavingsPlanToPurchaseExchange> savingsPlansToPurchase) {
        this.savingsPlansToPurchase = savingsPlansToPurchase;
        return this;
    }

    /**
     * Get the reservationsToExchange property: Details of the reservations being returned.
     * 
     * @return the reservationsToExchange value.
     */
    public List<ReservationToReturnForExchange> reservationsToExchange() {
        return this.reservationsToExchange;
    }

    /**
     * Set the reservationsToExchange property: Details of the reservations being returned.
     * 
     * @param reservationsToExchange the reservationsToExchange value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties
        withReservationsToExchange(List<ReservationToReturnForExchange> reservationsToExchange) {
        this.reservationsToExchange = reservationsToExchange;
        return this;
    }

    /**
     * Get the policyResult property: Exchange policy errors.
     * 
     * @return the policyResult value.
     */
    public ExchangePolicyErrors policyResult() {
        return this.policyResult;
    }

    /**
     * Set the policyResult property: Exchange policy errors.
     * 
     * @param policyResult the policyResult value to set.
     * @return the ExchangeResponseProperties object itself.
     */
    public ExchangeResponseProperties withPolicyResult(ExchangePolicyErrors policyResult) {
        this.policyResult = policyResult;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (netPayable() != null) {
            netPayable().validate();
        }
        if (refundsTotal() != null) {
            refundsTotal().validate();
        }
        if (purchasesTotal() != null) {
            purchasesTotal().validate();
        }
        if (reservationsToPurchase() != null) {
            reservationsToPurchase().forEach(e -> e.validate());
        }
        if (savingsPlansToPurchase() != null) {
            savingsPlansToPurchase().forEach(e -> e.validate());
        }
        if (reservationsToExchange() != null) {
            reservationsToExchange().forEach(e -> e.validate());
        }
        if (policyResult() != null) {
            policyResult().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeJsonField("netPayable", this.netPayable);
        jsonWriter.writeJsonField("refundsTotal", this.refundsTotal);
        jsonWriter.writeJsonField("purchasesTotal", this.purchasesTotal);
        jsonWriter.writeArrayField("reservationsToPurchase", this.reservationsToPurchase,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("savingsPlansToPurchase", this.savingsPlansToPurchase,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("reservationsToExchange", this.reservationsToExchange,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("policyResult", this.policyResult);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExchangeResponseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExchangeResponseProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExchangeResponseProperties.
     */
    public static ExchangeResponseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExchangeResponseProperties deserializedExchangeResponseProperties = new ExchangeResponseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sessionId".equals(fieldName)) {
                    deserializedExchangeResponseProperties.sessionId = reader.getString();
                } else if ("netPayable".equals(fieldName)) {
                    deserializedExchangeResponseProperties.netPayable = Price.fromJson(reader);
                } else if ("refundsTotal".equals(fieldName)) {
                    deserializedExchangeResponseProperties.refundsTotal = Price.fromJson(reader);
                } else if ("purchasesTotal".equals(fieldName)) {
                    deserializedExchangeResponseProperties.purchasesTotal = Price.fromJson(reader);
                } else if ("reservationsToPurchase".equals(fieldName)) {
                    List<ReservationToPurchaseExchange> reservationsToPurchase
                        = reader.readArray(reader1 -> ReservationToPurchaseExchange.fromJson(reader1));
                    deserializedExchangeResponseProperties.reservationsToPurchase = reservationsToPurchase;
                } else if ("savingsPlansToPurchase".equals(fieldName)) {
                    List<SavingsPlanToPurchaseExchange> savingsPlansToPurchase
                        = reader.readArray(reader1 -> SavingsPlanToPurchaseExchange.fromJson(reader1));
                    deserializedExchangeResponseProperties.savingsPlansToPurchase = savingsPlansToPurchase;
                } else if ("reservationsToExchange".equals(fieldName)) {
                    List<ReservationToReturnForExchange> reservationsToExchange
                        = reader.readArray(reader1 -> ReservationToReturnForExchange.fromJson(reader1));
                    deserializedExchangeResponseProperties.reservationsToExchange = reservationsToExchange;
                } else if ("policyResult".equals(fieldName)) {
                    deserializedExchangeResponseProperties.policyResult = ExchangePolicyErrors.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExchangeResponseProperties;
        });
    }
}
