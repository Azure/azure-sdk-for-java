// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Refund policy result property.
 */
@Fluent
public final class RefundPolicyResultProperty implements JsonSerializable<RefundPolicyResultProperty> {
    /*
     * Pricing information containing the amount and the currency code
     */
    private Price consumedRefundsTotal;

    /*
     * Pricing information containing the amount and the currency code
     */
    private Price maxRefundLimit;

    /*
     * Refund Policy errors
     */
    private List<RefundPolicyError> policyErrors;

    /**
     * Creates an instance of RefundPolicyResultProperty class.
     */
    public RefundPolicyResultProperty() {
    }

    /**
     * Get the consumedRefundsTotal property: Pricing information containing the amount and the currency code.
     * 
     * @return the consumedRefundsTotal value.
     */
    public Price consumedRefundsTotal() {
        return this.consumedRefundsTotal;
    }

    /**
     * Set the consumedRefundsTotal property: Pricing information containing the amount and the currency code.
     * 
     * @param consumedRefundsTotal the consumedRefundsTotal value to set.
     * @return the RefundPolicyResultProperty object itself.
     */
    public RefundPolicyResultProperty withConsumedRefundsTotal(Price consumedRefundsTotal) {
        this.consumedRefundsTotal = consumedRefundsTotal;
        return this;
    }

    /**
     * Get the maxRefundLimit property: Pricing information containing the amount and the currency code.
     * 
     * @return the maxRefundLimit value.
     */
    public Price maxRefundLimit() {
        return this.maxRefundLimit;
    }

    /**
     * Set the maxRefundLimit property: Pricing information containing the amount and the currency code.
     * 
     * @param maxRefundLimit the maxRefundLimit value to set.
     * @return the RefundPolicyResultProperty object itself.
     */
    public RefundPolicyResultProperty withMaxRefundLimit(Price maxRefundLimit) {
        this.maxRefundLimit = maxRefundLimit;
        return this;
    }

    /**
     * Get the policyErrors property: Refund Policy errors.
     * 
     * @return the policyErrors value.
     */
    public List<RefundPolicyError> policyErrors() {
        return this.policyErrors;
    }

    /**
     * Set the policyErrors property: Refund Policy errors.
     * 
     * @param policyErrors the policyErrors value to set.
     * @return the RefundPolicyResultProperty object itself.
     */
    public RefundPolicyResultProperty withPolicyErrors(List<RefundPolicyError> policyErrors) {
        this.policyErrors = policyErrors;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (consumedRefundsTotal() != null) {
            consumedRefundsTotal().validate();
        }
        if (maxRefundLimit() != null) {
            maxRefundLimit().validate();
        }
        if (policyErrors() != null) {
            policyErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("consumedRefundsTotal", this.consumedRefundsTotal);
        jsonWriter.writeJsonField("maxRefundLimit", this.maxRefundLimit);
        jsonWriter.writeArrayField("policyErrors", this.policyErrors, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RefundPolicyResultProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RefundPolicyResultProperty if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RefundPolicyResultProperty.
     */
    public static RefundPolicyResultProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RefundPolicyResultProperty deserializedRefundPolicyResultProperty = new RefundPolicyResultProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("consumedRefundsTotal".equals(fieldName)) {
                    deserializedRefundPolicyResultProperty.consumedRefundsTotal = Price.fromJson(reader);
                } else if ("maxRefundLimit".equals(fieldName)) {
                    deserializedRefundPolicyResultProperty.maxRefundLimit = Price.fromJson(reader);
                } else if ("policyErrors".equals(fieldName)) {
                    List<RefundPolicyError> policyErrors
                        = reader.readArray(reader1 -> RefundPolicyError.fromJson(reader1));
                    deserializedRefundPolicyResultProperty.policyErrors = policyErrors;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRefundPolicyResultProperty;
        });
    }
}
