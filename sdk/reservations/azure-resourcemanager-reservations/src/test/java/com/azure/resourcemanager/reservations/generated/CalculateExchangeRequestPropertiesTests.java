// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.reservations.models.AppliedScopeType;
import com.azure.resourcemanager.reservations.models.BillingPlan;
import com.azure.resourcemanager.reservations.models.CalculateExchangeRequestProperties;
import com.azure.resourcemanager.reservations.models.PurchaseRequest;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import com.azure.resourcemanager.reservations.models.ReservationToReturn;
import com.azure.resourcemanager.reservations.models.ReservedResourceType;
import com.azure.resourcemanager.reservations.models.SavingsPlanPurchaseRequest;
import com.azure.resourcemanager.reservations.models.SavingsPlanTerm;
import com.azure.resourcemanager.reservations.models.SkuName;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CalculateExchangeRequestPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CalculateExchangeRequestProperties model =
            BinaryData
                .fromString(
                    "{\"reservationsToPurchase\":[{\"sku\":{\"name\":\"ofmxagkvtmelmqkr\"},\"location\":\"hvljuahaquh\",\"properties\":{\"reservedResourceType\":\"RedHatOsa\",\"billingScopeId\":\"ualaexqpvfadmw\",\"term\":\"P3Y\",\"billingPlan\":\"Upfront\",\"quantity\":1259983494,\"displayName\":\"vgomz\",\"appliedScopeType\":\"Single\",\"appliedScopes\":[],\"renew\":false,\"reviewDateTime\":\"2021-11-20T05:31:55Z\"}},{\"sku\":{\"name\":\"ldawkzbaliourqha\"},\"location\":\"uhashsfwx\",\"properties\":{\"reservedResourceType\":\"MySql\",\"billingScopeId\":\"xcug\",\"term\":\"P3Y\",\"billingPlan\":\"Monthly\",\"quantity\":834529223,\"displayName\":\"ebwpucwwfvo\",\"appliedScopeType\":\"ManagementGroup\",\"appliedScopes\":[],\"renew\":false,\"reviewDateTime\":\"2021-12-04T00:10:18Z\"}},{\"sku\":{\"name\":\"zceuojgjrw\"},\"location\":\"eiotwmcdytdx\",\"properties\":{\"reservedResourceType\":\"SqlAzureHybridBenefit\",\"billingScopeId\":\"rjaw\",\"term\":\"P3Y\",\"billingPlan\":\"Monthly\",\"quantity\":369820426,\"displayName\":\"skxfbk\",\"appliedScopeType\":\"Single\",\"appliedScopes\":[],\"renew\":false,\"reviewDateTime\":\"2021-09-10T20:03:07Z\"}}],\"savingsPlansToPurchase\":[{\"sku\":{\"name\":\"uwhvylwzbtdhxujz\"},\"properties\":{\"displayName\":\"pow\",\"billingScopeId\":\"przqlveu\",\"term\":\"P1Y\",\"billingPlan\":\"P1M\",\"appliedScopeType\":\"Single\"}},{\"sku\":{\"name\":\"bbcswsrtjri\"},\"properties\":{\"displayName\":\"bpbewtghfgb\",\"billingScopeId\":\"gw\",\"term\":\"P3Y\",\"billingPlan\":\"P1M\",\"appliedScopeType\":\"Shared\"}}],\"reservationsToExchange\":[{\"reservationId\":\"ibtnmxiebwwaloay\",\"quantity\":1665079577},{\"reservationId\":\"rtzju\",\"quantity\":47396428},{\"reservationId\":\"zmh\",\"quantity\":1672254683},{\"reservationId\":\"gmtsavjcbpwxqpsr\",\"quantity\":1220568259}]}")
                .toObject(CalculateExchangeRequestProperties.class);
        Assertions.assertEquals("ofmxagkvtmelmqkr", model.reservationsToPurchase().get(0).sku().name());
        Assertions.assertEquals("hvljuahaquh", model.reservationsToPurchase().get(0).location());
        Assertions
            .assertEquals(
                ReservedResourceType.RED_HAT_OSA, model.reservationsToPurchase().get(0).reservedResourceType());
        Assertions.assertEquals("ualaexqpvfadmw", model.reservationsToPurchase().get(0).billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.reservationsToPurchase().get(0).term());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, model.reservationsToPurchase().get(0).billingPlan());
        Assertions.assertEquals(1259983494, model.reservationsToPurchase().get(0).quantity());
        Assertions.assertEquals("vgomz", model.reservationsToPurchase().get(0).displayName());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.reservationsToPurchase().get(0).appliedScopeType());
        Assertions.assertEquals(false, model.reservationsToPurchase().get(0).renew());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-20T05:31:55Z"), model.reservationsToPurchase().get(0).reviewDateTime());
        Assertions.assertEquals("uwhvylwzbtdhxujz", model.savingsPlansToPurchase().get(0).sku().name());
        Assertions.assertEquals("pow", model.savingsPlansToPurchase().get(0).displayName());
        Assertions.assertEquals("przqlveu", model.savingsPlansToPurchase().get(0).billingScopeId());
        Assertions.assertEquals(SavingsPlanTerm.P1Y, model.savingsPlansToPurchase().get(0).term());
        Assertions.assertEquals(BillingPlan.P1M, model.savingsPlansToPurchase().get(0).billingPlan());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.savingsPlansToPurchase().get(0).appliedScopeType());
        Assertions.assertEquals("ibtnmxiebwwaloay", model.reservationsToExchange().get(0).reservationId());
        Assertions.assertEquals(1665079577, model.reservationsToExchange().get(0).quantity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CalculateExchangeRequestProperties model =
            new CalculateExchangeRequestProperties()
                .withReservationsToPurchase(
                    Arrays
                        .asList(
                            new PurchaseRequest()
                                .withSku(new SkuName().withName("ofmxagkvtmelmqkr"))
                                .withLocation("hvljuahaquh")
                                .withReservedResourceType(ReservedResourceType.RED_HAT_OSA)
                                .withBillingScopeId("ualaexqpvfadmw")
                                .withTerm(ReservationTerm.P3Y)
                                .withBillingPlan(ReservationBillingPlan.UPFRONT)
                                .withQuantity(1259983494)
                                .withDisplayName("vgomz")
                                .withAppliedScopeType(AppliedScopeType.SINGLE)
                                .withAppliedScopes(Arrays.asList())
                                .withRenew(false)
                                .withReviewDateTime(OffsetDateTime.parse("2021-11-20T05:31:55Z")),
                            new PurchaseRequest()
                                .withSku(new SkuName().withName("ldawkzbaliourqha"))
                                .withLocation("uhashsfwx")
                                .withReservedResourceType(ReservedResourceType.MY_SQL)
                                .withBillingScopeId("xcug")
                                .withTerm(ReservationTerm.P3Y)
                                .withBillingPlan(ReservationBillingPlan.MONTHLY)
                                .withQuantity(834529223)
                                .withDisplayName("ebwpucwwfvo")
                                .withAppliedScopeType(AppliedScopeType.MANAGEMENT_GROUP)
                                .withAppliedScopes(Arrays.asList())
                                .withRenew(false)
                                .withReviewDateTime(OffsetDateTime.parse("2021-12-04T00:10:18Z")),
                            new PurchaseRequest()
                                .withSku(new SkuName().withName("zceuojgjrw"))
                                .withLocation("eiotwmcdytdx")
                                .withReservedResourceType(ReservedResourceType.SQL_AZURE_HYBRID_BENEFIT)
                                .withBillingScopeId("rjaw")
                                .withTerm(ReservationTerm.P3Y)
                                .withBillingPlan(ReservationBillingPlan.MONTHLY)
                                .withQuantity(369820426)
                                .withDisplayName("skxfbk")
                                .withAppliedScopeType(AppliedScopeType.SINGLE)
                                .withAppliedScopes(Arrays.asList())
                                .withRenew(false)
                                .withReviewDateTime(OffsetDateTime.parse("2021-09-10T20:03:07Z"))))
                .withSavingsPlansToPurchase(
                    Arrays
                        .asList(
                            new SavingsPlanPurchaseRequest()
                                .withSku(new SkuName().withName("uwhvylwzbtdhxujz"))
                                .withDisplayName("pow")
                                .withBillingScopeId("przqlveu")
                                .withTerm(SavingsPlanTerm.P1Y)
                                .withBillingPlan(BillingPlan.P1M)
                                .withAppliedScopeType(AppliedScopeType.SINGLE),
                            new SavingsPlanPurchaseRequest()
                                .withSku(new SkuName().withName("bbcswsrtjri"))
                                .withDisplayName("bpbewtghfgb")
                                .withBillingScopeId("gw")
                                .withTerm(SavingsPlanTerm.P3Y)
                                .withBillingPlan(BillingPlan.P1M)
                                .withAppliedScopeType(AppliedScopeType.SHARED)))
                .withReservationsToExchange(
                    Arrays
                        .asList(
                            new ReservationToReturn().withReservationId("ibtnmxiebwwaloay").withQuantity(1665079577),
                            new ReservationToReturn().withReservationId("rtzju").withQuantity(47396428),
                            new ReservationToReturn().withReservationId("zmh").withQuantity(1672254683),
                            new ReservationToReturn().withReservationId("gmtsavjcbpwxqpsr").withQuantity(1220568259)));
        model = BinaryData.fromObject(model).toObject(CalculateExchangeRequestProperties.class);
        Assertions.assertEquals("ofmxagkvtmelmqkr", model.reservationsToPurchase().get(0).sku().name());
        Assertions.assertEquals("hvljuahaquh", model.reservationsToPurchase().get(0).location());
        Assertions
            .assertEquals(
                ReservedResourceType.RED_HAT_OSA, model.reservationsToPurchase().get(0).reservedResourceType());
        Assertions.assertEquals("ualaexqpvfadmw", model.reservationsToPurchase().get(0).billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.reservationsToPurchase().get(0).term());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, model.reservationsToPurchase().get(0).billingPlan());
        Assertions.assertEquals(1259983494, model.reservationsToPurchase().get(0).quantity());
        Assertions.assertEquals("vgomz", model.reservationsToPurchase().get(0).displayName());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.reservationsToPurchase().get(0).appliedScopeType());
        Assertions.assertEquals(false, model.reservationsToPurchase().get(0).renew());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-11-20T05:31:55Z"), model.reservationsToPurchase().get(0).reviewDateTime());
        Assertions.assertEquals("uwhvylwzbtdhxujz", model.savingsPlansToPurchase().get(0).sku().name());
        Assertions.assertEquals("pow", model.savingsPlansToPurchase().get(0).displayName());
        Assertions.assertEquals("przqlveu", model.savingsPlansToPurchase().get(0).billingScopeId());
        Assertions.assertEquals(SavingsPlanTerm.P1Y, model.savingsPlansToPurchase().get(0).term());
        Assertions.assertEquals(BillingPlan.P1M, model.savingsPlansToPurchase().get(0).billingPlan());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.savingsPlansToPurchase().get(0).appliedScopeType());
        Assertions.assertEquals("ibtnmxiebwwaloay", model.reservationsToExchange().get(0).reservationId());
        Assertions.assertEquals(1665079577, model.reservationsToExchange().get(0).quantity());
    }
}
