// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.reservations.fluent.models.ReservationOrderResponseInner;
import com.azure.resourcemanager.reservations.models.ProvisioningState;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationOrderList;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ReservationOrderListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReservationOrderList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"etag\":9622678,\"properties\":{\"displayName\":\"tnwu\",\"requestDateTime\":\"2021-10-03T15:35:19Z\",\"createdDateTime\":\"2021-02-12T15:23:48Z\",\"expiryDateTime\":\"2021-11-07T16:18:10Z\",\"benefitStartTime\":\"2020-12-27T04:43:40Z\",\"originalQuantity\":1448961060,\"term\":\"P1Y\",\"provisioningState\":\"Created\",\"billingPlan\":\"Monthly\",\"reservations\":[],\"reviewDateTime\":\"2021-07-21T12:31:03Z\"},\"id\":\"zwdzuh\",\"name\":\"ymwisdkft\",\"type\":\"wxmnteiwao\"},{\"etag\":269791591,\"properties\":{\"displayName\":\"jcmmxdcufufsrp\",\"requestDateTime\":\"2021-06-29T04:41:21Z\",\"createdDateTime\":\"2021-12-09T12:29:37Z\",\"expiryDateTime\":\"2021-10-23T08:25:02Z\",\"benefitStartTime\":\"2021-09-08T03:00:46Z\",\"originalQuantity\":564973983,\"term\":\"P3Y\",\"provisioningState\":\"Succeeded\",\"billingPlan\":\"Upfront\",\"reservations\":[],\"reviewDateTime\":\"2021-04-28T14:26:37Z\"},\"id\":\"mdwzjeiachboo\",\"name\":\"flnrosfqpteehzz\",\"type\":\"ypyqrimzinp\"}],\"nextLink\":\"wjdk\"}")
                .toObject(ReservationOrderList.class);
        Assertions.assertEquals(9622678, model.value().get(0).etag());
        Assertions.assertEquals("tnwu", model.value().get(0).displayName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-03T15:35:19Z"), model.value().get(0).requestDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T15:23:48Z"), model.value().get(0).createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T16:18:10Z"), model.value().get(0).expiryDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T04:43:40Z"), model.value().get(0).benefitStartTime());
        Assertions.assertEquals(1448961060, model.value().get(0).originalQuantity());
        Assertions.assertEquals(ReservationTerm.P1Y, model.value().get(0).term());
        Assertions.assertEquals(ProvisioningState.CREATED, model.value().get(0).provisioningState());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.value().get(0).billingPlan());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T12:31:03Z"), model.value().get(0).reviewDateTime());
        Assertions.assertEquals("wjdk", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReservationOrderList model =
            new ReservationOrderList()
                .withValue(
                    Arrays
                        .asList(
                            new ReservationOrderResponseInner()
                                .withEtag(9622678)
                                .withDisplayName("tnwu")
                                .withRequestDateTime(OffsetDateTime.parse("2021-10-03T15:35:19Z"))
                                .withCreatedDateTime(OffsetDateTime.parse("2021-02-12T15:23:48Z"))
                                .withExpiryDateTime(OffsetDateTime.parse("2021-11-07T16:18:10Z"))
                                .withBenefitStartTime(OffsetDateTime.parse("2020-12-27T04:43:40Z"))
                                .withOriginalQuantity(1448961060)
                                .withTerm(ReservationTerm.P1Y)
                                .withProvisioningState(ProvisioningState.CREATED)
                                .withBillingPlan(ReservationBillingPlan.MONTHLY)
                                .withReservations(Arrays.asList())
                                .withReviewDateTime(OffsetDateTime.parse("2021-07-21T12:31:03Z")),
                            new ReservationOrderResponseInner()
                                .withEtag(269791591)
                                .withDisplayName("jcmmxdcufufsrp")
                                .withRequestDateTime(OffsetDateTime.parse("2021-06-29T04:41:21Z"))
                                .withCreatedDateTime(OffsetDateTime.parse("2021-12-09T12:29:37Z"))
                                .withExpiryDateTime(OffsetDateTime.parse("2021-10-23T08:25:02Z"))
                                .withBenefitStartTime(OffsetDateTime.parse("2021-09-08T03:00:46Z"))
                                .withOriginalQuantity(564973983)
                                .withTerm(ReservationTerm.P3Y)
                                .withProvisioningState(ProvisioningState.SUCCEEDED)
                                .withBillingPlan(ReservationBillingPlan.UPFRONT)
                                .withReservations(Arrays.asList())
                                .withReviewDateTime(OffsetDateTime.parse("2021-04-28T14:26:37Z"))))
                .withNextLink("wjdk");
        model = BinaryData.fromObject(model).toObject(ReservationOrderList.class);
        Assertions.assertEquals(9622678, model.value().get(0).etag());
        Assertions.assertEquals("tnwu", model.value().get(0).displayName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-03T15:35:19Z"), model.value().get(0).requestDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T15:23:48Z"), model.value().get(0).createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T16:18:10Z"), model.value().get(0).expiryDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T04:43:40Z"), model.value().get(0).benefitStartTime());
        Assertions.assertEquals(1448961060, model.value().get(0).originalQuantity());
        Assertions.assertEquals(ReservationTerm.P1Y, model.value().get(0).term());
        Assertions.assertEquals(ProvisioningState.CREATED, model.value().get(0).provisioningState());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.value().get(0).billingPlan());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T12:31:03Z"), model.value().get(0).reviewDateTime());
        Assertions.assertEquals("wjdk", model.nextLink());
    }
}
