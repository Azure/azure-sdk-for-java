// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.reservations.ReservationsManager;
import com.azure.resourcemanager.reservations.models.AppliedScopeType;
import com.azure.resourcemanager.reservations.models.InstanceFlexibility;
import com.azure.resourcemanager.reservations.models.Kind;
import com.azure.resourcemanager.reservations.models.ProvisioningState;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationResponse;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import com.azure.resourcemanager.reservations.models.ReservedResourceType;
import com.azure.resourcemanager.reservations.models.SplitRequest;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReservationsSplitMockTests {
    @Test
    public void testSplit() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "[{\"location\":\"lmnguxaw\",\"etag\":1823569828,\"sku\":{\"name\":\"yuuximerqfobwyzn\"},\"properties\":{\"reservedResourceType\":\"SqlEdge\",\"instanceFlexibility\":\"On\",\"displayName\":\"pfhpagmhrskdsnfd\",\"appliedScopes\":[\"akgtdlmkkzevdlh\",\"wpusdsttwvogv\",\"bejdcn\",\"qqmoaku\"],\"appliedScopeType\":\"Shared\",\"archived\":false,\"capabilities\":\"wr\",\"quantity\":632499232,\"provisioningState\":\"Succeeded\",\"effectiveDateTime\":\"2021-08-17T18:50:12Z\",\"benefitStartTime\":\"2021-01-31T20:09:39Z\",\"lastUpdatedDateTime\":\"2021-09-26T20:30:12Z\",\"expiryDateTime\":\"2021-07-21T23:33:14Z\",\"reviewDateTime\":\"2021-08-27T02:00:49Z\",\"skuDescription\":\"nrfdw\",\"billingPlan\":\"Upfront\",\"displayProvisioningState\":\"ziuiefozbhdm\",\"provisioningSubState\":\"l\",\"purchaseDateTime\":\"2021-05-05T09:05:40Z\",\"billingScopeId\":\"ae\",\"renew\":false,\"renewSource\":\"hxicslfaoqz\",\"renewDestination\":\"yylhalnswhccsp\",\"term\":\"P3Y\",\"userFriendlyAppliedScopeType\":\"witqscywuggwoluh\",\"userFriendlyRenewState\":\"bwemhairs\"},\"kind\":\"Microsoft.Compute\",\"id\":\"wmsweypqwd\",\"name\":\"ggicccnxqhue\",\"type\":\"mkttlstvlzywem\"}]";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ReservationsManager manager =
            ReservationsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        List<ReservationResponse> response =
            manager
                .reservations()
                .split(
                    "dwbwhkszzcmrvexz",
                    new SplitRequest().withQuantities(Arrays.asList(1159944878)).withReservationId("sfraoyzko"),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lmnguxaw", response.get(0).location());
        Assertions.assertEquals(1823569828, response.get(0).etag());
        Assertions.assertEquals("yuuximerqfobwyzn", response.get(0).sku().name());
        Assertions.assertEquals(ReservedResourceType.SQL_EDGE, response.get(0).properties().reservedResourceType());
        Assertions.assertEquals(InstanceFlexibility.ON, response.get(0).properties().instanceFlexibility());
        Assertions.assertEquals("pfhpagmhrskdsnfd", response.get(0).properties().displayName());
        Assertions.assertEquals("akgtdlmkkzevdlh", response.get(0).properties().appliedScopes().get(0));
        Assertions.assertEquals(AppliedScopeType.SHARED, response.get(0).properties().appliedScopeType());
        Assertions.assertEquals(false, response.get(0).properties().archived());
        Assertions.assertEquals("wr", response.get(0).properties().capabilities());
        Assertions.assertEquals(632499232, response.get(0).properties().quantity());
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.get(0).properties().provisioningState());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-08-17T18:50:12Z"), response.get(0).properties().effectiveDateTime());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-31T20:09:39Z"), response.get(0).properties().benefitStartTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-07-21T23:33:14Z"), response.get(0).properties().expiryDateTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-08-27T02:00:49Z"), response.get(0).properties().reviewDateTime());
        Assertions.assertEquals("nrfdw", response.get(0).properties().skuDescription());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, response.get(0).properties().billingPlan());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-05-05T09:05:40Z"), response.get(0).properties().purchaseDateTime());
        Assertions.assertEquals("ae", response.get(0).properties().billingScopeId());
        Assertions.assertEquals(false, response.get(0).properties().renew());
        Assertions.assertEquals("hxicslfaoqz", response.get(0).properties().renewSource());
        Assertions.assertEquals("yylhalnswhccsp", response.get(0).properties().renewDestination());
        Assertions.assertEquals(ReservationTerm.P3Y, response.get(0).properties().term());
        Assertions.assertEquals(Kind.MICROSOFT_COMPUTE, response.get(0).kind());
    }
}
