// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.reservations.models.AppliedScopeProperties;
import com.azure.resourcemanager.reservations.models.AppliedScopeType;
import com.azure.resourcemanager.reservations.models.InstanceFlexibility;
import com.azure.resourcemanager.reservations.models.PurchaseRequest;
import com.azure.resourcemanager.reservations.models.PurchaseRequestPropertiesReservedResourceProperties;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import com.azure.resourcemanager.reservations.models.ReservedResourceType;
import com.azure.resourcemanager.reservations.models.SkuName;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PurchaseRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PurchaseRequest model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"s\"},\"location\":\"zgvfcjrwz\",\"properties\":{\"reservedResourceType\":\"AzureFiles\",\"billingScopeId\":\"felluwfzitonpe\",\"term\":\"P3Y\",\"billingPlan\":\"Monthly\",\"quantity\":2024627015,\"displayName\":\"ofpdvh\",\"appliedScopeType\":\"Shared\",\"appliedScopes\":[\"pini\",\"mayhuybbkpodepoo\"],\"appliedScopeProperties\":{\"tenantId\":\"uvamiheognarxzxt\",\"managementGroupId\":\"o\",\"subscriptionId\":\"si\",\"resourceGroupId\":\"evcciqihnhun\",\"displayName\":\"wjzrnfygxgisp\"},\"renew\":false,\"reservedResourceProperties\":{\"instanceFlexibility\":\"On\"},\"reviewDateTime\":\"2021-09-18T00:19:24Z\"}}")
            .toObject(PurchaseRequest.class);
        Assertions.assertEquals("s", model.sku().name());
        Assertions.assertEquals("zgvfcjrwz", model.location());
        Assertions.assertEquals(ReservedResourceType.AZURE_FILES, model.reservedResourceType());
        Assertions.assertEquals("felluwfzitonpe", model.billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.billingPlan());
        Assertions.assertEquals(2024627015, model.quantity());
        Assertions.assertEquals("ofpdvh", model.displayName());
        Assertions.assertEquals(AppliedScopeType.SHARED, model.appliedScopeType());
        Assertions.assertEquals("pini", model.appliedScopes().get(0));
        Assertions.assertEquals("uvamiheognarxzxt", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("o", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("si", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("evcciqihnhun", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("wjzrnfygxgisp", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.renew());
        Assertions.assertEquals(InstanceFlexibility.ON, model.reservedResourceProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T00:19:24Z"), model.reviewDateTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PurchaseRequest model = new PurchaseRequest().withSku(new SkuName().withName("s"))
            .withLocation("zgvfcjrwz")
            .withReservedResourceType(ReservedResourceType.AZURE_FILES)
            .withBillingScopeId("felluwfzitonpe")
            .withTerm(ReservationTerm.P3Y)
            .withBillingPlan(ReservationBillingPlan.MONTHLY)
            .withQuantity(2024627015)
            .withDisplayName("ofpdvh")
            .withAppliedScopeType(AppliedScopeType.SHARED)
            .withAppliedScopes(Arrays.asList("pini", "mayhuybbkpodepoo"))
            .withAppliedScopeProperties(new AppliedScopeProperties().withTenantId("uvamiheognarxzxt")
                .withManagementGroupId("o")
                .withSubscriptionId("si")
                .withResourceGroupId("evcciqihnhun")
                .withDisplayName("wjzrnfygxgisp"))
            .withRenew(false)
            .withReservedResourceProperties(new PurchaseRequestPropertiesReservedResourceProperties()
                .withInstanceFlexibility(InstanceFlexibility.ON))
            .withReviewDateTime(OffsetDateTime.parse("2021-09-18T00:19:24Z"));
        model = BinaryData.fromObject(model).toObject(PurchaseRequest.class);
        Assertions.assertEquals("s", model.sku().name());
        Assertions.assertEquals("zgvfcjrwz", model.location());
        Assertions.assertEquals(ReservedResourceType.AZURE_FILES, model.reservedResourceType());
        Assertions.assertEquals("felluwfzitonpe", model.billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.billingPlan());
        Assertions.assertEquals(2024627015, model.quantity());
        Assertions.assertEquals("ofpdvh", model.displayName());
        Assertions.assertEquals(AppliedScopeType.SHARED, model.appliedScopeType());
        Assertions.assertEquals("pini", model.appliedScopes().get(0));
        Assertions.assertEquals("uvamiheognarxzxt", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("o", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("si", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("evcciqihnhun", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("wjzrnfygxgisp", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.renew());
        Assertions.assertEquals(InstanceFlexibility.ON, model.reservedResourceProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T00:19:24Z"), model.reviewDateTime());
    }
}
