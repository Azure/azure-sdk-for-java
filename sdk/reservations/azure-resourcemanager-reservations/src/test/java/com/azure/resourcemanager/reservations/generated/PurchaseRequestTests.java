// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.reservations.models.AppliedScopeProperties;
import com.azure.resourcemanager.reservations.models.AppliedScopeType;
import com.azure.resourcemanager.reservations.models.InstanceFlexibility;
import com.azure.resourcemanager.reservations.models.PurchaseRequest;
import com.azure.resourcemanager.reservations.models.PurchaseRequestPropertiesReservedResourceProperties;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import com.azure.resourcemanager.reservations.models.ReservedResourceType;
import com.azure.resourcemanager.reservations.models.SkuName;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PurchaseRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PurchaseRequest model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"wnzlljfmppeeb\"},\"location\":\"gxsabkyq\",\"properties\":{\"reservedResourceType\":\"AVS\",\"billingScopeId\":\"tcj\",\"term\":\"P3Y\",\"billingPlan\":\"Upfront\",\"quantity\":1471497811,\"displayName\":\"hkr\",\"appliedScopeType\":\"Single\",\"appliedScopes\":[\"p\",\"sbdkvwr\",\"jfeusnh\"],\"appliedScopeProperties\":{\"tenantId\":\"eltmrldhugjzzdat\",\"managementGroupId\":\"hocdgeab\",\"subscriptionId\":\"phut\",\"resourceGroupId\":\"ndv\",\"displayName\":\"ozwyiftyhxhuro\"},\"renew\":true,\"reservedResourceProperties\":{\"instanceFlexibility\":\"Off\"},\"reviewDateTime\":\"2021-05-10T01:46:35Z\"}}")
                .toObject(PurchaseRequest.class);
        Assertions.assertEquals("wnzlljfmppeeb", model.sku().name());
        Assertions.assertEquals("gxsabkyq", model.location());
        Assertions.assertEquals(ReservedResourceType.AVS, model.reservedResourceType());
        Assertions.assertEquals("tcj", model.billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, model.billingPlan());
        Assertions.assertEquals(1471497811, model.quantity());
        Assertions.assertEquals("hkr", model.displayName());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.appliedScopeType());
        Assertions.assertEquals("p", model.appliedScopes().get(0));
        Assertions.assertEquals("eltmrldhugjzzdat", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("hocdgeab", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("phut", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("ndv", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("ozwyiftyhxhuro", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(true, model.renew());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.reservedResourceProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T01:46:35Z"), model.reviewDateTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PurchaseRequest model =
            new PurchaseRequest()
                .withSku(new SkuName().withName("wnzlljfmppeeb"))
                .withLocation("gxsabkyq")
                .withReservedResourceType(ReservedResourceType.AVS)
                .withBillingScopeId("tcj")
                .withTerm(ReservationTerm.P3Y)
                .withBillingPlan(ReservationBillingPlan.UPFRONT)
                .withQuantity(1471497811)
                .withDisplayName("hkr")
                .withAppliedScopeType(AppliedScopeType.SINGLE)
                .withAppliedScopes(Arrays.asList("p", "sbdkvwr", "jfeusnh"))
                .withAppliedScopeProperties(
                    new AppliedScopeProperties()
                        .withTenantId("eltmrldhugjzzdat")
                        .withManagementGroupId("hocdgeab")
                        .withSubscriptionId("phut")
                        .withResourceGroupId("ndv")
                        .withDisplayName("ozwyiftyhxhuro"))
                .withRenew(true)
                .withReservedResourceProperties(
                    new PurchaseRequestPropertiesReservedResourceProperties()
                        .withInstanceFlexibility(InstanceFlexibility.OFF))
                .withReviewDateTime(OffsetDateTime.parse("2021-05-10T01:46:35Z"));
        model = BinaryData.fromObject(model).toObject(PurchaseRequest.class);
        Assertions.assertEquals("wnzlljfmppeeb", model.sku().name());
        Assertions.assertEquals("gxsabkyq", model.location());
        Assertions.assertEquals(ReservedResourceType.AVS, model.reservedResourceType());
        Assertions.assertEquals("tcj", model.billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, model.billingPlan());
        Assertions.assertEquals(1471497811, model.quantity());
        Assertions.assertEquals("hkr", model.displayName());
        Assertions.assertEquals(AppliedScopeType.SINGLE, model.appliedScopeType());
        Assertions.assertEquals("p", model.appliedScopes().get(0));
        Assertions.assertEquals("eltmrldhugjzzdat", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("hocdgeab", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("phut", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("ndv", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("ozwyiftyhxhuro", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(true, model.renew());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.reservedResourceProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-10T01:46:35Z"), model.reviewDateTime());
    }
}
