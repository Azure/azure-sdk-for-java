// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.reservations.ReservationsManager;
import com.azure.resourcemanager.reservations.models.AppliedScopeProperties;
import com.azure.resourcemanager.reservations.models.AppliedScopeType;
import com.azure.resourcemanager.reservations.models.InstanceFlexibility;
import com.azure.resourcemanager.reservations.models.ProvisioningState;
import com.azure.resourcemanager.reservations.models.PurchaseRequest;
import com.azure.resourcemanager.reservations.models.PurchaseRequestPropertiesReservedResourceProperties;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationOrderResponse;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import com.azure.resourcemanager.reservations.models.ReservedResourceType;
import com.azure.resourcemanager.reservations.models.SkuName;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ReservationOrdersPurchaseMockTests {
    @Test
    public void testPurchase() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":592416055,\"properties\":{\"displayName\":\"fezzxscyhwzdg\",\"requestDateTime\":\"2021-01-16T07:41:49Z\",\"createdDateTime\":\"2021-08-21T05:05:09Z\",\"expiryDateTime\":\"2021-05-15T16:47:17Z\",\"benefitStartTime\":\"2021-02-14T17:43:30Z\",\"originalQuantity\":921177918,\"term\":\"P5Y\",\"provisioningState\":\"Succeeded\",\"billingPlan\":\"Upfront\",\"planInformation\":{\"transactions\":[]},\"reservations\":[],\"reviewDateTime\":\"2021-05-20T07:43:06Z\"},\"id\":\"wdsh\",\"name\":\"ssnrbgye\",\"type\":\"rymsgaojfmw\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ReservationsManager manager =
            ReservationsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ReservationOrderResponse response =
            manager
                .reservationOrders()
                .purchase(
                    "jbdhqxvc",
                    new PurchaseRequest()
                        .withSku(new SkuName().withName("rpdsof"))
                        .withLocation("hrnsvbu")
                        .withReservedResourceType(ReservedResourceType.COSMOS_DB)
                        .withBillingScopeId("yybyc")
                        .withTerm(ReservationTerm.P5Y)
                        .withBillingPlan(ReservationBillingPlan.UPFRONT)
                        .withQuantity(461683729)
                        .withDisplayName("kfawnopqgikyz")
                        .withAppliedScopeType(AppliedScopeType.MANAGEMENT_GROUP)
                        .withAppliedScopes(Arrays.asList("yuxzejntpsewgi", "ilqu"))
                        .withAppliedScopeProperties(
                            new AppliedScopeProperties()
                                .withTenantId("dxtqmieoxo")
                                .withManagementGroupId("gufhyaomtbg")
                                .withSubscriptionId("avgrvkffovjz")
                                .withResourceGroupId("jbibg")
                                .withDisplayName("fxumv"))
                        .withRenew(true)
                        .withReservedResourceProperties(
                            new PurchaseRequestPropertiesReservedResourceProperties()
                                .withInstanceFlexibility(InstanceFlexibility.OFF))
                        .withReviewDateTime(OffsetDateTime.parse("2021-05-30T07:45:57Z")),
                    com.azure.core.util.Context.NONE);

        Assertions.assertEquals(592416055, response.etag());
        Assertions.assertEquals("fezzxscyhwzdg", response.displayName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-16T07:41:49Z"), response.requestDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T05:05:09Z"), response.createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T16:47:17Z"), response.expiryDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-14T17:43:30Z"), response.benefitStartTime());
        Assertions.assertEquals(921177918, response.originalQuantity());
        Assertions.assertEquals(ReservationTerm.P5Y, response.term());
        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, response.billingPlan());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T07:43:06Z"), response.reviewDateTime());
    }
}
