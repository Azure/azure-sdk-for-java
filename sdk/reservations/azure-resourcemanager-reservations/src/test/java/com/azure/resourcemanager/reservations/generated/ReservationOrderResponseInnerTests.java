// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.reservations.fluent.models.ReservationOrderResponseInner;
import com.azure.resourcemanager.reservations.fluent.models.ReservationResponseInner;
import com.azure.resourcemanager.reservations.models.Kind;
import com.azure.resourcemanager.reservations.models.ProvisioningState;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationOrderBillingPlanInformation;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ReservationOrderResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReservationOrderResponseInner model =
            BinaryData
                .fromString(
                    "{\"etag\":1230254023,\"properties\":{\"displayName\":\"dqxhcrmnohjtckwh\",\"requestDateTime\":\"2021-05-11T08:11:32Z\",\"createdDateTime\":\"2021-07-22T01:38:16Z\",\"expiryDateTime\":\"2020-12-23T06:13:14Z\",\"benefitStartTime\":\"2021-01-18T03:53:41Z\",\"originalQuantity\":1921161938,\"term\":\"P3Y\",\"provisioningState\":\"ConfirmedResourceHold\",\"billingPlan\":\"Upfront\",\"planInformation\":{\"transactions\":[]},\"reservations\":[{\"location\":\"snb\",\"etag\":1701008083,\"kind\":\"Microsoft.Compute\",\"id\":\"cpc\",\"name\":\"shurzafbljjgpbto\",\"type\":\"c\"}],\"reviewDateTime\":\"2021-08-23T17:30:32Z\"},\"id\":\"javbqidtqajz\",\"name\":\"ulpkudjkrl\",\"type\":\"hbzhfepg\"}")
                .toObject(ReservationOrderResponseInner.class);
        Assertions.assertEquals(1230254023, model.etag());
        Assertions.assertEquals("dqxhcrmnohjtckwh", model.displayName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T08:11:32Z"), model.requestDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T01:38:16Z"), model.createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T06:13:14Z"), model.expiryDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T03:53:41Z"), model.benefitStartTime());
        Assertions.assertEquals(1921161938, model.originalQuantity());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ProvisioningState.CONFIRMED_RESOURCE_HOLD, model.provisioningState());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, model.billingPlan());
        Assertions.assertEquals("snb", model.reservations().get(0).location());
        Assertions.assertEquals(1701008083, model.reservations().get(0).etag());
        Assertions.assertEquals(Kind.MICROSOFT_COMPUTE, model.reservations().get(0).kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T17:30:32Z"), model.reviewDateTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReservationOrderResponseInner model =
            new ReservationOrderResponseInner()
                .withEtag(1230254023)
                .withDisplayName("dqxhcrmnohjtckwh")
                .withRequestDateTime(OffsetDateTime.parse("2021-05-11T08:11:32Z"))
                .withCreatedDateTime(OffsetDateTime.parse("2021-07-22T01:38:16Z"))
                .withExpiryDateTime(OffsetDateTime.parse("2020-12-23T06:13:14Z"))
                .withBenefitStartTime(OffsetDateTime.parse("2021-01-18T03:53:41Z"))
                .withOriginalQuantity(1921161938)
                .withTerm(ReservationTerm.P3Y)
                .withProvisioningState(ProvisioningState.CONFIRMED_RESOURCE_HOLD)
                .withBillingPlan(ReservationBillingPlan.UPFRONT)
                .withPlanInformation(new ReservationOrderBillingPlanInformation().withTransactions(Arrays.asList()))
                .withReservations(
                    Arrays
                        .asList(
                            new ReservationResponseInner()
                                .withLocation("snb")
                                .withEtag(1701008083)
                                .withKind(Kind.MICROSOFT_COMPUTE)))
                .withReviewDateTime(OffsetDateTime.parse("2021-08-23T17:30:32Z"));
        model = BinaryData.fromObject(model).toObject(ReservationOrderResponseInner.class);
        Assertions.assertEquals(1230254023, model.etag());
        Assertions.assertEquals("dqxhcrmnohjtckwh", model.displayName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T08:11:32Z"), model.requestDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-22T01:38:16Z"), model.createdDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-23T06:13:14Z"), model.expiryDateTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T03:53:41Z"), model.benefitStartTime());
        Assertions.assertEquals(1921161938, model.originalQuantity());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ProvisioningState.CONFIRMED_RESOURCE_HOLD, model.provisioningState());
        Assertions.assertEquals(ReservationBillingPlan.UPFRONT, model.billingPlan());
        Assertions.assertEquals("snb", model.reservations().get(0).location());
        Assertions.assertEquals(1701008083, model.reservations().get(0).etag());
        Assertions.assertEquals(Kind.MICROSOFT_COMPUTE, model.reservations().get(0).kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-23T17:30:32Z"), model.reviewDateTime());
    }
}
