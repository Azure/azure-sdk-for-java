// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.reservations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.reservations.fluent.models.PurchaseRequestProperties;
import com.azure.resourcemanager.reservations.models.AppliedScopeProperties;
import com.azure.resourcemanager.reservations.models.AppliedScopeType;
import com.azure.resourcemanager.reservations.models.InstanceFlexibility;
import com.azure.resourcemanager.reservations.models.PurchaseRequestPropertiesReservedResourceProperties;
import com.azure.resourcemanager.reservations.models.ReservationBillingPlan;
import com.azure.resourcemanager.reservations.models.ReservationTerm;
import com.azure.resourcemanager.reservations.models.ReservedResourceType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PurchaseRequestPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PurchaseRequestProperties model =
            BinaryData
                .fromString(
                    "{\"reservedResourceType\":\"SqlEdge\",\"billingScopeId\":\"wckbasyypnd\",\"term\":\"P3Y\",\"billingPlan\":\"Monthly\",\"quantity\":531743918,\"displayName\":\"phejkotynqgoulz\",\"appliedScopeType\":\"Shared\",\"appliedScopes\":[\"wyqkgfgibm\"],\"appliedScopeProperties\":{\"tenantId\":\"akeqs\",\"managementGroupId\":\"yb\",\"subscriptionId\":\"qedqytbciqfoufl\",\"resourceGroupId\":\"nkzsmodmglou\",\"displayName\":\"b\"},\"renew\":false,\"reservedResourceProperties\":{\"instanceFlexibility\":\"Off\"},\"reviewDateTime\":\"2021-12-01T15:01:53Z\"}")
                .toObject(PurchaseRequestProperties.class);
        Assertions.assertEquals(ReservedResourceType.SQL_EDGE, model.reservedResourceType());
        Assertions.assertEquals("wckbasyypnd", model.billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.billingPlan());
        Assertions.assertEquals(531743918, model.quantity());
        Assertions.assertEquals("phejkotynqgoulz", model.displayName());
        Assertions.assertEquals(AppliedScopeType.SHARED, model.appliedScopeType());
        Assertions.assertEquals("wyqkgfgibm", model.appliedScopes().get(0));
        Assertions.assertEquals("akeqs", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("yb", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("qedqytbciqfoufl", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("nkzsmodmglou", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("b", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.renew());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.reservedResourceProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T15:01:53Z"), model.reviewDateTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PurchaseRequestProperties model =
            new PurchaseRequestProperties()
                .withReservedResourceType(ReservedResourceType.SQL_EDGE)
                .withBillingScopeId("wckbasyypnd")
                .withTerm(ReservationTerm.P3Y)
                .withBillingPlan(ReservationBillingPlan.MONTHLY)
                .withQuantity(531743918)
                .withDisplayName("phejkotynqgoulz")
                .withAppliedScopeType(AppliedScopeType.SHARED)
                .withAppliedScopes(Arrays.asList("wyqkgfgibm"))
                .withAppliedScopeProperties(
                    new AppliedScopeProperties()
                        .withTenantId("akeqs")
                        .withManagementGroupId("yb")
                        .withSubscriptionId("qedqytbciqfoufl")
                        .withResourceGroupId("nkzsmodmglou")
                        .withDisplayName("b"))
                .withRenew(false)
                .withReservedResourceProperties(
                    new PurchaseRequestPropertiesReservedResourceProperties()
                        .withInstanceFlexibility(InstanceFlexibility.OFF))
                .withReviewDateTime(OffsetDateTime.parse("2021-12-01T15:01:53Z"));
        model = BinaryData.fromObject(model).toObject(PurchaseRequestProperties.class);
        Assertions.assertEquals(ReservedResourceType.SQL_EDGE, model.reservedResourceType());
        Assertions.assertEquals("wckbasyypnd", model.billingScopeId());
        Assertions.assertEquals(ReservationTerm.P3Y, model.term());
        Assertions.assertEquals(ReservationBillingPlan.MONTHLY, model.billingPlan());
        Assertions.assertEquals(531743918, model.quantity());
        Assertions.assertEquals("phejkotynqgoulz", model.displayName());
        Assertions.assertEquals(AppliedScopeType.SHARED, model.appliedScopeType());
        Assertions.assertEquals("wyqkgfgibm", model.appliedScopes().get(0));
        Assertions.assertEquals("akeqs", model.appliedScopeProperties().tenantId());
        Assertions.assertEquals("yb", model.appliedScopeProperties().managementGroupId());
        Assertions.assertEquals("qedqytbciqfoufl", model.appliedScopeProperties().subscriptionId());
        Assertions.assertEquals("nkzsmodmglou", model.appliedScopeProperties().resourceGroupId());
        Assertions.assertEquals("b", model.appliedScopeProperties().displayName());
        Assertions.assertEquals(false, model.renew());
        Assertions.assertEquals(InstanceFlexibility.OFF, model.reservedResourceProperties().instanceFlexibility());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-01T15:01:53Z"), model.reviewDateTime());
    }
}
