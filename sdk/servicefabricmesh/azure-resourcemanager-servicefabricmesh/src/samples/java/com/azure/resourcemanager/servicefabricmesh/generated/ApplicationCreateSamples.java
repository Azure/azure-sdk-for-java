// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.generated;

import com.azure.resourcemanager.servicefabricmesh.fluent.models.ServiceResourceDescriptionInner;
import com.azure.resourcemanager.servicefabricmesh.models.ContainerCodePackageProperties;
import com.azure.resourcemanager.servicefabricmesh.models.EndpointProperties;
import com.azure.resourcemanager.servicefabricmesh.models.EndpointRef;
import com.azure.resourcemanager.servicefabricmesh.models.NetworkRef;
import com.azure.resourcemanager.servicefabricmesh.models.OperatingSystemType;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceRequests;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceRequirements;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Application Create. */
public final class ApplicationCreateSamples {
    /*
     * x-ms-original-file: specification/servicefabricmesh/resource-manager/Microsoft.ServiceFabricMesh/preview/2018-09-01-preview/examples/applications/create_update.json
     */
    /**
     * Sample code: CreateOrUpdateApplication.
     *
     * @param manager Entry point to ServiceFabricMeshManager.
     */
    public static void createOrUpdateApplication(
        com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager manager) {
        manager
            .applications()
            .define("sampleApplication")
            .withRegion("EastUS")
            .withExistingResourceGroup("sbz_demo")
            .withTags(mapOf())
            .withDescription("Service Fabric Mesh sample application.")
            .withServices(
                Arrays
                    .asList(
                        new ServiceResourceDescriptionInner()
                            .withName("helloWorldService")
                            .withOsType(OperatingSystemType.LINUX)
                            .withCodePackages(
                                Arrays
                                    .asList(
                                        new ContainerCodePackageProperties()
                                            .withName("helloWorldCode")
                                            .withImage("seabreeze/sbz-helloworld:1.0-alpine")
                                            .withEndpoints(
                                                Arrays
                                                    .asList(
                                                        new EndpointProperties()
                                                            .withName("helloWorldListener")
                                                            .withPort(80)))
                                            .withResources(
                                                new ResourceRequirements()
                                                    .withRequests(
                                                        new ResourceRequests().withMemoryInGB(1.0).withCpu(1.0)))))
                            .withNetworkRefs(
                                Arrays
                                    .asList(
                                        new NetworkRef()
                                            .withName(
                                                "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/sbz_demo/providers/Microsoft.ServiceFabricMesh/networks/sampleNetwork")
                                            .withEndpointRefs(
                                                Arrays.asList(new EndpointRef().withName("helloWorldListener")))))
                            .withDescription("SeaBreeze Hello World Service.")
                            .withReplicaCount(1)))
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
