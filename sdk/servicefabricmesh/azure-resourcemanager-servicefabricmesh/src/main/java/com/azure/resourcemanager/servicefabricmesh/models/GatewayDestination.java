// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes destination endpoint for routing traffic. */
@Fluent
public final class GatewayDestination {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GatewayDestination.class);

    /*
     * Name of the service fabric Mesh application.
     */
    @JsonProperty(value = "applicationName", required = true)
    private String applicationName;

    /*
     * service that contains the endpoint.
     */
    @JsonProperty(value = "serviceName", required = true)
    private String serviceName;

    /*
     * name of the endpoint in the service.
     */
    @JsonProperty(value = "endpointName", required = true)
    private String endpointName;

    /**
     * Get the applicationName property: Name of the service fabric Mesh application.
     *
     * @return the applicationName value.
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * Set the applicationName property: Name of the service fabric Mesh application.
     *
     * @param applicationName the applicationName value to set.
     * @return the GatewayDestination object itself.
     */
    public GatewayDestination withApplicationName(String applicationName) {
        this.applicationName = applicationName;
        return this;
    }

    /**
     * Get the serviceName property: service that contains the endpoint.
     *
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: service that contains the endpoint.
     *
     * @param serviceName the serviceName value to set.
     * @return the GatewayDestination object itself.
     */
    public GatewayDestination withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the endpointName property: name of the endpoint in the service.
     *
     * @return the endpointName value.
     */
    public String endpointName() {
        return this.endpointName;
    }

    /**
     * Set the endpointName property: name of the endpoint in the service.
     *
     * @param endpointName the endpointName value to set.
     * @return the GatewayDestination object itself.
     */
    public GatewayDestination withEndpointName(String endpointName) {
        this.endpointName = endpointName;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (applicationName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property applicationName in model GatewayDestination"));
        }
        if (serviceName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property serviceName in model GatewayDestination"));
        }
        if (endpointName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property endpointName in model GatewayDestination"));
        }
    }
}
