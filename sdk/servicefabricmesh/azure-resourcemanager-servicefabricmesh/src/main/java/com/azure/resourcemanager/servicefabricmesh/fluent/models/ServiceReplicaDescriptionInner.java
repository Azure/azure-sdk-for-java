// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.models.ContainerCodePackageProperties;
import com.azure.resourcemanager.servicefabricmesh.models.DiagnosticsRef;
import com.azure.resourcemanager.servicefabricmesh.models.NetworkRef;
import com.azure.resourcemanager.servicefabricmesh.models.OperatingSystemType;
import com.azure.resourcemanager.servicefabricmesh.models.ServiceReplicaProperties;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes a replica of a service resource. */
@Fluent
public final class ServiceReplicaDescriptionInner extends ServiceReplicaProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceReplicaDescriptionInner.class);

    /*
     * Name of the replica.
     */
    @JsonProperty(value = "replicaName", required = true)
    private String replicaName;

    /**
     * Get the replicaName property: Name of the replica.
     *
     * @return the replicaName value.
     */
    public String replicaName() {
        return this.replicaName;
    }

    /**
     * Set the replicaName property: Name of the replica.
     *
     * @param replicaName the replicaName value to set.
     * @return the ServiceReplicaDescriptionInner object itself.
     */
    public ServiceReplicaDescriptionInner withReplicaName(String replicaName) {
        this.replicaName = replicaName;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceReplicaDescriptionInner withOsType(OperatingSystemType osType) {
        super.withOsType(osType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceReplicaDescriptionInner withCodePackages(List<ContainerCodePackageProperties> codePackages) {
        super.withCodePackages(codePackages);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceReplicaDescriptionInner withNetworkRefs(List<NetworkRef> networkRefs) {
        super.withNetworkRefs(networkRefs);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceReplicaDescriptionInner withDiagnostics(DiagnosticsRef diagnostics) {
        super.withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (replicaName() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property replicaName in model ServiceReplicaDescriptionInner"));
        }
    }
}
