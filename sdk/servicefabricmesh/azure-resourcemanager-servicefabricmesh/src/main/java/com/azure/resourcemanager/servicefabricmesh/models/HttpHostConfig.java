// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes the hostname properties for http routing. */
@Fluent
public final class HttpHostConfig {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HttpHostConfig.class);

    /*
     * http hostname config name.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * Route information to use for routing. Routes are processed in the order
     * they are specified. Specify routes that are more specific before routes
     * that can handle general cases.
     */
    @JsonProperty(value = "routes", required = true)
    private List<HttpRouteConfig> routes;

    /**
     * Get the name property: http hostname config name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: http hostname config name.
     *
     * @param name the name value to set.
     * @return the HttpHostConfig object itself.
     */
    public HttpHostConfig withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the routes property: Route information to use for routing. Routes are processed in the order they are
     * specified. Specify routes that are more specific before routes that can handle general cases.
     *
     * @return the routes value.
     */
    public List<HttpRouteConfig> routes() {
        return this.routes;
    }

    /**
     * Set the routes property: Route information to use for routing. Routes are processed in the order they are
     * specified. Specify routes that are more specific before routes that can handle general cases.
     *
     * @param routes the routes value to set.
     * @return the HttpHostConfig object itself.
     */
    public HttpHostConfig withRoutes(List<HttpRouteConfig> routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model HttpHostConfig"));
        }
        if (routes() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property routes in model HttpHostConfig"));
        } else {
            routes().forEach(e -> e.validate());
        }
    }
}
