// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.fluent.SecretValuesClient;
import com.azure.resourcemanager.servicefabricmesh.fluent.models.SecretValueInner;
import com.azure.resourcemanager.servicefabricmesh.fluent.models.SecretValueResourceDescriptionInner;
import com.azure.resourcemanager.servicefabricmesh.models.SecretValue;
import com.azure.resourcemanager.servicefabricmesh.models.SecretValueResourceDescription;
import com.azure.resourcemanager.servicefabricmesh.models.SecretValues;

public final class SecretValuesImpl implements SecretValues {
    private static final ClientLogger LOGGER = new ClientLogger(SecretValuesImpl.class);

    private final SecretValuesClient innerClient;

    private final com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager serviceManager;

    public SecretValuesImpl(
        SecretValuesClient innerClient,
        com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public SecretValueResourceDescription get(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        SecretValueResourceDescriptionInner inner =
            this.serviceClient().get(resourceGroupName, secretResourceName, secretValueResourceName);
        if (inner != null) {
            return new SecretValueResourceDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SecretValueResourceDescription> getWithResponse(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        Response<SecretValueResourceDescriptionInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SecretValueResourceDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        this.serviceClient().delete(resourceGroupName, secretResourceName, secretValueResourceName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, context);
    }

    public PagedIterable<SecretValueResourceDescription> list(String resourceGroupName, String secretResourceName) {
        PagedIterable<SecretValueResourceDescriptionInner> inner =
            this.serviceClient().list(resourceGroupName, secretResourceName);
        return Utils.mapPage(inner, inner1 -> new SecretValueResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<SecretValueResourceDescription> list(
        String resourceGroupName, String secretResourceName, Context context) {
        PagedIterable<SecretValueResourceDescriptionInner> inner =
            this.serviceClient().list(resourceGroupName, secretResourceName, context);
        return Utils.mapPage(inner, inner1 -> new SecretValueResourceDescriptionImpl(inner1, this.manager()));
    }

    public SecretValue listValue(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        SecretValueInner inner =
            this.serviceClient().listValue(resourceGroupName, secretResourceName, secretValueResourceName);
        if (inner != null) {
            return new SecretValueImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SecretValue> listValueWithResponse(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        Response<SecretValueInner> inner =
            this
                .serviceClient()
                .listValueWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SecretValueImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SecretValueResourceDescription getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretResourceName = Utils.getValueFromIdByName(id, "secrets");
        if (secretResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        String secretValueResourceName = Utils.getValueFromIdByName(id, "values");
        if (secretValueResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'values'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, Context.NONE)
            .getValue();
    }

    public Response<SecretValueResourceDescription> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretResourceName = Utils.getValueFromIdByName(id, "secrets");
        if (secretResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        String secretValueResourceName = Utils.getValueFromIdByName(id, "values");
        if (secretValueResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'values'.", id)));
        }
        return this.getWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretResourceName = Utils.getValueFromIdByName(id, "secrets");
        if (secretResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        String secretValueResourceName = Utils.getValueFromIdByName(id, "values");
        if (secretValueResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'values'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String secretResourceName = Utils.getValueFromIdByName(id, "secrets");
        if (secretResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'secrets'.", id)));
        }
        String secretValueResourceName = Utils.getValueFromIdByName(id, "values");
        if (secretValueResourceName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'values'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, secretResourceName, secretValueResourceName, context);
    }

    private SecretValuesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager manager() {
        return this.serviceManager;
    }

    public SecretValueResourceDescriptionImpl define(String name) {
        return new SecretValueResourceDescriptionImpl(name, this.manager());
    }
}
