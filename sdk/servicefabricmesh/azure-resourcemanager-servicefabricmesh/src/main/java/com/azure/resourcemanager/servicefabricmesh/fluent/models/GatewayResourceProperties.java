// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.models.HttpConfig;
import com.azure.resourcemanager.servicefabricmesh.models.NetworkRef;
import com.azure.resourcemanager.servicefabricmesh.models.ProvisionedResourceProperties;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceStatus;
import com.azure.resourcemanager.servicefabricmesh.models.TcpConfig;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** This type describes properties of a gateway resource. */
@Fluent
public final class GatewayResourceProperties extends ProvisionedResourceProperties {
    /*
     * User readable description of the gateway.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Network the gateway should listen on for requests.
     */
    @JsonProperty(value = "sourceNetwork", required = true)
    private NetworkRef sourceNetwork;

    /*
     * Network that the Application is using.
     */
    @JsonProperty(value = "destinationNetwork", required = true)
    private NetworkRef destinationNetwork;

    /*
     * Configuration for tcp connectivity for this gateway.
     */
    @JsonProperty(value = "tcp")
    private List<TcpConfig> tcp;

    /*
     * Configuration for http connectivity for this gateway.
     */
    @JsonProperty(value = "http")
    private List<HttpConfig> http;

    /*
     * Status of the resource.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceStatus status;

    /*
     * Gives additional information about the current status of the gateway.
     */
    @JsonProperty(value = "statusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String statusDetails;

    /*
     * IP address of the gateway. This is populated in the response and is
     * ignored for incoming requests.
     */
    @JsonProperty(value = "ipAddress", access = JsonProperty.Access.WRITE_ONLY)
    private String ipAddress;

    /**
     * Get the description property: User readable description of the gateway.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User readable description of the gateway.
     *
     * @param description the description value to set.
     * @return the GatewayResourceProperties object itself.
     */
    public GatewayResourceProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the sourceNetwork property: Network the gateway should listen on for requests.
     *
     * @return the sourceNetwork value.
     */
    public NetworkRef sourceNetwork() {
        return this.sourceNetwork;
    }

    /**
     * Set the sourceNetwork property: Network the gateway should listen on for requests.
     *
     * @param sourceNetwork the sourceNetwork value to set.
     * @return the GatewayResourceProperties object itself.
     */
    public GatewayResourceProperties withSourceNetwork(NetworkRef sourceNetwork) {
        this.sourceNetwork = sourceNetwork;
        return this;
    }

    /**
     * Get the destinationNetwork property: Network that the Application is using.
     *
     * @return the destinationNetwork value.
     */
    public NetworkRef destinationNetwork() {
        return this.destinationNetwork;
    }

    /**
     * Set the destinationNetwork property: Network that the Application is using.
     *
     * @param destinationNetwork the destinationNetwork value to set.
     * @return the GatewayResourceProperties object itself.
     */
    public GatewayResourceProperties withDestinationNetwork(NetworkRef destinationNetwork) {
        this.destinationNetwork = destinationNetwork;
        return this;
    }

    /**
     * Get the tcp property: Configuration for tcp connectivity for this gateway.
     *
     * @return the tcp value.
     */
    public List<TcpConfig> tcp() {
        return this.tcp;
    }

    /**
     * Set the tcp property: Configuration for tcp connectivity for this gateway.
     *
     * @param tcp the tcp value to set.
     * @return the GatewayResourceProperties object itself.
     */
    public GatewayResourceProperties withTcp(List<TcpConfig> tcp) {
        this.tcp = tcp;
        return this;
    }

    /**
     * Get the http property: Configuration for http connectivity for this gateway.
     *
     * @return the http value.
     */
    public List<HttpConfig> http() {
        return this.http;
    }

    /**
     * Set the http property: Configuration for http connectivity for this gateway.
     *
     * @param http the http value to set.
     * @return the GatewayResourceProperties object itself.
     */
    public GatewayResourceProperties withHttp(List<HttpConfig> http) {
        this.http = http;
        return this;
    }

    /**
     * Get the status property: Status of the resource.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.status;
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the gateway.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the ipAddress property: IP address of the gateway. This is populated in the response and is ignored for
     * incoming requests.
     *
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sourceNetwork() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property sourceNetwork in model GatewayResourceProperties"));
        } else {
            sourceNetwork().validate();
        }
        if (destinationNetwork() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property destinationNetwork in model GatewayResourceProperties"));
        } else {
            destinationNetwork().validate();
        }
        if (tcp() != null) {
            tcp().forEach(e -> e.validate());
        }
        if (http() != null) {
            http().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GatewayResourceProperties.class);
}
