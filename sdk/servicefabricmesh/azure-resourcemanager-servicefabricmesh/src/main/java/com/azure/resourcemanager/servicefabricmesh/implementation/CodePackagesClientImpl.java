// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.fluent.CodePackagesClient;
import com.azure.resourcemanager.servicefabricmesh.fluent.models.ContainerLogsInner;
import com.azure.resourcemanager.servicefabricmesh.models.ErrorErrorModelException;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CodePackagesClient. */
public final class CodePackagesClientImpl implements CodePackagesClient {
    private final ClientLogger logger = new ClientLogger(CodePackagesClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final CodePackagesService service;

    /** The service client containing this operation class. */
    private final ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of CodePackagesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CodePackagesClientImpl(ServiceFabricMeshManagementClientImpl client) {
        this.service =
            RestProxy.create(CodePackagesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricMeshManagementClientCodePackages to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricMeshMan")
    private interface CodePackagesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh"
                + "/applications/{applicationResourceName}/services/{serviceResourceName}/replicas/{replicaName}"
                + "/codePackages/{codePackageName}/logs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<ContainerLogsInner>> getContainerLogs(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "applicationResourceName", encoded = true) String applicationResourceName,
            @PathParam(value = "serviceResourceName", encoded = true) String serviceResourceName,
            @PathParam(value = "replicaName", encoded = true) String replicaName,
            @PathParam("codePackageName") String codePackageName,
            @QueryParam("tail") Integer tail,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the logs for the container of the specified code package of the service replica.
     *
     * @param resourceGroupName Azure resource group name.
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param codePackageName The name of code package of the service.
     * @param tail Number of lines to show from the end of the logs. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for the container of the specified code package of the service replica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerLogsInner>> getContainerLogsWithResponseAsync(
        String resourceGroupName,
        String applicationResourceName,
        String serviceResourceName,
        String replicaName,
        String codePackageName,
        Integer tail) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationResourceName is required and cannot be null."));
        }
        if (serviceResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serviceResourceName is required and cannot be null."));
        }
        if (replicaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter replicaName is required and cannot be null."));
        }
        if (codePackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter codePackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .getContainerLogs(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            applicationResourceName,
                            serviceResourceName,
                            replicaName,
                            codePackageName,
                            tail,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the logs for the container of the specified code package of the service replica.
     *
     * @param resourceGroupName Azure resource group name.
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param codePackageName The name of code package of the service.
     * @param tail Number of lines to show from the end of the logs. Default is 100.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for the container of the specified code package of the service replica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ContainerLogsInner>> getContainerLogsWithResponseAsync(
        String resourceGroupName,
        String applicationResourceName,
        String serviceResourceName,
        String replicaName,
        String codePackageName,
        Integer tail,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (applicationResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter applicationResourceName is required and cannot be null."));
        }
        if (serviceResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serviceResourceName is required and cannot be null."));
        }
        if (replicaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter replicaName is required and cannot be null."));
        }
        if (codePackageName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter codePackageName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .getContainerLogs(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                applicationResourceName,
                serviceResourceName,
                replicaName,
                codePackageName,
                tail,
                accept,
                context);
    }

    /**
     * Gets the logs for the container of the specified code package of the service replica.
     *
     * @param resourceGroupName Azure resource group name.
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param codePackageName The name of code package of the service.
     * @param tail Number of lines to show from the end of the logs. Default is 100.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for the container of the specified code package of the service replica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ContainerLogsInner> getContainerLogsAsync(
        String resourceGroupName,
        String applicationResourceName,
        String serviceResourceName,
        String replicaName,
        String codePackageName,
        Integer tail) {
        return getContainerLogsWithResponseAsync(
                resourceGroupName, applicationResourceName, serviceResourceName, replicaName, codePackageName, tail)
            .flatMap(
                (Response<ContainerLogsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the logs for the container of the specified code package of the service replica.
     *
     * @param resourceGroupName Azure resource group name.
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param codePackageName The name of code package of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for the container of the specified code package of the service replica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ContainerLogsInner> getContainerLogsAsync(
        String resourceGroupName,
        String applicationResourceName,
        String serviceResourceName,
        String replicaName,
        String codePackageName) {
        final Integer tail = null;
        return getContainerLogsWithResponseAsync(
                resourceGroupName, applicationResourceName, serviceResourceName, replicaName, codePackageName, tail)
            .flatMap(
                (Response<ContainerLogsInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets the logs for the container of the specified code package of the service replica.
     *
     * @param resourceGroupName Azure resource group name.
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param codePackageName The name of code package of the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for the container of the specified code package of the service replica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContainerLogsInner getContainerLogs(
        String resourceGroupName,
        String applicationResourceName,
        String serviceResourceName,
        String replicaName,
        String codePackageName) {
        final Integer tail = null;
        return getContainerLogsAsync(
                resourceGroupName, applicationResourceName, serviceResourceName, replicaName, codePackageName, tail)
            .block();
    }

    /**
     * Gets the logs for the container of the specified code package of the service replica.
     *
     * @param resourceGroupName Azure resource group name.
     * @param applicationResourceName The identity of the application.
     * @param serviceResourceName The identity of the service.
     * @param replicaName Service Fabric replica name.
     * @param codePackageName The name of code package of the service.
     * @param tail Number of lines to show from the end of the logs. Default is 100.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for the container of the specified code package of the service replica.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ContainerLogsInner> getContainerLogsWithResponse(
        String resourceGroupName,
        String applicationResourceName,
        String serviceResourceName,
        String replicaName,
        String codePackageName,
        Integer tail,
        Context context) {
        return getContainerLogsWithResponseAsync(
                resourceGroupName,
                applicationResourceName,
                serviceResourceName,
                replicaName,
                codePackageName,
                tail,
                context)
            .block();
    }
}
