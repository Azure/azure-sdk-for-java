// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.models.HttpConfig;
import com.azure.resourcemanager.servicefabricmesh.models.NetworkRef;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceStatus;
import com.azure.resourcemanager.servicefabricmesh.models.TcpConfig;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** This type describes a gateway resource. */
@Fluent
public final class GatewayResourceDescriptionInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GatewayResourceDescriptionInner.class);

    /*
     * This type describes properties of a gateway resource.
     */
    @JsonProperty(value = "properties", required = true)
    private GatewayResourceProperties innerProperties = new GatewayResourceProperties();

    /**
     * Get the innerProperties property: This type describes properties of a gateway resource.
     *
     * @return the innerProperties value.
     */
    private GatewayResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public GatewayResourceDescriptionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public GatewayResourceDescriptionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the description property: User readable description of the gateway.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: User readable description of the gateway.
     *
     * @param description the description value to set.
     * @return the GatewayResourceDescriptionInner object itself.
     */
    public GatewayResourceDescriptionInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayResourceProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the sourceNetwork property: Network the gateway should listen on for requests.
     *
     * @return the sourceNetwork value.
     */
    public NetworkRef sourceNetwork() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceNetwork();
    }

    /**
     * Set the sourceNetwork property: Network the gateway should listen on for requests.
     *
     * @param sourceNetwork the sourceNetwork value to set.
     * @return the GatewayResourceDescriptionInner object itself.
     */
    public GatewayResourceDescriptionInner withSourceNetwork(NetworkRef sourceNetwork) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayResourceProperties();
        }
        this.innerProperties().withSourceNetwork(sourceNetwork);
        return this;
    }

    /**
     * Get the destinationNetwork property: Network that the Application is using.
     *
     * @return the destinationNetwork value.
     */
    public NetworkRef destinationNetwork() {
        return this.innerProperties() == null ? null : this.innerProperties().destinationNetwork();
    }

    /**
     * Set the destinationNetwork property: Network that the Application is using.
     *
     * @param destinationNetwork the destinationNetwork value to set.
     * @return the GatewayResourceDescriptionInner object itself.
     */
    public GatewayResourceDescriptionInner withDestinationNetwork(NetworkRef destinationNetwork) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayResourceProperties();
        }
        this.innerProperties().withDestinationNetwork(destinationNetwork);
        return this;
    }

    /**
     * Get the tcp property: Configuration for tcp connectivity for this gateway.
     *
     * @return the tcp value.
     */
    public List<TcpConfig> tcp() {
        return this.innerProperties() == null ? null : this.innerProperties().tcp();
    }

    /**
     * Set the tcp property: Configuration for tcp connectivity for this gateway.
     *
     * @param tcp the tcp value to set.
     * @return the GatewayResourceDescriptionInner object itself.
     */
    public GatewayResourceDescriptionInner withTcp(List<TcpConfig> tcp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayResourceProperties();
        }
        this.innerProperties().withTcp(tcp);
        return this;
    }

    /**
     * Get the http property: Configuration for http connectivity for this gateway.
     *
     * @return the http value.
     */
    public List<HttpConfig> http() {
        return this.innerProperties() == null ? null : this.innerProperties().http();
    }

    /**
     * Set the http property: Configuration for http connectivity for this gateway.
     *
     * @param http the http value to set.
     * @return the GatewayResourceDescriptionInner object itself.
     */
    public GatewayResourceDescriptionInner withHttp(List<HttpConfig> http) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GatewayResourceProperties();
        }
        this.innerProperties().withHttp(http);
        return this;
    }

    /**
     * Get the status property: Status of the resource.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the gateway.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().statusDetails();
    }

    /**
     * Get the ipAddress property: IP address of the gateway. This is populated in the response and is ignored for
     * incoming requests.
     *
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.innerProperties() == null ? null : this.innerProperties().ipAddress();
    }

    /**
     * Get the provisioningState property: State of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model GatewayResourceDescriptionInner"));
        } else {
            innerProperties().validate();
        }
    }
}
