// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.models.DiagnosticsDescription;
import com.azure.resourcemanager.servicefabricmesh.models.HealthState;
import com.azure.resourcemanager.servicefabricmesh.models.ProvisionedResourceProperties;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** This type describes properties of an application resource. */
@Fluent
public final class ApplicationResourceProperties extends ProvisionedResourceProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ApplicationResourceProperties.class);

    /*
     * User readable description of the application.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Describes the services in the application. This property is used to
     * create or modify services of the application. On get only the name of
     * the service is returned. The service description can be obtained by
     * querying for the service resource.
     */
    @JsonProperty(value = "services")
    private List<ServiceResourceDescriptionInner> services;

    /*
     * Describes the diagnostics definition and usage for an application
     * resource.
     */
    @JsonProperty(value = "diagnostics")
    private DiagnosticsDescription diagnostics;

    /*
     * Internal - used by Visual Studio to setup the debugging session on the
     * local development environment.
     */
    @JsonProperty(value = "debugParams")
    private String debugParams;

    /*
     * Names of the services in the application.
     */
    @JsonProperty(value = "serviceNames", access = JsonProperty.Access.WRITE_ONLY)
    private List<String> serviceNames;

    /*
     * Status of the application.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceStatus status;

    /*
     * Gives additional information about the current status of the
     * application.
     */
    @JsonProperty(value = "statusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String statusDetails;

    /*
     * Describes the health state of an application resource.
     */
    @JsonProperty(value = "healthState", access = JsonProperty.Access.WRITE_ONLY)
    private HealthState healthState;

    /*
     * When the application's health state is not 'Ok', this additional details
     * from service fabric Health Manager for the user to know why the
     * application is marked unhealthy.
     */
    @JsonProperty(value = "unhealthyEvaluation", access = JsonProperty.Access.WRITE_ONLY)
    private String unhealthyEvaluation;

    /**
     * Get the description property: User readable description of the application.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User readable description of the application.
     *
     * @param description the description value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the services property: Describes the services in the application. This property is used to create or modify
     * services of the application. On get only the name of the service is returned. The service description can be
     * obtained by querying for the service resource.
     *
     * @return the services value.
     */
    public List<ServiceResourceDescriptionInner> services() {
        return this.services;
    }

    /**
     * Set the services property: Describes the services in the application. This property is used to create or modify
     * services of the application. On get only the name of the service is returned. The service description can be
     * obtained by querying for the service resource.
     *
     * @param services the services value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withServices(List<ServiceResourceDescriptionInner> services) {
        this.services = services;
        return this;
    }

    /**
     * Get the diagnostics property: Describes the diagnostics definition and usage for an application resource.
     *
     * @return the diagnostics value.
     */
    public DiagnosticsDescription diagnostics() {
        return this.diagnostics;
    }

    /**
     * Set the diagnostics property: Describes the diagnostics definition and usage for an application resource.
     *
     * @param diagnostics the diagnostics value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withDiagnostics(DiagnosticsDescription diagnostics) {
        this.diagnostics = diagnostics;
        return this;
    }

    /**
     * Get the debugParams property: Internal - used by Visual Studio to setup the debugging session on the local
     * development environment.
     *
     * @return the debugParams value.
     */
    public String debugParams() {
        return this.debugParams;
    }

    /**
     * Set the debugParams property: Internal - used by Visual Studio to setup the debugging session on the local
     * development environment.
     *
     * @param debugParams the debugParams value to set.
     * @return the ApplicationResourceProperties object itself.
     */
    public ApplicationResourceProperties withDebugParams(String debugParams) {
        this.debugParams = debugParams;
        return this;
    }

    /**
     * Get the serviceNames property: Names of the services in the application.
     *
     * @return the serviceNames value.
     */
    public List<String> serviceNames() {
        return this.serviceNames;
    }

    /**
     * Get the status property: Status of the application.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.status;
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the application.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the healthState property: Describes the health state of an application resource.
     *
     * @return the healthState value.
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Get the unhealthyEvaluation property: When the application's health state is not 'Ok', this additional details
     * from service fabric Health Manager for the user to know why the application is marked unhealthy.
     *
     * @return the unhealthyEvaluation value.
     */
    public String unhealthyEvaluation() {
        return this.unhealthyEvaluation;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (services() != null) {
            services().forEach(e -> e.validate());
        }
        if (diagnostics() != null) {
            diagnostics().validate();
        }
    }
}
