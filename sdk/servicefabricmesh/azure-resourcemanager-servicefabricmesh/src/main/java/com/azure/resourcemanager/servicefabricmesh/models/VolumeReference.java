// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes a reference to a volume resource. */
@Fluent
public class VolumeReference {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VolumeReference.class);

    /*
     * Name of the volume being referenced.
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /*
     * The flag indicating whether the volume is read only. Default is 'false'.
     */
    @JsonProperty(value = "readOnly")
    private Boolean readOnly;

    /*
     * The path within the container at which the volume should be mounted.
     * Only valid path characters are allowed.
     */
    @JsonProperty(value = "destinationPath", required = true)
    private String destinationPath;

    /**
     * Get the name property: Name of the volume being referenced.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the volume being referenced.
     *
     * @param name the name value to set.
     * @return the VolumeReference object itself.
     */
    public VolumeReference withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the readOnly property: The flag indicating whether the volume is read only. Default is 'false'.
     *
     * @return the readOnly value.
     */
    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * Set the readOnly property: The flag indicating whether the volume is read only. Default is 'false'.
     *
     * @param readOnly the readOnly value to set.
     * @return the VolumeReference object itself.
     */
    public VolumeReference withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }

    /**
     * Get the destinationPath property: The path within the container at which the volume should be mounted. Only valid
     * path characters are allowed.
     *
     * @return the destinationPath value.
     */
    public String destinationPath() {
        return this.destinationPath;
    }

    /**
     * Set the destinationPath property: The path within the container at which the volume should be mounted. Only valid
     * path characters are allowed.
     *
     * @param destinationPath the destinationPath value to set.
     * @return the VolumeReference object itself.
     */
    public VolumeReference withDestinationPath(String destinationPath) {
        this.destinationPath = destinationPath;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model VolumeReference"));
        }
        if (destinationPath() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property destinationPath in model VolumeReference"));
        }
    }
}
