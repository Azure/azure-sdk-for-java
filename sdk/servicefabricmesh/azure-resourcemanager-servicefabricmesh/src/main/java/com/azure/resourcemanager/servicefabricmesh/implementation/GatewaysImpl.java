// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.fluent.GatewaysClient;
import com.azure.resourcemanager.servicefabricmesh.fluent.models.GatewayResourceDescriptionInner;
import com.azure.resourcemanager.servicefabricmesh.models.GatewayResourceDescription;
import com.azure.resourcemanager.servicefabricmesh.models.Gateways;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class GatewaysImpl implements Gateways {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(GatewaysImpl.class);

    private final GatewaysClient innerClient;

    private final com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager serviceManager;

    public GatewaysImpl(
        GatewaysClient innerClient,
        com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public GatewayResourceDescription getByResourceGroup(String resourceGroupName, String gatewayResourceName) {
        GatewayResourceDescriptionInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, gatewayResourceName);
        if (inner != null) {
            return new GatewayResourceDescriptionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GatewayResourceDescription> getByResourceGroupWithResponse(
        String resourceGroupName, String gatewayResourceName, Context context) {
        Response<GatewayResourceDescriptionInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, gatewayResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new GatewayResourceDescriptionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String gatewayResourceName) {
        this.serviceClient().delete(resourceGroupName, gatewayResourceName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String gatewayResourceName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, gatewayResourceName, context);
    }

    public PagedIterable<GatewayResourceDescription> listByResourceGroup(String resourceGroupName) {
        PagedIterable<GatewayResourceDescriptionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new GatewayResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<GatewayResourceDescription> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<GatewayResourceDescriptionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new GatewayResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<GatewayResourceDescription> list() {
        PagedIterable<GatewayResourceDescriptionInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new GatewayResourceDescriptionImpl(inner1, this.manager()));
    }

    public PagedIterable<GatewayResourceDescription> list(Context context) {
        PagedIterable<GatewayResourceDescriptionInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new GatewayResourceDescriptionImpl(inner1, this.manager()));
    }

    public GatewayResourceDescription getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String gatewayResourceName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, gatewayResourceName, Context.NONE).getValue();
    }

    public Response<GatewayResourceDescription> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String gatewayResourceName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, gatewayResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String gatewayResourceName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, gatewayResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String gatewayResourceName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayResourceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, gatewayResourceName, context);
    }

    private GatewaysClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.servicefabricmesh.ServiceFabricMeshManager manager() {
        return this.serviceManager;
    }

    public GatewayResourceDescriptionImpl define(String name) {
        return new GatewayResourceDescriptionImpl(name, this.manager());
    }
}
