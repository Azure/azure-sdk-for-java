// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.servicefabricmesh.fluent.SecretValuesClient;
import com.azure.resourcemanager.servicefabricmesh.fluent.models.SecretValueInner;
import com.azure.resourcemanager.servicefabricmesh.fluent.models.SecretValueResourceDescriptionInner;
import com.azure.resourcemanager.servicefabricmesh.models.ErrorErrorModelException;
import com.azure.resourcemanager.servicefabricmesh.models.SecretValueResourceDescriptionList;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SecretValuesClient. */
public final class SecretValuesClientImpl implements SecretValuesClient {
    /** The proxy service used to perform REST calls. */
    private final SecretValuesService service;

    /** The service client containing this operation class. */
    private final ServiceFabricMeshManagementClientImpl client;

    /**
     * Initializes an instance of SecretValuesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SecretValuesClientImpl(ServiceFabricMeshManagementClientImpl client) {
        this.service =
            RestProxy.create(SecretValuesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ServiceFabricMeshManagementClientSecretValues to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ServiceFabricMeshMan")
    private interface SecretValuesService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh"
                + "/secrets/{secretResourceName}/values/{secretValueResourceName}")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<SecretValueResourceDescriptionInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
            @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
            @BodyParam("application/json") SecretValueResourceDescriptionInner secretValueResourceDescription,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh"
                + "/secrets/{secretResourceName}/values/{secretValueResourceName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<SecretValueResourceDescriptionInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
            @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh"
                + "/secrets/{secretResourceName}/values/{secretValueResourceName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
            @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh"
                + "/secrets/{secretResourceName}/values")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<SecretValueResourceDescriptionList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh"
                + "/secrets/{secretResourceName}/values/{secretValueResourceName}/list_value")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<SecretValueInner>> listValue(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @QueryParam("api-version") String apiVersion,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam(value = "secretResourceName", encoded = true) String secretResourceName,
            @PathParam(value = "secretValueResourceName", encoded = true) String secretValueResourceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorErrorModelException.class)
        Mono<Response<SecretValueResourceDescriptionList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type describes a value of a secret resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecretValueResourceDescriptionInner>> createWithResponseAsync(
        String resourceGroupName,
        String secretResourceName,
        String secretValueResourceName,
        SecretValueResourceDescriptionInner secretValueResourceDescription) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        if (secretValueResourceDescription == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter secretValueResourceDescription is required and cannot be null."));
        } else {
            secretValueResourceDescription.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            secretResourceName,
                            secretValueResourceName,
                            secretValueResourceDescription,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type describes a value of a secret resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecretValueResourceDescriptionInner>> createWithResponseAsync(
        String resourceGroupName,
        String secretResourceName,
        String secretValueResourceName,
        SecretValueResourceDescriptionInner secretValueResourceDescription,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        if (secretValueResourceDescription == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter secretValueResourceDescription is required and cannot be null."));
        } else {
            secretValueResourceDescription.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                secretResourceName,
                secretValueResourceName,
                secretValueResourceDescription,
                accept,
                context);
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type describes a value of a secret resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecretValueResourceDescriptionInner> createAsync(
        String resourceGroupName,
        String secretResourceName,
        String secretValueResourceName,
        SecretValueResourceDescriptionInner secretValueResourceDescription) {
        return createWithResponseAsync(
                resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type describes a value of a secret resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretValueResourceDescriptionInner create(
        String resourceGroupName,
        String secretResourceName,
        String secretValueResourceName,
        SecretValueResourceDescriptionInner secretValueResourceDescription) {
        return createAsync(
                resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription)
            .block();
    }

    /**
     * Creates a new value of the specified secret resource. The name of the value is typically the version identifier.
     * Once created the value cannot be changed.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param secretValueResourceDescription Description for creating a value of a secret resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type describes a value of a secret resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SecretValueResourceDescriptionInner> createWithResponse(
        String resourceGroupName,
        String secretResourceName,
        String secretValueResourceName,
        SecretValueResourceDescriptionInner secretValueResourceDescription,
        Context context) {
        return createWithResponseAsync(
                resourceGroupName, secretResourceName, secretValueResourceName, secretValueResourceDescription, context)
            .block();
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified named secret value resources along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecretValueResourceDescriptionInner>> getWithResponseAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            secretResourceName,
                            secretValueResourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified named secret value resources along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecretValueResourceDescriptionInner>> getWithResponseAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                secretResourceName,
                secretValueResourceName,
                accept,
                context);
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified named secret value resources on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecretValueResourceDescriptionInner> getAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return getWithResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified named secret value resources.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretValueResourceDescriptionInner get(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return getAsync(resourceGroupName, secretResourceName, secretValueResourceName).block();
    }

    /**
     * Get the information about the specified named secret value resources. The information does not include the actual
     * value of the secret.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the information about the specified named secret value resources along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SecretValueResourceDescriptionInner> getWithResponse(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        return getWithResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName, context).block();
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            secretResourceName,
                            secretValueResourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                secretResourceName,
                secretValueResourceName,
                accept,
                context);
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return deleteWithResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        deleteAsync(resourceGroupName, secretResourceName, secretValueResourceName).block();
    }

    /**
     * Deletes the secret value resource identified by the name. The name of the resource is typically the version
     * associated with that value. Deletion will fail if the specified value is in use.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName, context).block();
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all secret value resources of the specified secret resource along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecretValueResourceDescriptionInner>> listSinglePageAsync(
        String resourceGroupName, String secretResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            secretResourceName,
                            accept,
                            context))
            .<PagedResponse<SecretValueResourceDescriptionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all secret value resources of the specified secret resource along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecretValueResourceDescriptionInner>> listSinglePageAsync(
        String resourceGroupName, String secretResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                secretResourceName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all secret value resources of the specified secret resource as paginated response with
     *     {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SecretValueResourceDescriptionInner> listAsync(
        String resourceGroupName, String secretResourceName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, secretResourceName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all secret value resources of the specified secret resource as paginated response with
     *     {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SecretValueResourceDescriptionInner> listAsync(
        String resourceGroupName, String secretResourceName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, secretResourceName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all secret value resources of the specified secret resource as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecretValueResourceDescriptionInner> list(
        String resourceGroupName, String secretResourceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, secretResourceName));
    }

    /**
     * Gets information about all secret value resources of the specified secret resource. The information includes the
     * names of the secret value resources, but not the actual values.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about all secret value resources of the specified secret resource as paginated response with
     *     {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SecretValueResourceDescriptionInner> list(
        String resourceGroupName, String secretResourceName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, secretResourceName, context));
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type represents the unencrypted value of the secret along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecretValueInner>> listValueWithResponseAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listValue(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            this.client.getApiVersion(),
                            resourceGroupName,
                            secretResourceName,
                            secretValueResourceName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type represents the unencrypted value of the secret along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SecretValueInner>> listValueWithResponseAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (secretResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter secretResourceName is required and cannot be null."));
        }
        if (secretValueResourceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter secretValueResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listValue(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                this.client.getApiVersion(),
                resourceGroupName,
                secretResourceName,
                secretValueResourceName,
                accept,
                context);
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type represents the unencrypted value of the secret on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SecretValueInner> listValueAsync(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return listValueWithResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type represents the unencrypted value of the secret.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SecretValueInner listValue(
        String resourceGroupName, String secretResourceName, String secretValueResourceName) {
        return listValueAsync(resourceGroupName, secretResourceName, secretValueResourceName).block();
    }

    /**
     * Lists the decrypted value of the specified named value of the secret resource. This is a privileged operation.
     *
     * @param resourceGroupName Azure resource group name.
     * @param secretResourceName The name of the secret resource.
     * @param secretValueResourceName The name of the secret resource value which is typically the version identifier
     *     for the value.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this type represents the unencrypted value of the secret along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SecretValueInner> listValueWithResponse(
        String resourceGroupName, String secretResourceName, String secretValueResourceName, Context context) {
        return listValueWithResponseAsync(resourceGroupName, secretResourceName, secretValueResourceName, context)
            .block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of values of a secret resource along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecretValueResourceDescriptionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SecretValueResourceDescriptionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorErrorModelException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a pageable list of values of a secret resource along with {@link PagedResponse} on successful completion
     *     of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SecretValueResourceDescriptionInner>> listNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
