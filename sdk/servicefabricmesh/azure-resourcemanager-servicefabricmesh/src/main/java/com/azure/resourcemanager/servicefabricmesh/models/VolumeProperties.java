// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Describes properties of a volume resource. */
@Fluent
public class VolumeProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VolumeProperties.class);

    /*
     * User readable description of the volume.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Status of the volume.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceStatus status;

    /*
     * Gives additional information about the current status of the volume.
     */
    @JsonProperty(value = "statusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String statusDetails;

    /*
     * Provider of the volume.
     */
    @JsonProperty(value = "provider", required = true)
    private VolumeProvider provider;

    /*
     * This type describes a volume provided by an Azure Files file share.
     */
    @JsonProperty(value = "azureFileParameters")
    private VolumeProviderParametersAzureFile azureFileParameters;

    /**
     * Get the description property: User readable description of the volume.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User readable description of the volume.
     *
     * @param description the description value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the status property: Status of the volume.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.status;
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the volume.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the provider property: Provider of the volume.
     *
     * @return the provider value.
     */
    public VolumeProvider provider() {
        return this.provider;
    }

    /**
     * Set the provider property: Provider of the volume.
     *
     * @param provider the provider value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withProvider(VolumeProvider provider) {
        this.provider = provider;
        return this;
    }

    /**
     * Get the azureFileParameters property: This type describes a volume provided by an Azure Files file share.
     *
     * @return the azureFileParameters value.
     */
    public VolumeProviderParametersAzureFile azureFileParameters() {
        return this.azureFileParameters;
    }

    /**
     * Set the azureFileParameters property: This type describes a volume provided by an Azure Files file share.
     *
     * @param azureFileParameters the azureFileParameters value to set.
     * @return the VolumeProperties object itself.
     */
    public VolumeProperties withAzureFileParameters(VolumeProviderParametersAzureFile azureFileParameters) {
        this.azureFileParameters = azureFileParameters;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provider() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property provider in model VolumeProperties"));
        }
        if (azureFileParameters() != null) {
            azureFileParameters().validate();
        }
    }
}
