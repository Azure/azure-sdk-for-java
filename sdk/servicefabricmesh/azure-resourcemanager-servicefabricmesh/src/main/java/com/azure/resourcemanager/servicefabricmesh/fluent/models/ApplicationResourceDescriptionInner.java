// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.models.DiagnosticsDescription;
import com.azure.resourcemanager.servicefabricmesh.models.HealthState;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** This type describes an application resource. */
@Fluent
public final class ApplicationResourceDescriptionInner extends Resource {
    /*
     * This type describes properties of an application resource.
     */
    @JsonProperty(value = "properties", required = true)
    private ApplicationResourceProperties innerProperties = new ApplicationResourceProperties();

    /**
     * Get the innerProperties property: This type describes properties of an application resource.
     *
     * @return the innerProperties value.
     */
    private ApplicationResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationResourceDescriptionInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ApplicationResourceDescriptionInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the description property: User readable description of the application.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: User readable description of the application.
     *
     * @param description the description value to set.
     * @return the ApplicationResourceDescriptionInner object itself.
     */
    public ApplicationResourceDescriptionInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the services property: Describes the services in the application. This property is used to create or modify
     * services of the application. On get only the name of the service is returned. The service description can be
     * obtained by querying for the service resource.
     *
     * @return the services value.
     */
    public List<ServiceResourceDescriptionInner> services() {
        return this.innerProperties() == null ? null : this.innerProperties().services();
    }

    /**
     * Set the services property: Describes the services in the application. This property is used to create or modify
     * services of the application. On get only the name of the service is returned. The service description can be
     * obtained by querying for the service resource.
     *
     * @param services the services value to set.
     * @return the ApplicationResourceDescriptionInner object itself.
     */
    public ApplicationResourceDescriptionInner withServices(List<ServiceResourceDescriptionInner> services) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceProperties();
        }
        this.innerProperties().withServices(services);
        return this;
    }

    /**
     * Get the diagnostics property: Describes the diagnostics definition and usage for an application resource.
     *
     * @return the diagnostics value.
     */
    public DiagnosticsDescription diagnostics() {
        return this.innerProperties() == null ? null : this.innerProperties().diagnostics();
    }

    /**
     * Set the diagnostics property: Describes the diagnostics definition and usage for an application resource.
     *
     * @param diagnostics the diagnostics value to set.
     * @return the ApplicationResourceDescriptionInner object itself.
     */
    public ApplicationResourceDescriptionInner withDiagnostics(DiagnosticsDescription diagnostics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceProperties();
        }
        this.innerProperties().withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Get the debugParams property: Internal - used by Visual Studio to setup the debugging session on the local
     * development environment.
     *
     * @return the debugParams value.
     */
    public String debugParams() {
        return this.innerProperties() == null ? null : this.innerProperties().debugParams();
    }

    /**
     * Set the debugParams property: Internal - used by Visual Studio to setup the debugging session on the local
     * development environment.
     *
     * @param debugParams the debugParams value to set.
     * @return the ApplicationResourceDescriptionInner object itself.
     */
    public ApplicationResourceDescriptionInner withDebugParams(String debugParams) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ApplicationResourceProperties();
        }
        this.innerProperties().withDebugParams(debugParams);
        return this;
    }

    /**
     * Get the serviceNames property: Names of the services in the application.
     *
     * @return the serviceNames value.
     */
    public List<String> serviceNames() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceNames();
    }

    /**
     * Get the status property: Status of the application.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the application.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().statusDetails();
    }

    /**
     * Get the healthState property: Describes the health state of an application resource.
     *
     * @return the healthState value.
     */
    public HealthState healthState() {
        return this.innerProperties() == null ? null : this.innerProperties().healthState();
    }

    /**
     * Get the unhealthyEvaluation property: When the application's health state is not 'Ok', this additional details
     * from service fabric Health Manager for the user to know why the application is marked unhealthy.
     *
     * @return the unhealthyEvaluation value.
     */
    public String unhealthyEvaluation() {
        return this.innerProperties() == null ? null : this.innerProperties().unhealthyEvaluation();
    }

    /**
     * Get the provisioningState property: State of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model ApplicationResourceDescriptionInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ApplicationResourceDescriptionInner.class);
}
