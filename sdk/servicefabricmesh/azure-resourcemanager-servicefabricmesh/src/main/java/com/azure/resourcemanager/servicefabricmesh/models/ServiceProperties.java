// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Describes properties of a service resource. */
@Fluent
public class ServiceProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceProperties.class);

    /*
     * User readable description of the service.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The number of replicas of the service to create. Defaults to 1 if not
     * specified.
     */
    @JsonProperty(value = "replicaCount")
    private Integer replicaCount;

    /*
     * Auto scaling policies
     */
    @JsonProperty(value = "autoScalingPolicies")
    private List<AutoScalingPolicy> autoScalingPolicies;

    /*
     * Status of the service.
     */
    @JsonProperty(value = "status", access = JsonProperty.Access.WRITE_ONLY)
    private ResourceStatus status;

    /*
     * Gives additional information about the current status of the service.
     */
    @JsonProperty(value = "statusDetails", access = JsonProperty.Access.WRITE_ONLY)
    private String statusDetails;

    /*
     * Describes the health state of an application resource.
     */
    @JsonProperty(value = "healthState", access = JsonProperty.Access.WRITE_ONLY)
    private HealthState healthState;

    /*
     * When the service's health state is not 'Ok', this additional details
     * from service fabric Health Manager for the user to know why the service
     * is marked unhealthy.
     */
    @JsonProperty(value = "unhealthyEvaluation", access = JsonProperty.Access.WRITE_ONLY)
    private String unhealthyEvaluation;

    /**
     * Get the description property: User readable description of the service.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: User readable description of the service.
     *
     * @param description the description value to set.
     * @return the ServiceProperties object itself.
     */
    public ServiceProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the replicaCount property: The number of replicas of the service to create. Defaults to 1 if not specified.
     *
     * @return the replicaCount value.
     */
    public Integer replicaCount() {
        return this.replicaCount;
    }

    /**
     * Set the replicaCount property: The number of replicas of the service to create. Defaults to 1 if not specified.
     *
     * @param replicaCount the replicaCount value to set.
     * @return the ServiceProperties object itself.
     */
    public ServiceProperties withReplicaCount(Integer replicaCount) {
        this.replicaCount = replicaCount;
        return this;
    }

    /**
     * Get the autoScalingPolicies property: Auto scaling policies.
     *
     * @return the autoScalingPolicies value.
     */
    public List<AutoScalingPolicy> autoScalingPolicies() {
        return this.autoScalingPolicies;
    }

    /**
     * Set the autoScalingPolicies property: Auto scaling policies.
     *
     * @param autoScalingPolicies the autoScalingPolicies value to set.
     * @return the ServiceProperties object itself.
     */
    public ServiceProperties withAutoScalingPolicies(List<AutoScalingPolicy> autoScalingPolicies) {
        this.autoScalingPolicies = autoScalingPolicies;
        return this;
    }

    /**
     * Get the status property: Status of the service.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.status;
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the service.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Get the healthState property: Describes the health state of an application resource.
     *
     * @return the healthState value.
     */
    public HealthState healthState() {
        return this.healthState;
    }

    /**
     * Get the unhealthyEvaluation property: When the service's health state is not 'Ok', this additional details from
     * service fabric Health Manager for the user to know why the service is marked unhealthy.
     *
     * @return the unhealthyEvaluation value.
     */
    public String unhealthyEvaluation() {
        return this.unhealthyEvaluation;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (autoScalingPolicies() != null) {
            autoScalingPolicies().forEach(e -> e.validate());
        }
    }
}
