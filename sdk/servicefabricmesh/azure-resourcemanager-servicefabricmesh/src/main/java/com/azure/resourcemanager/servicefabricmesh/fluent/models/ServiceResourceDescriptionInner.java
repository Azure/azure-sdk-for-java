// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.servicefabricmesh.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.servicefabricmesh.models.AutoScalingPolicy;
import com.azure.resourcemanager.servicefabricmesh.models.ContainerCodePackageProperties;
import com.azure.resourcemanager.servicefabricmesh.models.DiagnosticsRef;
import com.azure.resourcemanager.servicefabricmesh.models.HealthState;
import com.azure.resourcemanager.servicefabricmesh.models.ManagedProxyResource;
import com.azure.resourcemanager.servicefabricmesh.models.NetworkRef;
import com.azure.resourcemanager.servicefabricmesh.models.OperatingSystemType;
import com.azure.resourcemanager.servicefabricmesh.models.ResourceStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** This type describes a service resource. */
@Fluent
public final class ServiceResourceDescriptionInner extends ManagedProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServiceResourceDescriptionInner.class);

    /*
     * This type describes properties of a service resource.
     */
    @JsonProperty(value = "properties", required = true)
    private ServiceResourceProperties innerProperties = new ServiceResourceProperties();

    /**
     * Get the innerProperties property: This type describes properties of a service resource.
     *
     * @return the innerProperties value.
     */
    private ServiceResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public ServiceResourceDescriptionInner withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Get the osType property: The operation system required by the code in service.
     *
     * @return the osType value.
     */
    public OperatingSystemType osType() {
        return this.innerProperties() == null ? null : this.innerProperties().osType();
    }

    /**
     * Set the osType property: The operation system required by the code in service.
     *
     * @param osType the osType value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withOsType(OperatingSystemType osType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withOsType(osType);
        return this;
    }

    /**
     * Get the codePackages property: Describes the set of code packages that forms the service. A code package
     * describes the container and the properties for running it. All the code packages are started together on the same
     * host and share the same context (network, process etc.).
     *
     * @return the codePackages value.
     */
    public List<ContainerCodePackageProperties> codePackages() {
        return this.innerProperties() == null ? null : this.innerProperties().codePackages();
    }

    /**
     * Set the codePackages property: Describes the set of code packages that forms the service. A code package
     * describes the container and the properties for running it. All the code packages are started together on the same
     * host and share the same context (network, process etc.).
     *
     * @param codePackages the codePackages value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withCodePackages(List<ContainerCodePackageProperties> codePackages) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withCodePackages(codePackages);
        return this;
    }

    /**
     * Get the networkRefs property: The names of the private networks that this service needs to be part of.
     *
     * @return the networkRefs value.
     */
    public List<NetworkRef> networkRefs() {
        return this.innerProperties() == null ? null : this.innerProperties().networkRefs();
    }

    /**
     * Set the networkRefs property: The names of the private networks that this service needs to be part of.
     *
     * @param networkRefs the networkRefs value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withNetworkRefs(List<NetworkRef> networkRefs) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withNetworkRefs(networkRefs);
        return this;
    }

    /**
     * Get the diagnostics property: Reference to sinks in DiagnosticsDescription.
     *
     * @return the diagnostics value.
     */
    public DiagnosticsRef diagnostics() {
        return this.innerProperties() == null ? null : this.innerProperties().diagnostics();
    }

    /**
     * Set the diagnostics property: Reference to sinks in DiagnosticsDescription.
     *
     * @param diagnostics the diagnostics value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withDiagnostics(DiagnosticsRef diagnostics) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withDiagnostics(diagnostics);
        return this;
    }

    /**
     * Get the description property: User readable description of the service.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: User readable description of the service.
     *
     * @param description the description value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the replicaCount property: The number of replicas of the service to create. Defaults to 1 if not specified.
     *
     * @return the replicaCount value.
     */
    public Integer replicaCount() {
        return this.innerProperties() == null ? null : this.innerProperties().replicaCount();
    }

    /**
     * Set the replicaCount property: The number of replicas of the service to create. Defaults to 1 if not specified.
     *
     * @param replicaCount the replicaCount value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withReplicaCount(Integer replicaCount) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withReplicaCount(replicaCount);
        return this;
    }

    /**
     * Get the autoScalingPolicies property: Auto scaling policies.
     *
     * @return the autoScalingPolicies value.
     */
    public List<AutoScalingPolicy> autoScalingPolicies() {
        return this.innerProperties() == null ? null : this.innerProperties().autoScalingPolicies();
    }

    /**
     * Set the autoScalingPolicies property: Auto scaling policies.
     *
     * @param autoScalingPolicies the autoScalingPolicies value to set.
     * @return the ServiceResourceDescriptionInner object itself.
     */
    public ServiceResourceDescriptionInner withAutoScalingPolicies(List<AutoScalingPolicy> autoScalingPolicies) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServiceResourceProperties();
        }
        this.innerProperties().withAutoScalingPolicies(autoScalingPolicies);
        return this;
    }

    /**
     * Get the status property: Status of the service.
     *
     * @return the status value.
     */
    public ResourceStatus status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the statusDetails property: Gives additional information about the current status of the service.
     *
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().statusDetails();
    }

    /**
     * Get the healthState property: Describes the health state of an application resource.
     *
     * @return the healthState value.
     */
    public HealthState healthState() {
        return this.innerProperties() == null ? null : this.innerProperties().healthState();
    }

    /**
     * Get the unhealthyEvaluation property: When the service's health state is not 'Ok', this additional details from
     * service fabric Health Manager for the user to know why the service is marked unhealthy.
     *
     * @return the unhealthyEvaluation value.
     */
    public String unhealthyEvaluation() {
        return this.innerProperties() == null ? null : this.innerProperties().unhealthyEvaluation();
    }

    /**
     * Get the provisioningState property: State of the resource.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property innerProperties in model ServiceResourceDescriptionInner"));
        } else {
            innerProperties().validate();
        }
    }
}
