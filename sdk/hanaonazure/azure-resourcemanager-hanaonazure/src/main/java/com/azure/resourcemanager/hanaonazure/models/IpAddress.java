// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the IP address of the network interface.
 */
@Fluent
public final class IpAddress implements JsonSerializable<IpAddress> {
    /*
     * Specifies the IP address of the network interface.
     */
    private String ipAddress;

    /**
     * Creates an instance of IpAddress class.
     */
    public IpAddress() {
    }

    /**
     * Get the ipAddress property: Specifies the IP address of the network interface.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: Specifies the IP address of the network interface.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the IpAddress object itself.
     */
    public IpAddress withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IpAddress from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IpAddress if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the IpAddress.
     */
    public static IpAddress fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IpAddress deserializedIpAddress = new IpAddress();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ipAddress".equals(fieldName)) {
                    deserializedIpAddress.ipAddress = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIpAddress;
        });
    }
}
