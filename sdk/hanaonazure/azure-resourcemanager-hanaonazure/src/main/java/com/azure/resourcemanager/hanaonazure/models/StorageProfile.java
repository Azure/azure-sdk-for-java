// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specifies the storage settings for the HANA instance disks. */
@Fluent
public final class StorageProfile {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StorageProfile.class);

    /*
     * IP Address to connect to storage.
     */
    @JsonProperty(value = "nfsIpAddress")
    private String nfsIpAddress;

    /*
     * Specifies information about the operating system disk used by the hana
     * instance.
     */
    @JsonProperty(value = "osDisks")
    private List<Disk> osDisks;

    /**
     * Get the nfsIpAddress property: IP Address to connect to storage.
     *
     * @return the nfsIpAddress value.
     */
    public String nfsIpAddress() {
        return this.nfsIpAddress;
    }

    /**
     * Set the nfsIpAddress property: IP Address to connect to storage.
     *
     * @param nfsIpAddress the nfsIpAddress value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withNfsIpAddress(String nfsIpAddress) {
        this.nfsIpAddress = nfsIpAddress;
        return this;
    }

    /**
     * Get the osDisks property: Specifies information about the operating system disk used by the hana instance.
     *
     * @return the osDisks value.
     */
    public List<Disk> osDisks() {
        return this.osDisks;
    }

    /**
     * Set the osDisks property: Specifies information about the operating system disk used by the hana instance.
     *
     * @param osDisks the osDisks value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withOsDisks(List<Disk> osDisks) {
        this.osDisks = osDisks;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (osDisks() != null) {
            osDisks().forEach(e -> e.validate());
        }
    }
}
