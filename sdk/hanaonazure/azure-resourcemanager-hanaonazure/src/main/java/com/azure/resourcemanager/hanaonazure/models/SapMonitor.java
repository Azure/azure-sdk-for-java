// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hanaonazure.fluent.models.SapMonitorInner;
import java.util.Map;

/** An immutable client-side representation of SapMonitor. */
public interface SapMonitor {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the provisioningState property: State of provisioning of the HanaInstance.
     *
     * @return the provisioningState value.
     */
    HanaProvisioningStatesEnum provisioningState();

    /**
     * Gets the managedResourceGroupName property: The name of the resource group the SAP Monitor resources get deployed
     * into.
     *
     * @return the managedResourceGroupName value.
     */
    String managedResourceGroupName();

    /**
     * Gets the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used for
     * monitoring.
     *
     * @return the logAnalyticsWorkspaceArmId value.
     */
    String logAnalyticsWorkspaceArmId();

    /**
     * Gets the enableCustomerAnalytics property: The value indicating whether to send analytics to Microsoft.
     *
     * @return the enableCustomerAnalytics value.
     */
    Boolean enableCustomerAnalytics();

    /**
     * Gets the logAnalyticsWorkspaceId property: The workspace ID of the log analytics workspace to be used for
     * monitoring.
     *
     * @return the logAnalyticsWorkspaceId value.
     */
    String logAnalyticsWorkspaceId();

    /**
     * Gets the logAnalyticsWorkspaceSharedKey property: The shared key of the log analytics workspace that is used for
     * monitoring.
     *
     * @return the logAnalyticsWorkspaceSharedKey value.
     */
    String logAnalyticsWorkspaceSharedKey();

    /**
     * Gets the sapMonitorCollectorVersion property: The version of the payload running in the Collector VM.
     *
     * @return the sapMonitorCollectorVersion value.
     */
    String sapMonitorCollectorVersion();

    /**
     * Gets the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
     *
     * @return the monitorSubnet value.
     */
    String monitorSubnet();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.hanaonazure.fluent.models.SapMonitorInner object.
     *
     * @return the inner object.
     */
    SapMonitorInner innerModel();

    /** The entirety of the SapMonitor definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The SapMonitor definition stages. */
    interface DefinitionStages {
        /** The first stage of the SapMonitor definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the SapMonitor definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the SapMonitor definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the SapMonitor definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithLogAnalyticsWorkspaceArmId,
                DefinitionStages.WithEnableCustomerAnalytics,
                DefinitionStages.WithLogAnalyticsWorkspaceId,
                DefinitionStages.WithLogAnalyticsWorkspaceSharedKey,
                DefinitionStages.WithMonitorSubnet {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            SapMonitor create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            SapMonitor create(Context context);
        }
        /** The stage of the SapMonitor definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the SapMonitor definition allowing to specify logAnalyticsWorkspaceArmId. */
        interface WithLogAnalyticsWorkspaceArmId {
            /**
             * Specifies the logAnalyticsWorkspaceArmId property: The ARM ID of the Log Analytics Workspace that is used
             * for monitoring.
             *
             * @param logAnalyticsWorkspaceArmId The ARM ID of the Log Analytics Workspace that is used for monitoring.
             * @return the next definition stage.
             */
            WithCreate withLogAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId);
        }
        /** The stage of the SapMonitor definition allowing to specify enableCustomerAnalytics. */
        interface WithEnableCustomerAnalytics {
            /**
             * Specifies the enableCustomerAnalytics property: The value indicating whether to send analytics to
             * Microsoft.
             *
             * @param enableCustomerAnalytics The value indicating whether to send analytics to Microsoft.
             * @return the next definition stage.
             */
            WithCreate withEnableCustomerAnalytics(Boolean enableCustomerAnalytics);
        }
        /** The stage of the SapMonitor definition allowing to specify logAnalyticsWorkspaceId. */
        interface WithLogAnalyticsWorkspaceId {
            /**
             * Specifies the logAnalyticsWorkspaceId property: The workspace ID of the log analytics workspace to be
             * used for monitoring.
             *
             * @param logAnalyticsWorkspaceId The workspace ID of the log analytics workspace to be used for monitoring.
             * @return the next definition stage.
             */
            WithCreate withLogAnalyticsWorkspaceId(String logAnalyticsWorkspaceId);
        }
        /** The stage of the SapMonitor definition allowing to specify logAnalyticsWorkspaceSharedKey. */
        interface WithLogAnalyticsWorkspaceSharedKey {
            /**
             * Specifies the logAnalyticsWorkspaceSharedKey property: The shared key of the log analytics workspace that
             * is used for monitoring.
             *
             * @param logAnalyticsWorkspaceSharedKey The shared key of the log analytics workspace that is used for
             *     monitoring.
             * @return the next definition stage.
             */
            WithCreate withLogAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey);
        }
        /** The stage of the SapMonitor definition allowing to specify monitorSubnet. */
        interface WithMonitorSubnet {
            /**
             * Specifies the monitorSubnet property: The subnet which the SAP monitor will be deployed in.
             *
             * @param monitorSubnet The subnet which the SAP monitor will be deployed in.
             * @return the next definition stage.
             */
            WithCreate withMonitorSubnet(String monitorSubnet);
        }
    }
    /**
     * Begins update for the SapMonitor resource.
     *
     * @return the stage of resource update.
     */
    SapMonitor.Update update();

    /** The template for SapMonitor update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        SapMonitor apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        SapMonitor apply(Context context);
    }
    /** The SapMonitor update stages. */
    interface UpdateStages {
        /** The stage of the SapMonitor update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Tags field of the resource..
             *
             * @param tags Tags field of the resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    SapMonitor refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    SapMonitor refresh(Context context);
}
