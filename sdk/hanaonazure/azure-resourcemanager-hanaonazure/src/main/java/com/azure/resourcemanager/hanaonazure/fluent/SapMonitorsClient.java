// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hanaonazure.fluent.models.SapMonitorInner;
import com.azure.resourcemanager.hanaonazure.models.Tags;

/** An instance of this class provides access to all the operations defined in SapMonitorsClient. */
public interface SapMonitorsClient {
    /**
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP
     * monitor.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SAP monitors in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SapMonitorInner> list();

    /**
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP
     * monitor.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of SAP monitors in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SapMonitorInner> list(Context context);

    /**
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a SAP monitor for the specified subscription, resource group, and resource name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SapMonitorInner getByResourceGroup(String resourceGroupName, String sapMonitorName);

    /**
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a SAP monitor for the specified subscription, resource group, and resource name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SapMonitorInner> getByResourceGroupWithResponse(
        String resourceGroupName, String sapMonitorName, Context context);

    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAP monitor info on Azure (ARM properties and SAP monitor properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<SapMonitorInner>, SapMonitorInner> beginCreate(
        String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter);

    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAP monitor info on Azure (ARM properties and SAP monitor properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<SapMonitorInner>, SapMonitorInner> beginCreate(
        String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter, Context context);

    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAP monitor info on Azure (ARM properties and SAP monitor properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SapMonitorInner create(String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter);

    /**
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param sapMonitorParameter Request body representing a SAP Monitor.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAP monitor info on Azure (ARM properties and SAP monitor properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SapMonitorInner create(
        String resourceGroupName, String sapMonitorName, SapMonitorInner sapMonitorParameter, Context context);

    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sapMonitorName);

    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String sapMonitorName, Context context);

    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sapMonitorName);

    /**
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sapMonitorName, Context context);

    /**
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAP monitor info on Azure (ARM properties and SAP monitor properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SapMonitorInner update(String resourceGroupName, String sapMonitorName, Tags tagsParameter);

    /**
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param tagsParameter Request body that only contains the new Tags field.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sAP monitor info on Azure (ARM properties and SAP monitor properties).
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SapMonitorInner> updateWithResponse(
        String resourceGroupName, String sapMonitorName, Tags tagsParameter, Context context);
}
