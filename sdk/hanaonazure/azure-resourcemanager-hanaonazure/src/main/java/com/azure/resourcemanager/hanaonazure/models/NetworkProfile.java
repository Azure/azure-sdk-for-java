// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Specifies the network settings for the HANA instance disks. */
@Fluent
public final class NetworkProfile {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NetworkProfile.class);

    /*
     * Specifies the network interfaces for the HANA instance.
     */
    @JsonProperty(value = "networkInterfaces")
    private List<IpAddress> networkInterfaces;

    /*
     * Specifies the circuit id for connecting to express route.
     */
    @JsonProperty(value = "circuitId")
    private String circuitId;

    /**
     * Get the networkInterfaces property: Specifies the network interfaces for the HANA instance.
     *
     * @return the networkInterfaces value.
     */
    public List<IpAddress> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Set the networkInterfaces property: Specifies the network interfaces for the HANA instance.
     *
     * @param networkInterfaces the networkInterfaces value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withNetworkInterfaces(List<IpAddress> networkInterfaces) {
        this.networkInterfaces = networkInterfaces;
        return this;
    }

    /**
     * Get the circuitId property: Specifies the circuit id for connecting to express route.
     *
     * @return the circuitId value.
     */
    public String circuitId() {
        return this.circuitId;
    }

    /**
     * Set the circuitId property: Specifies the circuit id for connecting to express route.
     *
     * @param circuitId the circuitId value to set.
     * @return the NetworkProfile object itself.
     */
    public NetworkProfile withCircuitId(String circuitId) {
        this.circuitId = circuitId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
    }
}
