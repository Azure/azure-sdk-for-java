// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.hanaonazure.fluent.SapMonitorsClient;
import com.azure.resourcemanager.hanaonazure.fluent.models.SapMonitorInner;
import com.azure.resourcemanager.hanaonazure.models.SapMonitor;
import com.azure.resourcemanager.hanaonazure.models.SapMonitors;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class SapMonitorsImpl implements SapMonitors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(SapMonitorsImpl.class);

    private final SapMonitorsClient innerClient;

    private final com.azure.resourcemanager.hanaonazure.HanaManager serviceManager;

    public SapMonitorsImpl(
        SapMonitorsClient innerClient, com.azure.resourcemanager.hanaonazure.HanaManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<SapMonitor> list() {
        PagedIterable<SapMonitorInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new SapMonitorImpl(inner1, this.manager()));
    }

    public PagedIterable<SapMonitor> list(Context context) {
        PagedIterable<SapMonitorInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new SapMonitorImpl(inner1, this.manager()));
    }

    public SapMonitor getByResourceGroup(String resourceGroupName, String sapMonitorName) {
        SapMonitorInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, sapMonitorName);
        if (inner != null) {
            return new SapMonitorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SapMonitor> getByResourceGroupWithResponse(
        String resourceGroupName, String sapMonitorName, Context context) {
        Response<SapMonitorInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, sapMonitorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SapMonitorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String sapMonitorName) {
        this.serviceClient().delete(resourceGroupName, sapMonitorName);
    }

    public void delete(String resourceGroupName, String sapMonitorName, Context context) {
        this.serviceClient().delete(resourceGroupName, sapMonitorName, context);
    }

    public SapMonitor getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapMonitorName = Utils.getValueFromIdByName(id, "sapMonitors");
        if (sapMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sapMonitors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, sapMonitorName, Context.NONE).getValue();
    }

    public Response<SapMonitor> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapMonitorName = Utils.getValueFromIdByName(id, "sapMonitors");
        if (sapMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sapMonitors'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, sapMonitorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapMonitorName = Utils.getValueFromIdByName(id, "sapMonitors");
        if (sapMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sapMonitors'.", id)));
        }
        this.delete(resourceGroupName, sapMonitorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String sapMonitorName = Utils.getValueFromIdByName(id, "sapMonitors");
        if (sapMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sapMonitors'.", id)));
        }
        this.delete(resourceGroupName, sapMonitorName, context);
    }

    private SapMonitorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.hanaonazure.HanaManager manager() {
        return this.serviceManager;
    }

    public SapMonitorImpl define(String name) {
        return new SapMonitorImpl(name, this.manager());
    }
}
