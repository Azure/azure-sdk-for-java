// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hanaonazure.fluent.models.SapMonitorInner;
import com.azure.resourcemanager.hanaonazure.models.HanaProvisioningStatesEnum;
import com.azure.resourcemanager.hanaonazure.models.SapMonitor;
import com.azure.resourcemanager.hanaonazure.models.Tags;
import java.util.Collections;
import java.util.Map;

public final class SapMonitorImpl implements SapMonitor, SapMonitor.Definition, SapMonitor.Update {
    private SapMonitorInner innerObject;

    private final com.azure.resourcemanager.hanaonazure.HanaManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public HanaProvisioningStatesEnum provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String managedResourceGroupName() {
        return this.innerModel().managedResourceGroupName();
    }

    public String logAnalyticsWorkspaceArmId() {
        return this.innerModel().logAnalyticsWorkspaceArmId();
    }

    public Boolean enableCustomerAnalytics() {
        return this.innerModel().enableCustomerAnalytics();
    }

    public String logAnalyticsWorkspaceId() {
        return this.innerModel().logAnalyticsWorkspaceId();
    }

    public String logAnalyticsWorkspaceSharedKey() {
        return this.innerModel().logAnalyticsWorkspaceSharedKey();
    }

    public String sapMonitorCollectorVersion() {
        return this.innerModel().sapMonitorCollectorVersion();
    }

    public String monitorSubnet() {
        return this.innerModel().monitorSubnet();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public SapMonitorInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.hanaonazure.HanaManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String sapMonitorName;

    private Tags updateTagsParameter;

    public SapMonitorImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public SapMonitor create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSapMonitors()
                .create(resourceGroupName, sapMonitorName, this.innerModel(), Context.NONE);
        return this;
    }

    public SapMonitor create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSapMonitors()
                .create(resourceGroupName, sapMonitorName, this.innerModel(), context);
        return this;
    }

    SapMonitorImpl(String name, com.azure.resourcemanager.hanaonazure.HanaManager serviceManager) {
        this.innerObject = new SapMonitorInner();
        this.serviceManager = serviceManager;
        this.sapMonitorName = name;
    }

    public SapMonitorImpl update() {
        this.updateTagsParameter = new Tags();
        return this;
    }

    public SapMonitor apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSapMonitors()
                .updateWithResponse(resourceGroupName, sapMonitorName, updateTagsParameter, Context.NONE)
                .getValue();
        return this;
    }

    public SapMonitor apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSapMonitors()
                .updateWithResponse(resourceGroupName, sapMonitorName, updateTagsParameter, context)
                .getValue();
        return this;
    }

    SapMonitorImpl(SapMonitorInner innerObject, com.azure.resourcemanager.hanaonazure.HanaManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.sapMonitorName = Utils.getValueFromIdByName(innerObject.id(), "sapMonitors");
    }

    public SapMonitor refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSapMonitors()
                .getByResourceGroupWithResponse(resourceGroupName, sapMonitorName, Context.NONE)
                .getValue();
        return this;
    }

    public SapMonitor refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getSapMonitors()
                .getByResourceGroupWithResponse(resourceGroupName, sapMonitorName, context)
                .getValue();
        return this;
    }

    public SapMonitorImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public SapMonitorImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public SapMonitorImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateTagsParameter.withTags(tags);
            return this;
        }
    }

    public SapMonitorImpl withLogAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
        this.innerModel().withLogAnalyticsWorkspaceArmId(logAnalyticsWorkspaceArmId);
        return this;
    }

    public SapMonitorImpl withEnableCustomerAnalytics(Boolean enableCustomerAnalytics) {
        this.innerModel().withEnableCustomerAnalytics(enableCustomerAnalytics);
        return this;
    }

    public SapMonitorImpl withLogAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
        this.innerModel().withLogAnalyticsWorkspaceId(logAnalyticsWorkspaceId);
        return this;
    }

    public SapMonitorImpl withLogAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey) {
        this.innerModel().withLogAnalyticsWorkspaceSharedKey(logAnalyticsWorkspaceSharedKey);
        return this;
    }

    public SapMonitorImpl withMonitorSubnet(String monitorSubnet) {
        this.innerModel().withMonitorSubnet(monitorSubnet);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
