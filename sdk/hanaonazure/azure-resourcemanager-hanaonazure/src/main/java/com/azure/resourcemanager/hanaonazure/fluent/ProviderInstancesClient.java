// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.hanaonazure.fluent.models.ProviderInstanceInner;

/** An instance of this class provides access to all the operations defined in ProviderInstancesClient. */
public interface ProviderInstancesClient {
    /**
     * Gets a list of provider instances in the specified SAP monitor. The operations returns various properties of each
     * provider instances.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of provider instances in the specified SAP monitor.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderInstanceInner> list(String resourceGroupName, String sapMonitorName);

    /**
     * Gets a list of provider instances in the specified SAP monitor. The operations returns various properties of each
     * provider instances.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of provider instances in the specified SAP monitor.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ProviderInstanceInner> list(String resourceGroupName, String sapMonitorName, Context context);

    /**
     * Gets properties of a provider instance for the specified subscription, resource group, SapMonitor name, and
     * resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a provider instance for the specified subscription, resource group, SapMonitor name, and
     *     resource name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderInstanceInner get(String resourceGroupName, String sapMonitorName, String providerInstanceName);

    /**
     * Gets properties of a provider instance for the specified subscription, resource group, SapMonitor name, and
     * resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties of a provider instance for the specified subscription, resource group, SapMonitor name, and
     *     resource name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ProviderInstanceInner> getWithResponse(
        String resourceGroupName, String sapMonitorName, String providerInstanceName, Context context);

    /**
     * Creates a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param providerInstanceParameter Request body representing a provider instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provider instance associated with a SAP monitor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<ProviderInstanceInner>, ProviderInstanceInner> beginCreate(
        String resourceGroupName,
        String sapMonitorName,
        String providerInstanceName,
        ProviderInstanceInner providerInstanceParameter);

    /**
     * Creates a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param providerInstanceParameter Request body representing a provider instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provider instance associated with a SAP monitor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<ProviderInstanceInner>, ProviderInstanceInner> beginCreate(
        String resourceGroupName,
        String sapMonitorName,
        String providerInstanceName,
        ProviderInstanceInner providerInstanceParameter,
        Context context);

    /**
     * Creates a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param providerInstanceParameter Request body representing a provider instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provider instance associated with a SAP monitor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderInstanceInner create(
        String resourceGroupName,
        String sapMonitorName,
        String providerInstanceName,
        ProviderInstanceInner providerInstanceParameter);

    /**
     * Creates a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param providerInstanceParameter Request body representing a provider instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a provider instance associated with a SAP monitor.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ProviderInstanceInner create(
        String resourceGroupName,
        String sapMonitorName,
        String providerInstanceName,
        ProviderInstanceInner providerInstanceParameter,
        Context context);

    /**
     * Deletes a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String sapMonitorName, String providerInstanceName);

    /**
     * Deletes a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String sapMonitorName, String providerInstanceName, Context context);

    /**
     * Deletes a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sapMonitorName, String providerInstanceName);

    /**
     * Deletes a provider instance for the specified subscription, resource group, SapMonitor name, and resource name.
     *
     * @param resourceGroupName Name of the resource group.
     * @param sapMonitorName Name of the SAP monitor resource.
     * @param providerInstanceName Name of the provider instance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String sapMonitorName, String providerInstanceName, Context context);
}
