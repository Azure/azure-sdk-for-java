// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.hanaonazure.models.HanaProvisioningStatesEnum;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A provider instance associated with a SAP monitor. */
@Fluent
public final class ProviderInstanceInner extends ProxyResource {
    /*
     * Provider Instance properties
     */
    @JsonProperty(value = "properties")
    private ProviderInstanceProperties innerProperties;

    /**
     * Get the innerProperties property: Provider Instance properties.
     *
     * @return the innerProperties value.
     */
    private ProviderInstanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of provider instance.
     *
     * @return the type value.
     */
    public String typePropertiesType() {
        return this.innerProperties() == null ? null : this.innerProperties().type();
    }

    /**
     * Set the type property: The type of provider instance.
     *
     * @param type the type value to set.
     * @return the ProviderInstanceInner object itself.
     */
    public ProviderInstanceInner withTypePropertiesType(String type) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProviderInstanceProperties();
        }
        this.innerProperties().withType(type);
        return this;
    }

    /**
     * Get the properties property: A JSON string containing the properties of the provider instance.
     *
     * @return the properties value.
     */
    public String properties() {
        return this.innerProperties() == null ? null : this.innerProperties().properties();
    }

    /**
     * Set the properties property: A JSON string containing the properties of the provider instance.
     *
     * @param properties the properties value to set.
     * @return the ProviderInstanceInner object itself.
     */
    public ProviderInstanceInner withProperties(String properties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProviderInstanceProperties();
        }
        this.innerProperties().withProperties(properties);
        return this;
    }

    /**
     * Get the metadata property: A JSON string containing metadata of the provider instance.
     *
     * @return the metadata value.
     */
    public String metadata() {
        return this.innerProperties() == null ? null : this.innerProperties().metadata();
    }

    /**
     * Set the metadata property: A JSON string containing metadata of the provider instance.
     *
     * @param metadata the metadata value to set.
     * @return the ProviderInstanceInner object itself.
     */
    public ProviderInstanceInner withMetadata(String metadata) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ProviderInstanceProperties();
        }
        this.innerProperties().withMetadata(metadata);
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the provider instance.
     *
     * @return the provisioningState value.
     */
    public HanaProvisioningStatesEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
