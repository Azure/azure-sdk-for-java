// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.hanaonazure.models.HanaInstancePowerStateEnum;
import com.azure.resourcemanager.hanaonazure.models.HanaProvisioningStatesEnum;
import com.azure.resourcemanager.hanaonazure.models.HardwareProfile;
import com.azure.resourcemanager.hanaonazure.models.NetworkProfile;
import com.azure.resourcemanager.hanaonazure.models.OSProfile;
import com.azure.resourcemanager.hanaonazure.models.StorageProfile;
import java.io.IOException;
import java.util.Map;

/**
 * HANA instance info on Azure (ARM properties and HANA properties).
 */
@Fluent
public final class HanaInstanceInner extends Resource {
    /*
     * HANA instance properties
     */
    private HanaInstanceProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of HanaInstanceInner class.
     */
    public HanaInstanceInner() {
    }

    /**
     * Get the innerProperties property: HANA instance properties.
     * 
     * @return the innerProperties value.
     */
    private HanaInstanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HanaInstanceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HanaInstanceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the hardwareProfile property: Specifies the hardware settings for the HANA instance.
     * 
     * @return the hardwareProfile value.
     */
    public HardwareProfile hardwareProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().hardwareProfile();
    }

    /**
     * Set the hardwareProfile property: Specifies the hardware settings for the HANA instance.
     * 
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the HanaInstanceInner object itself.
     */
    public HanaInstanceInner withHardwareProfile(HardwareProfile hardwareProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HanaInstanceProperties();
        }
        this.innerProperties().withHardwareProfile(hardwareProfile);
        return this;
    }

    /**
     * Get the storageProfile property: Specifies the storage settings for the HANA instance disks.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().storageProfile();
    }

    /**
     * Set the storageProfile property: Specifies the storage settings for the HANA instance disks.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the HanaInstanceInner object itself.
     */
    public HanaInstanceInner withStorageProfile(StorageProfile storageProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HanaInstanceProperties();
        }
        this.innerProperties().withStorageProfile(storageProfile);
        return this;
    }

    /**
     * Get the osProfile property: Specifies the operating system settings for the HANA instance.
     * 
     * @return the osProfile value.
     */
    public OSProfile osProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().osProfile();
    }

    /**
     * Set the osProfile property: Specifies the operating system settings for the HANA instance.
     * 
     * @param osProfile the osProfile value to set.
     * @return the HanaInstanceInner object itself.
     */
    public HanaInstanceInner withOsProfile(OSProfile osProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HanaInstanceProperties();
        }
        this.innerProperties().withOsProfile(osProfile);
        return this;
    }

    /**
     * Get the networkProfile property: Specifies the network settings for the HANA instance.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().networkProfile();
    }

    /**
     * Set the networkProfile property: Specifies the network settings for the HANA instance.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the HanaInstanceInner object itself.
     */
    public HanaInstanceInner withNetworkProfile(NetworkProfile networkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HanaInstanceProperties();
        }
        this.innerProperties().withNetworkProfile(networkProfile);
        return this;
    }

    /**
     * Get the hanaInstanceId property: Specifies the HANA instance unique ID.
     * 
     * @return the hanaInstanceId value.
     */
    public String hanaInstanceId() {
        return this.innerProperties() == null ? null : this.innerProperties().hanaInstanceId();
    }

    /**
     * Get the powerState property: Resource power state.
     * 
     * @return the powerState value.
     */
    public HanaInstancePowerStateEnum powerState() {
        return this.innerProperties() == null ? null : this.innerProperties().powerState();
    }

    /**
     * Get the proximityPlacementGroup property: Resource proximity placement group.
     * 
     * @return the proximityPlacementGroup value.
     */
    public String proximityPlacementGroup() {
        return this.innerProperties() == null ? null : this.innerProperties().proximityPlacementGroup();
    }

    /**
     * Get the hwRevision property: Hardware revision of a HANA instance.
     * 
     * @return the hwRevision value.
     */
    public String hwRevision() {
        return this.innerProperties() == null ? null : this.innerProperties().hwRevision();
    }

    /**
     * Get the partnerNodeId property: ARM ID of another HanaInstance that will share a network with this HanaInstance.
     * 
     * @return the partnerNodeId value.
     */
    public String partnerNodeId() {
        return this.innerProperties() == null ? null : this.innerProperties().partnerNodeId();
    }

    /**
     * Set the partnerNodeId property: ARM ID of another HanaInstance that will share a network with this HanaInstance.
     * 
     * @param partnerNodeId the partnerNodeId value to set.
     * @return the HanaInstanceInner object itself.
     */
    public HanaInstanceInner withPartnerNodeId(String partnerNodeId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new HanaInstanceProperties();
        }
        this.innerProperties().withPartnerNodeId(partnerNodeId);
        return this;
    }

    /**
     * Get the provisioningState property: State of provisioning of the HanaInstance.
     * 
     * @return the provisioningState value.
     */
    public HanaProvisioningStatesEnum provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HanaInstanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HanaInstanceInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HanaInstanceInner.
     */
    public static HanaInstanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HanaInstanceInner deserializedHanaInstanceInner = new HanaInstanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedHanaInstanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedHanaInstanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedHanaInstanceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedHanaInstanceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedHanaInstanceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedHanaInstanceInner.innerProperties = HanaInstanceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHanaInstanceInner;
        });
    }
}
