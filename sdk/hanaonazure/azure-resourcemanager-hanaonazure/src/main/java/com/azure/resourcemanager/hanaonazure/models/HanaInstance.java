// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.hanaonazure.fluent.models.HanaInstanceInner;
import java.util.Map;

/** An immutable client-side representation of HanaInstance. */
public interface HanaInstance {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the hardwareProfile property: Specifies the hardware settings for the HANA instance.
     *
     * @return the hardwareProfile value.
     */
    HardwareProfile hardwareProfile();

    /**
     * Gets the storageProfile property: Specifies the storage settings for the HANA instance disks.
     *
     * @return the storageProfile value.
     */
    StorageProfile storageProfile();

    /**
     * Gets the osProfile property: Specifies the operating system settings for the HANA instance.
     *
     * @return the osProfile value.
     */
    OSProfile osProfile();

    /**
     * Gets the networkProfile property: Specifies the network settings for the HANA instance.
     *
     * @return the networkProfile value.
     */
    NetworkProfile networkProfile();

    /**
     * Gets the hanaInstanceId property: Specifies the HANA instance unique ID.
     *
     * @return the hanaInstanceId value.
     */
    String hanaInstanceId();

    /**
     * Gets the powerState property: Resource power state.
     *
     * @return the powerState value.
     */
    HanaInstancePowerStateEnum powerState();

    /**
     * Gets the proximityPlacementGroup property: Resource proximity placement group.
     *
     * @return the proximityPlacementGroup value.
     */
    String proximityPlacementGroup();

    /**
     * Gets the hwRevision property: Hardware revision of a HANA instance.
     *
     * @return the hwRevision value.
     */
    String hwRevision();

    /**
     * Gets the partnerNodeId property: ARM ID of another HanaInstance that will share a network with this HanaInstance.
     *
     * @return the partnerNodeId value.
     */
    String partnerNodeId();

    /**
     * Gets the provisioningState property: State of provisioning of the HanaInstance.
     *
     * @return the provisioningState value.
     */
    HanaProvisioningStatesEnum provisioningState();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.hanaonazure.fluent.models.HanaInstanceInner object.
     *
     * @return the inner object.
     */
    HanaInstanceInner innerModel();

    /** The entirety of the HanaInstance definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The HanaInstance definition stages. */
    interface DefinitionStages {
        /** The first stage of the HanaInstance definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the HanaInstance definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the HanaInstance definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the HanaInstance definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithHardwareProfile,
                DefinitionStages.WithStorageProfile,
                DefinitionStages.WithOsProfile,
                DefinitionStages.WithNetworkProfile,
                DefinitionStages.WithHanaInstanceId,
                DefinitionStages.WithPowerState,
                DefinitionStages.WithProximityPlacementGroup,
                DefinitionStages.WithHwRevision,
                DefinitionStages.WithPartnerNodeId,
                DefinitionStages.WithProvisioningState {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            HanaInstance create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            HanaInstance create(Context context);
        }
        /** The stage of the HanaInstance definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the HanaInstance definition allowing to specify hardwareProfile. */
        interface WithHardwareProfile {
            /**
             * Specifies the hardwareProfile property: Specifies the hardware settings for the HANA instance..
             *
             * @param hardwareProfile Specifies the hardware settings for the HANA instance.
             * @return the next definition stage.
             */
            WithCreate withHardwareProfile(HardwareProfile hardwareProfile);
        }
        /** The stage of the HanaInstance definition allowing to specify storageProfile. */
        interface WithStorageProfile {
            /**
             * Specifies the storageProfile property: Specifies the storage settings for the HANA instance disks..
             *
             * @param storageProfile Specifies the storage settings for the HANA instance disks.
             * @return the next definition stage.
             */
            WithCreate withStorageProfile(StorageProfile storageProfile);
        }
        /** The stage of the HanaInstance definition allowing to specify osProfile. */
        interface WithOsProfile {
            /**
             * Specifies the osProfile property: Specifies the operating system settings for the HANA instance..
             *
             * @param osProfile Specifies the operating system settings for the HANA instance.
             * @return the next definition stage.
             */
            WithCreate withOsProfile(OSProfile osProfile);
        }
        /** The stage of the HanaInstance definition allowing to specify networkProfile. */
        interface WithNetworkProfile {
            /**
             * Specifies the networkProfile property: Specifies the network settings for the HANA instance..
             *
             * @param networkProfile Specifies the network settings for the HANA instance.
             * @return the next definition stage.
             */
            WithCreate withNetworkProfile(NetworkProfile networkProfile);
        }
        /** The stage of the HanaInstance definition allowing to specify hanaInstanceId. */
        interface WithHanaInstanceId {
            /**
             * Specifies the hanaInstanceId property: Specifies the HANA instance unique ID..
             *
             * @param hanaInstanceId Specifies the HANA instance unique ID.
             * @return the next definition stage.
             */
            WithCreate withHanaInstanceId(String hanaInstanceId);
        }
        /** The stage of the HanaInstance definition allowing to specify powerState. */
        interface WithPowerState {
            /**
             * Specifies the powerState property: Resource power state.
             *
             * @param powerState Resource power state.
             * @return the next definition stage.
             */
            WithCreate withPowerState(HanaInstancePowerStateEnum powerState);
        }
        /** The stage of the HanaInstance definition allowing to specify proximityPlacementGroup. */
        interface WithProximityPlacementGroup {
            /**
             * Specifies the proximityPlacementGroup property: Resource proximity placement group.
             *
             * @param proximityPlacementGroup Resource proximity placement group.
             * @return the next definition stage.
             */
            WithCreate withProximityPlacementGroup(String proximityPlacementGroup);
        }
        /** The stage of the HanaInstance definition allowing to specify hwRevision. */
        interface WithHwRevision {
            /**
             * Specifies the hwRevision property: Hardware revision of a HANA instance.
             *
             * @param hwRevision Hardware revision of a HANA instance.
             * @return the next definition stage.
             */
            WithCreate withHwRevision(String hwRevision);
        }
        /** The stage of the HanaInstance definition allowing to specify partnerNodeId. */
        interface WithPartnerNodeId {
            /**
             * Specifies the partnerNodeId property: ARM ID of another HanaInstance that will share a network with this
             * HanaInstance.
             *
             * @param partnerNodeId ARM ID of another HanaInstance that will share a network with this HanaInstance.
             * @return the next definition stage.
             */
            WithCreate withPartnerNodeId(String partnerNodeId);
        }
        /** The stage of the HanaInstance definition allowing to specify provisioningState. */
        interface WithProvisioningState {
            /**
             * Specifies the provisioningState property: State of provisioning of the HanaInstance.
             *
             * @param provisioningState State of provisioning of the HanaInstance.
             * @return the next definition stage.
             */
            WithCreate withProvisioningState(HanaProvisioningStatesEnum provisioningState);
        }
    }
    /**
     * Begins update for the HanaInstance resource.
     *
     * @return the stage of resource update.
     */
    HanaInstance.Update update();

    /** The template for HanaInstance update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        HanaInstance apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        HanaInstance apply(Context context);
    }
    /** The HanaInstance update stages. */
    interface UpdateStages {
        /** The stage of the HanaInstance update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Tags field of the HANA instance..
             *
             * @param tags Tags field of the HANA instance.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    HanaInstance refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    HanaInstance refresh(Context context);

    /**
     * The operation to restart a SAP HANA instance.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart();

    /**
     * The operation to restart a SAP HANA instance.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void restart(Context context);

    /**
     * The operation to start a SAP HANA instance.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start();

    /**
     * The operation to start a SAP HANA instance.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void start(Context context);

    /**
     * The operation to shutdown a SAP HANA instance.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void shutdown();

    /**
     * The operation to shutdown a SAP HANA instance.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void shutdown(Context context);
}
