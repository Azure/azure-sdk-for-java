// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hanaonazure.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the disk information for the HANA instance.
 */
@Fluent
public final class Disk implements JsonSerializable<Disk> {
    /*
     * The disk name.
     */
    private String name;

    /*
     * Specifies the size of an empty data disk in gigabytes.
     */
    private Integer diskSizeGB;

    /*
     * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and
     * therefore must be unique for each data disk attached to a VM.
     */
    private Integer lun;

    /**
     * Creates an instance of Disk class.
     */
    public Disk() {
    }

    /**
     * Get the name property: The disk name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The disk name.
     * 
     * @param name the name value to set.
     * @return the Disk object itself.
     */
    public Disk withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the diskSizeGB property: Specifies the size of an empty data disk in gigabytes.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Specifies the size of an empty data disk in gigabytes.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the Disk object itself.
     */
    public Disk withDiskSizeGB(Integer diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the lun property: Specifies the logical unit number of the data disk. This value is used to identify data
     * disks within the VM and therefore must be unique for each data disk attached to a VM.
     * 
     * @return the lun value.
     */
    public Integer lun() {
        return this.lun;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Disk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Disk if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Disk.
     */
    public static Disk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Disk deserializedDisk = new Disk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDisk.name = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedDisk.diskSizeGB = reader.getNullable(JsonReader::getInt);
                } else if ("lun".equals(fieldName)) {
                    deserializedDisk.lun = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDisk;
        });
    }
}
