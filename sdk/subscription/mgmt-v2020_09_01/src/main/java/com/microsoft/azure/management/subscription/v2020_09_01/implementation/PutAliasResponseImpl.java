/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.subscription.v2020_09_01.implementation;

import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasResponse;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasRequestProperties;
import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasResponseProperties;
import rx.functions.Func1;

class PutAliasResponseImpl extends CreatableUpdatableImpl<PutAliasResponse, PutAliasResponseInner, PutAliasResponseImpl> implements PutAliasResponse, PutAliasResponse.Definition, PutAliasResponse.Update {
    private String aliasName;
    private PutAliasRequestProperties cproperties;
    private PutAliasRequestProperties uproperties;
    private final SubscriptionManager manager;

    PutAliasResponseImpl(String name, SubscriptionManager manager) {
        super(name, new PutAliasResponseInner());
        this.manager = manager;
        // Set resource name
        this.aliasName = name;
        //
        this.cproperties = new PutAliasRequestProperties();
        this.uproperties = new PutAliasRequestProperties();
    }

    PutAliasResponseImpl(PutAliasResponseInner inner, SubscriptionManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.aliasName = inner.name();
        // set resource ancestor and positional variables
        this.aliasName = IdParsingUtils.getValueFromIdByName(inner.id(), "aliases");
        // set other parameters for create and update
        this.cproperties = new PutAliasRequestProperties();
        this.uproperties = new PutAliasRequestProperties();
    }

    @Override
    public SubscriptionManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PutAliasResponse> createResourceAsync() {
        AliasInner client = this.manager().inner().alias();
        return client.createAsync(this.aliasName, this.cproperties)
            .map(new Func1<PutAliasResponseInner, PutAliasResponseInner>() {
               @Override
               public PutAliasResponseInner call(PutAliasResponseInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PutAliasResponse> updateResourceAsync() {
        AliasInner client = this.manager().inner().alias();
        return client.createAsync(this.aliasName, this.uproperties)
            .map(new Func1<PutAliasResponseInner, PutAliasResponseInner>() {
               @Override
               public PutAliasResponseInner call(PutAliasResponseInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PutAliasResponseInner> getInnerAsync() {
        AliasInner client = this.manager().inner().alias();
        return client.getAsync(this.aliasName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.cproperties = new PutAliasRequestProperties();
        this.uproperties = new PutAliasRequestProperties();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public PutAliasResponseProperties properties() {
        return this.inner().properties();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PutAliasResponseImpl withProperties(PutAliasRequestProperties properties) {
        if (isInCreateMode()) {
            this.cproperties = properties;
        } else {
            this.uproperties = properties;
        }
        return this;
    }

}
