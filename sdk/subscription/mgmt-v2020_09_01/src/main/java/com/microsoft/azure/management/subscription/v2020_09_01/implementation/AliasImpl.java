/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.subscription.v2020_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.subscription.v2020_09_01.Alias;
import rx.Completable;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasResponse;
import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasListResult;

class AliasImpl extends WrapperImpl<AliasInner> implements Alias {
    private final SubscriptionManager manager;

    AliasImpl(SubscriptionManager manager) {
        super(manager.inner().alias());
        this.manager = manager;
    }

    public SubscriptionManager manager() {
        return this.manager;
    }

    @Override
    public PutAliasResponseImpl define(String name) {
        return wrapModel(name);
    }

    private PutAliasResponseImpl wrapModel(PutAliasResponseInner inner) {
        return  new PutAliasResponseImpl(inner, manager());
    }

    private PutAliasResponseImpl wrapModel(String name) {
        return new PutAliasResponseImpl(name, this.manager());
    }

    @Override
    public Observable<PutAliasResponse> getAsync(String aliasName) {
        AliasInner client = this.inner();
        return client.getAsync(aliasName)
        .map(new Func1<PutAliasResponseInner, PutAliasResponse>() {
            @Override
            public PutAliasResponse call(PutAliasResponseInner inner) {
                return new PutAliasResponseImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteAsync(String aliasName) {
        AliasInner client = this.inner();
        return client.deleteAsync(aliasName).toCompletable();
    }

    @Override
    public Observable<PutAliasListResult> listAsync() {
        AliasInner client = this.inner();
        return client.listAsync()
        .map(new Func1<PutAliasListResultInner, PutAliasListResult>() {
            @Override
            public PutAliasListResult call(PutAliasListResultInner inner) {
                return new PutAliasListResultImpl(inner, manager());
            }
        });
    }

}
