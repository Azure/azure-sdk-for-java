/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.subscription.v2020_09_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.subscription.v2020_09_01.ErrorResponseBodyException;
import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasRequest;
import com.microsoft.azure.management.subscription.v2020_09_01.PutAliasRequestProperties;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Alias.
 */
public class AliasInner {
    /** The Retrofit service to perform REST calls. */
    private AliasService service;
    /** The service client containing this operation class. */
    private SubscriptionClientImpl client;

    /**
     * Initializes an instance of AliasInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AliasInner(Retrofit retrofit, SubscriptionClientImpl client) {
        this.service = retrofit.create(AliasService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Alias to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AliasService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.subscription.v2020_09_01.Alias create" })
        @PUT("providers/Microsoft.Subscription/aliases/{aliasName}")
        Observable<Response<ResponseBody>> create(@Path("aliasName") String aliasName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PutAliasRequest body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.subscription.v2020_09_01.Alias beginCreate" })
        @PUT("providers/Microsoft.Subscription/aliases/{aliasName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("aliasName") String aliasName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PutAliasRequest body, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.subscription.v2020_09_01.Alias get" })
        @GET("providers/Microsoft.Subscription/aliases/{aliasName}")
        Observable<Response<ResponseBody>> get(@Path("aliasName") String aliasName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.subscription.v2020_09_01.Alias delete" })
        @HTTP(path = "providers/Microsoft.Subscription/aliases/{aliasName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("aliasName") String aliasName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.subscription.v2020_09_01.Alias list" })
        @GET("providers/Microsoft.Subscription/aliases")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseBodyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PutAliasResponseInner object if successful.
     */
    public PutAliasResponseInner create(String aliasName, PutAliasRequestProperties properties) {
        return createWithServiceResponseAsync(aliasName, properties).toBlocking().last().body();
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PutAliasResponseInner> createAsync(String aliasName, PutAliasRequestProperties properties, final ServiceCallback<PutAliasResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(aliasName, properties), serviceCallback);
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PutAliasResponseInner> createAsync(String aliasName, PutAliasRequestProperties properties) {
        return createWithServiceResponseAsync(aliasName, properties).map(new Func1<ServiceResponse<PutAliasResponseInner>, PutAliasResponseInner>() {
            @Override
            public PutAliasResponseInner call(ServiceResponse<PutAliasResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PutAliasResponseInner>> createWithServiceResponseAsync(String aliasName, PutAliasRequestProperties properties) {
        if (aliasName == null) {
            throw new IllegalArgumentException("Parameter aliasName is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        final String apiVersion = "2020-09-01";
        PutAliasRequest body = new PutAliasRequest();
        body.withProperties(properties);
        Observable<Response<ResponseBody>> observable = service.create(aliasName, apiVersion, this.client.acceptLanguage(), body, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PutAliasResponseInner>() { }.getType());
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseBodyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PutAliasResponseInner object if successful.
     */
    public PutAliasResponseInner beginCreate(String aliasName, PutAliasRequestProperties properties) {
        return beginCreateWithServiceResponseAsync(aliasName, properties).toBlocking().single().body();
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PutAliasResponseInner> beginCreateAsync(String aliasName, PutAliasRequestProperties properties, final ServiceCallback<PutAliasResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(aliasName, properties), serviceCallback);
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PutAliasResponseInner object
     */
    public Observable<PutAliasResponseInner> beginCreateAsync(String aliasName, PutAliasRequestProperties properties) {
        return beginCreateWithServiceResponseAsync(aliasName, properties).map(new Func1<ServiceResponse<PutAliasResponseInner>, PutAliasResponseInner>() {
            @Override
            public PutAliasResponseInner call(ServiceResponse<PutAliasResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param properties Put alias request properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PutAliasResponseInner object
     */
    public Observable<ServiceResponse<PutAliasResponseInner>> beginCreateWithServiceResponseAsync(String aliasName, PutAliasRequestProperties properties) {
        if (aliasName == null) {
            throw new IllegalArgumentException("Parameter aliasName is required and cannot be null.");
        }
        if (properties == null) {
            throw new IllegalArgumentException("Parameter properties is required and cannot be null.");
        }
        Validator.validate(properties);
        final String apiVersion = "2020-09-01";
        PutAliasRequest body = new PutAliasRequest();
        body.withProperties(properties);
        return service.beginCreate(aliasName, apiVersion, this.client.acceptLanguage(), body, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PutAliasResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<PutAliasResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PutAliasResponseInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PutAliasResponseInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorResponseBodyException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PutAliasResponseInner, ErrorResponseBodyException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PutAliasResponseInner>() { }.getType())
                .register(201, new TypeToken<PutAliasResponseInner>() { }.getType())
                .registerError(ErrorResponseBodyException.class)
                .build(response);
    }

    /**
     * Get Alias Subscription.
     *
     * @param aliasName Alias Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseBodyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PutAliasResponseInner object if successful.
     */
    public PutAliasResponseInner get(String aliasName) {
        return getWithServiceResponseAsync(aliasName).toBlocking().single().body();
    }

    /**
     * Get Alias Subscription.
     *
     * @param aliasName Alias Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PutAliasResponseInner> getAsync(String aliasName, final ServiceCallback<PutAliasResponseInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(aliasName), serviceCallback);
    }

    /**
     * Get Alias Subscription.
     *
     * @param aliasName Alias Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PutAliasResponseInner object
     */
    public Observable<PutAliasResponseInner> getAsync(String aliasName) {
        return getWithServiceResponseAsync(aliasName).map(new Func1<ServiceResponse<PutAliasResponseInner>, PutAliasResponseInner>() {
            @Override
            public PutAliasResponseInner call(ServiceResponse<PutAliasResponseInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Alias Subscription.
     *
     * @param aliasName Alias Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PutAliasResponseInner object
     */
    public Observable<ServiceResponse<PutAliasResponseInner>> getWithServiceResponseAsync(String aliasName) {
        if (aliasName == null) {
            throw new IllegalArgumentException("Parameter aliasName is required and cannot be null.");
        }
        final String apiVersion = "2020-09-01";
        return service.get(aliasName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PutAliasResponseInner>>>() {
                @Override
                public Observable<ServiceResponse<PutAliasResponseInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PutAliasResponseInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PutAliasResponseInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseBodyException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PutAliasResponseInner, ErrorResponseBodyException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PutAliasResponseInner>() { }.getType())
                .registerError(ErrorResponseBodyException.class)
                .build(response);
    }

    /**
     * Delete Alias.
     *
     * @param aliasName Alias Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseBodyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String aliasName) {
        deleteWithServiceResponseAsync(aliasName).toBlocking().single().body();
    }

    /**
     * Delete Alias.
     *
     * @param aliasName Alias Name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String aliasName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(aliasName), serviceCallback);
    }

    /**
     * Delete Alias.
     *
     * @param aliasName Alias Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String aliasName) {
        return deleteWithServiceResponseAsync(aliasName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete Alias.
     *
     * @param aliasName Alias Name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String aliasName) {
        if (aliasName == null) {
            throw new IllegalArgumentException("Parameter aliasName is required and cannot be null.");
        }
        final String apiVersion = "2020-09-01";
        return service.delete(aliasName, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseBodyException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseBodyException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseBodyException.class)
                .build(response);
    }

    /**
     * Get Alias Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseBodyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PutAliasListResultInner object if successful.
     */
    public PutAliasListResultInner list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get Alias Subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PutAliasListResultInner> listAsync(final ServiceCallback<PutAliasListResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get Alias Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PutAliasListResultInner object
     */
    public Observable<PutAliasListResultInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<PutAliasListResultInner>, PutAliasListResultInner>() {
            @Override
            public PutAliasListResultInner call(ServiceResponse<PutAliasListResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get Alias Subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PutAliasListResultInner object
     */
    public Observable<ServiceResponse<PutAliasListResultInner>> listWithServiceResponseAsync() {
        final String apiVersion = "2020-09-01";
        return service.list(apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PutAliasListResultInner>>>() {
                @Override
                public Observable<ServiceResponse<PutAliasListResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PutAliasListResultInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PutAliasListResultInner> listDelegate(Response<ResponseBody> response) throws ErrorResponseBodyException, IOException {
        return this.client.restClient().responseBuilderFactory().<PutAliasListResultInner, ErrorResponseBodyException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PutAliasListResultInner>() { }.getType())
                .registerError(ErrorResponseBodyException.class)
                .build(response);
    }

}
