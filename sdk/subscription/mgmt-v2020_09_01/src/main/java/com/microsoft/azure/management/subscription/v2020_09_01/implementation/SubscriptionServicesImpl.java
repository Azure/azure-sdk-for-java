/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.subscription.v2020_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.subscription.v2020_09_01.SubscriptionServices;
import rx.functions.Func1;
import rx.Observable;
import com.microsoft.azure.management.subscription.v2020_09_01.CanceledSubscriptionId;
import com.microsoft.azure.management.subscription.v2020_09_01.RenamedSubscriptionId;
import com.microsoft.azure.management.subscription.v2020_09_01.EnabledSubscriptionId;

class SubscriptionServicesImpl extends WrapperImpl<SubscriptionServicesInner> implements SubscriptionServices {
    private final SubscriptionManager manager;

    SubscriptionServicesImpl(SubscriptionManager manager) {
        super(manager.inner().subscriptionServices());
        this.manager = manager;
    }

    public SubscriptionManager manager() {
        return this.manager;
    }

    @Override
    public Observable<CanceledSubscriptionId> cancelAsync(String subscriptionId) {
        SubscriptionServicesInner client = this.inner();
        return client.cancelAsync(subscriptionId)
        .map(new Func1<CanceledSubscriptionIdInner, CanceledSubscriptionId>() {
            @Override
            public CanceledSubscriptionId call(CanceledSubscriptionIdInner inner) {
                return new CanceledSubscriptionIdImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<RenamedSubscriptionId> renameAsync(String subscriptionId) {
        SubscriptionServicesInner client = this.inner();
        return client.renameAsync(subscriptionId)
        .map(new Func1<RenamedSubscriptionIdInner, RenamedSubscriptionId>() {
            @Override
            public RenamedSubscriptionId call(RenamedSubscriptionIdInner inner) {
                return new RenamedSubscriptionIdImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<EnabledSubscriptionId> enableAsync(String subscriptionId) {
        SubscriptionServicesInner client = this.inner();
        return client.enableAsync(subscriptionId)
        .map(new Func1<EnabledSubscriptionIdInner, EnabledSubscriptionId>() {
            @Override
            public EnabledSubscriptionId call(EnabledSubscriptionIdInner inner) {
                return new EnabledSubscriptionIdImpl(inner, manager());
            }
        });
    }

}
