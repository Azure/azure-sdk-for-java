// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.subscription.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.subscription.SubscriptionManager;
import com.azure.resourcemanager.subscription.models.ProvisioningState;
import com.azure.resourcemanager.subscription.models.PutAliasRequest;
import com.azure.resourcemanager.subscription.models.PutAliasRequestProperties;
import com.azure.resourcemanager.subscription.models.PutAliasResponse;
import com.azure.resourcemanager.subscription.models.Workload;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AliasCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"subscriptionId\":\"c\",\"provisioningState\":\"Succeeded\"},\"id\":\"wooc\",\"name\":\"cbonqvpk\",\"type\":\"lrxnjeaseiphe\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        SubscriptionManager manager = SubscriptionManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PutAliasResponse response = manager.alias()
            .create("cfionl",
                new PutAliasRequest().withProperties(new PutAliasRequestProperties().withDisplayName("x")
                    .withWorkload(Workload.PRODUCTION)
                    .withBillingScope("tzxdpnqbqqwx")
                    .withSubscriptionId("feallnwsu")
                    .withResellerId("snjampmng")),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
    }
}
