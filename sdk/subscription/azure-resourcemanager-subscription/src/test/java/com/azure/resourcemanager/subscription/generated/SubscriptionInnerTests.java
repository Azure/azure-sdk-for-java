// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.subscription.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.subscription.fluent.models.SubscriptionInner;
import com.azure.resourcemanager.subscription.models.SubscriptionPolicies;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SubscriptionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubscriptionInner model =
            BinaryData
                .fromString(
                    "{\"id\":\"rcryuanzwuxzdxta\",\"subscriptionId\":\"lhmwhfpmrqobm\",\"displayName\":\"kknryrtihf\",\"state\":\"Deleted\",\"tenantId\":\"bpzvgn\",\"tags\":{\"ohdbihanufh\":\"ymglzufcyz\",\"a\":\"cbjy\",\"xwczbyscnp\":\"ithxqhabifpi\"},\"subscriptionPolicies\":{\"locationPlacementId\":\"hiv\",\"quotaId\":\"n\",\"spendingLimit\":\"Off\"},\"authorizationSource\":\"br\"}")
                .toObject(SubscriptionInner.class);
        Assertions.assertEquals("ymglzufcyz", model.tags().get("ohdbihanufh"));
        Assertions.assertEquals("br", model.authorizationSource());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubscriptionInner model =
            new SubscriptionInner()
                .withTags(mapOf("ohdbihanufh", "ymglzufcyz", "a", "cbjy", "xwczbyscnp", "ithxqhabifpi"))
                .withSubscriptionPolicies(new SubscriptionPolicies())
                .withAuthorizationSource("br");
        model = BinaryData.fromObject(model).toObject(SubscriptionInner.class);
        Assertions.assertEquals("ymglzufcyz", model.tags().get("ohdbihanufh"));
        Assertions.assertEquals("br", model.authorizationSource());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
