// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.KubeEnvironmentInner;
import java.util.Map;

/** An immutable client-side representation of KubeEnvironment. */
public interface KubeEnvironment {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the extendedLocation property: Extended Location.
     *
     * @return the extendedLocation value.
     */
    ExtendedLocation extendedLocation();

    /**
     * Gets the provisioningState property: Provisioning state of the Kubernetes Environment.
     *
     * @return the provisioningState value.
     */
    KubeEnvironmentProvisioningState provisioningState();

    /**
     * Gets the deploymentErrors property: Any errors that occurred during deployment or deployment validation.
     *
     * @return the deploymentErrors value.
     */
    String deploymentErrors();

    /**
     * Gets the internalLoadBalancerEnabled property: Only visible within Vnet/Subnet.
     *
     * @return the internalLoadBalancerEnabled value.
     */
    Boolean internalLoadBalancerEnabled();

    /**
     * Gets the defaultDomain property: Default Domain Name for the cluster.
     *
     * @return the defaultDomain value.
     */
    String defaultDomain();

    /**
     * Gets the staticIp property: Static IP of the KubeEnvironment.
     *
     * @return the staticIp value.
     */
    String staticIp();

    /**
     * Gets the arcConfiguration property: Cluster configuration which determines the ARC cluster components types. Eg:
     * Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType etc.
     *
     * @return the arcConfiguration value.
     */
    ArcConfiguration arcConfiguration();

    /**
     * Gets the appLogsConfiguration property: Cluster configuration which enables the log daemon to export app logs to
     * a destination. Currently only "log-analytics" is supported.
     *
     * @return the appLogsConfiguration value.
     */
    AppLogsConfiguration appLogsConfiguration();

    /**
     * Gets the aksResourceId property: The aksResourceID property.
     *
     * @return the aksResourceId value.
     */
    String aksResourceId();

    /**
     * Gets the kind property: Kind of resource.
     *
     * @return the kind value.
     */
    String kind();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.appservice.generated.fluent.models.KubeEnvironmentInner object.
     *
     * @return the inner object.
     */
    KubeEnvironmentInner innerModel();

    /** The entirety of the KubeEnvironment definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The KubeEnvironment definition stages. */
    interface DefinitionStages {
        /** The first stage of the KubeEnvironment definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the KubeEnvironment definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the KubeEnvironment definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName Name of the resource group to which the resource belongs.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the KubeEnvironment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithExtendedLocation,
                DefinitionStages.WithInternalLoadBalancerEnabled,
                DefinitionStages.WithStaticIp,
                DefinitionStages.WithArcConfiguration,
                DefinitionStages.WithAppLogsConfiguration,
                DefinitionStages.WithAksResourceId,
                DefinitionStages.WithKind {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            KubeEnvironment create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            KubeEnvironment create(Context context);
        }
        /** The stage of the KubeEnvironment definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the KubeEnvironment definition allowing to specify extendedLocation. */
        interface WithExtendedLocation {
            /**
             * Specifies the extendedLocation property: Extended Location..
             *
             * @param extendedLocation Extended Location.
             * @return the next definition stage.
             */
            WithCreate withExtendedLocation(ExtendedLocation extendedLocation);
        }
        /** The stage of the KubeEnvironment definition allowing to specify internalLoadBalancerEnabled. */
        interface WithInternalLoadBalancerEnabled {
            /**
             * Specifies the internalLoadBalancerEnabled property: Only visible within Vnet/Subnet.
             *
             * @param internalLoadBalancerEnabled Only visible within Vnet/Subnet.
             * @return the next definition stage.
             */
            WithCreate withInternalLoadBalancerEnabled(Boolean internalLoadBalancerEnabled);
        }
        /** The stage of the KubeEnvironment definition allowing to specify staticIp. */
        interface WithStaticIp {
            /**
             * Specifies the staticIp property: Static IP of the KubeEnvironment.
             *
             * @param staticIp Static IP of the KubeEnvironment.
             * @return the next definition stage.
             */
            WithCreate withStaticIp(String staticIp);
        }
        /** The stage of the KubeEnvironment definition allowing to specify arcConfiguration. */
        interface WithArcConfiguration {
            /**
             * Specifies the arcConfiguration property: Cluster configuration which determines the ARC cluster
             * components types. Eg: Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType etc..
             *
             * @param arcConfiguration Cluster configuration which determines the ARC cluster components types. Eg:
             *     Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType etc.
             * @return the next definition stage.
             */
            WithCreate withArcConfiguration(ArcConfiguration arcConfiguration);
        }
        /** The stage of the KubeEnvironment definition allowing to specify appLogsConfiguration. */
        interface WithAppLogsConfiguration {
            /**
             * Specifies the appLogsConfiguration property: Cluster configuration which enables the log daemon to export
             * app logs to a destination. Currently only "log-analytics" is supported.
             *
             * @param appLogsConfiguration Cluster configuration which enables the log daemon to export app logs to a
             *     destination. Currently only "log-analytics" is supported.
             * @return the next definition stage.
             */
            WithCreate withAppLogsConfiguration(AppLogsConfiguration appLogsConfiguration);
        }
        /** The stage of the KubeEnvironment definition allowing to specify aksResourceId. */
        interface WithAksResourceId {
            /**
             * Specifies the aksResourceId property: The aksResourceID property..
             *
             * @param aksResourceId The aksResourceID property.
             * @return the next definition stage.
             */
            WithCreate withAksResourceId(String aksResourceId);
        }
        /** The stage of the KubeEnvironment definition allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource..
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            WithCreate withKind(String kind);
        }
    }
    /**
     * Begins update for the KubeEnvironment resource.
     *
     * @return the stage of resource update.
     */
    KubeEnvironment.Update update();

    /** The template for KubeEnvironment update. */
    interface Update
        extends UpdateStages.WithKind,
            UpdateStages.WithStaticIp,
            UpdateStages.WithArcConfiguration,
            UpdateStages.WithAppLogsConfiguration,
            UpdateStages.WithAksResourceId {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        KubeEnvironment apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        KubeEnvironment apply(Context context);
    }
    /** The KubeEnvironment update stages. */
    interface UpdateStages {
        /** The stage of the KubeEnvironment update allowing to specify kind. */
        interface WithKind {
            /**
             * Specifies the kind property: Kind of resource..
             *
             * @param kind Kind of resource.
             * @return the next definition stage.
             */
            Update withKind(String kind);
        }
        /** The stage of the KubeEnvironment update allowing to specify staticIp. */
        interface WithStaticIp {
            /**
             * Specifies the staticIp property: Static IP of the KubeEnvironment.
             *
             * @param staticIp Static IP of the KubeEnvironment.
             * @return the next definition stage.
             */
            Update withStaticIp(String staticIp);
        }
        /** The stage of the KubeEnvironment update allowing to specify arcConfiguration. */
        interface WithArcConfiguration {
            /**
             * Specifies the arcConfiguration property: Cluster configuration which determines the ARC cluster
             * components types. Eg: Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType etc..
             *
             * @param arcConfiguration Cluster configuration which determines the ARC cluster components types. Eg:
             *     Choosing between BuildService kind, FrontEnd Service ArtifactsStorageType etc.
             * @return the next definition stage.
             */
            Update withArcConfiguration(ArcConfiguration arcConfiguration);
        }
        /** The stage of the KubeEnvironment update allowing to specify appLogsConfiguration. */
        interface WithAppLogsConfiguration {
            /**
             * Specifies the appLogsConfiguration property: Cluster configuration which enables the log daemon to export
             * app logs to a destination. Currently only "log-analytics" is supported.
             *
             * @param appLogsConfiguration Cluster configuration which enables the log daemon to export app logs to a
             *     destination. Currently only "log-analytics" is supported.
             * @return the next definition stage.
             */
            Update withAppLogsConfiguration(AppLogsConfiguration appLogsConfiguration);
        }
        /** The stage of the KubeEnvironment update allowing to specify aksResourceId. */
        interface WithAksResourceId {
            /**
             * Specifies the aksResourceId property: The aksResourceID property..
             *
             * @param aksResourceId The aksResourceID property.
             * @return the next definition stage.
             */
            Update withAksResourceId(String aksResourceId);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    KubeEnvironment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    KubeEnvironment refresh(Context context);
}
