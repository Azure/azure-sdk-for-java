// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.fluent.StaticSitesClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.DatabaseConnectionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PrivateLinkResourcesWrapperInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RemotePrivateEndpointConnectionArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteBasicAuthPropertiesArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteBuildArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteCustomDomainOverviewArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteFunctionOverviewArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteLinkedBackendArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSitesWorkflowPreviewInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteUserArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteUserInvitationResponseResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StaticSiteUserProvidedFunctionAppArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StringListInner;
import com.azure.resourcemanager.appservice.generated.models.BasicAuthName;
import com.azure.resourcemanager.appservice.generated.models.DatabaseConnection;
import com.azure.resourcemanager.appservice.generated.models.DatabaseConnectionPatchRequest;
import com.azure.resourcemanager.appservice.generated.models.PrivateLinkResourcesWrapper;
import com.azure.resourcemanager.appservice.generated.models.RemotePrivateEndpointConnectionArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteBasicAuthPropertiesArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteBuildArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteCustomDomainOverviewArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteCustomDomainRequestPropertiesArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteFunctionOverviewArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteLinkedBackendArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteResetPropertiesArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSites;
import com.azure.resourcemanager.appservice.generated.models.StaticSitesWorkflowPreview;
import com.azure.resourcemanager.appservice.generated.models.StaticSitesWorkflowPreviewRequest;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteUserArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteUserInvitationRequestResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteUserInvitationResponseResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteUserProvidedFunctionAppArmResource;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteZipDeploymentArmResource;
import com.azure.resourcemanager.appservice.generated.models.StringDictionary;
import com.azure.resourcemanager.appservice.generated.models.StringList;

public final class StaticSitesImpl implements StaticSites {
    private static final ClientLogger LOGGER = new ClientLogger(StaticSitesImpl.class);

    private final StaticSitesClient innerClient;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public StaticSitesImpl(StaticSitesClient innerClient,
        com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StaticSitesWorkflowPreview> previewWorkflowWithResponse(String location,
        StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, Context context) {
        Response<StaticSitesWorkflowPreviewInner> inner
            = this.serviceClient().previewWorkflowWithResponse(location, staticSitesWorkflowPreviewRequest, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSitesWorkflowPreviewImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSitesWorkflowPreview previewWorkflow(String location,
        StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest) {
        StaticSitesWorkflowPreviewInner inner
            = this.serviceClient().previewWorkflow(location, staticSitesWorkflowPreviewRequest);
        if (inner != null) {
            return new StaticSitesWorkflowPreviewImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<StaticSiteArmResource> list() {
        PagedIterable<StaticSiteArmResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticSiteArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteArmResource> list(Context context) {
        PagedIterable<StaticSiteArmResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticSiteArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteArmResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<StaticSiteArmResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticSiteArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteArmResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<StaticSiteArmResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticSiteArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteArmResource> getByResourceGroupWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<StaticSiteArmResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteArmResource getByResourceGroup(String resourceGroupName, String name) {
        StaticSiteArmResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new StaticSiteArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public void delete(String resourceGroupName, String name, Context context) {
        this.serviceClient().delete(resourceGroupName, name, context);
    }

    public PagedIterable<StaticSiteUserArmResource> listStaticSiteUsers(String resourceGroupName, String name,
        String authprovider) {
        PagedIterable<StaticSiteUserArmResourceInner> inner
            = this.serviceClient().listStaticSiteUsers(resourceGroupName, name, authprovider);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticSiteUserArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteUserArmResource> listStaticSiteUsers(String resourceGroupName, String name,
        String authprovider, Context context) {
        PagedIterable<StaticSiteUserArmResourceInner> inner
            = this.serviceClient().listStaticSiteUsers(resourceGroupName, name, authprovider, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StaticSiteUserArmResourceImpl(inner1, this.manager()));
    }

    public Response<Void> deleteStaticSiteUserWithResponse(String resourceGroupName, String name, String authprovider,
        String userid, Context context) {
        return this.serviceClient()
            .deleteStaticSiteUserWithResponse(resourceGroupName, name, authprovider, userid, context);
    }

    public void deleteStaticSiteUser(String resourceGroupName, String name, String authprovider, String userid) {
        this.serviceClient().deleteStaticSiteUser(resourceGroupName, name, authprovider, userid);
    }

    public Response<StaticSiteUserArmResource> updateStaticSiteUserWithResponse(String resourceGroupName, String name,
        String authprovider, String userid, StaticSiteUserArmResourceInner staticSiteUserEnvelope, Context context) {
        Response<StaticSiteUserArmResourceInner> inner = this.serviceClient()
            .updateStaticSiteUserWithResponse(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteUserArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteUserArmResource updateStaticSiteUser(String resourceGroupName, String name, String authprovider,
        String userid, StaticSiteUserArmResourceInner staticSiteUserEnvelope) {
        StaticSiteUserArmResourceInner inner = this.serviceClient()
            .updateStaticSiteUser(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope);
        if (inner != null) {
            return new StaticSiteUserArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<StaticSiteBuildArmResource> getStaticSiteBuilds(String resourceGroupName, String name) {
        PagedIterable<StaticSiteBuildArmResourceInner> inner
            = this.serviceClient().getStaticSiteBuilds(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteBuildArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteBuildArmResource> getStaticSiteBuilds(String resourceGroupName, String name,
        Context context) {
        PagedIterable<StaticSiteBuildArmResourceInner> inner
            = this.serviceClient().getStaticSiteBuilds(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteBuildArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteBuildArmResource> getStaticSiteBuildWithResponse(String resourceGroupName, String name,
        String environmentName, Context context) {
        Response<StaticSiteBuildArmResourceInner> inner
            = this.serviceClient().getStaticSiteBuildWithResponse(resourceGroupName, name, environmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteBuildArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteBuildArmResource getStaticSiteBuild(String resourceGroupName, String name,
        String environmentName) {
        StaticSiteBuildArmResourceInner inner
            = this.serviceClient().getStaticSiteBuild(resourceGroupName, name, environmentName);
        if (inner != null) {
            return new StaticSiteBuildArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteStaticSiteBuild(String resourceGroupName, String name, String environmentName) {
        this.serviceClient().deleteStaticSiteBuild(resourceGroupName, name, environmentName);
    }

    public void deleteStaticSiteBuild(String resourceGroupName, String name, String environmentName, Context context) {
        this.serviceClient().deleteStaticSiteBuild(resourceGroupName, name, environmentName, context);
    }

    public Response<StringDictionary> createOrUpdateStaticSiteBuildAppSettingsWithResponse(String resourceGroupName,
        String name, String environmentName, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner = this.serviceClient()
            .createOrUpdateStaticSiteBuildAppSettingsWithResponse(resourceGroupName, name, environmentName, appSettings,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary createOrUpdateStaticSiteBuildAppSettings(String resourceGroupName, String name,
        String environmentName, StringDictionaryInner appSettings) {
        StringDictionaryInner inner = this.serviceClient()
            .createOrUpdateStaticSiteBuildAppSettings(resourceGroupName, name, environmentName, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> createOrUpdateStaticSiteBuildFunctionAppSettingsWithResponse(
        String resourceGroupName, String name, String environmentName, StringDictionaryInner appSettings,
        Context context) {
        Response<StringDictionaryInner> inner = this.serviceClient()
            .createOrUpdateStaticSiteBuildFunctionAppSettingsWithResponse(resourceGroupName, name, environmentName,
                appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary createOrUpdateStaticSiteBuildFunctionAppSettings(String resourceGroupName, String name,
        String environmentName, StringDictionaryInner appSettings) {
        StringDictionaryInner inner = this.serviceClient()
            .createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName, name, environmentName, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DatabaseConnection> getBuildDatabaseConnections(String resourceGroupName, String name,
        String environmentName) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getBuildDatabaseConnections(resourceGroupName, name, environmentName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseConnection> getBuildDatabaseConnections(String resourceGroupName, String name,
        String environmentName, Context context) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getBuildDatabaseConnections(resourceGroupName, name, environmentName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public Response<DatabaseConnection> getBuildDatabaseConnectionWithResponse(String resourceGroupName, String name,
        String environmentName, String databaseConnectionName, Context context) {
        Response<DatabaseConnectionInner> inner = this.serviceClient()
            .getBuildDatabaseConnectionWithResponse(resourceGroupName, name, environmentName, databaseConnectionName,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseConnection getBuildDatabaseConnection(String resourceGroupName, String name, String environmentName,
        String databaseConnectionName) {
        DatabaseConnectionInner inner = this.serviceClient()
            .getBuildDatabaseConnection(resourceGroupName, name, environmentName, databaseConnectionName);
        if (inner != null) {
            return new DatabaseConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteBuildDatabaseConnectionWithResponse(String resourceGroupName, String name,
        String environmentName, String databaseConnectionName, Context context) {
        return this.serviceClient()
            .deleteBuildDatabaseConnectionWithResponse(resourceGroupName, name, environmentName, databaseConnectionName,
                context);
    }

    public void deleteBuildDatabaseConnection(String resourceGroupName, String name, String environmentName,
        String databaseConnectionName) {
        this.serviceClient()
            .deleteBuildDatabaseConnection(resourceGroupName, name, environmentName, databaseConnectionName);
    }

    public Response<DatabaseConnection> getBuildDatabaseConnectionWithDetailsWithResponse(String resourceGroupName,
        String name, String environmentName, String databaseConnectionName, Context context) {
        Response<DatabaseConnectionInner> inner = this.serviceClient()
            .getBuildDatabaseConnectionWithDetailsWithResponse(resourceGroupName, name, environmentName,
                databaseConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseConnection getBuildDatabaseConnectionWithDetails(String resourceGroupName, String name,
        String environmentName, String databaseConnectionName) {
        DatabaseConnectionInner inner = this.serviceClient()
            .getBuildDatabaseConnectionWithDetails(resourceGroupName, name, environmentName, databaseConnectionName);
        if (inner != null) {
            return new DatabaseConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<StaticSiteFunctionOverviewArmResource> listStaticSiteBuildFunctions(String resourceGroupName,
        String name, String environmentName) {
        PagedIterable<StaticSiteFunctionOverviewArmResourceInner> inner
            = this.serviceClient().listStaticSiteBuildFunctions(resourceGroupName, name, environmentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteFunctionOverviewArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteFunctionOverviewArmResource> listStaticSiteBuildFunctions(String resourceGroupName,
        String name, String environmentName, Context context) {
        PagedIterable<StaticSiteFunctionOverviewArmResourceInner> inner
            = this.serviceClient().listStaticSiteBuildFunctions(resourceGroupName, name, environmentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteFunctionOverviewArmResourceImpl(inner1, this.manager()));
    }

    public Response<StringDictionary> listStaticSiteBuildAppSettingsWithResponse(String resourceGroupName, String name,
        String environmentName, Context context) {
        Response<StringDictionaryInner> inner = this.serviceClient()
            .listStaticSiteBuildAppSettingsWithResponse(resourceGroupName, name, environmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listStaticSiteBuildAppSettings(String resourceGroupName, String name,
        String environmentName) {
        StringDictionaryInner inner
            = this.serviceClient().listStaticSiteBuildAppSettings(resourceGroupName, name, environmentName);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listStaticSiteBuildFunctionAppSettingsWithResponse(String resourceGroupName,
        String name, String environmentName, Context context) {
        Response<StringDictionaryInner> inner = this.serviceClient()
            .listStaticSiteBuildFunctionAppSettingsWithResponse(resourceGroupName, name, environmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listStaticSiteBuildFunctionAppSettings(String resourceGroupName, String name,
        String environmentName) {
        StringDictionaryInner inner
            = this.serviceClient().listStaticSiteBuildFunctionAppSettings(resourceGroupName, name, environmentName);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<DatabaseConnection> getBuildDatabaseConnectionsWithDetails(String resourceGroupName,
        String name, String environmentName) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getBuildDatabaseConnectionsWithDetails(resourceGroupName, name, environmentName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseConnection> getBuildDatabaseConnectionsWithDetails(String resourceGroupName,
        String name, String environmentName, Context context) {
        PagedIterable<DatabaseConnectionInner> inner = this.serviceClient()
            .getBuildDatabaseConnectionsWithDetails(resourceGroupName, name, environmentName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteUserProvidedFunctionAppArmResource>
        getUserProvidedFunctionAppsForStaticSiteBuild(String resourceGroupName, String name, String environmentName) {
        PagedIterable<StaticSiteUserProvidedFunctionAppArmResourceInner> inner = this.serviceClient()
            .getUserProvidedFunctionAppsForStaticSiteBuild(resourceGroupName, name, environmentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteUserProvidedFunctionAppArmResource> getUserProvidedFunctionAppsForStaticSiteBuild(
        String resourceGroupName, String name, String environmentName, Context context) {
        PagedIterable<StaticSiteUserProvidedFunctionAppArmResourceInner> inner = this.serviceClient()
            .getUserProvidedFunctionAppsForStaticSiteBuild(resourceGroupName, name, environmentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteUserProvidedFunctionAppArmResource>
        getUserProvidedFunctionAppForStaticSiteBuildWithResponse(String resourceGroupName, String name,
            String environmentName, String functionAppName, Context context) {
        Response<StaticSiteUserProvidedFunctionAppArmResourceInner> inner = this.serviceClient()
            .getUserProvidedFunctionAppForStaticSiteBuildWithResponse(resourceGroupName, name, environmentName,
                functionAppName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteUserProvidedFunctionAppArmResource getUserProvidedFunctionAppForStaticSiteBuild(
        String resourceGroupName, String name, String environmentName, String functionAppName) {
        StaticSiteUserProvidedFunctionAppArmResourceInner inner = this.serviceClient()
            .getUserProvidedFunctionAppForStaticSiteBuild(resourceGroupName, name, environmentName, functionAppName);
        if (inner != null) {
            return new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> detachUserProvidedFunctionAppFromStaticSiteBuildWithResponse(String resourceGroupName,
        String name, String environmentName, String functionAppName, Context context) {
        return this.serviceClient()
            .detachUserProvidedFunctionAppFromStaticSiteBuildWithResponse(resourceGroupName, name, environmentName,
                functionAppName, context);
    }

    public void detachUserProvidedFunctionAppFromStaticSiteBuild(String resourceGroupName, String name,
        String environmentName, String functionAppName) {
        this.serviceClient()
            .detachUserProvidedFunctionAppFromStaticSiteBuild(resourceGroupName, name, environmentName,
                functionAppName);
    }

    public void createZipDeploymentForStaticSiteBuild(String resourceGroupName, String name, String environmentName,
        StaticSiteZipDeploymentArmResource staticSiteZipDeploymentEnvelope) {
        this.serviceClient()
            .createZipDeploymentForStaticSiteBuild(resourceGroupName, name, environmentName,
                staticSiteZipDeploymentEnvelope);
    }

    public void createZipDeploymentForStaticSiteBuild(String resourceGroupName, String name, String environmentName,
        StaticSiteZipDeploymentArmResource staticSiteZipDeploymentEnvelope, Context context) {
        this.serviceClient()
            .createZipDeploymentForStaticSiteBuild(resourceGroupName, name, environmentName,
                staticSiteZipDeploymentEnvelope, context);
    }

    public Response<StringDictionary> createOrUpdateStaticSiteAppSettingsWithResponse(String resourceGroupName,
        String name, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner = this.serviceClient()
            .createOrUpdateStaticSiteAppSettingsWithResponse(resourceGroupName, name, appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary createOrUpdateStaticSiteAppSettings(String resourceGroupName, String name,
        StringDictionaryInner appSettings) {
        StringDictionaryInner inner
            = this.serviceClient().createOrUpdateStaticSiteAppSettings(resourceGroupName, name, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<StaticSiteBasicAuthPropertiesArmResource> listBasicAuth(String resourceGroupName,
        String name) {
        PagedIterable<StaticSiteBasicAuthPropertiesArmResourceInner> inner
            = this.serviceClient().listBasicAuth(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteBasicAuthPropertiesArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteBasicAuthPropertiesArmResource> listBasicAuth(String resourceGroupName, String name,
        Context context) {
        PagedIterable<StaticSiteBasicAuthPropertiesArmResourceInner> inner
            = this.serviceClient().listBasicAuth(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteBasicAuthPropertiesArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteBasicAuthPropertiesArmResource> getBasicAuthWithResponse(String resourceGroupName,
        String name, BasicAuthName basicAuthName, Context context) {
        Response<StaticSiteBasicAuthPropertiesArmResourceInner> inner
            = this.serviceClient().getBasicAuthWithResponse(resourceGroupName, name, basicAuthName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteBasicAuthPropertiesArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteBasicAuthPropertiesArmResource getBasicAuth(String resourceGroupName, String name,
        BasicAuthName basicAuthName) {
        StaticSiteBasicAuthPropertiesArmResourceInner inner
            = this.serviceClient().getBasicAuth(resourceGroupName, name, basicAuthName);
        if (inner != null) {
            return new StaticSiteBasicAuthPropertiesArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> createOrUpdateStaticSiteFunctionAppSettingsWithResponse(String resourceGroupName,
        String name, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner = this.serviceClient()
            .createOrUpdateStaticSiteFunctionAppSettingsWithResponse(resourceGroupName, name, appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary createOrUpdateStaticSiteFunctionAppSettings(String resourceGroupName, String name,
        StringDictionaryInner appSettings) {
        StringDictionaryInner inner
            = this.serviceClient().createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName, name, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StaticSiteUserInvitationResponseResource> createUserRolesInvitationLinkWithResponse(
        String resourceGroupName, String name,
        StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope, Context context) {
        Response<StaticSiteUserInvitationResponseResourceInner> inner = this.serviceClient()
            .createUserRolesInvitationLinkWithResponse(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope,
                context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteUserInvitationResponseResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteUserInvitationResponseResource createUserRolesInvitationLink(String resourceGroupName, String name,
        StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope) {
        StaticSiteUserInvitationResponseResourceInner inner = this.serviceClient()
            .createUserRolesInvitationLink(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope);
        if (inner != null) {
            return new StaticSiteUserInvitationResponseResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<StaticSiteCustomDomainOverviewArmResource>
        listStaticSiteCustomDomains(String resourceGroupName, String name) {
        PagedIterable<StaticSiteCustomDomainOverviewArmResourceInner> inner
            = this.serviceClient().listStaticSiteCustomDomains(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteCustomDomainOverviewArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteCustomDomainOverviewArmResource>
        listStaticSiteCustomDomains(String resourceGroupName, String name, Context context) {
        PagedIterable<StaticSiteCustomDomainOverviewArmResourceInner> inner
            = this.serviceClient().listStaticSiteCustomDomains(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteCustomDomainOverviewArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteCustomDomainOverviewArmResource> getStaticSiteCustomDomainWithResponse(
        String resourceGroupName, String name, String domainName, Context context) {
        Response<StaticSiteCustomDomainOverviewArmResourceInner> inner
            = this.serviceClient().getStaticSiteCustomDomainWithResponse(resourceGroupName, name, domainName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteCustomDomainOverviewArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteCustomDomainOverviewArmResource getStaticSiteCustomDomain(String resourceGroupName, String name,
        String domainName) {
        StaticSiteCustomDomainOverviewArmResourceInner inner
            = this.serviceClient().getStaticSiteCustomDomain(resourceGroupName, name, domainName);
        if (inner != null) {
            return new StaticSiteCustomDomainOverviewArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteStaticSiteCustomDomain(String resourceGroupName, String name, String domainName) {
        this.serviceClient().deleteStaticSiteCustomDomain(resourceGroupName, name, domainName);
    }

    public void deleteStaticSiteCustomDomain(String resourceGroupName, String name, String domainName,
        Context context) {
        this.serviceClient().deleteStaticSiteCustomDomain(resourceGroupName, name, domainName, context);
    }

    public void validateCustomDomainCanBeAddedToStaticSite(String resourceGroupName, String name, String domainName,
        StaticSiteCustomDomainRequestPropertiesArmResource staticSiteCustomDomainRequestPropertiesEnvelope) {
        this.serviceClient()
            .validateCustomDomainCanBeAddedToStaticSite(resourceGroupName, name, domainName,
                staticSiteCustomDomainRequestPropertiesEnvelope);
    }

    public void validateCustomDomainCanBeAddedToStaticSite(String resourceGroupName, String name, String domainName,
        StaticSiteCustomDomainRequestPropertiesArmResource staticSiteCustomDomainRequestPropertiesEnvelope,
        Context context) {
        this.serviceClient()
            .validateCustomDomainCanBeAddedToStaticSite(resourceGroupName, name, domainName,
                staticSiteCustomDomainRequestPropertiesEnvelope, context);
    }

    public PagedIterable<DatabaseConnection> getDatabaseConnections(String resourceGroupName, String name) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getDatabaseConnections(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseConnection> getDatabaseConnections(String resourceGroupName, String name,
        Context context) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getDatabaseConnections(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public Response<DatabaseConnection> getDatabaseConnectionWithResponse(String resourceGroupName, String name,
        String databaseConnectionName, Context context) {
        Response<DatabaseConnectionInner> inner = this.serviceClient()
            .getDatabaseConnectionWithResponse(resourceGroupName, name, databaseConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseConnection getDatabaseConnection(String resourceGroupName, String name,
        String databaseConnectionName) {
        DatabaseConnectionInner inner
            = this.serviceClient().getDatabaseConnection(resourceGroupName, name, databaseConnectionName);
        if (inner != null) {
            return new DatabaseConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseConnection> createOrUpdateDatabaseConnectionWithResponse(String resourceGroupName,
        String name, String databaseConnectionName, DatabaseConnectionInner databaseConnectionRequestEnvelope,
        Context context) {
        Response<DatabaseConnectionInner> inner = this.serviceClient()
            .createOrUpdateDatabaseConnectionWithResponse(resourceGroupName, name, databaseConnectionName,
                databaseConnectionRequestEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseConnection createOrUpdateDatabaseConnection(String resourceGroupName, String name,
        String databaseConnectionName, DatabaseConnectionInner databaseConnectionRequestEnvelope) {
        DatabaseConnectionInner inner = this.serviceClient()
            .createOrUpdateDatabaseConnection(resourceGroupName, name, databaseConnectionName,
                databaseConnectionRequestEnvelope);
        if (inner != null) {
            return new DatabaseConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteDatabaseConnectionWithResponse(String resourceGroupName, String name,
        String databaseConnectionName, Context context) {
        return this.serviceClient()
            .deleteDatabaseConnectionWithResponse(resourceGroupName, name, databaseConnectionName, context);
    }

    public void deleteDatabaseConnection(String resourceGroupName, String name, String databaseConnectionName) {
        this.serviceClient().deleteDatabaseConnection(resourceGroupName, name, databaseConnectionName);
    }

    public Response<DatabaseConnection> updateDatabaseConnectionWithResponse(String resourceGroupName, String name,
        String databaseConnectionName, DatabaseConnectionPatchRequest databaseConnectionRequestEnvelope,
        Context context) {
        Response<DatabaseConnectionInner> inner = this.serviceClient()
            .updateDatabaseConnectionWithResponse(resourceGroupName, name, databaseConnectionName,
                databaseConnectionRequestEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseConnection updateDatabaseConnection(String resourceGroupName, String name,
        String databaseConnectionName, DatabaseConnectionPatchRequest databaseConnectionRequestEnvelope) {
        DatabaseConnectionInner inner = this.serviceClient()
            .updateDatabaseConnection(resourceGroupName, name, databaseConnectionName,
                databaseConnectionRequestEnvelope);
        if (inner != null) {
            return new DatabaseConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DatabaseConnection> getDatabaseConnectionWithDetailsWithResponse(String resourceGroupName,
        String name, String databaseConnectionName, Context context) {
        Response<DatabaseConnectionInner> inner = this.serviceClient()
            .getDatabaseConnectionWithDetailsWithResponse(resourceGroupName, name, databaseConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DatabaseConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DatabaseConnection getDatabaseConnectionWithDetails(String resourceGroupName, String name,
        String databaseConnectionName) {
        DatabaseConnectionInner inner
            = this.serviceClient().getDatabaseConnectionWithDetails(resourceGroupName, name, databaseConnectionName);
        if (inner != null) {
            return new DatabaseConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void detachStaticSite(String resourceGroupName, String name) {
        this.serviceClient().detachStaticSite(resourceGroupName, name);
    }

    public void detachStaticSite(String resourceGroupName, String name, Context context) {
        this.serviceClient().detachStaticSite(resourceGroupName, name, context);
    }

    public PagedIterable<StaticSiteFunctionOverviewArmResource> listStaticSiteFunctions(String resourceGroupName,
        String name) {
        PagedIterable<StaticSiteFunctionOverviewArmResourceInner> inner
            = this.serviceClient().listStaticSiteFunctions(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteFunctionOverviewArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteFunctionOverviewArmResource> listStaticSiteFunctions(String resourceGroupName,
        String name, Context context) {
        PagedIterable<StaticSiteFunctionOverviewArmResourceInner> inner
            = this.serviceClient().listStaticSiteFunctions(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteFunctionOverviewArmResourceImpl(inner1, this.manager()));
    }

    public Response<StringDictionary> listStaticSiteAppSettingsWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<StringDictionaryInner> inner
            = this.serviceClient().listStaticSiteAppSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listStaticSiteAppSettings(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listStaticSiteAppSettings(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringList> listStaticSiteConfiguredRolesWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<StringListInner> inner
            = this.serviceClient().listStaticSiteConfiguredRolesWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringList listStaticSiteConfiguredRoles(String resourceGroupName, String name) {
        StringListInner inner = this.serviceClient().listStaticSiteConfiguredRoles(resourceGroupName, name);
        if (inner != null) {
            return new StringListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listStaticSiteFunctionAppSettingsWithResponse(String resourceGroupName,
        String name, Context context) {
        Response<StringDictionaryInner> inner
            = this.serviceClient().listStaticSiteFunctionAppSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listStaticSiteFunctionAppSettings(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listStaticSiteFunctionAppSettings(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listStaticSiteSecretsWithResponse(String resourceGroupName, String name,
        Context context) {
        Response<StringDictionaryInner> inner
            = this.serviceClient().listStaticSiteSecretsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listStaticSiteSecrets(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listStaticSiteSecrets(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<RemotePrivateEndpointConnectionArmResource>
        getPrivateEndpointConnectionList(String resourceGroupName, String name) {
        PagedIterable<RemotePrivateEndpointConnectionArmResourceInner> inner
            = this.serviceClient().getPrivateEndpointConnectionList(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RemotePrivateEndpointConnectionArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RemotePrivateEndpointConnectionArmResource>
        getPrivateEndpointConnectionList(String resourceGroupName, String name, Context context) {
        PagedIterable<RemotePrivateEndpointConnectionArmResourceInner> inner
            = this.serviceClient().getPrivateEndpointConnectionList(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new RemotePrivateEndpointConnectionArmResourceImpl(inner1, this.manager()));
    }

    public Response<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionWithResponse(
        String resourceGroupName, String name, String privateEndpointConnectionName, Context context) {
        Response<RemotePrivateEndpointConnectionArmResourceInner> inner = this.serviceClient()
            .getPrivateEndpointConnectionWithResponse(resourceGroupName, name, privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RemotePrivateEndpointConnectionArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource getPrivateEndpointConnection(String resourceGroupName,
        String name, String privateEndpointConnectionName) {
        RemotePrivateEndpointConnectionArmResourceInner inner
            = this.serviceClient().getPrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource approveOrRejectPrivateEndpointConnection(String resourceGroupName,
        String name, String privateEndpointConnectionName,
        RemotePrivateEndpointConnectionArmResourceInner privateEndpointWrapper) {
        RemotePrivateEndpointConnectionArmResourceInner inner = this.serviceClient()
            .approveOrRejectPrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName,
                privateEndpointWrapper);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource approveOrRejectPrivateEndpointConnection(String resourceGroupName,
        String name, String privateEndpointConnectionName,
        RemotePrivateEndpointConnectionArmResourceInner privateEndpointWrapper, Context context) {
        RemotePrivateEndpointConnectionArmResourceInner inner = this.serviceClient()
            .approveOrRejectPrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName,
                privateEndpointWrapper, context);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Object deletePrivateEndpointConnection(String resourceGroupName, String name,
        String privateEndpointConnectionName) {
        return this.serviceClient()
            .deletePrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName);
    }

    public Object deletePrivateEndpointConnection(String resourceGroupName, String name,
        String privateEndpointConnectionName, Context context) {
        return this.serviceClient()
            .deletePrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName, context);
    }

    public Response<PrivateLinkResourcesWrapper> getPrivateLinkResourcesWithResponse(String resourceGroupName,
        String name, Context context) {
        Response<PrivateLinkResourcesWrapperInner> inner
            = this.serviceClient().getPrivateLinkResourcesWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrivateLinkResourcesWrapperImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateLinkResourcesWrapper getPrivateLinkResources(String resourceGroupName, String name) {
        PrivateLinkResourcesWrapperInner inner = this.serviceClient().getPrivateLinkResources(resourceGroupName, name);
        if (inner != null) {
            return new PrivateLinkResourcesWrapperImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> resetStaticSiteApiKeyWithResponse(String resourceGroupName, String name,
        StaticSiteResetPropertiesArmResource resetPropertiesEnvelope, Context context) {
        return this.serviceClient()
            .resetStaticSiteApiKeyWithResponse(resourceGroupName, name, resetPropertiesEnvelope, context);
    }

    public void resetStaticSiteApiKey(String resourceGroupName, String name,
        StaticSiteResetPropertiesArmResource resetPropertiesEnvelope) {
        this.serviceClient().resetStaticSiteApiKey(resourceGroupName, name, resetPropertiesEnvelope);
    }

    public PagedIterable<DatabaseConnection> getDatabaseConnectionsWithDetails(String resourceGroupName, String name) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getDatabaseConnectionsWithDetails(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<DatabaseConnection> getDatabaseConnectionsWithDetails(String resourceGroupName, String name,
        Context context) {
        PagedIterable<DatabaseConnectionInner> inner
            = this.serviceClient().getDatabaseConnectionsWithDetails(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DatabaseConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteUserProvidedFunctionAppArmResource>
        getUserProvidedFunctionAppsForStaticSite(String resourceGroupName, String name) {
        PagedIterable<StaticSiteUserProvidedFunctionAppArmResourceInner> inner
            = this.serviceClient().getUserProvidedFunctionAppsForStaticSite(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteUserProvidedFunctionAppArmResource>
        getUserProvidedFunctionAppsForStaticSite(String resourceGroupName, String name, Context context) {
        PagedIterable<StaticSiteUserProvidedFunctionAppArmResourceInner> inner
            = this.serviceClient().getUserProvidedFunctionAppsForStaticSite(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteUserProvidedFunctionAppArmResource> getUserProvidedFunctionAppForStaticSiteWithResponse(
        String resourceGroupName, String name, String functionAppName, Context context) {
        Response<StaticSiteUserProvidedFunctionAppArmResourceInner> inner = this.serviceClient()
            .getUserProvidedFunctionAppForStaticSiteWithResponse(resourceGroupName, name, functionAppName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteUserProvidedFunctionAppArmResource
        getUserProvidedFunctionAppForStaticSite(String resourceGroupName, String name, String functionAppName) {
        StaticSiteUserProvidedFunctionAppArmResourceInner inner
            = this.serviceClient().getUserProvidedFunctionAppForStaticSite(resourceGroupName, name, functionAppName);
        if (inner != null) {
            return new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public StaticSiteUserProvidedFunctionAppArmResource registerUserProvidedFunctionAppWithStaticSite(
        String resourceGroupName, String name, String functionAppName,
        StaticSiteUserProvidedFunctionAppArmResourceInner staticSiteUserProvidedFunctionEnvelope) {
        StaticSiteUserProvidedFunctionAppArmResourceInner inner = this.serviceClient()
            .registerUserProvidedFunctionAppWithStaticSite(resourceGroupName, name, functionAppName,
                staticSiteUserProvidedFunctionEnvelope);
        if (inner != null) {
            return new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public StaticSiteUserProvidedFunctionAppArmResource registerUserProvidedFunctionAppWithStaticSite(
        String resourceGroupName, String name, String functionAppName,
        StaticSiteUserProvidedFunctionAppArmResourceInner staticSiteUserProvidedFunctionEnvelope, Boolean isForced,
        Context context) {
        StaticSiteUserProvidedFunctionAppArmResourceInner inner = this.serviceClient()
            .registerUserProvidedFunctionAppWithStaticSite(resourceGroupName, name, functionAppName,
                staticSiteUserProvidedFunctionEnvelope, isForced, context);
        if (inner != null) {
            return new StaticSiteUserProvidedFunctionAppArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> detachUserProvidedFunctionAppFromStaticSiteWithResponse(String resourceGroupName, String name,
        String functionAppName, Context context) {
        return this.serviceClient()
            .detachUserProvidedFunctionAppFromStaticSiteWithResponse(resourceGroupName, name, functionAppName, context);
    }

    public void detachUserProvidedFunctionAppFromStaticSite(String resourceGroupName, String name,
        String functionAppName) {
        this.serviceClient().detachUserProvidedFunctionAppFromStaticSite(resourceGroupName, name, functionAppName);
    }

    public void createZipDeploymentForStaticSite(String resourceGroupName, String name,
        StaticSiteZipDeploymentArmResource staticSiteZipDeploymentEnvelope) {
        this.serviceClient().createZipDeploymentForStaticSite(resourceGroupName, name, staticSiteZipDeploymentEnvelope);
    }

    public void createZipDeploymentForStaticSite(String resourceGroupName, String name,
        StaticSiteZipDeploymentArmResource staticSiteZipDeploymentEnvelope, Context context) {
        this.serviceClient()
            .createZipDeploymentForStaticSite(resourceGroupName, name, staticSiteZipDeploymentEnvelope, context);
    }

    public void validateBackend(String resourceGroupName, String name, String linkedBackendName,
        StaticSiteLinkedBackendArmResourceInner staticSiteLinkedBackendEnvelope) {
        this.serviceClient()
            .validateBackend(resourceGroupName, name, linkedBackendName, staticSiteLinkedBackendEnvelope);
    }

    public void validateBackend(String resourceGroupName, String name, String linkedBackendName,
        StaticSiteLinkedBackendArmResourceInner staticSiteLinkedBackendEnvelope, Context context) {
        this.serviceClient()
            .validateBackend(resourceGroupName, name, linkedBackendName, staticSiteLinkedBackendEnvelope, context);
    }

    public void validateBackendForBuild(String resourceGroupName, String name, String environmentName,
        String linkedBackendName, StaticSiteLinkedBackendArmResourceInner staticSiteLinkedBackendEnvelope) {
        this.serviceClient()
            .validateBackendForBuild(resourceGroupName, name, environmentName, linkedBackendName,
                staticSiteLinkedBackendEnvelope);
    }

    public void validateBackendForBuild(String resourceGroupName, String name, String environmentName,
        String linkedBackendName, StaticSiteLinkedBackendArmResourceInner staticSiteLinkedBackendEnvelope,
        Context context) {
        this.serviceClient()
            .validateBackendForBuild(resourceGroupName, name, environmentName, linkedBackendName,
                staticSiteLinkedBackendEnvelope, context);
    }

    public PagedIterable<StaticSiteLinkedBackendArmResource> getLinkedBackends(String resourceGroupName, String name) {
        PagedIterable<StaticSiteLinkedBackendArmResourceInner> inner
            = this.serviceClient().getLinkedBackends(resourceGroupName, name);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteLinkedBackendArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteLinkedBackendArmResource> getLinkedBackends(String resourceGroupName, String name,
        Context context) {
        PagedIterable<StaticSiteLinkedBackendArmResourceInner> inner
            = this.serviceClient().getLinkedBackends(resourceGroupName, name, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteLinkedBackendArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteLinkedBackendArmResource> getLinkedBackendsForBuild(String resourceGroupName,
        String name, String environmentName) {
        PagedIterable<StaticSiteLinkedBackendArmResourceInner> inner
            = this.serviceClient().getLinkedBackendsForBuild(resourceGroupName, name, environmentName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteLinkedBackendArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<StaticSiteLinkedBackendArmResource> getLinkedBackendsForBuild(String resourceGroupName,
        String name, String environmentName, Context context) {
        PagedIterable<StaticSiteLinkedBackendArmResourceInner> inner
            = this.serviceClient().getLinkedBackendsForBuild(resourceGroupName, name, environmentName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new StaticSiteLinkedBackendArmResourceImpl(inner1, this.manager()));
    }

    public Response<StaticSiteLinkedBackendArmResource> getLinkedBackendWithResponse(String resourceGroupName,
        String name, String linkedBackendName, Context context) {
        Response<StaticSiteLinkedBackendArmResourceInner> inner
            = this.serviceClient().getLinkedBackendWithResponse(resourceGroupName, name, linkedBackendName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteLinkedBackendArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteLinkedBackendArmResource getLinkedBackend(String resourceGroupName, String name,
        String linkedBackendName) {
        StaticSiteLinkedBackendArmResourceInner inner
            = this.serviceClient().getLinkedBackend(resourceGroupName, name, linkedBackendName);
        if (inner != null) {
            return new StaticSiteLinkedBackendArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> unlinkBackendWithResponse(String resourceGroupName, String name, String linkedBackendName,
        Boolean isCleaningAuthConfig, Context context) {
        return this.serviceClient()
            .unlinkBackendWithResponse(resourceGroupName, name, linkedBackendName, isCleaningAuthConfig, context);
    }

    public void unlinkBackend(String resourceGroupName, String name, String linkedBackendName) {
        this.serviceClient().unlinkBackend(resourceGroupName, name, linkedBackendName);
    }

    public Response<StaticSiteLinkedBackendArmResource> getLinkedBackendForBuildWithResponse(String resourceGroupName,
        String name, String environmentName, String linkedBackendName, Context context) {
        Response<StaticSiteLinkedBackendArmResourceInner> inner = this.serviceClient()
            .getLinkedBackendForBuildWithResponse(resourceGroupName, name, environmentName, linkedBackendName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StaticSiteLinkedBackendArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StaticSiteLinkedBackendArmResource getLinkedBackendForBuild(String resourceGroupName, String name,
        String environmentName, String linkedBackendName) {
        StaticSiteLinkedBackendArmResourceInner inner = this.serviceClient()
            .getLinkedBackendForBuild(resourceGroupName, name, environmentName, linkedBackendName);
        if (inner != null) {
            return new StaticSiteLinkedBackendArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public StaticSiteLinkedBackendArmResource linkBackendToBuild(String resourceGroupName, String name,
        String environmentName, String linkedBackendName,
        StaticSiteLinkedBackendArmResourceInner staticSiteLinkedBackendEnvelope) {
        StaticSiteLinkedBackendArmResourceInner inner = this.serviceClient()
            .linkBackendToBuild(resourceGroupName, name, environmentName, linkedBackendName,
                staticSiteLinkedBackendEnvelope);
        if (inner != null) {
            return new StaticSiteLinkedBackendArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public StaticSiteLinkedBackendArmResource linkBackendToBuild(String resourceGroupName, String name,
        String environmentName, String linkedBackendName,
        StaticSiteLinkedBackendArmResourceInner staticSiteLinkedBackendEnvelope, Context context) {
        StaticSiteLinkedBackendArmResourceInner inner = this.serviceClient()
            .linkBackendToBuild(resourceGroupName, name, environmentName, linkedBackendName,
                staticSiteLinkedBackendEnvelope, context);
        if (inner != null) {
            return new StaticSiteLinkedBackendArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> unlinkBackendFromBuildWithResponse(String resourceGroupName, String name,
        String environmentName, String linkedBackendName, Boolean isCleaningAuthConfig, Context context) {
        return this.serviceClient()
            .unlinkBackendFromBuildWithResponse(resourceGroupName, name, environmentName, linkedBackendName,
                isCleaningAuthConfig, context);
    }

    public void unlinkBackendFromBuild(String resourceGroupName, String name, String environmentName,
        String linkedBackendName) {
        this.serviceClient().unlinkBackendFromBuild(resourceGroupName, name, environmentName, linkedBackendName);
    }

    public StaticSiteArmResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<StaticSiteArmResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public DatabaseConnection getBuildDatabaseConnectionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "builds");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        String databaseConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "databaseConnections");
        if (databaseConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseConnections'.", id)));
        }
        return this
            .getBuildDatabaseConnectionWithResponse(resourceGroupName, name, environmentName, databaseConnectionName,
                Context.NONE)
            .getValue();
    }

    public Response<DatabaseConnection> getBuildDatabaseConnectionByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "builds");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        String databaseConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "databaseConnections");
        if (databaseConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseConnections'.", id)));
        }
        return this.getBuildDatabaseConnectionWithResponse(resourceGroupName, name, environmentName,
            databaseConnectionName, context);
    }

    public StaticSiteUserProvidedFunctionAppArmResource getUserProvidedFunctionAppForStaticSiteBuildById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "builds");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        String functionAppName = ResourceManagerUtils.getValueFromIdByName(id, "userProvidedFunctionApps");
        if (functionAppName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'userProvidedFunctionApps'.", id)));
        }
        return this
            .getUserProvidedFunctionAppForStaticSiteBuildWithResponse(resourceGroupName, name, environmentName,
                functionAppName, Context.NONE)
            .getValue();
    }

    public Response<StaticSiteUserProvidedFunctionAppArmResource>
        getUserProvidedFunctionAppForStaticSiteBuildByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "builds");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        String functionAppName = ResourceManagerUtils.getValueFromIdByName(id, "userProvidedFunctionApps");
        if (functionAppName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'userProvidedFunctionApps'.", id)));
        }
        return this.getUserProvidedFunctionAppForStaticSiteBuildWithResponse(resourceGroupName, name, environmentName,
            functionAppName, context);
    }

    public StaticSiteBasicAuthPropertiesArmResource getBasicAuthById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String basicAuthNameLocal = ResourceManagerUtils.getValueFromIdByName(id, "basicAuth");
        if (basicAuthNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'basicAuth'.", id)));
        }
        BasicAuthName basicAuthName = BasicAuthName.fromString(basicAuthNameLocal);
        return this.getBasicAuthWithResponse(resourceGroupName, name, basicAuthName, Context.NONE).getValue();
    }

    public Response<StaticSiteBasicAuthPropertiesArmResource> getBasicAuthByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String basicAuthNameLocal = ResourceManagerUtils.getValueFromIdByName(id, "basicAuth");
        if (basicAuthNameLocal == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'basicAuth'.", id)));
        }
        BasicAuthName basicAuthName = BasicAuthName.fromString(basicAuthNameLocal);
        return this.getBasicAuthWithResponse(resourceGroupName, name, basicAuthName, context);
    }

    public StaticSiteCustomDomainOverviewArmResource getStaticSiteCustomDomainById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String domainName = ResourceManagerUtils.getValueFromIdByName(id, "customDomains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customDomains'.", id)));
        }
        return this.getStaticSiteCustomDomainWithResponse(resourceGroupName, name, domainName, Context.NONE).getValue();
    }

    public Response<StaticSiteCustomDomainOverviewArmResource> getStaticSiteCustomDomainByIdWithResponse(String id,
        Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String domainName = ResourceManagerUtils.getValueFromIdByName(id, "customDomains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customDomains'.", id)));
        }
        return this.getStaticSiteCustomDomainWithResponse(resourceGroupName, name, domainName, context);
    }

    public StaticSiteLinkedBackendArmResource getLinkedBackendById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String linkedBackendName = ResourceManagerUtils.getValueFromIdByName(id, "linkedBackends");
        if (linkedBackendName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'linkedBackends'.", id)));
        }
        return this.getLinkedBackendWithResponse(resourceGroupName, name, linkedBackendName, Context.NONE).getValue();
    }

    public Response<StaticSiteLinkedBackendArmResource> getLinkedBackendByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String linkedBackendName = ResourceManagerUtils.getValueFromIdByName(id, "linkedBackends");
        if (linkedBackendName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'linkedBackends'.", id)));
        }
        return this.getLinkedBackendWithResponse(resourceGroupName, name, linkedBackendName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        this.delete(resourceGroupName, name, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        this.delete(resourceGroupName, name, context);
    }

    public void deleteBuildDatabaseConnectionById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "builds");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        String databaseConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "databaseConnections");
        if (databaseConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseConnections'.", id)));
        }
        this.deleteBuildDatabaseConnectionWithResponse(resourceGroupName, name, environmentName, databaseConnectionName,
            Context.NONE);
    }

    public Response<Void> deleteBuildDatabaseConnectionByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String environmentName = ResourceManagerUtils.getValueFromIdByName(id, "builds");
        if (environmentName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'builds'.", id)));
        }
        String databaseConnectionName = ResourceManagerUtils.getValueFromIdByName(id, "databaseConnections");
        if (databaseConnectionName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'databaseConnections'.", id)));
        }
        return this.deleteBuildDatabaseConnectionWithResponse(resourceGroupName, name, environmentName,
            databaseConnectionName, context);
    }

    public void deleteStaticSiteCustomDomainById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String domainName = ResourceManagerUtils.getValueFromIdByName(id, "customDomains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customDomains'.", id)));
        }
        this.deleteStaticSiteCustomDomain(resourceGroupName, name, domainName, Context.NONE);
    }

    public void deleteStaticSiteCustomDomainByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = ResourceManagerUtils.getValueFromIdByName(id, "staticSites");
        if (name == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'staticSites'.", id)));
        }
        String domainName = ResourceManagerUtils.getValueFromIdByName(id, "customDomains");
        if (domainName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'customDomains'.", id)));
        }
        this.deleteStaticSiteCustomDomain(resourceGroupName, name, domainName, context);
    }

    private StaticSitesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }

    public StaticSiteArmResourceImpl defineStaticSite(String name) {
        return new StaticSiteArmResourceImpl(name, this.manager());
    }

    public DatabaseConnectionImpl defineBuildDatabaseConnection(String name) {
        return new DatabaseConnectionImpl(name, this.manager());
    }

    public StaticSiteUserProvidedFunctionAppArmResourceImpl
        defineStaticSiteUserProvidedFunctionAppArmResource(String name) {
        return new StaticSiteUserProvidedFunctionAppArmResourceImpl(name, this.manager());
    }

    public StaticSiteBasicAuthPropertiesArmResourceImpl defineBasicAuth(BasicAuthName name) {
        return new StaticSiteBasicAuthPropertiesArmResourceImpl(name, this.manager());
    }

    public StaticSiteCustomDomainOverviewArmResourceImpl defineStaticSiteCustomDomain(String name) {
        return new StaticSiteCustomDomainOverviewArmResourceImpl(name, this.manager());
    }

    public StaticSiteLinkedBackendArmResourceImpl defineStaticSiteLinkedBackendArmResource(String name) {
        return new StaticSiteLinkedBackendArmResourceImpl(name, this.manager());
    }
}
