// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.ContainerAppInner;
import com.azure.resourcemanager.appservice.generated.models.Configuration;
import com.azure.resourcemanager.appservice.generated.models.ContainerApp;
import com.azure.resourcemanager.appservice.generated.models.ContainerAppProvisioningState;
import com.azure.resourcemanager.appservice.generated.models.Template;
import java.util.Collections;
import java.util.Map;

public final class ContainerAppImpl implements ContainerApp, ContainerApp.Definition, ContainerApp.Update {
    private ContainerAppInner innerObject;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public ContainerAppProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String kubeEnvironmentId() {
        return this.innerModel().kubeEnvironmentId();
    }

    public String latestRevisionName() {
        return this.innerModel().latestRevisionName();
    }

    public String latestRevisionFqdn() {
        return this.innerModel().latestRevisionFqdn();
    }

    public Configuration configuration() {
        return this.innerModel().configuration();
    }

    public Template template() {
        return this.innerModel().template();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ContainerAppInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    public ContainerAppImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ContainerApp create() {
        this.innerObject = serviceManager.serviceClient()
            .getContainerApps()
            .createOrUpdate(resourceGroupName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public ContainerApp create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getContainerApps()
            .createOrUpdate(resourceGroupName, name, this.innerModel(), context);
        return this;
    }

    ContainerAppImpl(String name, com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = new ContainerAppInner();
        this.serviceManager = serviceManager;
        this.name = name;
    }

    public ContainerAppImpl update() {
        return this;
    }

    public ContainerApp apply() {
        this.innerObject = serviceManager.serviceClient()
            .getContainerApps()
            .createOrUpdate(resourceGroupName, name, this.innerModel(), Context.NONE);
        return this;
    }

    public ContainerApp apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getContainerApps()
            .createOrUpdate(resourceGroupName, name, this.innerModel(), context);
        return this;
    }

    ContainerAppImpl(ContainerAppInner innerObject,
        com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "containerApps");
    }

    public ContainerApp refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getContainerApps()
            .getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE)
            .getValue();
        return this;
    }

    public ContainerApp refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getContainerApps()
            .getByResourceGroupWithResponse(resourceGroupName, name, context)
            .getValue();
        return this;
    }

    public ContainerAppImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ContainerAppImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ContainerAppImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public ContainerAppImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ContainerAppImpl withKubeEnvironmentId(String kubeEnvironmentId) {
        this.innerModel().withKubeEnvironmentId(kubeEnvironmentId);
        return this;
    }

    public ContainerAppImpl withConfiguration(Configuration configuration) {
        this.innerModel().withConfiguration(configuration);
        return this;
    }

    public ContainerAppImpl withTemplate(Template template) {
        this.innerModel().withTemplate(template);
        return this;
    }
}
