// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.appservice.generated.fluent.WebAppsClient;
import com.azure.resourcemanager.appservice.generated.fluent.models.ApiKVReferenceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.AzureStoragePropertyDictionaryResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupItemInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.BackupRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionStringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ContinuousWebJobInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmPublishingCredentialsPoliciesEntityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmUsageQuotaInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CustomHostnameAnalysisResultInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.DeploymentInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.FunctionEnvelopeInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.FunctionSecretsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostKeysInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HostnameBindingInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.HybridConnectionInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.IdentifierInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.KeyInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MSDeployLogInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MSDeployStatusInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.MigrateMySqlStatusInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.NetworkFeaturesInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.NetworkTraceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.OperationInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PerfMonResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PremierAddOnInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PrivateAccessInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PrivateLinkResourcesWrapperInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessModuleInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessThreadInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PublicCertificateInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.PushSettingsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RelayServiceConnectionEntityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RemotePrivateEndpointConnectionArmResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.RestoreRequestInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteAuthSettingsInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteAuthSettingsV2Inner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteCloneabilityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteConfigurationSnapshotInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteExtensionInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteLogsConfigInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SitePatchResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SitePhpErrorLogFlagInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteSourceControlInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotConfigNamesResourceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SlotDifferenceInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SnapshotInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StorageMigrationResponseInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.StringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.SwiftVirtualNetworkInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.TriggeredJobHistoryInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.TriggeredWebJobInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.UserInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetGatewayInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.VnetInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WebJobInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WebSiteInstanceStatusInner;
import com.azure.resourcemanager.appservice.generated.models.ApiKVReference;
import com.azure.resourcemanager.appservice.generated.models.AzureStoragePropertyDictionaryResource;
import com.azure.resourcemanager.appservice.generated.models.BackupItem;
import com.azure.resourcemanager.appservice.generated.models.BackupRequest;
import com.azure.resourcemanager.appservice.generated.models.ConnectionStringDictionary;
import com.azure.resourcemanager.appservice.generated.models.ContinuousWebJob;
import com.azure.resourcemanager.appservice.generated.models.CsmPublishingCredentialsPoliciesEntity;
import com.azure.resourcemanager.appservice.generated.models.CsmPublishingProfileOptions;
import com.azure.resourcemanager.appservice.generated.models.CsmSlotEntity;
import com.azure.resourcemanager.appservice.generated.models.CsmUsageQuota;
import com.azure.resourcemanager.appservice.generated.models.CustomHostnameAnalysisResult;
import com.azure.resourcemanager.appservice.generated.models.DeletedAppRestoreRequest;
import com.azure.resourcemanager.appservice.generated.models.Deployment;
import com.azure.resourcemanager.appservice.generated.models.FunctionEnvelope;
import com.azure.resourcemanager.appservice.generated.models.FunctionSecrets;
import com.azure.resourcemanager.appservice.generated.models.HostKeys;
import com.azure.resourcemanager.appservice.generated.models.HostnameBinding;
import com.azure.resourcemanager.appservice.generated.models.HybridConnection;
import com.azure.resourcemanager.appservice.generated.models.Identifier;
import com.azure.resourcemanager.appservice.generated.models.KeyInfo;
import com.azure.resourcemanager.appservice.generated.models.MSDeploy;
import com.azure.resourcemanager.appservice.generated.models.MSDeployLog;
import com.azure.resourcemanager.appservice.generated.models.MSDeployStatus;
import com.azure.resourcemanager.appservice.generated.models.MigrateMySqlRequest;
import com.azure.resourcemanager.appservice.generated.models.MigrateMySqlStatus;
import com.azure.resourcemanager.appservice.generated.models.NetworkFeatures;
import com.azure.resourcemanager.appservice.generated.models.NetworkTrace;
import com.azure.resourcemanager.appservice.generated.models.Operation;
import com.azure.resourcemanager.appservice.generated.models.PerfMonResponse;
import com.azure.resourcemanager.appservice.generated.models.PremierAddOn;
import com.azure.resourcemanager.appservice.generated.models.PremierAddOnPatchResource;
import com.azure.resourcemanager.appservice.generated.models.PrivateAccess;
import com.azure.resourcemanager.appservice.generated.models.PrivateLinkConnectionApprovalRequestResource;
import com.azure.resourcemanager.appservice.generated.models.PrivateLinkResourcesWrapper;
import com.azure.resourcemanager.appservice.generated.models.ProcessInfo;
import com.azure.resourcemanager.appservice.generated.models.ProcessModuleInfo;
import com.azure.resourcemanager.appservice.generated.models.ProcessThreadInfo;
import com.azure.resourcemanager.appservice.generated.models.PublicCertificate;
import com.azure.resourcemanager.appservice.generated.models.PushSettings;
import com.azure.resourcemanager.appservice.generated.models.RelayServiceConnectionEntity;
import com.azure.resourcemanager.appservice.generated.models.RemotePrivateEndpointConnectionArmResource;
import com.azure.resourcemanager.appservice.generated.models.RestoreRequest;
import com.azure.resourcemanager.appservice.generated.models.Site;
import com.azure.resourcemanager.appservice.generated.models.SiteAuthSettings;
import com.azure.resourcemanager.appservice.generated.models.SiteAuthSettingsV2;
import com.azure.resourcemanager.appservice.generated.models.SiteCloneability;
import com.azure.resourcemanager.appservice.generated.models.SiteConfigResource;
import com.azure.resourcemanager.appservice.generated.models.SiteConfigurationSnapshotInfo;
import com.azure.resourcemanager.appservice.generated.models.SiteExtensionInfo;
import com.azure.resourcemanager.appservice.generated.models.SiteLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.SitePhpErrorLogFlag;
import com.azure.resourcemanager.appservice.generated.models.SiteSourceControl;
import com.azure.resourcemanager.appservice.generated.models.SlotConfigNamesResource;
import com.azure.resourcemanager.appservice.generated.models.SlotDifference;
import com.azure.resourcemanager.appservice.generated.models.Snapshot;
import com.azure.resourcemanager.appservice.generated.models.SnapshotRestoreRequest;
import com.azure.resourcemanager.appservice.generated.models.StorageMigrationOptions;
import com.azure.resourcemanager.appservice.generated.models.StorageMigrationResponse;
import com.azure.resourcemanager.appservice.generated.models.StringDictionary;
import com.azure.resourcemanager.appservice.generated.models.SwiftVirtualNetwork;
import com.azure.resourcemanager.appservice.generated.models.TriggeredJobHistory;
import com.azure.resourcemanager.appservice.generated.models.TriggeredWebJob;
import com.azure.resourcemanager.appservice.generated.models.User;
import com.azure.resourcemanager.appservice.generated.models.VnetGateway;
import com.azure.resourcemanager.appservice.generated.models.VnetInfo;
import com.azure.resourcemanager.appservice.generated.models.WebApps;
import com.azure.resourcemanager.appservice.generated.models.WebJob;
import com.azure.resourcemanager.appservice.generated.models.WebSiteInstanceStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.InputStream;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class WebAppsImpl implements WebApps {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WebAppsImpl.class);

    private final WebAppsClient innerClient;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public WebAppsImpl(
        WebAppsClient innerClient, com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Site> list() {
        PagedIterable<SiteInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> list(Context context) {
        PagedIterable<SiteInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> listByResourceGroup(String resourceGroupName) {
        PagedIterable<SiteInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> listByResourceGroup(String resourceGroupName, Boolean includeSlots, Context context) {
        PagedIterable<SiteInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, includeSlots, context);
        return Utils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public Site getByResourceGroup(String resourceGroupName, String name) {
        SiteInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, name);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Site> getByResourceGroupWithResponse(String resourceGroupName, String name, Context context) {
        Response<SiteInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String name) {
        this.serviceClient().delete(resourceGroupName, name);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String name, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, Context context) {
        return this
            .serviceClient()
            .deleteWithResponse(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, context);
    }

    public CustomHostnameAnalysisResult analyzeCustomHostname(String resourceGroupName, String name) {
        CustomHostnameAnalysisResultInner inner = this.serviceClient().analyzeCustomHostname(resourceGroupName, name);
        if (inner != null) {
            return new CustomHostnameAnalysisResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomHostnameAnalysisResult> analyzeCustomHostnameWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        Response<CustomHostnameAnalysisResultInner> inner =
            this.serviceClient().analyzeCustomHostnameWithResponse(resourceGroupName, name, hostname, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomHostnameAnalysisResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void applySlotConfigToProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        this.serviceClient().applySlotConfigToProduction(resourceGroupName, name, slotSwapEntity);
    }

    public Response<Void> applySlotConfigToProductionWithResponse(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        return this
            .serviceClient()
            .applySlotConfigToProductionWithResponse(resourceGroupName, name, slotSwapEntity, context);
    }

    public BackupItem backup(String resourceGroupName, String name, BackupRequestInner request) {
        BackupItemInner inner = this.serviceClient().backup(resourceGroupName, name, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> backupWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().backupWithResponse(resourceGroupName, name, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<BackupItem> listBackups(String resourceGroupName, String name) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listBackups(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listBackups(String resourceGroupName, String name, Context context) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listBackups(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public BackupItem getBackupStatus(String resourceGroupName, String name, String backupId) {
        BackupItemInner inner = this.serviceClient().getBackupStatus(resourceGroupName, name, backupId);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> getBackupStatusWithResponse(
        String resourceGroupName, String name, String backupId, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().getBackupStatusWithResponse(resourceGroupName, name, backupId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteBackup(String resourceGroupName, String name, String backupId) {
        this.serviceClient().deleteBackup(resourceGroupName, name, backupId);
    }

    public Response<Void> deleteBackupWithResponse(
        String resourceGroupName, String name, String backupId, Context context) {
        return this.serviceClient().deleteBackupWithResponse(resourceGroupName, name, backupId, context);
    }

    public BackupItem listBackupStatusSecrets(
        String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        BackupItemInner inner =
            this.serviceClient().listBackupStatusSecrets(resourceGroupName, name, backupId, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> listBackupStatusSecretsWithResponse(
        String resourceGroupName, String name, String backupId, BackupRequestInner request, Context context) {
        Response<BackupItemInner> inner =
            this
                .serviceClient()
                .listBackupStatusSecretsWithResponse(resourceGroupName, name, backupId, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void restore(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        this.serviceClient().restore(resourceGroupName, name, backupId, request);
    }

    public void restore(
        String resourceGroupName, String name, String backupId, RestoreRequestInner request, Context context) {
        this.serviceClient().restore(resourceGroupName, name, backupId, request, context);
    }

    public PagedIterable<CsmPublishingCredentialsPoliciesEntity> listBasicPublishingCredentialsPolicies(
        String resourceGroupName, String name) {
        PagedIterable<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().listBasicPublishingCredentialsPolicies(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new CsmPublishingCredentialsPoliciesEntityImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmPublishingCredentialsPoliciesEntity> listBasicPublishingCredentialsPolicies(
        String resourceGroupName, String name, Context context) {
        PagedIterable<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().listBasicPublishingCredentialsPolicies(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new CsmPublishingCredentialsPoliciesEntityImpl(inner1, this.manager()));
    }

    public CsmPublishingCredentialsPoliciesEntity getFtpAllowed(String resourceGroupName, String name) {
        CsmPublishingCredentialsPoliciesEntityInner inner = this.serviceClient().getFtpAllowed(resourceGroupName, name);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> getFtpAllowedWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().getFtpAllowedWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CsmPublishingCredentialsPoliciesEntity updateFtpAllowed(
        String resourceGroupName,
        String name,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity) {
        CsmPublishingCredentialsPoliciesEntityInner inner =
            this.serviceClient().updateFtpAllowed(resourceGroupName, name, csmPublishingAccessPoliciesEntity);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> updateFtpAllowedWithResponse(
        String resourceGroupName,
        String name,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity,
        Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this
                .serviceClient()
                .updateFtpAllowedWithResponse(resourceGroupName, name, csmPublishingAccessPoliciesEntity, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CsmPublishingCredentialsPoliciesEntity getScmAllowed(String resourceGroupName, String name) {
        CsmPublishingCredentialsPoliciesEntityInner inner = this.serviceClient().getScmAllowed(resourceGroupName, name);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> getScmAllowedWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().getScmAllowedWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CsmPublishingCredentialsPoliciesEntity updateScmAllowed(
        String resourceGroupName,
        String name,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity) {
        CsmPublishingCredentialsPoliciesEntityInner inner =
            this.serviceClient().updateScmAllowed(resourceGroupName, name, csmPublishingAccessPoliciesEntity);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> updateScmAllowedWithResponse(
        String resourceGroupName,
        String name,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity,
        Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this
                .serviceClient()
                .updateScmAllowedWithResponse(resourceGroupName, name, csmPublishingAccessPoliciesEntity, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SiteConfigResource> listConfigurations(String resourceGroupName, String name) {
        PagedIterable<SiteConfigResourceInner> inner = this.serviceClient().listConfigurations(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new SiteConfigResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteConfigResource> listConfigurations(
        String resourceGroupName, String name, Context context) {
        PagedIterable<SiteConfigResourceInner> inner =
            this.serviceClient().listConfigurations(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new SiteConfigResourceImpl(inner1, this.manager()));
    }

    public StringDictionary updateApplicationSettings(
        String resourceGroupName, String name, StringDictionaryInner appSettings) {
        StringDictionaryInner inner =
            this.serviceClient().updateApplicationSettings(resourceGroupName, name, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateApplicationSettingsWithResponse(
        String resourceGroupName, String name, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().updateApplicationSettingsWithResponse(resourceGroupName, name, appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listApplicationSettings(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listApplicationSettings(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listApplicationSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listApplicationSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings updateAuthSettings(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        SiteAuthSettingsInner inner =
            this.serviceClient().updateAuthSettings(resourceGroupName, name, siteAuthSettings);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> updateAuthSettingsWithResponse(
        String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this.serviceClient().updateAuthSettingsWithResponse(resourceGroupName, name, siteAuthSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings getAuthSettings(String resourceGroupName, String name) {
        SiteAuthSettingsInner inner = this.serviceClient().getAuthSettings(resourceGroupName, name);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> getAuthSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this.serviceClient().getAuthSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettingsV2 updateAuthSettingsV2(
        String resourceGroupName, String name, SiteAuthSettingsV2Inner siteAuthSettingsV2) {
        SiteAuthSettingsV2Inner inner =
            this.serviceClient().updateAuthSettingsV2(resourceGroupName, name, siteAuthSettingsV2);
        if (inner != null) {
            return new SiteAuthSettingsV2Impl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettingsV2> updateAuthSettingsV2WithResponse(
        String resourceGroupName, String name, SiteAuthSettingsV2Inner siteAuthSettingsV2, Context context) {
        Response<SiteAuthSettingsV2Inner> inner =
            this.serviceClient().updateAuthSettingsV2WithResponse(resourceGroupName, name, siteAuthSettingsV2, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsV2Impl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettingsV2 getAuthSettingsV2(String resourceGroupName, String name) {
        SiteAuthSettingsV2Inner inner = this.serviceClient().getAuthSettingsV2(resourceGroupName, name);
        if (inner != null) {
            return new SiteAuthSettingsV2Impl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettingsV2> getAuthSettingsV2WithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteAuthSettingsV2Inner> inner =
            this.serviceClient().getAuthSettingsV2WithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsV2Impl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureStoragePropertyDictionaryResource updateAzureStorageAccounts(
        String resourceGroupName, String name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        AzureStoragePropertyDictionaryResourceInner inner =
            this.serviceClient().updateAzureStorageAccounts(resourceGroupName, name, azureStorageAccounts);
        if (inner != null) {
            return new AzureStoragePropertyDictionaryResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureStoragePropertyDictionaryResource> updateAzureStorageAccountsWithResponse(
        String resourceGroupName,
        String name,
        AzureStoragePropertyDictionaryResourceInner azureStorageAccounts,
        Context context) {
        Response<AzureStoragePropertyDictionaryResourceInner> inner =
            this
                .serviceClient()
                .updateAzureStorageAccountsWithResponse(resourceGroupName, name, azureStorageAccounts, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureStoragePropertyDictionaryResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureStoragePropertyDictionaryResource listAzureStorageAccounts(String resourceGroupName, String name) {
        AzureStoragePropertyDictionaryResourceInner inner =
            this.serviceClient().listAzureStorageAccounts(resourceGroupName, name);
        if (inner != null) {
            return new AzureStoragePropertyDictionaryResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureStoragePropertyDictionaryResource> listAzureStorageAccountsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<AzureStoragePropertyDictionaryResourceInner> inner =
            this.serviceClient().listAzureStorageAccountsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureStoragePropertyDictionaryResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupRequest updateBackupConfiguration(String resourceGroupName, String name, BackupRequestInner request) {
        BackupRequestInner inner = this.serviceClient().updateBackupConfiguration(resourceGroupName, name, request);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> updateBackupConfigurationWithResponse(
        String resourceGroupName, String name, BackupRequestInner request, Context context) {
        Response<BackupRequestInner> inner =
            this.serviceClient().updateBackupConfigurationWithResponse(resourceGroupName, name, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteBackupConfiguration(String resourceGroupName, String name) {
        this.serviceClient().deleteBackupConfiguration(resourceGroupName, name);
    }

    public Response<Void> deleteBackupConfigurationWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteBackupConfigurationWithResponse(resourceGroupName, name, context);
    }

    public BackupRequest getBackupConfiguration(String resourceGroupName, String name) {
        BackupRequestInner inner = this.serviceClient().getBackupConfiguration(resourceGroupName, name);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> getBackupConfigurationWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<BackupRequestInner> inner =
            this.serviceClient().getBackupConfigurationWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ApiKVReference> getAppSettingsKeyVaultReferences(String resourceGroupName, String name) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getAppSettingsKeyVaultReferences(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApiKVReference> getAppSettingsKeyVaultReferences(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getAppSettingsKeyVaultReferences(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public ApiKVReference getAppSettingKeyVaultReference(String resourceGroupName, String name, String appSettingKey) {
        ApiKVReferenceInner inner =
            this.serviceClient().getAppSettingKeyVaultReference(resourceGroupName, name, appSettingKey);
        if (inner != null) {
            return new ApiKVReferenceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKVReference> getAppSettingKeyVaultReferenceWithResponse(
        String resourceGroupName, String name, String appSettingKey, Context context) {
        Response<ApiKVReferenceInner> inner =
            this
                .serviceClient()
                .getAppSettingKeyVaultReferenceWithResponse(resourceGroupName, name, appSettingKey, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKVReferenceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ApiKVReference> getSiteConnectionStringKeyVaultReferences(
        String resourceGroupName, String name) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getSiteConnectionStringKeyVaultReferences(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApiKVReference> getSiteConnectionStringKeyVaultReferences(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getSiteConnectionStringKeyVaultReferences(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public ApiKVReference getSiteConnectionStringKeyVaultReference(
        String resourceGroupName, String name, String connectionStringKey) {
        ApiKVReferenceInner inner =
            this.serviceClient().getSiteConnectionStringKeyVaultReference(resourceGroupName, name, connectionStringKey);
        if (inner != null) {
            return new ApiKVReferenceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKVReference> getSiteConnectionStringKeyVaultReferenceWithResponse(
        String resourceGroupName, String name, String connectionStringKey, Context context) {
        Response<ApiKVReferenceInner> inner =
            this
                .serviceClient()
                .getSiteConnectionStringKeyVaultReferenceWithResponse(
                    resourceGroupName, name, connectionStringKey, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKVReferenceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary updateConnectionStrings(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        ConnectionStringDictionaryInner inner =
            this.serviceClient().updateConnectionStrings(resourceGroupName, name, connectionStrings);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> updateConnectionStringsWithResponse(
        String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings, Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this
                .serviceClient()
                .updateConnectionStringsWithResponse(resourceGroupName, name, connectionStrings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary listConnectionStrings(String resourceGroupName, String name) {
        ConnectionStringDictionaryInner inner = this.serviceClient().listConnectionStrings(resourceGroupName, name);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> listConnectionStringsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this.serviceClient().listConnectionStringsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig getDiagnosticLogsConfiguration(String resourceGroupName, String name) {
        SiteLogsConfigInner inner = this.serviceClient().getDiagnosticLogsConfiguration(resourceGroupName, name);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> getDiagnosticLogsConfigurationWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteLogsConfigInner> inner =
            this.serviceClient().getDiagnosticLogsConfigurationWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig updateDiagnosticLogsConfig(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        SiteLogsConfigInner inner =
            this.serviceClient().updateDiagnosticLogsConfig(resourceGroupName, name, siteLogsConfig);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> updateDiagnosticLogsConfigWithResponse(
        String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig, Context context) {
        Response<SiteLogsConfigInner> inner =
            this
                .serviceClient()
                .updateDiagnosticLogsConfigWithResponse(resourceGroupName, name, siteLogsConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary updateMetadata(String resourceGroupName, String name, StringDictionaryInner metadata) {
        StringDictionaryInner inner = this.serviceClient().updateMetadata(resourceGroupName, name, metadata);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateMetadataWithResponse(
        String resourceGroupName, String name, StringDictionaryInner metadata, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().updateMetadataWithResponse(resourceGroupName, name, metadata, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listMetadata(String resourceGroupName, String name) {
        StringDictionaryInner inner = this.serviceClient().listMetadata(resourceGroupName, name);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listMetadataWithResponse(String resourceGroupName, String name, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listMetadataWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User listPublishingCredentials(String resourceGroupName, String name) {
        UserInner inner = this.serviceClient().listPublishingCredentials(resourceGroupName, name);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public User listPublishingCredentials(String resourceGroupName, String name, Context context) {
        UserInner inner = this.serviceClient().listPublishingCredentials(resourceGroupName, name, context);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PushSettings updateSitePushSettings(String resourceGroupName, String name, PushSettingsInner pushSettings) {
        PushSettingsInner inner = this.serviceClient().updateSitePushSettings(resourceGroupName, name, pushSettings);
        if (inner != null) {
            return new PushSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PushSettings> updateSitePushSettingsWithResponse(
        String resourceGroupName, String name, PushSettingsInner pushSettings, Context context) {
        Response<PushSettingsInner> inner =
            this.serviceClient().updateSitePushSettingsWithResponse(resourceGroupName, name, pushSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PushSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PushSettings listSitePushSettings(String resourceGroupName, String name) {
        PushSettingsInner inner = this.serviceClient().listSitePushSettings(resourceGroupName, name);
        if (inner != null) {
            return new PushSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PushSettings> listSitePushSettingsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<PushSettingsInner> inner =
            this.serviceClient().listSitePushSettingsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PushSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SlotConfigNamesResource listSlotConfigurationNames(String resourceGroupName, String name) {
        SlotConfigNamesResourceInner inner = this.serviceClient().listSlotConfigurationNames(resourceGroupName, name);
        if (inner != null) {
            return new SlotConfigNamesResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SlotConfigNamesResource> listSlotConfigurationNamesWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SlotConfigNamesResourceInner> inner =
            this.serviceClient().listSlotConfigurationNamesWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SlotConfigNamesResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SlotConfigNamesResource updateSlotConfigurationNames(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        SlotConfigNamesResourceInner inner =
            this.serviceClient().updateSlotConfigurationNames(resourceGroupName, name, slotConfigNames);
        if (inner != null) {
            return new SlotConfigNamesResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SlotConfigNamesResource> updateSlotConfigurationNamesWithResponse(
        String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames, Context context) {
        Response<SlotConfigNamesResourceInner> inner =
            this
                .serviceClient()
                .updateSlotConfigurationNamesWithResponse(resourceGroupName, name, slotConfigNames, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SlotConfigNamesResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfigResource getConfiguration(String resourceGroupName, String name) {
        SiteConfigResourceInner inner = this.serviceClient().getConfiguration(resourceGroupName, name);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> getConfigurationWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteConfigResourceInner> inner =
            this.serviceClient().getConfigurationWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfigResource createOrUpdateConfiguration(
        String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        SiteConfigResourceInner inner =
            this.serviceClient().createOrUpdateConfiguration(resourceGroupName, name, siteConfig);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> createOrUpdateConfigurationWithResponse(
        String resourceGroupName, String name, SiteConfigResourceInner siteConfig, Context context) {
        Response<SiteConfigResourceInner> inner =
            this.serviceClient().createOrUpdateConfigurationWithResponse(resourceGroupName, name, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfigResource updateConfiguration(
        String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        SiteConfigResourceInner inner = this.serviceClient().updateConfiguration(resourceGroupName, name, siteConfig);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> updateConfigurationWithResponse(
        String resourceGroupName, String name, SiteConfigResourceInner siteConfig, Context context) {
        Response<SiteConfigResourceInner> inner =
            this.serviceClient().updateConfigurationWithResponse(resourceGroupName, name, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfo(
        String resourceGroupName, String name) {
        PagedIterable<SiteConfigurationSnapshotInfoInner> inner =
            this.serviceClient().listConfigurationSnapshotInfo(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new SiteConfigurationSnapshotInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfo(
        String resourceGroupName, String name, Context context) {
        PagedIterable<SiteConfigurationSnapshotInfoInner> inner =
            this.serviceClient().listConfigurationSnapshotInfo(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new SiteConfigurationSnapshotInfoImpl(inner1, this.manager()));
    }

    public SiteConfigResource getConfigurationSnapshot(String resourceGroupName, String name, String snapshotId) {
        SiteConfigResourceInner inner =
            this.serviceClient().getConfigurationSnapshot(resourceGroupName, name, snapshotId);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> getConfigurationSnapshotWithResponse(
        String resourceGroupName, String name, String snapshotId, Context context) {
        Response<SiteConfigResourceInner> inner =
            this.serviceClient().getConfigurationSnapshotWithResponse(resourceGroupName, name, snapshotId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void recoverSiteConfigurationSnapshot(String resourceGroupName, String name, String snapshotId) {
        this.serviceClient().recoverSiteConfigurationSnapshot(resourceGroupName, name, snapshotId);
    }

    public Response<Void> recoverSiteConfigurationSnapshotWithResponse(
        String resourceGroupName, String name, String snapshotId, Context context) {
        return this
            .serviceClient()
            .recoverSiteConfigurationSnapshotWithResponse(resourceGroupName, name, snapshotId, context);
    }

    public InputStream getWebSiteContainerLogs(String resourceGroupName, String name) {
        return this.serviceClient().getWebSiteContainerLogs(resourceGroupName, name);
    }

    public StreamResponse getWebSiteContainerLogsWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().getWebSiteContainerLogsWithResponse(resourceGroupName, name, context);
    }

    public InputStream getContainerLogsZip(String resourceGroupName, String name) {
        return this.serviceClient().getContainerLogsZip(resourceGroupName, name);
    }

    public StreamResponse getContainerLogsZipWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().getContainerLogsZipWithResponse(resourceGroupName, name, context);
    }

    public PagedIterable<ContinuousWebJob> listContinuousWebJobs(String resourceGroupName, String name) {
        PagedIterable<ContinuousWebJobInner> inner =
            this.serviceClient().listContinuousWebJobs(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new ContinuousWebJobImpl(inner1, this.manager()));
    }

    public PagedIterable<ContinuousWebJob> listContinuousWebJobs(
        String resourceGroupName, String name, Context context) {
        PagedIterable<ContinuousWebJobInner> inner =
            this.serviceClient().listContinuousWebJobs(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new ContinuousWebJobImpl(inner1, this.manager()));
    }

    public ContinuousWebJob getContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        ContinuousWebJobInner inner = this.serviceClient().getContinuousWebJob(resourceGroupName, name, webJobName);
        if (inner != null) {
            return new ContinuousWebJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContinuousWebJob> getContinuousWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        Response<ContinuousWebJobInner> inner =
            this.serviceClient().getContinuousWebJobWithResponse(resourceGroupName, name, webJobName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContinuousWebJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        this.serviceClient().deleteContinuousWebJob(resourceGroupName, name, webJobName);
    }

    public Response<Void> deleteContinuousWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        return this.serviceClient().deleteContinuousWebJobWithResponse(resourceGroupName, name, webJobName, context);
    }

    public void startContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        this.serviceClient().startContinuousWebJob(resourceGroupName, name, webJobName);
    }

    public Response<Void> startContinuousWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        return this.serviceClient().startContinuousWebJobWithResponse(resourceGroupName, name, webJobName, context);
    }

    public void stopContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        this.serviceClient().stopContinuousWebJob(resourceGroupName, name, webJobName);
    }

    public Response<Void> stopContinuousWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        return this.serviceClient().stopContinuousWebJobWithResponse(resourceGroupName, name, webJobName, context);
    }

    public PagedIterable<Deployment> listDeployments(String resourceGroupName, String name) {
        PagedIterable<DeploymentInner> inner = this.serviceClient().listDeployments(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> listDeployments(String resourceGroupName, String name, Context context) {
        PagedIterable<DeploymentInner> inner = this.serviceClient().listDeployments(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public Deployment getDeployment(String resourceGroupName, String name, String id) {
        DeploymentInner inner = this.serviceClient().getDeployment(resourceGroupName, name, id);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> getDeploymentWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().getDeploymentWithResponse(resourceGroupName, name, id, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteDeployment(String resourceGroupName, String name, String id) {
        this.serviceClient().deleteDeployment(resourceGroupName, name, id);
    }

    public Response<Void> deleteDeploymentWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        return this.serviceClient().deleteDeploymentWithResponse(resourceGroupName, name, id, context);
    }

    public Deployment listDeploymentLog(String resourceGroupName, String name, String id) {
        DeploymentInner inner = this.serviceClient().listDeploymentLog(resourceGroupName, name, id);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> listDeploymentLogWithResponse(
        String resourceGroupName, String name, String id, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().listDeploymentLogWithResponse(resourceGroupName, name, id, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RestoreRequest discoverBackup(String resourceGroupName, String name, RestoreRequestInner request) {
        RestoreRequestInner inner = this.serviceClient().discoverBackup(resourceGroupName, name, request);
        if (inner != null) {
            return new RestoreRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RestoreRequest> discoverBackupWithResponse(
        String resourceGroupName, String name, RestoreRequestInner request, Context context) {
        Response<RestoreRequestInner> inner =
            this.serviceClient().discoverBackupWithResponse(resourceGroupName, name, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RestoreRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Identifier> listDomainOwnershipIdentifiers(String resourceGroupName, String name) {
        PagedIterable<IdentifierInner> inner =
            this.serviceClient().listDomainOwnershipIdentifiers(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new IdentifierImpl(inner1, this.manager()));
    }

    public PagedIterable<Identifier> listDomainOwnershipIdentifiers(
        String resourceGroupName, String name, Context context) {
        PagedIterable<IdentifierInner> inner =
            this.serviceClient().listDomainOwnershipIdentifiers(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new IdentifierImpl(inner1, this.manager()));
    }

    public Identifier getDomainOwnershipIdentifier(
        String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        IdentifierInner inner =
            this.serviceClient().getDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName);
        if (inner != null) {
            return new IdentifierImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Identifier> getDomainOwnershipIdentifierWithResponse(
        String resourceGroupName, String name, String domainOwnershipIdentifierName, Context context) {
        Response<IdentifierInner> inner =
            this
                .serviceClient()
                .getDomainOwnershipIdentifierWithResponse(
                    resourceGroupName, name, domainOwnershipIdentifierName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IdentifierImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteDomainOwnershipIdentifier(
        String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        this.serviceClient().deleteDomainOwnershipIdentifier(resourceGroupName, name, domainOwnershipIdentifierName);
    }

    public Response<Void> deleteDomainOwnershipIdentifierWithResponse(
        String resourceGroupName, String name, String domainOwnershipIdentifierName, Context context) {
        return this
            .serviceClient()
            .deleteDomainOwnershipIdentifierWithResponse(
                resourceGroupName, name, domainOwnershipIdentifierName, context);
    }

    public MSDeployStatus getMSDeployStatus(String resourceGroupName, String name) {
        MSDeployStatusInner inner = this.serviceClient().getMSDeployStatus(resourceGroupName, name);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployStatus> getMSDeployStatusWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<MSDeployStatusInner> inner =
            this.serviceClient().getMSDeployStatusWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus createMSDeployOperation(String resourceGroupName, String name, MSDeploy mSDeploy) {
        MSDeployStatusInner inner = this.serviceClient().createMSDeployOperation(resourceGroupName, name, mSDeploy);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployStatus createMSDeployOperation(
        String resourceGroupName, String name, MSDeploy mSDeploy, Context context) {
        MSDeployStatusInner inner =
            this.serviceClient().createMSDeployOperation(resourceGroupName, name, mSDeploy, context);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployLog getMSDeployLog(String resourceGroupName, String name) {
        MSDeployLogInner inner = this.serviceClient().getMSDeployLog(resourceGroupName, name);
        if (inner != null) {
            return new MSDeployLogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployLog> getMSDeployLogWithResponse(String resourceGroupName, String name, Context context) {
        Response<MSDeployLogInner> inner =
            this.serviceClient().getMSDeployLogWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployLogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<FunctionEnvelope> listFunctions(String resourceGroupName, String name) {
        PagedIterable<FunctionEnvelopeInner> inner = this.serviceClient().listFunctions(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new FunctionEnvelopeImpl(inner1, this.manager()));
    }

    public PagedIterable<FunctionEnvelope> listFunctions(String resourceGroupName, String name, Context context) {
        PagedIterable<FunctionEnvelopeInner> inner =
            this.serviceClient().listFunctions(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new FunctionEnvelopeImpl(inner1, this.manager()));
    }

    public String getFunctionsAdminToken(String resourceGroupName, String name) {
        return this.serviceClient().getFunctionsAdminToken(resourceGroupName, name);
    }

    public Response<String> getFunctionsAdminTokenWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().getFunctionsAdminTokenWithResponse(resourceGroupName, name, context);
    }

    public FunctionEnvelope getFunction(String resourceGroupName, String name, String functionName) {
        FunctionEnvelopeInner inner = this.serviceClient().getFunction(resourceGroupName, name, functionName);
        if (inner != null) {
            return new FunctionEnvelopeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FunctionEnvelope> getFunctionWithResponse(
        String resourceGroupName, String name, String functionName, Context context) {
        Response<FunctionEnvelopeInner> inner =
            this.serviceClient().getFunctionWithResponse(resourceGroupName, name, functionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FunctionEnvelopeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteFunction(String resourceGroupName, String name, String functionName) {
        this.serviceClient().deleteFunction(resourceGroupName, name, functionName);
    }

    public Response<Void> deleteFunctionWithResponse(
        String resourceGroupName, String name, String functionName, Context context) {
        return this.serviceClient().deleteFunctionWithResponse(resourceGroupName, name, functionName, context);
    }

    public KeyInfo createOrUpdateFunctionSecret(
        String resourceGroupName, String name, String functionName, String keyName, KeyInfoInner key) {
        KeyInfoInner inner =
            this.serviceClient().createOrUpdateFunctionSecret(resourceGroupName, name, functionName, keyName, key);
        if (inner != null) {
            return new KeyInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<KeyInfo> createOrUpdateFunctionSecretWithResponse(
        String resourceGroupName, String name, String functionName, String keyName, KeyInfoInner key, Context context) {
        Response<KeyInfoInner> inner =
            this
                .serviceClient()
                .createOrUpdateFunctionSecretWithResponse(resourceGroupName, name, functionName, keyName, key, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new KeyInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteFunctionSecret(String resourceGroupName, String name, String functionName, String keyName) {
        this.serviceClient().deleteFunctionSecret(resourceGroupName, name, functionName, keyName);
    }

    public Response<Void> deleteFunctionSecretWithResponse(
        String resourceGroupName, String name, String functionName, String keyName, Context context) {
        return this
            .serviceClient()
            .deleteFunctionSecretWithResponse(resourceGroupName, name, functionName, keyName, context);
    }

    public StringDictionary listFunctionKeys(String resourceGroupName, String name, String functionName) {
        StringDictionaryInner inner = this.serviceClient().listFunctionKeys(resourceGroupName, name, functionName);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listFunctionKeysWithResponse(
        String resourceGroupName, String name, String functionName, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listFunctionKeysWithResponse(resourceGroupName, name, functionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FunctionSecrets listFunctionSecrets(String resourceGroupName, String name, String functionName) {
        FunctionSecretsInner inner = this.serviceClient().listFunctionSecrets(resourceGroupName, name, functionName);
        if (inner != null) {
            return new FunctionSecretsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FunctionSecrets> listFunctionSecretsWithResponse(
        String resourceGroupName, String name, String functionName, Context context) {
        Response<FunctionSecretsInner> inner =
            this.serviceClient().listFunctionSecretsWithResponse(resourceGroupName, name, functionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FunctionSecretsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HostKeys listHostKeys(String resourceGroupName, String name) {
        HostKeysInner inner = this.serviceClient().listHostKeys(resourceGroupName, name);
        if (inner != null) {
            return new HostKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostKeys> listHostKeysWithResponse(String resourceGroupName, String name, Context context) {
        Response<HostKeysInner> inner = this.serviceClient().listHostKeysWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void listSyncStatus(String resourceGroupName, String name) {
        this.serviceClient().listSyncStatus(resourceGroupName, name);
    }

    public Response<Void> listSyncStatusWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().listSyncStatusWithResponse(resourceGroupName, name, context);
    }

    public void syncFunctions(String resourceGroupName, String name) {
        this.serviceClient().syncFunctions(resourceGroupName, name);
    }

    public Response<Void> syncFunctionsWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().syncFunctionsWithResponse(resourceGroupName, name, context);
    }

    public KeyInfo createOrUpdateHostSecret(
        String resourceGroupName, String name, String keyType, String keyName, KeyInfoInner key) {
        KeyInfoInner inner =
            this.serviceClient().createOrUpdateHostSecret(resourceGroupName, name, keyType, keyName, key);
        if (inner != null) {
            return new KeyInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<KeyInfo> createOrUpdateHostSecretWithResponse(
        String resourceGroupName, String name, String keyType, String keyName, KeyInfoInner key, Context context) {
        Response<KeyInfoInner> inner =
            this
                .serviceClient()
                .createOrUpdateHostSecretWithResponse(resourceGroupName, name, keyType, keyName, key, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new KeyInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteHostSecret(String resourceGroupName, String name, String keyType, String keyName) {
        this.serviceClient().deleteHostSecret(resourceGroupName, name, keyType, keyName);
    }

    public Response<Void> deleteHostSecretWithResponse(
        String resourceGroupName, String name, String keyType, String keyName, Context context) {
        return this.serviceClient().deleteHostSecretWithResponse(resourceGroupName, name, keyType, keyName, context);
    }

    public PagedIterable<HostnameBinding> listHostnameBindings(String resourceGroupName, String name) {
        PagedIterable<HostnameBindingInner> inner = this.serviceClient().listHostnameBindings(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public PagedIterable<HostnameBinding> listHostnameBindings(String resourceGroupName, String name, Context context) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().listHostnameBindings(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public HostnameBinding getHostnameBinding(String resourceGroupName, String name, String hostname) {
        HostnameBindingInner inner = this.serviceClient().getHostnameBinding(resourceGroupName, name, hostname);
        if (inner != null) {
            return new HostnameBindingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostnameBinding> getHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        Response<HostnameBindingInner> inner =
            this.serviceClient().getHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostnameBindingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteHostnameBinding(String resourceGroupName, String name, String hostname) {
        this.serviceClient().deleteHostnameBinding(resourceGroupName, name, hostname);
    }

    public Response<Void> deleteHostnameBindingWithResponse(
        String resourceGroupName, String name, String hostname, Context context) {
        return this.serviceClient().deleteHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
    }

    public HybridConnection getHybridConnection(
        String resourceGroupName, String name, String namespaceName, String relayName) {
        HybridConnectionInner inner =
            this.serviceClient().getHybridConnection(resourceGroupName, name, namespaceName, relayName);
        if (inner != null) {
            return new HybridConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridConnection> getHybridConnectionWithResponse(
        String resourceGroupName, String name, String namespaceName, String relayName, Context context) {
        Response<HybridConnectionInner> inner =
            this
                .serviceClient()
                .getHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName) {
        this.serviceClient().deleteHybridConnection(resourceGroupName, name, namespaceName, relayName);
    }

    public Response<Void> deleteHybridConnectionWithResponse(
        String resourceGroupName, String name, String namespaceName, String relayName, Context context) {
        return this
            .serviceClient()
            .deleteHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, context);
    }

    public HybridConnection listHybridConnections(String resourceGroupName, String name) {
        HybridConnectionInner inner = this.serviceClient().listHybridConnections(resourceGroupName, name);
        if (inner != null) {
            return new HybridConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridConnection> listHybridConnectionsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<HybridConnectionInner> inner =
            this.serviceClient().listHybridConnectionsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity listRelayServiceConnections(String resourceGroupName, String name) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().listRelayServiceConnections(resourceGroupName, name);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> listRelayServiceConnectionsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this.serviceClient().listRelayServiceConnectionsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity getRelayServiceConnection(
        String resourceGroupName, String name, String entityName) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().getRelayServiceConnection(resourceGroupName, name, entityName);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> getRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this.serviceClient().getRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteRelayServiceConnection(String resourceGroupName, String name, String entityName) {
        this.serviceClient().deleteRelayServiceConnection(resourceGroupName, name, entityName);
    }

    public Response<Void> deleteRelayServiceConnectionWithResponse(
        String resourceGroupName, String name, String entityName, Context context) {
        return this
            .serviceClient()
            .deleteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
    }

    public PagedIterable<WebSiteInstanceStatus> listInstanceIdentifiers(String resourceGroupName, String name) {
        PagedIterable<WebSiteInstanceStatusInner> inner =
            this.serviceClient().listInstanceIdentifiers(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new WebSiteInstanceStatusImpl(inner1, this.manager()));
    }

    public PagedIterable<WebSiteInstanceStatus> listInstanceIdentifiers(
        String resourceGroupName, String name, Context context) {
        PagedIterable<WebSiteInstanceStatusInner> inner =
            this.serviceClient().listInstanceIdentifiers(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new WebSiteInstanceStatusImpl(inner1, this.manager()));
    }

    public WebSiteInstanceStatus getInstanceInfo(String resourceGroupName, String name, String instanceId) {
        WebSiteInstanceStatusInner inner = this.serviceClient().getInstanceInfo(resourceGroupName, name, instanceId);
        if (inner != null) {
            return new WebSiteInstanceStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WebSiteInstanceStatus> getInstanceInfoWithResponse(
        String resourceGroupName, String name, String instanceId, Context context) {
        Response<WebSiteInstanceStatusInner> inner =
            this.serviceClient().getInstanceInfoWithResponse(resourceGroupName, name, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WebSiteInstanceStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus getInstanceMsDeployStatus(String resourceGroupName, String name, String instanceId) {
        MSDeployStatusInner inner = this.serviceClient().getInstanceMsDeployStatus(resourceGroupName, name, instanceId);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployStatus> getInstanceMsDeployStatusWithResponse(
        String resourceGroupName, String name, String instanceId, Context context) {
        Response<MSDeployStatusInner> inner =
            this.serviceClient().getInstanceMsDeployStatusWithResponse(resourceGroupName, name, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus createInstanceMSDeployOperation(
        String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        MSDeployStatusInner inner =
            this.serviceClient().createInstanceMSDeployOperation(resourceGroupName, name, instanceId, mSDeploy);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployStatus createInstanceMSDeployOperation(
        String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy, Context context) {
        MSDeployStatusInner inner =
            this
                .serviceClient()
                .createInstanceMSDeployOperation(resourceGroupName, name, instanceId, mSDeploy, context);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployLog getInstanceMSDeployLog(String resourceGroupName, String name, String instanceId) {
        MSDeployLogInner inner = this.serviceClient().getInstanceMSDeployLog(resourceGroupName, name, instanceId);
        if (inner != null) {
            return new MSDeployLogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployLog> getInstanceMSDeployLogWithResponse(
        String resourceGroupName, String name, String instanceId, Context context) {
        Response<MSDeployLogInner> inner =
            this.serviceClient().getInstanceMSDeployLogWithResponse(resourceGroupName, name, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployLogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessInfo> listInstanceProcesses(String resourceGroupName, String name, String instanceId) {
        PagedIterable<ProcessInfoInner> inner =
            this.serviceClient().listInstanceProcesses(resourceGroupName, name, instanceId);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessInfo> listInstanceProcesses(
        String resourceGroupName, String name, String instanceId, Context context) {
        PagedIterable<ProcessInfoInner> inner =
            this.serviceClient().listInstanceProcesses(resourceGroupName, name, instanceId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public ProcessInfo getInstanceProcess(String resourceGroupName, String name, String processId, String instanceId) {
        ProcessInfoInner inner =
            this.serviceClient().getInstanceProcess(resourceGroupName, name, processId, instanceId);
        if (inner != null) {
            return new ProcessInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessInfo> getInstanceProcessWithResponse(
        String resourceGroupName, String name, String processId, String instanceId, Context context) {
        Response<ProcessInfoInner> inner =
            this
                .serviceClient()
                .getInstanceProcessWithResponse(resourceGroupName, name, processId, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteInstanceProcess(String resourceGroupName, String name, String processId, String instanceId) {
        this.serviceClient().deleteInstanceProcess(resourceGroupName, name, processId, instanceId);
    }

    public Response<Void> deleteInstanceProcessWithResponse(
        String resourceGroupName, String name, String processId, String instanceId, Context context) {
        return this
            .serviceClient()
            .deleteInstanceProcessWithResponse(resourceGroupName, name, processId, instanceId, context);
    }

    public InputStream getInstanceProcessDump(
        String resourceGroupName, String name, String processId, String instanceId) {
        return this.serviceClient().getInstanceProcessDump(resourceGroupName, name, processId, instanceId);
    }

    public StreamResponse getInstanceProcessDumpWithResponse(
        String resourceGroupName, String name, String processId, String instanceId, Context context) {
        return this
            .serviceClient()
            .getInstanceProcessDumpWithResponse(resourceGroupName, name, processId, instanceId, context);
    }

    public PagedIterable<ProcessModuleInfo> listInstanceProcessModules(
        String resourceGroupName, String name, String processId, String instanceId) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listInstanceProcessModules(resourceGroupName, name, processId, instanceId);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessModuleInfo> listInstanceProcessModules(
        String resourceGroupName, String name, String processId, String instanceId, Context context) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listInstanceProcessModules(resourceGroupName, name, processId, instanceId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public ProcessModuleInfo getInstanceProcessModule(
        String resourceGroupName, String name, String processId, String baseAddress, String instanceId) {
        ProcessModuleInfoInner inner =
            this.serviceClient().getInstanceProcessModule(resourceGroupName, name, processId, baseAddress, instanceId);
        if (inner != null) {
            return new ProcessModuleInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessModuleInfo> getInstanceProcessModuleWithResponse(
        String resourceGroupName,
        String name,
        String processId,
        String baseAddress,
        String instanceId,
        Context context) {
        Response<ProcessModuleInfoInner> inner =
            this
                .serviceClient()
                .getInstanceProcessModuleWithResponse(
                    resourceGroupName, name, processId, baseAddress, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessModuleInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessThreadInfo> listInstanceProcessThreads(
        String resourceGroupName, String name, String processId, String instanceId) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listInstanceProcessThreads(resourceGroupName, name, processId, instanceId);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessThreadInfo> listInstanceProcessThreads(
        String resourceGroupName, String name, String processId, String instanceId, Context context) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listInstanceProcessThreads(resourceGroupName, name, processId, instanceId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public SiteCloneability isCloneable(String resourceGroupName, String name) {
        SiteCloneabilityInner inner = this.serviceClient().isCloneable(resourceGroupName, name);
        if (inner != null) {
            return new SiteCloneabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteCloneability> isCloneableWithResponse(String resourceGroupName, String name, Context context) {
        Response<SiteCloneabilityInner> inner =
            this.serviceClient().isCloneableWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteCloneabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<BackupItem> listSiteBackups(String resourceGroupName, String name) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listSiteBackups(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listSiteBackups(String resourceGroupName, String name, Context context) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listSiteBackups(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public FunctionSecrets listSyncFunctionTriggers(String resourceGroupName, String name) {
        FunctionSecretsInner inner = this.serviceClient().listSyncFunctionTriggers(resourceGroupName, name);
        if (inner != null) {
            return new FunctionSecretsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FunctionSecrets> listSyncFunctionTriggersWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<FunctionSecretsInner> inner =
            this.serviceClient().listSyncFunctionTriggersWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FunctionSecretsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StorageMigrationResponse migrateStorage(
        String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        StorageMigrationResponseInner inner =
            this.serviceClient().migrateStorage(subscriptionName, resourceGroupName, name, migrationOptions);
        if (inner != null) {
            return new StorageMigrationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public StorageMigrationResponse migrateStorage(
        String subscriptionName,
        String resourceGroupName,
        String name,
        StorageMigrationOptions migrationOptions,
        Context context) {
        StorageMigrationResponseInner inner =
            this.serviceClient().migrateStorage(subscriptionName, resourceGroupName, name, migrationOptions, context);
        if (inner != null) {
            return new StorageMigrationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Operation migrateMySql(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        OperationInner inner = this.serviceClient().migrateMySql(resourceGroupName, name, migrationRequestEnvelope);
        if (inner != null) {
            return new OperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Operation migrateMySql(
        String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope, Context context) {
        OperationInner inner =
            this.serviceClient().migrateMySql(resourceGroupName, name, migrationRequestEnvelope, context);
        if (inner != null) {
            return new OperationImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MigrateMySqlStatus getMigrateMySqlStatus(String resourceGroupName, String name) {
        MigrateMySqlStatusInner inner = this.serviceClient().getMigrateMySqlStatus(resourceGroupName, name);
        if (inner != null) {
            return new MigrateMySqlStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MigrateMySqlStatus> getMigrateMySqlStatusWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<MigrateMySqlStatusInner> inner =
            this.serviceClient().getMigrateMySqlStatusWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MigrateMySqlStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SwiftVirtualNetwork getSwiftVirtualNetworkConnection(String resourceGroupName, String name) {
        SwiftVirtualNetworkInner inner = this.serviceClient().getSwiftVirtualNetworkConnection(resourceGroupName, name);
        if (inner != null) {
            return new SwiftVirtualNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SwiftVirtualNetwork> getSwiftVirtualNetworkConnectionWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SwiftVirtualNetworkInner> inner =
            this.serviceClient().getSwiftVirtualNetworkConnectionWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SwiftVirtualNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SwiftVirtualNetwork createOrUpdateSwiftVirtualNetworkConnectionWithCheck(
        String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        SwiftVirtualNetworkInner inner =
            this
                .serviceClient()
                .createOrUpdateSwiftVirtualNetworkConnectionWithCheck(resourceGroupName, name, connectionEnvelope);
        if (inner != null) {
            return new SwiftVirtualNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SwiftVirtualNetwork> createOrUpdateSwiftVirtualNetworkConnectionWithCheckWithResponse(
        String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope, Context context) {
        Response<SwiftVirtualNetworkInner> inner =
            this
                .serviceClient()
                .createOrUpdateSwiftVirtualNetworkConnectionWithCheckWithResponse(
                    resourceGroupName, name, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SwiftVirtualNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSwiftVirtualNetwork(String resourceGroupName, String name) {
        this.serviceClient().deleteSwiftVirtualNetwork(resourceGroupName, name);
    }

    public Response<Void> deleteSwiftVirtualNetworkWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().deleteSwiftVirtualNetworkWithResponse(resourceGroupName, name, context);
    }

    public SwiftVirtualNetwork updateSwiftVirtualNetworkConnectionWithCheck(
        String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        SwiftVirtualNetworkInner inner =
            this
                .serviceClient()
                .updateSwiftVirtualNetworkConnectionWithCheck(resourceGroupName, name, connectionEnvelope);
        if (inner != null) {
            return new SwiftVirtualNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SwiftVirtualNetwork> updateSwiftVirtualNetworkConnectionWithCheckWithResponse(
        String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope, Context context) {
        Response<SwiftVirtualNetworkInner> inner =
            this
                .serviceClient()
                .updateSwiftVirtualNetworkConnectionWithCheckWithResponse(
                    resourceGroupName, name, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SwiftVirtualNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkFeatures listNetworkFeatures(String resourceGroupName, String name, String view) {
        NetworkFeaturesInner inner = this.serviceClient().listNetworkFeatures(resourceGroupName, name, view);
        if (inner != null) {
            return new NetworkFeaturesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkFeatures> listNetworkFeaturesWithResponse(
        String resourceGroupName, String name, String view, Context context) {
        Response<NetworkFeaturesInner> inner =
            this.serviceClient().listNetworkFeaturesWithResponse(resourceGroupName, name, view, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkFeaturesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getNetworkTraceOperation(String resourceGroupName, String name, String operationId) {
        return this.serviceClient().getNetworkTraceOperation(resourceGroupName, name, operationId);
    }

    public Response<Object> getNetworkTraceOperationWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return this.serviceClient().getNetworkTraceOperationWithResponse(resourceGroupName, name, operationId, context);
    }

    public String startWebSiteNetworkTrace(String resourceGroupName, String name) {
        return this.serviceClient().startWebSiteNetworkTrace(resourceGroupName, name);
    }

    public Response<String> startWebSiteNetworkTraceWithResponse(
        String resourceGroupName,
        String name,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl,
        Context context) {
        return this
            .serviceClient()
            .startWebSiteNetworkTraceWithResponse(
                resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, context);
    }

    public Object startWebSiteNetworkTraceOperation(
        String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return this
            .serviceClient()
            .startWebSiteNetworkTraceOperation(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl);
    }

    public Object startWebSiteNetworkTraceOperation(String resourceGroupName, String name) {
        return this.serviceClient().startWebSiteNetworkTraceOperation(resourceGroupName, name);
    }

    public Object startWebSiteNetworkTraceOperation(
        String resourceGroupName,
        String name,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl,
        Context context) {
        return this
            .serviceClient()
            .startWebSiteNetworkTraceOperation(
                resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, context);
    }

    public void stopWebSiteNetworkTrace(String resourceGroupName, String name) {
        this.serviceClient().stopWebSiteNetworkTrace(resourceGroupName, name);
    }

    public Response<Void> stopWebSiteNetworkTraceWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().stopWebSiteNetworkTraceWithResponse(resourceGroupName, name, context);
    }

    public List<NetworkTrace> getNetworkTraces(String resourceGroupName, String name, String operationId) {
        List<NetworkTraceInner> inner = this.serviceClient().getNetworkTraces(resourceGroupName, name, operationId);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<NetworkTrace>> getNetworkTracesWithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        Response<List<NetworkTraceInner>> inner =
            this.serviceClient().getNetworkTracesWithResponse(resourceGroupName, name, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public Object getNetworkTraceOperationV2(String resourceGroupName, String name, String operationId) {
        return this.serviceClient().getNetworkTraceOperationV2(resourceGroupName, name, operationId);
    }

    public Response<Object> getNetworkTraceOperationV2WithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        return this
            .serviceClient()
            .getNetworkTraceOperationV2WithResponse(resourceGroupName, name, operationId, context);
    }

    public List<NetworkTrace> getNetworkTracesV2(String resourceGroupName, String name, String operationId) {
        List<NetworkTraceInner> inner = this.serviceClient().getNetworkTracesV2(resourceGroupName, name, operationId);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<NetworkTrace>> getNetworkTracesV2WithResponse(
        String resourceGroupName, String name, String operationId, Context context) {
        Response<List<NetworkTraceInner>> inner =
            this.serviceClient().getNetworkTracesV2WithResponse(resourceGroupName, name, operationId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public void generateNewSitePublishingPassword(String resourceGroupName, String name) {
        this.serviceClient().generateNewSitePublishingPassword(resourceGroupName, name);
    }

    public Response<Void> generateNewSitePublishingPasswordWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().generateNewSitePublishingPasswordWithResponse(resourceGroupName, name, context);
    }

    public PagedIterable<PerfMonResponse> listPerfMonCounters(String resourceGroupName, String name) {
        PagedIterable<PerfMonResponseInner> inner = this.serviceClient().listPerfMonCounters(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new PerfMonResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<PerfMonResponse> listPerfMonCounters(
        String resourceGroupName, String name, String filter, Context context) {
        PagedIterable<PerfMonResponseInner> inner =
            this.serviceClient().listPerfMonCounters(resourceGroupName, name, filter, context);
        return Utils.mapPage(inner, inner1 -> new PerfMonResponseImpl(inner1, this.manager()));
    }

    public SitePhpErrorLogFlag getSitePhpErrorLogFlag(String resourceGroupName, String name) {
        SitePhpErrorLogFlagInner inner = this.serviceClient().getSitePhpErrorLogFlag(resourceGroupName, name);
        if (inner != null) {
            return new SitePhpErrorLogFlagImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SitePhpErrorLogFlag> getSitePhpErrorLogFlagWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SitePhpErrorLogFlagInner> inner =
            this.serviceClient().getSitePhpErrorLogFlagWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SitePhpErrorLogFlagImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PremierAddOn listPremierAddOns(String resourceGroupName, String name) {
        PremierAddOnInner inner = this.serviceClient().listPremierAddOns(resourceGroupName, name);
        if (inner != null) {
            return new PremierAddOnImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PremierAddOn> listPremierAddOnsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<PremierAddOnInner> inner =
            this.serviceClient().listPremierAddOnsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PremierAddOnImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PremierAddOn getPremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        PremierAddOnInner inner = this.serviceClient().getPremierAddOn(resourceGroupName, name, premierAddOnName);
        if (inner != null) {
            return new PremierAddOnImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PremierAddOn> getPremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        Response<PremierAddOnInner> inner =
            this.serviceClient().getPremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PremierAddOnImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deletePremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        this.serviceClient().deletePremierAddOn(resourceGroupName, name, premierAddOnName);
    }

    public Response<Void> deletePremierAddOnWithResponse(
        String resourceGroupName, String name, String premierAddOnName, Context context) {
        return this.serviceClient().deletePremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, context);
    }

    public PrivateAccess getPrivateAccess(String resourceGroupName, String name) {
        PrivateAccessInner inner = this.serviceClient().getPrivateAccess(resourceGroupName, name);
        if (inner != null) {
            return new PrivateAccessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateAccess> getPrivateAccessWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<PrivateAccessInner> inner =
            this.serviceClient().getPrivateAccessWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateAccessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateAccess putPrivateAccessVnet(String resourceGroupName, String name, PrivateAccessInner access) {
        PrivateAccessInner inner = this.serviceClient().putPrivateAccessVnet(resourceGroupName, name, access);
        if (inner != null) {
            return new PrivateAccessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateAccess> putPrivateAccessVnetWithResponse(
        String resourceGroupName, String name, PrivateAccessInner access, Context context) {
        Response<PrivateAccessInner> inner =
            this.serviceClient().putPrivateAccessVnetWithResponse(resourceGroupName, name, access, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateAccessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionList(
        String resourceGroupName, String name) {
        PagedIterable<RemotePrivateEndpointConnectionArmResourceInner> inner =
            this.serviceClient().getPrivateEndpointConnectionList(resourceGroupName, name);
        return Utils
            .mapPage(inner, inner1 -> new RemotePrivateEndpointConnectionArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionList(
        String resourceGroupName, String name, Context context) {
        PagedIterable<RemotePrivateEndpointConnectionArmResourceInner> inner =
            this.serviceClient().getPrivateEndpointConnectionList(resourceGroupName, name, context);
        return Utils
            .mapPage(inner, inner1 -> new RemotePrivateEndpointConnectionArmResourceImpl(inner1, this.manager()));
    }

    public RemotePrivateEndpointConnectionArmResource getPrivateEndpointConnection(
        String resourceGroupName, String name, String privateEndpointConnectionName) {
        RemotePrivateEndpointConnectionArmResourceInner inner =
            this.serviceClient().getPrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionWithResponse(
        String resourceGroupName, String name, String privateEndpointConnectionName, Context context) {
        Response<RemotePrivateEndpointConnectionArmResourceInner> inner =
            this
                .serviceClient()
                .getPrivateEndpointConnectionWithResponse(
                    resourceGroupName, name, privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RemotePrivateEndpointConnectionArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource approveOrRejectPrivateEndpointConnection(
        String resourceGroupName,
        String name,
        String privateEndpointConnectionName,
        PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper) {
        RemotePrivateEndpointConnectionArmResourceInner inner =
            this
                .serviceClient()
                .approveOrRejectPrivateEndpointConnection(
                    resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource approveOrRejectPrivateEndpointConnection(
        String resourceGroupName,
        String name,
        String privateEndpointConnectionName,
        PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper,
        Context context) {
        RemotePrivateEndpointConnectionArmResourceInner inner =
            this
                .serviceClient()
                .approveOrRejectPrivateEndpointConnection(
                    resourceGroupName, name, privateEndpointConnectionName, privateEndpointWrapper, context);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Object deletePrivateEndpointConnection(
        String resourceGroupName, String name, String privateEndpointConnectionName) {
        return this
            .serviceClient()
            .deletePrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName);
    }

    public Object deletePrivateEndpointConnection(
        String resourceGroupName, String name, String privateEndpointConnectionName, Context context) {
        return this
            .serviceClient()
            .deletePrivateEndpointConnection(resourceGroupName, name, privateEndpointConnectionName, context);
    }

    public PrivateLinkResourcesWrapper getPrivateLinkResources(String resourceGroupName, String name) {
        PrivateLinkResourcesWrapperInner inner = this.serviceClient().getPrivateLinkResources(resourceGroupName, name);
        if (inner != null) {
            return new PrivateLinkResourcesWrapperImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateLinkResourcesWrapper> getPrivateLinkResourcesWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<PrivateLinkResourcesWrapperInner> inner =
            this.serviceClient().getPrivateLinkResourcesWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateLinkResourcesWrapperImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessInfo> listProcesses(String resourceGroupName, String name) {
        PagedIterable<ProcessInfoInner> inner = this.serviceClient().listProcesses(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessInfo> listProcesses(String resourceGroupName, String name, Context context) {
        PagedIterable<ProcessInfoInner> inner = this.serviceClient().listProcesses(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public ProcessInfo getProcess(String resourceGroupName, String name, String processId) {
        ProcessInfoInner inner = this.serviceClient().getProcess(resourceGroupName, name, processId);
        if (inner != null) {
            return new ProcessInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessInfo> getProcessWithResponse(
        String resourceGroupName, String name, String processId, Context context) {
        Response<ProcessInfoInner> inner =
            this.serviceClient().getProcessWithResponse(resourceGroupName, name, processId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteProcess(String resourceGroupName, String name, String processId) {
        this.serviceClient().deleteProcess(resourceGroupName, name, processId);
    }

    public Response<Void> deleteProcessWithResponse(
        String resourceGroupName, String name, String processId, Context context) {
        return this.serviceClient().deleteProcessWithResponse(resourceGroupName, name, processId, context);
    }

    public InputStream getProcessDump(String resourceGroupName, String name, String processId) {
        return this.serviceClient().getProcessDump(resourceGroupName, name, processId);
    }

    public StreamResponse getProcessDumpWithResponse(
        String resourceGroupName, String name, String processId, Context context) {
        return this.serviceClient().getProcessDumpWithResponse(resourceGroupName, name, processId, context);
    }

    public PagedIterable<ProcessModuleInfo> listProcessModules(
        String resourceGroupName, String name, String processId) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listProcessModules(resourceGroupName, name, processId);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessModuleInfo> listProcessModules(
        String resourceGroupName, String name, String processId, Context context) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listProcessModules(resourceGroupName, name, processId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public ProcessModuleInfo getProcessModule(
        String resourceGroupName, String name, String processId, String baseAddress) {
        ProcessModuleInfoInner inner =
            this.serviceClient().getProcessModule(resourceGroupName, name, processId, baseAddress);
        if (inner != null) {
            return new ProcessModuleInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessModuleInfo> getProcessModuleWithResponse(
        String resourceGroupName, String name, String processId, String baseAddress, Context context) {
        Response<ProcessModuleInfoInner> inner =
            this.serviceClient().getProcessModuleWithResponse(resourceGroupName, name, processId, baseAddress, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessModuleInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessThreadInfo> listProcessThreads(
        String resourceGroupName, String name, String processId) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listProcessThreads(resourceGroupName, name, processId);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessThreadInfo> listProcessThreads(
        String resourceGroupName, String name, String processId, Context context) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listProcessThreads(resourceGroupName, name, processId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCertificate> listPublicCertificates(String resourceGroupName, String name) {
        PagedIterable<PublicCertificateInner> inner =
            this.serviceClient().listPublicCertificates(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new PublicCertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCertificate> listPublicCertificates(
        String resourceGroupName, String name, Context context) {
        PagedIterable<PublicCertificateInner> inner =
            this.serviceClient().listPublicCertificates(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new PublicCertificateImpl(inner1, this.manager()));
    }

    public PublicCertificate getPublicCertificate(String resourceGroupName, String name, String publicCertificateName) {
        PublicCertificateInner inner =
            this.serviceClient().getPublicCertificate(resourceGroupName, name, publicCertificateName);
        if (inner != null) {
            return new PublicCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PublicCertificate> getPublicCertificateWithResponse(
        String resourceGroupName, String name, String publicCertificateName, Context context) {
        Response<PublicCertificateInner> inner =
            this
                .serviceClient()
                .getPublicCertificateWithResponse(resourceGroupName, name, publicCertificateName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PublicCertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deletePublicCertificate(String resourceGroupName, String name, String publicCertificateName) {
        this.serviceClient().deletePublicCertificate(resourceGroupName, name, publicCertificateName);
    }

    public Response<Void> deletePublicCertificateWithResponse(
        String resourceGroupName, String name, String publicCertificateName, Context context) {
        return this
            .serviceClient()
            .deletePublicCertificateWithResponse(resourceGroupName, name, publicCertificateName, context);
    }

    public InputStream listPublishingProfileXmlWithSecrets(
        String resourceGroupName, String name, CsmPublishingProfileOptions publishingProfileOptions) {
        return this
            .serviceClient()
            .listPublishingProfileXmlWithSecrets(resourceGroupName, name, publishingProfileOptions);
    }

    public StreamResponse listPublishingProfileXmlWithSecretsWithResponse(
        String resourceGroupName, String name, CsmPublishingProfileOptions publishingProfileOptions, Context context) {
        return this
            .serviceClient()
            .listPublishingProfileXmlWithSecretsWithResponse(
                resourceGroupName, name, publishingProfileOptions, context);
    }

    public void resetProductionSlotConfig(String resourceGroupName, String name) {
        this.serviceClient().resetProductionSlotConfig(resourceGroupName, name);
    }

    public Response<Void> resetProductionSlotConfigWithResponse(
        String resourceGroupName, String name, Context context) {
        return this.serviceClient().resetProductionSlotConfigWithResponse(resourceGroupName, name, context);
    }

    public void restart(String resourceGroupName, String name) {
        this.serviceClient().restart(resourceGroupName, name);
    }

    public Response<Void> restartWithResponse(
        String resourceGroupName, String name, Boolean softRestart, Boolean synchronous, Context context) {
        return this.serviceClient().restartWithResponse(resourceGroupName, name, softRestart, synchronous, context);
    }

    public void restoreFromBackupBlob(String resourceGroupName, String name, RestoreRequestInner request) {
        this.serviceClient().restoreFromBackupBlob(resourceGroupName, name, request);
    }

    public void restoreFromBackupBlob(
        String resourceGroupName, String name, RestoreRequestInner request, Context context) {
        this.serviceClient().restoreFromBackupBlob(resourceGroupName, name, request, context);
    }

    public void restoreFromDeletedApp(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        this.serviceClient().restoreFromDeletedApp(resourceGroupName, name, restoreRequest);
    }

    public void restoreFromDeletedApp(
        String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest, Context context) {
        this.serviceClient().restoreFromDeletedApp(resourceGroupName, name, restoreRequest, context);
    }

    public void restoreSnapshot(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        this.serviceClient().restoreSnapshot(resourceGroupName, name, restoreRequest);
    }

    public void restoreSnapshot(
        String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest, Context context) {
        this.serviceClient().restoreSnapshot(resourceGroupName, name, restoreRequest, context);
    }

    public PagedIterable<SiteExtensionInfo> listSiteExtensions(String resourceGroupName, String name) {
        PagedIterable<SiteExtensionInfoInner> inner = this.serviceClient().listSiteExtensions(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new SiteExtensionInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteExtensionInfo> listSiteExtensions(String resourceGroupName, String name, Context context) {
        PagedIterable<SiteExtensionInfoInner> inner =
            this.serviceClient().listSiteExtensions(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new SiteExtensionInfoImpl(inner1, this.manager()));
    }

    public SiteExtensionInfo getSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        SiteExtensionInfoInner inner = this.serviceClient().getSiteExtension(resourceGroupName, name, siteExtensionId);
        if (inner != null) {
            return new SiteExtensionInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteExtensionInfo> getSiteExtensionWithResponse(
        String resourceGroupName, String name, String siteExtensionId, Context context) {
        Response<SiteExtensionInfoInner> inner =
            this.serviceClient().getSiteExtensionWithResponse(resourceGroupName, name, siteExtensionId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteExtensionInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteExtensionInfo installSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        SiteExtensionInfoInner inner =
            this.serviceClient().installSiteExtension(resourceGroupName, name, siteExtensionId);
        if (inner != null) {
            return new SiteExtensionInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SiteExtensionInfo installSiteExtension(
        String resourceGroupName, String name, String siteExtensionId, Context context) {
        SiteExtensionInfoInner inner =
            this.serviceClient().installSiteExtension(resourceGroupName, name, siteExtensionId, context);
        if (inner != null) {
            return new SiteExtensionInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        this.serviceClient().deleteSiteExtension(resourceGroupName, name, siteExtensionId);
    }

    public Response<Void> deleteSiteExtensionWithResponse(
        String resourceGroupName, String name, String siteExtensionId, Context context) {
        return this.serviceClient().deleteSiteExtensionWithResponse(resourceGroupName, name, siteExtensionId, context);
    }

    public PagedIterable<Site> listSlots(String resourceGroupName, String name) {
        PagedIterable<SiteInner> inner = this.serviceClient().listSlots(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> listSlots(String resourceGroupName, String name, Context context) {
        PagedIterable<SiteInner> inner = this.serviceClient().listSlots(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public Site getSlot(String resourceGroupName, String name, String slot) {
        SiteInner inner = this.serviceClient().getSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Site> getSlotWithResponse(String resourceGroupName, String name, String slot, Context context) {
        Response<SiteInner> inner = this.serviceClient().getSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site createOrUpdateSlot(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        SiteInner inner = this.serviceClient().createOrUpdateSlot(resourceGroupName, name, slot, siteEnvelope);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site createOrUpdateSlot(
        String resourceGroupName, String name, String slot, SiteInner siteEnvelope, Context context) {
        SiteInner inner = this.serviceClient().createOrUpdateSlot(resourceGroupName, name, slot, siteEnvelope, context);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().deleteSlot(resourceGroupName, name, slot);
    }

    public Response<Void> deleteSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        Boolean deleteMetrics,
        Boolean deleteEmptyServerFarm,
        Context context) {
        return this
            .serviceClient()
            .deleteSlotWithResponse(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, context);
    }

    public Site updateSlot(String resourceGroupName, String name, String slot, SitePatchResourceInner siteEnvelope) {
        SiteInner inner = this.serviceClient().updateSlot(resourceGroupName, name, slot, siteEnvelope);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Site> updateSlotWithResponse(
        String resourceGroupName, String name, String slot, SitePatchResourceInner siteEnvelope, Context context) {
        Response<SiteInner> inner =
            this.serviceClient().updateSlotWithResponse(resourceGroupName, name, slot, siteEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CustomHostnameAnalysisResult analyzeCustomHostnameSlot(String resourceGroupName, String name, String slot) {
        CustomHostnameAnalysisResultInner inner =
            this.serviceClient().analyzeCustomHostnameSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new CustomHostnameAnalysisResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CustomHostnameAnalysisResult> analyzeCustomHostnameSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        Response<CustomHostnameAnalysisResultInner> inner =
            this
                .serviceClient()
                .analyzeCustomHostnameSlotWithResponse(resourceGroupName, name, slot, hostname, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CustomHostnameAnalysisResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void applySlotConfigurationSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        this.serviceClient().applySlotConfigurationSlot(resourceGroupName, name, slot, slotSwapEntity);
    }

    public Response<Void> applySlotConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        return this
            .serviceClient()
            .applySlotConfigurationSlotWithResponse(resourceGroupName, name, slot, slotSwapEntity, context);
    }

    public BackupItem backupSlot(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        BackupItemInner inner = this.serviceClient().backupSlot(resourceGroupName, name, slot, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> backupSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().backupSlotWithResponse(resourceGroupName, name, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<BackupItem> listBackupsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listBackupsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listBackupsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<BackupItemInner> inner =
            this.serviceClient().listBackupsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public BackupItem getBackupStatusSlot(String resourceGroupName, String name, String backupId, String slot) {
        BackupItemInner inner = this.serviceClient().getBackupStatusSlot(resourceGroupName, name, backupId, slot);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> getBackupStatusSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        Response<BackupItemInner> inner =
            this.serviceClient().getBackupStatusSlotWithResponse(resourceGroupName, name, backupId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteBackupSlot(String resourceGroupName, String name, String backupId, String slot) {
        this.serviceClient().deleteBackupSlot(resourceGroupName, name, backupId, slot);
    }

    public Response<Void> deleteBackupSlotWithResponse(
        String resourceGroupName, String name, String backupId, String slot, Context context) {
        return this.serviceClient().deleteBackupSlotWithResponse(resourceGroupName, name, backupId, slot, context);
    }

    public BackupItem listBackupStatusSecretsSlot(
        String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        BackupItemInner inner =
            this.serviceClient().listBackupStatusSecretsSlot(resourceGroupName, name, backupId, slot, request);
        if (inner != null) {
            return new BackupItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupItem> listBackupStatusSecretsSlotWithResponse(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        BackupRequestInner request,
        Context context) {
        Response<BackupItemInner> inner =
            this
                .serviceClient()
                .listBackupStatusSecretsSlotWithResponse(resourceGroupName, name, backupId, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void restoreSlot(
        String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        this.serviceClient().restoreSlot(resourceGroupName, name, backupId, slot, request);
    }

    public void restoreSlot(
        String resourceGroupName,
        String name,
        String backupId,
        String slot,
        RestoreRequestInner request,
        Context context) {
        this.serviceClient().restoreSlot(resourceGroupName, name, backupId, slot, request, context);
    }

    public PagedIterable<CsmPublishingCredentialsPoliciesEntity> listBasicPublishingCredentialsPoliciesSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().listBasicPublishingCredentialsPoliciesSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new CsmPublishingCredentialsPoliciesEntityImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmPublishingCredentialsPoliciesEntity> listBasicPublishingCredentialsPoliciesSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().listBasicPublishingCredentialsPoliciesSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new CsmPublishingCredentialsPoliciesEntityImpl(inner1, this.manager()));
    }

    public CsmPublishingCredentialsPoliciesEntity getFtpAllowedSlot(
        String resourceGroupName, String name, String slot) {
        CsmPublishingCredentialsPoliciesEntityInner inner =
            this.serviceClient().getFtpAllowedSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> getFtpAllowedSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().getFtpAllowedSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CsmPublishingCredentialsPoliciesEntity updateFtpAllowedSlot(
        String resourceGroupName,
        String name,
        String slot,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity) {
        CsmPublishingCredentialsPoliciesEntityInner inner =
            this.serviceClient().updateFtpAllowedSlot(resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> updateFtpAllowedSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity,
        Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this
                .serviceClient()
                .updateFtpAllowedSlotWithResponse(
                    resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CsmPublishingCredentialsPoliciesEntity getScmAllowedSlot(
        String resourceGroupName, String name, String slot) {
        CsmPublishingCredentialsPoliciesEntityInner inner =
            this.serviceClient().getScmAllowedSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> getScmAllowedSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this.serviceClient().getScmAllowedSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CsmPublishingCredentialsPoliciesEntity updateScmAllowedSlot(
        String resourceGroupName,
        String name,
        String slot,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity) {
        CsmPublishingCredentialsPoliciesEntityInner inner =
            this.serviceClient().updateScmAllowedSlot(resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity);
        if (inner != null) {
            return new CsmPublishingCredentialsPoliciesEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CsmPublishingCredentialsPoliciesEntity> updateScmAllowedSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity,
        Context context) {
        Response<CsmPublishingCredentialsPoliciesEntityInner> inner =
            this
                .serviceClient()
                .updateScmAllowedSlotWithResponse(
                    resourceGroupName, name, slot, csmPublishingAccessPoliciesEntity, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CsmPublishingCredentialsPoliciesEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SiteConfigResource> listConfigurationsSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<SiteConfigResourceInner> inner =
            this.serviceClient().listConfigurationsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new SiteConfigResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteConfigResource> listConfigurationsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<SiteConfigResourceInner> inner =
            this.serviceClient().listConfigurationsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new SiteConfigResourceImpl(inner1, this.manager()));
    }

    public StringDictionary updateApplicationSettingsSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        StringDictionaryInner inner =
            this.serviceClient().updateApplicationSettingsSlot(resourceGroupName, name, slot, appSettings);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateApplicationSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner appSettings, Context context) {
        Response<StringDictionaryInner> inner =
            this
                .serviceClient()
                .updateApplicationSettingsSlotWithResponse(resourceGroupName, name, slot, appSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listApplicationSettingsSlot(String resourceGroupName, String name, String slot) {
        StringDictionaryInner inner = this.serviceClient().listApplicationSettingsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listApplicationSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listApplicationSettingsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings updateAuthSettingsSlot(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        SiteAuthSettingsInner inner =
            this.serviceClient().updateAuthSettingsSlot(resourceGroupName, name, slot, siteAuthSettings);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> updateAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this
                .serviceClient()
                .updateAuthSettingsSlotWithResponse(resourceGroupName, name, slot, siteAuthSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettings getAuthSettingsSlot(String resourceGroupName, String name, String slot) {
        SiteAuthSettingsInner inner = this.serviceClient().getAuthSettingsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteAuthSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettings> getAuthSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteAuthSettingsInner> inner =
            this.serviceClient().getAuthSettingsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettingsV2 updateAuthSettingsV2Slot(
        String resourceGroupName, String name, String slot, SiteAuthSettingsV2Inner siteAuthSettingsV2) {
        SiteAuthSettingsV2Inner inner =
            this.serviceClient().updateAuthSettingsV2Slot(resourceGroupName, name, slot, siteAuthSettingsV2);
        if (inner != null) {
            return new SiteAuthSettingsV2Impl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettingsV2> updateAuthSettingsV2SlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        SiteAuthSettingsV2Inner siteAuthSettingsV2,
        Context context) {
        Response<SiteAuthSettingsV2Inner> inner =
            this
                .serviceClient()
                .updateAuthSettingsV2SlotWithResponse(resourceGroupName, name, slot, siteAuthSettingsV2, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsV2Impl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteAuthSettingsV2 getAuthSettingsV2Slot(String resourceGroupName, String name, String slot) {
        SiteAuthSettingsV2Inner inner = this.serviceClient().getAuthSettingsV2Slot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteAuthSettingsV2Impl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteAuthSettingsV2> getAuthSettingsV2SlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteAuthSettingsV2Inner> inner =
            this.serviceClient().getAuthSettingsV2SlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteAuthSettingsV2Impl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureStoragePropertyDictionaryResource updateAzureStorageAccountsSlot(
        String resourceGroupName,
        String name,
        String slot,
        AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        AzureStoragePropertyDictionaryResourceInner inner =
            this.serviceClient().updateAzureStorageAccountsSlot(resourceGroupName, name, slot, azureStorageAccounts);
        if (inner != null) {
            return new AzureStoragePropertyDictionaryResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureStoragePropertyDictionaryResource> updateAzureStorageAccountsSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        AzureStoragePropertyDictionaryResourceInner azureStorageAccounts,
        Context context) {
        Response<AzureStoragePropertyDictionaryResourceInner> inner =
            this
                .serviceClient()
                .updateAzureStorageAccountsSlotWithResponse(
                    resourceGroupName, name, slot, azureStorageAccounts, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureStoragePropertyDictionaryResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AzureStoragePropertyDictionaryResource listAzureStorageAccountsSlot(
        String resourceGroupName, String name, String slot) {
        AzureStoragePropertyDictionaryResourceInner inner =
            this.serviceClient().listAzureStorageAccountsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new AzureStoragePropertyDictionaryResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AzureStoragePropertyDictionaryResource> listAzureStorageAccountsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<AzureStoragePropertyDictionaryResourceInner> inner =
            this.serviceClient().listAzureStorageAccountsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AzureStoragePropertyDictionaryResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BackupRequest updateBackupConfigurationSlot(
        String resourceGroupName, String name, String slot, BackupRequestInner request) {
        BackupRequestInner inner =
            this.serviceClient().updateBackupConfigurationSlot(resourceGroupName, name, slot, request);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> updateBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, BackupRequestInner request, Context context) {
        Response<BackupRequestInner> inner =
            this
                .serviceClient()
                .updateBackupConfigurationSlotWithResponse(resourceGroupName, name, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteBackupConfigurationSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().deleteBackupConfigurationSlot(resourceGroupName, name, slot);
    }

    public Response<Void> deleteBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().deleteBackupConfigurationSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public BackupRequest getBackupConfigurationSlot(String resourceGroupName, String name, String slot) {
        BackupRequestInner inner = this.serviceClient().getBackupConfigurationSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new BackupRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackupRequest> getBackupConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<BackupRequestInner> inner =
            this.serviceClient().getBackupConfigurationSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackupRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ApiKVReference> getAppSettingsKeyVaultReferencesSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getAppSettingsKeyVaultReferencesSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApiKVReference> getAppSettingsKeyVaultReferencesSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getAppSettingsKeyVaultReferencesSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public ApiKVReference getAppSettingKeyVaultReferenceSlot(
        String resourceGroupName, String name, String appSettingKey, String slot) {
        ApiKVReferenceInner inner =
            this.serviceClient().getAppSettingKeyVaultReferenceSlot(resourceGroupName, name, appSettingKey, slot);
        if (inner != null) {
            return new ApiKVReferenceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKVReference> getAppSettingKeyVaultReferenceSlotWithResponse(
        String resourceGroupName, String name, String appSettingKey, String slot, Context context) {
        Response<ApiKVReferenceInner> inner =
            this
                .serviceClient()
                .getAppSettingKeyVaultReferenceSlotWithResponse(resourceGroupName, name, appSettingKey, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKVReferenceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ApiKVReference> getSiteConnectionStringKeyVaultReferencesSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getSiteConnectionStringKeyVaultReferencesSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<ApiKVReference> getSiteConnectionStringKeyVaultReferencesSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<ApiKVReferenceInner> inner =
            this.serviceClient().getSiteConnectionStringKeyVaultReferencesSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new ApiKVReferenceImpl(inner1, this.manager()));
    }

    public ApiKVReference getSiteConnectionStringKeyVaultReferenceSlot(
        String resourceGroupName, String name, String connectionStringKey, String slot) {
        ApiKVReferenceInner inner =
            this
                .serviceClient()
                .getSiteConnectionStringKeyVaultReferenceSlot(resourceGroupName, name, connectionStringKey, slot);
        if (inner != null) {
            return new ApiKVReferenceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApiKVReference> getSiteConnectionStringKeyVaultReferenceSlotWithResponse(
        String resourceGroupName, String name, String connectionStringKey, String slot, Context context) {
        Response<ApiKVReferenceInner> inner =
            this
                .serviceClient()
                .getSiteConnectionStringKeyVaultReferenceSlotWithResponse(
                    resourceGroupName, name, connectionStringKey, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApiKVReferenceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary updateConnectionStringsSlot(
        String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        ConnectionStringDictionaryInner inner =
            this.serviceClient().updateConnectionStringsSlot(resourceGroupName, name, slot, connectionStrings);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> updateConnectionStringsSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        ConnectionStringDictionaryInner connectionStrings,
        Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this
                .serviceClient()
                .updateConnectionStringsSlotWithResponse(resourceGroupName, name, slot, connectionStrings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionStringDictionary listConnectionStringsSlot(String resourceGroupName, String name, String slot) {
        ConnectionStringDictionaryInner inner =
            this.serviceClient().listConnectionStringsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new ConnectionStringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionStringDictionary> listConnectionStringsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<ConnectionStringDictionaryInner> inner =
            this.serviceClient().listConnectionStringsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionStringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig getDiagnosticLogsConfigurationSlot(String resourceGroupName, String name, String slot) {
        SiteLogsConfigInner inner =
            this.serviceClient().getDiagnosticLogsConfigurationSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> getDiagnosticLogsConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteLogsConfigInner> inner =
            this.serviceClient().getDiagnosticLogsConfigurationSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteLogsConfig updateDiagnosticLogsConfigSlot(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        SiteLogsConfigInner inner =
            this.serviceClient().updateDiagnosticLogsConfigSlot(resourceGroupName, name, slot, siteLogsConfig);
        if (inner != null) {
            return new SiteLogsConfigImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteLogsConfig> updateDiagnosticLogsConfigSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig, Context context) {
        Response<SiteLogsConfigInner> inner =
            this
                .serviceClient()
                .updateDiagnosticLogsConfigSlotWithResponse(resourceGroupName, name, slot, siteLogsConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteLogsConfigImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary updateMetadataSlot(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        StringDictionaryInner inner = this.serviceClient().updateMetadataSlot(resourceGroupName, name, slot, metadata);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> updateMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, StringDictionaryInner metadata, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().updateMetadataSlotWithResponse(resourceGroupName, name, slot, metadata, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StringDictionary listMetadataSlot(String resourceGroupName, String name, String slot) {
        StringDictionaryInner inner = this.serviceClient().listMetadataSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listMetadataSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listMetadataSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public User listPublishingCredentialsSlot(String resourceGroupName, String name, String slot) {
        UserInner inner = this.serviceClient().listPublishingCredentialsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public User listPublishingCredentialsSlot(String resourceGroupName, String name, String slot, Context context) {
        UserInner inner = this.serviceClient().listPublishingCredentialsSlot(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new UserImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PushSettings updateSitePushSettingsSlot(
        String resourceGroupName, String name, String slot, PushSettingsInner pushSettings) {
        PushSettingsInner inner =
            this.serviceClient().updateSitePushSettingsSlot(resourceGroupName, name, slot, pushSettings);
        if (inner != null) {
            return new PushSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PushSettings> updateSitePushSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, PushSettingsInner pushSettings, Context context) {
        Response<PushSettingsInner> inner =
            this
                .serviceClient()
                .updateSitePushSettingsSlotWithResponse(resourceGroupName, name, slot, pushSettings, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PushSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PushSettings listSitePushSettingsSlot(String resourceGroupName, String name, String slot) {
        PushSettingsInner inner = this.serviceClient().listSitePushSettingsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new PushSettingsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PushSettings> listSitePushSettingsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<PushSettingsInner> inner =
            this.serviceClient().listSitePushSettingsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PushSettingsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfigResource getConfigurationSlot(String resourceGroupName, String name, String slot) {
        SiteConfigResourceInner inner = this.serviceClient().getConfigurationSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> getConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteConfigResourceInner> inner =
            this.serviceClient().getConfigurationSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfigResource createOrUpdateConfigurationSlot(
        String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        SiteConfigResourceInner inner =
            this.serviceClient().createOrUpdateConfigurationSlot(resourceGroupName, name, slot, siteConfig);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> createOrUpdateConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig, Context context) {
        Response<SiteConfigResourceInner> inner =
            this
                .serviceClient()
                .createOrUpdateConfigurationSlotWithResponse(resourceGroupName, name, slot, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteConfigResource updateConfigurationSlot(
        String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        SiteConfigResourceInner inner =
            this.serviceClient().updateConfigurationSlot(resourceGroupName, name, slot, siteConfig);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> updateConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig, Context context) {
        Response<SiteConfigResourceInner> inner =
            this
                .serviceClient()
                .updateConfigurationSlotWithResponse(resourceGroupName, name, slot, siteConfig, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfoSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<SiteConfigurationSnapshotInfoInner> inner =
            this.serviceClient().listConfigurationSnapshotInfoSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new SiteConfigurationSnapshotInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfoSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<SiteConfigurationSnapshotInfoInner> inner =
            this.serviceClient().listConfigurationSnapshotInfoSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new SiteConfigurationSnapshotInfoImpl(inner1, this.manager()));
    }

    public SiteConfigResource getConfigurationSnapshotSlot(
        String resourceGroupName, String name, String snapshotId, String slot) {
        SiteConfigResourceInner inner =
            this.serviceClient().getConfigurationSnapshotSlot(resourceGroupName, name, snapshotId, slot);
        if (inner != null) {
            return new SiteConfigResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteConfigResource> getConfigurationSnapshotSlotWithResponse(
        String resourceGroupName, String name, String snapshotId, String slot, Context context) {
        Response<SiteConfigResourceInner> inner =
            this
                .serviceClient()
                .getConfigurationSnapshotSlotWithResponse(resourceGroupName, name, snapshotId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteConfigResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void recoverSiteConfigurationSnapshotSlot(
        String resourceGroupName, String name, String snapshotId, String slot) {
        this.serviceClient().recoverSiteConfigurationSnapshotSlot(resourceGroupName, name, snapshotId, slot);
    }

    public Response<Void> recoverSiteConfigurationSnapshotSlotWithResponse(
        String resourceGroupName, String name, String snapshotId, String slot, Context context) {
        return this
            .serviceClient()
            .recoverSiteConfigurationSnapshotSlotWithResponse(resourceGroupName, name, snapshotId, slot, context);
    }

    public InputStream getWebSiteContainerLogsSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().getWebSiteContainerLogsSlot(resourceGroupName, name, slot);
    }

    public StreamResponse getWebSiteContainerLogsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().getWebSiteContainerLogsSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public InputStream getContainerLogsZipSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().getContainerLogsZipSlot(resourceGroupName, name, slot);
    }

    public StreamResponse getContainerLogsZipSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().getContainerLogsZipSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public PagedIterable<ContinuousWebJob> listContinuousWebJobsSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<ContinuousWebJobInner> inner =
            this.serviceClient().listContinuousWebJobsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new ContinuousWebJobImpl(inner1, this.manager()));
    }

    public PagedIterable<ContinuousWebJob> listContinuousWebJobsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<ContinuousWebJobInner> inner =
            this.serviceClient().listContinuousWebJobsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new ContinuousWebJobImpl(inner1, this.manager()));
    }

    public ContinuousWebJob getContinuousWebJobSlot(
        String resourceGroupName, String name, String webJobName, String slot) {
        ContinuousWebJobInner inner =
            this.serviceClient().getContinuousWebJobSlot(resourceGroupName, name, webJobName, slot);
        if (inner != null) {
            return new ContinuousWebJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ContinuousWebJob> getContinuousWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        Response<ContinuousWebJobInner> inner =
            this
                .serviceClient()
                .getContinuousWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ContinuousWebJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        this.serviceClient().deleteContinuousWebJobSlot(resourceGroupName, name, webJobName, slot);
    }

    public Response<Void> deleteContinuousWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteContinuousWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
    }

    public void startContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        this.serviceClient().startContinuousWebJobSlot(resourceGroupName, name, webJobName, slot);
    }

    public Response<Void> startContinuousWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        return this
            .serviceClient()
            .startContinuousWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
    }

    public void stopContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        this.serviceClient().stopContinuousWebJobSlot(resourceGroupName, name, webJobName, slot);
    }

    public Response<Void> stopContinuousWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        return this
            .serviceClient()
            .stopContinuousWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
    }

    public PagedIterable<Deployment> listDeploymentsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<DeploymentInner> inner = this.serviceClient().listDeploymentsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public PagedIterable<Deployment> listDeploymentsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<DeploymentInner> inner =
            this.serviceClient().listDeploymentsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new DeploymentImpl(inner1, this.manager()));
    }

    public Deployment getDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        DeploymentInner inner = this.serviceClient().getDeploymentSlot(resourceGroupName, name, id, slot);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> getDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().getDeploymentSlotWithResponse(resourceGroupName, name, id, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Deployment createDeploymentSlot(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        DeploymentInner inner =
            this.serviceClient().createDeploymentSlot(resourceGroupName, name, id, slot, deployment);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> createDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, DeploymentInner deployment, Context context) {
        Response<DeploymentInner> inner =
            this
                .serviceClient()
                .createDeploymentSlotWithResponse(resourceGroupName, name, id, slot, deployment, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        this.serviceClient().deleteDeploymentSlot(resourceGroupName, name, id, slot);
    }

    public Response<Void> deleteDeploymentSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        return this.serviceClient().deleteDeploymentSlotWithResponse(resourceGroupName, name, id, slot, context);
    }

    public Deployment listDeploymentLogSlot(String resourceGroupName, String name, String id, String slot) {
        DeploymentInner inner = this.serviceClient().listDeploymentLogSlot(resourceGroupName, name, id, slot);
        if (inner != null) {
            return new DeploymentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Deployment> listDeploymentLogSlotWithResponse(
        String resourceGroupName, String name, String id, String slot, Context context) {
        Response<DeploymentInner> inner =
            this.serviceClient().listDeploymentLogSlotWithResponse(resourceGroupName, name, id, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new DeploymentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RestoreRequest discoverBackupSlot(
        String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        RestoreRequestInner inner = this.serviceClient().discoverBackupSlot(resourceGroupName, name, slot, request);
        if (inner != null) {
            return new RestoreRequestImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RestoreRequest> discoverBackupSlotWithResponse(
        String resourceGroupName, String name, String slot, RestoreRequestInner request, Context context) {
        Response<RestoreRequestInner> inner =
            this.serviceClient().discoverBackupSlotWithResponse(resourceGroupName, name, slot, request, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RestoreRequestImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Identifier> listDomainOwnershipIdentifiersSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<IdentifierInner> inner =
            this.serviceClient().listDomainOwnershipIdentifiersSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new IdentifierImpl(inner1, this.manager()));
    }

    public PagedIterable<Identifier> listDomainOwnershipIdentifiersSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<IdentifierInner> inner =
            this.serviceClient().listDomainOwnershipIdentifiersSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new IdentifierImpl(inner1, this.manager()));
    }

    public Identifier getDomainOwnershipIdentifierSlot(
        String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        IdentifierInner inner =
            this
                .serviceClient()
                .getDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot);
        if (inner != null) {
            return new IdentifierImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Identifier> getDomainOwnershipIdentifierSlotWithResponse(
        String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, Context context) {
        Response<IdentifierInner> inner =
            this
                .serviceClient()
                .getDomainOwnershipIdentifierSlotWithResponse(
                    resourceGroupName, name, domainOwnershipIdentifierName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IdentifierImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Identifier createOrUpdateDomainOwnershipIdentifierSlot(
        String resourceGroupName,
        String name,
        String domainOwnershipIdentifierName,
        String slot,
        IdentifierInner domainOwnershipIdentifier) {
        IdentifierInner inner =
            this
                .serviceClient()
                .createOrUpdateDomainOwnershipIdentifierSlot(
                    resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier);
        if (inner != null) {
            return new IdentifierImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Identifier> createOrUpdateDomainOwnershipIdentifierSlotWithResponse(
        String resourceGroupName,
        String name,
        String domainOwnershipIdentifierName,
        String slot,
        IdentifierInner domainOwnershipIdentifier,
        Context context) {
        Response<IdentifierInner> inner =
            this
                .serviceClient()
                .createOrUpdateDomainOwnershipIdentifierSlotWithResponse(
                    resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IdentifierImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteDomainOwnershipIdentifierSlot(
        String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        this
            .serviceClient()
            .deleteDomainOwnershipIdentifierSlot(resourceGroupName, name, domainOwnershipIdentifierName, slot);
    }

    public Response<Void> deleteDomainOwnershipIdentifierSlotWithResponse(
        String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteDomainOwnershipIdentifierSlotWithResponse(
                resourceGroupName, name, domainOwnershipIdentifierName, slot, context);
    }

    public Identifier updateDomainOwnershipIdentifierSlot(
        String resourceGroupName,
        String name,
        String domainOwnershipIdentifierName,
        String slot,
        IdentifierInner domainOwnershipIdentifier) {
        IdentifierInner inner =
            this
                .serviceClient()
                .updateDomainOwnershipIdentifierSlot(
                    resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier);
        if (inner != null) {
            return new IdentifierImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Identifier> updateDomainOwnershipIdentifierSlotWithResponse(
        String resourceGroupName,
        String name,
        String domainOwnershipIdentifierName,
        String slot,
        IdentifierInner domainOwnershipIdentifier,
        Context context) {
        Response<IdentifierInner> inner =
            this
                .serviceClient()
                .updateDomainOwnershipIdentifierSlotWithResponse(
                    resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new IdentifierImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus getMSDeployStatusSlot(String resourceGroupName, String name, String slot) {
        MSDeployStatusInner inner = this.serviceClient().getMSDeployStatusSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployStatus> getMSDeployStatusSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<MSDeployStatusInner> inner =
            this.serviceClient().getMSDeployStatusSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus createMSDeployOperationSlot(
        String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        MSDeployStatusInner inner =
            this.serviceClient().createMSDeployOperationSlot(resourceGroupName, name, slot, mSDeploy);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployStatus createMSDeployOperationSlot(
        String resourceGroupName, String name, String slot, MSDeploy mSDeploy, Context context) {
        MSDeployStatusInner inner =
            this.serviceClient().createMSDeployOperationSlot(resourceGroupName, name, slot, mSDeploy, context);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployLog getMSDeployLogSlot(String resourceGroupName, String name, String slot) {
        MSDeployLogInner inner = this.serviceClient().getMSDeployLogSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new MSDeployLogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployLog> getMSDeployLogSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<MSDeployLogInner> inner =
            this.serviceClient().getMSDeployLogSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployLogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<FunctionEnvelope> listInstanceFunctionsSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<FunctionEnvelopeInner> inner =
            this.serviceClient().listInstanceFunctionsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new FunctionEnvelopeImpl(inner1, this.manager()));
    }

    public PagedIterable<FunctionEnvelope> listInstanceFunctionsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<FunctionEnvelopeInner> inner =
            this.serviceClient().listInstanceFunctionsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new FunctionEnvelopeImpl(inner1, this.manager()));
    }

    public String getFunctionsAdminTokenSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().getFunctionsAdminTokenSlot(resourceGroupName, name, slot);
    }

    public Response<String> getFunctionsAdminTokenSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().getFunctionsAdminTokenSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public FunctionEnvelope getInstanceFunctionSlot(
        String resourceGroupName, String name, String functionName, String slot) {
        FunctionEnvelopeInner inner =
            this.serviceClient().getInstanceFunctionSlot(resourceGroupName, name, functionName, slot);
        if (inner != null) {
            return new FunctionEnvelopeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FunctionEnvelope> getInstanceFunctionSlotWithResponse(
        String resourceGroupName, String name, String functionName, String slot, Context context) {
        Response<FunctionEnvelopeInner> inner =
            this
                .serviceClient()
                .getInstanceFunctionSlotWithResponse(resourceGroupName, name, functionName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FunctionEnvelopeImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FunctionEnvelope createInstanceFunctionSlot(
        String resourceGroupName,
        String name,
        String functionName,
        String slot,
        FunctionEnvelopeInner functionEnvelope) {
        FunctionEnvelopeInner inner =
            this
                .serviceClient()
                .createInstanceFunctionSlot(resourceGroupName, name, functionName, slot, functionEnvelope);
        if (inner != null) {
            return new FunctionEnvelopeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public FunctionEnvelope createInstanceFunctionSlot(
        String resourceGroupName,
        String name,
        String functionName,
        String slot,
        FunctionEnvelopeInner functionEnvelope,
        Context context) {
        FunctionEnvelopeInner inner =
            this
                .serviceClient()
                .createInstanceFunctionSlot(resourceGroupName, name, functionName, slot, functionEnvelope, context);
        if (inner != null) {
            return new FunctionEnvelopeImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot) {
        this.serviceClient().deleteInstanceFunctionSlot(resourceGroupName, name, functionName, slot);
    }

    public Response<Void> deleteInstanceFunctionSlotWithResponse(
        String resourceGroupName, String name, String functionName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteInstanceFunctionSlotWithResponse(resourceGroupName, name, functionName, slot, context);
    }

    public KeyInfo createOrUpdateFunctionSecretSlot(
        String resourceGroupName, String name, String functionName, String keyName, String slot, KeyInfoInner key) {
        KeyInfoInner inner =
            this
                .serviceClient()
                .createOrUpdateFunctionSecretSlot(resourceGroupName, name, functionName, keyName, slot, key);
        if (inner != null) {
            return new KeyInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<KeyInfo> createOrUpdateFunctionSecretSlotWithResponse(
        String resourceGroupName,
        String name,
        String functionName,
        String keyName,
        String slot,
        KeyInfoInner key,
        Context context) {
        Response<KeyInfoInner> inner =
            this
                .serviceClient()
                .createOrUpdateFunctionSecretSlotWithResponse(
                    resourceGroupName, name, functionName, keyName, slot, key, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new KeyInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteFunctionSecretSlot(
        String resourceGroupName, String name, String functionName, String keyName, String slot) {
        this.serviceClient().deleteFunctionSecretSlot(resourceGroupName, name, functionName, keyName, slot);
    }

    public Response<Void> deleteFunctionSecretSlotWithResponse(
        String resourceGroupName, String name, String functionName, String keyName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteFunctionSecretSlotWithResponse(resourceGroupName, name, functionName, keyName, slot, context);
    }

    public StringDictionary listFunctionKeysSlot(
        String resourceGroupName, String name, String functionName, String slot) {
        StringDictionaryInner inner =
            this.serviceClient().listFunctionKeysSlot(resourceGroupName, name, functionName, slot);
        if (inner != null) {
            return new StringDictionaryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StringDictionary> listFunctionKeysSlotWithResponse(
        String resourceGroupName, String name, String functionName, String slot, Context context) {
        Response<StringDictionaryInner> inner =
            this.serviceClient().listFunctionKeysSlotWithResponse(resourceGroupName, name, functionName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StringDictionaryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public FunctionSecrets listFunctionSecretsSlot(
        String resourceGroupName, String name, String functionName, String slot) {
        FunctionSecretsInner inner =
            this.serviceClient().listFunctionSecretsSlot(resourceGroupName, name, functionName, slot);
        if (inner != null) {
            return new FunctionSecretsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FunctionSecrets> listFunctionSecretsSlotWithResponse(
        String resourceGroupName, String name, String functionName, String slot, Context context) {
        Response<FunctionSecretsInner> inner =
            this
                .serviceClient()
                .listFunctionSecretsSlotWithResponse(resourceGroupName, name, functionName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FunctionSecretsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HostKeys listHostKeysSlot(String resourceGroupName, String name, String slot) {
        HostKeysInner inner = this.serviceClient().listHostKeysSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new HostKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostKeys> listHostKeysSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<HostKeysInner> inner =
            this.serviceClient().listHostKeysSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void listSyncStatusSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().listSyncStatusSlot(resourceGroupName, name, slot);
    }

    public Response<Void> listSyncStatusSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().listSyncStatusSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public void syncFunctionsSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().syncFunctionsSlot(resourceGroupName, name, slot);
    }

    public Response<Void> syncFunctionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().syncFunctionsSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public KeyInfo createOrUpdateHostSecretSlot(
        String resourceGroupName, String name, String keyType, String keyName, String slot, KeyInfoInner key) {
        KeyInfoInner inner =
            this.serviceClient().createOrUpdateHostSecretSlot(resourceGroupName, name, keyType, keyName, slot, key);
        if (inner != null) {
            return new KeyInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<KeyInfo> createOrUpdateHostSecretSlotWithResponse(
        String resourceGroupName,
        String name,
        String keyType,
        String keyName,
        String slot,
        KeyInfoInner key,
        Context context) {
        Response<KeyInfoInner> inner =
            this
                .serviceClient()
                .createOrUpdateHostSecretSlotWithResponse(
                    resourceGroupName, name, keyType, keyName, slot, key, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new KeyInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteHostSecretSlot(
        String resourceGroupName, String name, String keyType, String keyName, String slot) {
        this.serviceClient().deleteHostSecretSlot(resourceGroupName, name, keyType, keyName, slot);
    }

    public Response<Void> deleteHostSecretSlotWithResponse(
        String resourceGroupName, String name, String keyType, String keyName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteHostSecretSlotWithResponse(resourceGroupName, name, keyType, keyName, slot, context);
    }

    public PagedIterable<HostnameBinding> listHostnameBindingsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().listHostnameBindingsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public PagedIterable<HostnameBinding> listHostnameBindingsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<HostnameBindingInner> inner =
            this.serviceClient().listHostnameBindingsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new HostnameBindingImpl(inner1, this.manager()));
    }

    public HostnameBinding getHostnameBindingSlot(String resourceGroupName, String name, String slot, String hostname) {
        HostnameBindingInner inner =
            this.serviceClient().getHostnameBindingSlot(resourceGroupName, name, slot, hostname);
        if (inner != null) {
            return new HostnameBindingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostnameBinding> getHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        Response<HostnameBindingInner> inner =
            this.serviceClient().getHostnameBindingSlotWithResponse(resourceGroupName, name, slot, hostname, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostnameBindingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HostnameBinding createOrUpdateHostnameBindingSlot(
        String resourceGroupName, String name, String hostname, String slot, HostnameBindingInner hostnameBinding) {
        HostnameBindingInner inner =
            this
                .serviceClient()
                .createOrUpdateHostnameBindingSlot(resourceGroupName, name, hostname, slot, hostnameBinding);
        if (inner != null) {
            return new HostnameBindingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HostnameBinding> createOrUpdateHostnameBindingSlotWithResponse(
        String resourceGroupName,
        String name,
        String hostname,
        String slot,
        HostnameBindingInner hostnameBinding,
        Context context) {
        Response<HostnameBindingInner> inner =
            this
                .serviceClient()
                .createOrUpdateHostnameBindingSlotWithResponse(
                    resourceGroupName, name, hostname, slot, hostnameBinding, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HostnameBindingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteHostnameBindingSlot(String resourceGroupName, String name, String slot, String hostname) {
        this.serviceClient().deleteHostnameBindingSlot(resourceGroupName, name, slot, hostname);
    }

    public Response<Void> deleteHostnameBindingSlotWithResponse(
        String resourceGroupName, String name, String slot, String hostname, Context context) {
        return this
            .serviceClient()
            .deleteHostnameBindingSlotWithResponse(resourceGroupName, name, slot, hostname, context);
    }

    public HybridConnection getHybridConnectionSlot(
        String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        HybridConnectionInner inner =
            this.serviceClient().getHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot);
        if (inner != null) {
            return new HybridConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridConnection> getHybridConnectionSlotWithResponse(
        String resourceGroupName, String name, String namespaceName, String relayName, String slot, Context context) {
        Response<HybridConnectionInner> inner =
            this
                .serviceClient()
                .getHybridConnectionSlotWithResponse(resourceGroupName, name, namespaceName, relayName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HybridConnection createOrUpdateHybridConnectionSlot(
        String resourceGroupName,
        String name,
        String namespaceName,
        String relayName,
        String slot,
        HybridConnectionInner connectionEnvelope) {
        HybridConnectionInner inner =
            this
                .serviceClient()
                .createOrUpdateHybridConnectionSlot(
                    resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope);
        if (inner != null) {
            return new HybridConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridConnection> createOrUpdateHybridConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String namespaceName,
        String relayName,
        String slot,
        HybridConnectionInner connectionEnvelope,
        Context context) {
        Response<HybridConnectionInner> inner =
            this
                .serviceClient()
                .createOrUpdateHybridConnectionSlotWithResponse(
                    resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteHybridConnectionSlot(
        String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        this.serviceClient().deleteHybridConnectionSlot(resourceGroupName, name, namespaceName, relayName, slot);
    }

    public Response<Void> deleteHybridConnectionSlotWithResponse(
        String resourceGroupName, String name, String namespaceName, String relayName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteHybridConnectionSlotWithResponse(resourceGroupName, name, namespaceName, relayName, slot, context);
    }

    public HybridConnection updateHybridConnectionSlot(
        String resourceGroupName,
        String name,
        String namespaceName,
        String relayName,
        String slot,
        HybridConnectionInner connectionEnvelope) {
        HybridConnectionInner inner =
            this
                .serviceClient()
                .updateHybridConnectionSlot(
                    resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope);
        if (inner != null) {
            return new HybridConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridConnection> updateHybridConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String namespaceName,
        String relayName,
        String slot,
        HybridConnectionInner connectionEnvelope,
        Context context) {
        Response<HybridConnectionInner> inner =
            this
                .serviceClient()
                .updateHybridConnectionSlotWithResponse(
                    resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HybridConnection listHybridConnectionsSlot(String resourceGroupName, String name, String slot) {
        HybridConnectionInner inner = this.serviceClient().listHybridConnectionsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new HybridConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridConnection> listHybridConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<HybridConnectionInner> inner =
            this.serviceClient().listHybridConnectionsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity listRelayServiceConnectionsSlot(
        String resourceGroupName, String name, String slot) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().listRelayServiceConnectionsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> listRelayServiceConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this.serviceClient().listRelayServiceConnectionsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity getRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot) {
        RelayServiceConnectionEntityInner inner =
            this.serviceClient().getRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> getRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .getRelayServiceConnectionSlotWithResponse(resourceGroupName, name, entityName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RelayServiceConnectionEntity createOrUpdateRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        RelayServiceConnectionEntityInner inner =
            this
                .serviceClient()
                .createOrUpdateRelayServiceConnectionSlot(
                    resourceGroupName, name, entityName, slot, connectionEnvelope);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> createOrUpdateRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .createOrUpdateRelayServiceConnectionSlotWithResponse(
                    resourceGroupName, name, entityName, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteRelayServiceConnectionSlot(
        String resourceGroupName, String name, String entityName, String slot) {
        this.serviceClient().deleteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot);
    }

    public Response<Void> deleteRelayServiceConnectionSlotWithResponse(
        String resourceGroupName, String name, String entityName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteRelayServiceConnectionSlotWithResponse(resourceGroupName, name, entityName, slot, context);
    }

    public RelayServiceConnectionEntity updateRelayServiceConnectionSlot(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope) {
        RelayServiceConnectionEntityInner inner =
            this
                .serviceClient()
                .updateRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, connectionEnvelope);
        if (inner != null) {
            return new RelayServiceConnectionEntityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RelayServiceConnectionEntity> updateRelayServiceConnectionSlotWithResponse(
        String resourceGroupName,
        String name,
        String entityName,
        String slot,
        RelayServiceConnectionEntityInner connectionEnvelope,
        Context context) {
        Response<RelayServiceConnectionEntityInner> inner =
            this
                .serviceClient()
                .updateRelayServiceConnectionSlotWithResponse(
                    resourceGroupName, name, entityName, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RelayServiceConnectionEntityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<WebSiteInstanceStatus> listInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<WebSiteInstanceStatusInner> inner =
            this.serviceClient().listInstanceIdentifiersSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new WebSiteInstanceStatusImpl(inner1, this.manager()));
    }

    public PagedIterable<WebSiteInstanceStatus> listInstanceIdentifiersSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<WebSiteInstanceStatusInner> inner =
            this.serviceClient().listInstanceIdentifiersSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new WebSiteInstanceStatusImpl(inner1, this.manager()));
    }

    public WebSiteInstanceStatus getInstanceInfoSlot(
        String resourceGroupName, String name, String instanceId, String slot) {
        WebSiteInstanceStatusInner inner =
            this.serviceClient().getInstanceInfoSlot(resourceGroupName, name, instanceId, slot);
        if (inner != null) {
            return new WebSiteInstanceStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WebSiteInstanceStatus> getInstanceInfoSlotWithResponse(
        String resourceGroupName, String name, String instanceId, String slot, Context context) {
        Response<WebSiteInstanceStatusInner> inner =
            this.serviceClient().getInstanceInfoSlotWithResponse(resourceGroupName, name, instanceId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WebSiteInstanceStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus getInstanceMsDeployStatusSlot(
        String resourceGroupName, String name, String slot, String instanceId) {
        MSDeployStatusInner inner =
            this.serviceClient().getInstanceMsDeployStatusSlot(resourceGroupName, name, slot, instanceId);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployStatus> getInstanceMsDeployStatusSlotWithResponse(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        Response<MSDeployStatusInner> inner =
            this
                .serviceClient()
                .getInstanceMsDeployStatusSlotWithResponse(resourceGroupName, name, slot, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MSDeployStatus createInstanceMSDeployOperationSlot(
        String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        MSDeployStatusInner inner =
            this
                .serviceClient()
                .createInstanceMSDeployOperationSlot(resourceGroupName, name, slot, instanceId, mSDeploy);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployStatus createInstanceMSDeployOperationSlot(
        String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy, Context context) {
        MSDeployStatusInner inner =
            this
                .serviceClient()
                .createInstanceMSDeployOperationSlot(resourceGroupName, name, slot, instanceId, mSDeploy, context);
        if (inner != null) {
            return new MSDeployStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public MSDeployLog getInstanceMSDeployLogSlot(
        String resourceGroupName, String name, String slot, String instanceId) {
        MSDeployLogInner inner =
            this.serviceClient().getInstanceMSDeployLogSlot(resourceGroupName, name, slot, instanceId);
        if (inner != null) {
            return new MSDeployLogImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MSDeployLog> getInstanceMSDeployLogSlotWithResponse(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        Response<MSDeployLogInner> inner =
            this
                .serviceClient()
                .getInstanceMSDeployLogSlotWithResponse(resourceGroupName, name, slot, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MSDeployLogImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessInfo> listInstanceProcessesSlot(
        String resourceGroupName, String name, String slot, String instanceId) {
        PagedIterable<ProcessInfoInner> inner =
            this.serviceClient().listInstanceProcessesSlot(resourceGroupName, name, slot, instanceId);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessInfo> listInstanceProcessesSlot(
        String resourceGroupName, String name, String slot, String instanceId, Context context) {
        PagedIterable<ProcessInfoInner> inner =
            this.serviceClient().listInstanceProcessesSlot(resourceGroupName, name, slot, instanceId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public ProcessInfo getInstanceProcessSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId) {
        ProcessInfoInner inner =
            this.serviceClient().getInstanceProcessSlot(resourceGroupName, name, processId, slot, instanceId);
        if (inner != null) {
            return new ProcessInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessInfo> getInstanceProcessSlotWithResponse(
        String resourceGroupName, String name, String processId, String slot, String instanceId, Context context) {
        Response<ProcessInfoInner> inner =
            this
                .serviceClient()
                .getInstanceProcessSlotWithResponse(resourceGroupName, name, processId, slot, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteInstanceProcessSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId) {
        this.serviceClient().deleteInstanceProcessSlot(resourceGroupName, name, processId, slot, instanceId);
    }

    public Response<Void> deleteInstanceProcessSlotWithResponse(
        String resourceGroupName, String name, String processId, String slot, String instanceId, Context context) {
        return this
            .serviceClient()
            .deleteInstanceProcessSlotWithResponse(resourceGroupName, name, processId, slot, instanceId, context);
    }

    public InputStream getInstanceProcessDumpSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return this.serviceClient().getInstanceProcessDumpSlot(resourceGroupName, name, processId, slot, instanceId);
    }

    public StreamResponse getInstanceProcessDumpSlotWithResponse(
        String resourceGroupName, String name, String processId, String slot, String instanceId, Context context) {
        return this
            .serviceClient()
            .getInstanceProcessDumpSlotWithResponse(resourceGroupName, name, processId, slot, instanceId, context);
    }

    public PagedIterable<ProcessModuleInfo> listInstanceProcessModulesSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listInstanceProcessModulesSlot(resourceGroupName, name, processId, slot, instanceId);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessModuleInfo> listInstanceProcessModulesSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId, Context context) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this
                .serviceClient()
                .listInstanceProcessModulesSlot(resourceGroupName, name, processId, slot, instanceId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public ProcessModuleInfo getInstanceProcessModuleSlot(
        String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId) {
        ProcessModuleInfoInner inner =
            this
                .serviceClient()
                .getInstanceProcessModuleSlot(resourceGroupName, name, processId, baseAddress, slot, instanceId);
        if (inner != null) {
            return new ProcessModuleInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessModuleInfo> getInstanceProcessModuleSlotWithResponse(
        String resourceGroupName,
        String name,
        String processId,
        String baseAddress,
        String slot,
        String instanceId,
        Context context) {
        Response<ProcessModuleInfoInner> inner =
            this
                .serviceClient()
                .getInstanceProcessModuleSlotWithResponse(
                    resourceGroupName, name, processId, baseAddress, slot, instanceId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessModuleInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessThreadInfo> listInstanceProcessThreadsSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listInstanceProcessThreadsSlot(resourceGroupName, name, processId, slot, instanceId);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessThreadInfo> listInstanceProcessThreadsSlot(
        String resourceGroupName, String name, String processId, String slot, String instanceId, Context context) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this
                .serviceClient()
                .listInstanceProcessThreadsSlot(resourceGroupName, name, processId, slot, instanceId, context);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public SiteCloneability isCloneableSlot(String resourceGroupName, String name, String slot) {
        SiteCloneabilityInner inner = this.serviceClient().isCloneableSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteCloneabilityImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteCloneability> isCloneableSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteCloneabilityInner> inner =
            this.serviceClient().isCloneableSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteCloneabilityImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<BackupItem> listSiteBackupsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<BackupItemInner> inner = this.serviceClient().listSiteBackupsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public PagedIterable<BackupItem> listSiteBackupsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<BackupItemInner> inner =
            this.serviceClient().listSiteBackupsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new BackupItemImpl(inner1, this.manager()));
    }

    public FunctionSecrets listSyncFunctionTriggersSlot(String resourceGroupName, String name, String slot) {
        FunctionSecretsInner inner = this.serviceClient().listSyncFunctionTriggersSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new FunctionSecretsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<FunctionSecrets> listSyncFunctionTriggersSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<FunctionSecretsInner> inner =
            this.serviceClient().listSyncFunctionTriggersSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new FunctionSecretsImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MigrateMySqlStatus getMigrateMySqlStatusSlot(String resourceGroupName, String name, String slot) {
        MigrateMySqlStatusInner inner = this.serviceClient().getMigrateMySqlStatusSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new MigrateMySqlStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MigrateMySqlStatus> getMigrateMySqlStatusSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<MigrateMySqlStatusInner> inner =
            this.serviceClient().getMigrateMySqlStatusSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MigrateMySqlStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SwiftVirtualNetwork getSwiftVirtualNetworkConnectionSlot(
        String resourceGroupName, String name, String slot) {
        SwiftVirtualNetworkInner inner =
            this.serviceClient().getSwiftVirtualNetworkConnectionSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SwiftVirtualNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SwiftVirtualNetwork> getSwiftVirtualNetworkConnectionSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SwiftVirtualNetworkInner> inner =
            this
                .serviceClient()
                .getSwiftVirtualNetworkConnectionSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SwiftVirtualNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SwiftVirtualNetwork createOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot(
        String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        SwiftVirtualNetworkInner inner =
            this
                .serviceClient()
                .createOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot(
                    resourceGroupName, name, slot, connectionEnvelope);
        if (inner != null) {
            return new SwiftVirtualNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SwiftVirtualNetwork> createOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        SwiftVirtualNetworkInner connectionEnvelope,
        Context context) {
        Response<SwiftVirtualNetworkInner> inner =
            this
                .serviceClient()
                .createOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotWithResponse(
                    resourceGroupName, name, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SwiftVirtualNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteSwiftVirtualNetworkSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().deleteSwiftVirtualNetworkSlot(resourceGroupName, name, slot);
    }

    public Response<Void> deleteSwiftVirtualNetworkSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().deleteSwiftVirtualNetworkSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public SwiftVirtualNetwork updateSwiftVirtualNetworkConnectionWithCheckSlot(
        String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        SwiftVirtualNetworkInner inner =
            this
                .serviceClient()
                .updateSwiftVirtualNetworkConnectionWithCheckSlot(resourceGroupName, name, slot, connectionEnvelope);
        if (inner != null) {
            return new SwiftVirtualNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SwiftVirtualNetwork> updateSwiftVirtualNetworkConnectionWithCheckSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        SwiftVirtualNetworkInner connectionEnvelope,
        Context context) {
        Response<SwiftVirtualNetworkInner> inner =
            this
                .serviceClient()
                .updateSwiftVirtualNetworkConnectionWithCheckSlotWithResponse(
                    resourceGroupName, name, slot, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SwiftVirtualNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public NetworkFeatures listNetworkFeaturesSlot(String resourceGroupName, String name, String view, String slot) {
        NetworkFeaturesInner inner = this.serviceClient().listNetworkFeaturesSlot(resourceGroupName, name, view, slot);
        if (inner != null) {
            return new NetworkFeaturesImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NetworkFeatures> listNetworkFeaturesSlotWithResponse(
        String resourceGroupName, String name, String view, String slot, Context context) {
        Response<NetworkFeaturesInner> inner =
            this.serviceClient().listNetworkFeaturesSlotWithResponse(resourceGroupName, name, view, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NetworkFeaturesImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Object getNetworkTraceOperationSlot(String resourceGroupName, String name, String operationId, String slot) {
        return this.serviceClient().getNetworkTraceOperationSlot(resourceGroupName, name, operationId, slot);
    }

    public Response<Object> getNetworkTraceOperationSlotWithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        return this
            .serviceClient()
            .getNetworkTraceOperationSlotWithResponse(resourceGroupName, name, operationId, slot, context);
    }

    public String startWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().startWebSiteNetworkTraceSlot(resourceGroupName, name, slot);
    }

    public Response<String> startWebSiteNetworkTraceSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl,
        Context context) {
        return this
            .serviceClient()
            .startWebSiteNetworkTraceSlotWithResponse(
                resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, context);
    }

    public Object startWebSiteNetworkTraceOperationSlot(
        String resourceGroupName,
        String name,
        String slot,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl) {
        return this
            .serviceClient()
            .startWebSiteNetworkTraceOperationSlot(
                resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl);
    }

    public Object startWebSiteNetworkTraceOperationSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().startWebSiteNetworkTraceOperationSlot(resourceGroupName, name, slot);
    }

    public Object startWebSiteNetworkTraceOperationSlot(
        String resourceGroupName,
        String name,
        String slot,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl,
        Context context) {
        return this
            .serviceClient()
            .startWebSiteNetworkTraceOperationSlot(
                resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, context);
    }

    public void stopWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().stopWebSiteNetworkTraceSlot(resourceGroupName, name, slot);
    }

    public Response<Void> stopWebSiteNetworkTraceSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().stopWebSiteNetworkTraceSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public List<NetworkTrace> getNetworkTracesSlot(
        String resourceGroupName, String name, String operationId, String slot) {
        List<NetworkTraceInner> inner =
            this.serviceClient().getNetworkTracesSlot(resourceGroupName, name, operationId, slot);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<NetworkTrace>> getNetworkTracesSlotWithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        Response<List<NetworkTraceInner>> inner =
            this.serviceClient().getNetworkTracesSlotWithResponse(resourceGroupName, name, operationId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public Object getNetworkTraceOperationSlotV2(
        String resourceGroupName, String name, String operationId, String slot) {
        return this.serviceClient().getNetworkTraceOperationSlotV2(resourceGroupName, name, operationId, slot);
    }

    public Response<Object> getNetworkTraceOperationSlotV2WithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        return this
            .serviceClient()
            .getNetworkTraceOperationSlotV2WithResponse(resourceGroupName, name, operationId, slot, context);
    }

    public List<NetworkTrace> getNetworkTracesSlotV2(
        String resourceGroupName, String name, String operationId, String slot) {
        List<NetworkTraceInner> inner =
            this.serviceClient().getNetworkTracesSlotV2(resourceGroupName, name, operationId, slot);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<NetworkTrace>> getNetworkTracesSlotV2WithResponse(
        String resourceGroupName, String name, String operationId, String slot, Context context) {
        Response<List<NetworkTraceInner>> inner =
            this
                .serviceClient()
                .getNetworkTracesSlotV2WithResponse(resourceGroupName, name, operationId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new NetworkTraceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public void generateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().generateNewSitePublishingPasswordSlot(resourceGroupName, name, slot);
    }

    public Response<Void> generateNewSitePublishingPasswordSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this
            .serviceClient()
            .generateNewSitePublishingPasswordSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public PagedIterable<PerfMonResponse> listPerfMonCountersSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<PerfMonResponseInner> inner =
            this.serviceClient().listPerfMonCountersSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new PerfMonResponseImpl(inner1, this.manager()));
    }

    public PagedIterable<PerfMonResponse> listPerfMonCountersSlot(
        String resourceGroupName, String name, String slot, String filter, Context context) {
        PagedIterable<PerfMonResponseInner> inner =
            this.serviceClient().listPerfMonCountersSlot(resourceGroupName, name, slot, filter, context);
        return Utils.mapPage(inner, inner1 -> new PerfMonResponseImpl(inner1, this.manager()));
    }

    public SitePhpErrorLogFlag getSitePhpErrorLogFlagSlot(String resourceGroupName, String name, String slot) {
        SitePhpErrorLogFlagInner inner = this.serviceClient().getSitePhpErrorLogFlagSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SitePhpErrorLogFlagImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SitePhpErrorLogFlag> getSitePhpErrorLogFlagSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SitePhpErrorLogFlagInner> inner =
            this.serviceClient().getSitePhpErrorLogFlagSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SitePhpErrorLogFlagImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PremierAddOn listPremierAddOnsSlot(String resourceGroupName, String name, String slot) {
        PremierAddOnInner inner = this.serviceClient().listPremierAddOnsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new PremierAddOnImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PremierAddOn> listPremierAddOnsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<PremierAddOnInner> inner =
            this.serviceClient().listPremierAddOnsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PremierAddOnImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PremierAddOn getPremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot) {
        PremierAddOnInner inner =
            this.serviceClient().getPremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot);
        if (inner != null) {
            return new PremierAddOnImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PremierAddOn> getPremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        Response<PremierAddOnInner> inner =
            this
                .serviceClient()
                .getPremierAddOnSlotWithResponse(resourceGroupName, name, premierAddOnName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PremierAddOnImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PremierAddOn addPremierAddOnSlot(
        String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnInner premierAddOn) {
        PremierAddOnInner inner =
            this.serviceClient().addPremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, premierAddOn);
        if (inner != null) {
            return new PremierAddOnImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PremierAddOn> addPremierAddOnSlotWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnInner premierAddOn,
        Context context) {
        Response<PremierAddOnInner> inner =
            this
                .serviceClient()
                .addPremierAddOnSlotWithResponse(
                    resourceGroupName, name, premierAddOnName, slot, premierAddOn, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PremierAddOnImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deletePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot) {
        this.serviceClient().deletePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot);
    }

    public Response<Void> deletePremierAddOnSlotWithResponse(
        String resourceGroupName, String name, String premierAddOnName, String slot, Context context) {
        return this
            .serviceClient()
            .deletePremierAddOnSlotWithResponse(resourceGroupName, name, premierAddOnName, slot, context);
    }

    public PremierAddOn updatePremierAddOnSlot(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnPatchResource premierAddOn) {
        PremierAddOnInner inner =
            this.serviceClient().updatePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, premierAddOn);
        if (inner != null) {
            return new PremierAddOnImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PremierAddOn> updatePremierAddOnSlotWithResponse(
        String resourceGroupName,
        String name,
        String premierAddOnName,
        String slot,
        PremierAddOnPatchResource premierAddOn,
        Context context) {
        Response<PremierAddOnInner> inner =
            this
                .serviceClient()
                .updatePremierAddOnSlotWithResponse(
                    resourceGroupName, name, premierAddOnName, slot, premierAddOn, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PremierAddOnImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateAccess getPrivateAccessSlot(String resourceGroupName, String name, String slot) {
        PrivateAccessInner inner = this.serviceClient().getPrivateAccessSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new PrivateAccessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateAccess> getPrivateAccessSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<PrivateAccessInner> inner =
            this.serviceClient().getPrivateAccessSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateAccessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateAccess putPrivateAccessVnetSlot(
        String resourceGroupName, String name, String slot, PrivateAccessInner access) {
        PrivateAccessInner inner = this.serviceClient().putPrivateAccessVnetSlot(resourceGroupName, name, slot, access);
        if (inner != null) {
            return new PrivateAccessImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateAccess> putPrivateAccessVnetSlotWithResponse(
        String resourceGroupName, String name, String slot, PrivateAccessInner access, Context context) {
        Response<PrivateAccessInner> inner =
            this.serviceClient().putPrivateAccessVnetSlotWithResponse(resourceGroupName, name, slot, access, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateAccessImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionListSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<RemotePrivateEndpointConnectionArmResourceInner> inner =
            this.serviceClient().getPrivateEndpointConnectionListSlot(resourceGroupName, name, slot);
        return Utils
            .mapPage(inner, inner1 -> new RemotePrivateEndpointConnectionArmResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionListSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<RemotePrivateEndpointConnectionArmResourceInner> inner =
            this.serviceClient().getPrivateEndpointConnectionListSlot(resourceGroupName, name, slot, context);
        return Utils
            .mapPage(inner, inner1 -> new RemotePrivateEndpointConnectionArmResourceImpl(inner1, this.manager()));
    }

    public RemotePrivateEndpointConnectionArmResource getPrivateEndpointConnectionSlot(
        String resourceGroupName, String name, String privateEndpointConnectionName, String slot) {
        RemotePrivateEndpointConnectionArmResourceInner inner =
            this
                .serviceClient()
                .getPrivateEndpointConnectionSlot(resourceGroupName, name, privateEndpointConnectionName, slot);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RemotePrivateEndpointConnectionArmResource> getPrivateEndpointConnectionSlotWithResponse(
        String resourceGroupName, String name, String privateEndpointConnectionName, String slot, Context context) {
        Response<RemotePrivateEndpointConnectionArmResourceInner> inner =
            this
                .serviceClient()
                .getPrivateEndpointConnectionSlotWithResponse(
                    resourceGroupName, name, privateEndpointConnectionName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RemotePrivateEndpointConnectionArmResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource approveOrRejectPrivateEndpointConnectionSlot(
        String resourceGroupName,
        String name,
        String privateEndpointConnectionName,
        String slot,
        PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper) {
        RemotePrivateEndpointConnectionArmResourceInner inner =
            this
                .serviceClient()
                .approveOrRejectPrivateEndpointConnectionSlot(
                    resourceGroupName, name, privateEndpointConnectionName, slot, privateEndpointWrapper);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public RemotePrivateEndpointConnectionArmResource approveOrRejectPrivateEndpointConnectionSlot(
        String resourceGroupName,
        String name,
        String privateEndpointConnectionName,
        String slot,
        PrivateLinkConnectionApprovalRequestResource privateEndpointWrapper,
        Context context) {
        RemotePrivateEndpointConnectionArmResourceInner inner =
            this
                .serviceClient()
                .approveOrRejectPrivateEndpointConnectionSlot(
                    resourceGroupName, name, privateEndpointConnectionName, slot, privateEndpointWrapper, context);
        if (inner != null) {
            return new RemotePrivateEndpointConnectionArmResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Object deletePrivateEndpointConnectionSlot(
        String resourceGroupName, String name, String privateEndpointConnectionName, String slot) {
        return this
            .serviceClient()
            .deletePrivateEndpointConnectionSlot(resourceGroupName, name, privateEndpointConnectionName, slot);
    }

    public Object deletePrivateEndpointConnectionSlot(
        String resourceGroupName, String name, String privateEndpointConnectionName, String slot, Context context) {
        return this
            .serviceClient()
            .deletePrivateEndpointConnectionSlot(resourceGroupName, name, privateEndpointConnectionName, slot, context);
    }

    public PrivateLinkResourcesWrapper getPrivateLinkResourcesSlot(String resourceGroupName, String name, String slot) {
        PrivateLinkResourcesWrapperInner inner =
            this.serviceClient().getPrivateLinkResourcesSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new PrivateLinkResourcesWrapperImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PrivateLinkResourcesWrapper> getPrivateLinkResourcesSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<PrivateLinkResourcesWrapperInner> inner =
            this.serviceClient().getPrivateLinkResourcesSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PrivateLinkResourcesWrapperImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessInfo> listProcessesSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<ProcessInfoInner> inner = this.serviceClient().listProcessesSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessInfo> listProcessesSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<ProcessInfoInner> inner =
            this.serviceClient().listProcessesSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new ProcessInfoImpl(inner1, this.manager()));
    }

    public ProcessInfo getProcessSlot(String resourceGroupName, String name, String processId, String slot) {
        ProcessInfoInner inner = this.serviceClient().getProcessSlot(resourceGroupName, name, processId, slot);
        if (inner != null) {
            return new ProcessInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessInfo> getProcessSlotWithResponse(
        String resourceGroupName, String name, String processId, String slot, Context context) {
        Response<ProcessInfoInner> inner =
            this.serviceClient().getProcessSlotWithResponse(resourceGroupName, name, processId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteProcessSlot(String resourceGroupName, String name, String processId, String slot) {
        this.serviceClient().deleteProcessSlot(resourceGroupName, name, processId, slot);
    }

    public Response<Void> deleteProcessSlotWithResponse(
        String resourceGroupName, String name, String processId, String slot, Context context) {
        return this.serviceClient().deleteProcessSlotWithResponse(resourceGroupName, name, processId, slot, context);
    }

    public InputStream getProcessDumpSlot(String resourceGroupName, String name, String processId, String slot) {
        return this.serviceClient().getProcessDumpSlot(resourceGroupName, name, processId, slot);
    }

    public StreamResponse getProcessDumpSlotWithResponse(
        String resourceGroupName, String name, String processId, String slot, Context context) {
        return this.serviceClient().getProcessDumpSlotWithResponse(resourceGroupName, name, processId, slot, context);
    }

    public PagedIterable<ProcessModuleInfo> listProcessModulesSlot(
        String resourceGroupName, String name, String processId, String slot) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listProcessModulesSlot(resourceGroupName, name, processId, slot);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessModuleInfo> listProcessModulesSlot(
        String resourceGroupName, String name, String processId, String slot, Context context) {
        PagedIterable<ProcessModuleInfoInner> inner =
            this.serviceClient().listProcessModulesSlot(resourceGroupName, name, processId, slot, context);
        return Utils.mapPage(inner, inner1 -> new ProcessModuleInfoImpl(inner1, this.manager()));
    }

    public ProcessModuleInfo getProcessModuleSlot(
        String resourceGroupName, String name, String processId, String baseAddress, String slot) {
        ProcessModuleInfoInner inner =
            this.serviceClient().getProcessModuleSlot(resourceGroupName, name, processId, baseAddress, slot);
        if (inner != null) {
            return new ProcessModuleInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ProcessModuleInfo> getProcessModuleSlotWithResponse(
        String resourceGroupName, String name, String processId, String baseAddress, String slot, Context context) {
        Response<ProcessModuleInfoInner> inner =
            this
                .serviceClient()
                .getProcessModuleSlotWithResponse(resourceGroupName, name, processId, baseAddress, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ProcessModuleInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ProcessThreadInfo> listProcessThreadsSlot(
        String resourceGroupName, String name, String processId, String slot) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listProcessThreadsSlot(resourceGroupName, name, processId, slot);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<ProcessThreadInfo> listProcessThreadsSlot(
        String resourceGroupName, String name, String processId, String slot, Context context) {
        PagedIterable<ProcessThreadInfoInner> inner =
            this.serviceClient().listProcessThreadsSlot(resourceGroupName, name, processId, slot, context);
        return Utils.mapPage(inner, inner1 -> new ProcessThreadInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCertificate> listPublicCertificatesSlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<PublicCertificateInner> inner =
            this.serviceClient().listPublicCertificatesSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new PublicCertificateImpl(inner1, this.manager()));
    }

    public PagedIterable<PublicCertificate> listPublicCertificatesSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<PublicCertificateInner> inner =
            this.serviceClient().listPublicCertificatesSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new PublicCertificateImpl(inner1, this.manager()));
    }

    public PublicCertificate getPublicCertificateSlot(
        String resourceGroupName, String name, String slot, String publicCertificateName) {
        PublicCertificateInner inner =
            this.serviceClient().getPublicCertificateSlot(resourceGroupName, name, slot, publicCertificateName);
        if (inner != null) {
            return new PublicCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PublicCertificate> getPublicCertificateSlotWithResponse(
        String resourceGroupName, String name, String slot, String publicCertificateName, Context context) {
        Response<PublicCertificateInner> inner =
            this
                .serviceClient()
                .getPublicCertificateSlotWithResponse(resourceGroupName, name, slot, publicCertificateName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PublicCertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PublicCertificate createOrUpdatePublicCertificateSlot(
        String resourceGroupName,
        String name,
        String publicCertificateName,
        String slot,
        PublicCertificateInner publicCertificate) {
        PublicCertificateInner inner =
            this
                .serviceClient()
                .createOrUpdatePublicCertificateSlot(
                    resourceGroupName, name, publicCertificateName, slot, publicCertificate);
        if (inner != null) {
            return new PublicCertificateImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PublicCertificate> createOrUpdatePublicCertificateSlotWithResponse(
        String resourceGroupName,
        String name,
        String publicCertificateName,
        String slot,
        PublicCertificateInner publicCertificate,
        Context context) {
        Response<PublicCertificateInner> inner =
            this
                .serviceClient()
                .createOrUpdatePublicCertificateSlotWithResponse(
                    resourceGroupName, name, publicCertificateName, slot, publicCertificate, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new PublicCertificateImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deletePublicCertificateSlot(
        String resourceGroupName, String name, String slot, String publicCertificateName) {
        this.serviceClient().deletePublicCertificateSlot(resourceGroupName, name, slot, publicCertificateName);
    }

    public Response<Void> deletePublicCertificateSlotWithResponse(
        String resourceGroupName, String name, String slot, String publicCertificateName, Context context) {
        return this
            .serviceClient()
            .deletePublicCertificateSlotWithResponse(resourceGroupName, name, slot, publicCertificateName, context);
    }

    public InputStream listPublishingProfileXmlWithSecretsSlot(
        String resourceGroupName, String name, String slot, CsmPublishingProfileOptions publishingProfileOptions) {
        return this
            .serviceClient()
            .listPublishingProfileXmlWithSecretsSlot(resourceGroupName, name, slot, publishingProfileOptions);
    }

    public StreamResponse listPublishingProfileXmlWithSecretsSlotWithResponse(
        String resourceGroupName,
        String name,
        String slot,
        CsmPublishingProfileOptions publishingProfileOptions,
        Context context) {
        return this
            .serviceClient()
            .listPublishingProfileXmlWithSecretsSlotWithResponse(
                resourceGroupName, name, slot, publishingProfileOptions, context);
    }

    public void resetSlotConfigurationSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().resetSlotConfigurationSlot(resourceGroupName, name, slot);
    }

    public Response<Void> resetSlotConfigurationSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().resetSlotConfigurationSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public void restartSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().restartSlot(resourceGroupName, name, slot);
    }

    public Response<Void> restartSlotWithResponse(
        String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous, Context context) {
        return this
            .serviceClient()
            .restartSlotWithResponse(resourceGroupName, name, slot, softRestart, synchronous, context);
    }

    public void restoreFromBackupBlobSlot(
        String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        this.serviceClient().restoreFromBackupBlobSlot(resourceGroupName, name, slot, request);
    }

    public void restoreFromBackupBlobSlot(
        String resourceGroupName, String name, String slot, RestoreRequestInner request, Context context) {
        this.serviceClient().restoreFromBackupBlobSlot(resourceGroupName, name, slot, request, context);
    }

    public void restoreFromDeletedAppSlot(
        String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        this.serviceClient().restoreFromDeletedAppSlot(resourceGroupName, name, slot, restoreRequest);
    }

    public void restoreFromDeletedAppSlot(
        String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest, Context context) {
        this.serviceClient().restoreFromDeletedAppSlot(resourceGroupName, name, slot, restoreRequest, context);
    }

    public void restoreSnapshotSlot(
        String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        this.serviceClient().restoreSnapshotSlot(resourceGroupName, name, slot, restoreRequest);
    }

    public void restoreSnapshotSlot(
        String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest, Context context) {
        this.serviceClient().restoreSnapshotSlot(resourceGroupName, name, slot, restoreRequest, context);
    }

    public PagedIterable<SiteExtensionInfo> listSiteExtensionsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<SiteExtensionInfoInner> inner =
            this.serviceClient().listSiteExtensionsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new SiteExtensionInfoImpl(inner1, this.manager()));
    }

    public PagedIterable<SiteExtensionInfo> listSiteExtensionsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<SiteExtensionInfoInner> inner =
            this.serviceClient().listSiteExtensionsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new SiteExtensionInfoImpl(inner1, this.manager()));
    }

    public SiteExtensionInfo getSiteExtensionSlot(
        String resourceGroupName, String name, String siteExtensionId, String slot) {
        SiteExtensionInfoInner inner =
            this.serviceClient().getSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot);
        if (inner != null) {
            return new SiteExtensionInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteExtensionInfo> getSiteExtensionSlotWithResponse(
        String resourceGroupName, String name, String siteExtensionId, String slot, Context context) {
        Response<SiteExtensionInfoInner> inner =
            this
                .serviceClient()
                .getSiteExtensionSlotWithResponse(resourceGroupName, name, siteExtensionId, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteExtensionInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteExtensionInfo installSiteExtensionSlot(
        String resourceGroupName, String name, String siteExtensionId, String slot) {
        SiteExtensionInfoInner inner =
            this.serviceClient().installSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot);
        if (inner != null) {
            return new SiteExtensionInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SiteExtensionInfo installSiteExtensionSlot(
        String resourceGroupName, String name, String siteExtensionId, String slot, Context context) {
        SiteExtensionInfoInner inner =
            this.serviceClient().installSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot, context);
        if (inner != null) {
            return new SiteExtensionInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot) {
        this.serviceClient().deleteSiteExtensionSlot(resourceGroupName, name, siteExtensionId, slot);
    }

    public Response<Void> deleteSiteExtensionSlotWithResponse(
        String resourceGroupName, String name, String siteExtensionId, String slot, Context context) {
        return this
            .serviceClient()
            .deleteSiteExtensionSlotWithResponse(resourceGroupName, name, siteExtensionId, slot, context);
    }

    public PagedIterable<SlotDifference> listSlotDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().listSlotDifferencesSlot(resourceGroupName, name, slot, slotSwapEntity);
        return Utils.mapPage(inner, inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<SlotDifference> listSlotDifferencesSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().listSlotDifferencesSlot(resourceGroupName, name, slot, slotSwapEntity, context);
        return Utils.mapPage(inner, inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public void swapSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        this.serviceClient().swapSlot(resourceGroupName, name, slot, slotSwapEntity);
    }

    public void swapSlot(
        String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity, Context context) {
        this.serviceClient().swapSlot(resourceGroupName, name, slot, slotSwapEntity, context);
    }

    public PagedIterable<Snapshot> listSnapshotsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<SnapshotInner> inner = this.serviceClient().listSnapshotsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<Snapshot> listSnapshotsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<SnapshotInner> inner =
            this.serviceClient().listSnapshotsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<Snapshot> listSnapshotsFromDRSecondarySlot(
        String resourceGroupName, String name, String slot) {
        PagedIterable<SnapshotInner> inner =
            this.serviceClient().listSnapshotsFromDRSecondarySlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<Snapshot> listSnapshotsFromDRSecondarySlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<SnapshotInner> inner =
            this.serviceClient().listSnapshotsFromDRSecondarySlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public SiteSourceControl getSourceControlSlot(String resourceGroupName, String name, String slot) {
        SiteSourceControlInner inner = this.serviceClient().getSourceControlSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> getSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<SiteSourceControlInner> inner =
            this.serviceClient().getSourceControlSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteSourceControl createOrUpdateSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().createOrUpdateSourceControlSlot(resourceGroupName, name, slot, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SiteSourceControl createOrUpdateSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        SiteSourceControlInner inner =
            this
                .serviceClient()
                .createOrUpdateSourceControlSlot(resourceGroupName, name, slot, siteSourceControl, context);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteSourceControlSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().deleteSourceControlSlot(resourceGroupName, name, slot);
    }

    public Response<Void> deleteSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, String additionalFlags, Context context) {
        return this
            .serviceClient()
            .deleteSourceControlSlotWithResponse(resourceGroupName, name, slot, additionalFlags, context);
    }

    public SiteSourceControl updateSourceControlSlot(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().updateSourceControlSlot(resourceGroupName, name, slot, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> updateSourceControlSlotWithResponse(
        String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl, Context context) {
        Response<SiteSourceControlInner> inner =
            this
                .serviceClient()
                .updateSourceControlSlotWithResponse(resourceGroupName, name, slot, siteSourceControl, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void startSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().startSlot(resourceGroupName, name, slot);
    }

    public Response<Void> startSlotWithResponse(String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().startSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public Object startNetworkTraceSlot(
        String resourceGroupName,
        String name,
        String slot,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl) {
        return this
            .serviceClient()
            .startNetworkTraceSlot(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl);
    }

    public Object startNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        return this.serviceClient().startNetworkTraceSlot(resourceGroupName, name, slot);
    }

    public Object startNetworkTraceSlot(
        String resourceGroupName,
        String name,
        String slot,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl,
        Context context) {
        return this
            .serviceClient()
            .startNetworkTraceSlot(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl, context);
    }

    public void stopSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().stopSlot(resourceGroupName, name, slot);
    }

    public Response<Void> stopSlotWithResponse(String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().stopSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public void stopNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().stopNetworkTraceSlot(resourceGroupName, name, slot);
    }

    public Response<Void> stopNetworkTraceSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().stopNetworkTraceSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public void syncRepositorySlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().syncRepositorySlot(resourceGroupName, name, slot);
    }

    public Response<Void> syncRepositorySlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().syncRepositorySlotWithResponse(resourceGroupName, name, slot, context);
    }

    public void syncFunctionTriggersSlot(String resourceGroupName, String name, String slot) {
        this.serviceClient().syncFunctionTriggersSlot(resourceGroupName, name, slot);
    }

    public Response<Void> syncFunctionTriggersSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        return this.serviceClient().syncFunctionTriggersSlotWithResponse(resourceGroupName, name, slot, context);
    }

    public PagedIterable<TriggeredWebJob> listTriggeredWebJobsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<TriggeredWebJobInner> inner =
            this.serviceClient().listTriggeredWebJobsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new TriggeredWebJobImpl(inner1, this.manager()));
    }

    public PagedIterable<TriggeredWebJob> listTriggeredWebJobsSlot(
        String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<TriggeredWebJobInner> inner =
            this.serviceClient().listTriggeredWebJobsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new TriggeredWebJobImpl(inner1, this.manager()));
    }

    public TriggeredWebJob getTriggeredWebJobSlot(
        String resourceGroupName, String name, String webJobName, String slot) {
        TriggeredWebJobInner inner =
            this.serviceClient().getTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot);
        if (inner != null) {
            return new TriggeredWebJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TriggeredWebJob> getTriggeredWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        Response<TriggeredWebJobInner> inner =
            this.serviceClient().getTriggeredWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TriggeredWebJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        this.serviceClient().deleteTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot);
    }

    public Response<Void> deleteTriggeredWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteTriggeredWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
    }

    public PagedIterable<TriggeredJobHistory> listTriggeredWebJobHistorySlot(
        String resourceGroupName, String name, String webJobName, String slot) {
        PagedIterable<TriggeredJobHistoryInner> inner =
            this.serviceClient().listTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, slot);
        return Utils.mapPage(inner, inner1 -> new TriggeredJobHistoryImpl(inner1, this.manager()));
    }

    public PagedIterable<TriggeredJobHistory> listTriggeredWebJobHistorySlot(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        PagedIterable<TriggeredJobHistoryInner> inner =
            this.serviceClient().listTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, slot, context);
        return Utils.mapPage(inner, inner1 -> new TriggeredJobHistoryImpl(inner1, this.manager()));
    }

    public TriggeredJobHistory getTriggeredWebJobHistorySlot(
        String resourceGroupName, String name, String webJobName, String id, String slot) {
        TriggeredJobHistoryInner inner =
            this.serviceClient().getTriggeredWebJobHistorySlot(resourceGroupName, name, webJobName, id, slot);
        if (inner != null) {
            return new TriggeredJobHistoryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TriggeredJobHistory> getTriggeredWebJobHistorySlotWithResponse(
        String resourceGroupName, String name, String webJobName, String id, String slot, Context context) {
        Response<TriggeredJobHistoryInner> inner =
            this
                .serviceClient()
                .getTriggeredWebJobHistorySlotWithResponse(resourceGroupName, name, webJobName, id, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TriggeredJobHistoryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void runTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        this.serviceClient().runTriggeredWebJobSlot(resourceGroupName, name, webJobName, slot);
    }

    public Response<Void> runTriggeredWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        return this
            .serviceClient()
            .runTriggeredWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
    }

    public PagedIterable<CsmUsageQuota> listUsagesSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<CsmUsageQuotaInner> inner = this.serviceClient().listUsagesSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmUsageQuota> listUsagesSlot(
        String resourceGroupName, String name, String slot, String filter, Context context) {
        PagedIterable<CsmUsageQuotaInner> inner =
            this.serviceClient().listUsagesSlot(resourceGroupName, name, slot, filter, context);
        return Utils.mapPage(inner, inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public List<VnetInfo> listVnetConnectionsSlot(String resourceGroupName, String name, String slot) {
        List<VnetInfoInner> inner = this.serviceClient().listVnetConnectionsSlot(resourceGroupName, name, slot);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new VnetInfoImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<VnetInfo>> listVnetConnectionsSlotWithResponse(
        String resourceGroupName, String name, String slot, Context context) {
        Response<List<VnetInfoInner>> inner =
            this.serviceClient().listVnetConnectionsSlotWithResponse(resourceGroupName, name, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new VnetInfoImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public VnetInfo getVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        VnetInfoInner inner = this.serviceClient().getVnetConnectionSlot(resourceGroupName, name, vnetName, slot);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> getVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        Response<VnetInfoInner> inner =
            this.serviceClient().getVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        this.serviceClient().deleteVnetConnectionSlot(resourceGroupName, name, vnetName, slot);
    }

    public Response<Void> deleteVnetConnectionSlotWithResponse(
        String resourceGroupName, String name, String vnetName, String slot, Context context) {
        return this
            .serviceClient()
            .deleteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
    }

    public VnetGateway getVnetConnectionGatewaySlot(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        VnetGatewayInner inner =
            this.serviceClient().getVnetConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> getVnetConnectionGatewaySlotWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, String slot, Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .getVnetConnectionGatewaySlotWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<WebJob> listWebJobsSlot(String resourceGroupName, String name, String slot) {
        PagedIterable<WebJobInner> inner = this.serviceClient().listWebJobsSlot(resourceGroupName, name, slot);
        return Utils.mapPage(inner, inner1 -> new WebJobImpl(inner1, this.manager()));
    }

    public PagedIterable<WebJob> listWebJobsSlot(String resourceGroupName, String name, String slot, Context context) {
        PagedIterable<WebJobInner> inner = this.serviceClient().listWebJobsSlot(resourceGroupName, name, slot, context);
        return Utils.mapPage(inner, inner1 -> new WebJobImpl(inner1, this.manager()));
    }

    public WebJob getWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        WebJobInner inner = this.serviceClient().getWebJobSlot(resourceGroupName, name, webJobName, slot);
        if (inner != null) {
            return new WebJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WebJob> getWebJobSlotWithResponse(
        String resourceGroupName, String name, String webJobName, String slot, Context context) {
        Response<WebJobInner> inner =
            this.serviceClient().getWebJobSlotWithResponse(resourceGroupName, name, webJobName, slot, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WebJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<SlotDifference> listSlotDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().listSlotDifferencesFromProduction(resourceGroupName, name, slotSwapEntity);
        return Utils.mapPage(inner, inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public PagedIterable<SlotDifference> listSlotDifferencesFromProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        PagedIterable<SlotDifferenceInner> inner =
            this.serviceClient().listSlotDifferencesFromProduction(resourceGroupName, name, slotSwapEntity, context);
        return Utils.mapPage(inner, inner1 -> new SlotDifferenceImpl(inner1, this.manager()));
    }

    public void swapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        this.serviceClient().swapSlotWithProduction(resourceGroupName, name, slotSwapEntity);
    }

    public void swapSlotWithProduction(
        String resourceGroupName, String name, CsmSlotEntity slotSwapEntity, Context context) {
        this.serviceClient().swapSlotWithProduction(resourceGroupName, name, slotSwapEntity, context);
    }

    public PagedIterable<Snapshot> listSnapshots(String resourceGroupName, String name) {
        PagedIterable<SnapshotInner> inner = this.serviceClient().listSnapshots(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<Snapshot> listSnapshots(String resourceGroupName, String name, Context context) {
        PagedIterable<SnapshotInner> inner = this.serviceClient().listSnapshots(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<Snapshot> listSnapshotsFromDRSecondary(String resourceGroupName, String name) {
        PagedIterable<SnapshotInner> inner = this.serviceClient().listSnapshotsFromDRSecondary(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public PagedIterable<Snapshot> listSnapshotsFromDRSecondary(
        String resourceGroupName, String name, Context context) {
        PagedIterable<SnapshotInner> inner =
            this.serviceClient().listSnapshotsFromDRSecondary(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new SnapshotImpl(inner1, this.manager()));
    }

    public SiteSourceControl getSourceControl(String resourceGroupName, String name) {
        SiteSourceControlInner inner = this.serviceClient().getSourceControl(resourceGroupName, name);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> getSourceControlWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<SiteSourceControlInner> inner =
            this.serviceClient().getSourceControlWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SiteSourceControl createOrUpdateSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().createOrUpdateSourceControl(resourceGroupName, name, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SiteSourceControl createOrUpdateSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        SiteSourceControlInner inner =
            this.serviceClient().createOrUpdateSourceControl(resourceGroupName, name, siteSourceControl, context);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteSourceControl(String resourceGroupName, String name) {
        this.serviceClient().deleteSourceControl(resourceGroupName, name);
    }

    public Response<Void> deleteSourceControlWithResponse(
        String resourceGroupName, String name, String additionalFlags, Context context) {
        return this.serviceClient().deleteSourceControlWithResponse(resourceGroupName, name, additionalFlags, context);
    }

    public SiteSourceControl updateSourceControl(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        SiteSourceControlInner inner =
            this.serviceClient().updateSourceControl(resourceGroupName, name, siteSourceControl);
        if (inner != null) {
            return new SiteSourceControlImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<SiteSourceControl> updateSourceControlWithResponse(
        String resourceGroupName, String name, SiteSourceControlInner siteSourceControl, Context context) {
        Response<SiteSourceControlInner> inner =
            this.serviceClient().updateSourceControlWithResponse(resourceGroupName, name, siteSourceControl, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new SiteSourceControlImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void start(String resourceGroupName, String name) {
        this.serviceClient().start(resourceGroupName, name);
    }

    public Response<Void> startWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().startWithResponse(resourceGroupName, name, context);
    }

    public Object startNetworkTrace(
        String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return this
            .serviceClient()
            .startNetworkTrace(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl);
    }

    public Object startNetworkTrace(String resourceGroupName, String name) {
        return this.serviceClient().startNetworkTrace(resourceGroupName, name);
    }

    public Object startNetworkTrace(
        String resourceGroupName,
        String name,
        Integer durationInSeconds,
        Integer maxFrameLength,
        String sasUrl,
        Context context) {
        return this
            .serviceClient()
            .startNetworkTrace(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, context);
    }

    public void stop(String resourceGroupName, String name) {
        this.serviceClient().stop(resourceGroupName, name);
    }

    public Response<Void> stopWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().stopWithResponse(resourceGroupName, name, context);
    }

    public void stopNetworkTrace(String resourceGroupName, String name) {
        this.serviceClient().stopNetworkTrace(resourceGroupName, name);
    }

    public Response<Void> stopNetworkTraceWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().stopNetworkTraceWithResponse(resourceGroupName, name, context);
    }

    public void syncRepository(String resourceGroupName, String name) {
        this.serviceClient().syncRepository(resourceGroupName, name);
    }

    public Response<Void> syncRepositoryWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().syncRepositoryWithResponse(resourceGroupName, name, context);
    }

    public void syncFunctionTriggers(String resourceGroupName, String name) {
        this.serviceClient().syncFunctionTriggers(resourceGroupName, name);
    }

    public Response<Void> syncFunctionTriggersWithResponse(String resourceGroupName, String name, Context context) {
        return this.serviceClient().syncFunctionTriggersWithResponse(resourceGroupName, name, context);
    }

    public PagedIterable<TriggeredWebJob> listTriggeredWebJobs(String resourceGroupName, String name) {
        PagedIterable<TriggeredWebJobInner> inner = this.serviceClient().listTriggeredWebJobs(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new TriggeredWebJobImpl(inner1, this.manager()));
    }

    public PagedIterable<TriggeredWebJob> listTriggeredWebJobs(String resourceGroupName, String name, Context context) {
        PagedIterable<TriggeredWebJobInner> inner =
            this.serviceClient().listTriggeredWebJobs(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new TriggeredWebJobImpl(inner1, this.manager()));
    }

    public TriggeredWebJob getTriggeredWebJob(String resourceGroupName, String name, String webJobName) {
        TriggeredWebJobInner inner = this.serviceClient().getTriggeredWebJob(resourceGroupName, name, webJobName);
        if (inner != null) {
            return new TriggeredWebJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TriggeredWebJob> getTriggeredWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        Response<TriggeredWebJobInner> inner =
            this.serviceClient().getTriggeredWebJobWithResponse(resourceGroupName, name, webJobName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TriggeredWebJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteTriggeredWebJob(String resourceGroupName, String name, String webJobName) {
        this.serviceClient().deleteTriggeredWebJob(resourceGroupName, name, webJobName);
    }

    public Response<Void> deleteTriggeredWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        return this.serviceClient().deleteTriggeredWebJobWithResponse(resourceGroupName, name, webJobName, context);
    }

    public PagedIterable<TriggeredJobHistory> listTriggeredWebJobHistory(
        String resourceGroupName, String name, String webJobName) {
        PagedIterable<TriggeredJobHistoryInner> inner =
            this.serviceClient().listTriggeredWebJobHistory(resourceGroupName, name, webJobName);
        return Utils.mapPage(inner, inner1 -> new TriggeredJobHistoryImpl(inner1, this.manager()));
    }

    public PagedIterable<TriggeredJobHistory> listTriggeredWebJobHistory(
        String resourceGroupName, String name, String webJobName, Context context) {
        PagedIterable<TriggeredJobHistoryInner> inner =
            this.serviceClient().listTriggeredWebJobHistory(resourceGroupName, name, webJobName, context);
        return Utils.mapPage(inner, inner1 -> new TriggeredJobHistoryImpl(inner1, this.manager()));
    }

    public TriggeredJobHistory getTriggeredWebJobHistory(
        String resourceGroupName, String name, String webJobName, String id) {
        TriggeredJobHistoryInner inner =
            this.serviceClient().getTriggeredWebJobHistory(resourceGroupName, name, webJobName, id);
        if (inner != null) {
            return new TriggeredJobHistoryImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<TriggeredJobHistory> getTriggeredWebJobHistoryWithResponse(
        String resourceGroupName, String name, String webJobName, String id, Context context) {
        Response<TriggeredJobHistoryInner> inner =
            this
                .serviceClient()
                .getTriggeredWebJobHistoryWithResponse(resourceGroupName, name, webJobName, id, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new TriggeredJobHistoryImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void runTriggeredWebJob(String resourceGroupName, String name, String webJobName) {
        this.serviceClient().runTriggeredWebJob(resourceGroupName, name, webJobName);
    }

    public Response<Void> runTriggeredWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        return this.serviceClient().runTriggeredWebJobWithResponse(resourceGroupName, name, webJobName, context);
    }

    public PagedIterable<CsmUsageQuota> listUsages(String resourceGroupName, String name) {
        PagedIterable<CsmUsageQuotaInner> inner = this.serviceClient().listUsages(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public PagedIterable<CsmUsageQuota> listUsages(
        String resourceGroupName, String name, String filter, Context context) {
        PagedIterable<CsmUsageQuotaInner> inner =
            this.serviceClient().listUsages(resourceGroupName, name, filter, context);
        return Utils.mapPage(inner, inner1 -> new CsmUsageQuotaImpl(inner1, this.manager()));
    }

    public List<VnetInfo> listVnetConnections(String resourceGroupName, String name) {
        List<VnetInfoInner> inner = this.serviceClient().listVnetConnections(resourceGroupName, name);
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new VnetInfoImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<VnetInfo>> listVnetConnectionsWithResponse(
        String resourceGroupName, String name, Context context) {
        Response<List<VnetInfoInner>> inner =
            this.serviceClient().listVnetConnectionsWithResponse(resourceGroupName, name, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                inner
                    .getValue()
                    .stream()
                    .map(inner1 -> new VnetInfoImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public VnetInfo getVnetConnection(String resourceGroupName, String name, String vnetName) {
        VnetInfoInner inner = this.serviceClient().getVnetConnection(resourceGroupName, name, vnetName);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> getVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        Response<VnetInfoInner> inner =
            this.serviceClient().getVnetConnectionWithResponse(resourceGroupName, name, vnetName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetInfo createOrUpdateVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        VnetInfoInner inner =
            this.serviceClient().createOrUpdateVnetConnection(resourceGroupName, name, vnetName, connectionEnvelope);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> createOrUpdateVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        Response<VnetInfoInner> inner =
            this
                .serviceClient()
                .createOrUpdateVnetConnectionWithResponse(
                    resourceGroupName, name, vnetName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteVnetConnection(String resourceGroupName, String name, String vnetName) {
        this.serviceClient().deleteVnetConnection(resourceGroupName, name, vnetName);
    }

    public Response<Void> deleteVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, Context context) {
        return this.serviceClient().deleteVnetConnectionWithResponse(resourceGroupName, name, vnetName, context);
    }

    public VnetInfo updateVnetConnection(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        VnetInfoInner inner =
            this.serviceClient().updateVnetConnection(resourceGroupName, name, vnetName, connectionEnvelope);
        if (inner != null) {
            return new VnetInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetInfo> updateVnetConnectionWithResponse(
        String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope, Context context) {
        Response<VnetInfoInner> inner =
            this
                .serviceClient()
                .updateVnetConnectionWithResponse(resourceGroupName, name, vnetName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetGateway getVnetConnectionGateway(
        String resourceGroupName, String name, String vnetName, String gatewayName) {
        VnetGatewayInner inner =
            this.serviceClient().getVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> getVnetConnectionGatewayWithResponse(
        String resourceGroupName, String name, String vnetName, String gatewayName, Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .getVnetConnectionGatewayWithResponse(resourceGroupName, name, vnetName, gatewayName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetGateway createOrUpdateVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        VnetGatewayInner inner =
            this
                .serviceClient()
                .createOrUpdateVnetConnectionGateway(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> createOrUpdateVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .createOrUpdateVnetConnectionGatewayWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VnetGateway updateVnetConnectionGateway(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope) {
        VnetGatewayInner inner =
            this
                .serviceClient()
                .updateVnetConnectionGateway(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope);
        if (inner != null) {
            return new VnetGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VnetGateway> updateVnetConnectionGatewayWithResponse(
        String resourceGroupName,
        String name,
        String vnetName,
        String gatewayName,
        VnetGatewayInner connectionEnvelope,
        Context context) {
        Response<VnetGatewayInner> inner =
            this
                .serviceClient()
                .updateVnetConnectionGatewayWithResponse(
                    resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VnetGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<WebJob> listWebJobs(String resourceGroupName, String name) {
        PagedIterable<WebJobInner> inner = this.serviceClient().listWebJobs(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new WebJobImpl(inner1, this.manager()));
    }

    public PagedIterable<WebJob> listWebJobs(String resourceGroupName, String name, Context context) {
        PagedIterable<WebJobInner> inner = this.serviceClient().listWebJobs(resourceGroupName, name, context);
        return Utils.mapPage(inner, inner1 -> new WebJobImpl(inner1, this.manager()));
    }

    public WebJob getWebJob(String resourceGroupName, String name, String webJobName) {
        WebJobInner inner = this.serviceClient().getWebJob(resourceGroupName, name, webJobName);
        if (inner != null) {
            return new WebJobImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<WebJob> getWebJobWithResponse(
        String resourceGroupName, String name, String webJobName, Context context) {
        Response<WebJobInner> inner =
            this.serviceClient().getWebJobWithResponse(resourceGroupName, name, webJobName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WebJobImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, Context.NONE).getValue();
    }

    public Response<Site> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, name, context);
    }

    public Deployment getDeploymentById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getDeploymentWithResponse(resourceGroupName, name, varId, Context.NONE).getValue();
    }

    public Response<Deployment> getDeploymentByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.getDeploymentWithResponse(resourceGroupName, name, varId, context);
    }

    public Identifier getDomainOwnershipIdentifierById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String domainOwnershipIdentifierName = Utils.getValueFromIdByName(id, "domainOwnershipIdentifiers");
        if (domainOwnershipIdentifierName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'domainOwnershipIdentifiers'.",
                                id)));
        }
        return this
            .getDomainOwnershipIdentifierWithResponse(
                resourceGroupName, name, domainOwnershipIdentifierName, Context.NONE)
            .getValue();
    }

    public Response<Identifier> getDomainOwnershipIdentifierByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String domainOwnershipIdentifierName = Utils.getValueFromIdByName(id, "domainOwnershipIdentifiers");
        if (domainOwnershipIdentifierName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'domainOwnershipIdentifiers'.",
                                id)));
        }
        return this
            .getDomainOwnershipIdentifierWithResponse(resourceGroupName, name, domainOwnershipIdentifierName, context);
    }

    public FunctionEnvelope getFunctionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String functionName = Utils.getValueFromIdByName(id, "functions");
        if (functionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'functions'.", id)));
        }
        return this.getFunctionWithResponse(resourceGroupName, name, functionName, Context.NONE).getValue();
    }

    public Response<FunctionEnvelope> getFunctionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String functionName = Utils.getValueFromIdByName(id, "functions");
        if (functionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'functions'.", id)));
        }
        return this.getFunctionWithResponse(resourceGroupName, name, functionName, context);
    }

    public HostnameBinding getHostnameBindingById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.getHostnameBindingWithResponse(resourceGroupName, name, hostname, Context.NONE).getValue();
    }

    public Response<HostnameBinding> getHostnameBindingByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.getHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
    }

    public HybridConnection getHybridConnectionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "hybridConnectionNamespaces");
        if (namespaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridConnectionNamespaces'.",
                                id)));
        }
        String relayName = Utils.getValueFromIdByName(id, "relays");
        if (relayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'relays'.", id)));
        }
        return this
            .getHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, Context.NONE)
            .getValue();
    }

    public Response<HybridConnection> getHybridConnectionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "hybridConnectionNamespaces");
        if (namespaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridConnectionNamespaces'.",
                                id)));
        }
        String relayName = Utils.getValueFromIdByName(id, "relays");
        if (relayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'relays'.", id)));
        }
        return this.getHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, context);
    }

    public RelayServiceConnectionEntity getRelayServiceConnectionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this.getRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, Context.NONE).getValue();
    }

    public Response<RelayServiceConnectionEntity> getRelayServiceConnectionByIdWithResponse(
        String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this.getRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
    }

    public PremierAddOn getPremierAddOnById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String premierAddOnName = Utils.getValueFromIdByName(id, "premieraddons");
        if (premierAddOnName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'premieraddons'.", id)));
        }
        return this.getPremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, Context.NONE).getValue();
    }

    public Response<PremierAddOn> getPremierAddOnByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String premierAddOnName = Utils.getValueFromIdByName(id, "premieraddons");
        if (premierAddOnName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'premieraddons'.", id)));
        }
        return this.getPremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, context);
    }

    public PublicCertificate getPublicCertificateById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String publicCertificateName = Utils.getValueFromIdByName(id, "publicCertificates");
        if (publicCertificateName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'publicCertificates'.", id)));
        }
        return this
            .getPublicCertificateWithResponse(resourceGroupName, name, publicCertificateName, Context.NONE)
            .getValue();
    }

    public Response<PublicCertificate> getPublicCertificateByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String publicCertificateName = Utils.getValueFromIdByName(id, "publicCertificates");
        if (publicCertificateName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'publicCertificates'.", id)));
        }
        return this.getPublicCertificateWithResponse(resourceGroupName, name, publicCertificateName, context);
    }

    public VnetInfo getVnetConnectionSlotById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this.getVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, Context.NONE).getValue();
    }

    public Response<VnetInfo> getVnetConnectionSlotByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this.getVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
    }

    public VnetGateway getVnetConnectionGatewaySlotById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String gatewayName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this
            .getVnetConnectionGatewaySlotWithResponse(
                resourceGroupName, name, vnetName, gatewayName, slot, Context.NONE)
            .getValue();
    }

    public Response<VnetGateway> getVnetConnectionGatewaySlotByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String gatewayName = Utils.getValueFromIdByName(id, "gateways");
        if (gatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'gateways'.", id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this
            .getVnetConnectionGatewaySlotWithResponse(resourceGroupName, name, vnetName, gatewayName, slot, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        Boolean localDeleteMetrics = null;
        Boolean localDeleteEmptyServerFarm = null;
        this
            .deleteWithResponse(resourceGroupName, name, localDeleteMetrics, localDeleteEmptyServerFarm, Context.NONE)
            .getValue();
    }

    public Response<Void> deleteByIdWithResponse(
        String id, Boolean deleteMetrics, Boolean deleteEmptyServerFarm, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, context);
    }

    public void deleteDeploymentById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        this.deleteDeploymentWithResponse(resourceGroupName, name, varId, Context.NONE).getValue();
    }

    public Response<Void> deleteDeploymentByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String varId = Utils.getValueFromIdByName(id, "deployments");
        if (varId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'deployments'.", id)));
        }
        return this.deleteDeploymentWithResponse(resourceGroupName, name, varId, context);
    }

    public void deleteDomainOwnershipIdentifierById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String domainOwnershipIdentifierName = Utils.getValueFromIdByName(id, "domainOwnershipIdentifiers");
        if (domainOwnershipIdentifierName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'domainOwnershipIdentifiers'.",
                                id)));
        }
        this
            .deleteDomainOwnershipIdentifierWithResponse(
                resourceGroupName, name, domainOwnershipIdentifierName, Context.NONE)
            .getValue();
    }

    public Response<Void> deleteDomainOwnershipIdentifierByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String domainOwnershipIdentifierName = Utils.getValueFromIdByName(id, "domainOwnershipIdentifiers");
        if (domainOwnershipIdentifierName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'domainOwnershipIdentifiers'.",
                                id)));
        }
        return this
            .deleteDomainOwnershipIdentifierWithResponse(
                resourceGroupName, name, domainOwnershipIdentifierName, context);
    }

    public void deleteFunctionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String functionName = Utils.getValueFromIdByName(id, "functions");
        if (functionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'functions'.", id)));
        }
        this.deleteFunctionWithResponse(resourceGroupName, name, functionName, Context.NONE).getValue();
    }

    public Response<Void> deleteFunctionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String functionName = Utils.getValueFromIdByName(id, "functions");
        if (functionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'functions'.", id)));
        }
        return this.deleteFunctionWithResponse(resourceGroupName, name, functionName, context);
    }

    public void deleteHostnameBindingById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        this.deleteHostnameBindingWithResponse(resourceGroupName, name, hostname, Context.NONE).getValue();
    }

    public Response<Void> deleteHostnameBindingByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String hostname = Utils.getValueFromIdByName(id, "hostNameBindings");
        if (hostname == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hostNameBindings'.", id)));
        }
        return this.deleteHostnameBindingWithResponse(resourceGroupName, name, hostname, context);
    }

    public void deleteHybridConnectionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "hybridConnectionNamespaces");
        if (namespaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridConnectionNamespaces'.",
                                id)));
        }
        String relayName = Utils.getValueFromIdByName(id, "relays");
        if (relayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'relays'.", id)));
        }
        this
            .deleteHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, Context.NONE)
            .getValue();
    }

    public Response<Void> deleteHybridConnectionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String namespaceName = Utils.getValueFromIdByName(id, "hybridConnectionNamespaces");
        if (namespaceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridConnectionNamespaces'.",
                                id)));
        }
        String relayName = Utils.getValueFromIdByName(id, "relays");
        if (relayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'relays'.", id)));
        }
        return this.deleteHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, context);
    }

    public void deleteRelayServiceConnectionById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        this.deleteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, Context.NONE).getValue();
    }

    public Response<Void> deleteRelayServiceConnectionByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String entityName = Utils.getValueFromIdByName(id, "hybridconnection");
        if (entityName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridconnection'.", id)));
        }
        return this.deleteRelayServiceConnectionWithResponse(resourceGroupName, name, entityName, context);
    }

    public void deletePremierAddOnById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String premierAddOnName = Utils.getValueFromIdByName(id, "premieraddons");
        if (premierAddOnName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'premieraddons'.", id)));
        }
        this.deletePremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, Context.NONE).getValue();
    }

    public Response<Void> deletePremierAddOnByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String premierAddOnName = Utils.getValueFromIdByName(id, "premieraddons");
        if (premierAddOnName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'premieraddons'.", id)));
        }
        return this.deletePremierAddOnWithResponse(resourceGroupName, name, premierAddOnName, context);
    }

    public void deletePublicCertificateById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String publicCertificateName = Utils.getValueFromIdByName(id, "publicCertificates");
        if (publicCertificateName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'publicCertificates'.", id)));
        }
        this
            .deletePublicCertificateWithResponse(resourceGroupName, name, publicCertificateName, Context.NONE)
            .getValue();
    }

    public Response<Void> deletePublicCertificateByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String publicCertificateName = Utils.getValueFromIdByName(id, "publicCertificates");
        if (publicCertificateName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'publicCertificates'.", id)));
        }
        return this.deletePublicCertificateWithResponse(resourceGroupName, name, publicCertificateName, context);
    }

    public void deleteVnetConnectionSlotById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        this.deleteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, Context.NONE).getValue();
    }

    public Response<Void> deleteVnetConnectionSlotByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "sites");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'sites'.", id)));
        }
        String vnetName = Utils.getValueFromIdByName(id, "virtualNetworkConnections");
        if (vnetName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkConnections'.",
                                id)));
        }
        String slot = Utils.getValueFromIdByName(id, "slots");
        if (slot == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'slots'.", id)));
        }
        return this.deleteVnetConnectionSlotWithResponse(resourceGroupName, name, vnetName, slot, context);
    }

    private WebAppsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }

    public SiteImpl define(String name) {
        return new SiteImpl(name, this.manager());
    }

    public DeploymentImpl defineDeployment(String name) {
        return new DeploymentImpl(name, this.manager());
    }

    public IdentifierImpl defineDomainOwnershipIdentifier(String name) {
        return new IdentifierImpl(name, this.manager());
    }

    public FunctionEnvelopeImpl defineFunction(String name) {
        return new FunctionEnvelopeImpl(name, this.manager());
    }

    public HostnameBindingImpl defineHostnameBinding(String name) {
        return new HostnameBindingImpl(name, this.manager());
    }

    public HybridConnectionImpl defineHybridConnection(String name) {
        return new HybridConnectionImpl(name, this.manager());
    }

    public RelayServiceConnectionEntityImpl defineRelayServiceConnection(String name) {
        return new RelayServiceConnectionEntityImpl(name, this.manager());
    }

    public PremierAddOnImpl definePremierAddOn(String name) {
        return new PremierAddOnImpl(name, this.manager());
    }

    public PublicCertificateImpl definePublicCertificate(String name) {
        return new PublicCertificateImpl(name, this.manager());
    }

    public VnetInfoImpl defineVnetConnectionSlot(String name) {
        return new VnetInfoImpl(name, this.manager());
    }

    public VnetGatewayImpl defineVnetConnectionGatewaySlot(String name) {
        return new VnetGatewayImpl(name, this.manager());
    }
}
