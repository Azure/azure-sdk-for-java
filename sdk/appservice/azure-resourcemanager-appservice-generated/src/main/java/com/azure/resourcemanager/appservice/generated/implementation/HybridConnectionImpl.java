// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.HybridConnectionInner;
import com.azure.resourcemanager.appservice.generated.models.HybridConnection;

public final class HybridConnectionImpl
    implements HybridConnection, HybridConnection.Definition, HybridConnection.Update {
    private HybridConnectionInner innerObject;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String serviceBusNamespace() {
        return this.innerModel().serviceBusNamespace();
    }

    public String relayName() {
        return this.innerModel().relayName();
    }

    public String relayArmUri() {
        return this.innerModel().relayArmUri();
    }

    public String hostname() {
        return this.innerModel().hostname();
    }

    public Integer port() {
        return this.innerModel().port();
    }

    public String sendKeyName() {
        return this.innerModel().sendKeyName();
    }

    public String sendKeyValue() {
        return this.innerModel().sendKeyValue();
    }

    public String serviceBusSuffix() {
        return this.innerModel().serviceBusSuffix();
    }

    public HybridConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private String namespaceName;

    private String relayName;

    public HybridConnectionImpl withExistingHybridConnectionNamespace(
        String resourceGroupName, String name, String namespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.name = name;
        this.namespaceName = namespaceName;
        return this;
    }

    public HybridConnection create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWebApps()
                .createOrUpdateHybridConnectionWithResponse(
                    resourceGroupName, name, namespaceName, relayName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public HybridConnection create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWebApps()
                .createOrUpdateHybridConnectionWithResponse(
                    resourceGroupName, name, namespaceName, relayName, this.innerModel(), context)
                .getValue();
        return this;
    }

    HybridConnectionImpl(String name, com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = new HybridConnectionInner();
        this.serviceManager = serviceManager;
        this.relayName = name;
    }

    public HybridConnectionImpl update() {
        return this;
    }

    public HybridConnection apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWebApps()
                .updateHybridConnectionWithResponse(
                    resourceGroupName, name, namespaceName, relayName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public HybridConnection apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWebApps()
                .updateHybridConnectionWithResponse(
                    resourceGroupName, name, namespaceName, relayName, this.innerModel(), context)
                .getValue();
        return this;
    }

    HybridConnectionImpl(
        HybridConnectionInner innerObject,
        com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "sites");
        this.namespaceName = Utils.getValueFromIdByName(innerObject.id(), "hybridConnectionNamespaces");
        this.relayName = Utils.getValueFromIdByName(innerObject.id(), "relays");
    }

    public HybridConnection refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWebApps()
                .getHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, Context.NONE)
                .getValue();
        return this;
    }

    public HybridConnection refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getWebApps()
                .getHybridConnectionWithResponse(resourceGroupName, name, namespaceName, relayName, context)
                .getValue();
        return this;
    }

    public HybridConnectionImpl withKind(String kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public HybridConnectionImpl withServiceBusNamespace(String serviceBusNamespace) {
        this.innerModel().withServiceBusNamespace(serviceBusNamespace);
        return this;
    }

    public HybridConnectionImpl withRelayName(String relayName) {
        this.innerModel().withRelayName(relayName);
        return this;
    }

    public HybridConnectionImpl withRelayArmUri(String relayArmUri) {
        this.innerModel().withRelayArmUri(relayArmUri);
        return this;
    }

    public HybridConnectionImpl withHostname(String hostname) {
        this.innerModel().withHostname(hostname);
        return this;
    }

    public HybridConnectionImpl withPort(Integer port) {
        this.innerModel().withPort(port);
        return this;
    }

    public HybridConnectionImpl withSendKeyName(String sendKeyName) {
        this.innerModel().withSendKeyName(sendKeyName);
        return this;
    }

    public HybridConnectionImpl withSendKeyValue(String sendKeyValue) {
        this.innerModel().withSendKeyValue(sendKeyValue);
        return this;
    }

    public HybridConnectionImpl withServiceBusSuffix(String serviceBusSuffix) {
        this.innerModel().withServiceBusSuffix(serviceBusSuffix);
        return this;
    }
}
