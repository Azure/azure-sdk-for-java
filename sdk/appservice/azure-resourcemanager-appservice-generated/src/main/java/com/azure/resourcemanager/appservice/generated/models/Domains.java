// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.NameIdentifierInner;

/**
 * Resource collection API of Domains.
 */
public interface Domains {
    /**
     * Check if a domain is available for registration.
     * 
     * Description for Check if a domain is available for registration.
     * 
     * @param identifier Name of the domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain availability check result along with {@link Response}.
     */
    Response<DomainAvailabilityCheckResult> checkAvailabilityWithResponse(NameIdentifierInner identifier,
        Context context);

    /**
     * Check if a domain is available for registration.
     * 
     * Description for Check if a domain is available for registration.
     * 
     * @param identifier Name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain availability check result.
     */
    DomainAvailabilityCheckResult checkAvailability(NameIdentifierInner identifier);

    /**
     * Get all domains in a subscription.
     * 
     * Description for Get all domains in a subscription.
     * 
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domains as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Domain> list();

    /**
     * Get all domains in a subscription.
     * 
     * Description for Get all domains in a subscription.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domains as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Domain> list(Context context);

    /**
     * Generate a single sign-on request for the domain management portal.
     * 
     * Description for Generate a single sign-on request for the domain management portal.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return single sign-on request information for domain management along with {@link Response}.
     */
    Response<DomainControlCenterSsoRequest> getControlCenterSsoRequestWithResponse(Context context);

    /**
     * Generate a single sign-on request for the domain management portal.
     * 
     * Description for Generate a single sign-on request for the domain management portal.
     * 
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return single sign-on request information for domain management.
     */
    DomainControlCenterSsoRequest getControlCenterSsoRequest();

    /**
     * Get domain name recommendations based on keywords.
     * 
     * Description for Get domain name recommendations based on keywords.
     * 
     * @param parameters Search parameters for domain name recommendations.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domain name identifiers as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NameIdentifier> listRecommendations(DomainRecommendationSearchParameters parameters);

    /**
     * Get domain name recommendations based on keywords.
     * 
     * Description for Get domain name recommendations based on keywords.
     * 
     * @param parameters Search parameters for domain name recommendations.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domain name identifiers as paginated response with {@link PagedIterable}.
     */
    PagedIterable<NameIdentifier> listRecommendations(DomainRecommendationSearchParameters parameters, Context context);

    /**
     * Get all domains in a resource group.
     * 
     * Description for Get all domains in a resource group.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domains as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Domain> listByResourceGroup(String resourceGroupName);

    /**
     * Get all domains in a resource group.
     * 
     * Description for Get all domains in a resource group.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domains as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Domain> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Get a domain.
     * 
     * Description for Get a domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a domain along with {@link Response}.
     */
    Response<Domain> getByResourceGroupWithResponse(String resourceGroupName, String domainName, Context context);

    /**
     * Get a domain.
     * 
     * Description for Get a domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a domain.
     */
    Domain getByResourceGroup(String resourceGroupName, String domainName);

    /**
     * Delete a domain.
     * 
     * Description for Delete a domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @param forceHardDeleteDomain Specify &lt;code&gt;true&lt;/code&gt; to delete the domain immediately. The default
     * is &lt;code&gt;false&lt;/code&gt; which deletes the domain after 24 hours.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String resourceGroupName, String domainName, Boolean forceHardDeleteDomain,
        Context context);

    /**
     * Delete a domain.
     * 
     * Description for Delete a domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String domainName);

    /**
     * Lists domain ownership identifiers.
     * 
     * Description for Lists domain ownership identifiers.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domain ownership identifiers as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DomainOwnershipIdentifier> listOwnershipIdentifiers(String resourceGroupName, String domainName);

    /**
     * Lists domain ownership identifiers.
     * 
     * Description for Lists domain ownership identifiers.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return collection of domain ownership identifiers as paginated response with {@link PagedIterable}.
     */
    PagedIterable<DomainOwnershipIdentifier> listOwnershipIdentifiers(String resourceGroupName, String domainName,
        Context context);

    /**
     * Get ownership identifier for domain
     * 
     * Description for Get ownership identifier for domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @param name Name of identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain ownership Identifier along with {@link Response}.
     */
    Response<DomainOwnershipIdentifier> getOwnershipIdentifierWithResponse(String resourceGroupName, String domainName,
        String name, Context context);

    /**
     * Get ownership identifier for domain
     * 
     * Description for Get ownership identifier for domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @param name Name of identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain ownership Identifier.
     */
    DomainOwnershipIdentifier getOwnershipIdentifier(String resourceGroupName, String domainName, String name);

    /**
     * Delete ownership identifier for domain
     * 
     * Description for Delete ownership identifier for domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @param name Name of identifier.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteOwnershipIdentifierWithResponse(String resourceGroupName, String domainName, String name,
        Context context);

    /**
     * Delete ownership identifier for domain
     * 
     * Description for Delete ownership identifier for domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @param name Name of identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteOwnershipIdentifier(String resourceGroupName, String domainName, String name);

    /**
     * Renew a domain.
     * 
     * Description for Renew a domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> renewWithResponse(String resourceGroupName, String domainName, Context context);

    /**
     * Renew a domain.
     * 
     * Description for Renew a domain.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void renew(String resourceGroupName, String domainName);

    /**
     * Transfer out domain to another registrar.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server on
     * status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a domain along with {@link Response}.
     */
    Response<Domain> transferOutWithResponse(String resourceGroupName, String domainName, Context context);

    /**
     * Transfer out domain to another registrar.
     * 
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param domainName Name of domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server on
     * status code 400.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a domain.
     */
    Domain transferOut(String resourceGroupName, String domainName);

    /**
     * Get a domain.
     * 
     * Description for Get a domain.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a domain along with {@link Response}.
     */
    Domain getById(String id);

    /**
     * Get a domain.
     * 
     * Description for Get a domain.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information about a domain along with {@link Response}.
     */
    Response<Domain> getByIdWithResponse(String id, Context context);

    /**
     * Get ownership identifier for domain
     * 
     * Description for Get ownership identifier for domain.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain ownership Identifier along with {@link Response}.
     */
    DomainOwnershipIdentifier getOwnershipIdentifierById(String id);

    /**
     * Get ownership identifier for domain
     * 
     * Description for Get ownership identifier for domain.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return domain ownership Identifier along with {@link Response}.
     */
    Response<DomainOwnershipIdentifier> getOwnershipIdentifierByIdWithResponse(String id, Context context);

    /**
     * Delete a domain.
     * 
     * Description for Delete a domain.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a domain.
     * 
     * Description for Delete a domain.
     * 
     * @param id the resource ID.
     * @param forceHardDeleteDomain Specify &lt;code&gt;true&lt;/code&gt; to delete the domain immediately. The default
     * is &lt;code&gt;false&lt;/code&gt; which deletes the domain after 24 hours.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteByIdWithResponse(String id, Boolean forceHardDeleteDomain, Context context);

    /**
     * Delete ownership identifier for domain
     * 
     * Description for Delete ownership identifier for domain.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteOwnershipIdentifierById(String id);

    /**
     * Delete ownership identifier for domain
     * 
     * Description for Delete ownership identifier for domain.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.appservice.generated.models.DefaultErrorResponseErrorException thrown if the
     * request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteOwnershipIdentifierByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new Domain resource.
     * 
     * @param name resource name.
     * @return the first stage of the new Domain definition.
     */
    Domain.DefinitionStages.Blank define(String name);

    /**
     * Begins definition for a new DomainOwnershipIdentifier resource.
     * 
     * @param name resource name.
     * @return the first stage of the new DomainOwnershipIdentifier definition.
     */
    DomainOwnershipIdentifier.DefinitionStages.Blank defineOwnershipIdentifier(String name);
}
