// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.DomainInner;
import com.azure.resourcemanager.appservice.generated.models.Contact;
import com.azure.resourcemanager.appservice.generated.models.DnsType;
import com.azure.resourcemanager.appservice.generated.models.Domain;
import com.azure.resourcemanager.appservice.generated.models.DomainPatchResource;
import com.azure.resourcemanager.appservice.generated.models.DomainPropertiesDomainNotRenewableReasonsItem;
import com.azure.resourcemanager.appservice.generated.models.DomainPurchaseConsent;
import com.azure.resourcemanager.appservice.generated.models.DomainStatus;
import com.azure.resourcemanager.appservice.generated.models.Hostname;
import com.azure.resourcemanager.appservice.generated.models.ProvisioningState;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class DomainImpl implements Domain, Domain.Definition, Domain.Update {
    private DomainInner innerObject;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Contact contactAdmin() {
        return this.innerModel().contactAdmin();
    }

    public Contact contactBilling() {
        return this.innerModel().contactBilling();
    }

    public Contact contactRegistrant() {
        return this.innerModel().contactRegistrant();
    }

    public Contact contactTech() {
        return this.innerModel().contactTech();
    }

    public DomainStatus registrationStatus() {
        return this.innerModel().registrationStatus();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public List<String> nameServers() {
        List<String> inner = this.innerModel().nameServers();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Boolean privacy() {
        return this.innerModel().privacy();
    }

    public OffsetDateTime createdTime() {
        return this.innerModel().createdTime();
    }

    public OffsetDateTime expirationTime() {
        return this.innerModel().expirationTime();
    }

    public OffsetDateTime lastRenewedTime() {
        return this.innerModel().lastRenewedTime();
    }

    public Boolean autoRenew() {
        return this.innerModel().autoRenew();
    }

    public Boolean readyForDnsRecordManagement() {
        return this.innerModel().readyForDnsRecordManagement();
    }

    public List<Hostname> managedHostNames() {
        List<Hostname> inner = this.innerModel().managedHostNames();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DomainPurchaseConsent consent() {
        return this.innerModel().consent();
    }

    public List<DomainPropertiesDomainNotRenewableReasonsItem> domainNotRenewableReasons() {
        List<DomainPropertiesDomainNotRenewableReasonsItem> inner = this.innerModel().domainNotRenewableReasons();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public DnsType dnsType() {
        return this.innerModel().dnsType();
    }

    public String dnsZoneId() {
        return this.innerModel().dnsZoneId();
    }

    public DnsType targetDnsType() {
        return this.innerModel().targetDnsType();
    }

    public String authCode() {
        return this.innerModel().authCode();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public DomainInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String domainName;

    private DomainPatchResource updateDomain;

    public DomainImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Domain create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDomains()
                .createOrUpdate(resourceGroupName, domainName, this.innerModel(), Context.NONE);
        return this;
    }

    public Domain create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDomains()
                .createOrUpdate(resourceGroupName, domainName, this.innerModel(), context);
        return this;
    }

    DomainImpl(String name, com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = new DomainInner();
        this.serviceManager = serviceManager;
        this.domainName = name;
    }

    public DomainImpl update() {
        this.updateDomain = new DomainPatchResource();
        return this;
    }

    public Domain apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDomains()
                .updateWithResponse(resourceGroupName, domainName, updateDomain, Context.NONE)
                .getValue();
        return this;
    }

    public Domain apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDomains()
                .updateWithResponse(resourceGroupName, domainName, updateDomain, context)
                .getValue();
        return this;
    }

    DomainImpl(
        DomainInner innerObject, com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.domainName = Utils.getValueFromIdByName(innerObject.id(), "domains");
    }

    public Domain refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDomains()
                .getByResourceGroupWithResponse(resourceGroupName, domainName, Context.NONE)
                .getValue();
        return this;
    }

    public Domain refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getDomains()
                .getByResourceGroupWithResponse(resourceGroupName, domainName, context)
                .getValue();
        return this;
    }

    public void renew() {
        serviceManager.domains().renew(resourceGroupName, domainName);
    }

    public Response<Void> renewWithResponse(Context context) {
        return serviceManager.domains().renewWithResponse(resourceGroupName, domainName, context);
    }

    public DomainImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public DomainImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public DomainImpl withTags(Map<String, String> tags) {
        this.innerModel().withTags(tags);
        return this;
    }

    public DomainImpl withContactAdmin(Contact contactAdmin) {
        this.innerModel().withContactAdmin(contactAdmin);
        return this;
    }

    public DomainImpl withContactBilling(Contact contactBilling) {
        this.innerModel().withContactBilling(contactBilling);
        return this;
    }

    public DomainImpl withContactRegistrant(Contact contactRegistrant) {
        this.innerModel().withContactRegistrant(contactRegistrant);
        return this;
    }

    public DomainImpl withContactTech(Contact contactTech) {
        this.innerModel().withContactTech(contactTech);
        return this;
    }

    public DomainImpl withPrivacy(Boolean privacy) {
        if (isInCreateMode()) {
            this.innerModel().withPrivacy(privacy);
            return this;
        } else {
            this.updateDomain.withPrivacy(privacy);
            return this;
        }
    }

    public DomainImpl withAutoRenew(Boolean autoRenew) {
        if (isInCreateMode()) {
            this.innerModel().withAutoRenew(autoRenew);
            return this;
        } else {
            this.updateDomain.withAutoRenew(autoRenew);
            return this;
        }
    }

    public DomainImpl withConsent(DomainPurchaseConsent consent) {
        this.innerModel().withConsent(consent);
        return this;
    }

    public DomainImpl withDnsType(DnsType dnsType) {
        if (isInCreateMode()) {
            this.innerModel().withDnsType(dnsType);
            return this;
        } else {
            this.updateDomain.withDnsType(dnsType);
            return this;
        }
    }

    public DomainImpl withDnsZoneId(String dnsZoneId) {
        if (isInCreateMode()) {
            this.innerModel().withDnsZoneId(dnsZoneId);
            return this;
        } else {
            this.updateDomain.withDnsZoneId(dnsZoneId);
            return this;
        }
    }

    public DomainImpl withTargetDnsType(DnsType targetDnsType) {
        if (isInCreateMode()) {
            this.innerModel().withTargetDnsType(targetDnsType);
            return this;
        } else {
            this.updateDomain.withTargetDnsType(targetDnsType);
            return this;
        }
    }

    public DomainImpl withAuthCode(String authCode) {
        if (isInCreateMode()) {
            this.innerModel().withAuthCode(authCode);
            return this;
        } else {
            this.updateDomain.withAuthCode(authCode);
            return this;
        }
    }

    public DomainImpl withKind(String kind) {
        if (isInCreateMode()) {
            this.innerModel().withKind(kind);
            return this;
        } else {
            this.updateDomain.withKind(kind);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
