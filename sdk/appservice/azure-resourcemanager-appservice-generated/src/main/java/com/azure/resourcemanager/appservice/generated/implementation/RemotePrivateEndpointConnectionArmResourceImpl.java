// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.appservice.generated.fluent.models.RemotePrivateEndpointConnectionArmResourceInner;
import com.azure.resourcemanager.appservice.generated.models.ArmIdWrapper;
import com.azure.resourcemanager.appservice.generated.models.PrivateLinkConnectionApprovalRequestResource;
import com.azure.resourcemanager.appservice.generated.models.PrivateLinkConnectionState;
import com.azure.resourcemanager.appservice.generated.models.RemotePrivateEndpointConnectionArmResource;
import java.util.Collections;
import java.util.List;

public final class RemotePrivateEndpointConnectionArmResourceImpl
    implements RemotePrivateEndpointConnectionArmResource,
        RemotePrivateEndpointConnectionArmResource.Definition,
        RemotePrivateEndpointConnectionArmResource.Update {
    private RemotePrivateEndpointConnectionArmResourceInner innerObject;

    private final com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String kind() {
        return this.innerModel().kind();
    }

    public String provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ArmIdWrapper privateEndpoint() {
        return this.innerModel().privateEndpoint();
    }

    public PrivateLinkConnectionState privateLinkServiceConnectionState() {
        return this.innerModel().privateLinkServiceConnectionState();
    }

    public List<String> ipAddresses() {
        List<String> inner = this.innerModel().ipAddresses();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public RemotePrivateEndpointConnectionArmResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.appservice.generated.AppServiceManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String name;

    private String privateEndpointConnectionName;

    private PrivateLinkConnectionApprovalRequestResource createPrivateEndpointWrapper;

    private PrivateLinkConnectionApprovalRequestResource updatePrivateEndpointWrapper;

    public RemotePrivateEndpointConnectionArmResourceImpl withExistingHostingEnvironment(
        String resourceGroupName, String name) {
        this.resourceGroupName = resourceGroupName;
        this.name = name;
        return this;
    }

    public RemotePrivateEndpointConnectionArmResource create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppServiceEnvironments()
                .approveOrRejectPrivateEndpointConnection(
                    resourceGroupName, name, privateEndpointConnectionName, createPrivateEndpointWrapper, Context.NONE);
        return this;
    }

    public RemotePrivateEndpointConnectionArmResource create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppServiceEnvironments()
                .approveOrRejectPrivateEndpointConnection(
                    resourceGroupName, name, privateEndpointConnectionName, createPrivateEndpointWrapper, context);
        return this;
    }

    RemotePrivateEndpointConnectionArmResourceImpl(
        String name, com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = new RemotePrivateEndpointConnectionArmResourceInner();
        this.serviceManager = serviceManager;
        this.privateEndpointConnectionName = name;
        this.createPrivateEndpointWrapper = new PrivateLinkConnectionApprovalRequestResource();
    }

    public RemotePrivateEndpointConnectionArmResourceImpl update() {
        this.updatePrivateEndpointWrapper = new PrivateLinkConnectionApprovalRequestResource();
        return this;
    }

    public RemotePrivateEndpointConnectionArmResource apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppServiceEnvironments()
                .approveOrRejectPrivateEndpointConnection(
                    resourceGroupName, name, privateEndpointConnectionName, updatePrivateEndpointWrapper, Context.NONE);
        return this;
    }

    public RemotePrivateEndpointConnectionArmResource apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppServiceEnvironments()
                .approveOrRejectPrivateEndpointConnection(
                    resourceGroupName, name, privateEndpointConnectionName, updatePrivateEndpointWrapper, context);
        return this;
    }

    RemotePrivateEndpointConnectionArmResourceImpl(
        RemotePrivateEndpointConnectionArmResourceInner innerObject,
        com.azure.resourcemanager.appservice.generated.AppServiceManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.name = Utils.getValueFromIdByName(innerObject.id(), "hostingEnvironments");
        this.privateEndpointConnectionName = Utils.getValueFromIdByName(innerObject.id(), "privateEndpointConnections");
    }

    public RemotePrivateEndpointConnectionArmResource refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppServiceEnvironments()
                .getPrivateEndpointConnectionWithResponse(
                    resourceGroupName, name, privateEndpointConnectionName, Context.NONE)
                .getValue();
        return this;
    }

    public RemotePrivateEndpointConnectionArmResource refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAppServiceEnvironments()
                .getPrivateEndpointConnectionWithResponse(
                    resourceGroupName, name, privateEndpointConnectionName, context)
                .getValue();
        return this;
    }

    public RemotePrivateEndpointConnectionArmResourceImpl withKind(String kind) {
        if (isInCreateMode()) {
            this.createPrivateEndpointWrapper.withKind(kind);
            return this;
        } else {
            this.updatePrivateEndpointWrapper.withKind(kind);
            return this;
        }
    }

    public RemotePrivateEndpointConnectionArmResourceImpl withPrivateLinkServiceConnectionState(
        PrivateLinkConnectionState privateLinkServiceConnectionState) {
        if (isInCreateMode()) {
            this.createPrivateEndpointWrapper.withPrivateLinkServiceConnectionState(privateLinkServiceConnectionState);
            return this;
        } else {
            this.updatePrivateEndpointWrapper.withPrivateLinkServiceConnectionState(privateLinkServiceConnectionState);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
