// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSet;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticMetricSetTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticMetricSet model = BinaryData.fromString(
            "{\"name\":\"kpwolg\",\"unit\":\"ubxbteogfgfiijr\",\"startTime\":\"2021-12-07T10:28:28Z\",\"endTime\":\"2021-07-14T02:00:07Z\",\"timeGrain\":\"k\",\"values\":[{\"timestamp\":\"2021-06-16T14:15:44Z\",\"roleInstance\":\"zfpxgnmqvzvluy\",\"total\":80.48981000277851,\"maximum\":45.50046387682498,\"minimum\":85.90183323020499,\"isAggregated\":true},{\"timestamp\":\"2021-07-14T22:22:26Z\",\"roleInstance\":\"p\",\"total\":95.971665822468,\"maximum\":86.92464230297385,\"minimum\":2.5163057832325975,\"isAggregated\":true},{\"timestamp\":\"2021-05-21T16:13:23Z\",\"roleInstance\":\"dhsoymhpv\",\"total\":79.50507893063767,\"maximum\":58.2996666000679,\"minimum\":6.243330732719842,\"isAggregated\":false}]}")
            .toObject(DiagnosticMetricSet.class);
        Assertions.assertEquals("kpwolg", model.name());
        Assertions.assertEquals("ubxbteogfgfiijr", model.unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T10:28:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T02:00:07Z"), model.endTime());
        Assertions.assertEquals("k", model.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T14:15:44Z"), model.values().get(0).timestamp());
        Assertions.assertEquals("zfpxgnmqvzvluy", model.values().get(0).roleInstance());
        Assertions.assertEquals(80.48981000277851D, model.values().get(0).total());
        Assertions.assertEquals(45.50046387682498D, model.values().get(0).maximum());
        Assertions.assertEquals(85.90183323020499D, model.values().get(0).minimum());
        Assertions.assertEquals(true, model.values().get(0).isAggregated());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticMetricSet model = new DiagnosticMetricSet().withName("kpwolg")
            .withUnit("ubxbteogfgfiijr")
            .withStartTime(OffsetDateTime.parse("2021-12-07T10:28:28Z"))
            .withEndTime(OffsetDateTime.parse("2021-07-14T02:00:07Z"))
            .withTimeGrain("k")
            .withValues(Arrays.asList(
                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-06-16T14:15:44Z"))
                    .withRoleInstance("zfpxgnmqvzvluy")
                    .withTotal(80.48981000277851D)
                    .withMaximum(45.50046387682498D)
                    .withMinimum(85.90183323020499D)
                    .withIsAggregated(true),
                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-07-14T22:22:26Z"))
                    .withRoleInstance("p")
                    .withTotal(95.971665822468D)
                    .withMaximum(86.92464230297385D)
                    .withMinimum(2.5163057832325975D)
                    .withIsAggregated(true),
                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-05-21T16:13:23Z"))
                    .withRoleInstance("dhsoymhpv")
                    .withTotal(79.50507893063767D)
                    .withMaximum(58.2996666000679D)
                    .withMinimum(6.243330732719842D)
                    .withIsAggregated(false)));
        model = BinaryData.fromObject(model).toObject(DiagnosticMetricSet.class);
        Assertions.assertEquals("kpwolg", model.name());
        Assertions.assertEquals("ubxbteogfgfiijr", model.unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-07T10:28:28Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-14T02:00:07Z"), model.endTime());
        Assertions.assertEquals("k", model.timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-16T14:15:44Z"), model.values().get(0).timestamp());
        Assertions.assertEquals("zfpxgnmqvzvluy", model.values().get(0).roleInstance());
        Assertions.assertEquals(80.48981000277851D, model.values().get(0).total());
        Assertions.assertEquals(45.50046387682498D, model.values().get(0).maximum());
        Assertions.assertEquals(85.90183323020499D, model.values().get(0).minimum());
        Assertions.assertEquals(true, model.values().get(0).isAggregated());
    }
}
