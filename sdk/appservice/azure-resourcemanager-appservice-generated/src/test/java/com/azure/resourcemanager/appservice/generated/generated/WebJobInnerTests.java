// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.WebJobInner;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebJobInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebJobInner model = BinaryData.fromString(
            "{\"properties\":{\"run_command\":\"ayxpdzvgyujkxjg\",\"url\":\"zdbigitra\",\"extra_info_url\":\"dy\",\"web_job_type\":\"Triggered\",\"error\":\"nbpiddvbx\",\"using_sdk\":true,\"settings\":{\"zyfktba\":\"dataxfelsrymzv\"}},\"kind\":\"asnj\",\"id\":\"lk\",\"name\":\"yzlkqyezyzxkr\",\"type\":\"fdssofuxys\"}")
            .toObject(WebJobInner.class);
        Assertions.assertEquals("asnj", model.kind());
        Assertions.assertEquals("ayxpdzvgyujkxjg", model.runCommand());
        Assertions.assertEquals("zdbigitra", model.url());
        Assertions.assertEquals("dy", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("nbpiddvbx", model.error());
        Assertions.assertEquals(true, model.usingSdk());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebJobInner model = new WebJobInner().withKind("asnj")
            .withRunCommand("ayxpdzvgyujkxjg")
            .withUrl("zdbigitra")
            .withExtraInfoUrl("dy")
            .withWebJobType(WebJobType.TRIGGERED)
            .withError("nbpiddvbx")
            .withUsingSdk(true)
            .withSettings(mapOf("zyfktba", "dataxfelsrymzv"));
        model = BinaryData.fromObject(model).toObject(WebJobInner.class);
        Assertions.assertEquals("asnj", model.kind());
        Assertions.assertEquals("ayxpdzvgyujkxjg", model.runCommand());
        Assertions.assertEquals("zdbigitra", model.url());
        Assertions.assertEquals("dy", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("nbpiddvbx", model.error());
        Assertions.assertEquals(true, model.usingSdk());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
