// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.TriggeredWebJobProperties;
import com.azure.resourcemanager.appservice.generated.models.TriggeredJobRun;
import com.azure.resourcemanager.appservice.generated.models.TriggeredWebJobStatus;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TriggeredWebJobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggeredWebJobProperties model = BinaryData.fromString(
            "{\"latest_run\":{\"web_job_id\":\"zxcmsceza\",\"web_job_name\":\"y\",\"status\":\"Error\",\"start_time\":\"2021-11-14T08:01:43Z\",\"end_time\":\"2021-06-05T00:27:38Z\",\"duration\":\"ybddxebdhmx\",\"output_url\":\"zfjgrepbr\",\"error_url\":\"crtv\",\"url\":\"wpvqrexlu\",\"job_name\":\"a\",\"trigger\":\"wbrfiovpdltjdr\"},\"history_url\":\"werlbc\",\"scheduler_logs_url\":\"rvird\",\"run_command\":\"dswpvnloopzy\",\"url\":\"gchtabh\",\"extra_info_url\":\"jlfqzcklvvwv\",\"web_job_type\":\"Continuous\",\"error\":\"pvzhmlnfvyhdh\",\"using_sdk\":false,\"publicNetworkAccess\":\"dmhawbxnlkmazhle\",\"storageAccountRequired\":false,\"settings\":{\"ipy\":\"datasayehfz\",\"mwxzlp\":\"datatmdhbctk\"}}")
            .toObject(TriggeredWebJobProperties.class);
        Assertions.assertEquals("zxcmsceza", model.latestRun().webJobId());
        Assertions.assertEquals("y", model.latestRun().webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.ERROR, model.latestRun().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T08:01:43Z"), model.latestRun().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-05T00:27:38Z"), model.latestRun().endTime());
        Assertions.assertEquals("ybddxebdhmx", model.latestRun().duration());
        Assertions.assertEquals("zfjgrepbr", model.latestRun().outputUrl());
        Assertions.assertEquals("crtv", model.latestRun().errorUrl());
        Assertions.assertEquals("wpvqrexlu", model.latestRun().url());
        Assertions.assertEquals("a", model.latestRun().jobName());
        Assertions.assertEquals("wbrfiovpdltjdr", model.latestRun().trigger());
        Assertions.assertEquals("werlbc", model.historyUrl());
        Assertions.assertEquals("rvird", model.schedulerLogsUrl());
        Assertions.assertEquals("dswpvnloopzy", model.runCommand());
        Assertions.assertEquals("gchtabh", model.url());
        Assertions.assertEquals("jlfqzcklvvwv", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.CONTINUOUS, model.webJobType());
        Assertions.assertEquals("pvzhmlnfvyhdh", model.error());
        Assertions.assertEquals(false, model.usingSdk());
        Assertions.assertEquals("dmhawbxnlkmazhle", model.publicNetworkAccess());
        Assertions.assertEquals(false, model.storageAccountRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggeredWebJobProperties model = new TriggeredWebJobProperties()
            .withLatestRun(new TriggeredJobRun().withWebJobId("zxcmsceza")
                .withWebJobName("y")
                .withStatus(TriggeredWebJobStatus.ERROR)
                .withStartTime(OffsetDateTime.parse("2021-11-14T08:01:43Z"))
                .withEndTime(OffsetDateTime.parse("2021-06-05T00:27:38Z"))
                .withDuration("ybddxebdhmx")
                .withOutputUrl("zfjgrepbr")
                .withErrorUrl("crtv")
                .withUrl("wpvqrexlu")
                .withJobName("a")
                .withTrigger("wbrfiovpdltjdr"))
            .withHistoryUrl("werlbc")
            .withSchedulerLogsUrl("rvird")
            .withRunCommand("dswpvnloopzy")
            .withUrl("gchtabh")
            .withExtraInfoUrl("jlfqzcklvvwv")
            .withWebJobType(WebJobType.CONTINUOUS)
            .withError("pvzhmlnfvyhdh")
            .withUsingSdk(false)
            .withPublicNetworkAccess("dmhawbxnlkmazhle")
            .withStorageAccountRequired(false)
            .withSettings(mapOf("ipy", "datasayehfz", "mwxzlp", "datatmdhbctk"));
        model = BinaryData.fromObject(model).toObject(TriggeredWebJobProperties.class);
        Assertions.assertEquals("zxcmsceza", model.latestRun().webJobId());
        Assertions.assertEquals("y", model.latestRun().webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.ERROR, model.latestRun().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T08:01:43Z"), model.latestRun().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-05T00:27:38Z"), model.latestRun().endTime());
        Assertions.assertEquals("ybddxebdhmx", model.latestRun().duration());
        Assertions.assertEquals("zfjgrepbr", model.latestRun().outputUrl());
        Assertions.assertEquals("crtv", model.latestRun().errorUrl());
        Assertions.assertEquals("wpvqrexlu", model.latestRun().url());
        Assertions.assertEquals("a", model.latestRun().jobName());
        Assertions.assertEquals("wbrfiovpdltjdr", model.latestRun().trigger());
        Assertions.assertEquals("werlbc", model.historyUrl());
        Assertions.assertEquals("rvird", model.schedulerLogsUrl());
        Assertions.assertEquals("dswpvnloopzy", model.runCommand());
        Assertions.assertEquals("gchtabh", model.url());
        Assertions.assertEquals("jlfqzcklvvwv", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.CONTINUOUS, model.webJobType());
        Assertions.assertEquals("pvzhmlnfvyhdh", model.error());
        Assertions.assertEquals(false, model.usingSdk());
        Assertions.assertEquals("dmhawbxnlkmazhle", model.publicNetworkAccess());
        Assertions.assertEquals(false, model.storageAccountRequired());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
