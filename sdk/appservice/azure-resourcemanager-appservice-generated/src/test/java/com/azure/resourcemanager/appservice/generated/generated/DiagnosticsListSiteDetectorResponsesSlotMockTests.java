// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.DetectorResponse;
import com.azure.resourcemanager.appservice.generated.models.InsightStatus;
import com.azure.resourcemanager.appservice.generated.models.RenderingType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsListSiteDetectorResponsesSlotMockTests {
    @Test
    public void testListSiteDetectorResponsesSlot() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"metadata\":{\"id\":\"cisolkwipvls\",\"name\":\"utawgyl\",\"description\":\"drfclehlop\",\"author\":\"vpeaeyjl\",\"category\":\"duxhopyavcb\",\"supportTopicList\":[{\"id\":\"bvfarqxjoazyxm\",\"pesId\":\"fbkaxzr\"},{\"id\":\"vacspzjysyphxeo\",\"pesId\":\"aq\"}],\"analysisType\":[\"ceiyuvosbbaw\"],\"type\":\"Analysis\",\"score\":50.57925},\"dataset\":[{\"table\":{\"tableName\":\"qlxqhqgipqr\",\"columns\":[{},{},{}],\"rows\":[[],[],[],[]]},\"renderingProperties\":{\"type\":\"PieChart\",\"title\":\"u\",\"description\":\"cskif\"}},{\"table\":{\"tableName\":\"tped\",\"columns\":[{},{},{},{}],\"rows\":[[],[]]},\"renderingProperties\":{\"type\":\"ChangesView\",\"title\":\"ywcre\",\"description\":\"phqqozhesbpq\"}}],\"status\":{\"message\":\"fjktdvdhlkztalu\",\"statusId\":\"Info\"},\"dataProvidersMetadata\":[{\"providerName\":\"oat\",\"propertyBag\":[{},{},{},{}]},{\"providerName\":\"wvxhef\",\"propertyBag\":[{}]},{\"providerName\":\"lhi\",\"propertyBag\":[{}]}],\"suggestedUtterances\":{\"query\":\"pqo\",\"results\":[{\"sampleUtterance\":{},\"score\":4.222405},{\"sampleUtterance\":{},\"score\":5.0789595},{\"sampleUtterance\":{},\"score\":21.748024},{\"sampleUtterance\":{},\"score\":75.426125}]}},\"kind\":\"nlgqeplyosa\",\"id\":\"xsgwdxoxjlvvvzp\",\"name\":\"jvyintgkve\",\"type\":\"geldnmb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DetectorResponse> response = manager.diagnostics()
            .listSiteDetectorResponsesSlot("qvflrrtj", "uikqzdcwq", "lxpmiyt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nlgqeplyosa", response.iterator().next().kind());
        Assertions.assertEquals("qlxqhqgipqr", response.iterator().next().dataset().get(0).table().tableName());
        Assertions.assertEquals(RenderingType.PIE_CHART,
            response.iterator().next().dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("u", response.iterator().next().dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("cskif",
            response.iterator().next().dataset().get(0).renderingProperties().description());
        Assertions.assertEquals("fjktdvdhlkztalu", response.iterator().next().status().message());
        Assertions.assertEquals(InsightStatus.INFO, response.iterator().next().status().statusId());
        Assertions.assertEquals("oat", response.iterator().next().dataProvidersMetadata().get(0).providerName());
        Assertions.assertEquals("pqo", response.iterator().next().suggestedUtterances().query());
        Assertions.assertEquals(4.222405F, response.iterator().next().suggestedUtterances().results().get(0).score());
    }
}
