// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.CapabilityInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkerPoolResourceInner;
import com.azure.resourcemanager.appservice.generated.models.ComputeModeOptions;
import com.azure.resourcemanager.appservice.generated.models.SkuCapacity;
import com.azure.resourcemanager.appservice.generated.models.SkuDescription;
import com.azure.resourcemanager.appservice.generated.models.WorkerPoolCollection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkerPoolCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkerPoolCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"workerSizeId\":2053314156,\"computeMode\":\"Dynamic\",\"workerSize\":\"pmzznrtffya\",\"workerCount\":203387229,\"instanceNames\":[\"heioqa\",\"hvseufuqyrx\",\"dlcgqlsismjqfr\",\"dgamquhiosrsj\"]},\"sku\":{\"name\":\"fcdis\",\"tier\":\"rnxzh\",\"size\":\"exrxzbujrtrhq\",\"family\":\"revkhgnlnzo\",\"capacity\":118723047,\"skuCapacity\":{\"minimum\":155304322,\"maximum\":411068196,\"elasticMaximum\":1456062548,\"default\":785052924,\"scaleType\":\"tszcofizehtdhgb\"},\"locations\":[\"reljeamur\",\"zmlovuanash\"],\"capabilities\":[{\"name\":\"mjerbdk\",\"value\":\"vidizozsdb\",\"reason\":\"xjmonf\"},{\"name\":\"nwncypuuw\",\"value\":\"tvuqjctzenkeifzz\",\"reason\":\"kdasvflyhbxcudch\"}]},\"kind\":\"srboldforobw\",\"id\":\"lvizb\",\"name\":\"hfovvacqpbtu\",\"type\":\"dxe\"}],\"nextLink\":\"abbelawumuaslzk\"}")
            .toObject(WorkerPoolCollection.class);
        Assertions.assertEquals("srboldforobw", model.value().get(0).kind());
        Assertions.assertEquals("fcdis", model.value().get(0).sku().name());
        Assertions.assertEquals("rnxzh", model.value().get(0).sku().tier());
        Assertions.assertEquals("exrxzbujrtrhq", model.value().get(0).sku().size());
        Assertions.assertEquals("revkhgnlnzo", model.value().get(0).sku().family());
        Assertions.assertEquals(118723047, model.value().get(0).sku().capacity());
        Assertions.assertEquals(155304322, model.value().get(0).sku().skuCapacity().minimum());
        Assertions.assertEquals(411068196, model.value().get(0).sku().skuCapacity().maximum());
        Assertions.assertEquals(1456062548, model.value().get(0).sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(785052924, model.value().get(0).sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("tszcofizehtdhgb", model.value().get(0).sku().skuCapacity().scaleType());
        Assertions.assertEquals("reljeamur", model.value().get(0).sku().locations().get(0));
        Assertions.assertEquals("mjerbdk", model.value().get(0).sku().capabilities().get(0).name());
        Assertions.assertEquals("vidizozsdb", model.value().get(0).sku().capabilities().get(0).value());
        Assertions.assertEquals("xjmonf", model.value().get(0).sku().capabilities().get(0).reason());
        Assertions.assertEquals(2053314156, model.value().get(0).workerSizeId());
        Assertions.assertEquals(ComputeModeOptions.DYNAMIC, model.value().get(0).computeMode());
        Assertions.assertEquals("pmzznrtffya", model.value().get(0).workerSize());
        Assertions.assertEquals(203387229, model.value().get(0).workerCount());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkerPoolCollection model
            = new WorkerPoolCollection().withValue(Arrays.asList(new WorkerPoolResourceInner().withKind("srboldforobw")
                .withSku(new SkuDescription().withName("fcdis")
                    .withTier("rnxzh")
                    .withSize("exrxzbujrtrhq")
                    .withFamily("revkhgnlnzo")
                    .withCapacity(118723047)
                    .withSkuCapacity(new SkuCapacity().withMinimum(155304322)
                        .withMaximum(411068196)
                        .withElasticMaximum(1456062548)
                        .withDefaultProperty(785052924)
                        .withScaleType("tszcofizehtdhgb"))
                    .withLocations(Arrays.asList("reljeamur", "zmlovuanash"))
                    .withCapabilities(Arrays.asList(
                        new CapabilityInner().withName("mjerbdk").withValue("vidizozsdb").withReason("xjmonf"),
                        new CapabilityInner().withName("nwncypuuw")
                            .withValue("tvuqjctzenkeifzz")
                            .withReason("kdasvflyhbxcudch"))))
                .withWorkerSizeId(2053314156)
                .withComputeMode(ComputeModeOptions.DYNAMIC)
                .withWorkerSize("pmzznrtffya")
                .withWorkerCount(203387229)));
        model = BinaryData.fromObject(model).toObject(WorkerPoolCollection.class);
        Assertions.assertEquals("srboldforobw", model.value().get(0).kind());
        Assertions.assertEquals("fcdis", model.value().get(0).sku().name());
        Assertions.assertEquals("rnxzh", model.value().get(0).sku().tier());
        Assertions.assertEquals("exrxzbujrtrhq", model.value().get(0).sku().size());
        Assertions.assertEquals("revkhgnlnzo", model.value().get(0).sku().family());
        Assertions.assertEquals(118723047, model.value().get(0).sku().capacity());
        Assertions.assertEquals(155304322, model.value().get(0).sku().skuCapacity().minimum());
        Assertions.assertEquals(411068196, model.value().get(0).sku().skuCapacity().maximum());
        Assertions.assertEquals(1456062548, model.value().get(0).sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(785052924, model.value().get(0).sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("tszcofizehtdhgb", model.value().get(0).sku().skuCapacity().scaleType());
        Assertions.assertEquals("reljeamur", model.value().get(0).sku().locations().get(0));
        Assertions.assertEquals("mjerbdk", model.value().get(0).sku().capabilities().get(0).name());
        Assertions.assertEquals("vidizozsdb", model.value().get(0).sku().capabilities().get(0).value());
        Assertions.assertEquals("xjmonf", model.value().get(0).sku().capabilities().get(0).reason());
        Assertions.assertEquals(2053314156, model.value().get(0).workerSizeId());
        Assertions.assertEquals(ComputeModeOptions.DYNAMIC, model.value().get(0).computeMode());
        Assertions.assertEquals("pmzznrtffya", model.value().get(0).workerSize());
        Assertions.assertEquals(203387229, model.value().get(0).workerCount());
    }
}
