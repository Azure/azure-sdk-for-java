// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteCloneabilityInner;
import com.azure.resourcemanager.appservice.generated.models.CloneAbilityResult;
import com.azure.resourcemanager.appservice.generated.models.SiteCloneabilityCriterion;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SiteCloneabilityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteCloneabilityInner model = BinaryData.fromString(
            "{\"result\":\"PartiallyCloneable\",\"blockingFeatures\":[{\"name\":\"ui\",\"description\":\"gmndwohoeashu\"}],\"unsupportedFeatures\":[{\"name\":\"jimzwynsmmphv\",\"description\":\"ez\"},{\"name\":\"eyuoyjmjwqdslqr\",\"description\":\"fzrkrztpy\"}],\"blockingCharacteristics\":[{\"name\":\"xlnm\",\"description\":\"xsy\"}]}")
            .toObject(SiteCloneabilityInner.class);
        Assertions.assertEquals(CloneAbilityResult.PARTIALLY_CLONEABLE, model.result());
        Assertions.assertEquals("ui", model.blockingFeatures().get(0).name());
        Assertions.assertEquals("gmndwohoeashu", model.blockingFeatures().get(0).description());
        Assertions.assertEquals("jimzwynsmmphv", model.unsupportedFeatures().get(0).name());
        Assertions.assertEquals("ez", model.unsupportedFeatures().get(0).description());
        Assertions.assertEquals("xlnm", model.blockingCharacteristics().get(0).name());
        Assertions.assertEquals("xsy", model.blockingCharacteristics().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteCloneabilityInner model = new SiteCloneabilityInner().withResult(CloneAbilityResult.PARTIALLY_CLONEABLE)
            .withBlockingFeatures(
                Arrays.asList(new SiteCloneabilityCriterion().withName("ui").withDescription("gmndwohoeashu")))
            .withUnsupportedFeatures(
                Arrays.asList(new SiteCloneabilityCriterion().withName("jimzwynsmmphv").withDescription("ez"),
                    new SiteCloneabilityCriterion().withName("eyuoyjmjwqdslqr").withDescription("fzrkrztpy")))
            .withBlockingCharacteristics(
                Arrays.asList(new SiteCloneabilityCriterion().withName("xlnm").withDescription("xsy")));
        model = BinaryData.fromObject(model).toObject(SiteCloneabilityInner.class);
        Assertions.assertEquals(CloneAbilityResult.PARTIALLY_CLONEABLE, model.result());
        Assertions.assertEquals("ui", model.blockingFeatures().get(0).name());
        Assertions.assertEquals("gmndwohoeashu", model.blockingFeatures().get(0).description());
        Assertions.assertEquals("jimzwynsmmphv", model.unsupportedFeatures().get(0).name());
        Assertions.assertEquals("ez", model.unsupportedFeatures().get(0).description());
        Assertions.assertEquals("xlnm", model.blockingCharacteristics().get(0).name());
        Assertions.assertEquals("xsy", model.blockingCharacteristics().get(0).description());
    }
}
