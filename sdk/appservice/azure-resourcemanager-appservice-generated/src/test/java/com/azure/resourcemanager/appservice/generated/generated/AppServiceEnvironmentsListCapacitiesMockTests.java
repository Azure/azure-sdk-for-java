// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.ComputeModeOptions;
import com.azure.resourcemanager.appservice.generated.models.StampCapacity;
import com.azure.resourcemanager.appservice.generated.models.WorkerSizeOptions;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServiceEnvironmentsListCapacitiesMockTests {
    @Test
    public void testListCapacities() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"dhas\",\"availableCapacity\":2410860240864579025,\"totalCapacity\":2297166442515057162,\"unit\":\"xvf\",\"computeMode\":\"Dedicated\",\"workerSize\":\"D3\",\"workerSizeId\":445148427,\"excludeFromCapacityAllocation\":true,\"isApplicableForAllComputeModes\":false,\"siteMode\":\"yulkoeps\",\"isLinux\":true}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StampCapacity> response = manager.appServiceEnvironments()
            .listCapacities("taulxxznfxdqqzik", "gwqi", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dhas", response.iterator().next().name());
        Assertions.assertEquals(2410860240864579025L, response.iterator().next().availableCapacity());
        Assertions.assertEquals(2297166442515057162L, response.iterator().next().totalCapacity());
        Assertions.assertEquals("xvf", response.iterator().next().unit());
        Assertions.assertEquals(ComputeModeOptions.DEDICATED, response.iterator().next().computeMode());
        Assertions.assertEquals(WorkerSizeOptions.D3, response.iterator().next().workerSize());
        Assertions.assertEquals(445148427, response.iterator().next().workerSizeId());
        Assertions.assertEquals(true, response.iterator().next().excludeFromCapacityAllocation());
        Assertions.assertEquals(false, response.iterator().next().isApplicableForAllComputeModes());
        Assertions.assertEquals("yulkoeps", response.iterator().next().siteMode());
        Assertions.assertEquals(true, response.iterator().next().isLinux());
    }
}
