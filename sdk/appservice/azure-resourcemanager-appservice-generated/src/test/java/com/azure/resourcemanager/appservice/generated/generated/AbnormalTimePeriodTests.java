// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.AbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.DetectorAbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.Solution;
import com.azure.resourcemanager.appservice.generated.models.SolutionType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AbnormalTimePeriodTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AbnormalTimePeriod model = BinaryData.fromString(
            "{\"startTime\":\"2021-07-12T18:01:58Z\",\"endTime\":\"2021-11-28T04:30:58Z\",\"events\":[{\"startTime\":\"2021-11-15T03:56:29Z\",\"endTime\":\"2021-07-20T01:40:23Z\",\"message\":\"dmljzacvumepjp\",\"source\":\"bn\",\"priority\":85.16103349191285,\"metaData\":[[{\"name\":\"exleqirccjcl\",\"value\":\"cgxvrpj\"},{\"name\":\"czuod\",\"value\":\"punettepdjxq\"},{\"name\":\"koynuiylpckae\",\"value\":\"edveskwxegqp\"},{\"name\":\"gfnzh\",\"value\":\"mjtsgh\"}]],\"type\":\"ServiceIncident\",\"solutions\":[{\"id\":75.61683186919682,\"displayName\":\"pzeqacdldtz\",\"order\":98.45272812429768,\"description\":\"fcpczshnuqndaiz\",\"type\":\"BestPractices\",\"data\":[[{},{},{},{}],[{}]],\"metadata\":[[{},{},{},{}],[{}]]}]},{\"startTime\":\"2021-05-29T11:41:43Z\",\"endTime\":\"2021-06-09T00:07Z\",\"message\":\"tvegwqiukvzwy\",\"source\":\"tthaokgkskj\",\"priority\":10.210373538211659,\"metaData\":[[{\"name\":\"qfukpeexpgeumi\",\"value\":\"wuit\"}],[{\"name\":\"xyio\",\"value\":\"fninbdbzs\"},{\"name\":\"wqqrsmpcbbprtuga\",\"value\":\"zbcyksiv\"},{\"name\":\"ogd\",\"value\":\"bfcmkrfts\"},{\"name\":\"wjjxsgm\",\"value\":\"wvif\"}]],\"type\":\"PlatformIssue\",\"solutions\":[{\"id\":13.733900751537353,\"displayName\":\"cjxwkloozrvtxvcm\",\"order\":47.75784402684181,\"description\":\"cpxxvirye\",\"type\":\"DeepInvestigation\",\"data\":[[{},{}]],\"metadata\":[[{}]]},{\"id\":64.28944488031857,\"displayName\":\"glpm\",\"order\":87.46201663286868,\"description\":\"eljtiahxmfqryarv\",\"type\":\"DeepInvestigation\",\"data\":[[{},{},{},{}],[{},{},{},{}],[{},{}],[{},{},{}]],\"metadata\":[[{},{}],[{},{},{},{}]]},{\"id\":93.22107447929537,\"displayName\":\"odubtlmjt\",\"order\":84.25077042113641,\"description\":\"skkfmk\",\"type\":\"BestPractices\",\"data\":[[{},{},{},{}],[{},{},{}],[{},{},{},{}]],\"metadata\":[[{},{},{}],[{},{}],[{},{},{},{}]]}]},{\"startTime\":\"2021-09-21T12:15:57Z\",\"endTime\":\"2021-11-20T10:28:03Z\",\"message\":\"edlrslskkzpxvj\",\"source\":\"dpvocojhpcn\",\"priority\":99.01154501493065,\"metaData\":[[{\"name\":\"gyte\",\"value\":\"zilmhivzkww\"}],[{\"name\":\"knrzdajlskzpt\",\"value\":\"ulweucyrth\"},{\"name\":\"lehmcgcjeinueho\",\"value\":\"mvfejvqnttmbqd\"},{\"name\":\"zfivfokpysthhzag\",\"value\":\"wyy\"}],[{\"name\":\"g\",\"value\":\"uzejgvkvebaqszl\"},{\"name\":\"zlsmmdqgmihzpim\",\"value\":\"rh\"},{\"name\":\"t\",\"value\":\"nklogxsvtzarhzv\"},{\"name\":\"sqktcmbjwz\",\"value\":\"slpkybtg\"}],[{\"name\":\"zp\",\"value\":\"jsqjcemqbm\"},{\"name\":\"vqar\",\"value\":\"xuqreblu\"}]],\"type\":\"RuntimeIssueDetected\",\"solutions\":[{\"id\":77.21742608138183,\"displayName\":\"td\",\"order\":78.47283513389328,\"description\":\"kraokq\",\"type\":\"DeepInvestigation\",\"data\":[[{},{}]],\"metadata\":[[{},{},{}],[{},{}],[{},{}],[{},{},{}]]}]}],\"solutions\":[{\"id\":18.01040604276253,\"displayName\":\"aknwfrkebsmh\",\"order\":13.102255083796344,\"description\":\"igatolekscbctna\",\"type\":\"QuickSolution\",\"data\":[[{\"name\":\"xpdcldpkawnsnl\",\"value\":\"mouxwksqmudmfco\"},{\"name\":\"icziuswswjrkb\",\"value\":\"jhbtqq\"}],[{\"name\":\"scyrfwbivqv\",\"value\":\"fuy\"},{\"name\":\"vbhlimbyqecro\",\"value\":\"likcdrd\"},{\"name\":\"saxxob\",\"value\":\"fkwiyjv\"},{\"name\":\"ko\",\"value\":\"nawnvz\"}],[{\"name\":\"k\",\"value\":\"wsxvjab\"}],[{\"name\":\"axuyvymcnud\",\"value\":\"oabhjxwxqweuip\"}]],\"metadata\":[[{\"name\":\"m\",\"value\":\"nsqxtltc\"},{\"name\":\"rdpqgfhy\",\"value\":\"rakkld\"},{\"name\":\"c\",\"value\":\"cmfcnrjajq\"}]]},{\"id\":70.43040806107179,\"displayName\":\"tie\",\"order\":25.23949071289734,\"description\":\"xxgfbbmtlpqagyn\",\"type\":\"QuickSolution\",\"data\":[[{\"name\":\"ali\",\"value\":\"ryqxzxa\"},{\"name\":\"ibmq\",\"value\":\"iymqr\"},{\"name\":\"guhfupe\",\"value\":\"svvoqsbpkflanfk\"}]],\"metadata\":[[{\"name\":\"owuz\",\"value\":\"puohdkcprgukxrz\"}],[{\"name\":\"chlutixmqru\",\"value\":\"izcbfzmcrunfhiuc\"}],[{\"name\":\"bcpaqktkrumzued\",\"value\":\"zbfvxovqkxiu\"},{\"name\":\"ggvqrnhyhlwcjs\",\"value\":\"gjhffbxr\"},{\"name\":\"kijpeuqlsdxeqztv\",\"value\":\"mwwmjswenaww\"},{\"name\":\"ecleqioulndhzyo\",\"value\":\"jhtollh\"}]]},{\"id\":45.2180699799809,\"displayName\":\"ytz\",\"order\":97.3456302798663,\"description\":\"pnovyoanfbcs\",\"type\":\"QuickSolution\",\"data\":[[{\"name\":\"t\",\"value\":\"gvjrktpgaeuky\"},{\"name\":\"ohpmwhqn\",\"value\":\"sklhsidsjtdlp\"},{\"name\":\"injgazlsvbzfcpuo\",\"value\":\"dwjcciklhs\"},{\"name\":\"krdre\",\"value\":\"olr\"}]],\"metadata\":[[{\"name\":\"beivdlhydwbdbfg\",\"value\":\"punytjl\"}],[{\"name\":\"mmpathu\",\"value\":\"ah\"},{\"name\":\"an\",\"value\":\"wllbv\"},{\"name\":\"zsffte\",\"value\":\"us\"},{\"name\":\"tjtgravaqogfkb\",\"value\":\"auzlqbtxxw\"}],[{\"name\":\"njzudr\",\"value\":\"zkg\"}],[{\"name\":\"oywhczzqrhmngqbe\",\"value\":\"gis\"},{\"name\":\"wnykdidjchlrmpw\",\"value\":\"ofldseacdhz\"},{\"name\":\"kbrfgdrwji\",\"value\":\"whfjsrwqrxe\"},{\"name\":\"gcwvrrmdqntycna\",\"value\":\"hvmaxgnuyeamcmhu\"}]]}]}")
            .toObject(AbnormalTimePeriod.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-12T18:01:58Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-28T04:30:58Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T03:56:29Z"), model.events().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T01:40:23Z"), model.events().get(0).endTime());
        Assertions.assertEquals("dmljzacvumepjp", model.events().get(0).message());
        Assertions.assertEquals("bn", model.events().get(0).source());
        Assertions.assertEquals(85.16103349191285D, model.events().get(0).priority());
        Assertions.assertEquals("exleqirccjcl", model.events().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("cgxvrpj", model.events().get(0).metadata().get(0).get(0).value());
        Assertions.assertEquals(IssueType.SERVICE_INCIDENT, model.events().get(0).type());
        Assertions.assertEquals(75.61683186919682D, model.events().get(0).solutions().get(0).id());
        Assertions.assertEquals("pzeqacdldtz", model.events().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(98.45272812429768D, model.events().get(0).solutions().get(0).order());
        Assertions.assertEquals("fcpczshnuqndaiz", model.events().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.BEST_PRACTICES, model.events().get(0).solutions().get(0).type());
        Assertions.assertEquals(18.01040604276253D, model.solutions().get(0).id());
        Assertions.assertEquals("aknwfrkebsmh", model.solutions().get(0).displayName());
        Assertions.assertEquals(13.102255083796344D, model.solutions().get(0).order());
        Assertions.assertEquals("igatolekscbctna", model.solutions().get(0).description());
        Assertions.assertEquals(SolutionType.QUICK_SOLUTION, model.solutions().get(0).type());
        Assertions.assertEquals("xpdcldpkawnsnl", model.solutions().get(0).data().get(0).get(0).name());
        Assertions.assertEquals("mouxwksqmudmfco", model.solutions().get(0).data().get(0).get(0).value());
        Assertions.assertEquals("m", model.solutions().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("nsqxtltc", model.solutions().get(0).metadata().get(0).get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AbnormalTimePeriod model = new AbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-07-12T18:01:58Z"))
            .withEndTime(OffsetDateTime.parse("2021-11-28T04:30:58Z"))
            .withEvents(Arrays.asList(
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-11-15T03:56:29Z"))
                    .withEndTime(OffsetDateTime.parse("2021-07-20T01:40:23Z"))
                    .withMessage("dmljzacvumepjp")
                    .withSource("bn")
                    .withPriority(85.16103349191285D)
                    .withMetadata(
                        Arrays.asList(Arrays.asList(new NameValuePair().withName("exleqirccjcl").withValue("cgxvrpj"),
                            new NameValuePair().withName("czuod").withValue("punettepdjxq"),
                            new NameValuePair().withName("koynuiylpckae").withValue("edveskwxegqp"),
                            new NameValuePair().withName("gfnzh").withValue("mjtsgh"))))
                    .withType(IssueType.SERVICE_INCIDENT)
                    .withSolutions(Arrays.asList(new Solution().withId(75.61683186919682D)
                        .withDisplayName("pzeqacdldtz")
                        .withOrder(98.45272812429768D)
                        .withDescription("fcpczshnuqndaiz")
                        .withType(SolutionType.BEST_PRACTICES)
                        .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair(),
                            new NameValuePair(), new NameValuePair()), Arrays.asList(new NameValuePair())))
                        .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair(),
                            new NameValuePair(), new NameValuePair()), Arrays.asList(new NameValuePair()))))),
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-05-29T11:41:43Z"))
                    .withEndTime(OffsetDateTime.parse("2021-06-09T00:07Z"))
                    .withMessage("tvegwqiukvzwy")
                    .withSource("tthaokgkskj")
                    .withPriority(10.210373538211659D)
                    .withMetadata(
                        Arrays.asList(Arrays.asList(new NameValuePair().withName("qfukpeexpgeumi").withValue("wuit")),
                            Arrays.asList(new NameValuePair().withName("xyio").withValue("fninbdbzs"),
                                new NameValuePair().withName("wqqrsmpcbbprtuga").withValue("zbcyksiv"),
                                new NameValuePair().withName("ogd").withValue("bfcmkrfts"),
                                new NameValuePair().withName("wjjxsgm").withValue("wvif"))))
                    .withType(IssueType.PLATFORM_ISSUE)
                    .withSolutions(Arrays.asList(
                        new Solution().withId(13.733900751537353D)
                            .withDisplayName("cjxwkloozrvtxvcm")
                            .withOrder(47.75784402684181D)
                            .withDescription("cpxxvirye")
                            .withType(SolutionType.DEEP_INVESTIGATION)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair()))),
                        new Solution().withId(64.28944488031857D)
                            .withDisplayName("glpm")
                            .withOrder(87.46201663286868D)
                            .withDescription("eljtiahxmfqryarv")
                            .withType(SolutionType.DEEP_INVESTIGATION)
                            .withData(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()))),
                        new Solution().withId(93.22107447929537D)
                            .withDisplayName("odubtlmjt")
                            .withOrder(84.25077042113641D)
                            .withDescription("skkfmk")
                            .withType(SolutionType.BEST_PRACTICES)
                            .withData(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()))))),
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-09-21T12:15:57Z"))
                    .withEndTime(OffsetDateTime.parse("2021-11-20T10:28:03Z"))
                    .withMessage("edlrslskkzpxvj")
                    .withSource("dpvocojhpcn")
                    .withPriority(99.01154501493065D)
                    .withMetadata(
                        Arrays.asList(Arrays.asList(new NameValuePair().withName("gyte").withValue("zilmhivzkww")),
                            Arrays.asList(new NameValuePair().withName("knrzdajlskzpt").withValue("ulweucyrth"),
                                new NameValuePair().withName("lehmcgcjeinueho").withValue("mvfejvqnttmbqd"),
                                new NameValuePair().withName("zfivfokpysthhzag").withValue("wyy")),
                            Arrays.asList(new NameValuePair().withName("g").withValue("uzejgvkvebaqszl"),
                                new NameValuePair().withName("zlsmmdqgmihzpim").withValue("rh"),
                                new NameValuePair().withName("t").withValue("nklogxsvtzarhzv"),
                                new NameValuePair().withName("sqktcmbjwz").withValue("slpkybtg")),
                            Arrays.asList(new NameValuePair().withName("zp").withValue("jsqjcemqbm"),
                                new NameValuePair().withName("vqar").withValue("xuqreblu"))))
                    .withType(IssueType.RUNTIME_ISSUE_DETECTED)
                    .withSolutions(
                        Arrays.asList(new Solution().withId(77.21742608138183D)
                            .withDisplayName("td")
                            .withOrder(78.47283513389328D)
                            .withDescription("kraokq")
                            .withType(SolutionType.DEEP_INVESTIGATION)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))))))
            .withSolutions(Arrays.asList(
                new Solution().withId(18.01040604276253D)
                    .withDisplayName("aknwfrkebsmh")
                    .withOrder(13.102255083796344D)
                    .withDescription("igatolekscbctna")
                    .withType(SolutionType.QUICK_SOLUTION)
                    .withData(Arrays.asList(
                        Arrays.asList(new NameValuePair().withName("xpdcldpkawnsnl").withValue("mouxwksqmudmfco"),
                            new NameValuePair().withName("icziuswswjrkb").withValue("jhbtqq")),
                        Arrays.asList(new NameValuePair().withName("scyrfwbivqv").withValue("fuy"),
                            new NameValuePair().withName("vbhlimbyqecro").withValue("likcdrd"),
                            new NameValuePair().withName("saxxob").withValue("fkwiyjv"),
                            new NameValuePair().withName("ko").withValue("nawnvz")),
                        Arrays.asList(new NameValuePair().withName("k").withValue("wsxvjab")),
                        Arrays.asList(new NameValuePair().withName("axuyvymcnud").withValue("oabhjxwxqweuip"))))
                    .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair().withName("m").withValue("nsqxtltc"),
                        new NameValuePair().withName("rdpqgfhy").withValue("rakkld"),
                        new NameValuePair().withName("c").withValue("cmfcnrjajq")))),
                new Solution().withId(70.43040806107179D)
                    .withDisplayName("tie")
                    .withOrder(25.23949071289734D)
                    .withDescription("xxgfbbmtlpqagyn")
                    .withType(SolutionType.QUICK_SOLUTION)
                    .withData(Arrays.asList(Arrays.asList(new NameValuePair().withName("ali").withValue("ryqxzxa"),
                        new NameValuePair().withName("ibmq").withValue("iymqr"),
                        new NameValuePair().withName("guhfupe").withValue("svvoqsbpkflanfk"))))
                    .withMetadata(
                        Arrays.asList(Arrays.asList(new NameValuePair().withName("owuz").withValue("puohdkcprgukxrz")),
                            Arrays.asList(new NameValuePair().withName("chlutixmqru").withValue("izcbfzmcrunfhiuc")),
                            Arrays.asList(new NameValuePair().withName("bcpaqktkrumzued").withValue("zbfvxovqkxiu"),
                                new NameValuePair().withName("ggvqrnhyhlwcjs").withValue("gjhffbxr"),
                                new NameValuePair().withName("kijpeuqlsdxeqztv").withValue("mwwmjswenaww"),
                                new NameValuePair().withName("ecleqioulndhzyo").withValue("jhtollh")))),
                new Solution().withId(45.2180699799809D)
                    .withDisplayName("ytz")
                    .withOrder(97.3456302798663D)
                    .withDescription("pnovyoanfbcs")
                    .withType(SolutionType.QUICK_SOLUTION)
                    .withData(Arrays.asList(Arrays.asList(new NameValuePair().withName("t").withValue("gvjrktpgaeuky"),
                        new NameValuePair().withName("ohpmwhqn").withValue("sklhsidsjtdlp"),
                        new NameValuePair().withName("injgazlsvbzfcpuo").withValue("dwjcciklhs"),
                        new NameValuePair().withName("krdre").withValue("olr"))))
                    .withMetadata(Arrays.asList(
                        Arrays.asList(new NameValuePair().withName("beivdlhydwbdbfg").withValue("punytjl")),
                        Arrays.asList(new NameValuePair().withName("mmpathu").withValue("ah"),
                            new NameValuePair().withName("an").withValue("wllbv"),
                            new NameValuePair().withName("zsffte").withValue("us"),
                            new NameValuePair().withName("tjtgravaqogfkb").withValue("auzlqbtxxw")),
                        Arrays.asList(new NameValuePair().withName("njzudr").withValue("zkg")),
                        Arrays.asList(new NameValuePair().withName("oywhczzqrhmngqbe").withValue("gis"),
                            new NameValuePair().withName("wnykdidjchlrmpw").withValue("ofldseacdhz"),
                            new NameValuePair().withName("kbrfgdrwji").withValue("whfjsrwqrxe"),
                            new NameValuePair().withName("gcwvrrmdqntycna").withValue("hvmaxgnuyeamcmhu"))))));
        model = BinaryData.fromObject(model).toObject(AbnormalTimePeriod.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-12T18:01:58Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-28T04:30:58Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-15T03:56:29Z"), model.events().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T01:40:23Z"), model.events().get(0).endTime());
        Assertions.assertEquals("dmljzacvumepjp", model.events().get(0).message());
        Assertions.assertEquals("bn", model.events().get(0).source());
        Assertions.assertEquals(85.16103349191285D, model.events().get(0).priority());
        Assertions.assertEquals("exleqirccjcl", model.events().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("cgxvrpj", model.events().get(0).metadata().get(0).get(0).value());
        Assertions.assertEquals(IssueType.SERVICE_INCIDENT, model.events().get(0).type());
        Assertions.assertEquals(75.61683186919682D, model.events().get(0).solutions().get(0).id());
        Assertions.assertEquals("pzeqacdldtz", model.events().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(98.45272812429768D, model.events().get(0).solutions().get(0).order());
        Assertions.assertEquals("fcpczshnuqndaiz", model.events().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.BEST_PRACTICES, model.events().get(0).solutions().get(0).type());
        Assertions.assertEquals(18.01040604276253D, model.solutions().get(0).id());
        Assertions.assertEquals("aknwfrkebsmh", model.solutions().get(0).displayName());
        Assertions.assertEquals(13.102255083796344D, model.solutions().get(0).order());
        Assertions.assertEquals("igatolekscbctna", model.solutions().get(0).description());
        Assertions.assertEquals(SolutionType.QUICK_SOLUTION, model.solutions().get(0).type());
        Assertions.assertEquals("xpdcldpkawnsnl", model.solutions().get(0).data().get(0).get(0).name());
        Assertions.assertEquals("mouxwksqmudmfco", model.solutions().get(0).data().get(0).get(0).value());
        Assertions.assertEquals("m", model.solutions().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("nsqxtltc", model.solutions().get(0).metadata().get(0).get(0).value());
    }
}
