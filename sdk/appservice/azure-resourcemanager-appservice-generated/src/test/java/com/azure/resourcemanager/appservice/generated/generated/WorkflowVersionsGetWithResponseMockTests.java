// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.ParameterType;
import com.azure.resourcemanager.appservice.generated.models.WorkflowState;
import com.azure.resourcemanager.appservice.generated.models.WorkflowVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowVersionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Moving\",\"createdTime\":\"2021-03-30T05:54:32Z\",\"changedTime\":\"2021-06-28T05:49:19Z\",\"state\":\"NotSpecified\",\"version\":\"rfscr\",\"accessEndpoint\":\"rq\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{},{},{},{}],\"accessEndpointIpAddresses\":[{}]},\"connector\":{\"outgoingIpAddresses\":[{},{}],\"accessEndpointIpAddresses\":[{},{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"fziixyxntuz\":{},\"ceuz\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"dsqil\":{},\"vxpfayophpu\":{},\"cca\":{},\"hbqvbute\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"ivekrgvzjt\":{},\"jrrkdlw\":{},\"ozccdoat\":{},\"nktheh\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"iavdhhcikl\":{},\"nroxgwqgbvnctcbm\":{}}}}},\"sku\":{\"name\":\"NotSpecified\",\"plan\":{\"id\":\"vxdbztwkzfpuw\",\"name\":\"juixbtkuviuxtyvp\",\"type\":\"gxdzopfkz\"}},\"integrationAccount\":{\"id\":\"nxznlxcjkteu\",\"name\":\"tqv\",\"type\":\"tqsbmurbl\"},\"definition\":\"datav\",\"parameters\":{\"gyhzucpix\":{\"type\":\"Int\",\"value\":\"datahlrhjik\",\"metadata\":\"datafjylh\",\"description\":\"ibaowclbznw\"},\"zmuv\":{\"type\":\"Array\",\"value\":\"datacpchbcbdpyo\",\"metadata\":\"dataqbp\",\"description\":\"hnhyxcwsnh\"}}},\"location\":\"r\",\"tags\":{\"mnmqydpie\":\"cxdam\",\"yfnpcrsfq\":\"eru\",\"czdelqazb\":\"qmlisjqonvjur\"},\"id\":\"ixg\",\"name\":\"rkbhwwpaec\",\"type\":\"uvqacae\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkflowVersion response = manager.workflowVersions()
            .getWithResponse("nauleofdxzno", "kdoffeu", "v", "gnugiiyc", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("r", response.location());
        Assertions.assertEquals("cxdam", response.tags().get("mnmqydpie"));
        Assertions.assertEquals(WorkflowState.NOT_SPECIFIED, response.state());
        Assertions.assertEquals("nxznlxcjkteu", response.integrationAccount().id());
        Assertions.assertEquals(ParameterType.INT, response.parameters().get("gyhzucpix").type());
        Assertions.assertEquals("ibaowclbznw", response.parameters().get("gyhzucpix").description());
    }
}
