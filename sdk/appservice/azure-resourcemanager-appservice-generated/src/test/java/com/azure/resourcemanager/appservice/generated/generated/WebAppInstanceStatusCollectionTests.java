// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.WebSiteInstanceStatusInner;
import com.azure.resourcemanager.appservice.generated.models.ContainerCpuStatistics;
import com.azure.resourcemanager.appservice.generated.models.ContainerInfo;
import com.azure.resourcemanager.appservice.generated.models.ContainerMemoryStatistics;
import com.azure.resourcemanager.appservice.generated.models.ContainerNetworkInterfaceStatistics;
import com.azure.resourcemanager.appservice.generated.models.SiteRuntimeState;
import com.azure.resourcemanager.appservice.generated.models.WebAppInstanceStatusCollection;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebAppInstanceStatusCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebAppInstanceStatusCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"state\":\"STOPPED\",\"statusUrl\":\"lwtidcnz\",\"detectorUrl\":\"g\",\"consoleUrl\":\"upjhltyl\",\"healthCheckUrl\":\"udvbgvz\",\"containers\":{\"d\":{\"currentTimeStamp\":\"2021-07-17T03:07:54Z\",\"previousTimeStamp\":\"2021-08-05T11:43:14Z\",\"currentCpuStats\":{},\"previousCpuStats\":{},\"memoryStats\":{},\"name\":\"aziydpoknse\",\"id\":\"mbdqra\",\"eth0\":{}},\"flleirmtxf\":{\"currentTimeStamp\":\"2021-05-19T00:01:07Z\",\"previousTimeStamp\":\"2021-05-24T14:08:04Z\",\"currentCpuStats\":{},\"previousCpuStats\":{},\"memoryStats\":{},\"name\":\"lqwzkny\",\"id\":\"xysvclfjyclvild\",\"eth0\":{}}}},\"kind\":\"fildcgbfouzfbp\",\"id\":\"cryvidbzdylbvj\",\"name\":\"tgngwnxjftecg\",\"type\":\"rzsqm\"},{\"properties\":{\"state\":\"READY\",\"statusUrl\":\"kzb\",\"detectorUrl\":\"haa\",\"consoleUrl\":\"xoyxuuco\",\"healthCheckUrl\":\"syruxrzhhlhrvmg\",\"containers\":{\"iugo\":{\"currentTimeStamp\":\"2021-11-20T13:10:40Z\",\"previousTimeStamp\":\"2021-05-24T04:53:13Z\",\"currentCpuStats\":{},\"previousCpuStats\":{},\"memoryStats\":{},\"name\":\"iforomppzsauq\",\"id\":\"uhplfcmp\",\"eth0\":{}},\"akgixhqjq\":{\"currentTimeStamp\":\"2021-09-24T22:44:28Z\",\"previousTimeStamp\":\"2021-07-25T07:42:19Z\",\"currentCpuStats\":{},\"previousCpuStats\":{},\"memoryStats\":{},\"name\":\"ymwic\",\"id\":\"rncfu\",\"eth0\":{}},\"tsnvonvbftswcdop\":{\"currentTimeStamp\":\"2021-06-09T18:17:18Z\",\"previousTimeStamp\":\"2021-11-25T18:25:16Z\",\"currentCpuStats\":{},\"previousCpuStats\":{},\"memoryStats\":{},\"name\":\"twfgoclalvemn\",\"id\":\"ugabkyydsyweoh\",\"eth0\":{}}}},\"kind\":\"eptvdticcaflgzwk\",\"id\":\"pxdkbtwoqhgppwxn\",\"name\":\"kfzrxxf\",\"type\":\"duvqzjnnuww\"}],\"nextLink\":\"zrfxajtbcqj\"}")
            .toObject(WebAppInstanceStatusCollection.class);
        Assertions.assertEquals("fildcgbfouzfbp", model.value().get(0).kind());
        Assertions.assertEquals(SiteRuntimeState.STOPPED, model.value().get(0).state());
        Assertions.assertEquals("lwtidcnz", model.value().get(0).statusUrl());
        Assertions.assertEquals("g", model.value().get(0).detectorUrl());
        Assertions.assertEquals("upjhltyl", model.value().get(0).consoleUrl());
        Assertions.assertEquals("udvbgvz", model.value().get(0).healthCheckUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T03:07:54Z"),
            model.value().get(0).containers().get("d").currentTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T11:43:14Z"),
            model.value().get(0).containers().get("d").previousTimestamp());
        Assertions.assertEquals("aziydpoknse", model.value().get(0).containers().get("d").name());
        Assertions.assertEquals("mbdqra", model.value().get(0).containers().get("d").id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebAppInstanceStatusCollection model = new WebAppInstanceStatusCollection().withValue(Arrays.asList(
            new WebSiteInstanceStatusInner().withKind("fildcgbfouzfbp")
                .withState(SiteRuntimeState.STOPPED)
                .withStatusUrl("lwtidcnz")
                .withDetectorUrl("g")
                .withConsoleUrl("upjhltyl")
                .withHealthCheckUrl("udvbgvz")
                .withContainers(mapOf("d",
                    new ContainerInfo().withCurrentTimestamp(OffsetDateTime.parse("2021-07-17T03:07:54Z"))
                        .withPreviousTimestamp(OffsetDateTime.parse("2021-08-05T11:43:14Z"))
                        .withCurrentCpuStats(new ContainerCpuStatistics())
                        .withPreviousCpuStats(new ContainerCpuStatistics())
                        .withMemoryStats(new ContainerMemoryStatistics())
                        .withName("aziydpoknse")
                        .withId("mbdqra")
                        .withEth0(new ContainerNetworkInterfaceStatistics()),
                    "flleirmtxf",
                    new ContainerInfo().withCurrentTimestamp(OffsetDateTime.parse("2021-05-19T00:01:07Z"))
                        .withPreviousTimestamp(OffsetDateTime.parse("2021-05-24T14:08:04Z"))
                        .withCurrentCpuStats(new ContainerCpuStatistics())
                        .withPreviousCpuStats(new ContainerCpuStatistics())
                        .withMemoryStats(new ContainerMemoryStatistics())
                        .withName("lqwzkny")
                        .withId("xysvclfjyclvild")
                        .withEth0(new ContainerNetworkInterfaceStatistics()))),
            new WebSiteInstanceStatusInner().withKind("eptvdticcaflgzwk")
                .withState(SiteRuntimeState.READY)
                .withStatusUrl("kzb")
                .withDetectorUrl("haa")
                .withConsoleUrl("xoyxuuco")
                .withHealthCheckUrl("syruxrzhhlhrvmg")
                .withContainers(mapOf("iugo",
                    new ContainerInfo().withCurrentTimestamp(OffsetDateTime.parse("2021-11-20T13:10:40Z"))
                        .withPreviousTimestamp(OffsetDateTime.parse("2021-05-24T04:53:13Z"))
                        .withCurrentCpuStats(new ContainerCpuStatistics())
                        .withPreviousCpuStats(new ContainerCpuStatistics())
                        .withMemoryStats(new ContainerMemoryStatistics())
                        .withName("iforomppzsauq")
                        .withId("uhplfcmp")
                        .withEth0(new ContainerNetworkInterfaceStatistics()),
                    "akgixhqjq",
                    new ContainerInfo().withCurrentTimestamp(OffsetDateTime.parse("2021-09-24T22:44:28Z"))
                        .withPreviousTimestamp(OffsetDateTime.parse("2021-07-25T07:42:19Z"))
                        .withCurrentCpuStats(new ContainerCpuStatistics())
                        .withPreviousCpuStats(new ContainerCpuStatistics())
                        .withMemoryStats(new ContainerMemoryStatistics())
                        .withName("ymwic")
                        .withId("rncfu")
                        .withEth0(new ContainerNetworkInterfaceStatistics()),
                    "tsnvonvbftswcdop",
                    new ContainerInfo().withCurrentTimestamp(OffsetDateTime.parse("2021-06-09T18:17:18Z"))
                        .withPreviousTimestamp(OffsetDateTime.parse("2021-11-25T18:25:16Z"))
                        .withCurrentCpuStats(new ContainerCpuStatistics())
                        .withPreviousCpuStats(new ContainerCpuStatistics())
                        .withMemoryStats(new ContainerMemoryStatistics())
                        .withName("twfgoclalvemn")
                        .withId("ugabkyydsyweoh")
                        .withEth0(new ContainerNetworkInterfaceStatistics())))));
        model = BinaryData.fromObject(model).toObject(WebAppInstanceStatusCollection.class);
        Assertions.assertEquals("fildcgbfouzfbp", model.value().get(0).kind());
        Assertions.assertEquals(SiteRuntimeState.STOPPED, model.value().get(0).state());
        Assertions.assertEquals("lwtidcnz", model.value().get(0).statusUrl());
        Assertions.assertEquals("g", model.value().get(0).detectorUrl());
        Assertions.assertEquals("upjhltyl", model.value().get(0).consoleUrl());
        Assertions.assertEquals("udvbgvz", model.value().get(0).healthCheckUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-17T03:07:54Z"),
            model.value().get(0).containers().get("d").currentTimestamp());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-05T11:43:14Z"),
            model.value().get(0).containers().get("d").previousTimestamp());
        Assertions.assertEquals("aziydpoknse", model.value().get(0).containers().get("d").name());
        Assertions.assertEquals("mbdqra", model.value().get(0).containers().get("d").id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
