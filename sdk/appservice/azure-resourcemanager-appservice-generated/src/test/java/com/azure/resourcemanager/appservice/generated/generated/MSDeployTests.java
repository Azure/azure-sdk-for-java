// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.MSDeploy;
import com.azure.resourcemanager.appservice.generated.models.MSDeployCore;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MSDeployTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MSDeploy model = BinaryData.fromString(
            "{\"properties\":{\"addOnPackages\":[{\"packageUri\":\"lcmwbejyw\",\"connectionString\":\"vnhwwkrmqe\",\"dbType\":\"hha\",\"setParametersXmlFileUri\":\"fudfyziru\",\"setParameters\":{\"xg\":\"njxiakgyjmzb\",\"brdcvoloxtvqcb\":\"kyluyug\",\"b\":\"ryhmmglv\"},\"skipAppData\":false,\"appOffline\":false},{\"packageUri\":\"okkyankxvcptf\",\"connectionString\":\"bhnkxasomafegazh\",\"dbType\":\"dxp\",\"setParametersXmlFileUri\":\"autfzptrcdzy\",\"setParameters\":{\"rawvoqatdjkaldp\":\"ffvpkdxcyuwenbqv\",\"smxfzynfemqy\":\"e\",\"wgssdquupirnb\":\"kkp\",\"irzyudrq\":\"lqyvdsqxkjwdzp\"},\"skipAppData\":true,\"appOffline\":true}],\"packageUri\":\"mlfouqpskva\",\"connectionString\":\"bpmr\",\"dbType\":\"yjxcqcaczzvw\",\"setParametersXmlFileUri\":\"ztt\",\"setParameters\":{\"svkllrz\":\"yfydqlyyslgyfyb\",\"kg\":\"shhkbchca\"},\"skipAppData\":true,\"appOffline\":true},\"kind\":\"gfwhfzhhru\",\"id\":\"m\",\"name\":\"fyyqjc\",\"type\":\"ibzqrsddcuqddld\"}")
            .toObject(MSDeploy.class);
        Assertions.assertEquals("gfwhfzhhru", model.kind());
        Assertions.assertEquals("lcmwbejyw", model.addOnPackages().get(0).packageUri());
        Assertions.assertEquals("vnhwwkrmqe", model.addOnPackages().get(0).connectionString());
        Assertions.assertEquals("hha", model.addOnPackages().get(0).dbType());
        Assertions.assertEquals("fudfyziru", model.addOnPackages().get(0).setParametersXmlFileUri());
        Assertions.assertEquals("njxiakgyjmzb", model.addOnPackages().get(0).setParameters().get("xg"));
        Assertions.assertEquals(false, model.addOnPackages().get(0).skipAppData());
        Assertions.assertEquals(false, model.addOnPackages().get(0).appOffline());
        Assertions.assertEquals("mlfouqpskva", model.packageUri());
        Assertions.assertEquals("bpmr", model.connectionString());
        Assertions.assertEquals("yjxcqcaczzvw", model.dbType());
        Assertions.assertEquals("ztt", model.setParametersXmlFileUri());
        Assertions.assertEquals("yfydqlyyslgyfyb", model.setParameters().get("svkllrz"));
        Assertions.assertEquals(true, model.skipAppData());
        Assertions.assertEquals(true, model.appOffline());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MSDeploy model
            = new MSDeploy().withKind("gfwhfzhhru")
                .withAddOnPackages(
                    Arrays.asList(
                        new MSDeployCore().withPackageUri("lcmwbejyw")
                            .withConnectionString("vnhwwkrmqe")
                            .withDbType("hha")
                            .withSetParametersXmlFileUri("fudfyziru")
                            .withSetParameters(
                                mapOf("xg", "njxiakgyjmzb", "brdcvoloxtvqcb", "kyluyug", "b", "ryhmmglv"))
                            .withSkipAppData(false)
                            .withAppOffline(false),
                        new MSDeployCore().withPackageUri("okkyankxvcptf")
                            .withConnectionString("bhnkxasomafegazh")
                            .withDbType("dxp")
                            .withSetParametersXmlFileUri("autfzptrcdzy")
                            .withSetParameters(mapOf("rawvoqatdjkaldp", "ffvpkdxcyuwenbqv", "smxfzynfemqy", "e",
                                "wgssdquupirnb", "kkp", "irzyudrq", "lqyvdsqxkjwdzp"))
                            .withSkipAppData(true)
                            .withAppOffline(true)))
                .withPackageUri("mlfouqpskva")
                .withConnectionString("bpmr")
                .withDbType("yjxcqcaczzvw")
                .withSetParametersXmlFileUri("ztt")
                .withSetParameters(mapOf("svkllrz", "yfydqlyyslgyfyb", "kg", "shhkbchca"))
                .withSkipAppData(true)
                .withAppOffline(true);
        model = BinaryData.fromObject(model).toObject(MSDeploy.class);
        Assertions.assertEquals("gfwhfzhhru", model.kind());
        Assertions.assertEquals("lcmwbejyw", model.addOnPackages().get(0).packageUri());
        Assertions.assertEquals("vnhwwkrmqe", model.addOnPackages().get(0).connectionString());
        Assertions.assertEquals("hha", model.addOnPackages().get(0).dbType());
        Assertions.assertEquals("fudfyziru", model.addOnPackages().get(0).setParametersXmlFileUri());
        Assertions.assertEquals("njxiakgyjmzb", model.addOnPackages().get(0).setParameters().get("xg"));
        Assertions.assertEquals(false, model.addOnPackages().get(0).skipAppData());
        Assertions.assertEquals(false, model.addOnPackages().get(0).appOffline());
        Assertions.assertEquals("mlfouqpskva", model.packageUri());
        Assertions.assertEquals("bpmr", model.connectionString());
        Assertions.assertEquals("yjxcqcaczzvw", model.dbType());
        Assertions.assertEquals("ztt", model.setParametersXmlFileUri());
        Assertions.assertEquals("yfydqlyyslgyfyb", model.setParameters().get("svkllrz"));
        Assertions.assertEquals(true, model.skipAppData());
        Assertions.assertEquals(true, model.appOffline());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
