// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.MSDeployProperties;
import com.azure.resourcemanager.appservice.generated.models.MSDeployCore;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MSDeployPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MSDeployProperties model = BinaryData.fromString(
            "{\"addOnPackages\":[{\"packageUri\":\"fztqewq\",\"connectionString\":\"jesxjhtyzzwqo\",\"dbType\":\"goyineuaxpmezit\",\"setParametersXmlFileUri\":\"uzlweo\",\"setParameters\":{\"whlbpjuajz\":\"oafzdypzlxlmndh\",\"itnwlyhbujysv\":\"xav\",\"abtpgnqtjtnn\":\"tyyddbhat\"},\"skipAppData\":false,\"appOffline\":false},{\"packageUri\":\"ciga\",\"connectionString\":\"mdfspkdnxqxzxter\",\"dbType\":\"zrrwsciclhdw\",\"setParametersXmlFileUri\":\"nvtolzj\",\"setParameters\":{\"aknk\":\"ryxsg\"},\"skipAppData\":false,\"appOffline\":true}],\"packageUri\":\"pvi\",\"connectionString\":\"mw\",\"dbType\":\"pvdrohulobkabhvx\",\"setParametersXmlFileUri\":\"a\",\"setParameters\":{\"gyobmk\":\"znirnygtix\",\"dclt\":\"hvdlorxzpqdit\",\"mw\":\"cieile\"},\"skipAppData\":false,\"appOffline\":false}")
            .toObject(MSDeployProperties.class);
        Assertions.assertEquals("pvi", model.packageUri());
        Assertions.assertEquals("mw", model.connectionString());
        Assertions.assertEquals("pvdrohulobkabhvx", model.dbType());
        Assertions.assertEquals("a", model.setParametersXmlFileUri());
        Assertions.assertEquals("znirnygtix", model.setParameters().get("gyobmk"));
        Assertions.assertEquals(false, model.skipAppData());
        Assertions.assertEquals(false, model.appOffline());
        Assertions.assertEquals("fztqewq", model.addOnPackages().get(0).packageUri());
        Assertions.assertEquals("jesxjhtyzzwqo", model.addOnPackages().get(0).connectionString());
        Assertions.assertEquals("goyineuaxpmezit", model.addOnPackages().get(0).dbType());
        Assertions.assertEquals("uzlweo", model.addOnPackages().get(0).setParametersXmlFileUri());
        Assertions.assertEquals("oafzdypzlxlmndh", model.addOnPackages().get(0).setParameters().get("whlbpjuajz"));
        Assertions.assertEquals(false, model.addOnPackages().get(0).skipAppData());
        Assertions.assertEquals(false, model.addOnPackages().get(0).appOffline());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MSDeployProperties model
            = new MSDeployProperties().withPackageUri("pvi")
                .withConnectionString("mw")
                .withDbType("pvdrohulobkabhvx")
                .withSetParametersXmlFileUri("a")
                .withSetParameters(mapOf("gyobmk", "znirnygtix", "dclt", "hvdlorxzpqdit", "mw", "cieile"))
                .withSkipAppData(false)
                .withAppOffline(false)
                .withAddOnPackages(
                    Arrays.asList(
                        new MSDeployCore().withPackageUri("fztqewq")
                            .withConnectionString("jesxjhtyzzwqo")
                            .withDbType("goyineuaxpmezit")
                            .withSetParametersXmlFileUri("uzlweo")
                            .withSetParameters(mapOf("whlbpjuajz", "oafzdypzlxlmndh", "itnwlyhbujysv", "xav",
                                "abtpgnqtjtnn", "tyyddbhat"))
                            .withSkipAppData(false)
                            .withAppOffline(false),
                        new MSDeployCore().withPackageUri("ciga")
                            .withConnectionString("mdfspkdnxqxzxter")
                            .withDbType("zrrwsciclhdw")
                            .withSetParametersXmlFileUri("nvtolzj")
                            .withSetParameters(mapOf("aknk", "ryxsg"))
                            .withSkipAppData(false)
                            .withAppOffline(true)));
        model = BinaryData.fromObject(model).toObject(MSDeployProperties.class);
        Assertions.assertEquals("pvi", model.packageUri());
        Assertions.assertEquals("mw", model.connectionString());
        Assertions.assertEquals("pvdrohulobkabhvx", model.dbType());
        Assertions.assertEquals("a", model.setParametersXmlFileUri());
        Assertions.assertEquals("znirnygtix", model.setParameters().get("gyobmk"));
        Assertions.assertEquals(false, model.skipAppData());
        Assertions.assertEquals(false, model.appOffline());
        Assertions.assertEquals("fztqewq", model.addOnPackages().get(0).packageUri());
        Assertions.assertEquals("jesxjhtyzzwqo", model.addOnPackages().get(0).connectionString());
        Assertions.assertEquals("goyineuaxpmezit", model.addOnPackages().get(0).dbType());
        Assertions.assertEquals("uzlweo", model.addOnPackages().get(0).setParametersXmlFileUri());
        Assertions.assertEquals("oafzdypzlxlmndh", model.addOnPackages().get(0).setParameters().get("whlbpjuajz"));
        Assertions.assertEquals(false, model.addOnPackages().get(0).skipAppData());
        Assertions.assertEquals(false, model.addOnPackages().get(0).appOffline());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
