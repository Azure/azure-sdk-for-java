// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.SkuInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServiceEnvironmentsListWorkerPoolSkusMockTests {
    @Test
    public void testListWorkerPoolSkus() throws Exception {
        String responseStr
            = "{\"value\":[{\"resourceType\":\"tvdzidldmxf\",\"sku\":{\"name\":\"ywbbanzhdciu\",\"tier\":\"tbvflgkkiuq\",\"size\":\"pafobpyeobrtaevq\",\"family\":\"dhpkiiunyr\",\"capacity\":45294110,\"skuCapacity\":{\"minimum\":571432768,\"maximum\":390176777,\"elasticMaximum\":1854328853,\"default\":1908314078,\"scaleType\":\"tqhrtnqssqyn\"},\"locations\":[\"kit\",\"kphamefzzgwjoau\"],\"capabilities\":[{\"name\":\"pndou\",\"value\":\"fcfgqinaokxo\",\"reason\":\"nzhmz\"},{\"name\":\"srsqzuk\",\"value\":\"txtdmutd\",\"reason\":\"qq\"},{\"name\":\"hklttliuwdrtwq\",\"value\":\"tyaqd\",\"reason\":\"fnomciw\"}]},\"capacity\":{\"minimum\":1912643953,\"maximum\":903634512,\"elasticMaximum\":623746098,\"default\":466904154,\"scaleType\":\"jp\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SkuInfo> response = manager.appServiceEnvironments()
            .listWorkerPoolSkus("tzubgddkujvqzc", "qculwnx", "yyqtjcrpaxwxlfx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("tvdzidldmxf", response.iterator().next().resourceType());
        Assertions.assertEquals("ywbbanzhdciu", response.iterator().next().sku().name());
        Assertions.assertEquals("tbvflgkkiuq", response.iterator().next().sku().tier());
        Assertions.assertEquals("pafobpyeobrtaevq", response.iterator().next().sku().size());
        Assertions.assertEquals("dhpkiiunyr", response.iterator().next().sku().family());
        Assertions.assertEquals(45294110, response.iterator().next().sku().capacity());
        Assertions.assertEquals(571432768, response.iterator().next().sku().skuCapacity().minimum());
        Assertions.assertEquals(390176777, response.iterator().next().sku().skuCapacity().maximum());
        Assertions.assertEquals(1854328853, response.iterator().next().sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(1908314078, response.iterator().next().sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("tqhrtnqssqyn", response.iterator().next().sku().skuCapacity().scaleType());
        Assertions.assertEquals("kit", response.iterator().next().sku().locations().get(0));
        Assertions.assertEquals("pndou", response.iterator().next().sku().capabilities().get(0).name());
        Assertions.assertEquals("fcfgqinaokxo", response.iterator().next().sku().capabilities().get(0).value());
        Assertions.assertEquals("nzhmz", response.iterator().next().sku().capabilities().get(0).reason());
        Assertions.assertEquals(1912643953, response.iterator().next().capacity().minimum());
        Assertions.assertEquals(903634512, response.iterator().next().capacity().maximum());
        Assertions.assertEquals(623746098, response.iterator().next().capacity().elasticMaximum());
        Assertions.assertEquals(466904154, response.iterator().next().capacity().defaultProperty());
        Assertions.assertEquals("jp", response.iterator().next().capacity().scaleType());
    }
}
