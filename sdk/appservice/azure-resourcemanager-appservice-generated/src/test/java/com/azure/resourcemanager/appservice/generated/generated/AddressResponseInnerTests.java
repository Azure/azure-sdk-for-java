// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.AddressResponseInner;
import com.azure.resourcemanager.appservice.generated.models.VirtualIpMapping;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AddressResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AddressResponseInner model = BinaryData.fromString(
            "{\"properties\":{\"serviceIpAddress\":\"xyfwnylrcool\",\"internalIpAddress\":\"tpkiwkkbnujry\",\"outboundIpAddresses\":[\"y\",\"bfpncurdo\",\"wiithtywub\",\"cbihwqk\"],\"vipMappings\":[{\"virtualIP\":\"twjchrdg\",\"internalHttpPort\":916840280,\"internalHttpsPort\":144072003,\"inUse\":false,\"serviceName\":\"ton\"},{\"virtualIP\":\"jl\",\"internalHttpPort\":382280149,\"internalHttpsPort\":1575839239,\"inUse\":true,\"serviceName\":\"gytsbwtovv\"},{\"virtualIP\":\"seinqfiuf\",\"internalHttpPort\":1223110676,\"internalHttpsPort\":757625911,\"inUse\":true,\"serviceName\":\"nepttwqmsni\"}]},\"kind\":\"cdm\",\"id\":\"nrojlpijnkr\",\"name\":\"frddhcrati\",\"type\":\"zronasxift\"}")
            .toObject(AddressResponseInner.class);
        Assertions.assertEquals("cdm", model.kind());
        Assertions.assertEquals("xyfwnylrcool", model.serviceIpAddress());
        Assertions.assertEquals("tpkiwkkbnujry", model.internalIpAddress());
        Assertions.assertEquals("y", model.outboundIpAddresses().get(0));
        Assertions.assertEquals("twjchrdg", model.vipMappings().get(0).virtualIp());
        Assertions.assertEquals(916840280, model.vipMappings().get(0).internalHttpPort());
        Assertions.assertEquals(144072003, model.vipMappings().get(0).internalHttpsPort());
        Assertions.assertEquals(false, model.vipMappings().get(0).inUse());
        Assertions.assertEquals("ton", model.vipMappings().get(0).serviceName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AddressResponseInner model = new AddressResponseInner().withKind("cdm")
            .withServiceIpAddress("xyfwnylrcool")
            .withInternalIpAddress("tpkiwkkbnujry")
            .withOutboundIpAddresses(Arrays.asList("y", "bfpncurdo", "wiithtywub", "cbihwqk"))
            .withVipMappings(Arrays.asList(
                new VirtualIpMapping().withVirtualIp("twjchrdg")
                    .withInternalHttpPort(916840280)
                    .withInternalHttpsPort(144072003)
                    .withInUse(false)
                    .withServiceName("ton"),
                new VirtualIpMapping().withVirtualIp("jl")
                    .withInternalHttpPort(382280149)
                    .withInternalHttpsPort(1575839239)
                    .withInUse(true)
                    .withServiceName("gytsbwtovv"),
                new VirtualIpMapping().withVirtualIp("seinqfiuf")
                    .withInternalHttpPort(1223110676)
                    .withInternalHttpsPort(757625911)
                    .withInUse(true)
                    .withServiceName("nepttwqmsni")));
        model = BinaryData.fromObject(model).toObject(AddressResponseInner.class);
        Assertions.assertEquals("cdm", model.kind());
        Assertions.assertEquals("xyfwnylrcool", model.serviceIpAddress());
        Assertions.assertEquals("tpkiwkkbnujry", model.internalIpAddress());
        Assertions.assertEquals("y", model.outboundIpAddresses().get(0));
        Assertions.assertEquals("twjchrdg", model.vipMappings().get(0).virtualIp());
        Assertions.assertEquals(916840280, model.vipMappings().get(0).internalHttpPort());
        Assertions.assertEquals(144072003, model.vipMappings().get(0).internalHttpsPort());
        Assertions.assertEquals(false, model.vipMappings().get(0).inUse());
        Assertions.assertEquals("ton", model.vipMappings().get(0).serviceName());
    }
}
