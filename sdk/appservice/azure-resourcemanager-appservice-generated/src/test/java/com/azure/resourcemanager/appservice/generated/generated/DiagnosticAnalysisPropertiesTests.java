// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.DetectorDefinition;
import com.azure.resourcemanager.appservice.generated.fluent.models.DiagnosticAnalysisProperties;
import com.azure.resourcemanager.appservice.generated.models.AbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.AnalysisData;
import com.azure.resourcemanager.appservice.generated.models.DataSource;
import com.azure.resourcemanager.appservice.generated.models.DetectorAbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSet;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.ResponseMetadata;
import com.azure.resourcemanager.appservice.generated.models.Solution;
import com.azure.resourcemanager.appservice.generated.models.SolutionType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticAnalysisPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticAnalysisProperties model = BinaryData.fromString(
            "{\"startTime\":\"2021-02-22T14:13:44Z\",\"endTime\":\"2021-03-26T23:45:40Z\",\"abnormalTimePeriods\":[{\"startTime\":\"2021-01-26T10:29:54Z\",\"endTime\":\"2021-09-15T19:18:45Z\",\"events\":[{\"startTime\":\"2021-01-18T17:43:16Z\",\"endTime\":\"2021-03-27T10:38:40Z\",\"message\":\"jsxtlgflwfgziiuc\",\"source\":\"jceatlijjjrtva\",\"priority\":0.900902829719652,\"metaData\":[[{},{},{},{}],[{}],[{},{},{},{}],[{},{},{}]],\"type\":\"Other\",\"solutions\":[{},{},{},{}]},{\"startTime\":\"2021-06-28T21:04:41Z\",\"endTime\":\"2021-04-02T14:03:37Z\",\"message\":\"nmignohi\",\"source\":\"gqogjwpindedva\",\"priority\":36.7873191085456,\"metaData\":[[{},{}],[{}]],\"type\":\"AppDeployment\",\"solutions\":[{},{},{}]},{\"startTime\":\"2021-10-06T21:37:11Z\",\"endTime\":\"2021-10-26T18:33:48Z\",\"message\":\"fxzirzzihvwyp\",\"source\":\"u\",\"priority\":86.11455018067196,\"metaData\":[[{}]],\"type\":\"AppDeployment\",\"solutions\":[{},{}]}],\"solutions\":[{\"id\":86.89282656143686,\"displayName\":\"yvdmvx\",\"order\":2.4793735327829913,\"description\":\"frgnawbabgfbktyj\",\"type\":\"DeepInvestigation\",\"data\":[[{},{},{},{}]],\"metadata\":[[{},{},{},{}]]},{\"id\":48.09027497497809,\"displayName\":\"zgowox\",\"order\":10.12419177133319,\"description\":\"jcx\",\"type\":\"DeepInvestigation\",\"data\":[[{},{},{}],[{},{}],[{},{}]],\"metadata\":[[{},{},{}],[{},{},{}],[{}],[{},{},{},{}]]},{\"id\":73.92967990325072,\"displayName\":\"eagbjqvl\",\"order\":78.06000760126295,\"description\":\"z\",\"type\":\"BestPractices\",\"data\":[[{},{}]],\"metadata\":[[{},{},{}],[{},{},{},{}]]},{\"id\":39.05949850991617,\"displayName\":\"ubyzn\",\"order\":2.188919235721698,\"description\":\"eebgvopemtuoqu\",\"type\":\"BestPractices\",\"data\":[[{}]],\"metadata\":[[{},{},{}]]}]}],\"payload\":[{\"source\":\"lqqbtnyjpylxdbfv\",\"detectorDefinition\":{\"displayName\":\"vmsxbaevwjcnkot\",\"description\":\"wuhvaj\",\"rank\":43.28383254886443,\"isEnabled\":false},\"metrics\":[{\"name\":\"zakzwjiqullqxbd\",\"unit\":\"rscmqerndbrnye\",\"startTime\":\"2021-02-12T23:13:01Z\",\"endTime\":\"2021-06-12T20:12:09Z\",\"timeGrain\":\"nxrkadjfy\",\"values\":[{}]},{\"name\":\"ui\",\"unit\":\"ri\",\"startTime\":\"2021-05-20T14:45:03Z\",\"endTime\":\"2021-08-30T14:43:57Z\",\"timeGrain\":\"fkx\",\"values\":[{},{},{},{}]},{\"name\":\"r\",\"unit\":\"iutgnjizbeewoiy\",\"startTime\":\"2021-10-28T19:01:01Z\",\"endTime\":\"2021-05-31T12:39:03Z\",\"timeGrain\":\"uyrsrziuctix\",\"values\":[{}]},{\"name\":\"uifr\",\"unit\":\"kaapezkiswqjmdg\",\"startTime\":\"2021-02-02T10:20:58Z\",\"endTime\":\"2021-04-16T10:40:37Z\",\"timeGrain\":\"ybjufptb\",\"values\":[{}]}],\"data\":[[{\"name\":\"uiyqvldaswvppi\",\"value\":\"qzlgcndhzxrrfcfs\"},{\"name\":\"khgsnxuwwkpphefs\",\"value\":\"xlb\"},{\"name\":\"omeikjcl\",\"value\":\"acnmwpfsuqtaaz\"},{\"name\":\"bxyxoy\",\"value\":\"uqqiqezxlhd\"}],[{\"name\":\"dcadwvpsozjiihjr\",\"value\":\"bmrzoepnx\"}],[{\"name\":\"wnjkgvfn\",\"value\":\"aursqftibtyi\"},{\"name\":\"yvp\",\"value\":\"fqjpnqno\"},{\"name\":\"sbede\",\"value\":\"exkxbhx\"},{\"name\":\"cnulgmnhjevdy\",\"value\":\"fajs\"}],[{\"name\":\"kmq\",\"value\":\"zkivyhjrliizjix\"},{\"name\":\"fhefk\",\"value\":\"bsolronqqlmg\"},{\"name\":\"qxsjxte\",\"value\":\"xhvuqbozool\"},{\"name\":\"ocarkuzlbcnndt\",\"value\":\"xawqy\"}]],\"detectorMetaData\":{\"dataSource\":{\"instructions\":[\"yzm\"],\"dataSourceUri\":[{},{}]}}},{\"source\":\"exn\",\"detectorDefinition\":{\"displayName\":\"ckywymxga\",\"description\":\"jkdtfoh\",\"rank\":28.876828835137182,\"isEnabled\":true},\"metrics\":[{\"name\":\"rsiwdyjqur\",\"unit\":\"crraueekcsu\",\"startTime\":\"2021-11-12T00:09:07Z\",\"endTime\":\"2021-06-01T13:42:14Z\",\"timeGrain\":\"acbcb\",\"values\":[{},{},{}]}],\"data\":[[{\"name\":\"ywmhmptyrilkfbnr\",\"value\":\"xvztpbnfnqtxj\"},{\"name\":\"m\",\"value\":\"swbnfddepldwqjns\"},{\"name\":\"ygleexa\",\"value\":\"mywhsb\"},{\"name\":\"arycsjjzyvoaqa\",\"value\":\"vehzp\"}],[{\"name\":\"krrbhmpful\",\"value\":\"efgybpmfbfununmp\"},{\"name\":\"rvfyifkdsch\",\"value\":\"vfictnkjjwgcwn\"}]],\"detectorMetaData\":{\"dataSource\":{\"instructions\":[\"fyrtogmhmjp\",\"scdfpdqw\",\"ygevgwmseharx\",\"fv\"],\"dataSourceUri\":[{},{},{}]}}},{\"source\":\"tmbpjp\",\"detectorDefinition\":{\"displayName\":\"wjhrsidqpxlbtpa\",\"description\":\"tngatwmykyu\",\"rank\":11.509065758091507,\"isEnabled\":false},\"metrics\":[{\"name\":\"hpycvjqdvdwkq\",\"unit\":\"drlefgnaavuag\",\"startTime\":\"2021-10-24T22:34:59Z\",\"endTime\":\"2021-11-18T20:03:49Z\",\"timeGrain\":\"utnpdctuhspfefyi\",\"values\":[{},{}]}],\"data\":[[{\"name\":\"ldphmtybkcgs\",\"value\":\"h\"}],[{\"name\":\"nmwynefxexl\",\"value\":\"i\"},{\"name\":\"xtjrrlk\",\"value\":\"skjh\"}],[{\"name\":\"lajfoxcxscvslxlh\",\"value\":\"vkrmukmyjmkx\"},{\"name\":\"tcsloj\",\"value\":\"qid\"}]],\"detectorMetaData\":{\"dataSource\":{\"instructions\":[\"xjhqxcsqhtkb\",\"nqlrng\",\"dmbi\",\"psnaww\"],\"dataSourceUri\":[{},{},{},{}]}}}],\"nonCorrelatedDetectors\":[{\"displayName\":\"hhl\",\"description\":\"ricctkwmuqqoa\",\"rank\":97.97951919149813,\"isEnabled\":true},{\"displayName\":\"esrw\",\"description\":\"exh\",\"rank\":79.46611453123114,\"isEnabled\":true}]}")
            .toObject(DiagnosticAnalysisProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T14:13:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T23:45:40Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-26T10:29:54Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T19:18:45Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T17:43:16Z"),
            model.abnormalTimePeriods().get(0).events().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-27T10:38:40Z"),
            model.abnormalTimePeriods().get(0).events().get(0).endTime());
        Assertions.assertEquals("jsxtlgflwfgziiuc", model.abnormalTimePeriods().get(0).events().get(0).message());
        Assertions.assertEquals("jceatlijjjrtva", model.abnormalTimePeriods().get(0).events().get(0).source());
        Assertions.assertEquals(0.900902829719652D, model.abnormalTimePeriods().get(0).events().get(0).priority());
        Assertions.assertEquals(IssueType.OTHER, model.abnormalTimePeriods().get(0).events().get(0).type());
        Assertions.assertEquals(86.89282656143686D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("yvdmvx", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(2.4793735327829913D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("frgnawbabgfbktyj",
            model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("lqqbtnyjpylxdbfv", model.payload().get(0).source());
        Assertions.assertEquals("zakzwjiqullqxbd", model.payload().get(0).metrics().get(0).name());
        Assertions.assertEquals("rscmqerndbrnye", model.payload().get(0).metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T23:13:01Z"),
            model.payload().get(0).metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-12T20:12:09Z"),
            model.payload().get(0).metrics().get(0).endTime());
        Assertions.assertEquals("nxrkadjfy", model.payload().get(0).metrics().get(0).timeGrain());
        Assertions.assertEquals("uiyqvldaswvppi", model.payload().get(0).data().get(0).get(0).name());
        Assertions.assertEquals("qzlgcndhzxrrfcfs", model.payload().get(0).data().get(0).get(0).value());
        Assertions.assertEquals("yzm", model.payload().get(0).detectorMetadata().dataSource().instructions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticAnalysisProperties model
            = new DiagnosticAnalysisProperties().withStartTime(OffsetDateTime.parse("2021-02-22T14:13:44Z"))
                .withEndTime(OffsetDateTime.parse("2021-03-26T23:45:40Z"))
                .withAbnormalTimePeriods(Arrays.asList(new AbnormalTimePeriod()
                    .withStartTime(OffsetDateTime.parse("2021-01-26T10:29:54Z"))
                    .withEndTime(OffsetDateTime.parse("2021-09-15T19:18:45Z"))
                    .withEvents(Arrays.asList(
                        new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-01-18T17:43:16Z"))
                            .withEndTime(OffsetDateTime.parse("2021-03-27T10:38:40Z"))
                            .withMessage("jsxtlgflwfgziiuc")
                            .withSource("jceatlijjjrtva")
                            .withPriority(0.900902829719652D)
                            .withMetadata(Arrays.asList(
                                Arrays.asList(
                                    new NameValuePair(), new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))
                            .withType(IssueType.OTHER)
                            .withSolutions(
                                Arrays.asList(new Solution(), new Solution(), new Solution(), new Solution())),
                        new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-06-28T21:04:41Z"))
                            .withEndTime(OffsetDateTime.parse("2021-04-02T14:03:37Z"))
                            .withMessage("nmignohi")
                            .withSource("gqogjwpindedva")
                            .withPriority(36.7873191085456D)
                            .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair())))
                            .withType(IssueType.APP_DEPLOYMENT)
                            .withSolutions(Arrays.asList(new Solution(), new Solution(), new Solution())),
                        new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-10-06T21:37:11Z"))
                            .withEndTime(OffsetDateTime.parse("2021-10-26T18:33:48Z"))
                            .withMessage("fxzirzzihvwyp")
                            .withSource("u")
                            .withPriority(86.11455018067196D)
                            .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair())))
                            .withType(IssueType.APP_DEPLOYMENT)
                            .withSolutions(Arrays.asList(new Solution(), new Solution()))))
                    .withSolutions(Arrays.asList(
                        new Solution().withId(86.89282656143686D)
                            .withDisplayName("yvdmvx")
                            .withOrder(2.4793735327829913D)
                            .withDescription("frgnawbabgfbktyj")
                            .withType(SolutionType.DEEP_INVESTIGATION)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair(),
                                new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair(),
                                new NameValuePair(), new NameValuePair()))),
                        new Solution().withId(48.09027497497809D)
                            .withDisplayName("zgowox")
                            .withOrder(10.12419177133319D)
                            .withDescription("jcx")
                            .withType(SolutionType.DEEP_INVESTIGATION)
                            .withData(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()))),
                        new Solution().withId(73.92967990325072D)
                            .withDisplayName("eagbjqvl")
                            .withOrder(78.06000760126295D)
                            .withDescription("z")
                            .withType(SolutionType.BEST_PRACTICES)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()))),
                        new Solution().withId(39.05949850991617D)
                            .withDisplayName("ubyzn")
                            .withOrder(2.188919235721698D)
                            .withDescription("eebgvopemtuoqu")
                            .withType(SolutionType.BEST_PRACTICES)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))))))
                .withPayload(Arrays.asList(
                    new AnalysisData().withSource("lqqbtnyjpylxdbfv")
                        .withDetectorDefinition(new DetectorDefinition())
                        .withMetrics(Arrays.asList(
                            new DiagnosticMetricSet().withName("zakzwjiqullqxbd")
                                .withUnit("rscmqerndbrnye")
                                .withStartTime(OffsetDateTime.parse("2021-02-12T23:13:01Z"))
                                .withEndTime(OffsetDateTime.parse("2021-06-12T20:12:09Z"))
                                .withTimeGrain("nxrkadjfy")
                                .withValues(Arrays.asList(new DiagnosticMetricSample())),
                            new DiagnosticMetricSet().withName("ui")
                                .withUnit("ri")
                                .withStartTime(OffsetDateTime.parse("2021-05-20T14:45:03Z"))
                                .withEndTime(OffsetDateTime.parse("2021-08-30T14:43:57Z"))
                                .withTimeGrain("fkx")
                                .withValues(Arrays.asList(new DiagnosticMetricSample(), new DiagnosticMetricSample(),
                                    new DiagnosticMetricSample(), new DiagnosticMetricSample())),
                            new DiagnosticMetricSet().withName("r")
                                .withUnit("iutgnjizbeewoiy")
                                .withStartTime(OffsetDateTime.parse("2021-10-28T19:01:01Z"))
                                .withEndTime(OffsetDateTime.parse("2021-05-31T12:39:03Z"))
                                .withTimeGrain("uyrsrziuctix")
                                .withValues(Arrays.asList(new DiagnosticMetricSample())),
                            new DiagnosticMetricSet().withName("uifr")
                                .withUnit("kaapezkiswqjmdg")
                                .withStartTime(OffsetDateTime.parse("2021-02-02T10:20:58Z"))
                                .withEndTime(OffsetDateTime.parse("2021-04-16T10:40:37Z"))
                                .withTimeGrain("ybjufptb")
                                .withValues(Arrays.asList(new DiagnosticMetricSample()))))
                        .withData(Arrays.asList(
                            Arrays.asList(new NameValuePair().withName("uiyqvldaswvppi").withValue("qzlgcndhzxrrfcfs"),
                                new NameValuePair().withName("khgsnxuwwkpphefs").withValue("xlb"),
                                new NameValuePair().withName("omeikjcl").withValue("acnmwpfsuqtaaz"),
                                new NameValuePair().withName("bxyxoy").withValue("uqqiqezxlhd")),
                            Arrays.asList(new NameValuePair().withName("dcadwvpsozjiihjr").withValue("bmrzoepnx")),
                            Arrays.asList(new NameValuePair().withName("wnjkgvfn").withValue("aursqftibtyi"),
                                new NameValuePair().withName("yvp").withValue("fqjpnqno"),
                                new NameValuePair().withName("sbede").withValue("exkxbhx"),
                                new NameValuePair().withName("cnulgmnhjevdy").withValue("fajs")),
                            Arrays.asList(new NameValuePair().withName("kmq").withValue("zkivyhjrliizjix"),
                                new NameValuePair().withName("fhefk").withValue("bsolronqqlmg"),
                                new NameValuePair().withName("qxsjxte").withValue("xhvuqbozool"),
                                new NameValuePair().withName("ocarkuzlbcnndt").withValue("xawqy"))))
                        .withDetectorMetadata(new ResponseMetadata()
                            .withDataSource(new DataSource().withInstructions(Arrays.asList("yzm"))
                                .withDataSourceUri(Arrays.asList(new NameValuePair(), new NameValuePair())))),
                    new AnalysisData().withSource("exn")
                        .withDetectorDefinition(new DetectorDefinition())
                        .withMetrics(Arrays.asList(new DiagnosticMetricSet().withName("rsiwdyjqur")
                            .withUnit("crraueekcsu")
                            .withStartTime(OffsetDateTime.parse("2021-11-12T00:09:07Z"))
                            .withEndTime(OffsetDateTime.parse("2021-06-01T13:42:14Z"))
                            .withTimeGrain("acbcb")
                            .withValues(Arrays.asList(new DiagnosticMetricSample(), new DiagnosticMetricSample(),
                                new DiagnosticMetricSample()))))
                        .withData(Arrays.asList(
                            Arrays.asList(new NameValuePair().withName("ywmhmptyrilkfbnr").withValue("xvztpbnfnqtxj"),
                                new NameValuePair().withName("m").withValue("swbnfddepldwqjns"),
                                new NameValuePair().withName("ygleexa").withValue("mywhsb"),
                                new NameValuePair().withName("arycsjjzyvoaqa").withValue("vehzp")),
                            Arrays.asList(new NameValuePair().withName("krrbhmpful").withValue("efgybpmfbfununmp"),
                                new NameValuePair().withName("rvfyifkdsch").withValue("vfictnkjjwgcwn"))))
                        .withDetectorMetadata(new ResponseMetadata().withDataSource(new DataSource()
                            .withInstructions(Arrays.asList("fyrtogmhmjp", "scdfpdqw", "ygevgwmseharx", "fv"))
                            .withDataSourceUri(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))),
                    new AnalysisData().withSource("tmbpjp")
                        .withDetectorDefinition(new DetectorDefinition())
                        .withMetrics(Arrays.asList(new DiagnosticMetricSet().withName("hpycvjqdvdwkq")
                            .withUnit("drlefgnaavuag")
                            .withStartTime(OffsetDateTime.parse("2021-10-24T22:34:59Z"))
                            .withEndTime(OffsetDateTime.parse("2021-11-18T20:03:49Z"))
                            .withTimeGrain("utnpdctuhspfefyi")
                            .withValues(Arrays.asList(new DiagnosticMetricSample(), new DiagnosticMetricSample()))))
                        .withData(Arrays.asList(
                            Arrays.asList(new NameValuePair().withName("ldphmtybkcgs").withValue("h")),
                            Arrays.asList(new NameValuePair().withName("nmwynefxexl").withValue("i"),
                                new NameValuePair().withName("xtjrrlk").withValue("skjh")),
                            Arrays.asList(new NameValuePair().withName("lajfoxcxscvslxlh").withValue("vkrmukmyjmkx"),
                                new NameValuePair().withName("tcsloj").withValue("qid"))))
                        .withDetectorMetadata(new ResponseMetadata().withDataSource(
                            new DataSource().withInstructions(Arrays.asList("xjhqxcsqhtkb", "nqlrng", "dmbi", "psnaww"))
                                .withDataSourceUri(Arrays.asList(new NameValuePair(), new NameValuePair(),
                                    new NameValuePair(), new NameValuePair()))))))
                .withNonCorrelatedDetectors(Arrays.asList(new DetectorDefinition(), new DetectorDefinition()));
        model = BinaryData.fromObject(model).toObject(DiagnosticAnalysisProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-22T14:13:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T23:45:40Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-26T10:29:54Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T19:18:45Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-18T17:43:16Z"),
            model.abnormalTimePeriods().get(0).events().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-27T10:38:40Z"),
            model.abnormalTimePeriods().get(0).events().get(0).endTime());
        Assertions.assertEquals("jsxtlgflwfgziiuc", model.abnormalTimePeriods().get(0).events().get(0).message());
        Assertions.assertEquals("jceatlijjjrtva", model.abnormalTimePeriods().get(0).events().get(0).source());
        Assertions.assertEquals(0.900902829719652D, model.abnormalTimePeriods().get(0).events().get(0).priority());
        Assertions.assertEquals(IssueType.OTHER, model.abnormalTimePeriods().get(0).events().get(0).type());
        Assertions.assertEquals(86.89282656143686D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("yvdmvx", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(2.4793735327829913D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("frgnawbabgfbktyj",
            model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("lqqbtnyjpylxdbfv", model.payload().get(0).source());
        Assertions.assertEquals("zakzwjiqullqxbd", model.payload().get(0).metrics().get(0).name());
        Assertions.assertEquals("rscmqerndbrnye", model.payload().get(0).metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-12T23:13:01Z"),
            model.payload().get(0).metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-12T20:12:09Z"),
            model.payload().get(0).metrics().get(0).endTime());
        Assertions.assertEquals("nxrkadjfy", model.payload().get(0).metrics().get(0).timeGrain());
        Assertions.assertEquals("uiyqvldaswvppi", model.payload().get(0).data().get(0).get(0).name());
        Assertions.assertEquals("qzlgcndhzxrrfcfs", model.payload().get(0).data().get(0).get(0).value());
        Assertions.assertEquals("yzm", model.payload().get(0).detectorMetadata().dataSource().instructions().get(0));
    }
}
