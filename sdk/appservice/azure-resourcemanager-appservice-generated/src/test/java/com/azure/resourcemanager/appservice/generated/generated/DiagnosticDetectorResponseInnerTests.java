// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.DetectorDefinition;
import com.azure.resourcemanager.appservice.generated.fluent.models.DiagnosticDetectorResponseInner;
import com.azure.resourcemanager.appservice.generated.models.DataSource;
import com.azure.resourcemanager.appservice.generated.models.DetectorAbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSet;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.ResponseMetadata;
import com.azure.resourcemanager.appservice.generated.models.Solution;
import com.azure.resourcemanager.appservice.generated.models.SolutionType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticDetectorResponseInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticDetectorResponseInner model = BinaryData.fromString(
            "{\"properties\":{\"startTime\":\"2021-10-20T15:13:37Z\",\"endTime\":\"2021-04-06T20:03:59Z\",\"issueDetected\":false,\"detectorDefinition\":{\"displayName\":\"ugxyqvnjobfelhl\",\"description\":\"uhzzgqlmfaew\",\"rank\":30.23226487418227,\"isEnabled\":true},\"metrics\":[{\"name\":\"qhttqhnmhkre\",\"unit\":\"dsuxheqdgcrux\",\"startTime\":\"2021-11-07T03:58:23Z\",\"endTime\":\"2021-12-05T15:45:25Z\",\"timeGrain\":\"m\",\"values\":[{\"timestamp\":\"2021-06-04T16:05:44Z\",\"roleInstance\":\"ikpazf\",\"total\":27.11710943236596,\"maximum\":70.73141694044509,\"minimum\":53.53993731873163,\"isAggregated\":false},{\"timestamp\":\"2021-09-23T02:26:49Z\",\"roleInstance\":\"dvwz\",\"total\":58.03329495850146,\"maximum\":96.49197331000619,\"minimum\":78.84233759873129,\"isAggregated\":true}]}],\"abnormalTimePeriods\":[{\"startTime\":\"2021-08-03T05:36:45Z\",\"endTime\":\"2021-05-11T18:29:01Z\",\"message\":\"kfqoixwgiksbb\",\"source\":\"ooxr\",\"priority\":72.64514135172061,\"metaData\":[[{},{},{},{}],[{},{},{},{}],[{},{},{},{}]],\"type\":\"ServiceIncident\",\"solutions\":[{\"id\":2.1489623188320928,\"displayName\":\"acihmbfntu\",\"order\":52.06073474625407,\"description\":\"xvqxbnuvwcgasgo\",\"type\":\"DeepInvestigation\",\"data\":[[],[],[]],\"metadata\":[[],[],[],[]]},{\"id\":18.37758812594812,\"displayName\":\"vs\",\"order\":25.130627210446388,\"description\":\"tjfmkkhtg\",\"type\":\"DeepInvestigation\",\"data\":[[],[],[]],\"metadata\":[[],[],[]]}]},{\"startTime\":\"2021-10-26T04:22Z\",\"endTime\":\"2021-09-02T11:38:55Z\",\"message\":\"ccnaov\",\"source\":\"wazhpabaco\",\"priority\":91.45168199362028,\"metaData\":[[{}]],\"type\":\"UserIssue\",\"solutions\":[{\"id\":49.5219933749751,\"displayName\":\"rcge\",\"order\":93.8521340788661,\"description\":\"bxeetqujxcxxqn\",\"type\":\"BestPractices\",\"data\":[[],[],[],[]],\"metadata\":[[]]},{\"id\":64.09160613096932,\"displayName\":\"cgojmrv\",\"order\":39.06804547619915,\"description\":\"ngz\",\"type\":\"DeepInvestigation\",\"data\":[[]],\"metadata\":[[]]}]}],\"data\":[[{\"name\":\"hskxx\",\"value\":\"nsbvr\"}],[{\"name\":\"gv\",\"value\":\"jrulfucte\"},{\"name\":\"thcfj\",\"value\":\"xlyubqjrostv\"}],[{\"name\":\"qmtzzb\",\"value\":\"rztrxalxrdhabsr\"},{\"name\":\"sn\",\"value\":\"pqatiwkkvyanxkv\"},{\"name\":\"semsvuvd\",\"value\":\"qxetqmmlivrjjx\"},{\"name\":\"xdchp\",\"value\":\"xlehzlxpgfquwzp\"}],[{\"name\":\"belwcer\",\"value\":\"w\"},{\"name\":\"jxljtxbusq\",\"value\":\"xxniuisdzhgbd\"},{\"name\":\"pagsecnad\",\"value\":\"wqrgxfllmqi\"}]],\"responseMetaData\":{\"dataSource\":{\"instructions\":[\"ellnkkii\",\"vmtumxpym\",\"jfuaxroqvqpilrgu\",\"canlduwzorxs\"],\"dataSourceUri\":[{\"name\":\"qk\",\"value\":\"ymxkqvfqepdx\"}]}}},\"kind\":\"tuubwyvpjb\",\"id\":\"wcpjqduqgi\",\"name\":\"exkydfb\",\"type\":\"lj\"}")
            .toObject(DiagnosticDetectorResponseInner.class);
        Assertions.assertEquals("tuubwyvpjb", model.kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T15:13:37Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T20:03:59Z"), model.endTime());
        Assertions.assertEquals(false, model.issueDetected());
        Assertions.assertEquals("qhttqhnmhkre", model.metrics().get(0).name());
        Assertions.assertEquals("dsuxheqdgcrux", model.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T03:58:23Z"), model.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-05T15:45:25Z"), model.metrics().get(0).endTime());
        Assertions.assertEquals("m", model.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T16:05:44Z"),
            model.metrics().get(0).values().get(0).timestamp());
        Assertions.assertEquals("ikpazf", model.metrics().get(0).values().get(0).roleInstance());
        Assertions.assertEquals(27.11710943236596D, model.metrics().get(0).values().get(0).total());
        Assertions.assertEquals(70.73141694044509D, model.metrics().get(0).values().get(0).maximum());
        Assertions.assertEquals(53.53993731873163D, model.metrics().get(0).values().get(0).minimum());
        Assertions.assertEquals(false, model.metrics().get(0).values().get(0).isAggregated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-03T05:36:45Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T18:29:01Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals("kfqoixwgiksbb", model.abnormalTimePeriods().get(0).message());
        Assertions.assertEquals("ooxr", model.abnormalTimePeriods().get(0).source());
        Assertions.assertEquals(72.64514135172061D, model.abnormalTimePeriods().get(0).priority());
        Assertions.assertEquals(IssueType.SERVICE_INCIDENT, model.abnormalTimePeriods().get(0).type());
        Assertions.assertEquals(2.1489623188320928D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("acihmbfntu", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(52.06073474625407D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("xvqxbnuvwcgasgo", model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("hskxx", model.data().get(0).get(0).name());
        Assertions.assertEquals("nsbvr", model.data().get(0).get(0).value());
        Assertions.assertEquals("ellnkkii", model.responseMetadata().dataSource().instructions().get(0));
        Assertions.assertEquals("qk", model.responseMetadata().dataSource().dataSourceUri().get(0).name());
        Assertions.assertEquals("ymxkqvfqepdx", model.responseMetadata().dataSource().dataSourceUri().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticDetectorResponseInner model = new DiagnosticDetectorResponseInner().withKind("tuubwyvpjb")
            .withStartTime(OffsetDateTime.parse("2021-10-20T15:13:37Z"))
            .withEndTime(OffsetDateTime.parse("2021-04-06T20:03:59Z"))
            .withIssueDetected(false)
            .withDetectorDefinition(new DetectorDefinition())
            .withMetrics(Arrays.asList(new DiagnosticMetricSet().withName("qhttqhnmhkre")
                .withUnit("dsuxheqdgcrux")
                .withStartTime(OffsetDateTime.parse("2021-11-07T03:58:23Z"))
                .withEndTime(OffsetDateTime.parse("2021-12-05T15:45:25Z"))
                .withTimeGrain("m")
                .withValues(Arrays.asList(
                    new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-06-04T16:05:44Z"))
                        .withRoleInstance("ikpazf")
                        .withTotal(27.11710943236596D)
                        .withMaximum(70.73141694044509D)
                        .withMinimum(53.53993731873163D)
                        .withIsAggregated(false),
                    new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-09-23T02:26:49Z"))
                        .withRoleInstance("dvwz")
                        .withTotal(58.03329495850146D)
                        .withMaximum(96.49197331000619D)
                        .withMinimum(78.84233759873129D)
                        .withIsAggregated(true)))))
            .withAbnormalTimePeriods(Arrays.asList(new DetectorAbnormalTimePeriod()
                .withStartTime(OffsetDateTime.parse("2021-08-03T05:36:45Z"))
                .withEndTime(OffsetDateTime.parse("2021-05-11T18:29:01Z"))
                .withMessage("kfqoixwgiksbb")
                .withSource("ooxr")
                .withPriority(72.64514135172061D)
                .withMetadata(Arrays.asList(
                    Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(), new NameValuePair()),
                    Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(), new NameValuePair()),
                    Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(), new NameValuePair())))
                .withType(IssueType.SERVICE_INCIDENT)
                .withSolutions(Arrays.asList(new Solution().withId(2.1489623188320928D)
                    .withDisplayName("acihmbfntu")
                    .withOrder(52.06073474625407D)
                    .withDescription("xvqxbnuvwcgasgo")
                    .withType(SolutionType.DEEP_INVESTIGATION)
                    .withData(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList()))
                    .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(), Arrays.asList())),
                    new Solution().withId(18.37758812594812D)
                        .withDisplayName("vs")
                        .withOrder(25.130627210446388D)
                        .withDescription("tjfmkkhtg")
                        .withType(SolutionType.DEEP_INVESTIGATION)
                        .withData(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList()))
                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList())))),
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-10-26T04:22Z"))
                    .withEndTime(OffsetDateTime.parse("2021-09-02T11:38:55Z"))
                    .withMessage("ccnaov")
                    .withSource("wazhpabaco")
                    .withPriority(91.45168199362028D)
                    .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair())))
                    .withType(IssueType.USER_ISSUE)
                    .withSolutions(
                        Arrays
                            .asList(
                                new Solution().withId(49.5219933749751D)
                                    .withDisplayName("rcge")
                                    .withOrder(93.8521340788661D)
                                    .withDescription("bxeetqujxcxxqn")
                                    .withType(SolutionType.BEST_PRACTICES)
                                    .withData(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(),
                                        Arrays.asList()))
                                    .withMetadata(Arrays.asList(Arrays.asList())),
                                new Solution().withId(64.09160613096932D)
                                    .withDisplayName("cgojmrv")
                                    .withOrder(39.06804547619915D)
                                    .withDescription("ngz")
                                    .withType(SolutionType.DEEP_INVESTIGATION)
                                    .withData(Arrays.asList(Arrays.asList()))
                                    .withMetadata(Arrays.asList(Arrays.asList()))))))
            .withData(Arrays.asList(Arrays.asList(new NameValuePair().withName("hskxx").withValue("nsbvr")),
                Arrays.asList(new NameValuePair().withName("gv").withValue("jrulfucte"),
                    new NameValuePair().withName("thcfj").withValue("xlyubqjrostv")),
                Arrays.asList(new NameValuePair().withName("qmtzzb").withValue("rztrxalxrdhabsr"),
                    new NameValuePair().withName("sn").withValue("pqatiwkkvyanxkv"),
                    new NameValuePair().withName("semsvuvd").withValue("qxetqmmlivrjjx"),
                    new NameValuePair().withName("xdchp").withValue("xlehzlxpgfquwzp")),
                Arrays.asList(new NameValuePair().withName("belwcer").withValue("w"),
                    new NameValuePair().withName("jxljtxbusq").withValue("xxniuisdzhgbd"),
                    new NameValuePair().withName("pagsecnad").withValue("wqrgxfllmqi"))))
            .withResponseMetadata(new ResponseMetadata().withDataSource(new DataSource()
                .withInstructions(Arrays.asList("ellnkkii", "vmtumxpym", "jfuaxroqvqpilrgu", "canlduwzorxs"))
                .withDataSourceUri(Arrays.asList(new NameValuePair().withName("qk").withValue("ymxkqvfqepdx")))));
        model = BinaryData.fromObject(model).toObject(DiagnosticDetectorResponseInner.class);
        Assertions.assertEquals("tuubwyvpjb", model.kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-20T15:13:37Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-06T20:03:59Z"), model.endTime());
        Assertions.assertEquals(false, model.issueDetected());
        Assertions.assertEquals("qhttqhnmhkre", model.metrics().get(0).name());
        Assertions.assertEquals("dsuxheqdgcrux", model.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-07T03:58:23Z"), model.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-05T15:45:25Z"), model.metrics().get(0).endTime());
        Assertions.assertEquals("m", model.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-04T16:05:44Z"),
            model.metrics().get(0).values().get(0).timestamp());
        Assertions.assertEquals("ikpazf", model.metrics().get(0).values().get(0).roleInstance());
        Assertions.assertEquals(27.11710943236596D, model.metrics().get(0).values().get(0).total());
        Assertions.assertEquals(70.73141694044509D, model.metrics().get(0).values().get(0).maximum());
        Assertions.assertEquals(53.53993731873163D, model.metrics().get(0).values().get(0).minimum());
        Assertions.assertEquals(false, model.metrics().get(0).values().get(0).isAggregated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-03T05:36:45Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-11T18:29:01Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals("kfqoixwgiksbb", model.abnormalTimePeriods().get(0).message());
        Assertions.assertEquals("ooxr", model.abnormalTimePeriods().get(0).source());
        Assertions.assertEquals(72.64514135172061D, model.abnormalTimePeriods().get(0).priority());
        Assertions.assertEquals(IssueType.SERVICE_INCIDENT, model.abnormalTimePeriods().get(0).type());
        Assertions.assertEquals(2.1489623188320928D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("acihmbfntu", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(52.06073474625407D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("xvqxbnuvwcgasgo", model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("hskxx", model.data().get(0).get(0).name());
        Assertions.assertEquals("nsbvr", model.data().get(0).get(0).value());
        Assertions.assertEquals("ellnkkii", model.responseMetadata().dataSource().instructions().get(0));
        Assertions.assertEquals("qk", model.responseMetadata().dataSource().dataSourceUri().get(0).name());
        Assertions.assertEquals("ymxkqvfqepdx", model.responseMetadata().dataSource().dataSourceUri().get(0).value());
    }
}
