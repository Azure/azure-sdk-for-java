// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.ComputeModeOptions;
import com.azure.resourcemanager.appservice.generated.models.WorkerPoolResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServiceEnvironmentsListMultiRolePoolsMockTests {
    @Test
    public void testListMultiRolePools() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"workerSizeId\":322517175,\"computeMode\":\"Dedicated\",\"workerSize\":\"htnriy\",\"workerCount\":1884514562,\"instanceNames\":[\"gsjmcybrpwjenb\",\"tkghrrxauuhdkh\",\"izyxoyxnhub\"]},\"sku\":{\"name\":\"pfryivpe\",\"tier\":\"y\",\"size\":\"dxygfp\",\"family\":\"seme\",\"capacity\":806132101,\"skuCapacity\":{\"minimum\":419965729,\"maximum\":772733317,\"elasticMaximum\":886393883,\"default\":731261399,\"scaleType\":\"ebrjopo\"},\"locations\":[\"ekfxmg\",\"y\",\"widnrd\",\"dkvhui\"],\"capabilities\":[{\"name\":\"odi\",\"value\":\"pga\",\"reason\":\"dwhwbeadokuqnk\"},{\"name\":\"kflnjaysrjeevm\",\"value\":\"emrhbzetss\",\"reason\":\"wexbotbrep\"}]},\"kind\":\"rlieeocyarvsfz\",\"id\":\"cscootfsgilwis\",\"name\":\"xzpz\",\"type\":\"tust\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkerPoolResource> response = manager.appServiceEnvironments()
            .listMultiRolePools("xq", "pdjomddadwosjxy", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rlieeocyarvsfz", response.iterator().next().kind());
        Assertions.assertEquals("pfryivpe", response.iterator().next().sku().name());
        Assertions.assertEquals("y", response.iterator().next().sku().tier());
        Assertions.assertEquals("dxygfp", response.iterator().next().sku().size());
        Assertions.assertEquals("seme", response.iterator().next().sku().family());
        Assertions.assertEquals(806132101, response.iterator().next().sku().capacity());
        Assertions.assertEquals(419965729, response.iterator().next().sku().skuCapacity().minimum());
        Assertions.assertEquals(772733317, response.iterator().next().sku().skuCapacity().maximum());
        Assertions.assertEquals(886393883, response.iterator().next().sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(731261399, response.iterator().next().sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("ebrjopo", response.iterator().next().sku().skuCapacity().scaleType());
        Assertions.assertEquals("ekfxmg", response.iterator().next().sku().locations().get(0));
        Assertions.assertEquals("odi", response.iterator().next().sku().capabilities().get(0).name());
        Assertions.assertEquals("pga", response.iterator().next().sku().capabilities().get(0).value());
        Assertions.assertEquals("dwhwbeadokuqnk", response.iterator().next().sku().capabilities().get(0).reason());
        Assertions.assertEquals(322517175, response.iterator().next().workerSizeId());
        Assertions.assertEquals(ComputeModeOptions.DEDICATED, response.iterator().next().computeMode());
        Assertions.assertEquals("htnriy", response.iterator().next().workerSize());
        Assertions.assertEquals(1884514562, response.iterator().next().workerCount());
    }
}
