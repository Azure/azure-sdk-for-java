// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.fluent.models.CapabilityInner;
import com.azure.resourcemanager.appservice.generated.models.AppServicePlan;
import com.azure.resourcemanager.appservice.generated.models.ExtendedLocation;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.KubeEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.SkuCapacity;
import com.azure.resourcemanager.appservice.generated.models.SkuDescription;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServicePlansCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"workerTierName\":\"iu\",\"status\":\"Ready\",\"subscription\":\"pmwj\",\"hostingEnvironmentProfile\":{\"id\":\"celfeq\",\"name\":\"wrauuruldt\",\"type\":\"cnk\"},\"maximumNumberOfWorkers\":2028867655,\"numberOfWorkers\":1578383449,\"geoRegion\":\"fmq\",\"perSiteScaling\":false,\"elasticScaleEnabled\":false,\"maximumElasticWorkerCount\":219673174,\"numberOfSites\":1234092955,\"isSpot\":true,\"spotExpirationTime\":\"2021-08-30T12:04:48Z\",\"freeOfferExpirationTime\":\"2021-03-22T05:17:49Z\",\"resourceGroup\":\"uhnbdlz\",\"reserved\":true,\"isXenon\":false,\"hyperV\":false,\"targetWorkerCount\":1278479715,\"targetWorkerSizeId\":203500666,\"provisioningState\":\"Succeeded\",\"kubeEnvironmentProfile\":{\"id\":\"mpnkyvujhej\",\"name\":\"rvlguy\",\"type\":\"rngnbqhmuqyzxko\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"shtcfnbffdaxly\",\"tier\":\"pdqoehuboqozxn\",\"size\":\"amxikhrxikglyn\",\"family\":\"peojecboggwt\",\"capacity\":2141676982,\"skuCapacity\":{\"minimum\":789676237,\"maximum\":1564942509,\"elasticMaximum\":1175284149,\"default\":1404638282,\"scaleType\":\"eirjtwjimcfrhtz\"},\"locations\":[\"voaxqocalptf\",\"bzyqbggxcyr\"],\"capabilities\":[{\"name\":\"uaxt\",\"value\":\"qnyurxlpuwxslzql\",\"reason\":\"xbnrurtnwb\"},{\"name\":\"ysupck\",\"value\":\"bm\",\"reason\":\"mohlshmaaoofltbs\"},{\"name\":\"vmwaejxzkqcmd\",\"value\":\"ft\",\"reason\":\"yrt\"}]},\"extendedLocation\":{\"name\":\"abs\",\"type\":\"rjzdqs\"},\"kind\":\"or\",\"location\":\"gd\",\"tags\":{\"wsgqziwooet\":\"pgfrbijoehhq\",\"syazmmbuxqtokck\":\"j\"},\"id\":\"fkftqkbyruhea\",\"name\":\"ucmqfurb\",\"type\":\"bogxlyvebvxjguwt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AppServicePlan response = manager.appServicePlans()
            .define("talo")
            .withRegion("fpyglnfwjsl")
            .withExistingResourceGroup("xxqgoavzycxpza")
            .withTags(mapOf("mkpvekstz", "xblucpmqwkf", "jfersxn", "zhdwrc", "jssksgxykdepq", "lkcwjw"))
            .withSku(new SkuDescription().withName("qpaexlltmekkae")
                .withTier("rhrdnsgvsrt")
                .withSize("t")
                .withFamily("jkraleglpyns")
                .withCapacity(1427605111)
                .withSkuCapacity(new SkuCapacity().withMinimum(1062586712)
                    .withMaximum(593847315)
                    .withElasticMaximum(230729150)
                    .withDefaultProperty(531354105)
                    .withScaleType("alhbrwaltvky"))
                .withLocations(Arrays.asList("opqtegkrjolbaegh", "ksscismrn", "eklf"))
                .withCapabilities(Arrays.asList(new CapabilityInner().withName("sfclxtf")
                    .withValue("dwqzbiukzmfyfvy")
                    .withReason("ofaiwlnfvexiuuqa"))))
            .withExtendedLocation(new ExtendedLocation().withName("seyxpgkmlnj"))
            .withKind("nf")
            .withWorkerTierName("tm")
            .withHostingEnvironmentProfile(new HostingEnvironmentProfile().withId("vouyqzhoikemho"))
            .withPerSiteScaling(false)
            .withElasticScaleEnabled(true)
            .withMaximumElasticWorkerCount(763650565)
            .withIsSpot(false)
            .withSpotExpirationTime(OffsetDateTime.parse("2021-05-19T21:23:17Z"))
            .withFreeOfferExpirationTime(OffsetDateTime.parse("2021-08-28T15:28:47Z"))
            .withReserved(false)
            .withIsXenon(false)
            .withHyperV(true)
            .withTargetWorkerCount(172564337)
            .withTargetWorkerSizeId(1523759830)
            .withKubeEnvironmentProfile(new KubeEnvironmentProfile().withId("ymyddzjtx"))
            .withZoneRedundant(false)
            .create();

        Assertions.assertEquals("gd", response.location());
        Assertions.assertEquals("pgfrbijoehhq", response.tags().get("wsgqziwooet"));
        Assertions.assertEquals("shtcfnbffdaxly", response.sku().name());
        Assertions.assertEquals("pdqoehuboqozxn", response.sku().tier());
        Assertions.assertEquals("amxikhrxikglyn", response.sku().size());
        Assertions.assertEquals("peojecboggwt", response.sku().family());
        Assertions.assertEquals(2141676982, response.sku().capacity());
        Assertions.assertEquals(789676237, response.sku().skuCapacity().minimum());
        Assertions.assertEquals(1564942509, response.sku().skuCapacity().maximum());
        Assertions.assertEquals(1175284149, response.sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(1404638282, response.sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("eirjtwjimcfrhtz", response.sku().skuCapacity().scaleType());
        Assertions.assertEquals("voaxqocalptf", response.sku().locations().get(0));
        Assertions.assertEquals("uaxt", response.sku().capabilities().get(0).name());
        Assertions.assertEquals("qnyurxlpuwxslzql", response.sku().capabilities().get(0).value());
        Assertions.assertEquals("xbnrurtnwb", response.sku().capabilities().get(0).reason());
        Assertions.assertEquals("abs", response.extendedLocation().name());
        Assertions.assertEquals("or", response.kind());
        Assertions.assertEquals("iu", response.workerTierName());
        Assertions.assertEquals("celfeq", response.hostingEnvironmentProfile().id());
        Assertions.assertEquals(false, response.perSiteScaling());
        Assertions.assertEquals(false, response.elasticScaleEnabled());
        Assertions.assertEquals(219673174, response.maximumElasticWorkerCount());
        Assertions.assertEquals(true, response.isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-30T12:04:48Z"), response.spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-22T05:17:49Z"), response.freeOfferExpirationTime());
        Assertions.assertEquals(true, response.reserved());
        Assertions.assertEquals(false, response.isXenon());
        Assertions.assertEquals(false, response.hyperV());
        Assertions.assertEquals(1278479715, response.targetWorkerCount());
        Assertions.assertEquals(203500666, response.targetWorkerSizeId());
        Assertions.assertEquals("mpnkyvujhej", response.kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, response.zoneRedundant());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
