// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.DetectorResponse;
import com.azure.resourcemanager.appservice.generated.models.InsightStatus;
import com.azure.resourcemanager.appservice.generated.models.RenderingType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsGetSiteDetectorResponseSlotWithResponseMockTests {
    @Test
    public void testGetSiteDetectorResponseSlotWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"metadata\":{\"id\":\"ttsz\",\"name\":\"uyx\",\"description\":\"yjas\",\"author\":\"hbfttptsdee\",\"category\":\"ovanag\",\"supportTopicList\":[{\"id\":\"sfbmbtcefqkuxgyu\",\"pesId\":\"am\"},{\"id\":\"wluslxytiobj\",\"pesId\":\"djxblobknfpd\"}],\"analysisType\":[\"zgjjeomctbgo\"],\"type\":\"Analysis\",\"score\":9.084159},\"dataset\":[{\"table\":{\"tableName\":\"qlbnuflfz\",\"columns\":[{},{},{},{}],\"rows\":[[],[],[],[]]},\"renderingProperties\":{\"type\":\"ChangeSets\",\"title\":\"pyoqfbjpclboioj\",\"description\":\"nhwwyhxz\"}},{\"table\":{\"tableName\":\"xz\",\"columns\":[{}],\"rows\":[[],[]]},\"renderingProperties\":{\"type\":\"Insights\",\"title\":\"hhw\",\"description\":\"mhookefdgfexakct\"}}],\"status\":{\"message\":\"szdnccouuqxmdie\",\"statusId\":\"Info\"},\"dataProvidersMetadata\":[{\"providerName\":\"hoyiheheim\",\"propertyBag\":[{},{},{},{}]},{\"providerName\":\"dxcwxfmrmwdfyp\",\"propertyBag\":[{},{}]},{\"providerName\":\"thfvszlaf\",\"propertyBag\":[{}]},{\"providerName\":\"dhhkdeviwpzhfxvl\",\"propertyBag\":[{},{}]}],\"suggestedUtterances\":{\"query\":\"smgh\",\"results\":[{\"sampleUtterance\":{},\"score\":22.050047},{\"sampleUtterance\":{},\"score\":34.897488},{\"sampleUtterance\":{},\"score\":43.943913},{\"sampleUtterance\":{},\"score\":18.996155}]}},\"kind\":\"wshrz\",\"id\":\"yycnnwajxvoti\",\"name\":\"lwme\",\"type\":\"rgulwug\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DetectorResponse response = manager.diagnostics()
            .getSiteDetectorResponseSlotWithResponse("kbiibobkxiujaagf", "iwuux", "wmzmsiv", "egm",
                OffsetDateTime.parse("2021-01-27T08:29:57Z"), OffsetDateTime.parse("2021-04-16T00:01:43Z"),
                "brhaqjptkrsjspzi", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wshrz", response.kind());
        Assertions.assertEquals("qlbnuflfz", response.dataset().get(0).table().tableName());
        Assertions.assertEquals(RenderingType.CHANGE_SETS, response.dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("pyoqfbjpclboioj", response.dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("nhwwyhxz", response.dataset().get(0).renderingProperties().description());
        Assertions.assertEquals("szdnccouuqxmdie", response.status().message());
        Assertions.assertEquals(InsightStatus.INFO, response.status().statusId());
        Assertions.assertEquals("hoyiheheim", response.dataProvidersMetadata().get(0).providerName());
        Assertions.assertEquals("smgh", response.suggestedUtterances().query());
        Assertions.assertEquals(22.050047F, response.suggestedUtterances().results().get(0).score());
    }
}
