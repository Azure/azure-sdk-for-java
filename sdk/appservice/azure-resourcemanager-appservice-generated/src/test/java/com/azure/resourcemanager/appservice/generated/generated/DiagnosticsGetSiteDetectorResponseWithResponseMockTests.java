// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.DetectorResponse;
import com.azure.resourcemanager.appservice.generated.models.InsightStatus;
import com.azure.resourcemanager.appservice.generated.models.RenderingType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsGetSiteDetectorResponseWithResponseMockTests {
    @Test
    public void testGetSiteDetectorResponseWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"metadata\":{\"id\":\"tpgzybezmyjq\",\"name\":\"chdsxvkmgppxzg\",\"description\":\"smts\",\"author\":\"ousybwddpjsokosu\",\"category\":\"fizfwdmaen\",\"supportTopicList\":[{\"id\":\"fzgzm\",\"pesId\":\"jqnienctwbimh\"},{\"id\":\"ognnwxrdllrqamfj\",\"pesId\":\"rfpnbyxy\"},{\"id\":\"bvidps\",\"pesId\":\"zssxhvzgliu\"}],\"analysisType\":[\"tgsd\",\"jxkddxoatlprsr\",\"en\",\"nyyvvlg\"],\"type\":\"CategoryOverview\",\"score\":31.926424},\"dataset\":[{\"table\":{\"tableName\":\"fplgxc\",\"columns\":[{},{},{},{}],\"rows\":[[]]},\"renderingProperties\":{\"type\":\"Markdown\",\"title\":\"sfj\",\"description\":\"gnpeosusi\"}},{\"table\":{\"tableName\":\"ofljab\",\"columns\":[{},{},{},{}],\"rows\":[[],[],[],[]]},\"renderingProperties\":{\"type\":\"ChangeAnalysisOnboarding\",\"title\":\"qkdieuopw\",\"description\":\"knhmizcfkclfmo\"}},{\"table\":{\"tableName\":\"r\",\"columns\":[{},{},{},{}],\"rows\":[[],[],[]]},\"renderingProperties\":{\"type\":\"Markdown\",\"title\":\"b\",\"description\":\"zobcdvbbuuipe\"}}],\"status\":{\"message\":\"ptteojxhwgja\",\"statusId\":\"Info\"},\"dataProvidersMetadata\":[{\"providerName\":\"jgkxvkjd\",\"propertyBag\":[{}]},{\"providerName\":\"qmmwwtzxsv\",\"propertyBag\":[{}]}],\"suggestedUtterances\":{\"query\":\"jwrhubgaaaxi\",\"results\":[{\"sampleUtterance\":{},\"score\":8.723044},{\"sampleUtterance\":{},\"score\":56.253456}]}},\"kind\":\"gzd\",\"id\":\"blpdtcyvgbhb\",\"name\":\"plavgfbvr\",\"type\":\"hwuex\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DetectorResponse response = manager.diagnostics()
            .getSiteDetectorResponseWithResponse("ycjisxs", "nmfydphlslnomqb", "vjlqfzlbpe",
                OffsetDateTime.parse("2021-10-01T02:25:35Z"), OffsetDateTime.parse("2021-09-03T20:48:51Z"), "pgllrh",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("gzd", response.kind());
        Assertions.assertEquals("fplgxc", response.dataset().get(0).table().tableName());
        Assertions.assertEquals(RenderingType.MARKDOWN, response.dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("sfj", response.dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("gnpeosusi", response.dataset().get(0).renderingProperties().description());
        Assertions.assertEquals("ptteojxhwgja", response.status().message());
        Assertions.assertEquals(InsightStatus.INFO, response.status().statusId());
        Assertions.assertEquals("jgkxvkjd", response.dataProvidersMetadata().get(0).providerName());
        Assertions.assertEquals("jwrhubgaaaxi", response.suggestedUtterances().query());
        Assertions.assertEquals(8.723044F, response.suggestedUtterances().results().get(0).score());
    }
}
