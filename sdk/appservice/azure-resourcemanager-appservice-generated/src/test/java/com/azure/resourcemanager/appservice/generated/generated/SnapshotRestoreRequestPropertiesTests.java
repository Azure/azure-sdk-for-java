// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.SnapshotRestoreRequestProperties;
import com.azure.resourcemanager.appservice.generated.models.SnapshotRecoverySource;
import org.junit.jupiter.api.Assertions;

public final class SnapshotRestoreRequestPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotRestoreRequestProperties model = BinaryData.fromString(
            "{\"snapshotTime\":\"y\",\"recoverySource\":{\"location\":\"hi\",\"id\":\"rwpekiprjb\"},\"overwrite\":false,\"recoverConfiguration\":true,\"ignoreConflictingHostNames\":true,\"useDRSecondary\":true}")
            .toObject(SnapshotRestoreRequestProperties.class);
        Assertions.assertEquals("y", model.snapshotTime());
        Assertions.assertEquals("hi", model.recoverySource().location());
        Assertions.assertEquals("rwpekiprjb", model.recoverySource().id());
        Assertions.assertEquals(false, model.overwrite());
        Assertions.assertEquals(true, model.recoverConfiguration());
        Assertions.assertEquals(true, model.ignoreConflictingHostNames());
        Assertions.assertEquals(true, model.useDRSecondary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotRestoreRequestProperties model = new SnapshotRestoreRequestProperties().withSnapshotTime("y")
            .withRecoverySource(new SnapshotRecoverySource().withLocation("hi").withId("rwpekiprjb"))
            .withOverwrite(false)
            .withRecoverConfiguration(true)
            .withIgnoreConflictingHostNames(true)
            .withUseDRSecondary(true);
        model = BinaryData.fromObject(model).toObject(SnapshotRestoreRequestProperties.class);
        Assertions.assertEquals("y", model.snapshotTime());
        Assertions.assertEquals("hi", model.recoverySource().location());
        Assertions.assertEquals("rwpekiprjb", model.recoverySource().id());
        Assertions.assertEquals(false, model.overwrite());
        Assertions.assertEquals(true, model.recoverConfiguration());
        Assertions.assertEquals(true, model.ignoreConflictingHostNames());
        Assertions.assertEquals(true, model.useDRSecondary());
    }
}
