// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.DetectorAbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.Solution;
import com.azure.resourcemanager.appservice.generated.models.SolutionType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DetectorAbnormalTimePeriodTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DetectorAbnormalTimePeriod model = BinaryData.fromString(
            "{\"startTime\":\"2021-08-04T19:36:01Z\",\"endTime\":\"2021-02-03T11:57:38Z\",\"message\":\"h\",\"source\":\"wcpqtwl\",\"priority\":83.89473875252592,\"metaData\":[[{\"name\":\"rbnyrukoilacidu\",\"value\":\"leipjl\"},{\"name\":\"yxpzruzythqk\",\"value\":\"hbgxvel\"}],[{\"name\":\"lnx\",\"value\":\"nitmujdtvmclyymf\"},{\"name\":\"mjpddnyxf\",\"value\":\"v\"}],[{\"name\":\"z\",\"value\":\"zjqr\"},{\"name\":\"pv\",\"value\":\"dyfoeb\"},{\"name\":\"tjpp\",\"value\":\"aohoqkpjtnq\"}],[{\"name\":\"aywkdcwmqsyril\",\"value\":\"xdqaolfylnkkb\"},{\"name\":\"jvlywl\",\"value\":\"fwobb\"},{\"name\":\"hlwyjfnqzocrd\",\"value\":\"czeuntgx\"}]],\"type\":\"ServiceIncident\",\"solutions\":[{\"id\":86.22355956329687,\"displayName\":\"koifuvnyttz\",\"order\":94.77257797472292,\"description\":\"rihl\",\"type\":\"QuickSolution\",\"data\":[[{\"name\":\"qtxnrflkndrndpg\",\"value\":\"odhda\"},{\"name\":\"twfhi\",\"value\":\"wgsabvcipo\"},{\"name\":\"afcz\",\"value\":\"mlj\"}]],\"metadata\":[[{\"name\":\"efy\",\"value\":\"veitit\"},{\"name\":\"s\",\"value\":\"ajlnsjhwjuyxx\"}]]}]}")
            .toObject(DetectorAbnormalTimePeriod.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T19:36:01Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T11:57:38Z"), model.endTime());
        Assertions.assertEquals("h", model.message());
        Assertions.assertEquals("wcpqtwl", model.source());
        Assertions.assertEquals(83.89473875252592D, model.priority());
        Assertions.assertEquals("rbnyrukoilacidu", model.metadata().get(0).get(0).name());
        Assertions.assertEquals("leipjl", model.metadata().get(0).get(0).value());
        Assertions.assertEquals(IssueType.SERVICE_INCIDENT, model.type());
        Assertions.assertEquals(86.22355956329687D, model.solutions().get(0).id());
        Assertions.assertEquals("koifuvnyttz", model.solutions().get(0).displayName());
        Assertions.assertEquals(94.77257797472292D, model.solutions().get(0).order());
        Assertions.assertEquals("rihl", model.solutions().get(0).description());
        Assertions.assertEquals(SolutionType.QUICK_SOLUTION, model.solutions().get(0).type());
        Assertions.assertEquals("qtxnrflkndrndpg", model.solutions().get(0).data().get(0).get(0).name());
        Assertions.assertEquals("odhda", model.solutions().get(0).data().get(0).get(0).value());
        Assertions.assertEquals("efy", model.solutions().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("veitit", model.solutions().get(0).metadata().get(0).get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DetectorAbnormalTimePeriod model
            = new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-08-04T19:36:01Z"))
                .withEndTime(OffsetDateTime.parse("2021-02-03T11:57:38Z"))
                .withMessage("h")
                .withSource("wcpqtwl")
                .withPriority(83.89473875252592D)
                .withMetadata(Arrays.asList(
                    Arrays.asList(new NameValuePair().withName("rbnyrukoilacidu").withValue("leipjl"),
                        new NameValuePair().withName("yxpzruzythqk").withValue("hbgxvel")),
                    Arrays.asList(new NameValuePair().withName("lnx").withValue("nitmujdtvmclyymf"),
                        new NameValuePair().withName("mjpddnyxf").withValue("v")),
                    Arrays.asList(new NameValuePair().withName("z").withValue("zjqr"),
                        new NameValuePair().withName("pv").withValue("dyfoeb"),
                        new NameValuePair().withName("tjpp").withValue("aohoqkpjtnq")),
                    Arrays.asList(new NameValuePair().withName("aywkdcwmqsyril").withValue("xdqaolfylnkkb"),
                        new NameValuePair().withName("jvlywl").withValue("fwobb"),
                        new NameValuePair().withName("hlwyjfnqzocrd").withValue("czeuntgx"))))
                .withType(IssueType.SERVICE_INCIDENT)
                .withSolutions(Arrays.asList(new Solution().withId(86.22355956329687D)
                    .withDisplayName("koifuvnyttz")
                    .withOrder(94.77257797472292D)
                    .withDescription("rihl")
                    .withType(SolutionType.QUICK_SOLUTION)
                    .withData(
                        Arrays.asList(Arrays.asList(new NameValuePair().withName("qtxnrflkndrndpg").withValue("odhda"),
                            new NameValuePair().withName("twfhi").withValue("wgsabvcipo"),
                            new NameValuePair().withName("afcz").withValue("mlj"))))
                    .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair().withName("efy").withValue("veitit"),
                        new NameValuePair().withName("s").withValue("ajlnsjhwjuyxx"))))));
        model = BinaryData.fromObject(model).toObject(DetectorAbnormalTimePeriod.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-04T19:36:01Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-03T11:57:38Z"), model.endTime());
        Assertions.assertEquals("h", model.message());
        Assertions.assertEquals("wcpqtwl", model.source());
        Assertions.assertEquals(83.89473875252592D, model.priority());
        Assertions.assertEquals("rbnyrukoilacidu", model.metadata().get(0).get(0).name());
        Assertions.assertEquals("leipjl", model.metadata().get(0).get(0).value());
        Assertions.assertEquals(IssueType.SERVICE_INCIDENT, model.type());
        Assertions.assertEquals(86.22355956329687D, model.solutions().get(0).id());
        Assertions.assertEquals("koifuvnyttz", model.solutions().get(0).displayName());
        Assertions.assertEquals(94.77257797472292D, model.solutions().get(0).order());
        Assertions.assertEquals("rihl", model.solutions().get(0).description());
        Assertions.assertEquals(SolutionType.QUICK_SOLUTION, model.solutions().get(0).type());
        Assertions.assertEquals("qtxnrflkndrndpg", model.solutions().get(0).data().get(0).get(0).name());
        Assertions.assertEquals("odhda", model.solutions().get(0).data().get(0).get(0).value());
        Assertions.assertEquals("efy", model.solutions().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("veitit", model.solutions().get(0).metadata().get(0).get(0).value());
    }
}
