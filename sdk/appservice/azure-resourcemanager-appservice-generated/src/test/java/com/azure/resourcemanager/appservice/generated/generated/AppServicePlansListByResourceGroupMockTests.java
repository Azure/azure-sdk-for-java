// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.AppServicePlan;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServicePlansListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"workerTierName\":\"ityvvgxejh\",\"status\":\"Ready\",\"subscription\":\"jwbhtawbchybneu\",\"hostingEnvironmentProfile\":{\"id\":\"ik\",\"name\":\"husgxkbgljcy\",\"type\":\"rzxipxhlxxkviyj\"},\"maximumNumberOfWorkers\":409138981,\"numberOfWorkers\":1862985225,\"geoRegion\":\"yavxgmogcnwxk\",\"perSiteScaling\":true,\"elasticScaleEnabled\":true,\"maximumElasticWorkerCount\":190444275,\"numberOfSites\":233340498,\"isSpot\":false,\"spotExpirationTime\":\"2021-05-22T02:53:31Z\",\"freeOfferExpirationTime\":\"2021-01-13T04:57:46Z\",\"resourceGroup\":\"nlceggyqlvnhm\",\"reserved\":false,\"isXenon\":true,\"hyperV\":true,\"targetWorkerCount\":920518793,\"targetWorkerSizeId\":2097508482,\"provisioningState\":\"InProgress\",\"kubeEnvironmentProfile\":{\"id\":\"yfsgikgcbj\",\"name\":\"fbpfdsatrzqmt\",\"type\":\"wtdazebif\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"gi\",\"tier\":\"bwyeyrnbuby\",\"size\":\"towbuuhlwbgvzuxf\",\"family\":\"fpdzuoqp\",\"capacity\":464547608,\"skuCapacity\":{\"minimum\":781609403,\"maximum\":1470109184,\"elasticMaximum\":1871038804,\"default\":1176165323,\"scaleType\":\"hvpljzrq\"},\"locations\":[\"swemotjkejy\",\"vkyjvc\"],\"capabilities\":[{\"name\":\"cz\",\"value\":\"paeyklxsvcbr\",\"reason\":\"lt\"}]},\"extendedLocation\":{\"name\":\"dsng\",\"type\":\"ofmrph\"},\"kind\":\"s\",\"location\":\"runkcgdnh\",\"tags\":{\"ba\":\"xibomrrjooep\",\"klrjdkypmkvilg\":\"bffxansgntjmnl\"},\"id\":\"j\",\"name\":\"tjbldgikokjwgej\",\"type\":\"kuzezwnqhcpkjg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AppServicePlan> response
            = manager.appServicePlans().listByResourceGroup("uxvccpdacta", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("runkcgdnh", response.iterator().next().location());
        Assertions.assertEquals("xibomrrjooep", response.iterator().next().tags().get("ba"));
        Assertions.assertEquals("gi", response.iterator().next().sku().name());
        Assertions.assertEquals("bwyeyrnbuby", response.iterator().next().sku().tier());
        Assertions.assertEquals("towbuuhlwbgvzuxf", response.iterator().next().sku().size());
        Assertions.assertEquals("fpdzuoqp", response.iterator().next().sku().family());
        Assertions.assertEquals(464547608, response.iterator().next().sku().capacity());
        Assertions.assertEquals(781609403, response.iterator().next().sku().skuCapacity().minimum());
        Assertions.assertEquals(1470109184, response.iterator().next().sku().skuCapacity().maximum());
        Assertions.assertEquals(1871038804, response.iterator().next().sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(1176165323, response.iterator().next().sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("hvpljzrq", response.iterator().next().sku().skuCapacity().scaleType());
        Assertions.assertEquals("swemotjkejy", response.iterator().next().sku().locations().get(0));
        Assertions.assertEquals("cz", response.iterator().next().sku().capabilities().get(0).name());
        Assertions.assertEquals("paeyklxsvcbr", response.iterator().next().sku().capabilities().get(0).value());
        Assertions.assertEquals("lt", response.iterator().next().sku().capabilities().get(0).reason());
        Assertions.assertEquals("dsng", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("s", response.iterator().next().kind());
        Assertions.assertEquals("ityvvgxejh", response.iterator().next().workerTierName());
        Assertions.assertEquals("ik", response.iterator().next().hostingEnvironmentProfile().id());
        Assertions.assertEquals(true, response.iterator().next().perSiteScaling());
        Assertions.assertEquals(true, response.iterator().next().elasticScaleEnabled());
        Assertions.assertEquals(190444275, response.iterator().next().maximumElasticWorkerCount());
        Assertions.assertEquals(false, response.iterator().next().isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-22T02:53:31Z"),
            response.iterator().next().spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-13T04:57:46Z"),
            response.iterator().next().freeOfferExpirationTime());
        Assertions.assertEquals(false, response.iterator().next().reserved());
        Assertions.assertEquals(true, response.iterator().next().isXenon());
        Assertions.assertEquals(true, response.iterator().next().hyperV());
        Assertions.assertEquals(920518793, response.iterator().next().targetWorkerCount());
        Assertions.assertEquals(2097508482, response.iterator().next().targetWorkerSizeId());
        Assertions.assertEquals("yfsgikgcbj", response.iterator().next().kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, response.iterator().next().zoneRedundant());
    }
}
