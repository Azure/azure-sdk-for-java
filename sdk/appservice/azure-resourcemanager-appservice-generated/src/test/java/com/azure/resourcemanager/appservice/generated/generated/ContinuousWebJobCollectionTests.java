// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ContinuousWebJobInner;
import com.azure.resourcemanager.appservice.generated.models.ContinuousWebJobCollection;
import com.azure.resourcemanager.appservice.generated.models.ContinuousWebJobStatus;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ContinuousWebJobCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContinuousWebJobCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"status\":\"Starting\",\"detailed_status\":\"qtr\",\"log_url\":\"doxdegacdedpkw\",\"run_command\":\"obp\",\"url\":\"cidpda\",\"extra_info_url\":\"rm\",\"web_job_type\":\"Triggered\",\"error\":\"irqqclsaqife\",\"using_sdk\":false,\"settings\":{\"uffpxesw\":\"dataevivkigliokl\",\"pbgcesfddf\":\"datatlfytbltytv\"}},\"kind\":\"mowurofof\",\"id\":\"b\",\"name\":\"jzzwweoblb\",\"type\":\"dq\"},{\"properties\":{\"status\":\"PendingRestart\",\"detailed_status\":\"cnkfsogvyox\",\"log_url\":\"qzy\",\"run_command\":\"pgbbzdsluo\",\"url\":\"ev\",\"extra_info_url\":\"dddpwmgwxwukfj\",\"web_job_type\":\"Continuous\",\"error\":\"axseisvv\",\"using_sdk\":true,\"settings\":{\"ejk\":\"dataheo\",\"thrtzpuv\":\"dataaleczt\"}},\"kind\":\"srgrqefnquollo\",\"id\":\"urmuzembqq\",\"name\":\"ehdhjofywwna\",\"type\":\"oxlorxgsl\"},{\"properties\":{\"status\":\"Stopped\",\"detailed_status\":\"hvpaglyyhrgma\",\"log_url\":\"pmlutyju\",\"run_command\":\"edputocrb\",\"url\":\"qicmdrgcuzjmvk\",\"extra_info_url\":\"r\",\"web_job_type\":\"Continuous\",\"error\":\"gcmlj\",\"using_sdk\":true,\"settings\":{\"aqpvhszopeuku\":\"datamybqjvfiomh\",\"emosq\":\"datadswbsskgq\",\"gipdzym\":\"datafsjbpwjwz\",\"uudqhadxjvvl\":\"datakhxfpz\"}},\"kind\":\"b\",\"id\":\"e\",\"name\":\"augtxlznco\",\"type\":\"xtvytzqlyldjv\"},{\"properties\":{\"status\":\"Stopped\",\"detailed_status\":\"azzs\",\"log_url\":\"vcszbdbrlbozlt\",\"run_command\":\"lacbib\",\"url\":\"eiecupmwxd\",\"extra_info_url\":\"krlnrpeylfiiul\",\"web_job_type\":\"Continuous\",\"error\":\"qlnh\",\"using_sdk\":false,\"settings\":{\"eatr\":\"datavunknsgvxhxr\",\"yfjvifbmojtehq\":\"datac\",\"kdf\":\"dataoytrcoufkqmbh\"}},\"kind\":\"nvkivozjezchme\",\"id\":\"dhzjlrkn\",\"name\":\"kkfxm\",\"type\":\"qeqk\"}],\"nextLink\":\"phfvsftsstwlpxca\"}")
            .toObject(ContinuousWebJobCollection.class);
        Assertions.assertEquals("mowurofof", model.value().get(0).kind());
        Assertions.assertEquals(ContinuousWebJobStatus.STARTING, model.value().get(0).status());
        Assertions.assertEquals("qtr", model.value().get(0).detailedStatus());
        Assertions.assertEquals("doxdegacdedpkw", model.value().get(0).logUrl());
        Assertions.assertEquals("obp", model.value().get(0).runCommand());
        Assertions.assertEquals("cidpda", model.value().get(0).url());
        Assertions.assertEquals("rm", model.value().get(0).extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.value().get(0).webJobType());
        Assertions.assertEquals("irqqclsaqife", model.value().get(0).error());
        Assertions.assertEquals(false, model.value().get(0).usingSdk());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContinuousWebJobCollection model = new ContinuousWebJobCollection().withValue(Arrays.asList(
            new ContinuousWebJobInner().withKind("mowurofof")
                .withStatus(ContinuousWebJobStatus.STARTING)
                .withDetailedStatus("qtr")
                .withLogUrl("doxdegacdedpkw")
                .withRunCommand("obp")
                .withUrl("cidpda")
                .withExtraInfoUrl("rm")
                .withWebJobType(WebJobType.TRIGGERED)
                .withError("irqqclsaqife")
                .withUsingSdk(false)
                .withSettings(mapOf("uffpxesw", "dataevivkigliokl", "pbgcesfddf", "datatlfytbltytv")),
            new ContinuousWebJobInner().withKind("srgrqefnquollo")
                .withStatus(ContinuousWebJobStatus.PENDING_RESTART)
                .withDetailedStatus("cnkfsogvyox")
                .withLogUrl("qzy")
                .withRunCommand("pgbbzdsluo")
                .withUrl("ev")
                .withExtraInfoUrl("dddpwmgwxwukfj")
                .withWebJobType(WebJobType.CONTINUOUS)
                .withError("axseisvv")
                .withUsingSdk(true)
                .withSettings(mapOf("ejk", "dataheo", "thrtzpuv", "dataaleczt")),
            new ContinuousWebJobInner().withKind("b")
                .withStatus(ContinuousWebJobStatus.STOPPED)
                .withDetailedStatus("hvpaglyyhrgma")
                .withLogUrl("pmlutyju")
                .withRunCommand("edputocrb")
                .withUrl("qicmdrgcuzjmvk")
                .withExtraInfoUrl("r")
                .withWebJobType(WebJobType.CONTINUOUS)
                .withError("gcmlj")
                .withUsingSdk(true)
                .withSettings(mapOf("aqpvhszopeuku", "datamybqjvfiomh", "emosq", "datadswbsskgq", "gipdzym",
                    "datafsjbpwjwz", "uudqhadxjvvl", "datakhxfpz")),
            new ContinuousWebJobInner().withKind("nvkivozjezchme")
                .withStatus(ContinuousWebJobStatus.STOPPED)
                .withDetailedStatus("azzs")
                .withLogUrl("vcszbdbrlbozlt")
                .withRunCommand("lacbib")
                .withUrl("eiecupmwxd")
                .withExtraInfoUrl("krlnrpeylfiiul")
                .withWebJobType(WebJobType.CONTINUOUS)
                .withError("qlnh")
                .withUsingSdk(false)
                .withSettings(
                    mapOf("eatr", "datavunknsgvxhxr", "yfjvifbmojtehq", "datac", "kdf", "dataoytrcoufkqmbh"))));
        model = BinaryData.fromObject(model).toObject(ContinuousWebJobCollection.class);
        Assertions.assertEquals("mowurofof", model.value().get(0).kind());
        Assertions.assertEquals(ContinuousWebJobStatus.STARTING, model.value().get(0).status());
        Assertions.assertEquals("qtr", model.value().get(0).detailedStatus());
        Assertions.assertEquals("doxdegacdedpkw", model.value().get(0).logUrl());
        Assertions.assertEquals("obp", model.value().get(0).runCommand());
        Assertions.assertEquals("cidpda", model.value().get(0).url());
        Assertions.assertEquals("rm", model.value().get(0).extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.value().get(0).webJobType());
        Assertions.assertEquals("irqqclsaqife", model.value().get(0).error());
        Assertions.assertEquals(false, model.value().get(0).usingSdk());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
