// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ConnectionStringDictionaryInner;
import com.azure.resourcemanager.appservice.generated.models.ConnectionStringType;
import com.azure.resourcemanager.appservice.generated.models.ConnStringValueTypePair;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionStringDictionaryInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionStringDictionaryInner model = BinaryData.fromString(
            "{\"properties\":{\"xnouspdyz\":{\"value\":\"pnse\",\"type\":\"EventHub\"}},\"kind\":\"jl\",\"id\":\"ykdygjvgs\",\"name\":\"jlf\",\"type\":\"h\"}")
            .toObject(ConnectionStringDictionaryInner.class);
        Assertions.assertEquals("jl", model.kind());
        Assertions.assertEquals("pnse", model.properties().get("xnouspdyz").value());
        Assertions.assertEquals(ConnectionStringType.EVENT_HUB, model.properties().get("xnouspdyz").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionStringDictionaryInner model = new ConnectionStringDictionaryInner().withKind("jl")
            .withProperties(mapOf("xnouspdyz",
                new ConnStringValueTypePair().withValue("pnse").withType(ConnectionStringType.EVENT_HUB)));
        model = BinaryData.fromObject(model).toObject(ConnectionStringDictionaryInner.class);
        Assertions.assertEquals("jl", model.kind());
        Assertions.assertEquals("pnse", model.properties().get("xnouspdyz").value());
        Assertions.assertEquals(ConnectionStringType.EVENT_HUB, model.properties().get("xnouspdyz").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
