// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ContinuousWebJobProperties;
import com.azure.resourcemanager.appservice.generated.models.ContinuousWebJobStatus;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ContinuousWebJobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ContinuousWebJobProperties model = BinaryData.fromString(
            "{\"status\":\"Starting\",\"detailed_status\":\"xl\",\"log_url\":\"nocscygimizl\",\"run_command\":\"jbwmgksrlmsppp\",\"url\":\"szthjtryjskdiylg\",\"extra_info_url\":\"uqix\",\"web_job_type\":\"Triggered\",\"error\":\"qowgvmxwbohxdh\",\"using_sdk\":true,\"settings\":{\"umqeu\":\"datarhgnakajwscmneev\",\"bgbzgfhzdzahk\":\"datazyyhmgqaeivjqutx\"}}")
            .toObject(ContinuousWebJobProperties.class);
        Assertions.assertEquals(ContinuousWebJobStatus.STARTING, model.status());
        Assertions.assertEquals("xl", model.detailedStatus());
        Assertions.assertEquals("nocscygimizl", model.logUrl());
        Assertions.assertEquals("jbwmgksrlmsppp", model.runCommand());
        Assertions.assertEquals("szthjtryjskdiylg", model.url());
        Assertions.assertEquals("uqix", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("qowgvmxwbohxdh", model.error());
        Assertions.assertEquals(true, model.usingSdk());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ContinuousWebJobProperties model = new ContinuousWebJobProperties().withStatus(ContinuousWebJobStatus.STARTING)
            .withDetailedStatus("xl")
            .withLogUrl("nocscygimizl")
            .withRunCommand("jbwmgksrlmsppp")
            .withUrl("szthjtryjskdiylg")
            .withExtraInfoUrl("uqix")
            .withWebJobType(WebJobType.TRIGGERED)
            .withError("qowgvmxwbohxdh")
            .withUsingSdk(true)
            .withSettings(mapOf("umqeu", "datarhgnakajwscmneev", "bgbzgfhzdzahk", "datazyyhmgqaeivjqutx"));
        model = BinaryData.fromObject(model).toObject(ContinuousWebJobProperties.class);
        Assertions.assertEquals(ContinuousWebJobStatus.STARTING, model.status());
        Assertions.assertEquals("xl", model.detailedStatus());
        Assertions.assertEquals("nocscygimizl", model.logUrl());
        Assertions.assertEquals("jbwmgksrlmsppp", model.runCommand());
        Assertions.assertEquals("szthjtryjskdiylg", model.url());
        Assertions.assertEquals("uqix", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("qowgvmxwbohxdh", model.error());
        Assertions.assertEquals(true, model.usingSdk());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
