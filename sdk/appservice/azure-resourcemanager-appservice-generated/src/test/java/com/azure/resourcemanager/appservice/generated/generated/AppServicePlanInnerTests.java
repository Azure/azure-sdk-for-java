// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.AppServicePlanInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CapabilityInner;
import com.azure.resourcemanager.appservice.generated.models.ExtendedLocation;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.KubeEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.SkuCapacity;
import com.azure.resourcemanager.appservice.generated.models.SkuDescription;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppServicePlanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppServicePlanInner model = BinaryData.fromString(
            "{\"properties\":{\"workerTierName\":\"vteo\",\"status\":\"Creating\",\"subscription\":\"piudeugfsxzecpa\",\"hostingEnvironmentProfile\":{\"id\":\"ufykhvuhxepmru\",\"name\":\"nabaobnslujd\",\"type\":\"tymkmvguihywart\"},\"maximumNumberOfWorkers\":1822613578,\"numberOfWorkers\":1850568242,\"geoRegion\":\"xkykxdssjp\",\"perSiteScaling\":true,\"elasticScaleEnabled\":true,\"maximumElasticWorkerCount\":1558152895,\"numberOfSites\":116434463,\"isSpot\":false,\"spotExpirationTime\":\"2021-04-05T14:57:51Z\",\"freeOfferExpirationTime\":\"2021-03-17T05:18:17Z\",\"resourceGroup\":\"myinc\",\"reserved\":false,\"isXenon\":false,\"hyperV\":true,\"targetWorkerCount\":1960012272,\"targetWorkerSizeId\":1553660421,\"provisioningState\":\"Failed\",\"kubeEnvironmentProfile\":{\"id\":\"gqcg\",\"name\":\"ugqkctotiowlxteq\",\"type\":\"tjgwdtguk\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"wphqlkccuzgygqw\",\"tier\":\"oiulwgniipr\",\"size\":\"vawuwzdufypivlsb\",\"family\":\"pmcubkmifoxxkub\",\"capacity\":1199627786,\"skuCapacity\":{\"minimum\":1826647983,\"maximum\":74986261,\"elasticMaximum\":1958544538,\"default\":607099666,\"scaleType\":\"vgovpbbttefjokn\"},\"locations\":[\"yzqedikdfrd\",\"iqmrjgeihfqlggw\",\"iwzcxmjpbyeph\",\"gt\"],\"capabilities\":[{\"name\":\"rc\",\"value\":\"fqip\",\"reason\":\"hnp\"}]},\"extendedLocation\":{\"name\":\"qwcabvnui\",\"type\":\"ey\"},\"kind\":\"wlpaugmrmfjlrxwt\",\"location\":\"aukhfkvcisiz\",\"tags\":{\"jwuive\":\"eds\"},\"id\":\"wcgyeewxeiqb\",\"name\":\"smgomguaml\",\"type\":\"dlrgms\"}")
            .toObject(AppServicePlanInner.class);
        Assertions.assertEquals("aukhfkvcisiz", model.location());
        Assertions.assertEquals("eds", model.tags().get("jwuive"));
        Assertions.assertEquals("wphqlkccuzgygqw", model.sku().name());
        Assertions.assertEquals("oiulwgniipr", model.sku().tier());
        Assertions.assertEquals("vawuwzdufypivlsb", model.sku().size());
        Assertions.assertEquals("pmcubkmifoxxkub", model.sku().family());
        Assertions.assertEquals(1199627786, model.sku().capacity());
        Assertions.assertEquals(1826647983, model.sku().skuCapacity().minimum());
        Assertions.assertEquals(74986261, model.sku().skuCapacity().maximum());
        Assertions.assertEquals(1958544538, model.sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(607099666, model.sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("vgovpbbttefjokn", model.sku().skuCapacity().scaleType());
        Assertions.assertEquals("yzqedikdfrd", model.sku().locations().get(0));
        Assertions.assertEquals("rc", model.sku().capabilities().get(0).name());
        Assertions.assertEquals("fqip", model.sku().capabilities().get(0).value());
        Assertions.assertEquals("hnp", model.sku().capabilities().get(0).reason());
        Assertions.assertEquals("qwcabvnui", model.extendedLocation().name());
        Assertions.assertEquals("wlpaugmrmfjlrxwt", model.kind());
        Assertions.assertEquals("vteo", model.workerTierName());
        Assertions.assertEquals("ufykhvuhxepmru", model.hostingEnvironmentProfile().id());
        Assertions.assertEquals(true, model.perSiteScaling());
        Assertions.assertEquals(true, model.elasticScaleEnabled());
        Assertions.assertEquals(1558152895, model.maximumElasticWorkerCount());
        Assertions.assertEquals(false, model.isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-05T14:57:51Z"), model.spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-17T05:18:17Z"), model.freeOfferExpirationTime());
        Assertions.assertEquals(false, model.reserved());
        Assertions.assertEquals(false, model.isXenon());
        Assertions.assertEquals(true, model.hyperV());
        Assertions.assertEquals(1960012272, model.targetWorkerCount());
        Assertions.assertEquals(1553660421, model.targetWorkerSizeId());
        Assertions.assertEquals("gqcg", model.kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, model.zoneRedundant());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppServicePlanInner model = new AppServicePlanInner().withLocation("aukhfkvcisiz")
            .withTags(mapOf("jwuive", "eds"))
            .withSku(new SkuDescription().withName("wphqlkccuzgygqw")
                .withTier("oiulwgniipr")
                .withSize("vawuwzdufypivlsb")
                .withFamily("pmcubkmifoxxkub")
                .withCapacity(1199627786)
                .withSkuCapacity(new SkuCapacity().withMinimum(1826647983)
                    .withMaximum(74986261)
                    .withElasticMaximum(1958544538)
                    .withDefaultProperty(607099666)
                    .withScaleType("vgovpbbttefjokn"))
                .withLocations(Arrays.asList("yzqedikdfrd", "iqmrjgeihfqlggw", "iwzcxmjpbyeph", "gt"))
                .withCapabilities(
                    Arrays.asList(new CapabilityInner().withName("rc").withValue("fqip").withReason("hnp"))))
            .withExtendedLocation(new ExtendedLocation().withName("qwcabvnui"))
            .withKind("wlpaugmrmfjlrxwt")
            .withWorkerTierName("vteo")
            .withHostingEnvironmentProfile(new HostingEnvironmentProfile().withId("ufykhvuhxepmru"))
            .withPerSiteScaling(true)
            .withElasticScaleEnabled(true)
            .withMaximumElasticWorkerCount(1558152895)
            .withIsSpot(false)
            .withSpotExpirationTime(OffsetDateTime.parse("2021-04-05T14:57:51Z"))
            .withFreeOfferExpirationTime(OffsetDateTime.parse("2021-03-17T05:18:17Z"))
            .withReserved(false)
            .withIsXenon(false)
            .withHyperV(true)
            .withTargetWorkerCount(1960012272)
            .withTargetWorkerSizeId(1553660421)
            .withKubeEnvironmentProfile(new KubeEnvironmentProfile().withId("gqcg"))
            .withZoneRedundant(true);
        model = BinaryData.fromObject(model).toObject(AppServicePlanInner.class);
        Assertions.assertEquals("aukhfkvcisiz", model.location());
        Assertions.assertEquals("eds", model.tags().get("jwuive"));
        Assertions.assertEquals("wphqlkccuzgygqw", model.sku().name());
        Assertions.assertEquals("oiulwgniipr", model.sku().tier());
        Assertions.assertEquals("vawuwzdufypivlsb", model.sku().size());
        Assertions.assertEquals("pmcubkmifoxxkub", model.sku().family());
        Assertions.assertEquals(1199627786, model.sku().capacity());
        Assertions.assertEquals(1826647983, model.sku().skuCapacity().minimum());
        Assertions.assertEquals(74986261, model.sku().skuCapacity().maximum());
        Assertions.assertEquals(1958544538, model.sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(607099666, model.sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("vgovpbbttefjokn", model.sku().skuCapacity().scaleType());
        Assertions.assertEquals("yzqedikdfrd", model.sku().locations().get(0));
        Assertions.assertEquals("rc", model.sku().capabilities().get(0).name());
        Assertions.assertEquals("fqip", model.sku().capabilities().get(0).value());
        Assertions.assertEquals("hnp", model.sku().capabilities().get(0).reason());
        Assertions.assertEquals("qwcabvnui", model.extendedLocation().name());
        Assertions.assertEquals("wlpaugmrmfjlrxwt", model.kind());
        Assertions.assertEquals("vteo", model.workerTierName());
        Assertions.assertEquals("ufykhvuhxepmru", model.hostingEnvironmentProfile().id());
        Assertions.assertEquals(true, model.perSiteScaling());
        Assertions.assertEquals(true, model.elasticScaleEnabled());
        Assertions.assertEquals(1558152895, model.maximumElasticWorkerCount());
        Assertions.assertEquals(false, model.isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-05T14:57:51Z"), model.spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-17T05:18:17Z"), model.freeOfferExpirationTime());
        Assertions.assertEquals(false, model.reserved());
        Assertions.assertEquals(false, model.isXenon());
        Assertions.assertEquals(true, model.hyperV());
        Assertions.assertEquals(1960012272, model.targetWorkerCount());
        Assertions.assertEquals(1553660421, model.targetWorkerSizeId());
        Assertions.assertEquals("gqcg", model.kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, model.zoneRedundant());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
