// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.AppServicePlan;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServiceEnvironmentsListAppServicePlansMockTests {
    @Test
    public void testListAppServicePlans() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"workerTierName\":\"shh\",\"status\":\"Pending\",\"subscription\":\"wmzgvnojgmobkali\",\"hostingEnvironmentProfile\":{\"id\":\"kkehpdssvlu\",\"name\":\"ppowxsxbx\",\"type\":\"mixu\"},\"maximumNumberOfWorkers\":660283057,\"numberOfWorkers\":325507776,\"geoRegion\":\"mjqqauftghmtbu\",\"perSiteScaling\":true,\"elasticScaleEnabled\":false,\"maximumElasticWorkerCount\":1161506413,\"numberOfSites\":100145937,\"isSpot\":false,\"spotExpirationTime\":\"2021-07-09T07:32:31Z\",\"freeOfferExpirationTime\":\"2021-02-08T04:13:07Z\",\"resourceGroup\":\"eayodrvwnqb\",\"reserved\":true,\"isXenon\":false,\"hyperV\":false,\"targetWorkerCount\":166107990,\"targetWorkerSizeId\":1087747340,\"provisioningState\":\"Deleting\",\"kubeEnvironmentProfile\":{\"id\":\"lsslfxej\",\"name\":\"csgigsabtxndyjwm\",\"type\":\"gstrzfhehdzo\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"efohnym\",\"tier\":\"mljimkgfv\",\"size\":\"mtjcxigisz\",\"family\":\"bglceetuiv\",\"capacity\":1483901539,\"skuCapacity\":{\"minimum\":811812992,\"maximum\":869282537,\"elasticMaximum\":1290637473,\"default\":1355344083,\"scaleType\":\"tbdxtvl\"},\"locations\":[\"ls\",\"fi\",\"zytxe\",\"qigmqn\"],\"capabilities\":[{\"name\":\"td\",\"value\":\"cid\",\"reason\":\"jwiwouep\"},{\"name\":\"nfyhgrcmcq\",\"value\":\"ledxyecttubtwelu\",\"reason\":\"vdzhwpxpscwylt\"},{\"name\":\"fccyavysfmndrdqq\",\"value\":\"eg\",\"reason\":\"ldkciherzkh\"}]},\"extendedLocation\":{\"name\":\"hjkwfolpjrepah\",\"type\":\"iranxqnzssvn\"},\"kind\":\"tq\",\"location\":\"kzmwdoqr\",\"tags\":{\"yozryoxmfrxfxycj\":\"trnqxi\",\"mlzxxko\":\"alvchfumlf\"},\"id\":\"ipklfwn\",\"name\":\"fkbqlrtffsw\",\"type\":\"dkvljitbnhg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AppServicePlan> response = manager.appServiceEnvironments()
            .listAppServicePlans("qf", "qwesqykqfserls", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kzmwdoqr", response.iterator().next().location());
        Assertions.assertEquals("trnqxi", response.iterator().next().tags().get("yozryoxmfrxfxycj"));
        Assertions.assertEquals("efohnym", response.iterator().next().sku().name());
        Assertions.assertEquals("mljimkgfv", response.iterator().next().sku().tier());
        Assertions.assertEquals("mtjcxigisz", response.iterator().next().sku().size());
        Assertions.assertEquals("bglceetuiv", response.iterator().next().sku().family());
        Assertions.assertEquals(1483901539, response.iterator().next().sku().capacity());
        Assertions.assertEquals(811812992, response.iterator().next().sku().skuCapacity().minimum());
        Assertions.assertEquals(869282537, response.iterator().next().sku().skuCapacity().maximum());
        Assertions.assertEquals(1290637473, response.iterator().next().sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(1355344083, response.iterator().next().sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("tbdxtvl", response.iterator().next().sku().skuCapacity().scaleType());
        Assertions.assertEquals("ls", response.iterator().next().sku().locations().get(0));
        Assertions.assertEquals("td", response.iterator().next().sku().capabilities().get(0).name());
        Assertions.assertEquals("cid", response.iterator().next().sku().capabilities().get(0).value());
        Assertions.assertEquals("jwiwouep", response.iterator().next().sku().capabilities().get(0).reason());
        Assertions.assertEquals("hjkwfolpjrepah", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("tq", response.iterator().next().kind());
        Assertions.assertEquals("shh", response.iterator().next().workerTierName());
        Assertions.assertEquals("kkehpdssvlu", response.iterator().next().hostingEnvironmentProfile().id());
        Assertions.assertEquals(true, response.iterator().next().perSiteScaling());
        Assertions.assertEquals(false, response.iterator().next().elasticScaleEnabled());
        Assertions.assertEquals(1161506413, response.iterator().next().maximumElasticWorkerCount());
        Assertions.assertEquals(false, response.iterator().next().isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-09T07:32:31Z"),
            response.iterator().next().spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T04:13:07Z"),
            response.iterator().next().freeOfferExpirationTime());
        Assertions.assertEquals(true, response.iterator().next().reserved());
        Assertions.assertEquals(false, response.iterator().next().isXenon());
        Assertions.assertEquals(false, response.iterator().next().hyperV());
        Assertions.assertEquals(166107990, response.iterator().next().targetWorkerCount());
        Assertions.assertEquals(1087747340, response.iterator().next().targetWorkerSizeId());
        Assertions.assertEquals("lsslfxej", response.iterator().next().kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, response.iterator().next().zoneRedundant());
    }
}
