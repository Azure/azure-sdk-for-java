// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.DetectorDefinition;
import com.azure.resourcemanager.appservice.generated.fluent.models.DiagnosticAnalysisInner;
import com.azure.resourcemanager.appservice.generated.models.AbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.AnalysisData;
import com.azure.resourcemanager.appservice.generated.models.DataSource;
import com.azure.resourcemanager.appservice.generated.models.DetectorAbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSet;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.ResponseMetadata;
import com.azure.resourcemanager.appservice.generated.models.Solution;
import com.azure.resourcemanager.appservice.generated.models.SolutionType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticAnalysisInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticAnalysisInner model = BinaryData.fromString(
            "{\"properties\":{\"startTime\":\"2021-04-28T20:29:50Z\",\"endTime\":\"2021-10-10T09:25:12Z\",\"abnormalTimePeriods\":[{\"startTime\":\"2021-10-18T01:01:15Z\",\"endTime\":\"2021-02-14T23:52:13Z\",\"events\":[{\"startTime\":\"2021-08-01T14:45:09Z\",\"endTime\":\"2021-08-22T12:35:32Z\",\"message\":\"wphpzfngqj\",\"source\":\"idftujwjjufwbe\",\"priority\":0.8262126152093985,\"metaData\":[[],[]],\"type\":\"PlatformIssue\",\"solutions\":[{},{},{}]},{\"startTime\":\"2021-01-18T07:09:57Z\",\"endTime\":\"2021-05-21T05:18:42Z\",\"message\":\"dvhazcvjy\",\"source\":\"qswbqerzwx\",\"priority\":22.328780595432296,\"metaData\":[[],[],[],[]],\"type\":\"AppCrash\",\"solutions\":[{},{},{},{}]},{\"startTime\":\"2021-07-14T05:45:21Z\",\"endTime\":\"2021-11-18T11:20:29Z\",\"message\":\"gdstyouam\",\"source\":\"wreswmowegm\",\"priority\":53.296190008619206,\"metaData\":[[]],\"type\":\"PlatformIssue\",\"solutions\":[{}]}],\"solutions\":[{\"id\":40.29518506616219,\"displayName\":\"itnspxlzde\",\"order\":89.13975112456542,\"description\":\"jwaiuf\",\"type\":\"DeepInvestigation\",\"data\":[[],[],[],[]],\"metadata\":[[],[],[]]},{\"id\":38.11295302508544,\"displayName\":\"rojsydg\",\"order\":88.96824814285654,\"description\":\"ygywe\",\"type\":\"QuickSolution\",\"data\":[[]],\"metadata\":[[],[],[],[]]},{\"id\":83.01804282709125,\"displayName\":\"m\",\"order\":37.47105312629081,\"description\":\"dsmaklixqcahyhxa\",\"type\":\"DeepInvestigation\",\"data\":[[],[]],\"metadata\":[[]]},{\"id\":40.781097693034084,\"displayName\":\"dtblxpk\",\"order\":5.499439569580811,\"description\":\"odqhyk\",\"type\":\"QuickSolution\",\"data\":[[]],\"metadata\":[[],[],[]]}]},{\"startTime\":\"2021-12-06T22:48:46Z\",\"endTime\":\"2021-04-16T03:03:13Z\",\"events\":[{\"startTime\":\"2021-07-25T21:27:57Z\",\"endTime\":\"2021-02-11T05:13:04Z\",\"message\":\"oqodkadpp\",\"source\":\"bngqladywrx\",\"priority\":6.856418805321929,\"metaData\":[[],[]],\"type\":\"RuntimeIssueDetected\",\"solutions\":[{},{}]},{\"startTime\":\"2021-06-03T18:15:05Z\",\"endTime\":\"2021-06-14T02:58:28Z\",\"message\":\"nuyemlowuo\",\"source\":\"lxlnwyrmo\",\"priority\":98.29700211055734,\"metaData\":[[]],\"type\":\"AseDeployment\",\"solutions\":[{},{}]},{\"startTime\":\"2021-10-31T18:45:37Z\",\"endTime\":\"2020-12-31T18:35:15Z\",\"message\":\"wtdvrfmvli\",\"source\":\"vjdrqcrjidhftuk\",\"priority\":62.58320566138834,\"metaData\":[[],[],[],[]],\"type\":\"AppDeployment\",\"solutions\":[{}]}],\"solutions\":[{\"id\":24.69344251912473,\"displayName\":\"njyixh\",\"order\":56.77353866313772,\"description\":\"qxmbjroumzzn\",\"type\":\"DeepInvestigation\",\"data\":[[],[]],\"metadata\":[[],[]]},{\"id\":73.07561165297776,\"displayName\":\"xonjtpusl\",\"order\":86.1461165481644,\"description\":\"tiotzb\",\"type\":\"QuickSolution\",\"data\":[[],[],[],[]],\"metadata\":[[],[],[]]}]},{\"startTime\":\"2021-03-17T00:23:01Z\",\"endTime\":\"2021-12-04T08:15:35Z\",\"events\":[{\"startTime\":\"2021-01-18T17:52:58Z\",\"endTime\":\"2021-02-20T00:20:16Z\",\"message\":\"wsocnequygdjbo\",\"source\":\"rmtqjkqevadr\",\"priority\":17.545812357578217,\"metaData\":[[],[],[]],\"type\":\"Other\",\"solutions\":[{},{},{}]},{\"startTime\":\"2021-06-17T20:15:45Z\",\"endTime\":\"2021-11-17T14:59:06Z\",\"message\":\"idisczskosw\",\"source\":\"iqazugamxzkr\",\"priority\":78.00032826320238,\"metaData\":[[],[],[]],\"type\":\"RuntimeIssueDetected\",\"solutions\":[{},{}]}],\"solutions\":[{\"id\":30.52103149590284,\"displayName\":\"u\",\"order\":56.94713585558856,\"description\":\"ezax\",\"type\":\"QuickSolution\",\"data\":[[],[],[],[]],\"metadata\":[[]]},{\"id\":37.73812260294398,\"displayName\":\"hnepkpeti\",\"order\":76.80393879632035,\"description\":\"ubxdukecpxdazvdh\",\"type\":\"QuickSolution\",\"data\":[[],[]],\"metadata\":[[],[],[],[]]},{\"id\":57.900881055448025,\"displayName\":\"lnsntrpc\",\"order\":38.99606689921983,\"description\":\"f\",\"type\":\"QuickSolution\",\"data\":[[],[]],\"metadata\":[[]]},{\"id\":50.08767536086476,\"displayName\":\"dpvcbhhezyq\",\"order\":64.01219713325213,\"description\":\"xut\",\"type\":\"QuickSolution\",\"data\":[[]],\"metadata\":[[],[],[],[]]}]},{\"startTime\":\"2021-11-02T10:58:10Z\",\"endTime\":\"2021-11-24T07:16:34Z\",\"events\":[{\"startTime\":\"2021-02-09T14:08:52Z\",\"endTime\":\"2021-08-31T05:43:57Z\",\"message\":\"ol\",\"source\":\"x\",\"priority\":67.01734221654729,\"metaData\":[[],[],[],[]],\"type\":\"ServiceIncident\",\"solutions\":[{},{},{},{}]},{\"startTime\":\"2021-09-23T15:19:55Z\",\"endTime\":\"2021-07-15T11:18:57Z\",\"message\":\"xhmtfhocnxzc\",\"source\":\"hngxnoqrxtd\",\"priority\":81.17676785602424,\"metaData\":[[]],\"type\":\"ServiceIncident\",\"solutions\":[{},{},{}]},{\"startTime\":\"2020-12-20T16:14Z\",\"endTime\":\"2021-03-09T00:51:34Z\",\"message\":\"hepfwwtjfdoes\",\"source\":\"hmwcdbck\",\"priority\":54.06148664356164,\"metaData\":[[],[],[]],\"type\":\"RuntimeIssueDetected\",\"solutions\":[{},{}]},{\"startTime\":\"2021-05-20T23:38:08Z\",\"endTime\":\"2021-05-29T05:45:19Z\",\"message\":\"rbhtmeplvukaobr\",\"source\":\"pgsn\",\"priority\":16.630630161152805,\"metaData\":[[],[]],\"type\":\"ServiceIncident\",\"solutions\":[{},{},{}]}],\"solutions\":[{\"id\":88.0462243507488,\"displayName\":\"ywalhjymxcg\",\"order\":37.92047735173638,\"description\":\"rclsso\",\"type\":\"BestPractices\",\"data\":[[]],\"metadata\":[[]]},{\"id\":73.87501337182407,\"displayName\":\"lbvgjc\",\"order\":11.602133333133867,\"description\":\"ji\",\"type\":\"BestPractices\",\"data\":[[]],\"metadata\":[[]]}]}],\"payload\":[{\"source\":\"cufqbvntnrgmqs\",\"detectorDefinition\":{\"displayName\":\"cekxgnly\",\"description\":\"xcpwzvmdok\",\"rank\":11.688482480015526,\"isEnabled\":true},\"metrics\":[{\"name\":\"lboncqbazqicqc\",\"unit\":\"gtvxbyj\",\"startTime\":\"2021-08-29T03:11:39Z\",\"endTime\":\"2021-12-02T11:30:51Z\",\"timeGrain\":\"dpkxyqvg\",\"values\":[{},{}]},{\"name\":\"detv\",\"unit\":\"kxdxuwsaifmcwn\",\"startTime\":\"2021-09-25T23:57:18Z\",\"endTime\":\"2021-02-25T08:45:47Z\",\"timeGrain\":\"hg\",\"values\":[{}]},{\"name\":\"cknjolgj\",\"unit\":\"xpvelszerqzevxo\",\"startTime\":\"2021-02-25T03:05:58Z\",\"endTime\":\"2021-12-08T00:40:43Z\",\"timeGrain\":\"waljglzoblqwaaf\",\"values\":[{},{}]},{\"name\":\"hmzyqbhdvafjrqpj\",\"unit\":\"r\",\"startTime\":\"2021-02-14T07:52:55Z\",\"endTime\":\"2021-10-27T22:59:21Z\",\"timeGrain\":\"xwmzwdfkbnrz\",\"values\":[{},{}]}],\"data\":[[{},{},{}],[{}],[{},{}],[{},{},{}]],\"detectorMetaData\":{\"dataSource\":{\"instructions\":[\"gxx\"],\"dataSourceUri\":[{},{},{}]}}}],\"nonCorrelatedDetectors\":[{\"displayName\":\"dgvpyig\",\"description\":\"qqil\",\"rank\":50.35641938990849,\"isEnabled\":false},{\"displayName\":\"oedxngucaifpaurw\",\"description\":\"ilfjqqacdmk\",\"rank\":48.40326960208294,\"isEnabled\":false},{\"displayName\":\"wcyz\",\"description\":\"keciqchxrtuicd\",\"rank\":91.84098799148146,\"isEnabled\":false}]},\"kind\":\"p\",\"id\":\"hzzwvywrgyngy\",\"name\":\"grpxncakiqaondjr\",\"type\":\"clamgglvlmfejdoq\"}")
            .toObject(DiagnosticAnalysisInner.class);
        Assertions.assertEquals("p", model.kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-28T20:29:50Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T09:25:12Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-18T01:01:15Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-14T23:52:13Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T14:45:09Z"),
            model.abnormalTimePeriods().get(0).events().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-22T12:35:32Z"),
            model.abnormalTimePeriods().get(0).events().get(0).endTime());
        Assertions.assertEquals("wphpzfngqj", model.abnormalTimePeriods().get(0).events().get(0).message());
        Assertions.assertEquals("idftujwjjufwbe", model.abnormalTimePeriods().get(0).events().get(0).source());
        Assertions.assertEquals(0.8262126152093985D, model.abnormalTimePeriods().get(0).events().get(0).priority());
        Assertions.assertEquals(IssueType.PLATFORM_ISSUE, model.abnormalTimePeriods().get(0).events().get(0).type());
        Assertions.assertEquals(40.29518506616219D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("itnspxlzde", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(89.13975112456542D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("jwaiuf", model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("cufqbvntnrgmqs", model.payload().get(0).source());
        Assertions.assertEquals("lboncqbazqicqc", model.payload().get(0).metrics().get(0).name());
        Assertions.assertEquals("gtvxbyj", model.payload().get(0).metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T03:11:39Z"),
            model.payload().get(0).metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-02T11:30:51Z"),
            model.payload().get(0).metrics().get(0).endTime());
        Assertions.assertEquals("dpkxyqvg", model.payload().get(0).metrics().get(0).timeGrain());
        Assertions.assertEquals("gxx", model.payload().get(0).detectorMetadata().dataSource().instructions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticAnalysisInner model
            = new DiagnosticAnalysisInner().withKind("p")
                .withStartTime(OffsetDateTime.parse("2021-04-28T20:29:50Z"))
                .withEndTime(OffsetDateTime.parse("2021-10-10T09:25:12Z"))
                .withAbnormalTimePeriods(
                    Arrays
                        .asList(
                            new AbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-10-18T01:01:15Z"))
                                .withEndTime(OffsetDateTime.parse("2021-02-14T23:52:13Z"))
                                .withEvents(Arrays.asList(
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2021-08-01T14:45:09Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-08-22T12:35:32Z"))
                                        .withMessage("wphpzfngqj")
                                        .withSource("idftujwjjufwbe")
                                        .withPriority(0.8262126152093985D)
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                        .withType(IssueType.PLATFORM_ISSUE)
                                        .withSolutions(Arrays.asList(new Solution(), new Solution(), new Solution())),
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2021-01-18T07:09:57Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-05-21T05:18:42Z"))
                                        .withMessage("dvhazcvjy")
                                        .withSource("qswbqerzwx")
                                        .withPriority(22.328780595432296D)
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(),
                                            Arrays.asList()))
                                        .withType(IssueType.APP_CRASH)
                                        .withSolutions(Arrays.asList(new Solution(), new Solution(), new Solution(),
                                            new Solution())),
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2021-07-14T05:45:21Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-11-18T11:20:29Z"))
                                        .withMessage("gdstyouam")
                                        .withSource("wreswmowegm")
                                        .withPriority(53.296190008619206D)
                                        .withMetadata(Arrays.asList(Arrays.asList()))
                                        .withType(IssueType.PLATFORM_ISSUE)
                                        .withSolutions(Arrays.asList(new Solution()))))
                                .withSolutions(Arrays.asList(
                                    new Solution().withId(40.29518506616219D)
                                        .withDisplayName("itnspxlzde")
                                        .withOrder(89.13975112456542D)
                                        .withDescription("jwaiuf")
                                        .withType(SolutionType.DEEP_INVESTIGATION)
                                        .withData(Arrays
                                            .asList(Arrays.asList(), Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList())),
                                    new Solution().withId(38.11295302508544D)
                                        .withDisplayName("rojsydg")
                                        .withOrder(88.96824814285654D)
                                        .withDescription("ygywe")
                                        .withType(SolutionType.QUICK_SOLUTION)
                                        .withData(Arrays.asList(Arrays.asList()))
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(),
                                            Arrays.asList())),
                                    new Solution().withId(83.01804282709125D)
                                        .withDisplayName("m")
                                        .withOrder(37.47105312629081D)
                                        .withDescription("dsmaklixqcahyhxa")
                                        .withType(SolutionType.DEEP_INVESTIGATION)
                                        .withData(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                        .withMetadata(Arrays.asList(Arrays.asList())),
                                    new Solution().withId(40.781097693034084D)
                                        .withDisplayName("dtblxpk")
                                        .withOrder(5.499439569580811D)
                                        .withDescription("odqhyk")
                                        .withType(SolutionType.QUICK_SOLUTION)
                                        .withData(Arrays.asList(Arrays.asList()))
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                            Arrays.asList())))),
                            new AbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-12-06T22:48:46Z"))
                                .withEndTime(OffsetDateTime.parse("2021-04-16T03:03:13Z"))
                                .withEvents(
                                    Arrays
                                        .asList(
                                            new DetectorAbnormalTimePeriod()
                                                .withStartTime(OffsetDateTime.parse("2021-07-25T21:27:57Z"))
                                                .withEndTime(OffsetDateTime.parse("2021-02-11T05:13:04Z"))
                                                .withMessage("oqodkadpp")
                                                .withSource("bngqladywrx")
                                                .withPriority(6.856418805321929D)
                                                .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                                .withType(IssueType.RUNTIME_ISSUE_DETECTED)
                                                .withSolutions(Arrays.asList(new Solution(), new Solution())),
                                            new DetectorAbnormalTimePeriod()
                                                .withStartTime(OffsetDateTime.parse("2021-06-03T18:15:05Z"))
                                                .withEndTime(OffsetDateTime.parse("2021-06-14T02:58:28Z"))
                                                .withMessage("nuyemlowuo")
                                                .withSource("lxlnwyrmo")
                                                .withPriority(98.29700211055734D)
                                                .withMetadata(Arrays.asList(Arrays.asList()))
                                                .withType(IssueType.ASE_DEPLOYMENT)
                                                .withSolutions(Arrays.asList(new Solution(), new Solution())),
                                            new DetectorAbnormalTimePeriod()
                                                .withStartTime(OffsetDateTime.parse("2021-10-31T18:45:37Z"))
                                                .withEndTime(OffsetDateTime.parse("2020-12-31T18:35:15Z"))
                                                .withMessage("wtdvrfmvli")
                                                .withSource("vjdrqcrjidhftuk")
                                                .withPriority(62.58320566138834D)
                                                .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                                    Arrays.asList(), Arrays.asList()))
                                                .withType(IssueType.APP_DEPLOYMENT)
                                                .withSolutions(Arrays.asList(new Solution()))))
                                .withSolutions(
                                    Arrays
                                        .asList(
                                            new Solution().withId(24.69344251912473D)
                                                .withDisplayName("njyixh")
                                                .withOrder(56.77353866313772D)
                                                .withDescription("qxmbjroumzzn")
                                                .withType(SolutionType.DEEP_INVESTIGATION)
                                                .withData(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                                .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList())),
                                            new Solution().withId(73.07561165297776D)
                                                .withDisplayName("xonjtpusl")
                                                .withOrder(86.1461165481644D)
                                                .withDescription("tiotzb")
                                                .withType(SolutionType.QUICK_SOLUTION)
                                                .withData(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                                    Arrays.asList(), Arrays.asList()))
                                                .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                                    Arrays.asList())))),
                            new AbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-03-17T00:23:01Z"))
                                .withEndTime(OffsetDateTime.parse("2021-12-04T08:15:35Z"))
                                .withEvents(
                                    Arrays.asList(
                                        new DetectorAbnormalTimePeriod()
                                            .withStartTime(OffsetDateTime.parse("2021-01-18T17:52:58Z"))
                                            .withEndTime(OffsetDateTime.parse("2021-02-20T00:20:16Z"))
                                            .withMessage("wsocnequygdjbo")
                                            .withSource("rmtqjkqevadr")
                                            .withPriority(17.545812357578217D)
                                            .withMetadata(
                                                Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                            .withType(IssueType.OTHER)
                                            .withSolutions(
                                                Arrays.asList(new Solution(), new Solution(), new Solution())),
                                        new DetectorAbnormalTimePeriod()
                                            .withStartTime(OffsetDateTime.parse("2021-06-17T20:15:45Z"))
                                            .withEndTime(OffsetDateTime.parse("2021-11-17T14:59:06Z"))
                                            .withMessage("idisczskosw")
                                            .withSource("iqazugamxzkr")
                                            .withPriority(78.00032826320238D)
                                            .withMetadata(
                                                Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                            .withType(IssueType.RUNTIME_ISSUE_DETECTED)
                                            .withSolutions(Arrays.asList(new Solution(), new Solution()))))
                                .withSolutions(
                                    Arrays
                                        .asList(
                                            new Solution().withId(30.52103149590284D)
                                                .withDisplayName("u")
                                                .withOrder(56.94713585558856D)
                                                .withDescription("ezax")
                                                .withType(SolutionType.QUICK_SOLUTION)
                                                .withData(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                                    Arrays.asList(), Arrays.asList()))
                                                .withMetadata(Arrays.asList(Arrays.asList())),
                                            new Solution().withId(37.73812260294398D)
                                                .withDisplayName("hnepkpeti")
                                                .withOrder(76.80393879632035D)
                                                .withDescription("ubxdukecpxdazvdh")
                                                .withType(SolutionType.QUICK_SOLUTION)
                                                .withData(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                                .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                                    Arrays.asList(), Arrays.asList())),
                                            new Solution().withId(57.900881055448025D)
                                                .withDisplayName("lnsntrpc")
                                                .withOrder(38.99606689921983D)
                                                .withDescription("f")
                                                .withType(SolutionType.QUICK_SOLUTION)
                                                .withData(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                                .withMetadata(Arrays.asList(Arrays.asList())),
                                            new Solution().withId(50.08767536086476D)
                                                .withDisplayName("dpvcbhhezyq")
                                                .withOrder(64.01219713325213D)
                                                .withDescription("xut")
                                                .withType(SolutionType.QUICK_SOLUTION)
                                                .withData(Arrays.asList(Arrays.asList()))
                                                .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(),
                                                    Arrays.asList(), Arrays.asList())))),
                            new AbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-11-02T10:58:10Z"))
                                .withEndTime(OffsetDateTime.parse("2021-11-24T07:16:34Z"))
                                .withEvents(Arrays.asList(
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2021-02-09T14:08:52Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-08-31T05:43:57Z"))
                                        .withMessage("ol")
                                        .withSource("x")
                                        .withPriority(67.01734221654729D)
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList(),
                                            Arrays.asList()))
                                        .withType(IssueType.SERVICE_INCIDENT)
                                        .withSolutions(Arrays.asList(new Solution(), new Solution(), new Solution(),
                                            new Solution())),
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2021-09-23T15:19:55Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-07-15T11:18:57Z"))
                                        .withMessage("xhmtfhocnxzc")
                                        .withSource("hngxnoqrxtd")
                                        .withPriority(81.17676785602424D)
                                        .withMetadata(Arrays.asList(Arrays.asList()))
                                        .withType(IssueType.SERVICE_INCIDENT)
                                        .withSolutions(Arrays.asList(new Solution(), new Solution(), new Solution())),
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2020-12-20T16:14Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-03-09T00:51:34Z"))
                                        .withMessage("hepfwwtjfdoes")
                                        .withSource("hmwcdbck")
                                        .withPriority(54.06148664356164D)
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList(), Arrays.asList()))
                                        .withType(IssueType.RUNTIME_ISSUE_DETECTED)
                                        .withSolutions(Arrays.asList(new Solution(), new Solution())),
                                    new DetectorAbnormalTimePeriod()
                                        .withStartTime(OffsetDateTime.parse("2021-05-20T23:38:08Z"))
                                        .withEndTime(OffsetDateTime.parse("2021-05-29T05:45:19Z"))
                                        .withMessage("rbhtmeplvukaobr")
                                        .withSource("pgsn")
                                        .withPriority(16.630630161152805D)
                                        .withMetadata(Arrays.asList(Arrays.asList(), Arrays.asList()))
                                        .withType(IssueType.SERVICE_INCIDENT)
                                        .withSolutions(Arrays.asList(new Solution(), new Solution(), new Solution()))))
                                .withSolutions(Arrays.asList(
                                    new Solution().withId(88.0462243507488D)
                                        .withDisplayName("ywalhjymxcg")
                                        .withOrder(37.92047735173638D)
                                        .withDescription("rclsso")
                                        .withType(SolutionType.BEST_PRACTICES)
                                        .withData(Arrays.asList(Arrays.asList()))
                                        .withMetadata(Arrays.asList(Arrays.asList())),
                                    new Solution().withId(73.87501337182407D)
                                        .withDisplayName("lbvgjc")
                                        .withOrder(11.602133333133867D)
                                        .withDescription("ji")
                                        .withType(SolutionType.BEST_PRACTICES)
                                        .withData(Arrays.asList(Arrays.asList()))
                                        .withMetadata(Arrays.asList(Arrays.asList()))))))
                .withPayload(Arrays.asList(new AnalysisData().withSource("cufqbvntnrgmqs")
                    .withDetectorDefinition(new DetectorDefinition())
                    .withMetrics(Arrays.asList(
                        new DiagnosticMetricSet().withName("lboncqbazqicqc")
                            .withUnit("gtvxbyj")
                            .withStartTime(OffsetDateTime.parse("2021-08-29T03:11:39Z"))
                            .withEndTime(OffsetDateTime.parse("2021-12-02T11:30:51Z"))
                            .withTimeGrain("dpkxyqvg")
                            .withValues(Arrays.asList(new DiagnosticMetricSample(), new DiagnosticMetricSample())),
                        new DiagnosticMetricSet().withName("detv")
                            .withUnit("kxdxuwsaifmcwn")
                            .withStartTime(OffsetDateTime.parse("2021-09-25T23:57:18Z"))
                            .withEndTime(OffsetDateTime.parse("2021-02-25T08:45:47Z"))
                            .withTimeGrain("hg")
                            .withValues(Arrays.asList(new DiagnosticMetricSample())),
                        new DiagnosticMetricSet().withName("cknjolgj")
                            .withUnit("xpvelszerqzevxo")
                            .withStartTime(OffsetDateTime.parse("2021-02-25T03:05:58Z"))
                            .withEndTime(OffsetDateTime.parse("2021-12-08T00:40:43Z"))
                            .withTimeGrain("waljglzoblqwaaf")
                            .withValues(Arrays.asList(new DiagnosticMetricSample(), new DiagnosticMetricSample())),
                        new DiagnosticMetricSet().withName("hmzyqbhdvafjrqpj")
                            .withUnit("r")
                            .withStartTime(OffsetDateTime.parse("2021-02-14T07:52:55Z"))
                            .withEndTime(OffsetDateTime.parse("2021-10-27T22:59:21Z"))
                            .withTimeGrain("xwmzwdfkbnrz")
                            .withValues(Arrays.asList(new DiagnosticMetricSample(), new DiagnosticMetricSample()))))
                    .withData(
                        Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                            Arrays.asList(new NameValuePair()), Arrays.asList(new NameValuePair(), new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))
                    .withDetectorMetadata(
                        new ResponseMetadata().withDataSource(new DataSource().withInstructions(Arrays.asList("gxx"))
                            .withDataSourceUri(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()))))))
                .withNonCorrelatedDetectors(
                    Arrays.asList(new DetectorDefinition(), new DetectorDefinition(), new DetectorDefinition()));
        model = BinaryData.fromObject(model).toObject(DiagnosticAnalysisInner.class);
        Assertions.assertEquals("p", model.kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-28T20:29:50Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-10T09:25:12Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-18T01:01:15Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-14T23:52:13Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T14:45:09Z"),
            model.abnormalTimePeriods().get(0).events().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-22T12:35:32Z"),
            model.abnormalTimePeriods().get(0).events().get(0).endTime());
        Assertions.assertEquals("wphpzfngqj", model.abnormalTimePeriods().get(0).events().get(0).message());
        Assertions.assertEquals("idftujwjjufwbe", model.abnormalTimePeriods().get(0).events().get(0).source());
        Assertions.assertEquals(0.8262126152093985D, model.abnormalTimePeriods().get(0).events().get(0).priority());
        Assertions.assertEquals(IssueType.PLATFORM_ISSUE, model.abnormalTimePeriods().get(0).events().get(0).type());
        Assertions.assertEquals(40.29518506616219D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("itnspxlzde", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(89.13975112456542D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("jwaiuf", model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("cufqbvntnrgmqs", model.payload().get(0).source());
        Assertions.assertEquals("lboncqbazqicqc", model.payload().get(0).metrics().get(0).name());
        Assertions.assertEquals("gtvxbyj", model.payload().get(0).metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-29T03:11:39Z"),
            model.payload().get(0).metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-02T11:30:51Z"),
            model.payload().get(0).metrics().get(0).endTime());
        Assertions.assertEquals("dpkxyqvg", model.payload().get(0).metrics().get(0).timeGrain());
        Assertions.assertEquals("gxx", model.payload().get(0).detectorMetadata().dataSource().instructions().get(0));
    }
}
