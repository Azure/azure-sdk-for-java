// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.SiteLogsConfigInner;
import com.azure.resourcemanager.appservice.generated.models.ApplicationLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.AzureBlobStorageApplicationLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.AzureBlobStorageHttpLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.AzureTableStorageApplicationLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.EnabledConfig;
import com.azure.resourcemanager.appservice.generated.models.FileSystemApplicationLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.FileSystemHttpLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.HttpLogsConfig;
import com.azure.resourcemanager.appservice.generated.models.LogLevel;
import org.junit.jupiter.api.Assertions;

public final class SiteLogsConfigInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SiteLogsConfigInner model = BinaryData.fromString(
            "{\"properties\":{\"applicationLogs\":{\"fileSystem\":{\"level\":\"Warning\"},\"azureTableStorage\":{\"level\":\"Error\",\"sasUrl\":\"ognhtvagw\"},\"azureBlobStorage\":{\"level\":\"Error\",\"sasUrl\":\"vpnyldjd\",\"retentionInDays\":1986399811}},\"httpLogs\":{\"fileSystem\":{\"retentionInMb\":1092505176,\"retentionInDays\":1181532639,\"enabled\":true},\"azureBlobStorage\":{\"sasUrl\":\"hnrjlqdoqejexfdl\",\"retentionInDays\":544317348,\"enabled\":false}},\"failedRequestsTracing\":{\"enabled\":true},\"detailedErrorMessages\":{\"enabled\":true}},\"kind\":\"rklpdyehjrwcflv\",\"id\":\"bocayw\",\"name\":\"fvuhzmolhveolngs\",\"type\":\"mhwdxqupyml\"}")
            .toObject(SiteLogsConfigInner.class);
        Assertions.assertEquals("rklpdyehjrwcflv", model.kind());
        Assertions.assertEquals(LogLevel.WARNING, model.applicationLogs().fileSystem().level());
        Assertions.assertEquals(LogLevel.ERROR, model.applicationLogs().azureTableStorage().level());
        Assertions.assertEquals("ognhtvagw", model.applicationLogs().azureTableStorage().sasUrl());
        Assertions.assertEquals(LogLevel.ERROR, model.applicationLogs().azureBlobStorage().level());
        Assertions.assertEquals("vpnyldjd", model.applicationLogs().azureBlobStorage().sasUrl());
        Assertions.assertEquals(1986399811, model.applicationLogs().azureBlobStorage().retentionInDays());
        Assertions.assertEquals(1092505176, model.httpLogs().fileSystem().retentionInMb());
        Assertions.assertEquals(1181532639, model.httpLogs().fileSystem().retentionInDays());
        Assertions.assertEquals(true, model.httpLogs().fileSystem().enabled());
        Assertions.assertEquals("hnrjlqdoqejexfdl", model.httpLogs().azureBlobStorage().sasUrl());
        Assertions.assertEquals(544317348, model.httpLogs().azureBlobStorage().retentionInDays());
        Assertions.assertEquals(false, model.httpLogs().azureBlobStorage().enabled());
        Assertions.assertEquals(true, model.failedRequestsTracing().enabled());
        Assertions.assertEquals(true, model.detailedErrorMessages().enabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SiteLogsConfigInner model = new SiteLogsConfigInner().withKind("rklpdyehjrwcflv")
            .withApplicationLogs(new ApplicationLogsConfig()
                .withFileSystem(new FileSystemApplicationLogsConfig().withLevel(LogLevel.WARNING))
                .withAzureTableStorage(
                    new AzureTableStorageApplicationLogsConfig().withLevel(LogLevel.ERROR).withSasUrl("ognhtvagw"))
                .withAzureBlobStorage(new AzureBlobStorageApplicationLogsConfig().withLevel(LogLevel.ERROR)
                    .withSasUrl("vpnyldjd")
                    .withRetentionInDays(1986399811)))
            .withHttpLogs(new HttpLogsConfig()
                .withFileSystem(new FileSystemHttpLogsConfig().withRetentionInMb(1092505176)
                    .withRetentionInDays(1181532639)
                    .withEnabled(true))
                .withAzureBlobStorage(new AzureBlobStorageHttpLogsConfig().withSasUrl("hnrjlqdoqejexfdl")
                    .withRetentionInDays(544317348)
                    .withEnabled(false)))
            .withFailedRequestsTracing(new EnabledConfig().withEnabled(true))
            .withDetailedErrorMessages(new EnabledConfig().withEnabled(true));
        model = BinaryData.fromObject(model).toObject(SiteLogsConfigInner.class);
        Assertions.assertEquals("rklpdyehjrwcflv", model.kind());
        Assertions.assertEquals(LogLevel.WARNING, model.applicationLogs().fileSystem().level());
        Assertions.assertEquals(LogLevel.ERROR, model.applicationLogs().azureTableStorage().level());
        Assertions.assertEquals("ognhtvagw", model.applicationLogs().azureTableStorage().sasUrl());
        Assertions.assertEquals(LogLevel.ERROR, model.applicationLogs().azureBlobStorage().level());
        Assertions.assertEquals("vpnyldjd", model.applicationLogs().azureBlobStorage().sasUrl());
        Assertions.assertEquals(1986399811, model.applicationLogs().azureBlobStorage().retentionInDays());
        Assertions.assertEquals(1092505176, model.httpLogs().fileSystem().retentionInMb());
        Assertions.assertEquals(1181532639, model.httpLogs().fileSystem().retentionInDays());
        Assertions.assertEquals(true, model.httpLogs().fileSystem().enabled());
        Assertions.assertEquals("hnrjlqdoqejexfdl", model.httpLogs().azureBlobStorage().sasUrl());
        Assertions.assertEquals(544317348, model.httpLogs().azureBlobStorage().retentionInDays());
        Assertions.assertEquals(false, model.httpLogs().azureBlobStorage().enabled());
        Assertions.assertEquals(true, model.failedRequestsTracing().enabled());
        Assertions.assertEquals(true, model.detailedErrorMessages().enabled());
    }
}
