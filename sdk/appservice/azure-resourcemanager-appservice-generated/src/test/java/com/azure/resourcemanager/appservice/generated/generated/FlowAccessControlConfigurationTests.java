// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.FlowAccessControlConfiguration;
import com.azure.resourcemanager.appservice.generated.models.FlowAccessControlConfigurationPolicy;
import com.azure.resourcemanager.appservice.generated.models.IpAddressRange;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicies;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicy;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationPolicyClaim;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationProviderType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowAccessControlConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlowAccessControlConfiguration model = BinaryData.fromString(
            "{\"triggers\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"wedllpnoebolhy\"},{\"addressRange\":\"hcjugduoggxszmy\"}],\"openAuthenticationPolicies\":{\"policies\":{\"pmwzplcr\":{\"type\":\"AAD\",\"claims\":[{},{},{},{}]},\"svs\":{\"type\":\"AAD\",\"claims\":[{}]}}}},\"contents\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"aidjeddnqmnzch\"}],\"openAuthenticationPolicies\":{\"policies\":{\"acuxtnucko\":{\"type\":\"AAD\",\"claims\":[{},{},{}]},\"wdh\":{\"type\":\"AAD\",\"claims\":[{},{},{}]},\"q\":{\"type\":\"AAD\",\"claims\":[{}]},\"bpzxushmltihs\":{\"type\":\"AAD\",\"claims\":[{}]}}}},\"actions\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"bcykn\"}],\"openAuthenticationPolicies\":{\"policies\":{\"pggsyeydctjne\":{\"type\":\"AAD\",\"claims\":[{},{},{},{}]}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"lzbwby\"},{\"addressRange\":\"isp\"},{\"addressRange\":\"khvpvbzm\"},{\"addressRange\":\"vhxstxsfztlv\"}],\"openAuthenticationPolicies\":{\"policies\":{\"dlso\":{\"type\":\"AAD\",\"claims\":[{},{}]},\"hdyf\":{\"type\":\"AAD\",\"claims\":[{}]}}}}}")
            .toObject(FlowAccessControlConfiguration.class);
        Assertions.assertEquals("wedllpnoebolhy", model.triggers().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.triggers().openAuthenticationPolicies().policies().get("pmwzplcr").type());
        Assertions.assertEquals("aidjeddnqmnzch", model.contents().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.contents().openAuthenticationPolicies().policies().get("acuxtnucko").type());
        Assertions.assertEquals("bcykn", model.actions().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.actions().openAuthenticationPolicies().policies().get("pggsyeydctjne").type());
        Assertions.assertEquals("lzbwby", model.workflowManagement().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.workflowManagement().openAuthenticationPolicies().policies().get("dlso").type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlowAccessControlConfiguration model
            = new FlowAccessControlConfiguration()
                .withTriggers(new FlowAccessControlConfigurationPolicy()
                    .withAllowedCallerIpAddresses(Arrays.asList(new IpAddressRange().withAddressRange("wedllpnoebolhy"),
                        new IpAddressRange().withAddressRange("hcjugduoggxszmy")))
                    .withOpenAuthenticationPolicies(
                        new OpenAuthenticationAccessPolicies()
                            .withPolicies(mapOf("pmwzplcr",
                                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                    .withClaims(Arrays.asList(
                                        new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim(),
                                        new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim())),
                                "svs",
                                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                    .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim()))))))
                .withContents(
                    new FlowAccessControlConfigurationPolicy()
                        .withAllowedCallerIpAddresses(
                            Arrays.asList(new IpAddressRange().withAddressRange("aidjeddnqmnzch")))
                        .withOpenAuthenticationPolicies(
                            new OpenAuthenticationAccessPolicies()
                                .withPolicies(mapOf("acuxtnucko",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                            new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim())),
                                    "wdh",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                            new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim())),
                                    "q",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim())),
                                    "bpzxushmltihs",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim()))))))
                .withActions(new FlowAccessControlConfigurationPolicy()
                    .withAllowedCallerIpAddresses(Arrays.asList(new IpAddressRange().withAddressRange("bcykn")))
                    .withOpenAuthenticationPolicies(
                        new OpenAuthenticationAccessPolicies().withPolicies(mapOf("pggsyeydctjne",
                            new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                    new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim(),
                                    new OpenAuthenticationPolicyClaim()))))))
                .withWorkflowManagement(new FlowAccessControlConfigurationPolicy()
                    .withAllowedCallerIpAddresses(Arrays.asList(new IpAddressRange().withAddressRange("lzbwby"),
                        new IpAddressRange().withAddressRange("isp"), new IpAddressRange().withAddressRange("khvpvbzm"),
                        new IpAddressRange().withAddressRange("vhxstxsfztlv")))
                    .withOpenAuthenticationPolicies(new OpenAuthenticationAccessPolicies().withPolicies(mapOf("dlso",
                        new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                            .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                new OpenAuthenticationPolicyClaim())),
                        "hdyf", new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                            .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim()))))));
        model = BinaryData.fromObject(model).toObject(FlowAccessControlConfiguration.class);
        Assertions.assertEquals("wedllpnoebolhy", model.triggers().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.triggers().openAuthenticationPolicies().policies().get("pmwzplcr").type());
        Assertions.assertEquals("aidjeddnqmnzch", model.contents().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.contents().openAuthenticationPolicies().policies().get("acuxtnucko").type());
        Assertions.assertEquals("bcykn", model.actions().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.actions().openAuthenticationPolicies().policies().get("pggsyeydctjne").type());
        Assertions.assertEquals("lzbwby", model.workflowManagement().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.workflowManagement().openAuthenticationPolicies().policies().get("dlso").type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
