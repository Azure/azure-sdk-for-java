// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmOperationDescriptionInner;
import com.azure.resourcemanager.appservice.generated.models.CsmOperationCollection;
import com.azure.resourcemanager.appservice.generated.models.CsmOperationDescriptionProperties;
import com.azure.resourcemanager.appservice.generated.models.CsmOperationDisplay;
import com.azure.resourcemanager.appservice.generated.models.LogSpecification;
import com.azure.resourcemanager.appservice.generated.models.MetricSpecification;
import com.azure.resourcemanager.appservice.generated.models.ServiceSpecification;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CsmOperationCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CsmOperationCollection model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"ihkaetcktvfc\",\"isDataAction\":true,\"display\":{\"provider\":\"kymuctqhjfbebr\",\"resource\":\"xerf\",\"operation\":\"utttxfvjrbirp\",\"description\":\"epcyvahfnlj\"},\"origin\":\"qxj\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{},{},{}],\"logSpecifications\":[{},{}]}}},{\"name\":\"ok\",\"isDataAction\":true,\"display\":{\"provider\":\"oxgvclt\",\"resource\":\"sncghkjeszz\",\"operation\":\"ijhtxf\",\"description\":\"xbf\"},\"origin\":\"xnehmpvec\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{},{},{}],\"logSpecifications\":[{},{}]}}},{\"name\":\"kk\",\"isDataAction\":false,\"display\":{\"provider\":\"kgriwflzlfbx\",\"resource\":\"uzycispnqza\",\"operation\":\"gkbrpyyd\",\"description\":\"bnuqqkpik\"},\"origin\":\"rgvtqag\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{},{},{}],\"logSpecifications\":[{},{},{}]}}}],\"nextLink\":\"gg\"}")
            .toObject(CsmOperationCollection.class);
        Assertions.assertEquals("ihkaetcktvfc", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("kymuctqhjfbebr", model.value().get(0).display().provider());
        Assertions.assertEquals("xerf", model.value().get(0).display().resource());
        Assertions.assertEquals("utttxfvjrbirp", model.value().get(0).display().operation());
        Assertions.assertEquals("epcyvahfnlj", model.value().get(0).display().description());
        Assertions.assertEquals("qxj", model.value().get(0).origin());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CsmOperationCollection model
            = new CsmOperationCollection().withValue(Arrays.asList(
                new CsmOperationDescriptionInner().withName("ihkaetcktvfc")
                    .withIsDataAction(true)
                    .withDisplay(new CsmOperationDisplay().withProvider("kymuctqhjfbebr")
                        .withResource("xerf")
                        .withOperation("utttxfvjrbirp")
                        .withDescription("epcyvahfnlj"))
                    .withOrigin("qxj")
                    .withProperties(
                        new CsmOperationDescriptionProperties().withServiceSpecification(new ServiceSpecification()
                            .withMetricSpecifications(Arrays.asList(new MetricSpecification(),
                                new MetricSpecification(), new MetricSpecification()))
                            .withLogSpecifications(Arrays.asList(new LogSpecification(), new LogSpecification())))),
                new CsmOperationDescriptionInner().withName("ok")
                    .withIsDataAction(true)
                    .withDisplay(new CsmOperationDisplay().withProvider("oxgvclt")
                        .withResource("sncghkjeszz")
                        .withOperation("ijhtxf")
                        .withDescription("xbf"))
                    .withOrigin("xnehmpvec")
                    .withProperties(new CsmOperationDescriptionProperties()
                        .withServiceSpecification(new ServiceSpecification()
                            .withMetricSpecifications(Arrays.asList(new MetricSpecification(),
                                new MetricSpecification(), new MetricSpecification()))
                            .withLogSpecifications(Arrays.asList(new LogSpecification(), new LogSpecification())))),
                new CsmOperationDescriptionInner().withName("kk")
                    .withIsDataAction(false)
                    .withDisplay(new CsmOperationDisplay().withProvider("kgriwflzlfbx")
                        .withResource("uzycispnqza")
                        .withOperation("gkbrpyyd")
                        .withDescription("bnuqqkpik"))
                    .withOrigin("rgvtqag")
                    .withProperties(
                        new CsmOperationDescriptionProperties().withServiceSpecification(new ServiceSpecification()
                            .withMetricSpecifications(Arrays.asList(new MetricSpecification(),
                                new MetricSpecification(), new MetricSpecification()))
                            .withLogSpecifications(Arrays.asList(new LogSpecification(), new LogSpecification(),
                                new LogSpecification()))))));
        model = BinaryData.fromObject(model).toObject(CsmOperationCollection.class);
        Assertions.assertEquals("ihkaetcktvfc", model.value().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).isDataAction());
        Assertions.assertEquals("kymuctqhjfbebr", model.value().get(0).display().provider());
        Assertions.assertEquals("xerf", model.value().get(0).display().resource());
        Assertions.assertEquals("utttxfvjrbirp", model.value().get(0).display().operation());
        Assertions.assertEquals("epcyvahfnlj", model.value().get(0).display().description());
        Assertions.assertEquals("qxj", model.value().get(0).origin());
    }
}
