// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.CloningInfo;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class CloningInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CloningInfo model = BinaryData.fromString(
            "{\"correlationId\":\"f42b8727-d61d-45be-a4fd-6e62d55cd067\",\"overwrite\":false,\"cloneCustomHostNames\":true,\"cloneSourceControl\":true,\"sourceWebAppId\":\"kjq\",\"sourceWebAppLocation\":\"broyla\",\"hostingEnvironment\":\"ulcdisdosf\",\"appSettingsOverrides\":{\"ytdc\":\"svgjrwhryvy\"},\"configureLoadBalancing\":false,\"trafficManagerProfileId\":\"cknfnwmbtmvpd\",\"trafficManagerProfileName\":\"dhttzaefedxihchr\"}")
            .toObject(CloningInfo.class);
        Assertions.assertEquals(UUID.fromString("f42b8727-d61d-45be-a4fd-6e62d55cd067"), model.correlationId());
        Assertions.assertEquals(false, model.overwrite());
        Assertions.assertEquals(true, model.cloneCustomHostNames());
        Assertions.assertEquals(true, model.cloneSourceControl());
        Assertions.assertEquals("kjq", model.sourceWebAppId());
        Assertions.assertEquals("broyla", model.sourceWebAppLocation());
        Assertions.assertEquals("ulcdisdosf", model.hostingEnvironment());
        Assertions.assertEquals("svgjrwhryvy", model.appSettingsOverrides().get("ytdc"));
        Assertions.assertEquals(false, model.configureLoadBalancing());
        Assertions.assertEquals("cknfnwmbtmvpd", model.trafficManagerProfileId());
        Assertions.assertEquals("dhttzaefedxihchr", model.trafficManagerProfileName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CloningInfo model = new CloningInfo().withCorrelationId(UUID.fromString("f42b8727-d61d-45be-a4fd-6e62d55cd067"))
            .withOverwrite(false)
            .withCloneCustomHostNames(true)
            .withCloneSourceControl(true)
            .withSourceWebAppId("kjq")
            .withSourceWebAppLocation("broyla")
            .withHostingEnvironment("ulcdisdosf")
            .withAppSettingsOverrides(mapOf("ytdc", "svgjrwhryvy"))
            .withConfigureLoadBalancing(false)
            .withTrafficManagerProfileId("cknfnwmbtmvpd")
            .withTrafficManagerProfileName("dhttzaefedxihchr");
        model = BinaryData.fromObject(model).toObject(CloningInfo.class);
        Assertions.assertEquals(UUID.fromString("f42b8727-d61d-45be-a4fd-6e62d55cd067"), model.correlationId());
        Assertions.assertEquals(false, model.overwrite());
        Assertions.assertEquals(true, model.cloneCustomHostNames());
        Assertions.assertEquals(true, model.cloneSourceControl());
        Assertions.assertEquals("kjq", model.sourceWebAppId());
        Assertions.assertEquals("broyla", model.sourceWebAppLocation());
        Assertions.assertEquals("ulcdisdosf", model.hostingEnvironment());
        Assertions.assertEquals("svgjrwhryvy", model.appSettingsOverrides().get("ytdc"));
        Assertions.assertEquals(false, model.configureLoadBalancing());
        Assertions.assertEquals("cknfnwmbtmvpd", model.trafficManagerProfileId());
        Assertions.assertEquals("dhttzaefedxihchr", model.trafficManagerProfileName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
