// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.ArmIdWrapper;
import com.azure.resourcemanager.appservice.generated.models.PrivateLinkConnectionState;
import com.azure.resourcemanager.appservice.generated.models.RemotePrivateEndpointConnection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RemotePrivateEndpointConnectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RemotePrivateEndpointConnection model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"vxwve\",\"privateEndpoint\":{\"id\":\"lr\"},\"privateLinkServiceConnectionState\":{\"status\":\"mwevguyflnxel\",\"description\":\"kfzcdetowwezhy\",\"actionsRequired\":\"di\"},\"ipAddresses\":[\"qlqac\",\"fqbir\"]},\"kind\":\"bcel\",\"id\":\"jnxodnjyhzfax\",\"name\":\"kdv\",\"type\":\"el\"}")
            .toObject(RemotePrivateEndpointConnection.class);
        Assertions.assertEquals("bcel", model.kind());
        Assertions.assertEquals("mwevguyflnxel", model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("kfzcdetowwezhy", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("di", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("qlqac", model.ipAddresses().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RemotePrivateEndpointConnection model = new RemotePrivateEndpointConnection().withKind("bcel")
            .withPrivateEndpoint(new ArmIdWrapper())
            .withPrivateLinkServiceConnectionState(new PrivateLinkConnectionState().withStatus("mwevguyflnxel")
                .withDescription("kfzcdetowwezhy")
                .withActionsRequired("di"))
            .withIpAddresses(Arrays.asList("qlqac", "fqbir"));
        model = BinaryData.fromObject(model).toObject(RemotePrivateEndpointConnection.class);
        Assertions.assertEquals("bcel", model.kind());
        Assertions.assertEquals("mwevguyflnxel", model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("kfzcdetowwezhy", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("di", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("qlqac", model.ipAddresses().get(0));
    }
}
