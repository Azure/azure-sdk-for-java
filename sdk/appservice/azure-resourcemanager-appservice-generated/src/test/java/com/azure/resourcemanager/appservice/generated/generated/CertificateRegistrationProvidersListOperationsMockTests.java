// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.CsmOperationDescription;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CertificateRegistrationProvidersListOperationsMockTests {
    @Test
    public void testListOperations() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"ujnr\",\"isDataAction\":true,\"display\":{\"provider\":\"walhljtn\",\"resource\":\"bpiuvqh\",\"operation\":\"fmortrsnpbsungn\",\"description\":\"km\"},\"origin\":\"fbjuc\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"rdiiwhmrhzqqvpjy\",\"displayName\":\"maqe\",\"displayDescription\":\"jpua\",\"unit\":\"qupdcsvzugi\",\"aggregationType\":\"hgqlvlbjzsc\",\"supportsInstanceLevelAggregation\":true,\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"kpobjufksddxk\",\"sourceMdmNamespace\":\"wxlylxfpvoylf\",\"metricFilterPattern\":\"srgu\",\"fillGapWithZero\":true,\"isInternal\":true,\"dimensions\":[{},{},{},{}],\"category\":\"v\",\"availabilities\":[{}],\"supportedTimeGrainTypes\":[\"dedqgyrvu\",\"zguvckpdpd\"],\"supportedAggregationTypes\":[\"jqs\",\"ikqdqiybqtlvofj\"]}],\"logSpecifications\":[{\"name\":\"iznnnadn\",\"displayName\":\"sbpxlserqgxnh\",\"blobDuration\":\"ccd\",\"logFilterPattern\":\"xybn\"},{\"name\":\"hmpmeglolpot\",\"displayName\":\"mb\",\"blobDuration\":\"qjrytymfnojjh\",\"logFilterPattern\":\"nthjqgovviv\"},{\"name\":\"xytrafettwytavp\",\"displayName\":\"lgyql\",\"blobDuration\":\"lgspy\",\"logFilterPattern\":\"apnhhvp\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CsmOperationDescription> response
            = manager.certificateRegistrationProviders().listOperations(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ujnr", response.iterator().next().name());
        Assertions.assertEquals(true, response.iterator().next().isDataAction());
        Assertions.assertEquals("walhljtn", response.iterator().next().display().provider());
        Assertions.assertEquals("bpiuvqh", response.iterator().next().display().resource());
        Assertions.assertEquals("fmortrsnpbsungn", response.iterator().next().display().operation());
        Assertions.assertEquals("km", response.iterator().next().display().description());
        Assertions.assertEquals("fbjuc", response.iterator().next().origin());
        Assertions.assertEquals("rdiiwhmrhzqqvpjy",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("maqe",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("jpua",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("qupdcsvzugi",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("hgqlvlbjzsc",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportsInstanceLevelAggregation());
        Assertions.assertEquals(false,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .enableRegionalMdmAccount());
        Assertions.assertEquals("kpobjufksddxk",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmAccount());
        Assertions.assertEquals("wxlylxfpvoylf",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmNamespace());
        Assertions.assertEquals("srgu",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .metricFilterPattern());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
        Assertions.assertEquals(true,
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("v",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("dedqgyrvu",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals("jqs",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("iznnnadn",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("sbpxlserqgxnh",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("ccd",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("xybn",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .logSpecifications()
                .get(0)
                .logFilterPattern());
    }
}
