// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.DayOfWeek;
import com.azure.resourcemanager.appservice.generated.models.DaysOfWeek;
import com.azure.resourcemanager.appservice.generated.models.RecurrenceSchedule;
import com.azure.resourcemanager.appservice.generated.models.RecurrenceScheduleOccurrence;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RecurrenceScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecurrenceSchedule model = BinaryData.fromString(
            "{\"minutes\":[2113073449,560555531,1332791546],\"hours\":[32021247],\"weekDays\":[\"Saturday\",\"Saturday\"],\"monthDays\":[419776373,796226647,1131560202],\"monthlyOccurrences\":[{\"day\":\"Sunday\",\"occurrence\":396553614},{\"day\":\"Tuesday\",\"occurrence\":325346161},{\"day\":\"Thursday\",\"occurrence\":509566929}]}")
            .toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(2113073449, model.minutes().get(0));
        Assertions.assertEquals(32021247, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.weekDays().get(0));
        Assertions.assertEquals(419776373, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(396553614, model.monthlyOccurrences().get(0).occurrence());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecurrenceSchedule model
            = new RecurrenceSchedule().withMinutes(Arrays.asList(2113073449, 560555531, 1332791546))
                .withHours(Arrays.asList(32021247))
                .withWeekDays(Arrays.asList(DaysOfWeek.SATURDAY, DaysOfWeek.SATURDAY))
                .withMonthDays(Arrays.asList(419776373, 796226647, 1131560202))
                .withMonthlyOccurrences(Arrays.asList(
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.SUNDAY).withOccurrence(396553614),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.TUESDAY).withOccurrence(325346161),
                    new RecurrenceScheduleOccurrence().withDay(DayOfWeek.THURSDAY).withOccurrence(509566929)));
        model = BinaryData.fromObject(model).toObject(RecurrenceSchedule.class);
        Assertions.assertEquals(2113073449, model.minutes().get(0));
        Assertions.assertEquals(32021247, model.hours().get(0));
        Assertions.assertEquals(DaysOfWeek.SATURDAY, model.weekDays().get(0));
        Assertions.assertEquals(419776373, model.monthDays().get(0));
        Assertions.assertEquals(DayOfWeek.SUNDAY, model.monthlyOccurrences().get(0).day());
        Assertions.assertEquals(396553614, model.monthlyOccurrences().get(0).occurrence());
    }
}
