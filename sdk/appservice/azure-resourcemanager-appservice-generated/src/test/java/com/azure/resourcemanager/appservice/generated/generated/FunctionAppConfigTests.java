// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.AuthenticationType;
import com.azure.resourcemanager.appservice.generated.models.FunctionAppConfig;
import com.azure.resourcemanager.appservice.generated.models.FunctionsAlwaysReadyConfig;
import com.azure.resourcemanager.appservice.generated.models.FunctionsDeployment;
import com.azure.resourcemanager.appservice.generated.models.FunctionsDeploymentStorage;
import com.azure.resourcemanager.appservice.generated.models.FunctionsDeploymentStorageAuthentication;
import com.azure.resourcemanager.appservice.generated.models.FunctionsRuntime;
import com.azure.resourcemanager.appservice.generated.models.FunctionsScaleAndConcurrency;
import com.azure.resourcemanager.appservice.generated.models.FunctionsScaleAndConcurrencyTriggers;
import com.azure.resourcemanager.appservice.generated.models.FunctionsScaleAndConcurrencyTriggersHttp;
import com.azure.resourcemanager.appservice.generated.models.RuntimeName;
import com.azure.resourcemanager.appservice.generated.models.StorageType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FunctionAppConfigTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FunctionAppConfig model = BinaryData.fromString(
            "{\"deployment\":{\"storage\":{\"type\":\"blobContainer\",\"value\":\"a\",\"authentication\":{\"type\":\"SystemAssignedIdentity\",\"userAssignedIdentityResourceId\":\"hhnakzybbj\",\"storageAccountConnectionStringName\":\"dj\"}}},\"runtime\":{\"name\":\"dotnet-isolated\",\"version\":\"yxvxevblbjed\"},\"scaleAndConcurrency\":{\"alwaysReady\":[{\"name\":\"geuaulx\",\"instanceCount\":68.25241},{\"name\":\"jbnkpp\",\"instanceCount\":71.321556},{\"name\":\"nlsvxeiz\",\"instanceCount\":71.26649}],\"maximumInstanceCount\":45.606815,\"instanceMemoryMB\":98.58561,\"triggers\":{\"http\":{\"perInstanceConcurrency\":52.47875}}}}")
            .toObject(FunctionAppConfig.class);
        Assertions.assertEquals(StorageType.BLOB_CONTAINER, model.deployment().storage().type());
        Assertions.assertEquals("a", model.deployment().storage().value());
        Assertions.assertEquals(AuthenticationType.SYSTEM_ASSIGNED_IDENTITY,
            model.deployment().storage().authentication().type());
        Assertions.assertEquals("hhnakzybbj",
            model.deployment().storage().authentication().userAssignedIdentityResourceId());
        Assertions.assertEquals("dj",
            model.deployment().storage().authentication().storageAccountConnectionStringName());
        Assertions.assertEquals(RuntimeName.DOTNET_ISOLATED, model.runtime().name());
        Assertions.assertEquals("yxvxevblbjed", model.runtime().version());
        Assertions.assertEquals("geuaulx", model.scaleAndConcurrency().alwaysReady().get(0).name());
        Assertions.assertEquals(68.25241F, model.scaleAndConcurrency().alwaysReady().get(0).instanceCount());
        Assertions.assertEquals(45.606815F, model.scaleAndConcurrency().maximumInstanceCount());
        Assertions.assertEquals(98.58561F, model.scaleAndConcurrency().instanceMemoryMB());
        Assertions.assertEquals(52.47875F, model.scaleAndConcurrency().triggers().http().perInstanceConcurrency());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FunctionAppConfig model = new FunctionAppConfig()
            .withDeployment(new FunctionsDeployment()
                .withStorage(new FunctionsDeploymentStorage().withType(StorageType.BLOB_CONTAINER)
                    .withValue("a")
                    .withAuthentication(new FunctionsDeploymentStorageAuthentication()
                        .withType(AuthenticationType.SYSTEM_ASSIGNED_IDENTITY)
                        .withUserAssignedIdentityResourceId("hhnakzybbj")
                        .withStorageAccountConnectionStringName("dj"))))
            .withRuntime(new FunctionsRuntime().withName(RuntimeName.DOTNET_ISOLATED).withVersion("yxvxevblbjed"))
            .withScaleAndConcurrency(new FunctionsScaleAndConcurrency()
                .withAlwaysReady(
                    Arrays.asList(new FunctionsAlwaysReadyConfig().withName("geuaulx").withInstanceCount(68.25241F),
                        new FunctionsAlwaysReadyConfig().withName("jbnkpp").withInstanceCount(71.321556F),
                        new FunctionsAlwaysReadyConfig().withName("nlsvxeiz").withInstanceCount(71.26649F)))
                .withMaximumInstanceCount(45.606815F)
                .withInstanceMemoryMB(98.58561F)
                .withTriggers(new FunctionsScaleAndConcurrencyTriggers()
                    .withHttp(new FunctionsScaleAndConcurrencyTriggersHttp().withPerInstanceConcurrency(52.47875F))));
        model = BinaryData.fromObject(model).toObject(FunctionAppConfig.class);
        Assertions.assertEquals(StorageType.BLOB_CONTAINER, model.deployment().storage().type());
        Assertions.assertEquals("a", model.deployment().storage().value());
        Assertions.assertEquals(AuthenticationType.SYSTEM_ASSIGNED_IDENTITY,
            model.deployment().storage().authentication().type());
        Assertions.assertEquals("hhnakzybbj",
            model.deployment().storage().authentication().userAssignedIdentityResourceId());
        Assertions.assertEquals("dj",
            model.deployment().storage().authentication().storageAccountConnectionStringName());
        Assertions.assertEquals(RuntimeName.DOTNET_ISOLATED, model.runtime().name());
        Assertions.assertEquals("yxvxevblbjed", model.runtime().version());
        Assertions.assertEquals("geuaulx", model.scaleAndConcurrency().alwaysReady().get(0).name());
        Assertions.assertEquals(68.25241F, model.scaleAndConcurrency().alwaysReady().get(0).instanceCount());
        Assertions.assertEquals(45.606815F, model.scaleAndConcurrency().maximumInstanceCount());
        Assertions.assertEquals(98.58561F, model.scaleAndConcurrency().instanceMemoryMB());
        Assertions.assertEquals(52.47875F, model.scaleAndConcurrency().triggers().http().perInstanceConcurrency());
    }
}
