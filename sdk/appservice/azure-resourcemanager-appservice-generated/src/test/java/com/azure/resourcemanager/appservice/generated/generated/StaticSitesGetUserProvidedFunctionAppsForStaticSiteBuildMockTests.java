// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.StaticSiteUserProvidedFunctionAppArmResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StaticSitesGetUserProvidedFunctionAppsForStaticSiteBuildMockTests {
    @Test
    public void testGetUserProvidedFunctionAppsForStaticSiteBuild() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"functionAppResourceId\":\"dkpoxzwgrsnitlmc\",\"functionAppRegion\":\"hjhwk\",\"createdOn\":\"2021-01-21T04:51:19Z\"},\"kind\":\"qqgyp\",\"id\":\"nwe\",\"name\":\"bngojnaks\",\"type\":\"ytk\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<StaticSiteUserProvidedFunctionAppArmResource> response = manager.staticSites()
            .getUserProvidedFunctionAppsForStaticSiteBuild("px", "qegerxmlfnug", "myr",
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qqgyp", response.iterator().next().kind());
        Assertions.assertEquals("dkpoxzwgrsnitlmc", response.iterator().next().functionAppResourceId());
        Assertions.assertEquals("hjhwk", response.iterator().next().functionAppRegion());
    }
}
