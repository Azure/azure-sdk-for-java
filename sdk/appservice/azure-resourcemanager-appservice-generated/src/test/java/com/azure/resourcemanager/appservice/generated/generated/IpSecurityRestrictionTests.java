// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.IpFilterTag;
import com.azure.resourcemanager.appservice.generated.models.IpSecurityRestriction;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IpSecurityRestrictionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IpSecurityRestriction model = BinaryData.fromString(
            "{\"ipAddress\":\"uemsly\",\"subnetMask\":\"qyrp\",\"vnetSubnetResourceId\":\"obrltt\",\"vnetTrafficTag\":2105592893,\"subnetTrafficTag\":1033161238,\"action\":\"gqdnfwqzd\",\"tag\":\"Default\",\"priority\":362294520,\"name\":\"xhnfhqly\",\"description\":\"jouw\",\"headers\":{\"rkenx\":[\"oyzunbixxr\",\"ikvcpwp\",\"clrcivtsox\"],\"awaoqvmmbnpqfrt\":[\"yyefrpmpdnqqs\"],\"juwasqvdaeyyguxa\":[\"kzmegnitgvkxlz\",\"qdrfegcealzxwhc\",\"nsymoyqhlwigd\",\"vbkbxgomf\"]}}")
            .toObject(IpSecurityRestriction.class);
        Assertions.assertEquals("uemsly", model.ipAddress());
        Assertions.assertEquals("qyrp", model.subnetMask());
        Assertions.assertEquals("obrltt", model.vnetSubnetResourceId());
        Assertions.assertEquals(2105592893, model.vnetTrafficTag());
        Assertions.assertEquals(1033161238, model.subnetTrafficTag());
        Assertions.assertEquals("gqdnfwqzd", model.action());
        Assertions.assertEquals(IpFilterTag.DEFAULT, model.tag());
        Assertions.assertEquals(362294520, model.priority());
        Assertions.assertEquals("xhnfhqly", model.name());
        Assertions.assertEquals("jouw", model.description());
        Assertions.assertEquals("oyzunbixxr", model.headers().get("rkenx").get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IpSecurityRestriction model = new IpSecurityRestriction().withIpAddress("uemsly")
            .withSubnetMask("qyrp")
            .withVnetSubnetResourceId("obrltt")
            .withVnetTrafficTag(2105592893)
            .withSubnetTrafficTag(1033161238)
            .withAction("gqdnfwqzd")
            .withTag(IpFilterTag.DEFAULT)
            .withPriority(362294520)
            .withName("xhnfhqly")
            .withDescription("jouw")
            .withHeaders(mapOf("rkenx", Arrays.asList("oyzunbixxr", "ikvcpwp", "clrcivtsox"), "awaoqvmmbnpqfrt",
                Arrays.asList("yyefrpmpdnqqs"), "juwasqvdaeyyguxa",
                Arrays.asList("kzmegnitgvkxlz", "qdrfegcealzxwhc", "nsymoyqhlwigd", "vbkbxgomf")));
        model = BinaryData.fromObject(model).toObject(IpSecurityRestriction.class);
        Assertions.assertEquals("uemsly", model.ipAddress());
        Assertions.assertEquals("qyrp", model.subnetMask());
        Assertions.assertEquals("obrltt", model.vnetSubnetResourceId());
        Assertions.assertEquals(2105592893, model.vnetTrafficTag());
        Assertions.assertEquals(1033161238, model.subnetTrafficTag());
        Assertions.assertEquals("gqdnfwqzd", model.action());
        Assertions.assertEquals(IpFilterTag.DEFAULT, model.tag());
        Assertions.assertEquals(362294520, model.priority());
        Assertions.assertEquals("xhnfhqly", model.name());
        Assertions.assertEquals("jouw", model.description());
        Assertions.assertEquals("oyzunbixxr", model.headers().get("rkenx").get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
