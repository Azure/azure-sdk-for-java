// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.FlowAccessControlConfigurationPolicy;
import com.azure.resourcemanager.appservice.generated.models.IpAddressRange;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicies;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicy;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationPolicyClaim;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationProviderType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlowAccessControlConfigurationPolicyTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlowAccessControlConfigurationPolicy model = BinaryData.fromString(
            "{\"allowedCallerIpAddresses\":[{\"addressRange\":\"mjdbzfiacmwmcei\"},{\"addressRange\":\"hrfmcjjxxwzdwmju\"},{\"addressRange\":\"nolziohdxyukepl\"}],\"openAuthenticationPolicies\":{\"policies\":{\"ejhyrzzxq\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"npsffpizefajgbl\",\"value\":\"xpeuahvxfn\"},{\"name\":\"evfbiekydkjdkzfk\",\"value\":\"ckvyrvdszriz\"}]},\"xsyiwm\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"hzcicitykzyi\",\"value\":\"uingnfunhtz\"}]},\"eplpfrecri\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"jztbw\",\"value\":\"b\"},{\"name\":\"qwb\",\"value\":\"nhqzd\"},{\"name\":\"lkdsbekvprkwpvx\",\"value\":\"qcnv\"},{\"name\":\"shfafbeh\",\"value\":\"eiuexkpgrmwdwlr\"}]}}}}")
            .toObject(FlowAccessControlConfigurationPolicy.class);
        Assertions.assertEquals("mjdbzfiacmwmcei", model.allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.openAuthenticationPolicies().policies().get("ejhyrzzxq").type());
        Assertions.assertEquals("npsffpizefajgbl",
            model.openAuthenticationPolicies().policies().get("ejhyrzzxq").claims().get(0).name());
        Assertions.assertEquals("xpeuahvxfn",
            model.openAuthenticationPolicies().policies().get("ejhyrzzxq").claims().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlowAccessControlConfigurationPolicy model = new FlowAccessControlConfigurationPolicy()
            .withAllowedCallerIpAddresses(Arrays.asList(new IpAddressRange().withAddressRange("mjdbzfiacmwmcei"),
                new IpAddressRange().withAddressRange("hrfmcjjxxwzdwmju"),
                new IpAddressRange().withAddressRange("nolziohdxyukepl")))
            .withOpenAuthenticationPolicies(new OpenAuthenticationAccessPolicies().withPolicies(mapOf("ejhyrzzxq",
                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                    .withClaims(Arrays.asList(
                        new OpenAuthenticationPolicyClaim().withName("npsffpizefajgbl").withValue("xpeuahvxfn"),
                        new OpenAuthenticationPolicyClaim().withName("evfbiekydkjdkzfk").withValue("ckvyrvdszriz"))),
                "xsyiwm",
                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                    .withClaims(Arrays
                        .asList(new OpenAuthenticationPolicyClaim().withName("hzcicitykzyi").withValue("uingnfunhtz"))),
                "eplpfrecri",
                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                    .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim().withName("jztbw").withValue("b"),
                        new OpenAuthenticationPolicyClaim().withName("qwb").withValue("nhqzd"),
                        new OpenAuthenticationPolicyClaim().withName("lkdsbekvprkwpvx").withValue("qcnv"),
                        new OpenAuthenticationPolicyClaim().withName("shfafbeh").withValue("eiuexkpgrmwdwlr"))))));
        model = BinaryData.fromObject(model).toObject(FlowAccessControlConfigurationPolicy.class);
        Assertions.assertEquals("mjdbzfiacmwmcei", model.allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.openAuthenticationPolicies().policies().get("ejhyrzzxq").type());
        Assertions.assertEquals("npsffpizefajgbl",
            model.openAuthenticationPolicies().policies().get("ejhyrzzxq").claims().get(0).name());
        Assertions.assertEquals("xpeuahvxfn",
            model.openAuthenticationPolicies().policies().get("ejhyrzzxq").claims().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
