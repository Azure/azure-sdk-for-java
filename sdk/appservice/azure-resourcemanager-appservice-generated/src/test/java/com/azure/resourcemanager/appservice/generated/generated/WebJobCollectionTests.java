// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.WebJobInner;
import com.azure.resourcemanager.appservice.generated.models.WebJobCollection;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebJobCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebJobCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"run_command\":\"axwzbwx\",\"url\":\"disxsrrhr\",\"extra_info_url\":\"bbedrnrjz\",\"web_job_type\":\"Triggered\",\"error\":\"p\",\"using_sdk\":false,\"settings\":{\"xmfbik\":\"databtihc\",\"ht\":\"datauvqqo\"}},\"kind\":\"wnq\",\"id\":\"jcemia\",\"name\":\"ichhxqnlmjvpmsd\",\"type\":\"ibwvh\"}],\"nextLink\":\"uhysrmkkzjsnxzl\"}")
            .toObject(WebJobCollection.class);
        Assertions.assertEquals("wnq", model.value().get(0).kind());
        Assertions.assertEquals("axwzbwx", model.value().get(0).runCommand());
        Assertions.assertEquals("disxsrrhr", model.value().get(0).url());
        Assertions.assertEquals("bbedrnrjz", model.value().get(0).extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.value().get(0).webJobType());
        Assertions.assertEquals("p", model.value().get(0).error());
        Assertions.assertEquals(false, model.value().get(0).usingSdk());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebJobCollection model = new WebJobCollection().withValue(Arrays.asList(new WebJobInner().withKind("wnq")
            .withRunCommand("axwzbwx")
            .withUrl("disxsrrhr")
            .withExtraInfoUrl("bbedrnrjz")
            .withWebJobType(WebJobType.TRIGGERED)
            .withError("p")
            .withUsingSdk(false)
            .withSettings(mapOf("xmfbik", "databtihc", "ht", "datauvqqo"))));
        model = BinaryData.fromObject(model).toObject(WebJobCollection.class);
        Assertions.assertEquals("wnq", model.value().get(0).kind());
        Assertions.assertEquals("axwzbwx", model.value().get(0).runCommand());
        Assertions.assertEquals("disxsrrhr", model.value().get(0).url());
        Assertions.assertEquals("bbedrnrjz", model.value().get(0).extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.value().get(0).webJobType());
        Assertions.assertEquals("p", model.value().get(0).error());
        Assertions.assertEquals(false, model.value().get(0).usingSdk());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
