// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.DetectorResponse;
import com.azure.resourcemanager.appservice.generated.models.InsightStatus;
import com.azure.resourcemanager.appservice.generated.models.RenderingType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsGetHostingEnvironmentDetectorResponseWithResponseMockTests {
    @Test
    public void testGetHostingEnvironmentDetectorResponseWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"metadata\":{\"id\":\"kuxedpqwzz\",\"name\":\"mgbxjgxrh\",\"description\":\"rubcvucvebdfm\",\"author\":\"nfeealph\",\"category\":\"lkbwkmwdrvkbcsvn\",\"supportTopicList\":[{\"id\":\"fzldzzjjrzhjqen\",\"pesId\":\"pd\"},{\"id\":\"zndliodajxvsz\",\"pesId\":\"vzmiufbwreawhnz\"},{\"id\":\"mue\",\"pesId\":\"bhnkles\"}],\"analysisType\":[\"vakqajian\",\"cyrdtrd\",\"kdmsktuv\",\"h\"],\"type\":\"CategoryOverview\",\"score\":16.572636},\"dataset\":[{\"table\":{\"tableName\":\"bsgrzw\",\"columns\":[{},{},{},{}],\"rows\":[[],[]]},\"renderingProperties\":{\"type\":\"SummaryCard\",\"title\":\"trpsplwtlocse\",\"description\":\"vtgc\"}}],\"status\":{\"message\":\"njqxckr\",\"statusId\":\"None\"},\"dataProvidersMetadata\":[{\"providerName\":\"lymybmgmr\",\"propertyBag\":[{},{}]},{\"providerName\":\"tuynugptfjpi\",\"propertyBag\":[{},{}]},{\"providerName\":\"qt\",\"propertyBag\":[{},{}]},{\"providerName\":\"bipzhuhujk\",\"propertyBag\":[{},{},{}]}],\"suggestedUtterances\":{\"query\":\"gphipt\",\"results\":[{\"sampleUtterance\":{},\"score\":22.129023},{\"sampleUtterance\":{},\"score\":67.297745},{\"sampleUtterance\":{},\"score\":19.656116},{\"sampleUtterance\":{},\"score\":93.17283}]}},\"kind\":\"kkdbzbhsnimompxd\",\"id\":\"mp\",\"name\":\"fbdmoawhbdxxnm\",\"type\":\"xz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DetectorResponse response = manager.diagnostics()
            .getHostingEnvironmentDetectorResponseWithResponse("ghzvhzrxcaesoxo", "vlwwpvjrnjwv", "iarqlceflgsndurh",
                OffsetDateTime.parse("2021-05-24T23:53:48Z"), OffsetDateTime.parse("2021-11-21T16:26:25Z"),
                "wmwkdehjloz", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("kkdbzbhsnimompxd", response.kind());
        Assertions.assertEquals("bsgrzw", response.dataset().get(0).table().tableName());
        Assertions.assertEquals(RenderingType.SUMMARY_CARD, response.dataset().get(0).renderingProperties().type());
        Assertions.assertEquals("trpsplwtlocse", response.dataset().get(0).renderingProperties().title());
        Assertions.assertEquals("vtgc", response.dataset().get(0).renderingProperties().description());
        Assertions.assertEquals("njqxckr", response.status().message());
        Assertions.assertEquals(InsightStatus.NONE, response.status().statusId());
        Assertions.assertEquals("lymybmgmr", response.dataProvidersMetadata().get(0).providerName());
        Assertions.assertEquals("gphipt", response.suggestedUtterances().query());
        Assertions.assertEquals(22.129023F, response.suggestedUtterances().results().get(0).score());
    }
}
