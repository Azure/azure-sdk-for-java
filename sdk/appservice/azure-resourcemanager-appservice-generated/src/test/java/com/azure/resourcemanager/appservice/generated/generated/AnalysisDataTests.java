// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.DetectorDefinition;
import com.azure.resourcemanager.appservice.generated.models.AnalysisData;
import com.azure.resourcemanager.appservice.generated.models.DataSource;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSet;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.ResponseMetadata;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AnalysisDataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AnalysisData model = BinaryData.fromString(
            "{\"source\":\"lajmllp\",\"detectorDefinition\":{\"displayName\":\"vh\",\"description\":\"fowgwbtmkekx\",\"rank\":55.11048522667945,\"isEnabled\":false},\"metrics\":[{\"name\":\"qovchiqbp\",\"unit\":\"fidusztekxbyjgm\",\"startTime\":\"2021-01-23T23:37:47Z\",\"endTime\":\"2021-02-26T17:12:33Z\",\"timeGrain\":\"ihpq\",\"values\":[{\"timestamp\":\"2021-11-03T04:31:48Z\",\"roleInstance\":\"rdi\",\"total\":6.763742700427599,\"maximum\":41.773182017314866,\"minimum\":22.356474116654844,\"isAggregated\":true}]},{\"name\":\"vcxjsgbipcukdvek\",\"unit\":\"uhoduchvlscrdpib\",\"startTime\":\"2021-12-08T00:15:47Z\",\"endTime\":\"2021-02-07T17:34:03Z\",\"timeGrain\":\"sspyszekbh\",\"values\":[{\"timestamp\":\"2021-05-09T18:17:16Z\",\"roleInstance\":\"gkrehbf\",\"total\":63.065479991116845,\"maximum\":9.53356906104592,\"minimum\":50.91664748828902,\"isAggregated\":false},{\"timestamp\":\"2021-06-15T23:31:14Z\",\"roleInstance\":\"oags\",\"total\":65.71185819076639,\"maximum\":39.6059715084771,\"minimum\":3.1623258885990158,\"isAggregated\":false},{\"timestamp\":\"2021-07-10T00:59:40Z\",\"roleInstance\":\"qwudoh\",\"total\":23.478958947918716,\"maximum\":10.398465436984539,\"minimum\":83.40540580875319,\"isAggregated\":false}]},{\"name\":\"s\",\"unit\":\"ypofqpmbhyqgs\",\"startTime\":\"2021-10-29T02:05:41Z\",\"endTime\":\"2021-08-07T17:15:41Z\",\"timeGrain\":\"xophgerhsm\",\"values\":[{\"timestamp\":\"2021-10-06T10:20:01Z\",\"roleInstance\":\"zmqilrixysfnim\",\"total\":5.884973585554542,\"maximum\":99.85146503149018,\"minimum\":29.741545727106455,\"isAggregated\":false},{\"timestamp\":\"2021-07-10T19:09:10Z\",\"roleInstance\":\"rympmlq\",\"total\":20.305113887288016,\"maximum\":57.032160427169906,\"minimum\":15.302978231935803,\"isAggregated\":false},{\"timestamp\":\"2021-06-24T22:13:21Z\",\"roleInstance\":\"iiknjdiq\",\"total\":12.614837149591263,\"maximum\":29.159327685383808,\"minimum\":54.23183310694982,\"isAggregated\":false}]},{\"name\":\"fsbw\",\"unit\":\"ivbvzi\",\"startTime\":\"2021-02-23T02:17:57Z\",\"endTime\":\"2021-07-31T11:14:39Z\",\"timeGrain\":\"ooxzpradmsk\",\"values\":[{\"timestamp\":\"2021-07-09T03:58:41Z\",\"roleInstance\":\"zigjsugswhgsaodk\",\"total\":94.06744718851238,\"maximum\":18.985474674844248,\"minimum\":11.70053225869745,\"isAggregated\":true}]}],\"data\":[[{\"name\":\"v\",\"value\":\"xbg\"},{\"name\":\"kerv\",\"value\":\"hoadhrsxqvzv\"},{\"name\":\"abdsr\",\"value\":\"ajglzrsubklr\"}],[{\"name\":\"nltce\",\"value\":\"dvqydie\"},{\"name\":\"kw\",\"value\":\"uwdxvqzxoebwgj\"}],[{\"name\":\"banbaupwtzv\",\"value\":\"klozkxbz\"},{\"name\":\"ejpl\",\"value\":\"anbtttkgsu\"}],[{\"name\":\"rswgkpjhboyikeb\",\"value\":\"hkslgwlokhueoij\"},{\"name\":\"cqypz\",\"value\":\"ufgsyfejyvdw\"},{\"name\":\"xptpqaya\",\"value\":\"ncfgybmxsnxoc\"},{\"name\":\"llojkpoyhgwwdj\",\"value\":\"dbdljz\"}]],\"detectorMetaData\":{\"dataSource\":{\"instructions\":[\"vuqbsgzlrqhbjnqo\"],\"dataSourceUri\":[{\"name\":\"bsfp\",\"value\":\"x\"},{\"name\":\"lflec\",\"value\":\"inxojjlux\"},{\"name\":\"hilzzdzzq\",\"value\":\"uezayov\"},{\"name\":\"bqlotokhtvwtazn\",\"value\":\"qww\"}]}}}")
            .toObject(AnalysisData.class);
        Assertions.assertEquals("lajmllp", model.source());
        Assertions.assertEquals("qovchiqbp", model.metrics().get(0).name());
        Assertions.assertEquals("fidusztekxbyjgm", model.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-23T23:37:47Z"), model.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T17:12:33Z"), model.metrics().get(0).endTime());
        Assertions.assertEquals("ihpq", model.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-03T04:31:48Z"),
            model.metrics().get(0).values().get(0).timestamp());
        Assertions.assertEquals("rdi", model.metrics().get(0).values().get(0).roleInstance());
        Assertions.assertEquals(6.763742700427599D, model.metrics().get(0).values().get(0).total());
        Assertions.assertEquals(41.773182017314866D, model.metrics().get(0).values().get(0).maximum());
        Assertions.assertEquals(22.356474116654844D, model.metrics().get(0).values().get(0).minimum());
        Assertions.assertEquals(true, model.metrics().get(0).values().get(0).isAggregated());
        Assertions.assertEquals("v", model.data().get(0).get(0).name());
        Assertions.assertEquals("xbg", model.data().get(0).get(0).value());
        Assertions.assertEquals("vuqbsgzlrqhbjnqo", model.detectorMetadata().dataSource().instructions().get(0));
        Assertions.assertEquals("bsfp", model.detectorMetadata().dataSource().dataSourceUri().get(0).name());
        Assertions.assertEquals("x", model.detectorMetadata().dataSource().dataSourceUri().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AnalysisData model
            = new AnalysisData().withSource("lajmllp")
                .withDetectorDefinition(new DetectorDefinition())
                .withMetrics(
                    Arrays.asList(
                        new DiagnosticMetricSet().withName("qovchiqbp")
                            .withUnit("fidusztekxbyjgm")
                            .withStartTime(OffsetDateTime.parse("2021-01-23T23:37:47Z"))
                            .withEndTime(OffsetDateTime.parse("2021-02-26T17:12:33Z"))
                            .withTimeGrain("ihpq")
                            .withValues(
                                Arrays
                                    .asList(
                                        new DiagnosticMetricSample()
                                            .withTimestamp(OffsetDateTime.parse("2021-11-03T04:31:48Z"))
                                            .withRoleInstance("rdi")
                                            .withTotal(6.763742700427599D)
                                            .withMaximum(41.773182017314866D)
                                            .withMinimum(22.356474116654844D)
                                            .withIsAggregated(true))),
                        new DiagnosticMetricSet().withName("vcxjsgbipcukdvek")
                            .withUnit("uhoduchvlscrdpib")
                            .withStartTime(OffsetDateTime.parse("2021-12-08T00:15:47Z"))
                            .withEndTime(OffsetDateTime.parse("2021-02-07T17:34:03Z"))
                            .withTimeGrain("sspyszekbh")
                            .withValues(
                                Arrays
                                    .asList(
                                        new DiagnosticMetricSample()
                                            .withTimestamp(OffsetDateTime.parse("2021-05-09T18:17:16Z"))
                                            .withRoleInstance("gkrehbf")
                                            .withTotal(63.065479991116845D)
                                            .withMaximum(9.53356906104592D)
                                            .withMinimum(50.91664748828902D)
                                            .withIsAggregated(false),
                                        new DiagnosticMetricSample()
                                            .withTimestamp(OffsetDateTime.parse("2021-06-15T23:31:14Z"))
                                            .withRoleInstance("oags")
                                            .withTotal(65.71185819076639D)
                                            .withMaximum(39.6059715084771D)
                                            .withMinimum(3.1623258885990158D)
                                            .withIsAggregated(false),
                                        new DiagnosticMetricSample()
                                            .withTimestamp(OffsetDateTime.parse("2021-07-10T00:59:40Z"))
                                            .withRoleInstance("qwudoh")
                                            .withTotal(23.478958947918716D)
                                            .withMaximum(10.398465436984539D)
                                            .withMinimum(83.40540580875319D)
                                            .withIsAggregated(false))),
                        new DiagnosticMetricSet().withName("s")
                            .withUnit("ypofqpmbhyqgs")
                            .withStartTime(OffsetDateTime.parse("2021-10-29T02:05:41Z"))
                            .withEndTime(OffsetDateTime.parse("2021-08-07T17:15:41Z"))
                            .withTimeGrain("xophgerhsm")
                            .withValues(Arrays.asList(
                                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-10-06T10:20:01Z"))
                                    .withRoleInstance("zmqilrixysfnim")
                                    .withTotal(5.884973585554542D)
                                    .withMaximum(99.85146503149018D)
                                    .withMinimum(29.741545727106455D)
                                    .withIsAggregated(false),
                                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-07-10T19:09:10Z"))
                                    .withRoleInstance("rympmlq")
                                    .withTotal(20.305113887288016D)
                                    .withMaximum(57.032160427169906D)
                                    .withMinimum(15.302978231935803D)
                                    .withIsAggregated(false),
                                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-06-24T22:13:21Z"))
                                    .withRoleInstance("iiknjdiq")
                                    .withTotal(12.614837149591263D)
                                    .withMaximum(29.159327685383808D)
                                    .withMinimum(54.23183310694982D)
                                    .withIsAggregated(false))),
                        new DiagnosticMetricSet().withName("fsbw")
                            .withUnit("ivbvzi")
                            .withStartTime(OffsetDateTime.parse("2021-02-23T02:17:57Z"))
                            .withEndTime(OffsetDateTime.parse("2021-07-31T11:14:39Z"))
                            .withTimeGrain("ooxzpradmsk")
                            .withValues(Arrays.asList(
                                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-07-09T03:58:41Z"))
                                    .withRoleInstance("zigjsugswhgsaodk")
                                    .withTotal(94.06744718851238D)
                                    .withMaximum(18.985474674844248D)
                                    .withMinimum(11.70053225869745D)
                                    .withIsAggregated(true)))))
                .withData(Arrays.asList(
                    Arrays.asList(new NameValuePair().withName("v").withValue("xbg"),
                        new NameValuePair().withName("kerv").withValue("hoadhrsxqvzv"),
                        new NameValuePair().withName("abdsr").withValue("ajglzrsubklr")),
                    Arrays.asList(new NameValuePair().withName("nltce").withValue("dvqydie"),
                        new NameValuePair().withName("kw").withValue("uwdxvqzxoebwgj")),
                    Arrays.asList(new NameValuePair().withName("banbaupwtzv").withValue("klozkxbz"),
                        new NameValuePair().withName("ejpl").withValue("anbtttkgsu")),
                    Arrays.asList(new NameValuePair().withName("rswgkpjhboyikeb").withValue("hkslgwlokhueoij"),
                        new NameValuePair().withName("cqypz").withValue("ufgsyfejyvdw"),
                        new NameValuePair().withName("xptpqaya").withValue("ncfgybmxsnxoc"),
                        new NameValuePair().withName("llojkpoyhgwwdj").withValue("dbdljz"))))
                .withDetectorMetadata(new ResponseMetadata()
                    .withDataSource(new DataSource().withInstructions(Arrays.asList("vuqbsgzlrqhbjnqo"))
                        .withDataSourceUri(Arrays.asList(new NameValuePair().withName("bsfp").withValue("x"),
                            new NameValuePair().withName("lflec").withValue("inxojjlux"),
                            new NameValuePair().withName("hilzzdzzq").withValue("uezayov"),
                            new NameValuePair().withName("bqlotokhtvwtazn").withValue("qww")))));
        model = BinaryData.fromObject(model).toObject(AnalysisData.class);
        Assertions.assertEquals("lajmllp", model.source());
        Assertions.assertEquals("qovchiqbp", model.metrics().get(0).name());
        Assertions.assertEquals("fidusztekxbyjgm", model.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-23T23:37:47Z"), model.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-26T17:12:33Z"), model.metrics().get(0).endTime());
        Assertions.assertEquals("ihpq", model.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-03T04:31:48Z"),
            model.metrics().get(0).values().get(0).timestamp());
        Assertions.assertEquals("rdi", model.metrics().get(0).values().get(0).roleInstance());
        Assertions.assertEquals(6.763742700427599D, model.metrics().get(0).values().get(0).total());
        Assertions.assertEquals(41.773182017314866D, model.metrics().get(0).values().get(0).maximum());
        Assertions.assertEquals(22.356474116654844D, model.metrics().get(0).values().get(0).minimum());
        Assertions.assertEquals(true, model.metrics().get(0).values().get(0).isAggregated());
        Assertions.assertEquals("v", model.data().get(0).get(0).name());
        Assertions.assertEquals("xbg", model.data().get(0).get(0).value());
        Assertions.assertEquals("vuqbsgzlrqhbjnqo", model.detectorMetadata().dataSource().instructions().get(0));
        Assertions.assertEquals("bsfp", model.detectorMetadata().dataSource().dataSourceUri().get(0).name());
        Assertions.assertEquals("x", model.detectorMetadata().dataSource().dataSourceUri().get(0).value());
    }
}
