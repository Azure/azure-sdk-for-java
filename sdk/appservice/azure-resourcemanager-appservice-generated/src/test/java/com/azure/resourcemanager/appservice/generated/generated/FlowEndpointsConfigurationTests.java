// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.FlowEndpoints;
import com.azure.resourcemanager.appservice.generated.models.FlowEndpointsConfiguration;
import com.azure.resourcemanager.appservice.generated.models.IpAddress;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class FlowEndpointsConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlowEndpointsConfiguration model = BinaryData.fromString(
            "{\"workflow\":{\"outgoingIpAddresses\":[{\"address\":\"ajna\"},{\"address\":\"avwmr\"},{\"address\":\"tdgdfecju\"}],\"accessEndpointIpAddresses\":[{\"address\":\"wvoohm\"},{\"address\":\"xbaczy\"}]},\"connector\":{\"outgoingIpAddresses\":[{\"address\":\"gfwonbtgpeizuzxo\"}],\"accessEndpointIpAddresses\":[{\"address\":\"tcjwgfhdfom\"},{\"address\":\"wlcfcpz\"}]}}")
            .toObject(FlowEndpointsConfiguration.class);
        Assertions.assertEquals("ajna", model.workflow().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("wvoohm", model.workflow().accessEndpointIpAddresses().get(0).address());
        Assertions.assertEquals("gfwonbtgpeizuzxo", model.connector().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("tcjwgfhdfom", model.connector().accessEndpointIpAddresses().get(0).address());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlowEndpointsConfiguration model = new FlowEndpointsConfiguration()
            .withWorkflow(new FlowEndpoints()
                .withOutgoingIpAddresses(Arrays.asList(new IpAddress().withAddress("ajna"),
                    new IpAddress().withAddress("avwmr"), new IpAddress().withAddress("tdgdfecju")))
                .withAccessEndpointIpAddresses(
                    Arrays.asList(new IpAddress().withAddress("wvoohm"), new IpAddress().withAddress("xbaczy"))))
            .withConnector(new FlowEndpoints()
                .withOutgoingIpAddresses(Arrays.asList(new IpAddress().withAddress("gfwonbtgpeizuzxo")))
                .withAccessEndpointIpAddresses(
                    Arrays.asList(new IpAddress().withAddress("tcjwgfhdfom"), new IpAddress().withAddress("wlcfcpz"))));
        model = BinaryData.fromObject(model).toObject(FlowEndpointsConfiguration.class);
        Assertions.assertEquals("ajna", model.workflow().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("wvoohm", model.workflow().accessEndpointIpAddresses().get(0).address());
        Assertions.assertEquals("gfwonbtgpeizuzxo", model.connector().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("tcjwgfhdfom", model.connector().accessEndpointIpAddresses().get(0).address());
    }
}
