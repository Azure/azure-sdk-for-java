// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.CsmUsageQuotaInner;
import com.azure.resourcemanager.appservice.generated.models.LocalizableString;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class CsmUsageQuotaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CsmUsageQuotaInner model = BinaryData.fromString(
            "{\"unit\":\"sbs\",\"nextResetTime\":\"2021-08-01T23:44:38Z\",\"currentValue\":736716700830578649,\"limit\":1998606509072104953,\"name\":{\"value\":\"omzisglrrcz\",\"localizedValue\":\"k\"}}")
            .toObject(CsmUsageQuotaInner.class);
        Assertions.assertEquals("sbs", model.unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T23:44:38Z"), model.nextResetTime());
        Assertions.assertEquals(736716700830578649L, model.currentValue());
        Assertions.assertEquals(1998606509072104953L, model.limit());
        Assertions.assertEquals("omzisglrrcz", model.name().value());
        Assertions.assertEquals("k", model.name().localizedValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CsmUsageQuotaInner model = new CsmUsageQuotaInner().withUnit("sbs")
            .withNextResetTime(OffsetDateTime.parse("2021-08-01T23:44:38Z"))
            .withCurrentValue(736716700830578649L)
            .withLimit(1998606509072104953L)
            .withName(new LocalizableString().withValue("omzisglrrcz").withLocalizedValue("k"));
        model = BinaryData.fromObject(model).toObject(CsmUsageQuotaInner.class);
        Assertions.assertEquals("sbs", model.unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T23:44:38Z"), model.nextResetTime());
        Assertions.assertEquals(736716700830578649L, model.currentValue());
        Assertions.assertEquals(1998606509072104953L, model.limit());
        Assertions.assertEquals("omzisglrrcz", model.name().value());
        Assertions.assertEquals("k", model.name().localizedValue());
    }
}
