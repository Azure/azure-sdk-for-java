// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.AppServicePlan;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServicePlansGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"workerTierName\":\"jutckfh\",\"status\":\"Pending\",\"subscription\":\"lbxrezvujpbmzcx\",\"hostingEnvironmentProfile\":{\"id\":\"uhxwkkbnh\",\"name\":\"tjczpfois\",\"type\":\"hhvvmvsbgyqdhaz\"},\"maximumNumberOfWorkers\":309143437,\"numberOfWorkers\":1547614444,\"geoRegion\":\"sovo\",\"perSiteScaling\":true,\"elasticScaleEnabled\":false,\"maximumElasticWorkerCount\":528434671,\"numberOfSites\":1661830125,\"isSpot\":false,\"spotExpirationTime\":\"2021-11-14T09:39:41Z\",\"freeOfferExpirationTime\":\"2021-01-09T01:52:06Z\",\"resourceGroup\":\"obqqnwhcmvdowlq\",\"reserved\":true,\"isXenon\":false,\"hyperV\":false,\"targetWorkerCount\":2086105728,\"targetWorkerSizeId\":1783167392,\"provisioningState\":\"Deleting\",\"kubeEnvironmentProfile\":{\"id\":\"wbftznxfrfh\",\"name\":\"fiutb\",\"type\":\"r\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"cod\",\"tier\":\"kdieis\",\"size\":\"kv\",\"family\":\"moecijrlmnkv\",\"capacity\":1651921520,\"skuCapacity\":{\"minimum\":10872169,\"maximum\":606625731,\"elasticMaximum\":1636597285,\"default\":319190337,\"scaleType\":\"zmjii\"},\"locations\":[\"llcckgfoxvrbf\",\"jmenqcjjfxqt\",\"sfsv\",\"yzgaweixnoblazw\"],\"capabilities\":[{\"name\":\"zixfduwls\",\"value\":\"itpcsmax\",\"reason\":\"xu\"}]},\"extendedLocation\":{\"name\":\"iu\",\"type\":\"pvuazaj\"},\"kind\":\"nekhjzbfbuqe\",\"location\":\"kuozarrqpp\",\"tags\":{\"oyqnrjdrctarv\":\"yjbkvbc\"},\"id\":\"ewoghbpzxkjq\",\"name\":\"cjfdromeawthycb\",\"type\":\"gpist\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        AppServicePlan response = manager.appServicePlans()
            .getByResourceGroupWithResponse("yszdtgwmqcutkkpr", "urtmccdejtoypl", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("kuozarrqpp", response.location());
        Assertions.assertEquals("yjbkvbc", response.tags().get("oyqnrjdrctarv"));
        Assertions.assertEquals("cod", response.sku().name());
        Assertions.assertEquals("kdieis", response.sku().tier());
        Assertions.assertEquals("kv", response.sku().size());
        Assertions.assertEquals("moecijrlmnkv", response.sku().family());
        Assertions.assertEquals(1651921520, response.sku().capacity());
        Assertions.assertEquals(10872169, response.sku().skuCapacity().minimum());
        Assertions.assertEquals(606625731, response.sku().skuCapacity().maximum());
        Assertions.assertEquals(1636597285, response.sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(319190337, response.sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("zmjii", response.sku().skuCapacity().scaleType());
        Assertions.assertEquals("llcckgfoxvrbf", response.sku().locations().get(0));
        Assertions.assertEquals("zixfduwls", response.sku().capabilities().get(0).name());
        Assertions.assertEquals("itpcsmax", response.sku().capabilities().get(0).value());
        Assertions.assertEquals("xu", response.sku().capabilities().get(0).reason());
        Assertions.assertEquals("iu", response.extendedLocation().name());
        Assertions.assertEquals("nekhjzbfbuqe", response.kind());
        Assertions.assertEquals("jutckfh", response.workerTierName());
        Assertions.assertEquals("uhxwkkbnh", response.hostingEnvironmentProfile().id());
        Assertions.assertEquals(true, response.perSiteScaling());
        Assertions.assertEquals(false, response.elasticScaleEnabled());
        Assertions.assertEquals(528434671, response.maximumElasticWorkerCount());
        Assertions.assertEquals(false, response.isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-14T09:39:41Z"), response.spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-09T01:52:06Z"), response.freeOfferExpirationTime());
        Assertions.assertEquals(true, response.reserved());
        Assertions.assertEquals(false, response.isXenon());
        Assertions.assertEquals(false, response.hyperV());
        Assertions.assertEquals(2086105728, response.targetWorkerCount());
        Assertions.assertEquals(1783167392, response.targetWorkerSizeId());
        Assertions.assertEquals("wbftznxfrfh", response.kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, response.zoneRedundant());
    }
}
