// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.HostnameSslState;
import com.azure.resourcemanager.appservice.generated.models.HostType;
import com.azure.resourcemanager.appservice.generated.models.SslState;
import org.junit.jupiter.api.Assertions;

public final class HostnameSslStateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HostnameSslState model = BinaryData.fromString(
            "{\"name\":\"qeevt\",\"sslState\":\"IpBasedEnabled\",\"virtualIP\":\"yutnwytpzdmov\",\"thumbprint\":\"fvaawzqa\",\"toUpdate\":false,\"hostType\":\"Standard\"}")
            .toObject(HostnameSslState.class);
        Assertions.assertEquals("qeevt", model.name());
        Assertions.assertEquals(SslState.IP_BASED_ENABLED, model.sslState());
        Assertions.assertEquals("yutnwytpzdmov", model.virtualIp());
        Assertions.assertEquals("fvaawzqa", model.thumbprint());
        Assertions.assertEquals(false, model.toUpdate());
        Assertions.assertEquals(HostType.STANDARD, model.hostType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HostnameSslState model = new HostnameSslState().withName("qeevt")
            .withSslState(SslState.IP_BASED_ENABLED)
            .withVirtualIp("yutnwytpzdmov")
            .withThumbprint("fvaawzqa")
            .withToUpdate(false)
            .withHostType(HostType.STANDARD);
        model = BinaryData.fromObject(model).toObject(HostnameSslState.class);
        Assertions.assertEquals("qeevt", model.name());
        Assertions.assertEquals(SslState.IP_BASED_ENABLED, model.sslState());
        Assertions.assertEquals("yutnwytpzdmov", model.virtualIp());
        Assertions.assertEquals("fvaawzqa", model.thumbprint());
        Assertions.assertEquals(false, model.toUpdate());
        Assertions.assertEquals(HostType.STANDARD, model.hostType());
    }
}
