// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.RecommendationProperties;
import com.azure.resourcemanager.appservice.generated.models.Channels;
import com.azure.resourcemanager.appservice.generated.models.NotificationLevel;
import com.azure.resourcemanager.appservice.generated.models.ResourceScopeType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class RecommendationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecommendationProperties model = BinaryData.fromString(
            "{\"creationTime\":\"2021-09-02T03:38:39Z\",\"recommendationId\":\"9baad83f-41ae-4013-9fc5-a9d9e563b9f0\",\"resourceId\":\"gfyatig\",\"resourceScope\":\"WebSite\",\"ruleName\":\"r\",\"displayName\":\"knczgorywnvojtvm\",\"message\":\"vdlhqvbkar\",\"level\":\"NonUrgentSuggestion\",\"channels\":\"Webhook\",\"categoryTags\":[\"lvkpkpkocmaccebx\"],\"actionName\":\"pyicy\",\"enabled\":1533091961,\"states\":[\"lhwyykgvrccpumd\",\"hgajkrdy\"],\"startTime\":\"2021-03-16T21:55:23Z\",\"endTime\":\"2021-01-20T03:59:03Z\",\"nextNotificationTime\":\"2021-08-21T00:05:36Z\",\"notificationExpirationTime\":\"2020-12-27T13:08:39Z\",\"notifiedTime\":\"2021-02-10T09:03:28Z\",\"score\":3.716914578212449,\"isDynamic\":true,\"extensionName\":\"enqnxhgkordwzej\",\"bladeName\":\"cwzvc\",\"forwardLink\":\"p\"}")
            .toObject(RecommendationProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T03:38:39Z"), model.creationTime());
        Assertions.assertEquals(UUID.fromString("9baad83f-41ae-4013-9fc5-a9d9e563b9f0"), model.recommendationId());
        Assertions.assertEquals("gfyatig", model.resourceId());
        Assertions.assertEquals(ResourceScopeType.WEB_SITE, model.resourceScope());
        Assertions.assertEquals("r", model.ruleName());
        Assertions.assertEquals("knczgorywnvojtvm", model.displayName());
        Assertions.assertEquals("vdlhqvbkar", model.message());
        Assertions.assertEquals(NotificationLevel.NON_URGENT_SUGGESTION, model.level());
        Assertions.assertEquals(Channels.WEBHOOK, model.channels());
        Assertions.assertEquals("pyicy", model.actionName());
        Assertions.assertEquals(1533091961, model.enabled());
        Assertions.assertEquals("lhwyykgvrccpumd", model.states().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T21:55:23Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T03:59:03Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T00:05:36Z"), model.nextNotificationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T13:08:39Z"), model.notificationExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T09:03:28Z"), model.notifiedTime());
        Assertions.assertEquals(3.716914578212449D, model.score());
        Assertions.assertEquals(true, model.isDynamic());
        Assertions.assertEquals("enqnxhgkordwzej", model.extensionName());
        Assertions.assertEquals("cwzvc", model.bladeName());
        Assertions.assertEquals("p", model.forwardLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecommendationProperties model
            = new RecommendationProperties().withCreationTime(OffsetDateTime.parse("2021-09-02T03:38:39Z"))
                .withRecommendationId(UUID.fromString("9baad83f-41ae-4013-9fc5-a9d9e563b9f0"))
                .withResourceId("gfyatig")
                .withResourceScope(ResourceScopeType.WEB_SITE)
                .withRuleName("r")
                .withDisplayName("knczgorywnvojtvm")
                .withMessage("vdlhqvbkar")
                .withLevel(NotificationLevel.NON_URGENT_SUGGESTION)
                .withChannels(Channels.WEBHOOK)
                .withActionName("pyicy")
                .withEnabled(1533091961)
                .withStates(Arrays.asList("lhwyykgvrccpumd", "hgajkrdy"))
                .withStartTime(OffsetDateTime.parse("2021-03-16T21:55:23Z"))
                .withEndTime(OffsetDateTime.parse("2021-01-20T03:59:03Z"))
                .withNextNotificationTime(OffsetDateTime.parse("2021-08-21T00:05:36Z"))
                .withNotificationExpirationTime(OffsetDateTime.parse("2020-12-27T13:08:39Z"))
                .withNotifiedTime(OffsetDateTime.parse("2021-02-10T09:03:28Z"))
                .withScore(3.716914578212449D)
                .withIsDynamic(true)
                .withExtensionName("enqnxhgkordwzej")
                .withBladeName("cwzvc")
                .withForwardLink("p");
        model = BinaryData.fromObject(model).toObject(RecommendationProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T03:38:39Z"), model.creationTime());
        Assertions.assertEquals(UUID.fromString("9baad83f-41ae-4013-9fc5-a9d9e563b9f0"), model.recommendationId());
        Assertions.assertEquals("gfyatig", model.resourceId());
        Assertions.assertEquals(ResourceScopeType.WEB_SITE, model.resourceScope());
        Assertions.assertEquals("r", model.ruleName());
        Assertions.assertEquals("knczgorywnvojtvm", model.displayName());
        Assertions.assertEquals("vdlhqvbkar", model.message());
        Assertions.assertEquals(NotificationLevel.NON_URGENT_SUGGESTION, model.level());
        Assertions.assertEquals(Channels.WEBHOOK, model.channels());
        Assertions.assertEquals("pyicy", model.actionName());
        Assertions.assertEquals(1533091961, model.enabled());
        Assertions.assertEquals("lhwyykgvrccpumd", model.states().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-16T21:55:23Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-20T03:59:03Z"), model.endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T00:05:36Z"), model.nextNotificationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-27T13:08:39Z"), model.notificationExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T09:03:28Z"), model.notifiedTime());
        Assertions.assertEquals(3.716914578212449D, model.score());
        Assertions.assertEquals(true, model.isDynamic());
        Assertions.assertEquals("enqnxhgkordwzej", model.extensionName());
        Assertions.assertEquals("cwzvc", model.bladeName());
        Assertions.assertEquals("p", model.forwardLink());
    }
}
