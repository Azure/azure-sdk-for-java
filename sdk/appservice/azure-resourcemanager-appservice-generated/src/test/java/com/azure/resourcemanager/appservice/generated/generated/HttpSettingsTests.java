// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.ForwardProxy;
import com.azure.resourcemanager.appservice.generated.models.ForwardProxyConvention;
import com.azure.resourcemanager.appservice.generated.models.HttpSettings;
import com.azure.resourcemanager.appservice.generated.models.HttpSettingsRoutes;
import org.junit.jupiter.api.Assertions;

public final class HttpSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HttpSettings model = BinaryData.fromString(
            "{\"requireHttps\":false,\"routes\":{\"apiPrefix\":\"zbdmddghqe\"},\"forwardProxy\":{\"convention\":\"Custom\",\"customHostHeaderName\":\"se\",\"customProtoHeaderName\":\"pvesorsbegclmexa\"}}")
            .toObject(HttpSettings.class);
        Assertions.assertEquals(false, model.requireHttps());
        Assertions.assertEquals("zbdmddghqe", model.routes().apiPrefix());
        Assertions.assertEquals(ForwardProxyConvention.CUSTOM, model.forwardProxy().convention());
        Assertions.assertEquals("se", model.forwardProxy().customHostHeaderName());
        Assertions.assertEquals("pvesorsbegclmexa", model.forwardProxy().customProtoHeaderName());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HttpSettings model = new HttpSettings().withRequireHttps(false)
            .withRoutes(new HttpSettingsRoutes().withApiPrefix("zbdmddghqe"))
            .withForwardProxy(new ForwardProxy().withConvention(ForwardProxyConvention.CUSTOM)
                .withCustomHostHeaderName("se")
                .withCustomProtoHeaderName("pvesorsbegclmexa"));
        model = BinaryData.fromObject(model).toObject(HttpSettings.class);
        Assertions.assertEquals(false, model.requireHttps());
        Assertions.assertEquals("zbdmddghqe", model.routes().apiPrefix());
        Assertions.assertEquals(ForwardProxyConvention.CUSTOM, model.forwardProxy().convention());
        Assertions.assertEquals("se", model.forwardProxy().customHostHeaderName());
        Assertions.assertEquals("pvesorsbegclmexa", model.forwardProxy().customProtoHeaderName());
    }
}
