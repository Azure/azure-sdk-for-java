// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.CsmOperationDescription;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProvidersListOperationsMockTests {
    @Test
    public void testListOperations() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"g\",\"isDataAction\":false,\"display\":{\"provider\":\"elwszqv\",\"resource\":\"kddxljjzdbzk\",\"operation\":\"gw\",\"description\":\"ujshcsnk\"},\"origin\":\"gpqxqevt\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"jkjirvj\",\"displayName\":\"salvjlhn\",\"displayDescription\":\"uaeokympwquutl\",\"unit\":\"fuzthszjy\",\"aggregationType\":\"hsliqeft\",\"supportsInstanceLevelAggregation\":true,\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"dpufqsdt\",\"sourceMdmNamespace\":\"xjbx\",\"metricFilterPattern\":\"mehquqihgiboglo\",\"fillGapWithZero\":true,\"isInternal\":true,\"dimensions\":[{},{},{},{}],\"category\":\"colxcwrszw\",\"availabilities\":[{},{},{}],\"supportedTimeGrainTypes\":[\"sdkcuhqtsk\",\"b\",\"ueeeucvvnbymrgel\",\"oduexx\"],\"supportedAggregationTypes\":[\"fr\",\"envkqtvtq\",\"wqzvqtnozwphka\"]},{\"name\":\"acvcbr\",\"displayName\":\"tpohbzbbjxkamit\",\"displayDescription\":\"qvp\",\"unit\":\"dbyelrte\",\"aggregationType\":\"kwypumqfms\",\"supportsInstanceLevelAggregation\":false,\"enableRegionalMdmAccount\":true,\"sourceMdmAccount\":\"lfdmlylzdb\",\"sourceMdmNamespace\":\"jlwfthfrxwiq\",\"metricFilterPattern\":\"fgkwr\",\"fillGapWithZero\":false,\"isInternal\":false,\"dimensions\":[{},{}],\"category\":\"bpywecz\",\"availabilities\":[{},{},{}],\"supportedTimeGrainTypes\":[\"jbh\",\"yddijfkktigisee\"],\"supportedAggregationTypes\":[\"rerxydsompncea\",\"kjtm\"]},{\"name\":\"czkjkfakgrwtpe\",\"displayName\":\"anm\",\"displayDescription\":\"pceuwmfdy\",\"unit\":\"py\",\"aggregationType\":\"gqyszjuijzhvejqj\",\"supportsInstanceLevelAggregation\":true,\"enableRegionalMdmAccount\":false,\"sourceMdmAccount\":\"lpykjpakaouyaan\",\"sourceMdmNamespace\":\"aic\",\"metricFilterPattern\":\"ycakkonay\",\"fillGapWithZero\":false,\"isInternal\":false,\"dimensions\":[{},{},{},{}],\"category\":\"zyxaanhwuq\",\"availabilities\":[{}],\"supportedTimeGrainTypes\":[\"sksfbkxfkeeqo\"],\"supportedAggregationTypes\":[\"ekpeerwssw\"]}],\"logSpecifications\":[{\"name\":\"djry\",\"displayName\":\"pdu\",\"blobDuration\":\"bigeu\",\"logFilterPattern\":\"ehxban\"},{\"name\":\"qfhatqssngeviyf\",\"displayName\":\"ohrhjspsyhdapynp\",\"blobDuration\":\"yaftt\",\"logFilterPattern\":\"tzydtgpvnczfpo\"},{\"name\":\"jkuokajky\",\"displayName\":\"ucb\",\"blobDuration\":\"aq\",\"logFilterPattern\":\"uz\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CsmOperationDescription> response
            = manager.providers().listOperations(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("g", response.iterator().next().name());
        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("elwszqv", response.iterator().next().display().provider());
        Assertions.assertEquals("kddxljjzdbzk", response.iterator().next().display().resource());
        Assertions.assertEquals("gw", response.iterator().next().display().operation());
        Assertions.assertEquals("ujshcsnk", response.iterator().next().display().description());
        Assertions.assertEquals("gpqxqevt", response.iterator().next().origin());
        Assertions.assertEquals("jkjirvj",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("salvjlhn",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("uaeokympwquutl",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("fuzthszjy",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("hsliqeft",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportsInstanceLevelAggregation());
        Assertions.assertEquals(false,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .enableRegionalMdmAccount());
        Assertions.assertEquals("dpufqsdt",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmAccount());
        Assertions.assertEquals("xjbx",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .sourceMdmNamespace());
        Assertions.assertEquals("mehquqihgiboglo",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .metricFilterPattern());
        Assertions.assertEquals(true,
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
        Assertions.assertEquals(true,
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).isInternal());
        Assertions.assertEquals("colxcwrszw",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("sdkcuhqtsk",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedTimeGrainTypes()
                .get(0));
        Assertions.assertEquals("fr",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .supportedAggregationTypes()
                .get(0));
        Assertions.assertEquals("djry",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("pdu",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
        Assertions.assertEquals("bigeu",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).blobDuration());
        Assertions.assertEquals("ehxban",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .logSpecifications()
                .get(0)
                .logFilterPattern());
    }
}
