// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticMetricSampleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticMetricSample model = BinaryData.fromString(
            "{\"timestamp\":\"2021-02-07T12:58:22Z\",\"roleInstance\":\"tkfvvdshx\",\"total\":76.24482512055425,\"maximum\":55.05455873716325,\"minimum\":91.60924092517814,\"isAggregated\":false}")
            .toObject(DiagnosticMetricSample.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T12:58:22Z"), model.timestamp());
        Assertions.assertEquals("tkfvvdshx", model.roleInstance());
        Assertions.assertEquals(76.24482512055425D, model.total());
        Assertions.assertEquals(55.05455873716325D, model.maximum());
        Assertions.assertEquals(91.60924092517814D, model.minimum());
        Assertions.assertEquals(false, model.isAggregated());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticMetricSample model
            = new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-02-07T12:58:22Z"))
                .withRoleInstance("tkfvvdshx")
                .withTotal(76.24482512055425D)
                .withMaximum(55.05455873716325D)
                .withMinimum(91.60924092517814D)
                .withIsAggregated(false);
        model = BinaryData.fromObject(model).toObject(DiagnosticMetricSample.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-07T12:58:22Z"), model.timestamp());
        Assertions.assertEquals("tkfvvdshx", model.roleInstance());
        Assertions.assertEquals(76.24482512055425D, model.total());
        Assertions.assertEquals(55.05455873716325D, model.maximum());
        Assertions.assertEquals(91.60924092517814D, model.minimum());
        Assertions.assertEquals(false, model.isAggregated());
    }
}
