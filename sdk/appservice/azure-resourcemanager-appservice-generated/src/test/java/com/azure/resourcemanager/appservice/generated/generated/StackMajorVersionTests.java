// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.StackMajorVersion;
import com.azure.resourcemanager.appservice.generated.models.StackMinorVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StackMajorVersionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StackMajorVersion model = BinaryData.fromString(
            "{\"displayVersion\":\"lofzekfsrmaukl\",\"runtimeVersion\":\"v\",\"isDefault\":true,\"minorVersions\":[{\"displayVersion\":\"apejovtkwx\",\"runtimeVersion\":\"whhnoyrzaa\",\"isDefault\":false,\"isRemoteDebuggingEnabled\":false},{\"displayVersion\":\"jenvjeateaxx\",\"runtimeVersion\":\"xoxdjxldnaryyi\",\"isDefault\":false,\"isRemoteDebuggingEnabled\":false},{\"displayVersion\":\"rndwdbvxvzaled\",\"runtimeVersion\":\"qxlun\",\"isDefault\":false,\"isRemoteDebuggingEnabled\":true}],\"applicationInsights\":true,\"isPreview\":false,\"isDeprecated\":false,\"isHidden\":true,\"appSettingsDictionary\":{\"a\":\"dataa\",\"rqra\":\"datapohrvm\",\"ivznllas\":\"dataa\"},\"siteConfigPropertiesDictionary\":{\"gtaiywbq\":\"datakhjqjpvbaihxjtg\"}}")
            .toObject(StackMajorVersion.class);
        Assertions.assertEquals("lofzekfsrmaukl", model.displayVersion());
        Assertions.assertEquals("v", model.runtimeVersion());
        Assertions.assertEquals(true, model.isDefault());
        Assertions.assertEquals("apejovtkwx", model.minorVersions().get(0).displayVersion());
        Assertions.assertEquals("whhnoyrzaa", model.minorVersions().get(0).runtimeVersion());
        Assertions.assertEquals(false, model.minorVersions().get(0).isDefault());
        Assertions.assertEquals(false, model.minorVersions().get(0).isRemoteDebuggingEnabled());
        Assertions.assertEquals(true, model.applicationInsights());
        Assertions.assertEquals(false, model.isPreview());
        Assertions.assertEquals(false, model.isDeprecated());
        Assertions.assertEquals(true, model.isHidden());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StackMajorVersion model = new StackMajorVersion().withDisplayVersion("lofzekfsrmaukl")
            .withRuntimeVersion("v")
            .withIsDefault(true)
            .withMinorVersions(Arrays.asList(
                new StackMinorVersion().withDisplayVersion("apejovtkwx")
                    .withRuntimeVersion("whhnoyrzaa")
                    .withIsDefault(false)
                    .withIsRemoteDebuggingEnabled(false),
                new StackMinorVersion().withDisplayVersion("jenvjeateaxx")
                    .withRuntimeVersion("xoxdjxldnaryyi")
                    .withIsDefault(false)
                    .withIsRemoteDebuggingEnabled(false),
                new StackMinorVersion().withDisplayVersion("rndwdbvxvzaled")
                    .withRuntimeVersion("qxlun")
                    .withIsDefault(false)
                    .withIsRemoteDebuggingEnabled(true)))
            .withApplicationInsights(true)
            .withIsPreview(false)
            .withIsDeprecated(false)
            .withIsHidden(true)
            .withAppSettingsDictionary(mapOf("a", "dataa", "rqra", "datapohrvm", "ivznllas", "dataa"))
            .withSiteConfigPropertiesDictionary(mapOf("gtaiywbq", "datakhjqjpvbaihxjtg"));
        model = BinaryData.fromObject(model).toObject(StackMajorVersion.class);
        Assertions.assertEquals("lofzekfsrmaukl", model.displayVersion());
        Assertions.assertEquals("v", model.runtimeVersion());
        Assertions.assertEquals(true, model.isDefault());
        Assertions.assertEquals("apejovtkwx", model.minorVersions().get(0).displayVersion());
        Assertions.assertEquals("whhnoyrzaa", model.minorVersions().get(0).runtimeVersion());
        Assertions.assertEquals(false, model.minorVersions().get(0).isDefault());
        Assertions.assertEquals(false, model.minorVersions().get(0).isRemoteDebuggingEnabled());
        Assertions.assertEquals(true, model.applicationInsights());
        Assertions.assertEquals(false, model.isPreview());
        Assertions.assertEquals(false, model.isDeprecated());
        Assertions.assertEquals(true, model.isHidden());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
