// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessThreadInfoProperties;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ProcessThreadInfoPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProcessThreadInfoProperties model = BinaryData.fromString(
            "{\"identifier\":595348439,\"href\":\"pvwxl\",\"process\":\"hvrkqv\",\"start_address\":\"gd\",\"current_priority\":1318426114,\"priority_level\":\"zfcmxmjpjakj\",\"base_priority\":645547279,\"start_time\":\"2021-08-11T19:12:02Z\",\"total_processor_time\":\"cg\",\"user_processor_time\":\"qxnyxpmqdsqnii\",\"state\":\"t\",\"wait_reason\":\"kdi\"}")
            .toObject(ProcessThreadInfoProperties.class);
        Assertions.assertEquals("pvwxl", model.href());
        Assertions.assertEquals("hvrkqv", model.process());
        Assertions.assertEquals("gd", model.startAddress());
        Assertions.assertEquals(1318426114, model.currentPriority());
        Assertions.assertEquals("zfcmxmjpjakj", model.priorityLevel());
        Assertions.assertEquals(645547279, model.basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-11T19:12:02Z"), model.startTime());
        Assertions.assertEquals("cg", model.totalProcessorTime());
        Assertions.assertEquals("qxnyxpmqdsqnii", model.userProcessorTime());
        Assertions.assertEquals("t", model.state());
        Assertions.assertEquals("kdi", model.waitReason());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProcessThreadInfoProperties model = new ProcessThreadInfoProperties().withHref("pvwxl")
            .withProcess("hvrkqv")
            .withStartAddress("gd")
            .withCurrentPriority(1318426114)
            .withPriorityLevel("zfcmxmjpjakj")
            .withBasePriority(645547279)
            .withStartTime(OffsetDateTime.parse("2021-08-11T19:12:02Z"))
            .withTotalProcessorTime("cg")
            .withUserProcessorTime("qxnyxpmqdsqnii")
            .withState("t")
            .withWaitReason("kdi");
        model = BinaryData.fromObject(model).toObject(ProcessThreadInfoProperties.class);
        Assertions.assertEquals("pvwxl", model.href());
        Assertions.assertEquals("hvrkqv", model.process());
        Assertions.assertEquals("gd", model.startAddress());
        Assertions.assertEquals(1318426114, model.currentPriority());
        Assertions.assertEquals("zfcmxmjpjakj", model.priorityLevel());
        Assertions.assertEquals(645547279, model.basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-11T19:12:02Z"), model.startTime());
        Assertions.assertEquals("cg", model.totalProcessorTime());
        Assertions.assertEquals("qxnyxpmqdsqnii", model.userProcessorTime());
        Assertions.assertEquals("t", model.state());
        Assertions.assertEquals("kdi", model.waitReason());
    }
}
