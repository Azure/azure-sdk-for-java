// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessInfoProperties;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessModuleInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessThreadInfoInner;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProcessInfoPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProcessInfoProperties model = BinaryData.fromString(
            "{\"identifier\":1311022992,\"deployment_name\":\"uptslii\",\"href\":\"lkwk\",\"minidump\":\"invamtykxsz\",\"is_profile_running\":false,\"is_iis_profile_running\":false,\"iis_profile_timeout_in_seconds\":41.049960127155025,\"parent\":\"zdozktkdpczeoh\",\"children\":[\"gcnbvmhvqp\",\"edaxkuyorfjidqo\",\"aweog\",\"vfyihuzsbpwn\"],\"threads\":[{\"properties\":{\"identifier\":745231340,\"href\":\"zw\",\"process\":\"mdlzgkooagrl\",\"start_address\":\"amesit\",\"current_priority\":708144276,\"priority_level\":\"ewhuwxkyxiat\",\"base_priority\":1314282920,\"start_time\":\"2021-04-07T01:11:29Z\",\"total_processor_time\":\"ifllxccprk\",\"user_processor_time\":\"fozwhomydxgtuq\",\"state\":\"fquzihirqvv\",\"wait_reason\":\"tydgaqoktssg\"},\"kind\":\"xerxrmhrraqgbb\",\"id\":\"lvihylrxsi\",\"name\":\"zsyiumtitlq\",\"type\":\"cf\"},{\"properties\":{\"identifier\":1770574710,\"href\":\"kq\",\"process\":\"ayqivb\",\"start_address\":\"drqgzetboy\",\"current_priority\":1485915275,\"priority_level\":\"muxppwpcfmgrmt\",\"base_priority\":943477777,\"start_time\":\"2021-11-02T13:43:15Z\",\"total_processor_time\":\"dwrjencofei\",\"user_processor_time\":\"wibdtpljo\",\"state\":\"ajokbxxcdk\",\"wait_reason\":\"jwtkftgzl\"},\"kind\":\"epmewsjpgbmlbx\",\"id\":\"hgvtepvrunudmakk\",\"name\":\"hrnaxkc\",\"type\":\"kwohdig\"},{\"properties\":{\"identifier\":843283885,\"href\":\"ftsamo\",\"process\":\"qbaktvxerowuzv\",\"start_address\":\"n\",\"current_priority\":978149104,\"priority_level\":\"af\",\"base_priority\":1717945817,\"start_time\":\"2021-01-22T11:41:30Z\",\"total_processor_time\":\"j\",\"user_processor_time\":\"dofmazhk\",\"state\":\"sjknaq\",\"wait_reason\":\"bwgpmdmw\"},\"kind\":\"evveswghhbqqhd\",\"id\":\"dargkwim\",\"name\":\"cceeeuquuwczzcuj\",\"type\":\"xvbkirgknhfwlajw\"},{\"properties\":{\"identifier\":45622634,\"href\":\"jbjgipvspewy\",\"process\":\"ydtkb\",\"start_address\":\"rsdplvia\",\"current_priority\":1876151304,\"priority_level\":\"mawo\",\"base_priority\":997387260,\"start_time\":\"2021-05-27T16:46:47Z\",\"total_processor_time\":\"iccwbqy\",\"user_processor_time\":\"lwbj\",\"state\":\"ynqryoisweofv\",\"wait_reason\":\"auphzefine\"},\"kind\":\"dxw\",\"id\":\"tiivz\",\"name\":\"deexccw\",\"type\":\"dgfquywmwtacrscf\"}],\"open_file_handles\":[\"r\",\"jcullm\"],\"modules\":[{\"properties\":{\"base_address\":\"eowoszzw\",\"file_name\":\"sjgfxvchm\",\"href\":\"yguqhgn\",\"file_path\":\"vjfgrpryyi\",\"module_memory_size\":1261273108,\"file_version\":\"jxjrbvy\",\"file_description\":\"buatxkznlw\",\"product\":\"bxogkevdayv\",\"product_version\":\"kxiymzgrg\",\"is_debug\":false,\"language\":\"rjwaez\"},\"kind\":\"ybsps\",\"id\":\"omtcepzim\",\"name\":\"c\",\"type\":\"suiwexpasckpg\"},{\"properties\":{\"base_address\":\"yxbwslx\",\"file_name\":\"mxtoejtqvq\",\"href\":\"mlid\",\"file_path\":\"zxoluzntbpca\",\"module_memory_size\":804458726,\"file_version\":\"qrxip\",\"file_description\":\"rplf\",\"product\":\"vmjjfz\",\"product_version\":\"xlbiqqebarxknf\",\"is_debug\":true,\"language\":\"magbahdbtjmkuzon\"},\"kind\":\"lb\",\"id\":\"z\",\"name\":\"xhuqfvpanloqov\",\"type\":\"cxgqtquirgopgza\"}],\"file_name\":\"cu\",\"command_line\":\"juzvyjxux\",\"user_name\":\"quoqhqrcsk\",\"handle_count\":4842991,\"module_count\":1183521518,\"thread_count\":1117242151,\"start_time\":\"2021-03-02T20:05:15Z\",\"total_cpu_time\":\"dagvyjcdpncvf\",\"user_cpu_time\":\"qyodiijcsapqh\",\"privileged_cpu_time\":\"ajsnivnme\",\"working_set\":1271700883188212963,\"peak_working_set\":3839903988241792029,\"private_memory\":3895995082062884602,\"virtual_memory\":8466547032341688514,\"peak_virtual_memory\":5761436521156875693,\"paged_system_memory\":2312039375080906957,\"non_paged_system_memory\":6441596731766921958,\"paged_memory\":7330601382818532353,\"peak_paged_memory\":8875801028289228560,\"time_stamp\":\"2021-04-01T22:15:16Z\",\"environment_variables\":{\"gctygbbmu\":\"z\",\"jmxwcvumnrutqnke\":\"ljvvcrsmw\",\"pec\":\"jftvltj\",\"xsmubbzadzglmuu\":\"pkbzltnowpajf\"},\"is_scm_site\":false,\"is_webjob\":true,\"description\":\"ypxmuldh\"}")
            .toObject(ProcessInfoProperties.class);
        Assertions.assertEquals("uptslii", model.deploymentName());
        Assertions.assertEquals("lkwk", model.href());
        Assertions.assertEquals("invamtykxsz", model.minidump());
        Assertions.assertEquals(false, model.isProfileRunning());
        Assertions.assertEquals(false, model.isIisProfileRunning());
        Assertions.assertEquals(41.049960127155025D, model.iisProfileTimeoutInSeconds());
        Assertions.assertEquals("zdozktkdpczeoh", model.parent());
        Assertions.assertEquals("gcnbvmhvqp", model.children().get(0));
        Assertions.assertEquals("xerxrmhrraqgbb", model.threads().get(0).kind());
        Assertions.assertEquals("zw", model.threads().get(0).href());
        Assertions.assertEquals("mdlzgkooagrl", model.threads().get(0).process());
        Assertions.assertEquals("amesit", model.threads().get(0).startAddress());
        Assertions.assertEquals(708144276, model.threads().get(0).currentPriority());
        Assertions.assertEquals("ewhuwxkyxiat", model.threads().get(0).priorityLevel());
        Assertions.assertEquals(1314282920, model.threads().get(0).basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-07T01:11:29Z"), model.threads().get(0).startTime());
        Assertions.assertEquals("ifllxccprk", model.threads().get(0).totalProcessorTime());
        Assertions.assertEquals("fozwhomydxgtuq", model.threads().get(0).userProcessorTime());
        Assertions.assertEquals("fquzihirqvv", model.threads().get(0).state());
        Assertions.assertEquals("tydgaqoktssg", model.threads().get(0).waitReason());
        Assertions.assertEquals("r", model.openFileHandles().get(0));
        Assertions.assertEquals("ybsps", model.modules().get(0).kind());
        Assertions.assertEquals("eowoszzw", model.modules().get(0).baseAddress());
        Assertions.assertEquals("sjgfxvchm", model.modules().get(0).fileName());
        Assertions.assertEquals("yguqhgn", model.modules().get(0).href());
        Assertions.assertEquals("vjfgrpryyi", model.modules().get(0).filePath());
        Assertions.assertEquals(1261273108, model.modules().get(0).moduleMemorySize());
        Assertions.assertEquals("jxjrbvy", model.modules().get(0).fileVersion());
        Assertions.assertEquals("buatxkznlw", model.modules().get(0).fileDescription());
        Assertions.assertEquals("bxogkevdayv", model.modules().get(0).product());
        Assertions.assertEquals("kxiymzgrg", model.modules().get(0).productVersion());
        Assertions.assertEquals(false, model.modules().get(0).isDebug());
        Assertions.assertEquals("rjwaez", model.modules().get(0).language());
        Assertions.assertEquals("cu", model.fileName());
        Assertions.assertEquals("juzvyjxux", model.commandLine());
        Assertions.assertEquals("quoqhqrcsk", model.username());
        Assertions.assertEquals(4842991, model.handleCount());
        Assertions.assertEquals(1183521518, model.moduleCount());
        Assertions.assertEquals(1117242151, model.threadCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-02T20:05:15Z"), model.startTime());
        Assertions.assertEquals("dagvyjcdpncvf", model.totalCpuTime());
        Assertions.assertEquals("qyodiijcsapqh", model.userCpuTime());
        Assertions.assertEquals("ajsnivnme", model.privilegedCpuTime());
        Assertions.assertEquals(1271700883188212963L, model.workingSet());
        Assertions.assertEquals(3839903988241792029L, model.peakWorkingSet());
        Assertions.assertEquals(3895995082062884602L, model.privateMemory());
        Assertions.assertEquals(8466547032341688514L, model.virtualMemory());
        Assertions.assertEquals(5761436521156875693L, model.peakVirtualMemory());
        Assertions.assertEquals(2312039375080906957L, model.pagedSystemMemory());
        Assertions.assertEquals(6441596731766921958L, model.nonPagedSystemMemory());
        Assertions.assertEquals(7330601382818532353L, model.pagedMemory());
        Assertions.assertEquals(8875801028289228560L, model.peakPagedMemory());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T22:15:16Z"), model.timestamp());
        Assertions.assertEquals("z", model.environmentVariables().get("gctygbbmu"));
        Assertions.assertEquals(false, model.isScmSite());
        Assertions.assertEquals(true, model.isWebjob());
        Assertions.assertEquals("ypxmuldh", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProcessInfoProperties model = new ProcessInfoProperties().withDeploymentName("uptslii")
            .withHref("lkwk")
            .withMinidump("invamtykxsz")
            .withIsProfileRunning(false)
            .withIsIisProfileRunning(false)
            .withIisProfileTimeoutInSeconds(41.049960127155025D)
            .withParent("zdozktkdpczeoh")
            .withChildren(Arrays.asList("gcnbvmhvqp", "edaxkuyorfjidqo", "aweog", "vfyihuzsbpwn"))
            .withThreads(Arrays.asList(
                new ProcessThreadInfoInner().withKind("xerxrmhrraqgbb")
                    .withHref("zw")
                    .withProcess("mdlzgkooagrl")
                    .withStartAddress("amesit")
                    .withCurrentPriority(708144276)
                    .withPriorityLevel("ewhuwxkyxiat")
                    .withBasePriority(1314282920)
                    .withStartTime(OffsetDateTime.parse("2021-04-07T01:11:29Z"))
                    .withTotalProcessorTime("ifllxccprk")
                    .withUserProcessorTime("fozwhomydxgtuq")
                    .withState("fquzihirqvv")
                    .withWaitReason("tydgaqoktssg"),
                new ProcessThreadInfoInner().withKind("epmewsjpgbmlbx")
                    .withHref("kq")
                    .withProcess("ayqivb")
                    .withStartAddress("drqgzetboy")
                    .withCurrentPriority(1485915275)
                    .withPriorityLevel("muxppwpcfmgrmt")
                    .withBasePriority(943477777)
                    .withStartTime(OffsetDateTime.parse("2021-11-02T13:43:15Z"))
                    .withTotalProcessorTime("dwrjencofei")
                    .withUserProcessorTime("wibdtpljo")
                    .withState("ajokbxxcdk")
                    .withWaitReason("jwtkftgzl"),
                new ProcessThreadInfoInner().withKind("evveswghhbqqhd")
                    .withHref("ftsamo")
                    .withProcess("qbaktvxerowuzv")
                    .withStartAddress("n")
                    .withCurrentPriority(978149104)
                    .withPriorityLevel("af")
                    .withBasePriority(1717945817)
                    .withStartTime(OffsetDateTime.parse("2021-01-22T11:41:30Z"))
                    .withTotalProcessorTime("j")
                    .withUserProcessorTime("dofmazhk")
                    .withState("sjknaq")
                    .withWaitReason("bwgpmdmw"),
                new ProcessThreadInfoInner().withKind("dxw")
                    .withHref("jbjgipvspewy")
                    .withProcess("ydtkb")
                    .withStartAddress("rsdplvia")
                    .withCurrentPriority(1876151304)
                    .withPriorityLevel("mawo")
                    .withBasePriority(997387260)
                    .withStartTime(OffsetDateTime.parse("2021-05-27T16:46:47Z"))
                    .withTotalProcessorTime("iccwbqy")
                    .withUserProcessorTime("lwbj")
                    .withState("ynqryoisweofv")
                    .withWaitReason("auphzefine")))
            .withOpenFileHandles(Arrays.asList("r", "jcullm"))
            .withModules(Arrays.asList(
                new ProcessModuleInfoInner().withKind("ybsps")
                    .withBaseAddress("eowoszzw")
                    .withFileName("sjgfxvchm")
                    .withHref("yguqhgn")
                    .withFilePath("vjfgrpryyi")
                    .withModuleMemorySize(1261273108)
                    .withFileVersion("jxjrbvy")
                    .withFileDescription("buatxkznlw")
                    .withProduct("bxogkevdayv")
                    .withProductVersion("kxiymzgrg")
                    .withIsDebug(false)
                    .withLanguage("rjwaez"),
                new ProcessModuleInfoInner().withKind("lb")
                    .withBaseAddress("yxbwslx")
                    .withFileName("mxtoejtqvq")
                    .withHref("mlid")
                    .withFilePath("zxoluzntbpca")
                    .withModuleMemorySize(804458726)
                    .withFileVersion("qrxip")
                    .withFileDescription("rplf")
                    .withProduct("vmjjfz")
                    .withProductVersion("xlbiqqebarxknf")
                    .withIsDebug(true)
                    .withLanguage("magbahdbtjmkuzon")))
            .withFileName("cu")
            .withCommandLine("juzvyjxux")
            .withUsername("quoqhqrcsk")
            .withHandleCount(4842991)
            .withModuleCount(1183521518)
            .withThreadCount(1117242151)
            .withStartTime(OffsetDateTime.parse("2021-03-02T20:05:15Z"))
            .withTotalCpuTime("dagvyjcdpncvf")
            .withUserCpuTime("qyodiijcsapqh")
            .withPrivilegedCpuTime("ajsnivnme")
            .withWorkingSet(1271700883188212963L)
            .withPeakWorkingSet(3839903988241792029L)
            .withPrivateMemory(3895995082062884602L)
            .withVirtualMemory(8466547032341688514L)
            .withPeakVirtualMemory(5761436521156875693L)
            .withPagedSystemMemory(2312039375080906957L)
            .withNonPagedSystemMemory(6441596731766921958L)
            .withPagedMemory(7330601382818532353L)
            .withPeakPagedMemory(8875801028289228560L)
            .withTimestamp(OffsetDateTime.parse("2021-04-01T22:15:16Z"))
            .withEnvironmentVariables(mapOf("gctygbbmu", "z", "jmxwcvumnrutqnke", "ljvvcrsmw", "pec", "jftvltj",
                "xsmubbzadzglmuu", "pkbzltnowpajf"))
            .withIsScmSite(false)
            .withIsWebjob(true)
            .withDescription("ypxmuldh");
        model = BinaryData.fromObject(model).toObject(ProcessInfoProperties.class);
        Assertions.assertEquals("uptslii", model.deploymentName());
        Assertions.assertEquals("lkwk", model.href());
        Assertions.assertEquals("invamtykxsz", model.minidump());
        Assertions.assertEquals(false, model.isProfileRunning());
        Assertions.assertEquals(false, model.isIisProfileRunning());
        Assertions.assertEquals(41.049960127155025D, model.iisProfileTimeoutInSeconds());
        Assertions.assertEquals("zdozktkdpczeoh", model.parent());
        Assertions.assertEquals("gcnbvmhvqp", model.children().get(0));
        Assertions.assertEquals("xerxrmhrraqgbb", model.threads().get(0).kind());
        Assertions.assertEquals("zw", model.threads().get(0).href());
        Assertions.assertEquals("mdlzgkooagrl", model.threads().get(0).process());
        Assertions.assertEquals("amesit", model.threads().get(0).startAddress());
        Assertions.assertEquals(708144276, model.threads().get(0).currentPriority());
        Assertions.assertEquals("ewhuwxkyxiat", model.threads().get(0).priorityLevel());
        Assertions.assertEquals(1314282920, model.threads().get(0).basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-07T01:11:29Z"), model.threads().get(0).startTime());
        Assertions.assertEquals("ifllxccprk", model.threads().get(0).totalProcessorTime());
        Assertions.assertEquals("fozwhomydxgtuq", model.threads().get(0).userProcessorTime());
        Assertions.assertEquals("fquzihirqvv", model.threads().get(0).state());
        Assertions.assertEquals("tydgaqoktssg", model.threads().get(0).waitReason());
        Assertions.assertEquals("r", model.openFileHandles().get(0));
        Assertions.assertEquals("ybsps", model.modules().get(0).kind());
        Assertions.assertEquals("eowoszzw", model.modules().get(0).baseAddress());
        Assertions.assertEquals("sjgfxvchm", model.modules().get(0).fileName());
        Assertions.assertEquals("yguqhgn", model.modules().get(0).href());
        Assertions.assertEquals("vjfgrpryyi", model.modules().get(0).filePath());
        Assertions.assertEquals(1261273108, model.modules().get(0).moduleMemorySize());
        Assertions.assertEquals("jxjrbvy", model.modules().get(0).fileVersion());
        Assertions.assertEquals("buatxkznlw", model.modules().get(0).fileDescription());
        Assertions.assertEquals("bxogkevdayv", model.modules().get(0).product());
        Assertions.assertEquals("kxiymzgrg", model.modules().get(0).productVersion());
        Assertions.assertEquals(false, model.modules().get(0).isDebug());
        Assertions.assertEquals("rjwaez", model.modules().get(0).language());
        Assertions.assertEquals("cu", model.fileName());
        Assertions.assertEquals("juzvyjxux", model.commandLine());
        Assertions.assertEquals("quoqhqrcsk", model.username());
        Assertions.assertEquals(4842991, model.handleCount());
        Assertions.assertEquals(1183521518, model.moduleCount());
        Assertions.assertEquals(1117242151, model.threadCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-02T20:05:15Z"), model.startTime());
        Assertions.assertEquals("dagvyjcdpncvf", model.totalCpuTime());
        Assertions.assertEquals("qyodiijcsapqh", model.userCpuTime());
        Assertions.assertEquals("ajsnivnme", model.privilegedCpuTime());
        Assertions.assertEquals(1271700883188212963L, model.workingSet());
        Assertions.assertEquals(3839903988241792029L, model.peakWorkingSet());
        Assertions.assertEquals(3895995082062884602L, model.privateMemory());
        Assertions.assertEquals(8466547032341688514L, model.virtualMemory());
        Assertions.assertEquals(5761436521156875693L, model.peakVirtualMemory());
        Assertions.assertEquals(2312039375080906957L, model.pagedSystemMemory());
        Assertions.assertEquals(6441596731766921958L, model.nonPagedSystemMemory());
        Assertions.assertEquals(7330601382818532353L, model.pagedMemory());
        Assertions.assertEquals(8875801028289228560L, model.peakPagedMemory());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-01T22:15:16Z"), model.timestamp());
        Assertions.assertEquals("z", model.environmentVariables().get("gctygbbmu"));
        Assertions.assertEquals(false, model.isScmSite());
        Assertions.assertEquals(true, model.isWebjob());
        Assertions.assertEquals("ypxmuldh", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
