// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.BackupSchedule;
import com.azure.resourcemanager.appservice.generated.models.FrequencyUnit;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class BackupScheduleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        BackupSchedule model = BinaryData.fromString(
            "{\"frequencyInterval\":233200582,\"frequencyUnit\":\"Hour\",\"keepAtLeastOneBackup\":true,\"retentionPeriodInDays\":1121002122,\"startTime\":\"2021-11-22T09:17:28Z\",\"lastExecutionTime\":\"2021-05-09T03:08:08Z\"}")
            .toObject(BackupSchedule.class);
        Assertions.assertEquals(233200582, model.frequencyInterval());
        Assertions.assertEquals(FrequencyUnit.HOUR, model.frequencyUnit());
        Assertions.assertEquals(true, model.keepAtLeastOneBackup());
        Assertions.assertEquals(1121002122, model.retentionPeriodInDays());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T09:17:28Z"), model.startTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        BackupSchedule model = new BackupSchedule().withFrequencyInterval(233200582)
            .withFrequencyUnit(FrequencyUnit.HOUR)
            .withKeepAtLeastOneBackup(true)
            .withRetentionPeriodInDays(1121002122)
            .withStartTime(OffsetDateTime.parse("2021-11-22T09:17:28Z"));
        model = BinaryData.fromObject(model).toObject(BackupSchedule.class);
        Assertions.assertEquals(233200582, model.frequencyInterval());
        Assertions.assertEquals(FrequencyUnit.HOUR, model.frequencyUnit());
        Assertions.assertEquals(true, model.keepAtLeastOneBackup());
        Assertions.assertEquals(1121002122, model.retentionPeriodInDays());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T09:17:28Z"), model.startTime());
    }
}
