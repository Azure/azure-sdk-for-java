// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.Dimension;
import com.azure.resourcemanager.appservice.generated.models.MetricAvailability;
import com.azure.resourcemanager.appservice.generated.models.MetricSpecification;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class MetricSpecificationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MetricSpecification model = BinaryData.fromString(
            "{\"name\":\"crkvcikhnv\",\"displayName\":\"mqg\",\"displayDescription\":\"queziky\",\"unit\":\"gxk\",\"aggregationType\":\"la\",\"supportsInstanceLevelAggregation\":false,\"enableRegionalMdmAccount\":true,\"sourceMdmAccount\":\"ipicc\",\"sourceMdmNamespace\":\"kzivgvvcnayrh\",\"metricFilterPattern\":\"nxxmueedndrdv\",\"fillGapWithZero\":true,\"isInternal\":false,\"dimensions\":[{\"name\":\"healmfmtda\",\"displayName\":\"gdv\",\"internalName\":\"gpiohgwxrtfudxe\",\"toBeExportedForShoebox\":true},{\"name\":\"qagvrvm\",\"displayName\":\"k\",\"internalName\":\"ghimdblx\",\"toBeExportedForShoebox\":true}],\"category\":\"fnjhfjxwmszkkfo\",\"availabilities\":[{\"timeGrain\":\"fkzikfj\",\"blobDuration\":\"n\"},{\"timeGrain\":\"ivx\",\"blobDuration\":\"zel\"},{\"timeGrain\":\"irels\",\"blobDuration\":\"aenwabf\"}],\"supportedTimeGrainTypes\":[\"lddxbjhwua\"],\"supportedAggregationTypes\":[\"zjosp\"]}")
            .toObject(MetricSpecification.class);
        Assertions.assertEquals("crkvcikhnv", model.name());
        Assertions.assertEquals("mqg", model.displayName());
        Assertions.assertEquals("queziky", model.displayDescription());
        Assertions.assertEquals("gxk", model.unit());
        Assertions.assertEquals("la", model.aggregationType());
        Assertions.assertEquals(false, model.supportsInstanceLevelAggregation());
        Assertions.assertEquals(true, model.enableRegionalMdmAccount());
        Assertions.assertEquals("ipicc", model.sourceMdmAccount());
        Assertions.assertEquals("kzivgvvcnayrh", model.sourceMdmNamespace());
        Assertions.assertEquals("nxxmueedndrdv", model.metricFilterPattern());
        Assertions.assertEquals(true, model.fillGapWithZero());
        Assertions.assertEquals(false, model.isInternal());
        Assertions.assertEquals("healmfmtda", model.dimensions().get(0).name());
        Assertions.assertEquals("gdv", model.dimensions().get(0).displayName());
        Assertions.assertEquals("gpiohgwxrtfudxe", model.dimensions().get(0).internalName());
        Assertions.assertEquals(true, model.dimensions().get(0).toBeExportedForShoebox());
        Assertions.assertEquals("fnjhfjxwmszkkfo", model.category());
        Assertions.assertEquals("fkzikfj", model.availabilities().get(0).timeGrain());
        Assertions.assertEquals("n", model.availabilities().get(0).blobDuration());
        Assertions.assertEquals("lddxbjhwua", model.supportedTimeGrainTypes().get(0));
        Assertions.assertEquals("zjosp", model.supportedAggregationTypes().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MetricSpecification model = new MetricSpecification().withName("crkvcikhnv")
            .withDisplayName("mqg")
            .withDisplayDescription("queziky")
            .withUnit("gxk")
            .withAggregationType("la")
            .withSupportsInstanceLevelAggregation(false)
            .withEnableRegionalMdmAccount(true)
            .withSourceMdmAccount("ipicc")
            .withSourceMdmNamespace("kzivgvvcnayrh")
            .withMetricFilterPattern("nxxmueedndrdv")
            .withFillGapWithZero(true)
            .withIsInternal(false)
            .withDimensions(Arrays.asList(
                new Dimension().withName("healmfmtda")
                    .withDisplayName("gdv")
                    .withInternalName("gpiohgwxrtfudxe")
                    .withToBeExportedForShoebox(true),
                new Dimension().withName("qagvrvm")
                    .withDisplayName("k")
                    .withInternalName("ghimdblx")
                    .withToBeExportedForShoebox(true)))
            .withCategory("fnjhfjxwmszkkfo")
            .withAvailabilities(Arrays.asList(new MetricAvailability().withTimeGrain("fkzikfj").withBlobDuration("n"),
                new MetricAvailability().withTimeGrain("ivx").withBlobDuration("zel"),
                new MetricAvailability().withTimeGrain("irels").withBlobDuration("aenwabf")))
            .withSupportedTimeGrainTypes(Arrays.asList("lddxbjhwua"))
            .withSupportedAggregationTypes(Arrays.asList("zjosp"));
        model = BinaryData.fromObject(model).toObject(MetricSpecification.class);
        Assertions.assertEquals("crkvcikhnv", model.name());
        Assertions.assertEquals("mqg", model.displayName());
        Assertions.assertEquals("queziky", model.displayDescription());
        Assertions.assertEquals("gxk", model.unit());
        Assertions.assertEquals("la", model.aggregationType());
        Assertions.assertEquals(false, model.supportsInstanceLevelAggregation());
        Assertions.assertEquals(true, model.enableRegionalMdmAccount());
        Assertions.assertEquals("ipicc", model.sourceMdmAccount());
        Assertions.assertEquals("kzivgvvcnayrh", model.sourceMdmNamespace());
        Assertions.assertEquals("nxxmueedndrdv", model.metricFilterPattern());
        Assertions.assertEquals(true, model.fillGapWithZero());
        Assertions.assertEquals(false, model.isInternal());
        Assertions.assertEquals("healmfmtda", model.dimensions().get(0).name());
        Assertions.assertEquals("gdv", model.dimensions().get(0).displayName());
        Assertions.assertEquals("gpiohgwxrtfudxe", model.dimensions().get(0).internalName());
        Assertions.assertEquals(true, model.dimensions().get(0).toBeExportedForShoebox());
        Assertions.assertEquals("fnjhfjxwmszkkfo", model.category());
        Assertions.assertEquals("fkzikfj", model.availabilities().get(0).timeGrain());
        Assertions.assertEquals("n", model.availabilities().get(0).blobDuration());
        Assertions.assertEquals("lddxbjhwua", model.supportedTimeGrainTypes().get(0));
        Assertions.assertEquals("zjosp", model.supportedAggregationTypes().get(0));
    }
}
