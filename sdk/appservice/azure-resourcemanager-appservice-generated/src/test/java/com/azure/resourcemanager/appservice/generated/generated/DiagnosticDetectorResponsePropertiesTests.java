// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.DetectorDefinition;
import com.azure.resourcemanager.appservice.generated.fluent.models.DiagnosticDetectorResponseProperties;
import com.azure.resourcemanager.appservice.generated.models.DataSource;
import com.azure.resourcemanager.appservice.generated.models.DetectorAbnormalTimePeriod;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSample;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticMetricSet;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import com.azure.resourcemanager.appservice.generated.models.NameValuePair;
import com.azure.resourcemanager.appservice.generated.models.ResponseMetadata;
import com.azure.resourcemanager.appservice.generated.models.Solution;
import com.azure.resourcemanager.appservice.generated.models.SolutionType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiagnosticDetectorResponsePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiagnosticDetectorResponseProperties model = BinaryData.fromString(
            "{\"startTime\":\"2021-10-15T13:34:47Z\",\"endTime\":\"2021-08-18T23:39:12Z\",\"issueDetected\":false,\"detectorDefinition\":{\"displayName\":\"dvrgliegftcvbi\",\"description\":\"tksdwgdnkefgmw\",\"rank\":5.830104807723702,\"isEnabled\":true},\"metrics\":[{\"name\":\"ldbglzout\",\"unit\":\"aqgzekajclyzgs\",\"startTime\":\"2021-04-21T17:36:16Z\",\"endTime\":\"2021-04-23T22:59:57Z\",\"timeGrain\":\"m\",\"values\":[{\"timestamp\":\"2021-09-03T19:01:34Z\",\"roleInstance\":\"mrxkhlobvv\",\"total\":19.954987183635144,\"maximum\":39.48864850330397,\"minimum\":69.06510277683638,\"isAggregated\":true},{\"timestamp\":\"2021-04-30T02:43:08Z\",\"roleInstance\":\"uosnuud\",\"total\":92.75150252080134,\"maximum\":80.04655978165528,\"minimum\":36.1113708400131,\"isAggregated\":true},{\"timestamp\":\"2021-06-30T19:41:24Z\",\"roleInstance\":\"buubpyrowt\",\"total\":92.23579116218012,\"maximum\":58.4616593947025,\"minimum\":60.52063610976462,\"isAggregated\":false}]},{\"name\":\"zevjnnctag\",\"unit\":\"v\",\"startTime\":\"2021-04-04T09:57:21Z\",\"endTime\":\"2021-08-30T15:03:45Z\",\"timeGrain\":\"hzcgkrepdqhqyhwq\",\"values\":[{\"timestamp\":\"2021-02-01T11:14:13Z\",\"roleInstance\":\"abckmzeoxinhgre\",\"total\":62.95766653342469,\"maximum\":50.70920760846648,\"minimum\":36.512091164478676,\"isAggregated\":false},{\"timestamp\":\"2021-03-01T04:09:34Z\",\"roleInstance\":\"zangprbfaxyxzlbc\",\"total\":7.660757736955038,\"maximum\":58.645382568331115,\"minimum\":97.91772911679037,\"isAggregated\":false}]},{\"name\":\"ktxfvonfe\",\"unit\":\"gpkrie\",\"startTime\":\"2021-02-03T18:08:09Z\",\"endTime\":\"2021-04-22T12:10:41Z\",\"timeGrain\":\"xo\",\"values\":[{\"timestamp\":\"2021-05-14T01:59:40Z\",\"roleInstance\":\"wnwpiwxeii\",\"total\":86.95022767994276,\"maximum\":6.740840617654342,\"minimum\":11.63248269807059,\"isAggregated\":false}]},{\"name\":\"ijvs\",\"unit\":\"sdgkj\",\"startTime\":\"2021-06-14T02:30:10Z\",\"endTime\":\"2021-12-09T13:34:06Z\",\"timeGrain\":\"asekwefcvoinw\",\"values\":[{\"timestamp\":\"2021-02-24T17:59:57Z\",\"roleInstance\":\"yxqicladv\",\"total\":63.35229273093957,\"maximum\":0.5685137210100333,\"minimum\":92.56332988867169,\"isAggregated\":true},{\"timestamp\":\"2021-11-04T00:59:22Z\",\"roleInstance\":\"bjlquv\",\"total\":98.20034097073007,\"maximum\":85.86411865703984,\"minimum\":39.214037705581525,\"isAggregated\":false},{\"timestamp\":\"2021-12-04T14:15:44Z\",\"roleInstance\":\"oiglk\",\"total\":1.8138010493695345,\"maximum\":34.35657007209314,\"minimum\":56.48073593516253,\"isAggregated\":true}]}],\"abnormalTimePeriods\":[{\"startTime\":\"2021-02-04T21:21:30Z\",\"endTime\":\"2021-03-11T16:09:38Z\",\"message\":\"ladydgnhautwu\",\"source\":\"xzgpmn\",\"priority\":11.43382035199858,\"metaData\":[[{\"name\":\"lwgdfpfqfpcvs\",\"value\":\"l\"},{\"name\":\"rvwerfwxbsmtb\",\"value\":\"jehhci\"},{\"name\":\"wdv\",\"value\":\"brekqhsqhtf\"},{\"name\":\"pqbye\",\"value\":\"wy\"}],[{\"name\":\"qigmgh\",\"value\":\"nztxlujkh\"}],[{\"name\":\"mrnkfmkhcqtwml\",\"value\":\"jnqtqe\"},{\"name\":\"j\",\"value\":\"vragpokddx\"}]],\"type\":\"PlatformIssue\",\"solutions\":[{\"id\":44.72098085689878,\"displayName\":\"vtptbk\",\"order\":59.97056923188164,\"description\":\"n\",\"type\":\"DeepInvestigation\",\"data\":[[{},{},{},{}],[{},{},{},{}],[{},{},{}],[{},{},{}]],\"metadata\":[[{}],[{},{},{},{}]]}]},{\"startTime\":\"2021-04-01T07:50:21Z\",\"endTime\":\"2021-06-18T04:13:04Z\",\"message\":\"qokmyrljial\",\"source\":\"nobrqlpb\",\"priority\":83.941696092078,\"metaData\":[[{\"name\":\"udivbxnhsqeaeonq\",\"value\":\"wgdhu\"},{\"name\":\"zytzarogatmolj\",\"value\":\"wmpinmzv\"},{\"name\":\"neerzztrknsj\",\"value\":\"ugdybnhrxlel\"}],[{\"name\":\"k\",\"value\":\"z\"},{\"name\":\"ihtd\",\"value\":\"wjekptycaydbj\"}],[{\"name\":\"ymlcfnzhmhsurlg\",\"value\":\"kpmmz\"}]],\"type\":\"PlatformIssue\",\"solutions\":[{\"id\":94.33050921139755,\"displayName\":\"iubmom\",\"order\":88.86195036303745,\"description\":\"hvvlrl\",\"type\":\"DeepInvestigation\",\"data\":[[{}],[{},{}],[{},{},{},{}],[{},{},{}]],\"metadata\":[[{}],[{},{}],[{},{},{}]]}]},{\"startTime\":\"2021-11-13T10:49:56Z\",\"endTime\":\"2021-03-28T05:58:30Z\",\"message\":\"waeqkzfzqxjosho\",\"source\":\"otryegp\",\"priority\":52.63639031620989,\"metaData\":[[{\"name\":\"nlwkbfokxkhupz\",\"value\":\"ufgjblcdr\"},{\"name\":\"fcemftzgyyky\",\"value\":\"ugekdfqn\"},{\"name\":\"twd\",\"value\":\"rczfjjnnuxxr\"}],[{\"name\":\"hmnulwem\",\"value\":\"cifrhjulrsulwzpf\"},{\"name\":\"snawmhhgzotfri\",\"value\":\"gkoekvzwxxyxh\"},{\"name\":\"hctxbxmolpcqyd\",\"value\":\"kvskiczdfrjei\"},{\"name\":\"kgqaboo\",\"value\":\"bmsgycqsxrmdv\"}],[{\"name\":\"yqaeohpjhgejk\",\"value\":\"hhdau\"},{\"name\":\"hoo\",\"value\":\"exbkhx\"}],[{\"name\":\"oez\",\"value\":\"xrkdknkobektm\"},{\"name\":\"z\",\"value\":\"tzamicbig\"},{\"name\":\"dgzsez\",\"value\":\"xke\"},{\"name\":\"iraabmdlqjbedpf\",\"value\":\"lhupmomihzbdnpxp\"}]],\"type\":\"AppDeployment\",\"solutions\":[{\"id\":69.39655341636839,\"displayName\":\"lyicghflru\",\"order\":25.294234057758345,\"description\":\"ghsfxrkbhammgmqf\",\"type\":\"DeepInvestigation\",\"data\":[[{},{},{},{}],[{},{},{}],[{}]],\"metadata\":[[{},{},{},{}],[{},{},{}],[{},{},{},{}],[{},{},{}]]},{\"id\":83.79027725725669,\"displayName\":\"sla\",\"order\":64.7179923838797,\"description\":\"djhunhghcgawnr\",\"type\":\"QuickSolution\",\"data\":[[{},{}],[{},{}]],\"metadata\":[[{},{},{}],[{},{}]]},{\"id\":43.73128555109203,\"displayName\":\"eobfsxstcyilbvzm\",\"order\":94.55064887592877,\"description\":\"lq\",\"type\":\"BestPractices\",\"data\":[[{},{}],[{},{}],[{},{}]],\"metadata\":[[{},{},{},{}],[{},{}],[{}]]}]}],\"data\":[[{\"name\":\"abwmvogljsv\",\"value\":\"gi\"}],[{\"name\":\"cehaqi\",\"value\":\"yzltgiomqo\"},{\"name\":\"epiaeapfsergd\",\"value\":\"eqn\"},{\"name\":\"yheqwb\",\"value\":\"qncjubkhjozfymcw\"},{\"name\":\"upyvqyvliq\",\"value\":\"psejbsvsiaies\"}],[{\"name\":\"dzydisnuep\",\"value\":\"yjln\"},{\"name\":\"pxottd\",\"value\":\"aocqibzjih\"},{\"name\":\"ebiphryvcjwqwoq\",\"value\":\"atjhdhzybspijhf\"},{\"name\":\"gdkkagvwukh\",\"value\":\"s\"}]],\"responseMetaData\":{\"dataSource\":{\"instructions\":[\"mzhwilzzhni\"],\"dataSourceUri\":[{\"name\":\"prlkdne\",\"value\":\"tlrcxivcbkutpu\"},{\"name\":\"twjfluxynbp\",\"value\":\"l\"},{\"name\":\"wa\",\"value\":\"qnjckhmocg\"}]}}}")
            .toObject(DiagnosticDetectorResponseProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-15T13:34:47Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-18T23:39:12Z"), model.endTime());
        Assertions.assertEquals(false, model.issueDetected());
        Assertions.assertEquals("ldbglzout", model.metrics().get(0).name());
        Assertions.assertEquals("aqgzekajclyzgs", model.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-21T17:36:16Z"), model.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T22:59:57Z"), model.metrics().get(0).endTime());
        Assertions.assertEquals("m", model.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-03T19:01:34Z"),
            model.metrics().get(0).values().get(0).timestamp());
        Assertions.assertEquals("mrxkhlobvv", model.metrics().get(0).values().get(0).roleInstance());
        Assertions.assertEquals(19.954987183635144D, model.metrics().get(0).values().get(0).total());
        Assertions.assertEquals(39.48864850330397D, model.metrics().get(0).values().get(0).maximum());
        Assertions.assertEquals(69.06510277683638D, model.metrics().get(0).values().get(0).minimum());
        Assertions.assertEquals(true, model.metrics().get(0).values().get(0).isAggregated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T21:21:30Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T16:09:38Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals("ladydgnhautwu", model.abnormalTimePeriods().get(0).message());
        Assertions.assertEquals("xzgpmn", model.abnormalTimePeriods().get(0).source());
        Assertions.assertEquals(11.43382035199858D, model.abnormalTimePeriods().get(0).priority());
        Assertions.assertEquals("lwgdfpfqfpcvs", model.abnormalTimePeriods().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("l", model.abnormalTimePeriods().get(0).metadata().get(0).get(0).value());
        Assertions.assertEquals(IssueType.PLATFORM_ISSUE, model.abnormalTimePeriods().get(0).type());
        Assertions.assertEquals(44.72098085689878D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("vtptbk", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(59.97056923188164D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("n", model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("abwmvogljsv", model.data().get(0).get(0).name());
        Assertions.assertEquals("gi", model.data().get(0).get(0).value());
        Assertions.assertEquals("mzhwilzzhni", model.responseMetadata().dataSource().instructions().get(0));
        Assertions.assertEquals("prlkdne", model.responseMetadata().dataSource().dataSourceUri().get(0).name());
        Assertions.assertEquals("tlrcxivcbkutpu", model.responseMetadata().dataSource().dataSourceUri().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiagnosticDetectorResponseProperties model = new DiagnosticDetectorResponseProperties()
            .withStartTime(OffsetDateTime.parse("2021-10-15T13:34:47Z"))
            .withEndTime(OffsetDateTime.parse("2021-08-18T23:39:12Z"))
            .withIssueDetected(false)
            .withDetectorDefinition(new DetectorDefinition())
            .withMetrics(Arrays.asList(new DiagnosticMetricSet().withName("ldbglzout")
                .withUnit("aqgzekajclyzgs")
                .withStartTime(OffsetDateTime.parse("2021-04-21T17:36:16Z"))
                .withEndTime(OffsetDateTime.parse("2021-04-23T22:59:57Z"))
                .withTimeGrain("m")
                .withValues(Arrays.asList(
                    new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-09-03T19:01:34Z"))
                        .withRoleInstance("mrxkhlobvv")
                        .withTotal(19.954987183635144D)
                        .withMaximum(39.48864850330397D)
                        .withMinimum(69.06510277683638D)
                        .withIsAggregated(true),
                    new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-04-30T02:43:08Z"))
                        .withRoleInstance("uosnuud")
                        .withTotal(92.75150252080134D)
                        .withMaximum(80.04655978165528D)
                        .withMinimum(36.1113708400131D)
                        .withIsAggregated(true),
                    new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-06-30T19:41:24Z"))
                        .withRoleInstance("buubpyrowt")
                        .withTotal(92.23579116218012D)
                        .withMaximum(58.4616593947025D)
                        .withMinimum(60.52063610976462D)
                        .withIsAggregated(false))),
                new DiagnosticMetricSet().withName("zevjnnctag")
                    .withUnit("v")
                    .withStartTime(OffsetDateTime.parse("2021-04-04T09:57:21Z"))
                    .withEndTime(OffsetDateTime.parse("2021-08-30T15:03:45Z"))
                    .withTimeGrain("hzcgkrepdqhqyhwq")
                    .withValues(
                        Arrays
                            .asList(
                                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-02-01T11:14:13Z"))
                                    .withRoleInstance("abckmzeoxinhgre")
                                    .withTotal(62.95766653342469D)
                                    .withMaximum(50.70920760846648D)
                                    .withMinimum(36.512091164478676D)
                                    .withIsAggregated(false),
                                new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-03-01T04:09:34Z"))
                                    .withRoleInstance("zangprbfaxyxzlbc")
                                    .withTotal(7.660757736955038D)
                                    .withMaximum(58.645382568331115D)
                                    .withMinimum(97.91772911679037D)
                                    .withIsAggregated(false))),
                new DiagnosticMetricSet().withName("ktxfvonfe")
                    .withUnit("gpkrie")
                    .withStartTime(OffsetDateTime.parse("2021-02-03T18:08:09Z"))
                    .withEndTime(OffsetDateTime.parse("2021-04-22T12:10:41Z"))
                    .withTimeGrain("xo")
                    .withValues(Arrays
                        .asList(new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-05-14T01:59:40Z"))
                            .withRoleInstance("wnwpiwxeii")
                            .withTotal(86.95022767994276D)
                            .withMaximum(6.740840617654342D)
                            .withMinimum(11.63248269807059D)
                            .withIsAggregated(false))),
                new DiagnosticMetricSet().withName("ijvs")
                    .withUnit("sdgkj")
                    .withStartTime(OffsetDateTime.parse("2021-06-14T02:30:10Z"))
                    .withEndTime(OffsetDateTime.parse("2021-12-09T13:34:06Z"))
                    .withTimeGrain("asekwefcvoinw")
                    .withValues(Arrays.asList(
                        new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-02-24T17:59:57Z"))
                            .withRoleInstance("yxqicladv")
                            .withTotal(63.35229273093957D)
                            .withMaximum(0.5685137210100333D)
                            .withMinimum(92.56332988867169D)
                            .withIsAggregated(true),
                        new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-11-04T00:59:22Z"))
                            .withRoleInstance("bjlquv")
                            .withTotal(98.20034097073007D)
                            .withMaximum(85.86411865703984D)
                            .withMinimum(39.214037705581525D)
                            .withIsAggregated(false),
                        new DiagnosticMetricSample().withTimestamp(OffsetDateTime.parse("2021-12-04T14:15:44Z"))
                            .withRoleInstance("oiglk")
                            .withTotal(1.8138010493695345D)
                            .withMaximum(34.35657007209314D)
                            .withMinimum(56.48073593516253D)
                            .withIsAggregated(true)))))
            .withAbnormalTimePeriods(Arrays.asList(
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-02-04T21:21:30Z"))
                    .withEndTime(OffsetDateTime.parse("2021-03-11T16:09:38Z"))
                    .withMessage("ladydgnhautwu")
                    .withSource("xzgpmn")
                    .withPriority(11.43382035199858D)
                    .withMetadata(Arrays.asList(
                        Arrays.asList(new NameValuePair().withName("lwgdfpfqfpcvs").withValue("l"),
                            new NameValuePair().withName("rvwerfwxbsmtb").withValue("jehhci"),
                            new NameValuePair().withName("wdv").withValue("brekqhsqhtf"),
                            new NameValuePair().withName("pqbye").withValue("wy")),
                        Arrays.asList(new NameValuePair().withName("qigmgh").withValue("nztxlujkh")),
                        Arrays.asList(new NameValuePair().withName("mrnkfmkhcqtwml").withValue("jnqtqe"),
                            new NameValuePair().withName("j").withValue("vragpokddx"))))
                    .withType(IssueType.PLATFORM_ISSUE)
                    .withSolutions(Arrays.asList(new Solution().withId(44.72098085689878D)
                        .withDisplayName("vtptbk")
                        .withOrder(59.97056923188164D)
                        .withDescription("n")
                        .withType(SolutionType.DEEP_INVESTIGATION)
                        .withData(Arrays.asList(
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))
                        .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                new NameValuePair()))))),
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-04-01T07:50:21Z"))
                    .withEndTime(OffsetDateTime.parse("2021-06-18T04:13:04Z"))
                    .withMessage("qokmyrljial")
                    .withSource("nobrqlpb")
                    .withPriority(83.941696092078D)
                    .withMetadata(Arrays.asList(
                        Arrays.asList(new NameValuePair().withName("udivbxnhsqeaeonq").withValue("wgdhu"),
                            new NameValuePair().withName("zytzarogatmolj").withValue("wmpinmzv"),
                            new NameValuePair().withName("neerzztrknsj").withValue("ugdybnhrxlel")),
                        Arrays.asList(new NameValuePair().withName("k").withValue("z"),
                            new NameValuePair().withName("ihtd").withValue("wjekptycaydbj")),
                        Arrays.asList(new NameValuePair().withName("ymlcfnzhmhsurlg").withValue("kpmmz"))))
                    .withType(IssueType.PLATFORM_ISSUE)
                    .withSolutions(Arrays.asList(new Solution().withId(94.33050921139755D)
                        .withDisplayName("iubmom")
                        .withOrder(88.86195036303745D)
                        .withDescription("hvvlrl")
                        .withType(SolutionType.DEEP_INVESTIGATION)
                        .withData(Arrays.asList(Arrays.asList(new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair())))
                        .withMetadata(Arrays.asList(Arrays.asList(new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair()),
                            Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()))))),
                new DetectorAbnormalTimePeriod().withStartTime(OffsetDateTime.parse("2021-11-13T10:49:56Z"))
                    .withEndTime(OffsetDateTime.parse("2021-03-28T05:58:30Z"))
                    .withMessage("waeqkzfzqxjosho")
                    .withSource("otryegp")
                    .withPriority(52.63639031620989D)
                    .withMetadata(Arrays.asList(
                        Arrays.asList(new NameValuePair().withName("nlwkbfokxkhupz").withValue("ufgjblcdr"),
                            new NameValuePair().withName("fcemftzgyyky").withValue("ugekdfqn"),
                            new NameValuePair().withName("twd").withValue("rczfjjnnuxxr")),
                        Arrays.asList(new NameValuePair().withName("hmnulwem").withValue("cifrhjulrsulwzpf"),
                            new NameValuePair().withName("snawmhhgzotfri").withValue("gkoekvzwxxyxh"),
                            new NameValuePair().withName("hctxbxmolpcqyd").withValue("kvskiczdfrjei"),
                            new NameValuePair().withName("kgqaboo").withValue("bmsgycqsxrmdv")),
                        Arrays.asList(new NameValuePair().withName("yqaeohpjhgejk").withValue("hhdau"),
                            new NameValuePair().withName("hoo").withValue("exbkhx")),
                        Arrays.asList(new NameValuePair().withName("oez").withValue("xrkdknkobektm"),
                            new NameValuePair().withName("z").withValue("tzamicbig"),
                            new NameValuePair().withName("dgzsez").withValue("xke"),
                            new NameValuePair().withName("iraabmdlqjbedpf").withValue("lhupmomihzbdnpxp"))))
                    .withType(IssueType.APP_DEPLOYMENT)
                    .withSolutions(Arrays.asList(
                        new Solution().withId(69.39655341636839D)
                            .withDisplayName("lyicghflru")
                            .withOrder(25.294234057758345D)
                            .withDescription("ghsfxrkbhammgmqf")
                            .withType(SolutionType.DEEP_INVESTIGATION)
                            .withData(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()))),
                        new Solution().withId(83.79027725725669D)
                            .withDisplayName("sla")
                            .withOrder(64.7179923838797D)
                            .withDescription("djhunhghcgawnr")
                            .withType(SolutionType.QUICK_SOLUTION)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()))),
                        new Solution().withId(43.73128555109203D)
                            .withDisplayName("eobfsxstcyilbvzm")
                            .withOrder(94.55064887592877D)
                            .withDescription("lq")
                            .withType(SolutionType.BEST_PRACTICES)
                            .withData(Arrays.asList(Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair())))
                            .withMetadata(Arrays.asList(
                                Arrays.asList(new NameValuePair(), new NameValuePair(), new NameValuePair(),
                                    new NameValuePair()),
                                Arrays.asList(new NameValuePair(), new NameValuePair()),
                                Arrays.asList(new NameValuePair())))))))
            .withData(Arrays.asList(Arrays.asList(new NameValuePair().withName("abwmvogljsv").withValue("gi")),
                Arrays.asList(new NameValuePair().withName("cehaqi").withValue("yzltgiomqo"),
                    new NameValuePair().withName("epiaeapfsergd").withValue("eqn"),
                    new NameValuePair().withName("yheqwb").withValue("qncjubkhjozfymcw"),
                    new NameValuePair().withName("upyvqyvliq").withValue("psejbsvsiaies")),
                Arrays.asList(new NameValuePair().withName("dzydisnuep").withValue("yjln"),
                    new NameValuePair().withName("pxottd").withValue("aocqibzjih"),
                    new NameValuePair().withName("ebiphryvcjwqwoq").withValue("atjhdhzybspijhf"),
                    new NameValuePair().withName("gdkkagvwukh").withValue("s"))))
            .withResponseMetadata(new ResponseMetadata().withDataSource(new DataSource()
                .withInstructions(Arrays.asList("mzhwilzzhni"))
                .withDataSourceUri(Arrays.asList(new NameValuePair().withName("prlkdne").withValue("tlrcxivcbkutpu"),
                    new NameValuePair().withName("twjfluxynbp").withValue("l"),
                    new NameValuePair().withName("wa").withValue("qnjckhmocg")))));
        model = BinaryData.fromObject(model).toObject(DiagnosticDetectorResponseProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-15T13:34:47Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-18T23:39:12Z"), model.endTime());
        Assertions.assertEquals(false, model.issueDetected());
        Assertions.assertEquals("ldbglzout", model.metrics().get(0).name());
        Assertions.assertEquals("aqgzekajclyzgs", model.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-21T17:36:16Z"), model.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-23T22:59:57Z"), model.metrics().get(0).endTime());
        Assertions.assertEquals("m", model.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-03T19:01:34Z"),
            model.metrics().get(0).values().get(0).timestamp());
        Assertions.assertEquals("mrxkhlobvv", model.metrics().get(0).values().get(0).roleInstance());
        Assertions.assertEquals(19.954987183635144D, model.metrics().get(0).values().get(0).total());
        Assertions.assertEquals(39.48864850330397D, model.metrics().get(0).values().get(0).maximum());
        Assertions.assertEquals(69.06510277683638D, model.metrics().get(0).values().get(0).minimum());
        Assertions.assertEquals(true, model.metrics().get(0).values().get(0).isAggregated());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-04T21:21:30Z"),
            model.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-11T16:09:38Z"),
            model.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals("ladydgnhautwu", model.abnormalTimePeriods().get(0).message());
        Assertions.assertEquals("xzgpmn", model.abnormalTimePeriods().get(0).source());
        Assertions.assertEquals(11.43382035199858D, model.abnormalTimePeriods().get(0).priority());
        Assertions.assertEquals("lwgdfpfqfpcvs", model.abnormalTimePeriods().get(0).metadata().get(0).get(0).name());
        Assertions.assertEquals("l", model.abnormalTimePeriods().get(0).metadata().get(0).get(0).value());
        Assertions.assertEquals(IssueType.PLATFORM_ISSUE, model.abnormalTimePeriods().get(0).type());
        Assertions.assertEquals(44.72098085689878D, model.abnormalTimePeriods().get(0).solutions().get(0).id());
        Assertions.assertEquals("vtptbk", model.abnormalTimePeriods().get(0).solutions().get(0).displayName());
        Assertions.assertEquals(59.97056923188164D, model.abnormalTimePeriods().get(0).solutions().get(0).order());
        Assertions.assertEquals("n", model.abnormalTimePeriods().get(0).solutions().get(0).description());
        Assertions.assertEquals(SolutionType.DEEP_INVESTIGATION,
            model.abnormalTimePeriods().get(0).solutions().get(0).type());
        Assertions.assertEquals("abwmvogljsv", model.data().get(0).get(0).name());
        Assertions.assertEquals("gi", model.data().get(0).get(0).value());
        Assertions.assertEquals("mzhwilzzhni", model.responseMetadata().dataSource().instructions().get(0));
        Assertions.assertEquals("prlkdne", model.responseMetadata().dataSource().dataSourceUri().get(0).name());
        Assertions.assertEquals("tlrcxivcbkutpu", model.responseMetadata().dataSource().dataSourceUri().get(0).value());
    }
}
