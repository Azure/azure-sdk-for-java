// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.TriggeredWebJobInner;
import com.azure.resourcemanager.appservice.generated.models.TriggeredJobRun;
import com.azure.resourcemanager.appservice.generated.models.TriggeredWebJobCollection;
import com.azure.resourcemanager.appservice.generated.models.TriggeredWebJobStatus;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TriggeredWebJobCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggeredWebJobCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"latest_run\":{\"web_job_id\":\"ompvyisc\",\"web_job_name\":\"cuf\",\"status\":\"Success\",\"start_time\":\"2021-05-31T15:05:47Z\",\"end_time\":\"2021-03-27T14:17:21Z\",\"duration\":\"jexq\",\"output_url\":\"m\",\"error_url\":\"ridipw\",\"url\":\"jnn\",\"job_name\":\"ifjqhjenb\",\"trigger\":\"pfpllosadjffllr\"},\"history_url\":\"g\",\"scheduler_logs_url\":\"yeok\",\"run_command\":\"zuddccclsnflcxx\",\"url\":\"nypktgslkokqa\",\"extra_info_url\":\"zcojgdqjhzfecjg\",\"web_job_type\":\"Triggered\",\"error\":\"dkkgbvsqksrgk\",\"using_sdk\":false,\"publicNetworkAccess\":\"nrhrqqiwfysujcv\",\"storageAccountRequired\":true,\"settings\":{\"skbpcif\":\"dataexrxyrpwzsmwgeb\",\"cnfnyjwj\":\"datavtwu\"}},\"kind\":\"ubhtml\",\"id\":\"jaic\",\"name\":\"ymjdwirglqibj\",\"type\":\"vmkaw\"},{\"properties\":{\"latest_run\":{\"web_job_id\":\"zfhurrw\",\"web_job_name\":\"wwitzmxxigl\",\"status\":\"Success\",\"start_time\":\"2021-12-05T22:03:07Z\",\"end_time\":\"2021-07-27T00:30:35Z\",\"duration\":\"yp\",\"output_url\":\"yhoemsdnmmpv\",\"error_url\":\"vfgukrxumwdqwy\",\"url\":\"awzele\",\"job_name\":\"nkqx\",\"trigger\":\"umhaeqboig\"},\"history_url\":\"xatwxiyarf\",\"scheduler_logs_url\":\"vsytidzvvnd\",\"run_command\":\"w\",\"url\":\"ex\",\"extra_info_url\":\"dhpkplaseylt\",\"web_job_type\":\"Triggered\",\"error\":\"fopekyzd\",\"using_sdk\":true,\"publicNetworkAccess\":\"oiddv\",\"storageAccountRequired\":false,\"settings\":{\"ylfutgbp\":\"datakvzpqrxsifixolv\",\"ltybwwmjr\":\"datapuayxtvpi\",\"rxeegiczr\":\"datamkjal\",\"zlcvndihkph\":\"datan\"}},\"kind\":\"gkk\",\"id\":\"cwmjmgswtwms\",\"name\":\"uqgneorqtrkxeikq\",\"type\":\"aagnzbkqqbjcdauc\"}],\"nextLink\":\"mzvgj\"}")
            .toObject(TriggeredWebJobCollection.class);
        Assertions.assertEquals("ubhtml", model.value().get(0).kind());
        Assertions.assertEquals("ompvyisc", model.value().get(0).latestRun().webJobId());
        Assertions.assertEquals("cuf", model.value().get(0).latestRun().webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.SUCCESS, model.value().get(0).latestRun().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T15:05:47Z"),
            model.value().get(0).latestRun().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-27T14:17:21Z"),
            model.value().get(0).latestRun().endTime());
        Assertions.assertEquals("jexq", model.value().get(0).latestRun().duration());
        Assertions.assertEquals("m", model.value().get(0).latestRun().outputUrl());
        Assertions.assertEquals("ridipw", model.value().get(0).latestRun().errorUrl());
        Assertions.assertEquals("jnn", model.value().get(0).latestRun().url());
        Assertions.assertEquals("ifjqhjenb", model.value().get(0).latestRun().jobName());
        Assertions.assertEquals("pfpllosadjffllr", model.value().get(0).latestRun().trigger());
        Assertions.assertEquals("g", model.value().get(0).historyUrl());
        Assertions.assertEquals("yeok", model.value().get(0).schedulerLogsUrl());
        Assertions.assertEquals("zuddccclsnflcxx", model.value().get(0).runCommand());
        Assertions.assertEquals("nypktgslkokqa", model.value().get(0).url());
        Assertions.assertEquals("zcojgdqjhzfecjg", model.value().get(0).extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.value().get(0).webJobType());
        Assertions.assertEquals("dkkgbvsqksrgk", model.value().get(0).error());
        Assertions.assertEquals(false, model.value().get(0).usingSdk());
        Assertions.assertEquals("nrhrqqiwfysujcv", model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).storageAccountRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggeredWebJobCollection model = new TriggeredWebJobCollection().withValue(Arrays.asList(
            new TriggeredWebJobInner().withKind("ubhtml")
                .withLatestRun(new TriggeredJobRun().withWebJobId("ompvyisc")
                    .withWebJobName("cuf")
                    .withStatus(TriggeredWebJobStatus.SUCCESS)
                    .withStartTime(OffsetDateTime.parse("2021-05-31T15:05:47Z"))
                    .withEndTime(OffsetDateTime.parse("2021-03-27T14:17:21Z"))
                    .withDuration("jexq")
                    .withOutputUrl("m")
                    .withErrorUrl("ridipw")
                    .withUrl("jnn")
                    .withJobName("ifjqhjenb")
                    .withTrigger("pfpllosadjffllr"))
                .withHistoryUrl("g")
                .withSchedulerLogsUrl("yeok")
                .withRunCommand("zuddccclsnflcxx")
                .withUrl("nypktgslkokqa")
                .withExtraInfoUrl("zcojgdqjhzfecjg")
                .withWebJobType(WebJobType.TRIGGERED)
                .withError("dkkgbvsqksrgk")
                .withUsingSdk(false)
                .withPublicNetworkAccess("nrhrqqiwfysujcv")
                .withStorageAccountRequired(true)
                .withSettings(mapOf("skbpcif", "dataexrxyrpwzsmwgeb", "cnfnyjwj", "datavtwu")),
            new TriggeredWebJobInner().withKind("gkk")
                .withLatestRun(new TriggeredJobRun().withWebJobId("zfhurrw")
                    .withWebJobName("wwitzmxxigl")
                    .withStatus(TriggeredWebJobStatus.SUCCESS)
                    .withStartTime(OffsetDateTime.parse("2021-12-05T22:03:07Z"))
                    .withEndTime(OffsetDateTime.parse("2021-07-27T00:30:35Z"))
                    .withDuration("yp")
                    .withOutputUrl("yhoemsdnmmpv")
                    .withErrorUrl("vfgukrxumwdqwy")
                    .withUrl("awzele")
                    .withJobName("nkqx")
                    .withTrigger("umhaeqboig"))
                .withHistoryUrl("xatwxiyarf")
                .withSchedulerLogsUrl("vsytidzvvnd")
                .withRunCommand("w")
                .withUrl("ex")
                .withExtraInfoUrl("dhpkplaseylt")
                .withWebJobType(WebJobType.TRIGGERED)
                .withError("fopekyzd")
                .withUsingSdk(true)
                .withPublicNetworkAccess("oiddv")
                .withStorageAccountRequired(false)
                .withSettings(mapOf("ylfutgbp", "datakvzpqrxsifixolv", "ltybwwmjr", "datapuayxtvpi", "rxeegiczr",
                    "datamkjal", "zlcvndihkph", "datan"))));
        model = BinaryData.fromObject(model).toObject(TriggeredWebJobCollection.class);
        Assertions.assertEquals("ubhtml", model.value().get(0).kind());
        Assertions.assertEquals("ompvyisc", model.value().get(0).latestRun().webJobId());
        Assertions.assertEquals("cuf", model.value().get(0).latestRun().webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.SUCCESS, model.value().get(0).latestRun().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T15:05:47Z"),
            model.value().get(0).latestRun().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-27T14:17:21Z"),
            model.value().get(0).latestRun().endTime());
        Assertions.assertEquals("jexq", model.value().get(0).latestRun().duration());
        Assertions.assertEquals("m", model.value().get(0).latestRun().outputUrl());
        Assertions.assertEquals("ridipw", model.value().get(0).latestRun().errorUrl());
        Assertions.assertEquals("jnn", model.value().get(0).latestRun().url());
        Assertions.assertEquals("ifjqhjenb", model.value().get(0).latestRun().jobName());
        Assertions.assertEquals("pfpllosadjffllr", model.value().get(0).latestRun().trigger());
        Assertions.assertEquals("g", model.value().get(0).historyUrl());
        Assertions.assertEquals("yeok", model.value().get(0).schedulerLogsUrl());
        Assertions.assertEquals("zuddccclsnflcxx", model.value().get(0).runCommand());
        Assertions.assertEquals("nypktgslkokqa", model.value().get(0).url());
        Assertions.assertEquals("zcojgdqjhzfecjg", model.value().get(0).extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.value().get(0).webJobType());
        Assertions.assertEquals("dkkgbvsqksrgk", model.value().get(0).error());
        Assertions.assertEquals(false, model.value().get(0).usingSdk());
        Assertions.assertEquals("nrhrqqiwfysujcv", model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(true, model.value().get(0).storageAccountRequired());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
