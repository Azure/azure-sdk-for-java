// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.ParameterType;
import com.azure.resourcemanager.appservice.generated.models.WorkflowState;
import com.azure.resourcemanager.appservice.generated.models.WorkflowVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkflowVersionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Running\",\"createdTime\":\"2021-02-03T18:51:14Z\",\"changedTime\":\"2021-04-23T14:47:06Z\",\"state\":\"NotSpecified\",\"version\":\"pcwpbtumttmixe\",\"accessEndpoint\":\"arb\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{},{}],\"accessEndpointIpAddresses\":[{},{},{}]},\"connector\":{\"outgoingIpAddresses\":[{},{},{},{}],\"accessEndpointIpAddresses\":[{},{},{},{}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"ggnldflgqsoi\":{}}}},\"contents\":{\"allowedCallerIpAddresses\":[{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"uklepetsxe\":{},\"neherqbelmsx\":{},\"xhkzcdni\":{}}}},\"actions\":{\"allowedCallerIpAddresses\":[{}],\"openAuthenticationPolicies\":{\"policies\":{\"vgydtdtomknzotm\":{}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{},{},{},{}],\"openAuthenticationPolicies\":{\"policies\":{\"oaskflrqwfmbkksh\":{},\"rzvnouthbvvcb\":{},\"udiyfix\":{},\"w\":{}}}}},\"sku\":{\"name\":\"Premium\",\"plan\":{\"id\":\"qzqcmrxhalo\",\"name\":\"z\",\"type\":\"ijcetcystrs\"}},\"integrationAccount\":{\"id\":\"txspaafseqoyo\",\"name\":\"lrqtqnx\",\"type\":\"lgt\"},\"definition\":\"datae\",\"parameters\":{\"eobkmx\":{\"type\":\"Object\",\"value\":\"datapbfjbsol\",\"metadata\":\"datakykjzbxmgsxb\",\"description\":\"kambdoq\"},\"fyymbtiugcaas\":{\"type\":\"Array\",\"value\":\"databjhyldxnw\",\"metadata\":\"datajczikfx\",\"description\":\"qwnkj\"},\"yovwtpm\":{\"type\":\"NotSpecified\",\"value\":\"dataofhu\",\"metadata\":\"dataokrkibnonuoc\",\"description\":\"tyjaxk\"},\"osixterpbjkh\":{\"type\":\"NotSpecified\",\"value\":\"datanmzsvdrryzxh\",\"metadata\":\"dataythpy\",\"description\":\"mfvqvyzacjxcz\"}}},\"location\":\"mmkmezlhmtrq\",\"tags\":{\"iwxwwpitwlel\":\"scaynhzm\",\"txfzhvxqotwcfbqz\":\"qqlpphotbsgkliu\"},\"id\":\"zchpjh\",\"name\":\"hyxxftrfwmxwjc\",\"type\":\"xqkm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkflowVersion> response = manager.workflowVersions()
            .list("ebpvhdk", "dqcgedipnnzmvt", "ttjmdtfuwx", 367830009, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mmkmezlhmtrq", response.iterator().next().location());
        Assertions.assertEquals("scaynhzm", response.iterator().next().tags().get("iwxwwpitwlel"));
        Assertions.assertEquals(WorkflowState.NOT_SPECIFIED, response.iterator().next().state());
        Assertions.assertEquals("txspaafseqoyo", response.iterator().next().integrationAccount().id());
        Assertions.assertEquals(ParameterType.OBJECT, response.iterator().next().parameters().get("eobkmx").type());
        Assertions.assertEquals("kambdoq", response.iterator().next().parameters().get("eobkmx").description());
    }
}
