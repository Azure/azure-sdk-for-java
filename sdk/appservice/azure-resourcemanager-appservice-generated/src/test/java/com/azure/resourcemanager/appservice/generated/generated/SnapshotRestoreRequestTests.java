// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.SnapshotRecoverySource;
import com.azure.resourcemanager.appservice.generated.models.SnapshotRestoreRequest;
import org.junit.jupiter.api.Assertions;

public final class SnapshotRestoreRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SnapshotRestoreRequest model = BinaryData.fromString(
            "{\"properties\":{\"snapshotTime\":\"mriyzyvquesxp\",\"recoverySource\":{\"location\":\"inb\",\"id\":\"olxxhcynnmva\"},\"overwrite\":false,\"recoverConfiguration\":true,\"ignoreConflictingHostNames\":false,\"useDRSecondary\":true},\"kind\":\"cidsjqcqyzmrtfd\",\"id\":\"gpryyjli\",\"name\":\"albcyuwahwzagvai\",\"type\":\"zcephnhnu\"}")
            .toObject(SnapshotRestoreRequest.class);
        Assertions.assertEquals("cidsjqcqyzmrtfd", model.kind());
        Assertions.assertEquals("mriyzyvquesxp", model.snapshotTime());
        Assertions.assertEquals("inb", model.recoverySource().location());
        Assertions.assertEquals("olxxhcynnmva", model.recoverySource().id());
        Assertions.assertEquals(false, model.overwrite());
        Assertions.assertEquals(true, model.recoverConfiguration());
        Assertions.assertEquals(false, model.ignoreConflictingHostNames());
        Assertions.assertEquals(true, model.useDRSecondary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SnapshotRestoreRequest model = new SnapshotRestoreRequest().withKind("cidsjqcqyzmrtfd")
            .withSnapshotTime("mriyzyvquesxp")
            .withRecoverySource(new SnapshotRecoverySource().withLocation("inb").withId("olxxhcynnmva"))
            .withOverwrite(false)
            .withRecoverConfiguration(true)
            .withIgnoreConflictingHostNames(false)
            .withUseDRSecondary(true);
        model = BinaryData.fromObject(model).toObject(SnapshotRestoreRequest.class);
        Assertions.assertEquals("cidsjqcqyzmrtfd", model.kind());
        Assertions.assertEquals("mriyzyvquesxp", model.snapshotTime());
        Assertions.assertEquals("inb", model.recoverySource().location());
        Assertions.assertEquals("olxxhcynnmva", model.recoverySource().id());
        Assertions.assertEquals(false, model.overwrite());
        Assertions.assertEquals(true, model.recoverConfiguration());
        Assertions.assertEquals(false, model.ignoreConflictingHostNames());
        Assertions.assertEquals(true, model.useDRSecondary());
    }
}
