// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.AppServicePlan;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AppServicePlansListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"workerTierName\":\"nqtxlkioviklx\",\"status\":\"Creating\",\"subscription\":\"unsatcistdb\",\"hostingEnvironmentProfile\":{\"id\":\"buajkodpzqtg\",\"name\":\"zwx\",\"type\":\"aask\"},\"maximumNumberOfWorkers\":1278742376,\"numberOfWorkers\":1865110151,\"geoRegion\":\"hzucdljqj\",\"perSiteScaling\":true,\"elasticScaleEnabled\":false,\"maximumElasticWorkerCount\":911318452,\"numberOfSites\":1425592673,\"isSpot\":true,\"spotExpirationTime\":\"2021-10-17T13:11:45Z\",\"freeOfferExpirationTime\":\"2021-08-10T05:14:31Z\",\"resourceGroup\":\"ndkjphvhhxivshju\",\"reserved\":false,\"isXenon\":true,\"hyperV\":true,\"targetWorkerCount\":373442651,\"targetWorkerSizeId\":635838245,\"provisioningState\":\"Deleting\",\"kubeEnvironmentProfile\":{\"id\":\"jjticly\",\"name\":\"duxbungmpn\",\"type\":\"tgucdfxglrcj\"},\"zoneRedundant\":false},\"sku\":{\"name\":\"zyzjc\",\"tier\":\"za\",\"size\":\"oyrqjo\",\"family\":\"lnyhzes\",\"capacity\":557499191,\"skuCapacity\":{\"minimum\":352743634,\"maximum\":1072298325,\"elasticMaximum\":734663708,\"default\":1406498711,\"scaleType\":\"nepp\"},\"locations\":[\"zeufj\",\"qaqeqcbygqcwzy\",\"omnqcthgqy\"],\"capabilities\":[{\"name\":\"zfkykk\",\"value\":\"afnvjgixsj\",\"reason\":\"npyekslllzs\"}]},\"extendedLocation\":{\"name\":\"ckwhgnfbnnhwpnlo\",\"type\":\"xzdohfvxavhfhl\"},\"kind\":\"wwzpbamcfrf\",\"location\":\"ytcygoombnrmb\",\"tags\":{\"zxdzold\":\"fpemgfvvnkpwlt\",\"uzaregesoozpu\":\"vfnpnyaterj\"},\"id\":\"aluggd\",\"name\":\"dttgekecul\",\"type\":\"v\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AppServicePlan> response
            = manager.appServicePlans().list(false, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ytcygoombnrmb", response.iterator().next().location());
        Assertions.assertEquals("fpemgfvvnkpwlt", response.iterator().next().tags().get("zxdzold"));
        Assertions.assertEquals("zyzjc", response.iterator().next().sku().name());
        Assertions.assertEquals("za", response.iterator().next().sku().tier());
        Assertions.assertEquals("oyrqjo", response.iterator().next().sku().size());
        Assertions.assertEquals("lnyhzes", response.iterator().next().sku().family());
        Assertions.assertEquals(557499191, response.iterator().next().sku().capacity());
        Assertions.assertEquals(352743634, response.iterator().next().sku().skuCapacity().minimum());
        Assertions.assertEquals(1072298325, response.iterator().next().sku().skuCapacity().maximum());
        Assertions.assertEquals(734663708, response.iterator().next().sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(1406498711, response.iterator().next().sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("nepp", response.iterator().next().sku().skuCapacity().scaleType());
        Assertions.assertEquals("zeufj", response.iterator().next().sku().locations().get(0));
        Assertions.assertEquals("zfkykk", response.iterator().next().sku().capabilities().get(0).name());
        Assertions.assertEquals("afnvjgixsj", response.iterator().next().sku().capabilities().get(0).value());
        Assertions.assertEquals("npyekslllzs", response.iterator().next().sku().capabilities().get(0).reason());
        Assertions.assertEquals("ckwhgnfbnnhwpnlo", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("wwzpbamcfrf", response.iterator().next().kind());
        Assertions.assertEquals("nqtxlkioviklx", response.iterator().next().workerTierName());
        Assertions.assertEquals("buajkodpzqtg", response.iterator().next().hostingEnvironmentProfile().id());
        Assertions.assertEquals(true, response.iterator().next().perSiteScaling());
        Assertions.assertEquals(false, response.iterator().next().elasticScaleEnabled());
        Assertions.assertEquals(911318452, response.iterator().next().maximumElasticWorkerCount());
        Assertions.assertEquals(true, response.iterator().next().isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T13:11:45Z"),
            response.iterator().next().spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-10T05:14:31Z"),
            response.iterator().next().freeOfferExpirationTime());
        Assertions.assertEquals(false, response.iterator().next().reserved());
        Assertions.assertEquals(true, response.iterator().next().isXenon());
        Assertions.assertEquals(true, response.iterator().next().hyperV());
        Assertions.assertEquals(373442651, response.iterator().next().targetWorkerCount());
        Assertions.assertEquals(635838245, response.iterator().next().targetWorkerSizeId());
        Assertions.assertEquals("jjticly", response.iterator().next().kubeEnvironmentProfile().id());
        Assertions.assertEquals(false, response.iterator().next().zoneRedundant());
    }
}
