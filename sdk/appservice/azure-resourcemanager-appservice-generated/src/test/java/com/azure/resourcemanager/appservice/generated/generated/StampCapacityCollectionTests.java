// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.StampCapacityInner;
import com.azure.resourcemanager.appservice.generated.models.ComputeModeOptions;
import com.azure.resourcemanager.appservice.generated.models.StampCapacityCollection;
import com.azure.resourcemanager.appservice.generated.models.WorkerSizeOptions;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class StampCapacityCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StampCapacityCollection model = BinaryData.fromString(
            "{\"value\":[{\"name\":\"jwmwkpnbs\",\"availableCapacity\":7475026912824042888,\"totalCapacity\":5448745481229007840,\"unit\":\"agfhsxtta\",\"computeMode\":\"Dynamic\",\"workerSize\":\"Default\",\"workerSizeId\":288495023,\"excludeFromCapacityAllocation\":false,\"isApplicableForAllComputeModes\":true,\"siteMode\":\"tnkdmkqj\",\"isLinux\":false},{\"name\":\"envrkpyouaibrebq\",\"availableCapacity\":5925123443522573300,\"totalCapacity\":888839059192362297,\"unit\":\"qtnqtt\",\"computeMode\":\"Dynamic\",\"workerSize\":\"D2\",\"workerSizeId\":379272698,\"excludeFromCapacityAllocation\":true,\"isApplicableForAllComputeModes\":true,\"siteMode\":\"pqqmted\",\"isLinux\":false}],\"nextLink\":\"jihy\"}")
            .toObject(StampCapacityCollection.class);
        Assertions.assertEquals("jwmwkpnbs", model.value().get(0).name());
        Assertions.assertEquals(7475026912824042888L, model.value().get(0).availableCapacity());
        Assertions.assertEquals(5448745481229007840L, model.value().get(0).totalCapacity());
        Assertions.assertEquals("agfhsxtta", model.value().get(0).unit());
        Assertions.assertEquals(ComputeModeOptions.DYNAMIC, model.value().get(0).computeMode());
        Assertions.assertEquals(WorkerSizeOptions.DEFAULT, model.value().get(0).workerSize());
        Assertions.assertEquals(288495023, model.value().get(0).workerSizeId());
        Assertions.assertEquals(false, model.value().get(0).excludeFromCapacityAllocation());
        Assertions.assertEquals(true, model.value().get(0).isApplicableForAllComputeModes());
        Assertions.assertEquals("tnkdmkqj", model.value().get(0).siteMode());
        Assertions.assertEquals(false, model.value().get(0).isLinux());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StampCapacityCollection model = new StampCapacityCollection().withValue(Arrays.asList(
            new StampCapacityInner().withName("jwmwkpnbs")
                .withAvailableCapacity(7475026912824042888L)
                .withTotalCapacity(5448745481229007840L)
                .withUnit("agfhsxtta")
                .withComputeMode(ComputeModeOptions.DYNAMIC)
                .withWorkerSize(WorkerSizeOptions.DEFAULT)
                .withWorkerSizeId(288495023)
                .withExcludeFromCapacityAllocation(false)
                .withIsApplicableForAllComputeModes(true)
                .withSiteMode("tnkdmkqj")
                .withIsLinux(false),
            new StampCapacityInner().withName("envrkpyouaibrebq")
                .withAvailableCapacity(5925123443522573300L)
                .withTotalCapacity(888839059192362297L)
                .withUnit("qtnqtt")
                .withComputeMode(ComputeModeOptions.DYNAMIC)
                .withWorkerSize(WorkerSizeOptions.D2)
                .withWorkerSizeId(379272698)
                .withExcludeFromCapacityAllocation(true)
                .withIsApplicableForAllComputeModes(true)
                .withSiteMode("pqqmted")
                .withIsLinux(false)));
        model = BinaryData.fromObject(model).toObject(StampCapacityCollection.class);
        Assertions.assertEquals("jwmwkpnbs", model.value().get(0).name());
        Assertions.assertEquals(7475026912824042888L, model.value().get(0).availableCapacity());
        Assertions.assertEquals(5448745481229007840L, model.value().get(0).totalCapacity());
        Assertions.assertEquals("agfhsxtta", model.value().get(0).unit());
        Assertions.assertEquals(ComputeModeOptions.DYNAMIC, model.value().get(0).computeMode());
        Assertions.assertEquals(WorkerSizeOptions.DEFAULT, model.value().get(0).workerSize());
        Assertions.assertEquals(288495023, model.value().get(0).workerSizeId());
        Assertions.assertEquals(false, model.value().get(0).excludeFromCapacityAllocation());
        Assertions.assertEquals(true, model.value().get(0).isApplicableForAllComputeModes());
        Assertions.assertEquals("tnkdmkqj", model.value().get(0).siteMode());
        Assertions.assertEquals(false, model.value().get(0).isLinux());
    }
}
