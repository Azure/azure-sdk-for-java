// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.RecommendationInner;
import com.azure.resourcemanager.appservice.generated.models.Channels;
import com.azure.resourcemanager.appservice.generated.models.NotificationLevel;
import com.azure.resourcemanager.appservice.generated.models.RecommendationCollection;
import com.azure.resourcemanager.appservice.generated.models.ResourceScopeType;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class RecommendationCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecommendationCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"creationTime\":\"2021-01-05T16:35:25Z\",\"recommendationId\":\"32e237d8-17d3-46e7-b922-98fa9ed0f639\",\"resourceId\":\"pqsdoc\",\"resourceScope\":\"Subscription\",\"ruleName\":\"ujzflmcd\",\"displayName\":\"xcelujiswlluunx\",\"message\":\"wlfxzfw\",\"level\":\"NonUrgentSuggestion\",\"channels\":\"Api\",\"categoryTags\":[\"necexkgrvfps\",\"d\",\"ngsy\"],\"actionName\":\"pdz\",\"enabled\":654401693,\"states\":[\"wawoxcgzbejqf\"],\"startTime\":\"2021-11-26T18:51:28Z\",\"endTime\":\"2021-03-23T15:39:52Z\",\"nextNotificationTime\":\"2021-03-18T21:05:27Z\",\"notificationExpirationTime\":\"2021-09-09T04:54:57Z\",\"notifiedTime\":\"2021-11-25T02:53:28Z\",\"score\":15.635918178188291,\"isDynamic\":false,\"extensionName\":\"krfmbwotfcuuu\",\"bladeName\":\"jigpgayiawohfmh\",\"forwardLink\":\"zmecjjkmqenhai\"},\"kind\":\"rpvsgloiovs\",\"id\":\"vivqsuvwtenbg\",\"name\":\"i\",\"type\":\"pkhc\"},{\"properties\":{\"creationTime\":\"2020-12-21T13:13:06Z\",\"recommendationId\":\"44aafe5b-442c-4049-9e02-2153dfcab31d\",\"resourceId\":\"kui\",\"resourceScope\":\"WebSite\",\"ruleName\":\"teki\",\"displayName\":\"anduew\",\"message\":\"vpxjhxzubfj\",\"level\":\"NonUrgentSuggestion\",\"channels\":\"Email\",\"categoryTags\":[\"vzuaixc\",\"ckixsps\"],\"actionName\":\"gavkmv\",\"enabled\":1473210954,\"states\":[\"ejrk\",\"zjbyetjxryopta\",\"itwhlbecgihz\"],\"startTime\":\"2021-09-21T19:04:55Z\",\"endTime\":\"2021-01-05T02:15:24Z\",\"nextNotificationTime\":\"2021-12-06T10:07:11Z\",\"notificationExpirationTime\":\"2021-03-31T18:32:18Z\",\"notifiedTime\":\"2021-04-08T10:54:26Z\",\"score\":93.72435947155641,\"isDynamic\":false,\"extensionName\":\"pjhspb\",\"bladeName\":\"hifppskpeswyhhm\",\"forwardLink\":\"juajxwwvcmmp\"},\"kind\":\"lyuqvcmlaexb\",\"id\":\"bqufpnezsjzayml\",\"name\":\"rorh\",\"type\":\"ogzmsimehtcuuwdh\"}],\"nextLink\":\"qhyhni\"}")
            .toObject(RecommendationCollection.class);
        Assertions.assertEquals("rpvsgloiovs", model.value().get(0).kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T16:35:25Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(UUID.fromString("32e237d8-17d3-46e7-b922-98fa9ed0f639"),
            model.value().get(0).recommendationId());
        Assertions.assertEquals("pqsdoc", model.value().get(0).resourceId());
        Assertions.assertEquals(ResourceScopeType.SUBSCRIPTION, model.value().get(0).resourceScope());
        Assertions.assertEquals("ujzflmcd", model.value().get(0).ruleName());
        Assertions.assertEquals("xcelujiswlluunx", model.value().get(0).displayName());
        Assertions.assertEquals("wlfxzfw", model.value().get(0).message());
        Assertions.assertEquals(NotificationLevel.NON_URGENT_SUGGESTION, model.value().get(0).level());
        Assertions.assertEquals(Channels.API, model.value().get(0).channels());
        Assertions.assertEquals("pdz", model.value().get(0).actionName());
        Assertions.assertEquals(654401693, model.value().get(0).enabled());
        Assertions.assertEquals("wawoxcgzbejqf", model.value().get(0).states().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T18:51:28Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T15:39:52Z"), model.value().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-18T21:05:27Z"),
            model.value().get(0).nextNotificationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T04:54:57Z"),
            model.value().get(0).notificationExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T02:53:28Z"), model.value().get(0).notifiedTime());
        Assertions.assertEquals(15.635918178188291D, model.value().get(0).score());
        Assertions.assertEquals(false, model.value().get(0).isDynamic());
        Assertions.assertEquals("krfmbwotfcuuu", model.value().get(0).extensionName());
        Assertions.assertEquals("jigpgayiawohfmh", model.value().get(0).bladeName());
        Assertions.assertEquals("zmecjjkmqenhai", model.value().get(0).forwardLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecommendationCollection model = new RecommendationCollection().withValue(Arrays.asList(
            new RecommendationInner().withKind("rpvsgloiovs")
                .withCreationTime(OffsetDateTime.parse("2021-01-05T16:35:25Z"))
                .withRecommendationId(UUID.fromString("32e237d8-17d3-46e7-b922-98fa9ed0f639"))
                .withResourceId("pqsdoc")
                .withResourceScope(ResourceScopeType.SUBSCRIPTION)
                .withRuleName("ujzflmcd")
                .withDisplayName("xcelujiswlluunx")
                .withMessage("wlfxzfw")
                .withLevel(NotificationLevel.NON_URGENT_SUGGESTION)
                .withChannels(Channels.API)
                .withActionName("pdz")
                .withEnabled(654401693)
                .withStates(Arrays.asList("wawoxcgzbejqf"))
                .withStartTime(OffsetDateTime.parse("2021-11-26T18:51:28Z"))
                .withEndTime(OffsetDateTime.parse("2021-03-23T15:39:52Z"))
                .withNextNotificationTime(OffsetDateTime.parse("2021-03-18T21:05:27Z"))
                .withNotificationExpirationTime(OffsetDateTime.parse("2021-09-09T04:54:57Z"))
                .withNotifiedTime(OffsetDateTime.parse("2021-11-25T02:53:28Z"))
                .withScore(15.635918178188291D)
                .withIsDynamic(false)
                .withExtensionName("krfmbwotfcuuu")
                .withBladeName("jigpgayiawohfmh")
                .withForwardLink("zmecjjkmqenhai"),
            new RecommendationInner().withKind("lyuqvcmlaexb")
                .withCreationTime(OffsetDateTime.parse("2020-12-21T13:13:06Z"))
                .withRecommendationId(UUID.fromString("44aafe5b-442c-4049-9e02-2153dfcab31d"))
                .withResourceId("kui")
                .withResourceScope(ResourceScopeType.WEB_SITE)
                .withRuleName("teki")
                .withDisplayName("anduew")
                .withMessage("vpxjhxzubfj")
                .withLevel(NotificationLevel.NON_URGENT_SUGGESTION)
                .withChannels(Channels.EMAIL)
                .withActionName("gavkmv")
                .withEnabled(1473210954)
                .withStates(Arrays.asList("ejrk", "zjbyetjxryopta", "itwhlbecgihz"))
                .withStartTime(OffsetDateTime.parse("2021-09-21T19:04:55Z"))
                .withEndTime(OffsetDateTime.parse("2021-01-05T02:15:24Z"))
                .withNextNotificationTime(OffsetDateTime.parse("2021-12-06T10:07:11Z"))
                .withNotificationExpirationTime(OffsetDateTime.parse("2021-03-31T18:32:18Z"))
                .withNotifiedTime(OffsetDateTime.parse("2021-04-08T10:54:26Z"))
                .withScore(93.72435947155641D)
                .withIsDynamic(false)
                .withExtensionName("pjhspb")
                .withBladeName("hifppskpeswyhhm")
                .withForwardLink("juajxwwvcmmp")));
        model = BinaryData.fromObject(model).toObject(RecommendationCollection.class);
        Assertions.assertEquals("rpvsgloiovs", model.value().get(0).kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T16:35:25Z"), model.value().get(0).creationTime());
        Assertions.assertEquals(UUID.fromString("32e237d8-17d3-46e7-b922-98fa9ed0f639"),
            model.value().get(0).recommendationId());
        Assertions.assertEquals("pqsdoc", model.value().get(0).resourceId());
        Assertions.assertEquals(ResourceScopeType.SUBSCRIPTION, model.value().get(0).resourceScope());
        Assertions.assertEquals("ujzflmcd", model.value().get(0).ruleName());
        Assertions.assertEquals("xcelujiswlluunx", model.value().get(0).displayName());
        Assertions.assertEquals("wlfxzfw", model.value().get(0).message());
        Assertions.assertEquals(NotificationLevel.NON_URGENT_SUGGESTION, model.value().get(0).level());
        Assertions.assertEquals(Channels.API, model.value().get(0).channels());
        Assertions.assertEquals("pdz", model.value().get(0).actionName());
        Assertions.assertEquals(654401693, model.value().get(0).enabled());
        Assertions.assertEquals("wawoxcgzbejqf", model.value().get(0).states().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-26T18:51:28Z"), model.value().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-23T15:39:52Z"), model.value().get(0).endTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-18T21:05:27Z"),
            model.value().get(0).nextNotificationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-09T04:54:57Z"),
            model.value().get(0).notificationExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-25T02:53:28Z"), model.value().get(0).notifiedTime());
        Assertions.assertEquals(15.635918178188291D, model.value().get(0).score());
        Assertions.assertEquals(false, model.value().get(0).isDynamic());
        Assertions.assertEquals("krfmbwotfcuuu", model.value().get(0).extensionName());
        Assertions.assertEquals("jigpgayiawohfmh", model.value().get(0).bladeName());
        Assertions.assertEquals("zmecjjkmqenhai", model.value().get(0).forwardLink());
    }
}
