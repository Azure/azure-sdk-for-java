// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.RemotePrivateEndpointConnectionArmResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StaticSitesGetPrivateEndpointConnectionWithResponseMockTests {
    @Test
    public void testGetPrivateEndpointConnectionWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"wwfgjjca\",\"privateEndpoint\":{\"id\":\"e\"},\"privateLinkServiceConnectionState\":{\"status\":\"wilyxpq\",\"description\":\"lifhjym\",\"actionsRequired\":\"jliivyatyzwy\"},\"ipAddresses\":[\"ycjphozymcyp\",\"buo\",\"nktlzngidgwsc\",\"smhgzapc\"]},\"kind\":\"k\",\"id\":\"yavfc\",\"name\":\"ohlfvsbaqdgzbjb\",\"type\":\"youdc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RemotePrivateEndpointConnectionArmResource response = manager.staticSites()
            .getPrivateEndpointConnectionWithResponse("j", "ajvskpbu", "cecukzt", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("k", response.kind());
        Assertions.assertEquals("wilyxpq", response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("lifhjym", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("jliivyatyzwy", response.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("ycjphozymcyp", response.ipAddresses().get(0));
    }
}
