// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.TriggeredJobRun;
import com.azure.resourcemanager.appservice.generated.models.TriggeredWebJobStatus;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class TriggeredJobRunTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggeredJobRun model = BinaryData.fromString(
            "{\"web_job_id\":\"ujkqaxbejhxope\",\"web_job_name\":\"lysy\",\"status\":\"Error\",\"start_time\":\"2021-07-27T12:38:44Z\",\"end_time\":\"2021-05-26T19:02:17Z\",\"duration\":\"ibjjwuekhh\",\"output_url\":\"hxhuhhnrmmfzfkh\",\"error_url\":\"zjf\",\"url\":\"jhtvbskgciedlqv\",\"job_name\":\"trlsmsr\",\"trigger\":\"fgb\"}")
            .toObject(TriggeredJobRun.class);
        Assertions.assertEquals("ujkqaxbejhxope", model.webJobId());
        Assertions.assertEquals("lysy", model.webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.ERROR, model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T12:38:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-26T19:02:17Z"), model.endTime());
        Assertions.assertEquals("ibjjwuekhh", model.duration());
        Assertions.assertEquals("hxhuhhnrmmfzfkh", model.outputUrl());
        Assertions.assertEquals("zjf", model.errorUrl());
        Assertions.assertEquals("jhtvbskgciedlqv", model.url());
        Assertions.assertEquals("trlsmsr", model.jobName());
        Assertions.assertEquals("fgb", model.trigger());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggeredJobRun model = new TriggeredJobRun().withWebJobId("ujkqaxbejhxope")
            .withWebJobName("lysy")
            .withStatus(TriggeredWebJobStatus.ERROR)
            .withStartTime(OffsetDateTime.parse("2021-07-27T12:38:44Z"))
            .withEndTime(OffsetDateTime.parse("2021-05-26T19:02:17Z"))
            .withDuration("ibjjwuekhh")
            .withOutputUrl("hxhuhhnrmmfzfkh")
            .withErrorUrl("zjf")
            .withUrl("jhtvbskgciedlqv")
            .withJobName("trlsmsr")
            .withTrigger("fgb");
        model = BinaryData.fromObject(model).toObject(TriggeredJobRun.class);
        Assertions.assertEquals("ujkqaxbejhxope", model.webJobId());
        Assertions.assertEquals("lysy", model.webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.ERROR, model.status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-27T12:38:44Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-26T19:02:17Z"), model.endTime());
        Assertions.assertEquals("ibjjwuekhh", model.duration());
        Assertions.assertEquals("hxhuhhnrmmfzfkh", model.outputUrl());
        Assertions.assertEquals("zjf", model.errorUrl());
        Assertions.assertEquals("jhtvbskgciedlqv", model.url());
        Assertions.assertEquals("trlsmsr", model.jobName());
        Assertions.assertEquals("fgb", model.trigger());
    }
}
