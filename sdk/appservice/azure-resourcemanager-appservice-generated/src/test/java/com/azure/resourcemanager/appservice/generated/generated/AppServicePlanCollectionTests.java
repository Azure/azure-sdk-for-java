// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.AppServicePlanInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.CapabilityInner;
import com.azure.resourcemanager.appservice.generated.models.AppServicePlanCollection;
import com.azure.resourcemanager.appservice.generated.models.ExtendedLocation;
import com.azure.resourcemanager.appservice.generated.models.HostingEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.KubeEnvironmentProfile;
import com.azure.resourcemanager.appservice.generated.models.SkuCapacity;
import com.azure.resourcemanager.appservice.generated.models.SkuDescription;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AppServicePlanCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AppServicePlanCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"workerTierName\":\"rqctmxxdtdd\",\"status\":\"Ready\",\"subscription\":\"uytxzvtznapxban\",\"hostingEnvironmentProfile\":{\"id\":\"voxczytpr\",\"name\":\"wvroevytlyokrrr\",\"type\":\"uxvnsasbcrymodi\"},\"maximumNumberOfWorkers\":683265058,\"numberOfWorkers\":1835764964,\"geoRegion\":\"bdxnaz\",\"perSiteScaling\":false,\"elasticScaleEnabled\":false,\"maximumElasticWorkerCount\":1481067716,\"numberOfSites\":2064585856,\"isSpot\":true,\"spotExpirationTime\":\"2021-07-13T20:29:03Z\",\"freeOfferExpirationTime\":\"2021-01-31T11:09:27Z\",\"resourceGroup\":\"bzxliohrdddtfgxq\",\"reserved\":true,\"isXenon\":false,\"hyperV\":true,\"targetWorkerCount\":2068748786,\"targetWorkerSizeId\":1409471968,\"provisioningState\":\"Failed\",\"kubeEnvironmentProfile\":{\"id\":\"p\",\"name\":\"fyuicdh\",\"type\":\"dyb\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"vibidmhmwffpl\",\"tier\":\"u\",\"size\":\"pckc\",\"family\":\"rv\",\"capacity\":1204308465,\"skuCapacity\":{\"minimum\":429676827,\"maximum\":1601507048,\"elasticMaximum\":64161749,\"default\":919572814,\"scaleType\":\"immoiroqboshbrag\"},\"locations\":[\"yrmfsvbpav\",\"opfppdbwnupgah\",\"kuma\"],\"capabilities\":[{\"name\":\"acfdmmcpugme\",\"value\":\"epvufhbzehew\",\"reason\":\"qhnlbqnbld\"}]},\"extendedLocation\":{\"name\":\"clgsc\",\"type\":\"ri\"},\"kind\":\"rsrrmoucsofldp\",\"location\":\"viyfcaabeolhbhlv\",\"tags\":{\"fbsfarfsiow\":\"uqibsxtkcu\",\"kizmdksaoafclu\":\"kjxnqpvwgfstmhq\",\"xmycjimryvwgcw\":\"v\",\"w\":\"pbmz\"},\"id\":\"sydsxwefohe\",\"name\":\"bvopwndyqle\",\"type\":\"llklmtk\"},{\"properties\":{\"workerTierName\":\"wkxxpvbrdfjmzs\",\"status\":\"Creating\",\"subscription\":\"otl\",\"hostingEnvironmentProfile\":{\"id\":\"cyychunsjlp\",\"name\":\"twszhvvuic\",\"type\":\"vtrrmhwrbfdpyflu\"},\"maximumNumberOfWorkers\":2023214586,\"numberOfWorkers\":1739999630,\"geoRegion\":\"r\",\"perSiteScaling\":false,\"elasticScaleEnabled\":true,\"maximumElasticWorkerCount\":392377022,\"numberOfSites\":939893099,\"isSpot\":true,\"spotExpirationTime\":\"2021-03-13T04:29:52Z\",\"freeOfferExpirationTime\":\"2021-04-03T06:57:18Z\",\"resourceGroup\":\"lutnpqme\",\"reserved\":true,\"isXenon\":true,\"hyperV\":true,\"targetWorkerCount\":1208891136,\"targetWorkerSizeId\":171178668,\"provisioningState\":\"Canceled\",\"kubeEnvironmentProfile\":{\"id\":\"lhsrrry\",\"name\":\"ylmbkzudni\",\"type\":\"fihotj\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"uzzjgnrefq\",\"tier\":\"qotoihiqakydiwfb\",\"size\":\"wpzdqtvhcspo\",\"family\":\"qaxsipietgbebjf\",\"capacity\":1700868959,\"skuCapacity\":{\"minimum\":1731116741,\"maximum\":239290276,\"elasticMaximum\":796050147,\"default\":816539003,\"scaleType\":\"pubntnbatz\"},\"locations\":[\"sowsaael\"],\"capabilities\":[{\"name\":\"cjuhplrvkm\",\"value\":\"wmj\",\"reason\":\"gfggcvkyylizrzbj\"},{\"name\":\"fxsfuztlvtmv\",\"value\":\"bwidql\",\"reason\":\"ukoveofi\"},{\"name\":\"vjfn\",\"value\":\"mvl\",\"reason\":\"z\"},{\"name\":\"blkujrllfojuidjp\",\"value\":\"yjucejikzoeo\",\"reason\":\"tzejetjklnt\"}]},\"extendedLocation\":{\"name\":\"juzkdbqz\",\"type\":\"xrzvhqjwtrhtgvgz\"},\"kind\":\"rrkolawjmjs\",\"location\":\"wro\",\"tags\":{\"nuchlgmltxdwhmo\":\"xfzzzwyjafitlhgu\",\"zvlnsnnjz\":\"us\",\"mwamxqzragpgdph\":\"pafolp\"},\"id\":\"vdulajv\",\"name\":\"ejchcsrlz\",\"type\":\"nmzlanru\"},{\"properties\":{\"workerTierName\":\"vnphc\",\"status\":\"Creating\",\"subscription\":\"pjhmqrhvthl\",\"hostingEnvironmentProfile\":{\"id\":\"dcxsmlz\",\"name\":\"zdtxetlgyd\",\"type\":\"qvlnnpxybafiqgea\"},\"maximumNumberOfWorkers\":755954714,\"numberOfWorkers\":1031040752,\"geoRegion\":\"kglklbyulidwcw\",\"perSiteScaling\":true,\"elasticScaleEnabled\":false,\"maximumElasticWorkerCount\":58455610,\"numberOfSites\":1755181535,\"isSpot\":true,\"spotExpirationTime\":\"2021-09-01T17:18:48Z\",\"freeOfferExpirationTime\":\"2020-12-22T02:11:50Z\",\"resourceGroup\":\"n\",\"reserved\":false,\"isXenon\":true,\"hyperV\":true,\"targetWorkerCount\":443740602,\"targetWorkerSizeId\":1909235238,\"provisioningState\":\"Canceled\",\"kubeEnvironmentProfile\":{\"id\":\"jcitdigsxcdglj\",\"name\":\"keuachtomf\",\"type\":\"ytswfp\"},\"zoneRedundant\":true},\"sku\":{\"name\":\"cxnmskwhqjjyslu\",\"tier\":\"pshhkvpedwqslsr\",\"size\":\"pq\",\"family\":\"wskondcbrwimuvqe\",\"capacity\":410887908,\"skuCapacity\":{\"minimum\":1299562334,\"maximum\":1468589859,\"elasticMaximum\":1580631075,\"default\":584168937,\"scaleType\":\"inuqtljq\"},\"locations\":[\"pihehce\",\"ybmrqbrjbbmp\",\"dlvykfrex\",\"rseqwjksghudgz\"],\"capabilities\":[{\"name\":\"jggsvo\",\"value\":\"kxibdafh\",\"reason\":\"mdyomkxfbvfbh\"},{\"name\":\"i\",\"value\":\"pwpgddei\",\"reason\":\"wzovgk\"},{\"name\":\"muikjcjcaztbws\",\"value\":\"qowxwcom\",\"reason\":\"kytwvcz\"},{\"name\":\"wka\",\"value\":\"ejyfdvlvhbwrnfx\",\"reason\":\"ddpqt\"}]},\"extendedLocation\":{\"name\":\"n\",\"type\":\"aoyankcoeqswa\"},\"kind\":\"ltytmhdr\",\"location\":\"znnhd\",\"tags\":{\"ywaeeczgf\":\"tgjcsgguxheml\"},\"id\":\"ukklelss\",\"name\":\"blycsxzujksr\",\"type\":\"smdesqplpvmjcd\"}],\"nextLink\":\"wb\"}")
            .toObject(AppServicePlanCollection.class);
        Assertions.assertEquals("viyfcaabeolhbhlv", model.value().get(0).location());
        Assertions.assertEquals("uqibsxtkcu", model.value().get(0).tags().get("fbsfarfsiow"));
        Assertions.assertEquals("vibidmhmwffpl", model.value().get(0).sku().name());
        Assertions.assertEquals("u", model.value().get(0).sku().tier());
        Assertions.assertEquals("pckc", model.value().get(0).sku().size());
        Assertions.assertEquals("rv", model.value().get(0).sku().family());
        Assertions.assertEquals(1204308465, model.value().get(0).sku().capacity());
        Assertions.assertEquals(429676827, model.value().get(0).sku().skuCapacity().minimum());
        Assertions.assertEquals(1601507048, model.value().get(0).sku().skuCapacity().maximum());
        Assertions.assertEquals(64161749, model.value().get(0).sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(919572814, model.value().get(0).sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("immoiroqboshbrag", model.value().get(0).sku().skuCapacity().scaleType());
        Assertions.assertEquals("yrmfsvbpav", model.value().get(0).sku().locations().get(0));
        Assertions.assertEquals("acfdmmcpugme", model.value().get(0).sku().capabilities().get(0).name());
        Assertions.assertEquals("epvufhbzehew", model.value().get(0).sku().capabilities().get(0).value());
        Assertions.assertEquals("qhnlbqnbld", model.value().get(0).sku().capabilities().get(0).reason());
        Assertions.assertEquals("clgsc", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("rsrrmoucsofldp", model.value().get(0).kind());
        Assertions.assertEquals("rqctmxxdtdd", model.value().get(0).workerTierName());
        Assertions.assertEquals("voxczytpr", model.value().get(0).hostingEnvironmentProfile().id());
        Assertions.assertEquals(false, model.value().get(0).perSiteScaling());
        Assertions.assertEquals(false, model.value().get(0).elasticScaleEnabled());
        Assertions.assertEquals(1481067716, model.value().get(0).maximumElasticWorkerCount());
        Assertions.assertEquals(true, model.value().get(0).isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T20:29:03Z"),
            model.value().get(0).spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T11:09:27Z"),
            model.value().get(0).freeOfferExpirationTime());
        Assertions.assertEquals(true, model.value().get(0).reserved());
        Assertions.assertEquals(false, model.value().get(0).isXenon());
        Assertions.assertEquals(true, model.value().get(0).hyperV());
        Assertions.assertEquals(2068748786, model.value().get(0).targetWorkerCount());
        Assertions.assertEquals(1409471968, model.value().get(0).targetWorkerSizeId());
        Assertions.assertEquals("p", model.value().get(0).kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, model.value().get(0).zoneRedundant());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AppServicePlanCollection model = new AppServicePlanCollection().withValue(Arrays.asList(
            new AppServicePlanInner().withLocation("viyfcaabeolhbhlv")
                .withTags(mapOf("fbsfarfsiow", "uqibsxtkcu", "kizmdksaoafclu", "kjxnqpvwgfstmhq", "xmycjimryvwgcw", "v",
                    "w", "pbmz"))
                .withSku(new SkuDescription().withName("vibidmhmwffpl")
                    .withTier("u")
                    .withSize("pckc")
                    .withFamily("rv")
                    .withCapacity(1204308465)
                    .withSkuCapacity(new SkuCapacity().withMinimum(429676827)
                        .withMaximum(1601507048)
                        .withElasticMaximum(64161749)
                        .withDefaultProperty(919572814)
                        .withScaleType("immoiroqboshbrag"))
                    .withLocations(Arrays.asList("yrmfsvbpav", "opfppdbwnupgah", "kuma"))
                    .withCapabilities(Arrays.asList(new CapabilityInner().withName("acfdmmcpugme")
                        .withValue("epvufhbzehew")
                        .withReason("qhnlbqnbld"))))
                .withExtendedLocation(new ExtendedLocation().withName("clgsc"))
                .withKind("rsrrmoucsofldp")
                .withWorkerTierName("rqctmxxdtdd")
                .withHostingEnvironmentProfile(new HostingEnvironmentProfile().withId("voxczytpr"))
                .withPerSiteScaling(false)
                .withElasticScaleEnabled(false)
                .withMaximumElasticWorkerCount(1481067716)
                .withIsSpot(true)
                .withSpotExpirationTime(OffsetDateTime.parse("2021-07-13T20:29:03Z"))
                .withFreeOfferExpirationTime(OffsetDateTime.parse("2021-01-31T11:09:27Z"))
                .withReserved(true)
                .withIsXenon(false)
                .withHyperV(true)
                .withTargetWorkerCount(2068748786)
                .withTargetWorkerSizeId(1409471968)
                .withKubeEnvironmentProfile(new KubeEnvironmentProfile().withId("p"))
                .withZoneRedundant(true),
            new AppServicePlanInner().withLocation("wro")
                .withTags(mapOf("nuchlgmltxdwhmo", "xfzzzwyjafitlhgu", "zvlnsnnjz", "us", "mwamxqzragpgdph", "pafolp"))
                .withSku(new SkuDescription().withName("uzzjgnrefq")
                    .withTier("qotoihiqakydiwfb")
                    .withSize("wpzdqtvhcspo")
                    .withFamily("qaxsipietgbebjf")
                    .withCapacity(1700868959)
                    .withSkuCapacity(new SkuCapacity().withMinimum(1731116741)
                        .withMaximum(239290276)
                        .withElasticMaximum(796050147)
                        .withDefaultProperty(816539003)
                        .withScaleType("pubntnbatz"))
                    .withLocations(Arrays.asList("sowsaael"))
                    .withCapabilities(Arrays.asList(
                        new CapabilityInner().withName("cjuhplrvkm").withValue("wmj").withReason("gfggcvkyylizrzbj"),
                        new CapabilityInner().withName("fxsfuztlvtmv").withValue("bwidql").withReason("ukoveofi"),
                        new CapabilityInner().withName("vjfn").withValue("mvl").withReason("z"),
                        new CapabilityInner().withName("blkujrllfojuidjp")
                            .withValue("yjucejikzoeo")
                            .withReason("tzejetjklnt"))))
                .withExtendedLocation(new ExtendedLocation().withName("juzkdbqz"))
                .withKind("rrkolawjmjs")
                .withWorkerTierName("wkxxpvbrdfjmzs")
                .withHostingEnvironmentProfile(new HostingEnvironmentProfile().withId("cyychunsjlp"))
                .withPerSiteScaling(false)
                .withElasticScaleEnabled(true)
                .withMaximumElasticWorkerCount(392377022)
                .withIsSpot(true)
                .withSpotExpirationTime(OffsetDateTime.parse("2021-03-13T04:29:52Z"))
                .withFreeOfferExpirationTime(OffsetDateTime.parse("2021-04-03T06:57:18Z"))
                .withReserved(true)
                .withIsXenon(true)
                .withHyperV(true)
                .withTargetWorkerCount(1208891136)
                .withTargetWorkerSizeId(171178668)
                .withKubeEnvironmentProfile(new KubeEnvironmentProfile().withId("lhsrrry"))
                .withZoneRedundant(true),
            new AppServicePlanInner().withLocation("znnhd")
                .withTags(mapOf("ywaeeczgf", "tgjcsgguxheml"))
                .withSku(new SkuDescription().withName("cxnmskwhqjjyslu")
                    .withTier("pshhkvpedwqslsr")
                    .withSize("pq")
                    .withFamily("wskondcbrwimuvqe")
                    .withCapacity(410887908)
                    .withSkuCapacity(new SkuCapacity().withMinimum(1299562334)
                        .withMaximum(1468589859)
                        .withElasticMaximum(1580631075)
                        .withDefaultProperty(584168937)
                        .withScaleType("inuqtljq"))
                    .withLocations(Arrays.asList("pihehce", "ybmrqbrjbbmp", "dlvykfrex", "rseqwjksghudgz"))
                    .withCapabilities(Arrays.asList(
                        new CapabilityInner().withName("jggsvo").withValue("kxibdafh").withReason("mdyomkxfbvfbh"),
                        new CapabilityInner().withName("i").withValue("pwpgddei").withReason("wzovgk"),
                        new CapabilityInner().withName("muikjcjcaztbws").withValue("qowxwcom").withReason("kytwvcz"),
                        new CapabilityInner().withName("wka").withValue("ejyfdvlvhbwrnfx").withReason("ddpqt"))))
                .withExtendedLocation(new ExtendedLocation().withName("n"))
                .withKind("ltytmhdr")
                .withWorkerTierName("vnphc")
                .withHostingEnvironmentProfile(new HostingEnvironmentProfile().withId("dcxsmlz"))
                .withPerSiteScaling(true)
                .withElasticScaleEnabled(false)
                .withMaximumElasticWorkerCount(58455610)
                .withIsSpot(true)
                .withSpotExpirationTime(OffsetDateTime.parse("2021-09-01T17:18:48Z"))
                .withFreeOfferExpirationTime(OffsetDateTime.parse("2020-12-22T02:11:50Z"))
                .withReserved(false)
                .withIsXenon(true)
                .withHyperV(true)
                .withTargetWorkerCount(443740602)
                .withTargetWorkerSizeId(1909235238)
                .withKubeEnvironmentProfile(new KubeEnvironmentProfile().withId("jcitdigsxcdglj"))
                .withZoneRedundant(true)));
        model = BinaryData.fromObject(model).toObject(AppServicePlanCollection.class);
        Assertions.assertEquals("viyfcaabeolhbhlv", model.value().get(0).location());
        Assertions.assertEquals("uqibsxtkcu", model.value().get(0).tags().get("fbsfarfsiow"));
        Assertions.assertEquals("vibidmhmwffpl", model.value().get(0).sku().name());
        Assertions.assertEquals("u", model.value().get(0).sku().tier());
        Assertions.assertEquals("pckc", model.value().get(0).sku().size());
        Assertions.assertEquals("rv", model.value().get(0).sku().family());
        Assertions.assertEquals(1204308465, model.value().get(0).sku().capacity());
        Assertions.assertEquals(429676827, model.value().get(0).sku().skuCapacity().minimum());
        Assertions.assertEquals(1601507048, model.value().get(0).sku().skuCapacity().maximum());
        Assertions.assertEquals(64161749, model.value().get(0).sku().skuCapacity().elasticMaximum());
        Assertions.assertEquals(919572814, model.value().get(0).sku().skuCapacity().defaultProperty());
        Assertions.assertEquals("immoiroqboshbrag", model.value().get(0).sku().skuCapacity().scaleType());
        Assertions.assertEquals("yrmfsvbpav", model.value().get(0).sku().locations().get(0));
        Assertions.assertEquals("acfdmmcpugme", model.value().get(0).sku().capabilities().get(0).name());
        Assertions.assertEquals("epvufhbzehew", model.value().get(0).sku().capabilities().get(0).value());
        Assertions.assertEquals("qhnlbqnbld", model.value().get(0).sku().capabilities().get(0).reason());
        Assertions.assertEquals("clgsc", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("rsrrmoucsofldp", model.value().get(0).kind());
        Assertions.assertEquals("rqctmxxdtdd", model.value().get(0).workerTierName());
        Assertions.assertEquals("voxczytpr", model.value().get(0).hostingEnvironmentProfile().id());
        Assertions.assertEquals(false, model.value().get(0).perSiteScaling());
        Assertions.assertEquals(false, model.value().get(0).elasticScaleEnabled());
        Assertions.assertEquals(1481067716, model.value().get(0).maximumElasticWorkerCount());
        Assertions.assertEquals(true, model.value().get(0).isSpot());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T20:29:03Z"),
            model.value().get(0).spotExpirationTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-31T11:09:27Z"),
            model.value().get(0).freeOfferExpirationTime());
        Assertions.assertEquals(true, model.value().get(0).reserved());
        Assertions.assertEquals(false, model.value().get(0).isXenon());
        Assertions.assertEquals(true, model.value().get(0).hyperV());
        Assertions.assertEquals(2068748786, model.value().get(0).targetWorkerCount());
        Assertions.assertEquals(1409471968, model.value().get(0).targetWorkerSizeId());
        Assertions.assertEquals("p", model.value().get(0).kubeEnvironmentProfile().id());
        Assertions.assertEquals(true, model.value().get(0).zoneRedundant());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
