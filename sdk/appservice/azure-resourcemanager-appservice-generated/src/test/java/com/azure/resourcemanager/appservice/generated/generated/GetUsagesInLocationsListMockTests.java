// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.CsmUsageQuota;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class GetUsagesInLocationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"lkmgcxmkr\",\"nextResetTime\":\"2021-07-21T10:45:49Z\",\"currentValue\":2842102595999818484,\"limit\":1089769957333524763,\"name\":{\"value\":\"gvyuusexenywwkd\",\"localizedValue\":\"qgysxpaapmt\"}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CsmUsageQuota> response
            = manager.getUsagesInLocations().list("dwgozr", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lkmgcxmkr", response.iterator().next().unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-21T10:45:49Z"),
            response.iterator().next().nextResetTime());
        Assertions.assertEquals(2842102595999818484L, response.iterator().next().currentValue());
        Assertions.assertEquals(1089769957333524763L, response.iterator().next().limit());
        Assertions.assertEquals("gvyuusexenywwkd", response.iterator().next().name().value());
        Assertions.assertEquals("qgysxpaapmt", response.iterator().next().name().localizedValue());
    }
}
