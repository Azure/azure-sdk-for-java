// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.PremierAddOnInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PremierAddOnInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PremierAddOnInner model = BinaryData.fromString(
            "{\"properties\":{\"sku\":\"trgpd\",\"product\":\"t\",\"vendor\":\"hyfwjfqktuzr\",\"marketplacePublisher\":\"pecsdk\",\"marketplaceOffer\":\"fzbvttqjntvhnjp\"},\"kind\":\"j\",\"location\":\"ugcupcyfrhooyvm\",\"tags\":{\"wlynxzhgbspdxbh\":\"yeeafdxs\",\"k\":\"qu\"},\"id\":\"xqomzdfaupqve\",\"name\":\"dzwnkbjqp\",\"type\":\"modwhqu\"}")
            .toObject(PremierAddOnInner.class);
        Assertions.assertEquals("ugcupcyfrhooyvm", model.location());
        Assertions.assertEquals("yeeafdxs", model.tags().get("wlynxzhgbspdxbh"));
        Assertions.assertEquals("j", model.kind());
        Assertions.assertEquals("trgpd", model.sku());
        Assertions.assertEquals("t", model.product());
        Assertions.assertEquals("hyfwjfqktuzr", model.vendor());
        Assertions.assertEquals("pecsdk", model.marketplacePublisher());
        Assertions.assertEquals("fzbvttqjntvhnjp", model.marketplaceOffer());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PremierAddOnInner model = new PremierAddOnInner().withLocation("ugcupcyfrhooyvm")
            .withTags(mapOf("wlynxzhgbspdxbh", "yeeafdxs", "k", "qu"))
            .withKind("j")
            .withSku("trgpd")
            .withProduct("t")
            .withVendor("hyfwjfqktuzr")
            .withMarketplacePublisher("pecsdk")
            .withMarketplaceOffer("fzbvttqjntvhnjp");
        model = BinaryData.fromObject(model).toObject(PremierAddOnInner.class);
        Assertions.assertEquals("ugcupcyfrhooyvm", model.location());
        Assertions.assertEquals("yeeafdxs", model.tags().get("wlynxzhgbspdxbh"));
        Assertions.assertEquals("j", model.kind());
        Assertions.assertEquals("trgpd", model.sku());
        Assertions.assertEquals("t", model.product());
        Assertions.assertEquals("hyfwjfqktuzr", model.vendor());
        Assertions.assertEquals("pecsdk", model.marketplacePublisher());
        Assertions.assertEquals("fzbvttqjntvhnjp", model.marketplaceOffer());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
