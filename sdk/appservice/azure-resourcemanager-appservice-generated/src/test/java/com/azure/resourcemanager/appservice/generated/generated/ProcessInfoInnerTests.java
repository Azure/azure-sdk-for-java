// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessModuleInfoInner;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessThreadInfoInner;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProcessInfoInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProcessInfoInner model = BinaryData.fromString(
            "{\"properties\":{\"identifier\":507738390,\"deployment_name\":\"yhwl\",\"href\":\"v\",\"minidump\":\"ltaprq\",\"is_profile_running\":true,\"is_iis_profile_running\":false,\"iis_profile_timeout_in_seconds\":11.475018744642151,\"parent\":\"monxdwfcuhbgftf\",\"children\":[\"kkmvz\",\"neg\"],\"threads\":[{\"properties\":{\"identifier\":506117683,\"href\":\"wq\",\"process\":\"emj\",\"start_address\":\"xlsu\",\"current_priority\":968768069,\"priority_level\":\"tbejrdzwyktd\",\"base_priority\":1257620687,\"start_time\":\"2021-07-12T20:50:44Z\",\"total_processor_time\":\"ifnjwj\",\"user_processor_time\":\"jkykqf\",\"state\":\"mcyk\",\"wait_reason\":\"ysmkbndnrihpja\"},\"kind\":\"cbeejnoignydlkr\",\"id\":\"psbnm\",\"name\":\"mhkipjardv\",\"type\":\"pfgwdxmiaelnpbi\"},{\"properties\":{\"identifier\":1390898079,\"href\":\"ddvjlpbj\",\"process\":\"qjfskjva\",\"start_address\":\"xrwkns\",\"current_priority\":549218684,\"priority_level\":\"pbrzwi\",\"base_priority\":979849942,\"start_time\":\"2021-12-08T06:20:08Z\",\"total_processor_time\":\"k\",\"user_processor_time\":\"ebtpgvutbsusfdyw\",\"state\":\"qcowkendgrc\",\"wait_reason\":\"flxq\"},\"kind\":\"ugtcuyuwgnyj\",\"id\":\"iuj\",\"name\":\"icwmlfzl\",\"type\":\"ibfmcoxbktu\"}],\"open_file_handles\":[\"ufpvvdgnmeiomn\",\"bbaibcfbfyqzaisf\",\"fgvmrkmgifmy\",\"buhdnhhcmtslptbd\"],\"modules\":[{\"properties\":{\"base_address\":\"lqivcnuqf\",\"file_name\":\"jzzbpcwtwtrchkcm\",\"href\":\"awqesqsqmiekx\",\"file_path\":\"wqchfptykkvj\",\"module_memory_size\":2138612291,\"file_version\":\"j\",\"file_description\":\"rzyqokbgumuejx\",\"product\":\"xxizc\",\"product_version\":\"buzginrkjkn\",\"is_debug\":false,\"language\":\"ul\"},\"kind\":\"bhozlsbufnhbvc\",\"id\":\"tpo\",\"name\":\"eytrsljzm\",\"type\":\"uicsggsxznbppmkq\"},{\"properties\":{\"base_address\":\"bbnjldicqoman\",\"file_name\":\"wlenitvkyahfoyfz\",\"href\":\"dyaepre\",\"file_path\":\"jukfalwceechcayv\",\"module_memory_size\":2050163026,\"file_version\":\"pucn\",\"file_description\":\"nylfhicrjriyb\",\"product\":\"ydrlqllbof\",\"product_version\":\"qocybrhx\",\"is_debug\":false,\"language\":\"rlu\"},\"kind\":\"eiqb\",\"id\":\"oqjfeamzkuxdgpks\",\"name\":\"otbunvnjqldr\",\"type\":\"qvcugusqlxlx\"},{\"properties\":{\"base_address\":\"hfwlnvqacbyfisb\",\"file_name\":\"lmpuyypaggpaihe\",\"href\":\"yzwloqrmgd\",\"file_path\":\"mipvlxtyw\",\"module_memory_size\":507198140,\"file_version\":\"dspllitxrrg\",\"file_description\":\"iy\",\"product\":\"hqoivxcodwkwo\",\"product_version\":\"cachhsizfuew\",\"is_debug\":true,\"language\":\"iikqcdnzsfiuh\"},\"kind\":\"eoodmcrxly\",\"id\":\"oa\",\"name\":\"ovufakrxjjwn\",\"type\":\"rmdwtbrnlsy\"},{\"properties\":{\"base_address\":\"nistcjhatc\",\"file_name\":\"phcst\",\"href\":\"ycpanapfaoiz\",\"file_path\":\"nlpxngzzxqbg\",\"module_memory_size\":425437639,\"file_version\":\"zctbxzjkpifpu\",\"file_description\":\"bdozwbskueafz\",\"product\":\"mbinpxmiwt\",\"product_version\":\"ifpvrdukcdnzo\",\"is_debug\":false,\"language\":\"uxtwgbawshram\"},\"kind\":\"ugqcglmadfztof\",\"id\":\"vqlauuag\",\"name\":\"ayfmcerfxfeiqbas\",\"type\":\"hzwj\"}],\"file_name\":\"ssvnonijcqcjo\",\"command_line\":\"jkugpdqqbt\",\"user_name\":\"vocu\",\"handle_count\":1893255126,\"module_count\":1420117579,\"thread_count\":1991560198,\"start_time\":\"2021-07-20T17:20:24Z\",\"total_cpu_time\":\"wettohgpz\",\"user_cpu_time\":\"yv\",\"privileged_cpu_time\":\"zbhizxpu\",\"working_set\":5542479074463799391,\"peak_working_set\":335599162501076754,\"private_memory\":2913803284021205440,\"virtual_memory\":5390515920982441429,\"peak_virtual_memory\":8850914487596258366,\"paged_system_memory\":3095227124130962948,\"non_paged_system_memory\":7262851798981012839,\"paged_memory\":6373351738474800558,\"peak_paged_memory\":8882047616561917556,\"time_stamp\":\"2021-06-28T06:55:10Z\",\"environment_variables\":{\"ygkxrlfojlclp\":\"midtvhjcgszfb\"},\"is_scm_site\":true,\"is_webjob\":false,\"description\":\"odhrvy\"},\"kind\":\"u\",\"id\":\"mwb\",\"name\":\"umjvegpdxtsaujt\",\"type\":\"oojybo\"}")
            .toObject(ProcessInfoInner.class);
        Assertions.assertEquals("u", model.kind());
        Assertions.assertEquals("yhwl", model.deploymentName());
        Assertions.assertEquals("v", model.href());
        Assertions.assertEquals("ltaprq", model.minidump());
        Assertions.assertEquals(true, model.isProfileRunning());
        Assertions.assertEquals(false, model.isIisProfileRunning());
        Assertions.assertEquals(11.475018744642151D, model.iisProfileTimeoutInSeconds());
        Assertions.assertEquals("monxdwfcuhbgftf", model.parent());
        Assertions.assertEquals("kkmvz", model.children().get(0));
        Assertions.assertEquals("cbeejnoignydlkr", model.threads().get(0).kind());
        Assertions.assertEquals("wq", model.threads().get(0).href());
        Assertions.assertEquals("emj", model.threads().get(0).process());
        Assertions.assertEquals("xlsu", model.threads().get(0).startAddress());
        Assertions.assertEquals(968768069, model.threads().get(0).currentPriority());
        Assertions.assertEquals("tbejrdzwyktd", model.threads().get(0).priorityLevel());
        Assertions.assertEquals(1257620687, model.threads().get(0).basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-12T20:50:44Z"), model.threads().get(0).startTime());
        Assertions.assertEquals("ifnjwj", model.threads().get(0).totalProcessorTime());
        Assertions.assertEquals("jkykqf", model.threads().get(0).userProcessorTime());
        Assertions.assertEquals("mcyk", model.threads().get(0).state());
        Assertions.assertEquals("ysmkbndnrihpja", model.threads().get(0).waitReason());
        Assertions.assertEquals("ufpvvdgnmeiomn", model.openFileHandles().get(0));
        Assertions.assertEquals("bhozlsbufnhbvc", model.modules().get(0).kind());
        Assertions.assertEquals("lqivcnuqf", model.modules().get(0).baseAddress());
        Assertions.assertEquals("jzzbpcwtwtrchkcm", model.modules().get(0).fileName());
        Assertions.assertEquals("awqesqsqmiekx", model.modules().get(0).href());
        Assertions.assertEquals("wqchfptykkvj", model.modules().get(0).filePath());
        Assertions.assertEquals(2138612291, model.modules().get(0).moduleMemorySize());
        Assertions.assertEquals("j", model.modules().get(0).fileVersion());
        Assertions.assertEquals("rzyqokbgumuejx", model.modules().get(0).fileDescription());
        Assertions.assertEquals("xxizc", model.modules().get(0).product());
        Assertions.assertEquals("buzginrkjkn", model.modules().get(0).productVersion());
        Assertions.assertEquals(false, model.modules().get(0).isDebug());
        Assertions.assertEquals("ul", model.modules().get(0).language());
        Assertions.assertEquals("ssvnonijcqcjo", model.fileName());
        Assertions.assertEquals("jkugpdqqbt", model.commandLine());
        Assertions.assertEquals("vocu", model.username());
        Assertions.assertEquals(1893255126, model.handleCount());
        Assertions.assertEquals(1420117579, model.moduleCount());
        Assertions.assertEquals(1991560198, model.threadCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T17:20:24Z"), model.startTime());
        Assertions.assertEquals("wettohgpz", model.totalCpuTime());
        Assertions.assertEquals("yv", model.userCpuTime());
        Assertions.assertEquals("zbhizxpu", model.privilegedCpuTime());
        Assertions.assertEquals(5542479074463799391L, model.workingSet());
        Assertions.assertEquals(335599162501076754L, model.peakWorkingSet());
        Assertions.assertEquals(2913803284021205440L, model.privateMemory());
        Assertions.assertEquals(5390515920982441429L, model.virtualMemory());
        Assertions.assertEquals(8850914487596258366L, model.peakVirtualMemory());
        Assertions.assertEquals(3095227124130962948L, model.pagedSystemMemory());
        Assertions.assertEquals(7262851798981012839L, model.nonPagedSystemMemory());
        Assertions.assertEquals(6373351738474800558L, model.pagedMemory());
        Assertions.assertEquals(8882047616561917556L, model.peakPagedMemory());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T06:55:10Z"), model.timestamp());
        Assertions.assertEquals("midtvhjcgszfb", model.environmentVariables().get("ygkxrlfojlclp"));
        Assertions.assertEquals(true, model.isScmSite());
        Assertions.assertEquals(false, model.isWebjob());
        Assertions.assertEquals("odhrvy", model.description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProcessInfoInner model = new ProcessInfoInner().withKind("u")
            .withDeploymentName("yhwl")
            .withHref("v")
            .withMinidump("ltaprq")
            .withIsProfileRunning(true)
            .withIsIisProfileRunning(false)
            .withIisProfileTimeoutInSeconds(11.475018744642151D)
            .withParent("monxdwfcuhbgftf")
            .withChildren(Arrays.asList("kkmvz", "neg"))
            .withThreads(Arrays.asList(
                new ProcessThreadInfoInner().withKind("cbeejnoignydlkr")
                    .withHref("wq")
                    .withProcess("emj")
                    .withStartAddress("xlsu")
                    .withCurrentPriority(968768069)
                    .withPriorityLevel("tbejrdzwyktd")
                    .withBasePriority(1257620687)
                    .withStartTime(OffsetDateTime.parse("2021-07-12T20:50:44Z"))
                    .withTotalProcessorTime("ifnjwj")
                    .withUserProcessorTime("jkykqf")
                    .withState("mcyk")
                    .withWaitReason("ysmkbndnrihpja"),
                new ProcessThreadInfoInner().withKind("ugtcuyuwgnyj")
                    .withHref("ddvjlpbj")
                    .withProcess("qjfskjva")
                    .withStartAddress("xrwkns")
                    .withCurrentPriority(549218684)
                    .withPriorityLevel("pbrzwi")
                    .withBasePriority(979849942)
                    .withStartTime(OffsetDateTime.parse("2021-12-08T06:20:08Z"))
                    .withTotalProcessorTime("k")
                    .withUserProcessorTime("ebtpgvutbsusfdyw")
                    .withState("qcowkendgrc")
                    .withWaitReason("flxq")))
            .withOpenFileHandles(
                Arrays.asList("ufpvvdgnmeiomn", "bbaibcfbfyqzaisf", "fgvmrkmgifmy", "buhdnhhcmtslptbd"))
            .withModules(Arrays.asList(
                new ProcessModuleInfoInner().withKind("bhozlsbufnhbvc")
                    .withBaseAddress("lqivcnuqf")
                    .withFileName("jzzbpcwtwtrchkcm")
                    .withHref("awqesqsqmiekx")
                    .withFilePath("wqchfptykkvj")
                    .withModuleMemorySize(2138612291)
                    .withFileVersion("j")
                    .withFileDescription("rzyqokbgumuejx")
                    .withProduct("xxizc")
                    .withProductVersion("buzginrkjkn")
                    .withIsDebug(false)
                    .withLanguage("ul"),
                new ProcessModuleInfoInner().withKind("eiqb")
                    .withBaseAddress("bbnjldicqoman")
                    .withFileName("wlenitvkyahfoyfz")
                    .withHref("dyaepre")
                    .withFilePath("jukfalwceechcayv")
                    .withModuleMemorySize(2050163026)
                    .withFileVersion("pucn")
                    .withFileDescription("nylfhicrjriyb")
                    .withProduct("ydrlqllbof")
                    .withProductVersion("qocybrhx")
                    .withIsDebug(false)
                    .withLanguage("rlu"),
                new ProcessModuleInfoInner().withKind("eoodmcrxly")
                    .withBaseAddress("hfwlnvqacbyfisb")
                    .withFileName("lmpuyypaggpaihe")
                    .withHref("yzwloqrmgd")
                    .withFilePath("mipvlxtyw")
                    .withModuleMemorySize(507198140)
                    .withFileVersion("dspllitxrrg")
                    .withFileDescription("iy")
                    .withProduct("hqoivxcodwkwo")
                    .withProductVersion("cachhsizfuew")
                    .withIsDebug(true)
                    .withLanguage("iikqcdnzsfiuh"),
                new ProcessModuleInfoInner().withKind("ugqcglmadfztof")
                    .withBaseAddress("nistcjhatc")
                    .withFileName("phcst")
                    .withHref("ycpanapfaoiz")
                    .withFilePath("nlpxngzzxqbg")
                    .withModuleMemorySize(425437639)
                    .withFileVersion("zctbxzjkpifpu")
                    .withFileDescription("bdozwbskueafz")
                    .withProduct("mbinpxmiwt")
                    .withProductVersion("ifpvrdukcdnzo")
                    .withIsDebug(false)
                    .withLanguage("uxtwgbawshram")))
            .withFileName("ssvnonijcqcjo")
            .withCommandLine("jkugpdqqbt")
            .withUsername("vocu")
            .withHandleCount(1893255126)
            .withModuleCount(1420117579)
            .withThreadCount(1991560198)
            .withStartTime(OffsetDateTime.parse("2021-07-20T17:20:24Z"))
            .withTotalCpuTime("wettohgpz")
            .withUserCpuTime("yv")
            .withPrivilegedCpuTime("zbhizxpu")
            .withWorkingSet(5542479074463799391L)
            .withPeakWorkingSet(335599162501076754L)
            .withPrivateMemory(2913803284021205440L)
            .withVirtualMemory(5390515920982441429L)
            .withPeakVirtualMemory(8850914487596258366L)
            .withPagedSystemMemory(3095227124130962948L)
            .withNonPagedSystemMemory(7262851798981012839L)
            .withPagedMemory(6373351738474800558L)
            .withPeakPagedMemory(8882047616561917556L)
            .withTimestamp(OffsetDateTime.parse("2021-06-28T06:55:10Z"))
            .withEnvironmentVariables(mapOf("ygkxrlfojlclp", "midtvhjcgszfb"))
            .withIsScmSite(true)
            .withIsWebjob(false)
            .withDescription("odhrvy");
        model = BinaryData.fromObject(model).toObject(ProcessInfoInner.class);
        Assertions.assertEquals("u", model.kind());
        Assertions.assertEquals("yhwl", model.deploymentName());
        Assertions.assertEquals("v", model.href());
        Assertions.assertEquals("ltaprq", model.minidump());
        Assertions.assertEquals(true, model.isProfileRunning());
        Assertions.assertEquals(false, model.isIisProfileRunning());
        Assertions.assertEquals(11.475018744642151D, model.iisProfileTimeoutInSeconds());
        Assertions.assertEquals("monxdwfcuhbgftf", model.parent());
        Assertions.assertEquals("kkmvz", model.children().get(0));
        Assertions.assertEquals("cbeejnoignydlkr", model.threads().get(0).kind());
        Assertions.assertEquals("wq", model.threads().get(0).href());
        Assertions.assertEquals("emj", model.threads().get(0).process());
        Assertions.assertEquals("xlsu", model.threads().get(0).startAddress());
        Assertions.assertEquals(968768069, model.threads().get(0).currentPriority());
        Assertions.assertEquals("tbejrdzwyktd", model.threads().get(0).priorityLevel());
        Assertions.assertEquals(1257620687, model.threads().get(0).basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-12T20:50:44Z"), model.threads().get(0).startTime());
        Assertions.assertEquals("ifnjwj", model.threads().get(0).totalProcessorTime());
        Assertions.assertEquals("jkykqf", model.threads().get(0).userProcessorTime());
        Assertions.assertEquals("mcyk", model.threads().get(0).state());
        Assertions.assertEquals("ysmkbndnrihpja", model.threads().get(0).waitReason());
        Assertions.assertEquals("ufpvvdgnmeiomn", model.openFileHandles().get(0));
        Assertions.assertEquals("bhozlsbufnhbvc", model.modules().get(0).kind());
        Assertions.assertEquals("lqivcnuqf", model.modules().get(0).baseAddress());
        Assertions.assertEquals("jzzbpcwtwtrchkcm", model.modules().get(0).fileName());
        Assertions.assertEquals("awqesqsqmiekx", model.modules().get(0).href());
        Assertions.assertEquals("wqchfptykkvj", model.modules().get(0).filePath());
        Assertions.assertEquals(2138612291, model.modules().get(0).moduleMemorySize());
        Assertions.assertEquals("j", model.modules().get(0).fileVersion());
        Assertions.assertEquals("rzyqokbgumuejx", model.modules().get(0).fileDescription());
        Assertions.assertEquals("xxizc", model.modules().get(0).product());
        Assertions.assertEquals("buzginrkjkn", model.modules().get(0).productVersion());
        Assertions.assertEquals(false, model.modules().get(0).isDebug());
        Assertions.assertEquals("ul", model.modules().get(0).language());
        Assertions.assertEquals("ssvnonijcqcjo", model.fileName());
        Assertions.assertEquals("jkugpdqqbt", model.commandLine());
        Assertions.assertEquals("vocu", model.username());
        Assertions.assertEquals(1893255126, model.handleCount());
        Assertions.assertEquals(1420117579, model.moduleCount());
        Assertions.assertEquals(1991560198, model.threadCount());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T17:20:24Z"), model.startTime());
        Assertions.assertEquals("wettohgpz", model.totalCpuTime());
        Assertions.assertEquals("yv", model.userCpuTime());
        Assertions.assertEquals("zbhizxpu", model.privilegedCpuTime());
        Assertions.assertEquals(5542479074463799391L, model.workingSet());
        Assertions.assertEquals(335599162501076754L, model.peakWorkingSet());
        Assertions.assertEquals(2913803284021205440L, model.privateMemory());
        Assertions.assertEquals(5390515920982441429L, model.virtualMemory());
        Assertions.assertEquals(8850914487596258366L, model.peakVirtualMemory());
        Assertions.assertEquals(3095227124130962948L, model.pagedSystemMemory());
        Assertions.assertEquals(7262851798981012839L, model.nonPagedSystemMemory());
        Assertions.assertEquals(6373351738474800558L, model.pagedMemory());
        Assertions.assertEquals(8882047616561917556L, model.peakPagedMemory());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-28T06:55:10Z"), model.timestamp());
        Assertions.assertEquals("midtvhjcgszfb", model.environmentVariables().get("ygkxrlfojlclp"));
        Assertions.assertEquals(true, model.isScmSite());
        Assertions.assertEquals(false, model.isWebjob());
        Assertions.assertEquals("odhrvy", model.description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
