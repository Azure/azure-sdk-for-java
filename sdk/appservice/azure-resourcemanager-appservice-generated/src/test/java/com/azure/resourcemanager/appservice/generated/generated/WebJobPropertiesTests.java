// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.WebJobProperties;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WebJobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebJobProperties model = BinaryData.fromString(
            "{\"run_command\":\"tkqvi\",\"url\":\"iiqajfwzubfg\",\"extra_info_url\":\"vzbueiydoqb\",\"web_job_type\":\"Triggered\",\"error\":\"xptxhednkzjtrjaw\",\"using_sdk\":true,\"settings\":{\"krw\":\"dataeix\"}}")
            .toObject(WebJobProperties.class);
        Assertions.assertEquals("tkqvi", model.runCommand());
        Assertions.assertEquals("iiqajfwzubfg", model.url());
        Assertions.assertEquals("vzbueiydoqb", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("xptxhednkzjtrjaw", model.error());
        Assertions.assertEquals(true, model.usingSdk());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebJobProperties model = new WebJobProperties().withRunCommand("tkqvi")
            .withUrl("iiqajfwzubfg")
            .withExtraInfoUrl("vzbueiydoqb")
            .withWebJobType(WebJobType.TRIGGERED)
            .withError("xptxhednkzjtrjaw")
            .withUsingSdk(true)
            .withSettings(mapOf("krw", "dataeix"));
        model = BinaryData.fromObject(model).toObject(WebJobProperties.class);
        Assertions.assertEquals("tkqvi", model.runCommand());
        Assertions.assertEquals("iiqajfwzubfg", model.url());
        Assertions.assertEquals("vzbueiydoqb", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("xptxhednkzjtrjaw", model.error());
        Assertions.assertEquals(true, model.usingSdk());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
