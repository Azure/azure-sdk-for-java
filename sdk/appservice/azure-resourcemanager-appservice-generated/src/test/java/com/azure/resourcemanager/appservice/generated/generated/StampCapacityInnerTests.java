// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.StampCapacityInner;
import com.azure.resourcemanager.appservice.generated.models.ComputeModeOptions;
import com.azure.resourcemanager.appservice.generated.models.WorkerSizeOptions;
import org.junit.jupiter.api.Assertions;

public final class StampCapacityInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StampCapacityInner model = BinaryData.fromString(
            "{\"name\":\"zphv\",\"availableCapacity\":7562585136473490528,\"totalCapacity\":4404884666059686122,\"unit\":\"gupkvipmdscwxq\",\"computeMode\":\"Shared\",\"workerSize\":\"MediumV3\",\"workerSizeId\":230856251,\"excludeFromCapacityAllocation\":true,\"isApplicableForAllComputeModes\":false,\"siteMode\":\"hojujbypelmcuv\",\"isLinux\":true}")
            .toObject(StampCapacityInner.class);
        Assertions.assertEquals("zphv", model.name());
        Assertions.assertEquals(7562585136473490528L, model.availableCapacity());
        Assertions.assertEquals(4404884666059686122L, model.totalCapacity());
        Assertions.assertEquals("gupkvipmdscwxq", model.unit());
        Assertions.assertEquals(ComputeModeOptions.SHARED, model.computeMode());
        Assertions.assertEquals(WorkerSizeOptions.MEDIUM_V3, model.workerSize());
        Assertions.assertEquals(230856251, model.workerSizeId());
        Assertions.assertEquals(true, model.excludeFromCapacityAllocation());
        Assertions.assertEquals(false, model.isApplicableForAllComputeModes());
        Assertions.assertEquals("hojujbypelmcuv", model.siteMode());
        Assertions.assertEquals(true, model.isLinux());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StampCapacityInner model = new StampCapacityInner().withName("zphv")
            .withAvailableCapacity(7562585136473490528L)
            .withTotalCapacity(4404884666059686122L)
            .withUnit("gupkvipmdscwxq")
            .withComputeMode(ComputeModeOptions.SHARED)
            .withWorkerSize(WorkerSizeOptions.MEDIUM_V3)
            .withWorkerSizeId(230856251)
            .withExcludeFromCapacityAllocation(true)
            .withIsApplicableForAllComputeModes(false)
            .withSiteMode("hojujbypelmcuv")
            .withIsLinux(true);
        model = BinaryData.fromObject(model).toObject(StampCapacityInner.class);
        Assertions.assertEquals("zphv", model.name());
        Assertions.assertEquals(7562585136473490528L, model.availableCapacity());
        Assertions.assertEquals(4404884666059686122L, model.totalCapacity());
        Assertions.assertEquals("gupkvipmdscwxq", model.unit());
        Assertions.assertEquals(ComputeModeOptions.SHARED, model.computeMode());
        Assertions.assertEquals(WorkerSizeOptions.MEDIUM_V3, model.workerSize());
        Assertions.assertEquals(230856251, model.workerSizeId());
        Assertions.assertEquals(true, model.excludeFromCapacityAllocation());
        Assertions.assertEquals(false, model.isApplicableForAllComputeModes());
        Assertions.assertEquals("hojujbypelmcuv", model.siteMode());
        Assertions.assertEquals(true, model.isLinux());
    }
}
