// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.TriggeredWebJobInner;
import com.azure.resourcemanager.appservice.generated.models.TriggeredJobRun;
import com.azure.resourcemanager.appservice.generated.models.TriggeredWebJobStatus;
import com.azure.resourcemanager.appservice.generated.models.WebJobType;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TriggeredWebJobInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TriggeredWebJobInner model = BinaryData.fromString(
            "{\"properties\":{\"latest_run\":{\"web_job_id\":\"cquepanqdmmrodpg\",\"web_job_name\":\"lmxblcbwvsqpea\",\"status\":\"Failed\",\"start_time\":\"2021-07-30T11:30:39Z\",\"end_time\":\"2021-10-24T02:18:38Z\",\"duration\":\"pcgirsfil\",\"output_url\":\"syzcnxjvipehx\",\"error_url\":\"burbxovgjipbnngh\",\"url\":\"xwjnwgoxenhpyix\",\"job_name\":\"rsaeuzso\",\"trigger\":\"lyygfticuyd\"},\"history_url\":\"wqmteuyq\",\"scheduler_logs_url\":\"oeaotrbnv\",\"run_command\":\"phttoqoafdvxr\",\"url\":\"srfrxylmdjp\",\"extra_info_url\":\"ipkpcvhqadj\",\"web_job_type\":\"Triggered\",\"error\":\"cgq\",\"using_sdk\":true,\"publicNetworkAccess\":\"qvatst\",\"storageAccountRequired\":true,\"settings\":{\"r\":\"datacktjscjkexybx\",\"mbf\":\"datajgptxvzhyun\"}},\"kind\":\"selblwmfudpntpsw\",\"id\":\"mfktytri\",\"name\":\"fleqve\",\"type\":\"nzvhmiwb\"}")
            .toObject(TriggeredWebJobInner.class);
        Assertions.assertEquals("selblwmfudpntpsw", model.kind());
        Assertions.assertEquals("cquepanqdmmrodpg", model.latestRun().webJobId());
        Assertions.assertEquals("lmxblcbwvsqpea", model.latestRun().webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.FAILED, model.latestRun().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T11:30:39Z"), model.latestRun().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-24T02:18:38Z"), model.latestRun().endTime());
        Assertions.assertEquals("pcgirsfil", model.latestRun().duration());
        Assertions.assertEquals("syzcnxjvipehx", model.latestRun().outputUrl());
        Assertions.assertEquals("burbxovgjipbnngh", model.latestRun().errorUrl());
        Assertions.assertEquals("xwjnwgoxenhpyix", model.latestRun().url());
        Assertions.assertEquals("rsaeuzso", model.latestRun().jobName());
        Assertions.assertEquals("lyygfticuyd", model.latestRun().trigger());
        Assertions.assertEquals("wqmteuyq", model.historyUrl());
        Assertions.assertEquals("oeaotrbnv", model.schedulerLogsUrl());
        Assertions.assertEquals("phttoqoafdvxr", model.runCommand());
        Assertions.assertEquals("srfrxylmdjp", model.url());
        Assertions.assertEquals("ipkpcvhqadj", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("cgq", model.error());
        Assertions.assertEquals(true, model.usingSdk());
        Assertions.assertEquals("qvatst", model.publicNetworkAccess());
        Assertions.assertEquals(true, model.storageAccountRequired());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TriggeredWebJobInner model = new TriggeredWebJobInner().withKind("selblwmfudpntpsw")
            .withLatestRun(new TriggeredJobRun().withWebJobId("cquepanqdmmrodpg")
                .withWebJobName("lmxblcbwvsqpea")
                .withStatus(TriggeredWebJobStatus.FAILED)
                .withStartTime(OffsetDateTime.parse("2021-07-30T11:30:39Z"))
                .withEndTime(OffsetDateTime.parse("2021-10-24T02:18:38Z"))
                .withDuration("pcgirsfil")
                .withOutputUrl("syzcnxjvipehx")
                .withErrorUrl("burbxovgjipbnngh")
                .withUrl("xwjnwgoxenhpyix")
                .withJobName("rsaeuzso")
                .withTrigger("lyygfticuyd"))
            .withHistoryUrl("wqmteuyq")
            .withSchedulerLogsUrl("oeaotrbnv")
            .withRunCommand("phttoqoafdvxr")
            .withUrl("srfrxylmdjp")
            .withExtraInfoUrl("ipkpcvhqadj")
            .withWebJobType(WebJobType.TRIGGERED)
            .withError("cgq")
            .withUsingSdk(true)
            .withPublicNetworkAccess("qvatst")
            .withStorageAccountRequired(true)
            .withSettings(mapOf("r", "datacktjscjkexybx", "mbf", "datajgptxvzhyun"));
        model = BinaryData.fromObject(model).toObject(TriggeredWebJobInner.class);
        Assertions.assertEquals("selblwmfudpntpsw", model.kind());
        Assertions.assertEquals("cquepanqdmmrodpg", model.latestRun().webJobId());
        Assertions.assertEquals("lmxblcbwvsqpea", model.latestRun().webJobName());
        Assertions.assertEquals(TriggeredWebJobStatus.FAILED, model.latestRun().status());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T11:30:39Z"), model.latestRun().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-24T02:18:38Z"), model.latestRun().endTime());
        Assertions.assertEquals("pcgirsfil", model.latestRun().duration());
        Assertions.assertEquals("syzcnxjvipehx", model.latestRun().outputUrl());
        Assertions.assertEquals("burbxovgjipbnngh", model.latestRun().errorUrl());
        Assertions.assertEquals("xwjnwgoxenhpyix", model.latestRun().url());
        Assertions.assertEquals("rsaeuzso", model.latestRun().jobName());
        Assertions.assertEquals("lyygfticuyd", model.latestRun().trigger());
        Assertions.assertEquals("wqmteuyq", model.historyUrl());
        Assertions.assertEquals("oeaotrbnv", model.schedulerLogsUrl());
        Assertions.assertEquals("phttoqoafdvxr", model.runCommand());
        Assertions.assertEquals("srfrxylmdjp", model.url());
        Assertions.assertEquals("ipkpcvhqadj", model.extraInfoUrl());
        Assertions.assertEquals(WebJobType.TRIGGERED, model.webJobType());
        Assertions.assertEquals("cgq", model.error());
        Assertions.assertEquals(true, model.usingSdk());
        Assertions.assertEquals("qvatst", model.publicNetworkAccess());
        Assertions.assertEquals(true, model.storageAccountRequired());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
