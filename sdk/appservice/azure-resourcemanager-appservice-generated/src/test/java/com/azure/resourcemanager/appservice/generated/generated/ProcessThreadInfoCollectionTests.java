// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.ProcessThreadInfoInner;
import com.azure.resourcemanager.appservice.generated.models.ProcessThreadInfoCollection;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ProcessThreadInfoCollectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProcessThreadInfoCollection model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"identifier\":1133314001,\"href\":\"gcaxjymdqrfvgicx\",\"process\":\"llqgnsydksvj\",\"start_address\":\"xgdpivjkhcoscol\",\"current_priority\":373457155,\"priority_level\":\"sgzooefzsdttb\",\"base_priority\":1343508265,\"start_time\":\"2021-05-20T07:53:38Z\",\"total_processor_time\":\"wojvxv\",\"user_processor_time\":\"hrqxrqghotingzi\",\"state\":\"gygawyhpwmdk\",\"wait_reason\":\"gyelvyh\"},\"kind\":\"puqyrpubbkhcidc\",\"id\":\"wo\",\"name\":\"lkugzowgmmixfzau\",\"type\":\"gblnagjnp\"}],\"nextLink\":\"zhpqscuyileqjz\"}")
            .toObject(ProcessThreadInfoCollection.class);
        Assertions.assertEquals("puqyrpubbkhcidc", model.value().get(0).kind());
        Assertions.assertEquals("gcaxjymdqrfvgicx", model.value().get(0).href());
        Assertions.assertEquals("llqgnsydksvj", model.value().get(0).process());
        Assertions.assertEquals("xgdpivjkhcoscol", model.value().get(0).startAddress());
        Assertions.assertEquals(373457155, model.value().get(0).currentPriority());
        Assertions.assertEquals("sgzooefzsdttb", model.value().get(0).priorityLevel());
        Assertions.assertEquals(1343508265, model.value().get(0).basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T07:53:38Z"), model.value().get(0).startTime());
        Assertions.assertEquals("wojvxv", model.value().get(0).totalProcessorTime());
        Assertions.assertEquals("hrqxrqghotingzi", model.value().get(0).userProcessorTime());
        Assertions.assertEquals("gygawyhpwmdk", model.value().get(0).state());
        Assertions.assertEquals("gyelvyh", model.value().get(0).waitReason());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProcessThreadInfoCollection model = new ProcessThreadInfoCollection()
            .withValue(Arrays.asList(new ProcessThreadInfoInner().withKind("puqyrpubbkhcidc")
                .withHref("gcaxjymdqrfvgicx")
                .withProcess("llqgnsydksvj")
                .withStartAddress("xgdpivjkhcoscol")
                .withCurrentPriority(373457155)
                .withPriorityLevel("sgzooefzsdttb")
                .withBasePriority(1343508265)
                .withStartTime(OffsetDateTime.parse("2021-05-20T07:53:38Z"))
                .withTotalProcessorTime("wojvxv")
                .withUserProcessorTime("hrqxrqghotingzi")
                .withState("gygawyhpwmdk")
                .withWaitReason("gyelvyh")));
        model = BinaryData.fromObject(model).toObject(ProcessThreadInfoCollection.class);
        Assertions.assertEquals("puqyrpubbkhcidc", model.value().get(0).kind());
        Assertions.assertEquals("gcaxjymdqrfvgicx", model.value().get(0).href());
        Assertions.assertEquals("llqgnsydksvj", model.value().get(0).process());
        Assertions.assertEquals("xgdpivjkhcoscol", model.value().get(0).startAddress());
        Assertions.assertEquals(373457155, model.value().get(0).currentPriority());
        Assertions.assertEquals("sgzooefzsdttb", model.value().get(0).priorityLevel());
        Assertions.assertEquals(1343508265, model.value().get(0).basePriority());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T07:53:38Z"), model.value().get(0).startTime());
        Assertions.assertEquals("wojvxv", model.value().get(0).totalProcessorTime());
        Assertions.assertEquals("hrqxrqghotingzi", model.value().get(0).userProcessorTime());
        Assertions.assertEquals("gygawyhpwmdk", model.value().get(0).state());
        Assertions.assertEquals("gyelvyh", model.value().get(0).waitReason());
    }
}
