// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicies;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicy;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationPolicyClaim;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationProviderType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class OpenAuthenticationAccessPoliciesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OpenAuthenticationAccessPolicies model = BinaryData.fromString(
            "{\"policies\":{\"mitmtkcqixgqxs\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"bsgpdbhbdx\",\"value\":\"sox\"},{\"name\":\"wuungdvvddr\",\"value\":\"quyin\"},{\"name\":\"ttvo\",\"value\":\"rpeli\"}]},\"whvjbkwrvtflot\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"uvupdsafqaghw\",\"value\":\"mecqyi\"},{\"name\":\"jmvvkodkqffhuxo\",\"value\":\"tgzvzcfmwfogj\"},{\"name\":\"mtbpnhjo\",\"value\":\"vfz\"},{\"name\":\"krmptapyqees\",\"value\":\"npixhulfjl\"}]},\"kpelyg\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"wixlvnwznfxap\",\"value\":\"sllbdtr\"}]},\"vgaaymfkexhiwmkl\":{\"type\":\"AAD\",\"claims\":[{\"name\":\"llatbld\",\"value\":\"fhwni\"},{\"name\":\"xnainss\",\"value\":\"kzslylioguwshrmc\"},{\"name\":\"myghqtth\",\"value\":\"blwkqztqrnre\"},{\"name\":\"fmnrweevtun\",\"value\":\"clugvsjfpsy\"}]}}}")
            .toObject(OpenAuthenticationAccessPolicies.class);
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD, model.policies().get("mitmtkcqixgqxs").type());
        Assertions.assertEquals("bsgpdbhbdx", model.policies().get("mitmtkcqixgqxs").claims().get(0).name());
        Assertions.assertEquals("sox", model.policies().get("mitmtkcqixgqxs").claims().get(0).value());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OpenAuthenticationAccessPolicies model = new OpenAuthenticationAccessPolicies().withPolicies(
            mapOf("mitmtkcqixgqxs", new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim().withName("bsgpdbhbdx").withValue("sox"),
                    new OpenAuthenticationPolicyClaim().withName("wuungdvvddr").withValue("quyin"),
                    new OpenAuthenticationPolicyClaim().withName("ttvo").withValue("rpeli"))),
                "whvjbkwrvtflot",
                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                    .withClaims(Arrays.asList(
                        new OpenAuthenticationPolicyClaim().withName("uvupdsafqaghw").withValue("mecqyi"),
                        new OpenAuthenticationPolicyClaim().withName("jmvvkodkqffhuxo").withValue("tgzvzcfmwfogj"),
                        new OpenAuthenticationPolicyClaim().withName("mtbpnhjo").withValue("vfz"),
                        new OpenAuthenticationPolicyClaim().withName("krmptapyqees").withValue("npixhulfjl"))),
                "kpelyg",
                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                    .withClaims(Arrays
                        .asList(new OpenAuthenticationPolicyClaim().withName("wixlvnwznfxap").withValue("sllbdtr"))),
                "vgaaymfkexhiwmkl",
                new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                    .withClaims(
                        Arrays.asList(new OpenAuthenticationPolicyClaim().withName("llatbld").withValue("fhwni"),
                            new OpenAuthenticationPolicyClaim().withName("xnainss").withValue("kzslylioguwshrmc"),
                            new OpenAuthenticationPolicyClaim().withName("myghqtth").withValue("blwkqztqrnre"),
                            new OpenAuthenticationPolicyClaim().withName("fmnrweevtun").withValue("clugvsjfpsy")))));
        model = BinaryData.fromObject(model).toObject(OpenAuthenticationAccessPolicies.class);
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD, model.policies().get("mitmtkcqixgqxs").type());
        Assertions.assertEquals("bsgpdbhbdx", model.policies().get("mitmtkcqixgqxs").claims().get(0).name());
        Assertions.assertEquals("sox", model.policies().get("mitmtkcqixgqxs").claims().get(0).value());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
