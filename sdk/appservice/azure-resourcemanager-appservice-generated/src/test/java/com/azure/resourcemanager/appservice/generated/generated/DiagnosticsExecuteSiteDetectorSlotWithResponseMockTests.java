// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.appservice.generated.AppServiceManager;
import com.azure.resourcemanager.appservice.generated.models.DiagnosticDetectorResponse;
import com.azure.resourcemanager.appservice.generated.models.IssueType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiagnosticsExecuteSiteDetectorSlotWithResponseMockTests {
    @Test
    public void testExecuteSiteDetectorSlotWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"startTime\":\"2021-05-05T10:04:55Z\",\"endTime\":\"2021-07-20T16:12:04Z\",\"issueDetected\":true,\"detectorDefinition\":{\"displayName\":\"hslrbwwkbyw\",\"description\":\"hsodofsxjik\",\"rank\":29.913173225549738,\"isEnabled\":false},\"metrics\":[{\"name\":\"qwoggwcxdm\",\"unit\":\"uwldfahkyft\",\"startTime\":\"2021-06-25T08:05:27Z\",\"endTime\":\"2021-09-15T08:53:13Z\",\"timeGrain\":\"gopyckmncr\",\"values\":[{},{},{}]},{\"name\":\"djmda\",\"unit\":\"kgixfnrneya\",\"startTime\":\"2020-12-26T13:53:01Z\",\"endTime\":\"2021-06-15T06:00:38Z\",\"timeGrain\":\"wrqcfzokp\",\"values\":[{},{},{}]}],\"abnormalTimePeriods\":[{\"startTime\":\"2021-11-02T11:56:37Z\",\"endTime\":\"2021-07-08T08:15:04Z\",\"message\":\"umulhfqd\",\"source\":\"chahl\",\"priority\":17.808441526078745,\"metaData\":[[{},{},{},{}],[{},{},{}],[{},{},{},{}],[{},{}]],\"type\":\"UserIssue\",\"solutions\":[{},{},{}]},{\"startTime\":\"2021-03-05T19:18:28Z\",\"endTime\":\"2021-04-18T13:52:25Z\",\"message\":\"rbqpzdpu\",\"source\":\"wjmohqzzkplqmca\",\"priority\":52.35303954865261,\"metaData\":[[{},{},{},{}],[{},{},{},{}],[{},{}],[{},{}]],\"type\":\"PlatformIssue\",\"solutions\":[{},{},{}]},{\"startTime\":\"2021-11-29T18:47:23Z\",\"endTime\":\"2021-02-09T01:22:58Z\",\"message\":\"ugfwpv\",\"source\":\"ewbqaibkye\",\"priority\":34.782175811934934,\"metaData\":[[{},{},{},{}],[{},{}],[{}],[{},{},{}]],\"type\":\"UserIssue\",\"solutions\":[{},{},{},{}]},{\"startTime\":\"2021-09-30T22:05:07Z\",\"endTime\":\"2021-11-22T21:12:17Z\",\"message\":\"xcjqdvcieqzkuixf\",\"source\":\"hvecjhbttmhneqd\",\"priority\":41.49655650969064,\"metaData\":[[{}]],\"type\":\"RuntimeIssueDetected\",\"solutions\":[{},{}]}],\"data\":[[{\"name\":\"kna\",\"value\":\"seqonlj\"}],[{\"name\":\"ryqrrsjqt\",\"value\":\"eydmeuimlhyze\"},{\"name\":\"ivkzrvya\",\"value\":\"qgyui\"}]],\"responseMetaData\":{\"dataSource\":{\"instructions\":[\"jduzapnopotodprr\"],\"dataSourceUri\":[{},{},{}]}}},\"kind\":\"l\",\"id\":\"txjcbdpc\",\"name\":\"mzuwrcehfwce\",\"type\":\"l\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AppServiceManager manager = AppServiceManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DiagnosticDetectorResponse response = manager.diagnostics()
            .executeSiteDetectorSlotWithResponse("eotvnet", "ehnd", "pf", "ffdgfnaoe", "kgpkss",
                OffsetDateTime.parse("2021-09-20T17:29:33Z"), OffsetDateTime.parse("2021-09-26T17:10:19Z"), "kwxdgc",
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("l", response.kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-05T10:04:55Z"), response.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T16:12:04Z"), response.endTime());
        Assertions.assertEquals(true, response.issueDetected());
        Assertions.assertEquals("qwoggwcxdm", response.metrics().get(0).name());
        Assertions.assertEquals("uwldfahkyft", response.metrics().get(0).unit());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-25T08:05:27Z"), response.metrics().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-15T08:53:13Z"), response.metrics().get(0).endTime());
        Assertions.assertEquals("gopyckmncr", response.metrics().get(0).timeGrain());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-02T11:56:37Z"),
            response.abnormalTimePeriods().get(0).startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-08T08:15:04Z"),
            response.abnormalTimePeriods().get(0).endTime());
        Assertions.assertEquals("umulhfqd", response.abnormalTimePeriods().get(0).message());
        Assertions.assertEquals("chahl", response.abnormalTimePeriods().get(0).source());
        Assertions.assertEquals(17.808441526078745D, response.abnormalTimePeriods().get(0).priority());
        Assertions.assertEquals(IssueType.USER_ISSUE, response.abnormalTimePeriods().get(0).type());
        Assertions.assertEquals("kna", response.data().get(0).get(0).name());
        Assertions.assertEquals("seqonlj", response.data().get(0).get(0).value());
        Assertions.assertEquals("jduzapnopotodprr", response.responseMetadata().dataSource().instructions().get(0));
    }
}
