// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.fluent.models.WorkflowVersionProperties;
import com.azure.resourcemanager.appservice.generated.models.FlowAccessControlConfiguration;
import com.azure.resourcemanager.appservice.generated.models.FlowAccessControlConfigurationPolicy;
import com.azure.resourcemanager.appservice.generated.models.FlowEndpoints;
import com.azure.resourcemanager.appservice.generated.models.FlowEndpointsConfiguration;
import com.azure.resourcemanager.appservice.generated.models.IpAddress;
import com.azure.resourcemanager.appservice.generated.models.IpAddressRange;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicies;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationAccessPolicy;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationPolicyClaim;
import com.azure.resourcemanager.appservice.generated.models.OpenAuthenticationProviderType;
import com.azure.resourcemanager.appservice.generated.models.ParameterType;
import com.azure.resourcemanager.appservice.generated.models.ResourceReference;
import com.azure.resourcemanager.appservice.generated.models.WorkflowParameter;
import com.azure.resourcemanager.appservice.generated.models.WorkflowState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WorkflowVersionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkflowVersionProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"createdTime\":\"2021-05-23T09:14:49Z\",\"changedTime\":\"2021-08-03T09:31:41Z\",\"state\":\"Deleted\",\"version\":\"dudokoxq\",\"accessEndpoint\":\"ze\",\"endpointsConfiguration\":{\"workflow\":{\"outgoingIpAddresses\":[{\"address\":\"rgukqobo\"},{\"address\":\"ll\"}],\"accessEndpointIpAddresses\":[{\"address\":\"ufkr\"},{\"address\":\"bn\"},{\"address\":\"colozqlyput\"},{\"address\":\"dmdikufzqvvkujz\"}]},\"connector\":{\"outgoingIpAddresses\":[{\"address\":\"xkzhvfojcvnhpebu\"},{\"address\":\"wkysgqacbeauv\"},{\"address\":\"bdnmguifqjtox\"},{\"address\":\"bl\"}],\"accessEndpointIpAddresses\":[{\"address\":\"uugdarfumitjai\"}]}},\"accessControl\":{\"triggers\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"d\"},{\"addressRange\":\"vywbgmjrvrsqrj\"},{\"addressRange\":\"z\"},{\"addressRange\":\"rylcttv\"}],\"openAuthenticationPolicies\":{\"policies\":{\"v\":{\"type\":\"AAD\",\"claims\":[{},{},{}]},\"xoqaaqjblwqw\":{\"type\":\"AAD\",\"claims\":[{},{}]},\"eugcwtsztxos\":{\"type\":\"AAD\",\"claims\":[{},{},{},{}]},\"mqqfksq\":{\"type\":\"AAD\",\"claims\":[{},{}]}}}},\"contents\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"eohysdgkbaxyg\"},{\"addressRange\":\"tkrqiyu\"},{\"addressRange\":\"sjjqzt\"}],\"openAuthenticationPolicies\":{\"policies\":{\"otaaqyxkloabco\":{\"type\":\"AAD\",\"claims\":[{},{}]},\"j\":{\"type\":\"AAD\",\"claims\":[{}]},\"asv\":{\"type\":\"AAD\",\"claims\":[{}]}}}},\"actions\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"oli\"},{\"addressRange\":\"anklqclftpneou\"},{\"addressRange\":\"dnlbpnb\"},{\"addressRange\":\"ohnroa\"}],\"openAuthenticationPolicies\":{\"policies\":{\"wx\":{\"type\":\"AAD\",\"claims\":[{}]}}}},\"workflowManagement\":{\"allowedCallerIpAddresses\":[{\"addressRange\":\"hwfiyuofegrzfs\"}],\"openAuthenticationPolicies\":{\"policies\":{\"zotjbvhuidlod\":{\"type\":\"AAD\",\"claims\":[{}]},\"kkqvmmmw\":{\"type\":\"AAD\",\"claims\":[{},{},{},{}]}}}}},\"sku\":{\"name\":\"Premium\",\"plan\":{\"id\":\"uegym\",\"name\":\"nsmnjitxughlb\",\"type\":\"wodayipg\"}},\"integrationAccount\":{\"id\":\"ioecmbyoxpv\",\"name\":\"fchfuxuqpd\",\"type\":\"bokzdshhhdi\"},\"definition\":\"datazapzibm\",\"parameters\":{\"ouytsajjgvu\":{\"type\":\"NotSpecified\",\"value\":\"datazvfywspajakj\",\"metadata\":\"datapktbnmhxtmzzpa\",\"description\":\"srvsbkn\"}}}")
            .toObject(WorkflowVersionProperties.class);
        Assertions.assertEquals(WorkflowState.DELETED, model.state());
        Assertions.assertEquals("rgukqobo",
            model.endpointsConfiguration().workflow().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("ufkr",
            model.endpointsConfiguration().workflow().accessEndpointIpAddresses().get(0).address());
        Assertions.assertEquals("xkzhvfojcvnhpebu",
            model.endpointsConfiguration().connector().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("uugdarfumitjai",
            model.endpointsConfiguration().connector().accessEndpointIpAddresses().get(0).address());
        Assertions.assertEquals("d", model.accessControl().triggers().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl().triggers().openAuthenticationPolicies().policies().get("v").type());
        Assertions.assertEquals("eohysdgkbaxyg",
            model.accessControl().contents().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl().contents().openAuthenticationPolicies().policies().get("otaaqyxkloabco").type());
        Assertions.assertEquals("oli",
            model.accessControl().actions().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl().actions().openAuthenticationPolicies().policies().get("wx").type());
        Assertions.assertEquals("hwfiyuofegrzfs",
            model.accessControl().workflowManagement().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl()
                .workflowManagement()
                .openAuthenticationPolicies()
                .policies()
                .get("zotjbvhuidlod")
                .type());
        Assertions.assertEquals("ioecmbyoxpv", model.integrationAccount().id());
        Assertions.assertEquals(ParameterType.NOT_SPECIFIED, model.parameters().get("ouytsajjgvu").type());
        Assertions.assertEquals("srvsbkn", model.parameters().get("ouytsajjgvu").description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkflowVersionProperties model
            = new WorkflowVersionProperties().withState(WorkflowState.DELETED)
                .withEndpointsConfiguration(
                    new FlowEndpointsConfiguration()
                        .withWorkflow(
                            new FlowEndpoints()
                                .withOutgoingIpAddresses(Arrays.asList(new IpAddress().withAddress("rgukqobo"),
                                    new IpAddress().withAddress("ll")))
                                .withAccessEndpointIpAddresses(Arrays.asList(new IpAddress().withAddress("ufkr"),
                                    new IpAddress().withAddress("bn"), new IpAddress().withAddress("colozqlyput"),
                                    new IpAddress().withAddress("dmdikufzqvvkujz"))))
                        .withConnector(
                            new FlowEndpoints()
                                .withOutgoingIpAddresses(Arrays.asList(new IpAddress().withAddress("xkzhvfojcvnhpebu"),
                                    new IpAddress().withAddress("wkysgqacbeauv"),
                                    new IpAddress().withAddress("bdnmguifqjtox"), new IpAddress().withAddress("bl")))
                                .withAccessEndpointIpAddresses(
                                    Arrays.asList(new IpAddress().withAddress("uugdarfumitjai")))))
                .withAccessControl(
                    new FlowAccessControlConfiguration()
                        .withTriggers(
                            new FlowAccessControlConfigurationPolicy()
                                .withAllowedCallerIpAddresses(Arrays.asList(new IpAddressRange().withAddressRange("d"),
                                    new IpAddressRange().withAddressRange("vywbgmjrvrsqrj"),
                                    new IpAddressRange().withAddressRange("z"),
                                    new IpAddressRange().withAddressRange("rylcttv")))
                                .withOpenAuthenticationPolicies(new OpenAuthenticationAccessPolicies()
                                    .withPolicies(mapOf("v", new OpenAuthenticationAccessPolicy()
                                        .withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                            new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim())),
                                        "xoqaaqjblwqw",
                                        new OpenAuthenticationAccessPolicy()
                                            .withType(OpenAuthenticationProviderType.AAD)
                                            .withClaims(Arrays.asList(
                                                new OpenAuthenticationPolicyClaim(),
                                                new OpenAuthenticationPolicyClaim())),
                                        "eugcwtsztxos",
                                        new OpenAuthenticationAccessPolicy()
                                            .withType(OpenAuthenticationProviderType.AAD)
                                            .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                                new OpenAuthenticationPolicyClaim(),
                                                new OpenAuthenticationPolicyClaim(),
                                                new OpenAuthenticationPolicyClaim())),
                                        "mqqfksq",
                                        new OpenAuthenticationAccessPolicy()
                                            .withType(OpenAuthenticationProviderType.AAD)
                                            .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                                new OpenAuthenticationPolicyClaim()))))))
                        .withContents(
                            new FlowAccessControlConfigurationPolicy()
                                .withAllowedCallerIpAddresses(
                                    Arrays.asList(new IpAddressRange().withAddressRange("eohysdgkbaxyg"),
                                        new IpAddressRange()
                                            .withAddressRange("tkrqiyu"),
                                        new IpAddressRange().withAddressRange("sjjqzt")))
                                .withOpenAuthenticationPolicies(new OpenAuthenticationAccessPolicies()
                                    .withPolicies(mapOf("otaaqyxkloabco", new OpenAuthenticationAccessPolicy()
                                        .withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                            new OpenAuthenticationPolicyClaim())),
                                        "j",
                                        new OpenAuthenticationAccessPolicy()
                                            .withType(OpenAuthenticationProviderType.AAD)
                                            .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim())),
                                        "asv",
                                        new OpenAuthenticationAccessPolicy()
                                            .withType(OpenAuthenticationProviderType.AAD)
                                            .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim()))))))
                        .withActions(new FlowAccessControlConfigurationPolicy()
                            .withAllowedCallerIpAddresses(Arrays.asList(new IpAddressRange().withAddressRange("oli"),
                                new IpAddressRange().withAddressRange("anklqclftpneou"),
                                new IpAddressRange().withAddressRange("dnlbpnb"),
                                new IpAddressRange().withAddressRange("ohnroa")))
                            .withOpenAuthenticationPolicies(
                                new OpenAuthenticationAccessPolicies().withPolicies(mapOf("wx",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim()))))))
                        .withWorkflowManagement(new FlowAccessControlConfigurationPolicy()
                            .withAllowedCallerIpAddresses(
                                Arrays.asList(new IpAddressRange().withAddressRange("hwfiyuofegrzfs")))
                            .withOpenAuthenticationPolicies(
                                new OpenAuthenticationAccessPolicies().withPolicies(mapOf("zotjbvhuidlod",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim())),
                                    "kkqvmmmw",
                                    new OpenAuthenticationAccessPolicy().withType(OpenAuthenticationProviderType.AAD)
                                        .withClaims(Arrays.asList(new OpenAuthenticationPolicyClaim(),
                                            new OpenAuthenticationPolicyClaim(), new OpenAuthenticationPolicyClaim(),
                                            new OpenAuthenticationPolicyClaim())))))))
                .withIntegrationAccount(new ResourceReference().withId("ioecmbyoxpv"))
                .withDefinition("datazapzibm")
                .withParameters(mapOf("ouytsajjgvu",
                    new WorkflowParameter().withType(ParameterType.NOT_SPECIFIED)
                        .withValue("datazvfywspajakj")
                        .withMetadata("datapktbnmhxtmzzpa")
                        .withDescription("srvsbkn")));
        model = BinaryData.fromObject(model).toObject(WorkflowVersionProperties.class);
        Assertions.assertEquals(WorkflowState.DELETED, model.state());
        Assertions.assertEquals("rgukqobo",
            model.endpointsConfiguration().workflow().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("ufkr",
            model.endpointsConfiguration().workflow().accessEndpointIpAddresses().get(0).address());
        Assertions.assertEquals("xkzhvfojcvnhpebu",
            model.endpointsConfiguration().connector().outgoingIpAddresses().get(0).address());
        Assertions.assertEquals("uugdarfumitjai",
            model.endpointsConfiguration().connector().accessEndpointIpAddresses().get(0).address());
        Assertions.assertEquals("d", model.accessControl().triggers().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl().triggers().openAuthenticationPolicies().policies().get("v").type());
        Assertions.assertEquals("eohysdgkbaxyg",
            model.accessControl().contents().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl().contents().openAuthenticationPolicies().policies().get("otaaqyxkloabco").type());
        Assertions.assertEquals("oli",
            model.accessControl().actions().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl().actions().openAuthenticationPolicies().policies().get("wx").type());
        Assertions.assertEquals("hwfiyuofegrzfs",
            model.accessControl().workflowManagement().allowedCallerIpAddresses().get(0).addressRange());
        Assertions.assertEquals(OpenAuthenticationProviderType.AAD,
            model.accessControl()
                .workflowManagement()
                .openAuthenticationPolicies()
                .policies()
                .get("zotjbvhuidlod")
                .type());
        Assertions.assertEquals("ioecmbyoxpv", model.integrationAccount().id());
        Assertions.assertEquals(ParameterType.NOT_SPECIFIED, model.parameters().get("ouytsajjgvu").type());
        Assertions.assertEquals("srvsbkn", model.parameters().get("ouytsajjgvu").description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
