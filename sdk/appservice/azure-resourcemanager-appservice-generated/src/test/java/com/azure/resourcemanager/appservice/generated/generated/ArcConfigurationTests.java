// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.ArcConfiguration;
import com.azure.resourcemanager.appservice.generated.models.FrontEndConfiguration;
import com.azure.resourcemanager.appservice.generated.models.FrontEndServiceType;
import com.azure.resourcemanager.appservice.generated.models.StorageType;
import org.junit.jupiter.api.Assertions;

public final class ArcConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ArcConfiguration model = BinaryData.fromString(
            "{\"artifactsStorageType\":\"blobContainer\",\"artifactStorageClassName\":\"rl\",\"artifactStorageMountPath\":\"l\",\"artifactStorageNodeName\":\"metjs\",\"artifactStorageAccessMode\":\"ivfqbqnasdsy\",\"frontEndServiceConfiguration\":{\"kind\":\"NodePort\"},\"kubeConfig\":\"euscplhyv\"}")
            .toObject(ArcConfiguration.class);
        Assertions.assertEquals(StorageType.BLOB_CONTAINER, model.artifactsStorageType());
        Assertions.assertEquals("rl", model.artifactStorageClassName());
        Assertions.assertEquals("l", model.artifactStorageMountPath());
        Assertions.assertEquals("metjs", model.artifactStorageNodeName());
        Assertions.assertEquals("ivfqbqnasdsy", model.artifactStorageAccessMode());
        Assertions.assertEquals(FrontEndServiceType.NODE_PORT, model.frontEndServiceConfiguration().kind());
        Assertions.assertEquals("euscplhyv", model.kubeConfig());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ArcConfiguration model = new ArcConfiguration().withArtifactsStorageType(StorageType.BLOB_CONTAINER)
            .withArtifactStorageClassName("rl")
            .withArtifactStorageMountPath("l")
            .withArtifactStorageNodeName("metjs")
            .withArtifactStorageAccessMode("ivfqbqnasdsy")
            .withFrontEndServiceConfiguration(new FrontEndConfiguration().withKind(FrontEndServiceType.NODE_PORT))
            .withKubeConfig("euscplhyv");
        model = BinaryData.fromObject(model).toObject(ArcConfiguration.class);
        Assertions.assertEquals(StorageType.BLOB_CONTAINER, model.artifactsStorageType());
        Assertions.assertEquals("rl", model.artifactStorageClassName());
        Assertions.assertEquals("l", model.artifactStorageMountPath());
        Assertions.assertEquals("metjs", model.artifactStorageNodeName());
        Assertions.assertEquals("ivfqbqnasdsy", model.artifactStorageAccessMode());
        Assertions.assertEquals(FrontEndServiceType.NODE_PORT, model.frontEndServiceConfiguration().kind());
        Assertions.assertEquals("euscplhyv", model.kubeConfig());
    }
}
