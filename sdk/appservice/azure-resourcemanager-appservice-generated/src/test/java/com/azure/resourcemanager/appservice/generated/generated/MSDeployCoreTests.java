// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.appservice.generated.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.appservice.generated.models.MSDeployCore;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class MSDeployCoreTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        MSDeployCore model = BinaryData.fromString(
            "{\"packageUri\":\"opjsxvbb\",\"connectionString\":\"gikkmibnmdpi\",\"dbType\":\"pwtgzwmzhcmrloqa\",\"setParametersXmlFileUri\":\"tyzavkyjjl\",\"setParameters\":{\"ldvvdkoptyth\":\"mbjqbng\"},\"skipAppData\":false,\"appOffline\":false}")
            .toObject(MSDeployCore.class);
        Assertions.assertEquals("opjsxvbb", model.packageUri());
        Assertions.assertEquals("gikkmibnmdpi", model.connectionString());
        Assertions.assertEquals("pwtgzwmzhcmrloqa", model.dbType());
        Assertions.assertEquals("tyzavkyjjl", model.setParametersXmlFileUri());
        Assertions.assertEquals("mbjqbng", model.setParameters().get("ldvvdkoptyth"));
        Assertions.assertEquals(false, model.skipAppData());
        Assertions.assertEquals(false, model.appOffline());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        MSDeployCore model = new MSDeployCore().withPackageUri("opjsxvbb")
            .withConnectionString("gikkmibnmdpi")
            .withDbType("pwtgzwmzhcmrloqa")
            .withSetParametersXmlFileUri("tyzavkyjjl")
            .withSetParameters(mapOf("ldvvdkoptyth", "mbjqbng"))
            .withSkipAppData(false)
            .withAppOffline(false);
        model = BinaryData.fromObject(model).toObject(MSDeployCore.class);
        Assertions.assertEquals("opjsxvbb", model.packageUri());
        Assertions.assertEquals("gikkmibnmdpi", model.connectionString());
        Assertions.assertEquals("pwtgzwmzhcmrloqa", model.dbType());
        Assertions.assertEquals("tyzavkyjjl", model.setParametersXmlFileUri());
        Assertions.assertEquals("mbjqbng", model.setParameters().get("ldvvdkoptyth"));
        Assertions.assertEquals(false, model.skipAppData());
        Assertions.assertEquals(false, model.appOffline());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
