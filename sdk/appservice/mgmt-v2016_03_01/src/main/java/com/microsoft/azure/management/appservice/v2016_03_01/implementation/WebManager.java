/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2016_03_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.appservice.v2016_03_01.Certificates;
import com.microsoft.azure.management.appservice.v2016_03_01.DeletedWebApps;
import com.microsoft.azure.management.appservice.v2016_03_01.Diagnostics;
import com.microsoft.azure.management.appservice.v2016_03_01.Providers;
import com.microsoft.azure.management.appservice.v2016_03_01.Recommendations;
import com.microsoft.azure.management.appservice.v2016_03_01.ResourceHealthMetadatas;
import com.microsoft.azure.management.appservice.v2016_03_01.BillingMeters;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure Web resource management.
 */
public final class WebManager extends ManagerCore<WebManager, WebSiteManagementClientImpl> {
    private Certificates certificates;
    private DeletedWebApps deletedWebApps;
    private Diagnostics diagnostics;
    private Providers providers;
    private Recommendations recommendations;
    private ResourceHealthMetadatas resourceHealthMetadatas;
    private BillingMeters billingMeters;
    /**
    * Get a Configurable instance that can be used to create WebManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new WebManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of WebManager that exposes Web resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the WebManager
    */
    public static WebManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new WebManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of WebManager that exposes Web resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the WebManager
    */
    public static WebManager authenticate(RestClient restClient, String subscriptionId) {
        return new WebManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of WebManager that exposes Web management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing Web management API entry points that work across subscriptions
        */
        WebManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage Certificates.
     */
    public Certificates certificates() {
        if (this.certificates == null) {
            this.certificates = new CertificatesImpl(this);
        }
        return this.certificates;
    }

    /**
     * @return Entry point to manage DeletedWebApps.
     */
    public DeletedWebApps deletedWebApps() {
        if (this.deletedWebApps == null) {
            this.deletedWebApps = new DeletedWebAppsImpl(this);
        }
        return this.deletedWebApps;
    }

    /**
     * @return Entry point to manage Diagnostics.
     */
    public Diagnostics diagnostics() {
        if (this.diagnostics == null) {
            this.diagnostics = new DiagnosticsImpl(this);
        }
        return this.diagnostics;
    }

    /**
     * @return Entry point to manage Providers.
     */
    public Providers providers() {
        if (this.providers == null) {
            this.providers = new ProvidersImpl(this);
        }
        return this.providers;
    }

    /**
     * @return Entry point to manage Recommendations.
     */
    public Recommendations recommendations() {
        if (this.recommendations == null) {
            this.recommendations = new RecommendationsImpl(this);
        }
        return this.recommendations;
    }

    /**
     * @return Entry point to manage ResourceHealthMetadatas.
     */
    public ResourceHealthMetadatas resourceHealthMetadatas() {
        if (this.resourceHealthMetadatas == null) {
            this.resourceHealthMetadatas = new ResourceHealthMetadatasImpl(this);
        }
        return this.resourceHealthMetadatas;
    }

    /**
     * @return Entry point to manage BillingMeters.
     */
    public BillingMeters billingMeters() {
        if (this.billingMeters == null) {
            this.billingMeters = new BillingMetersImpl(this);
        }
        return this.billingMeters;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public WebManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return WebManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private WebManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new WebSiteManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
