/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.management.appservice.v2020_09_01.DiagnosticAnalysis;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import java.util.List;
import com.microsoft.azure.management.appservice.v2020_09_01.AbnormalTimePeriod;
import org.joda.time.DateTime;
import com.microsoft.azure.management.appservice.v2020_09_01.AnalysisData;
import com.microsoft.azure.management.appservice.v2020_09_01.SystemData;

class DiagnosticAnalysisImpl extends WrapperImpl<DiagnosticAnalysisInner> implements DiagnosticAnalysis {
    private final AppServiceManager manager;
    DiagnosticAnalysisImpl(DiagnosticAnalysisInner inner, AppServiceManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public AppServiceManager manager() {
        return this.manager;
    }

    @Override
    public List<AbnormalTimePeriod> abnormalTimePeriods() {
        return this.inner().abnormalTimePeriods();
    }

    @Override
    public DateTime endTime() {
        return this.inner().endTime();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public List<DetectorDefinitionInner> nonCorrelatedDetectors() {
        return this.inner().nonCorrelatedDetectors();
    }

    @Override
    public List<AnalysisData> payload() {
        return this.inner().payload();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

}
