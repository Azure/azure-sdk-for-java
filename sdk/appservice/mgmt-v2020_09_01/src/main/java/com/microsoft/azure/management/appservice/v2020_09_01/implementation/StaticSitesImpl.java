/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSites;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteARMResource;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteUserInvitationResponseResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StringDictionary;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteUserInvitationRequestResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteResetPropertiesARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSitesWorkflowPreview;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSitesWorkflowPreviewRequest;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteUserARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteBuildARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteFunctionOverviewARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteCustomDomainOverviewARMResource;

class StaticSitesImpl extends GroupableResourcesCoreImpl<StaticSiteARMResource, StaticSiteARMResourceImpl, StaticSiteARMResourceInner, StaticSitesInner, AppServiceManager>  implements StaticSites {
    protected StaticSitesImpl(AppServiceManager manager) {
        super(manager.inner().staticSites(), manager);
    }

    @Override
    protected Observable<StaticSiteARMResourceInner> getInnerAsync(String resourceGroupName, String name) {
        StaticSitesInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        StaticSitesInner client = this.inner();
        return client.deleteStaticSiteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteStaticSiteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<StaticSiteARMResource> listByResourceGroup(String resourceGroupName) {
        StaticSitesInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<StaticSiteARMResource> listByResourceGroupAsync(String resourceGroupName) {
        StaticSitesInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<StaticSiteARMResourceInner>, Iterable<StaticSiteARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteARMResourceInner> call(Page<StaticSiteARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteARMResourceInner, StaticSiteARMResource>() {
            @Override
            public StaticSiteARMResource call(StaticSiteARMResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<StaticSiteARMResource> list() {
        StaticSitesInner client = this.inner();
        return this.wrapList(client.list());
    }

    @Override
    public Observable<StaticSiteARMResource> listAsync() {
        StaticSitesInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<StaticSiteARMResourceInner>, Iterable<StaticSiteARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteARMResourceInner> call(Page<StaticSiteARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteARMResourceInner, StaticSiteARMResource>() {
            @Override
            public StaticSiteARMResource call(StaticSiteARMResourceInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public StaticSiteARMResourceImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<StaticSiteUserInvitationResponseResource> createUserRolesInvitationLinkAsync(String resourceGroupName, String name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope) {
        StaticSitesInner client = this.inner();
        return client.createUserRolesInvitationLinkAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope)
        .map(new Func1<StaticSiteUserInvitationResponseResourceInner, StaticSiteUserInvitationResponseResource>() {
            @Override
            public StaticSiteUserInvitationResponseResource call(StaticSiteUserInvitationResponseResourceInner inner) {
                return new StaticSiteUserInvitationResponseResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable detachStaticSiteAsync(String resourceGroupName, String name) {
        StaticSitesInner client = this.inner();
        return client.detachStaticSiteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<StringDictionary> listStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteFunctionAppSettingsAsync(resourceGroupName, name)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> listStaticSiteSecretsAsync(String resourceGroupName, String name) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteSecretsAsync(resourceGroupName, name)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable resetStaticSiteApiKeyAsync(String resourceGroupName, String name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope) {
        StaticSitesInner client = this.inner();
        return client.resetStaticSiteApiKeyAsync(resourceGroupName, name, resetPropertiesEnvelope).toCompletable();
    }

    @Override
    protected StaticSiteARMResourceImpl wrapModel(StaticSiteARMResourceInner inner) {
        return  new StaticSiteARMResourceImpl(inner.name(), inner, manager());
    }

    @Override
    protected StaticSiteARMResourceImpl wrapModel(String name) {
        return new StaticSiteARMResourceImpl(name, new StaticSiteARMResourceInner(), this.manager());
    }

    @Override
    public StaticSiteCustomDomainOverviewARMResourceImpl defineCustomDomain(String name) {
        return wrapCustomDomainModel(name);
    }

    private StaticSiteCustomDomainOverviewARMResourceImpl wrapCustomDomainModel(String name) {
        return new StaticSiteCustomDomainOverviewARMResourceImpl(name, this.manager());
    }

    private StaticSiteUserARMResourceImpl wrapStaticSiteUserARMResourceModel(StaticSiteUserARMResourceInner inner) {
        return  new StaticSiteUserARMResourceImpl(inner, manager());
    }

    private StaticSiteBuildARMResourceImpl wrapStaticSiteBuildARMResourceModel(StaticSiteBuildARMResourceInner inner) {
        return  new StaticSiteBuildARMResourceImpl(inner, manager());
    }

    private StaticSiteFunctionOverviewARMResourceImpl wrapStaticSiteFunctionOverviewARMResourceModel(StaticSiteFunctionOverviewARMResourceInner inner) {
        return  new StaticSiteFunctionOverviewARMResourceImpl(inner, manager());
    }

    private StaticSiteCustomDomainOverviewARMResourceImpl wrapStaticSiteCustomDomainOverviewARMResourceModel(StaticSiteCustomDomainOverviewARMResourceInner inner) {
        return  new StaticSiteCustomDomainOverviewARMResourceImpl(inner, manager());
    }

    private Observable<StaticSiteBuildARMResourceInner> getStaticSiteBuildARMResourceInnerUsingStaticSitesInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String name = IdParsingUtils.getValueFromIdByName(id, "staticSites");
        String prId = IdParsingUtils.getValueFromIdByName(id, "builds");
        StaticSitesInner client = this.inner();
        return client.getStaticSiteBuildAsync(resourceGroupName, name, prId);
    }

    @Override
    public Observable<StaticSitesWorkflowPreview> previewWorkflowAsync(String location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest) {
        StaticSitesInner client = this.inner();
        return client.previewWorkflowAsync(location, staticSitesWorkflowPreviewRequest)
        .map(new Func1<StaticSitesWorkflowPreviewInner, StaticSitesWorkflowPreview>() {
            @Override
            public StaticSitesWorkflowPreview call(StaticSitesWorkflowPreviewInner inner) {
                return new StaticSitesWorkflowPreviewImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StaticSiteUserARMResource> listStaticSiteUsersAsync(final String resourceGroupName, final String name, final String authprovider) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteUsersAsync(resourceGroupName, name, authprovider)
        .flatMapIterable(new Func1<Page<StaticSiteUserARMResourceInner>, Iterable<StaticSiteUserARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteUserARMResourceInner> call(Page<StaticSiteUserARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteUserARMResourceInner, StaticSiteUserARMResource>() {
            @Override
            public StaticSiteUserARMResource call(StaticSiteUserARMResourceInner inner) {
                return new StaticSiteUserARMResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Completable deleteStaticSiteUserAsync(String resourceGroupName, String name, String authprovider, String userid) {
        StaticSitesInner client = this.inner();
        return client.deleteStaticSiteUserAsync(resourceGroupName, name, authprovider, userid).toCompletable();
    }

    @Override
    public Observable<StaticSiteBuildARMResource> getStaticSiteBuildAsync(String resourceGroupName, String name, String prId) {
        StaticSitesInner client = this.inner();
        return client.getStaticSiteBuildAsync(resourceGroupName, name, prId)
        .flatMap(new Func1<StaticSiteBuildARMResourceInner, Observable<StaticSiteBuildARMResource>>() {
            @Override
            public Observable<StaticSiteBuildARMResource> call(StaticSiteBuildARMResourceInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((StaticSiteBuildARMResource)wrapStaticSiteBuildARMResourceModel(inner));
                }
            }
       });
    }

    @Override
    public Observable<StaticSiteBuildARMResource> getStaticSiteBuildsAsync(final String resourceGroupName, final String name) {
        StaticSitesInner client = this.inner();
        return client.getStaticSiteBuildsAsync(resourceGroupName, name)
        .flatMapIterable(new Func1<Page<StaticSiteBuildARMResourceInner>, Iterable<StaticSiteBuildARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteBuildARMResourceInner> call(Page<StaticSiteBuildARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteBuildARMResourceInner, StaticSiteBuildARMResource>() {
            @Override
            public StaticSiteBuildARMResource call(StaticSiteBuildARMResourceInner inner) {
                return wrapStaticSiteBuildARMResourceModel(inner);
            }
        });
    }

    @Override
    public Completable deleteStaticSiteBuildAsync(String resourceGroupName, String name, String prId) {
        StaticSitesInner client = this.inner();
        return client.deleteStaticSiteBuildAsync(resourceGroupName, name, prId).toCompletable();
    }

    @Override
    public Observable<StringDictionary> listStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteBuildFunctionAppSettingsAsync(resourceGroupName, name, prId)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> createOrUpdateStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId, StringDictionaryInner appSettings) {
        StaticSitesInner client = this.inner();
        return client.createOrUpdateStaticSiteBuildFunctionAppSettingsAsync(resourceGroupName, name, prId, appSettings)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StringDictionary> createOrUpdateStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        StaticSitesInner client = this.inner();
        return client.createOrUpdateStaticSiteFunctionAppSettingsAsync(resourceGroupName, name, appSettings)
        .map(new Func1<StringDictionaryInner, StringDictionary>() {
            @Override
            public StringDictionary call(StringDictionaryInner inner) {
                return new StringDictionaryImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StaticSiteFunctionOverviewARMResource> listStaticSiteBuildFunctionsAsync(final String resourceGroupName, final String name, final String prId) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteBuildFunctionsAsync(resourceGroupName, name, prId)
        .flatMapIterable(new Func1<Page<StaticSiteFunctionOverviewARMResourceInner>, Iterable<StaticSiteFunctionOverviewARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteFunctionOverviewARMResourceInner> call(Page<StaticSiteFunctionOverviewARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteFunctionOverviewARMResourceInner, StaticSiteFunctionOverviewARMResource>() {
            @Override
            public StaticSiteFunctionOverviewARMResource call(StaticSiteFunctionOverviewARMResourceInner inner) {
                return wrapStaticSiteFunctionOverviewARMResourceModel(inner);
            }
        });
    }

    @Override
    public Observable<StaticSiteFunctionOverviewARMResource> listStaticSiteFunctionsAsync(final String resourceGroupName, final String name) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteFunctionsAsync(resourceGroupName, name)
        .flatMapIterable(new Func1<Page<StaticSiteFunctionOverviewARMResourceInner>, Iterable<StaticSiteFunctionOverviewARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteFunctionOverviewARMResourceInner> call(Page<StaticSiteFunctionOverviewARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteFunctionOverviewARMResourceInner, StaticSiteFunctionOverviewARMResource>() {
            @Override
            public StaticSiteFunctionOverviewARMResource call(StaticSiteFunctionOverviewARMResourceInner inner) {
                return new StaticSiteFunctionOverviewARMResourceImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<StaticSiteCustomDomainOverviewARMResource> listStaticSiteCustomDomainsAsync(final String resourceGroupName, final String name) {
        StaticSitesInner client = this.inner();
        return client.listStaticSiteCustomDomainsAsync(resourceGroupName, name)
        .flatMapIterable(new Func1<Page<StaticSiteCustomDomainOverviewARMResourceInner>, Iterable<StaticSiteCustomDomainOverviewARMResourceInner>>() {
            @Override
            public Iterable<StaticSiteCustomDomainOverviewARMResourceInner> call(Page<StaticSiteCustomDomainOverviewARMResourceInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StaticSiteCustomDomainOverviewARMResourceInner, StaticSiteCustomDomainOverviewARMResource>() {
            @Override
            public StaticSiteCustomDomainOverviewARMResource call(StaticSiteCustomDomainOverviewARMResourceInner inner) {
                return wrapStaticSiteCustomDomainOverviewARMResourceModel(inner);
            }
        });
    }

    @Override
    public Completable deleteStaticSiteCustomDomainAsync(String resourceGroupName, String name, String domainName) {
        StaticSitesInner client = this.inner();
        return client.deleteStaticSiteCustomDomainAsync(resourceGroupName, name, domainName).toCompletable();
    }

    @Override
    public Completable validateCustomDomainCanBeAddedToStaticSiteAsync(String resourceGroupName, String name, String domainName) {
        StaticSitesInner client = this.inner();
        return client.validateCustomDomainCanBeAddedToStaticSiteAsync(resourceGroupName, name, domainName).toCompletable();
    }

}
