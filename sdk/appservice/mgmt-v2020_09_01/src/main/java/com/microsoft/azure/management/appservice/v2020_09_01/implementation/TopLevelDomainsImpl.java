/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * jkl
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.appservice.v2020_09_01.TopLevelDomains;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.appservice.v2020_09_01.TopLevelDomain;
import com.microsoft.azure.management.appservice.v2020_09_01.TldLegalAgreement;
import com.microsoft.azure.management.appservice.v2020_09_01.TopLevelDomainAgreementOption;
import com.microsoft.azure.arm.utils.PagedListConverter;

class TopLevelDomainsImpl extends WrapperImpl<TopLevelDomainsInner> implements TopLevelDomains {
    private PagedListConverter<TopLevelDomainInner, TopLevelDomain> converter;
    private final AppServiceManager manager;

    TopLevelDomainsImpl(AppServiceManager manager) {
        super(manager.inner().topLevelDomains());
        this.manager = manager;
        this.converter = new PagedListConverter<TopLevelDomainInner, TopLevelDomain>() {
            @Override
            public Observable<TopLevelDomain> typeConvertAsync(TopLevelDomainInner inner) {
                return Observable.just((TopLevelDomain) wrapModel(inner));
            }
        };
    }

    public AppServiceManager manager() {
        return this.manager;
    }

    private TopLevelDomainImpl wrapModel(TopLevelDomainInner inner) {
        return  new TopLevelDomainImpl(inner, manager());
    }

    @Override
    public Observable<TopLevelDomain> getAsync(String name) {
        TopLevelDomainsInner client = this.inner();
        return client.getAsync(name)
        .map(new Func1<TopLevelDomainInner, TopLevelDomain>() {
            @Override
            public TopLevelDomain call(TopLevelDomainInner inner) {
                return new TopLevelDomainImpl(inner, manager());
            }
        });
    }

    @Override
    public Observable<TldLegalAgreement> listAgreementsAsync(final String name, final TopLevelDomainAgreementOption agreementOption) {
        TopLevelDomainsInner client = this.inner();
        return client.listAgreementsAsync(name, agreementOption)
        .flatMapIterable(new Func1<Page<TldLegalAgreementInner>, Iterable<TldLegalAgreementInner>>() {
            @Override
            public Iterable<TldLegalAgreementInner> call(Page<TldLegalAgreementInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TldLegalAgreementInner, TldLegalAgreement>() {
            @Override
            public TldLegalAgreement call(TldLegalAgreementInner inner) {
                return new TldLegalAgreementImpl(inner, manager());
            }
        });
    }

    @Override
    public PagedList<TopLevelDomain> list() {
        TopLevelDomainsInner client = this.inner();
        return converter.convert(client.list());
    }

    @Override
    public Observable<TopLevelDomain> listAsync() {
        TopLevelDomainsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<TopLevelDomainInner>, Iterable<TopLevelDomainInner>>() {
            @Override
            public Iterable<TopLevelDomainInner> call(Page<TopLevelDomainInner> page) {
                return page.items();
            }
        })
        .map(new Func1<TopLevelDomainInner, TopLevelDomain>() {
            @Override
            public TopLevelDomain call(TopLevelDomainInner inner) {
                return wrapModel(inner);
            }
        });
    }

}
