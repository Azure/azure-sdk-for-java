/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.management.appservice.v2020_09_01.ServerfarmVnetGateway;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.appservice.v2020_09_01.SystemData;

class ServerfarmVnetGatewayImpl extends CreatableUpdatableImpl<ServerfarmVnetGateway, VnetGatewayInner, ServerfarmVnetGatewayImpl> implements ServerfarmVnetGateway, ServerfarmVnetGateway.Update {
    private final AppServiceManager manager;
    private String resourceGroupName;
    private String name;
    private String vnetName;
    private String gatewayName;

    ServerfarmVnetGatewayImpl(String name, AppServiceManager manager) {
        super(name, new VnetGatewayInner());
        this.manager = manager;
        // Set resource name
        this.gatewayName = name;
        //
    }

    ServerfarmVnetGatewayImpl(VnetGatewayInner inner, AppServiceManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.gatewayName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "serverfarms");
        this.vnetName = IdParsingUtils.getValueFromIdByName(inner.id(), "virtualNetworkConnections");
        this.gatewayName = IdParsingUtils.getValueFromIdByName(inner.id(), "gateways");
        //
    }

    @Override
    public AppServiceManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ServerfarmVnetGateway> createResourceAsync() {
        AppServicePlansInner client = this.manager().inner().appServicePlans();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<ServerfarmVnetGateway> updateResourceAsync() {
        AppServicePlansInner client = this.manager().inner().appServicePlans();
        return client.updateVnetGatewayAsync(this.resourceGroupName, this.name, this.vnetName, this.gatewayName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<VnetGatewayInner> getInnerAsync() {
        AppServicePlansInner client = this.manager().inner().appServicePlans();
        return client.getVnetGatewayAsync(this.resourceGroupName, this.name, this.vnetName, this.gatewayName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String vnetName() {
        return this.inner().vnetName();
    }

    @Override
    public String vpnPackageUri() {
        return this.inner().vpnPackageUri();
    }

    @Override
    public ServerfarmVnetGatewayImpl withKind(String kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public ServerfarmVnetGatewayImpl withSystemData(SystemData systemData) {
        this.inner().withSystemData(systemData);
        return this;
    }

    @Override
    public ServerfarmVnetGatewayImpl withVnetName(String vnetName) {
        this.inner().withVnetName(vnetName);
        return this;
    }

}
