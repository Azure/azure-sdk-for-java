/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.AzureEnvironment;
import com.microsoft.azure.AzureResponseBuilder;
import com.microsoft.azure.credentials.AzureTokenCredentials;
import com.microsoft.azure.management.apigeneration.Beta;
import com.microsoft.azure.management.apigeneration.Beta.SinceVersion;
import com.microsoft.azure.arm.resources.AzureConfigurable;
import com.microsoft.azure.serializer.AzureJacksonAdapter;
import com.microsoft.rest.RestClient;
import com.microsoft.azure.management.appservice.v2020_09_01.AppServiceCertificateOrders;
import com.microsoft.azure.management.appservice.v2020_09_01.CertificateRegistrationProviders;
import com.microsoft.azure.management.appservice.v2020_09_01.Domains;
import com.microsoft.azure.management.appservice.v2020_09_01.TopLevelDomains;
import com.microsoft.azure.management.appservice.v2020_09_01.DomainRegistrationProviders;
import com.microsoft.azure.management.appservice.v2020_09_01.Certificates;
import com.microsoft.azure.management.appservice.v2020_09_01.DeletedWebApps;
import com.microsoft.azure.management.appservice.v2020_09_01.Diagnostics;
import com.microsoft.azure.management.appservice.v2020_09_01.Providers;
import com.microsoft.azure.management.appservice.v2020_09_01.Recommendations;
import com.microsoft.azure.management.appservice.v2020_09_01.WebApps;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSites;
import com.microsoft.azure.management.appservice.v2020_09_01.AppServiceEnvironments;
import com.microsoft.azure.management.appservice.v2020_09_01.AppServicePlans;
import com.microsoft.azure.management.appservice.v2020_09_01.ResourceHealthMetadatas;
import com.microsoft.azure.arm.resources.implementation.AzureConfigurableCoreImpl;
import com.microsoft.azure.arm.resources.implementation.ManagerCore;

/**
 * Entry point to Azure AppService resource management.
 */
public final class AppServiceManager extends ManagerCore<AppServiceManager, WebSiteManagementClientImpl> {
    private AppServiceCertificateOrders appServiceCertificateOrders;
    private CertificateRegistrationProviders certificateRegistrationProviders;
    private Domains domains;
    private TopLevelDomains topLevelDomains;
    private DomainRegistrationProviders domainRegistrationProviders;
    private Certificates certificates;
    private DeletedWebApps deletedWebApps;
    private Diagnostics diagnostics;
    private Providers providers;
    private Recommendations recommendations;
    private WebApps webApps;
    private StaticSites staticSites;
    private AppServiceEnvironments appServiceEnvironments;
    private AppServicePlans appServicePlans;
    private ResourceHealthMetadatas resourceHealthMetadatas;
    /**
    * Get a Configurable instance that can be used to create AppServiceManager with optional configuration.
    *
    * @return the instance allowing configurations
    */
    public static Configurable configure() {
        return new AppServiceManager.ConfigurableImpl();
    }
    /**
    * Creates an instance of AppServiceManager that exposes AppService resource management API entry points.
    *
    * @param credentials the credentials to use
    * @param subscriptionId the subscription UUID
    * @return the AppServiceManager
    */
    public static AppServiceManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
        return new AppServiceManager(new RestClient.Builder()
            .withBaseUrl(credentials.environment(), AzureEnvironment.Endpoint.RESOURCE_MANAGER)
            .withCredentials(credentials)
            .withSerializerAdapter(new AzureJacksonAdapter())
            .withResponseBuilderFactory(new AzureResponseBuilder.Factory())
            .build(), subscriptionId);
    }
    /**
    * Creates an instance of AppServiceManager that exposes AppService resource management API entry points.
    *
    * @param restClient the RestClient to be used for API calls.
    * @param subscriptionId the subscription UUID
    * @return the AppServiceManager
    */
    public static AppServiceManager authenticate(RestClient restClient, String subscriptionId) {
        return new AppServiceManager(restClient, subscriptionId);
    }
    /**
    * The interface allowing configurations to be set.
    */
    public interface Configurable extends AzureConfigurable<Configurable> {
        /**
        * Creates an instance of AppServiceManager that exposes AppService management API entry points.
        *
        * @param credentials the credentials to use
        * @param subscriptionId the subscription UUID
        * @return the interface exposing AppService management API entry points that work across subscriptions
        */
        AppServiceManager authenticate(AzureTokenCredentials credentials, String subscriptionId);
    }

    /**
     * @return Entry point to manage AppServiceCertificateOrders.
     */
    public AppServiceCertificateOrders appServiceCertificateOrders() {
        if (this.appServiceCertificateOrders == null) {
            this.appServiceCertificateOrders = new AppServiceCertificateOrdersImpl(this);
        }
        return this.appServiceCertificateOrders;
    }

    /**
     * @return Entry point to manage CertificateRegistrationProviders.
     */
    public CertificateRegistrationProviders certificateRegistrationProviders() {
        if (this.certificateRegistrationProviders == null) {
            this.certificateRegistrationProviders = new CertificateRegistrationProvidersImpl(this);
        }
        return this.certificateRegistrationProviders;
    }

    /**
     * @return Entry point to manage Domains.
     */
    public Domains domains() {
        if (this.domains == null) {
            this.domains = new DomainsImpl(this);
        }
        return this.domains;
    }

    /**
     * @return Entry point to manage TopLevelDomains.
     */
    public TopLevelDomains topLevelDomains() {
        if (this.topLevelDomains == null) {
            this.topLevelDomains = new TopLevelDomainsImpl(this);
        }
        return this.topLevelDomains;
    }

    /**
     * @return Entry point to manage DomainRegistrationProviders.
     */
    public DomainRegistrationProviders domainRegistrationProviders() {
        if (this.domainRegistrationProviders == null) {
            this.domainRegistrationProviders = new DomainRegistrationProvidersImpl(this);
        }
        return this.domainRegistrationProviders;
    }

    /**
     * @return Entry point to manage Certificates.
     */
    public Certificates certificates() {
        if (this.certificates == null) {
            this.certificates = new CertificatesImpl(this);
        }
        return this.certificates;
    }

    /**
     * @return Entry point to manage DeletedWebApps.
     */
    public DeletedWebApps deletedWebApps() {
        if (this.deletedWebApps == null) {
            this.deletedWebApps = new DeletedWebAppsImpl(this);
        }
        return this.deletedWebApps;
    }

    /**
     * @return Entry point to manage Diagnostics.
     */
    public Diagnostics diagnostics() {
        if (this.diagnostics == null) {
            this.diagnostics = new DiagnosticsImpl(this);
        }
        return this.diagnostics;
    }

    /**
     * @return Entry point to manage Providers.
     */
    public Providers providers() {
        if (this.providers == null) {
            this.providers = new ProvidersImpl(this);
        }
        return this.providers;
    }

    /**
     * @return Entry point to manage Recommendations.
     */
    public Recommendations recommendations() {
        if (this.recommendations == null) {
            this.recommendations = new RecommendationsImpl(this);
        }
        return this.recommendations;
    }

    /**
     * @return Entry point to manage WebApps.
     */
    public WebApps webApps() {
        if (this.webApps == null) {
            this.webApps = new WebAppsImpl(this);
        }
        return this.webApps;
    }

    /**
     * @return Entry point to manage StaticSites.
     */
    public StaticSites staticSites() {
        if (this.staticSites == null) {
            this.staticSites = new StaticSitesImpl(this);
        }
        return this.staticSites;
    }

    /**
     * @return Entry point to manage AppServiceEnvironments.
     */
    public AppServiceEnvironments appServiceEnvironments() {
        if (this.appServiceEnvironments == null) {
            this.appServiceEnvironments = new AppServiceEnvironmentsImpl(this);
        }
        return this.appServiceEnvironments;
    }

    /**
     * @return Entry point to manage AppServicePlans.
     */
    public AppServicePlans appServicePlans() {
        if (this.appServicePlans == null) {
            this.appServicePlans = new AppServicePlansImpl(this);
        }
        return this.appServicePlans;
    }

    /**
     * @return Entry point to manage ResourceHealthMetadatas.
     */
    public ResourceHealthMetadatas resourceHealthMetadatas() {
        if (this.resourceHealthMetadatas == null) {
            this.resourceHealthMetadatas = new ResourceHealthMetadatasImpl(this);
        }
        return this.resourceHealthMetadatas;
    }

    /**
    * The implementation for Configurable interface.
    */
    private static final class ConfigurableImpl extends AzureConfigurableCoreImpl<Configurable> implements Configurable {
        public AppServiceManager authenticate(AzureTokenCredentials credentials, String subscriptionId) {
           return AppServiceManager.authenticate(buildRestClient(credentials), subscriptionId);
        }
     }
    private AppServiceManager(RestClient restClient, String subscriptionId) {
        super(
            restClient,
            subscriptionId,
            new WebSiteManagementClientImpl(restClient).withSubscriptionId(subscriptionId));
    }
}
