/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * The Login model.
 */
@JsonFlatten
public class Login extends ProxyOnlyResource {
    /**
     * The routes property.
     */
    @JsonProperty(value = "properties.routes")
    private LoginRoutes routes;

    /**
     * The tokenStore property.
     */
    @JsonProperty(value = "properties.tokenStore")
    private TokenStore tokenStore;

    /**
     * The preserveUrlFragmentsForLogins property.
     */
    @JsonProperty(value = "properties.preserveUrlFragmentsForLogins")
    private Boolean preserveUrlFragmentsForLogins;

    /**
     * The allowedExternalRedirectUrls property.
     */
    @JsonProperty(value = "properties.allowedExternalRedirectUrls")
    private List<String> allowedExternalRedirectUrls;

    /**
     * The cookieExpiration property.
     */
    @JsonProperty(value = "properties.cookieExpiration")
    private CookieExpiration cookieExpiration;

    /**
     * The nonce property.
     */
    @JsonProperty(value = "properties.nonce")
    private Nonce nonce;

    /**
     * Get the routes value.
     *
     * @return the routes value
     */
    public LoginRoutes routes() {
        return this.routes;
    }

    /**
     * Set the routes value.
     *
     * @param routes the routes value to set
     * @return the Login object itself.
     */
    public Login withRoutes(LoginRoutes routes) {
        this.routes = routes;
        return this;
    }

    /**
     * Get the tokenStore value.
     *
     * @return the tokenStore value
     */
    public TokenStore tokenStore() {
        return this.tokenStore;
    }

    /**
     * Set the tokenStore value.
     *
     * @param tokenStore the tokenStore value to set
     * @return the Login object itself.
     */
    public Login withTokenStore(TokenStore tokenStore) {
        this.tokenStore = tokenStore;
        return this;
    }

    /**
     * Get the preserveUrlFragmentsForLogins value.
     *
     * @return the preserveUrlFragmentsForLogins value
     */
    public Boolean preserveUrlFragmentsForLogins() {
        return this.preserveUrlFragmentsForLogins;
    }

    /**
     * Set the preserveUrlFragmentsForLogins value.
     *
     * @param preserveUrlFragmentsForLogins the preserveUrlFragmentsForLogins value to set
     * @return the Login object itself.
     */
    public Login withPreserveUrlFragmentsForLogins(Boolean preserveUrlFragmentsForLogins) {
        this.preserveUrlFragmentsForLogins = preserveUrlFragmentsForLogins;
        return this;
    }

    /**
     * Get the allowedExternalRedirectUrls value.
     *
     * @return the allowedExternalRedirectUrls value
     */
    public List<String> allowedExternalRedirectUrls() {
        return this.allowedExternalRedirectUrls;
    }

    /**
     * Set the allowedExternalRedirectUrls value.
     *
     * @param allowedExternalRedirectUrls the allowedExternalRedirectUrls value to set
     * @return the Login object itself.
     */
    public Login withAllowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
        this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
        return this;
    }

    /**
     * Get the cookieExpiration value.
     *
     * @return the cookieExpiration value
     */
    public CookieExpiration cookieExpiration() {
        return this.cookieExpiration;
    }

    /**
     * Set the cookieExpiration value.
     *
     * @param cookieExpiration the cookieExpiration value to set
     * @return the Login object itself.
     */
    public Login withCookieExpiration(CookieExpiration cookieExpiration) {
        this.cookieExpiration = cookieExpiration;
        return this;
    }

    /**
     * Get the nonce value.
     *
     * @return the nonce value
     */
    public Nonce nonce() {
        return this.nonce;
    }

    /**
     * Set the nonce value.
     *
     * @param nonce the nonce value to set
     * @return the Login object itself.
     */
    public Login withNonce(Nonce nonce) {
        this.nonce = nonce;
        return this;
    }

}
