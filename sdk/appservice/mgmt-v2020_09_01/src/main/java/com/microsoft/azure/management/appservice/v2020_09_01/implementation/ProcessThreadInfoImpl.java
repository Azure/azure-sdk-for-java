/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.management.appservice.v2020_09_01.ProcessThreadInfo;
import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import rx.Observable;
import org.joda.time.DateTime;
import com.microsoft.azure.management.appservice.v2020_09_01.SystemData;

class ProcessThreadInfoImpl extends WrapperImpl<ProcessThreadInfoInner> implements ProcessThreadInfo {
    private final AppServiceManager manager;

    ProcessThreadInfoImpl(ProcessThreadInfoInner inner,  AppServiceManager manager) {
        super(inner);
        this.manager = manager;
    }

    @Override
    public AppServiceManager manager() {
        return this.manager;
    }



    @Override
    public Integer basePriority() {
        return this.inner().basePriority();
    }

    @Override
    public Integer currentPriority() {
        return this.inner().currentPriority();
    }

    @Override
    public String href() {
        return this.inner().href();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public Integer identifier() {
        return this.inner().identifier();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String priorityLevel() {
        return this.inner().priorityLevel();
    }

    @Override
    public String process() {
        return this.inner().process();
    }

    @Override
    public String startAddress() {
        return this.inner().startAddress();
    }

    @Override
    public DateTime startTime() {
        return this.inner().startTime();
    }

    @Override
    public String state() {
        return this.inner().state();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String totalProcessorTime() {
        return this.inner().totalProcessorTime();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String userProcessorTime() {
        return this.inner().userProcessorTime();
    }

    @Override
    public String waitReason() {
        return this.inner().waitReason();
    }

}
