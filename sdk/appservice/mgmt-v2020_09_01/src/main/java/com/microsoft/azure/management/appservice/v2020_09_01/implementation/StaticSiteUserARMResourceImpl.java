/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteUserARMResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.appservice.v2020_09_01.SystemData;

class StaticSiteUserARMResourceImpl extends CreatableUpdatableImpl<StaticSiteUserARMResource, StaticSiteUserARMResourceInner, StaticSiteUserARMResourceImpl> implements StaticSiteUserARMResource, StaticSiteUserARMResource.Update {
    private final AppServiceManager manager;
    private String resourceGroupName;
    private String name;
    private String authprovider;
    private String userid;

    StaticSiteUserARMResourceImpl(String name, AppServiceManager manager) {
        super(name, new StaticSiteUserARMResourceInner());
        this.manager = manager;
        // Set resource name
        this.userid = name;
        //
    }

    StaticSiteUserARMResourceImpl(StaticSiteUserARMResourceInner inner, AppServiceManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.userid = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "staticSites");
        this.authprovider = IdParsingUtils.getValueFromIdByName(inner.id(), "authproviders");
        this.userid = IdParsingUtils.getValueFromIdByName(inner.id(), "users");
        //
    }

    @Override
    public AppServiceManager manager() {
        return this.manager;
    }

    @Override
    public Observable<StaticSiteUserARMResource> createResourceAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return null; // NOP createResourceAsync implementation as create is not supported
    }

    @Override
    public Observable<StaticSiteUserARMResource> updateResourceAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return client.updateStaticSiteUserAsync(this.resourceGroupName, this.name, this.authprovider, this.userid, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<StaticSiteUserARMResourceInner> getInnerAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String displayName() {
        return this.inner().displayName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String provider() {
        return this.inner().provider();
    }

    @Override
    public String roles() {
        return this.inner().roles();
    }

    @Override
    public SystemData systemData() {
        return this.inner().systemData();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public String userId() {
        return this.inner().userId();
    }

    @Override
    public StaticSiteUserARMResourceImpl withKind(String kind) {
        this.inner().withKind(kind);
        return this;
    }

    @Override
    public StaticSiteUserARMResourceImpl withRoles(String roles) {
        this.inner().withRoles(roles);
        return this;
    }

    @Override
    public StaticSiteUserARMResourceImpl withSystemData(SystemData systemData) {
        this.inner().withSystemData(systemData);
        return this;
    }

}
