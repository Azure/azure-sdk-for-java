/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.appservice.v2020_09_01.DefaultErrorResponseException;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSitePatchResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteResetPropertiesARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSitesWorkflowPreviewRequest;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteUserInvitationRequestResource;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in StaticSites.
 */
public class StaticSitesInner implements InnerSupportsGet<StaticSiteARMResourceInner>, InnerSupportsListing<StaticSiteARMResourceInner> {
    /** The Retrofit service to perform REST calls. */
    private StaticSitesService service;
    /** The service client containing this operation class. */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of StaticSitesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public StaticSitesInner(Retrofit retrofit, WebSiteManagementClientImpl client) {
        this.service = retrofit.create(StaticSitesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for StaticSites to be
     * used by Retrofit to perform actually REST calls.
     */
    interface StaticSitesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites previewWorkflow" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/previewStaticSiteWorkflowFile")
        Observable<Response<ResponseBody>> previewWorkflow(@Path("location") String location, @Path("subscriptionId") String subscriptionId, @Body StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Web/staticSites")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites createOrUpdateStaticSite" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}")
        Observable<Response<ResponseBody>> createOrUpdateStaticSite(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body StaticSiteARMResourceInner staticSiteEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites deleteStaticSite" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteStaticSite(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites updateStaticSite" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}")
        Observable<Response<ResponseBody>> updateStaticSite(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body StaticSitePatchResource staticSiteEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteUsers" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/listUsers")
        Observable<Response<ResponseBody>> listStaticSiteUsers(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("authprovider") String authprovider, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites deleteStaticSiteUser" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteStaticSiteUser(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("authprovider") String authprovider, @Path("userid") String userid, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites updateStaticSiteUser" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/authproviders/{authprovider}/users/{userid}")
        Observable<Response<ResponseBody>> updateStaticSiteUser(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("authprovider") String authprovider, @Path("userid") String userid, @Path("subscriptionId") String subscriptionId, @Body StaticSiteUserARMResourceInner staticSiteUserEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites getStaticSiteBuilds" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds")
        Observable<Response<ResponseBody>> getStaticSiteBuilds(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites getStaticSiteBuild" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}")
        Observable<Response<ResponseBody>> getStaticSiteBuild(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("prId") String prId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites deleteStaticSiteBuild" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteStaticSiteBuild(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("prId") String prId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites createOrUpdateStaticSiteBuildFunctionAppSettings" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/config/functionappsettings")
        Observable<Response<ResponseBody>> createOrUpdateStaticSiteBuildFunctionAppSettings(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("prId") String prId, @Path("subscriptionId") String subscriptionId, @Body StringDictionaryInner appSettings, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteBuildFunctions" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/functions")
        Observable<Response<ResponseBody>> listStaticSiteBuildFunctions(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("prId") String prId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteBuildFunctionAppSettings" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/builds/{prId}/listFunctionAppSettings")
        Observable<Response<ResponseBody>> listStaticSiteBuildFunctionAppSettings(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("prId") String prId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites createOrUpdateStaticSiteFunctionAppSettings" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/config/functionappsettings")
        Observable<Response<ResponseBody>> createOrUpdateStaticSiteFunctionAppSettings(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body StringDictionaryInner appSettings, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites createUserRolesInvitationLink" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/createUserInvitation")
        Observable<Response<ResponseBody>> createUserRolesInvitationLink(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteCustomDomains" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains")
        Observable<Response<ResponseBody>> listStaticSiteCustomDomains(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites createOrUpdateStaticSiteCustomDomain" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}")
        Observable<Response<ResponseBody>> createOrUpdateStaticSiteCustomDomain(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("domainName") String domainName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites deleteStaticSiteCustomDomain" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteStaticSiteCustomDomain(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("domainName") String domainName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites validateCustomDomainCanBeAddedToStaticSite" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/customDomains/{domainName}/validate")
        Observable<Response<ResponseBody>> validateCustomDomainCanBeAddedToStaticSite(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("domainName") String domainName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites detachStaticSite" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/detach")
        Observable<Response<ResponseBody>> detachStaticSite(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteFunctions" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/functions")
        Observable<Response<ResponseBody>> listStaticSiteFunctions(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteFunctionAppSettings" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listFunctionAppSettings")
        Observable<Response<ResponseBody>> listStaticSiteFunctionAppSettings(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteSecrets" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/listSecrets")
        Observable<Response<ResponseBody>> listStaticSiteSecrets(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites resetStaticSiteApiKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/staticSites/{name}/resetapikey")
        Observable<Response<ResponseBody>> resetStaticSiteApiKey(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body StaticSiteResetPropertiesARMResource resetPropertiesEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteUsersNext" })
        @GET
        Observable<Response<ResponseBody>> listStaticSiteUsersNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites getStaticSiteBuildsNext" })
        @GET
        Observable<Response<ResponseBody>> getStaticSiteBuildsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteBuildFunctionsNext" })
        @GET
        Observable<Response<ResponseBody>> listStaticSiteBuildFunctionsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteCustomDomainsNext" })
        @GET
        Observable<Response<ResponseBody>> listStaticSiteCustomDomainsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.appservice.v2020_09_01.StaticSites listStaticSiteFunctionsNext" })
        @GET
        Observable<Response<ResponseBody>> listStaticSiteFunctionsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Generates a preview workflow file for the static site.
     * Description for Generates a preview workflow file for the static site.
     *
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSitesWorkflowPreviewInner object if successful.
     */
    public StaticSitesWorkflowPreviewInner previewWorkflow(String location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest) {
        return previewWorkflowWithServiceResponseAsync(location, staticSitesWorkflowPreviewRequest).toBlocking().single().body();
    }

    /**
     * Generates a preview workflow file for the static site.
     * Description for Generates a preview workflow file for the static site.
     *
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSitesWorkflowPreviewInner> previewWorkflowAsync(String location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest, final ServiceCallback<StaticSitesWorkflowPreviewInner> serviceCallback) {
        return ServiceFuture.fromResponse(previewWorkflowWithServiceResponseAsync(location, staticSitesWorkflowPreviewRequest), serviceCallback);
    }

    /**
     * Generates a preview workflow file for the static site.
     * Description for Generates a preview workflow file for the static site.
     *
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSitesWorkflowPreviewInner object
     */
    public Observable<StaticSitesWorkflowPreviewInner> previewWorkflowAsync(String location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest) {
        return previewWorkflowWithServiceResponseAsync(location, staticSitesWorkflowPreviewRequest).map(new Func1<ServiceResponse<StaticSitesWorkflowPreviewInner>, StaticSitesWorkflowPreviewInner>() {
            @Override
            public StaticSitesWorkflowPreviewInner call(ServiceResponse<StaticSitesWorkflowPreviewInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Generates a preview workflow file for the static site.
     * Description for Generates a preview workflow file for the static site.
     *
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSitesWorkflowPreviewInner object
     */
    public Observable<ServiceResponse<StaticSitesWorkflowPreviewInner>> previewWorkflowWithServiceResponseAsync(String location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (staticSitesWorkflowPreviewRequest == null) {
            throw new IllegalArgumentException("Parameter staticSitesWorkflowPreviewRequest is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(staticSitesWorkflowPreviewRequest);
        return service.previewWorkflow(location, this.client.subscriptionId(), staticSitesWorkflowPreviewRequest, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSitesWorkflowPreviewInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSitesWorkflowPreviewInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSitesWorkflowPreviewInner> clientResponse = previewWorkflowDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSitesWorkflowPreviewInner> previewWorkflowDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSitesWorkflowPreviewInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSitesWorkflowPreviewInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteARMResourceInner> list() {
        ServiceResponse<Page<StaticSiteARMResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<StaticSiteARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteARMResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteARMResourceInner>> listAsync(final ListOperationCallback<StaticSiteARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteARMResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Page<StaticSiteARMResourceInner>>() {
                @Override
                public Page<StaticSiteARMResourceInner> call(ServiceResponse<Page<StaticSiteARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(ServiceResponse<Page<StaticSiteARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteARMResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteARMResourceInner>> listDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteARMResourceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<StaticSiteARMResourceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<StaticSiteARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteARMResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteARMResourceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<StaticSiteARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteARMResourceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Page<StaticSiteARMResourceInner>>() {
                @Override
                public Page<StaticSiteARMResourceInner> call(ServiceResponse<Page<StaticSiteARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(ServiceResponse<Page<StaticSiteARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
    ServiceResponse<PageImpl<StaticSiteARMResourceInner>> * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteARMResourceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteARMResourceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the details of a static site.
     * Description for Gets the details of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteARMResourceInner object if successful.
     */
    public StaticSiteARMResourceInner getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Gets the details of a static site.
     * Description for Gets the details of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteARMResourceInner> getByResourceGroupAsync(String resourceGroupName, String name, final ServiceCallback<StaticSiteARMResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Gets the details of a static site.
     * Description for Gets the details of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteARMResourceInner object
     */
    public Observable<StaticSiteARMResourceInner> getByResourceGroupAsync(String resourceGroupName, String name) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<StaticSiteARMResourceInner>, StaticSiteARMResourceInner>() {
            @Override
            public StaticSiteARMResourceInner call(ServiceResponse<StaticSiteARMResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a static site.
     * Description for Gets the details of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteARMResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteARMResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteARMResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteARMResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteARMResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteARMResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteARMResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteARMResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteARMResourceInner object if successful.
     */
    public StaticSiteARMResourceInner createOrUpdateStaticSite(String resourceGroupName, String name, StaticSiteARMResourceInner staticSiteEnvelope) {
        return createOrUpdateStaticSiteWithServiceResponseAsync(resourceGroupName, name, staticSiteEnvelope).toBlocking().single().body();
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteARMResourceInner> createOrUpdateStaticSiteAsync(String resourceGroupName, String name, StaticSiteARMResourceInner staticSiteEnvelope, final ServiceCallback<StaticSiteARMResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateStaticSiteWithServiceResponseAsync(resourceGroupName, name, staticSiteEnvelope), serviceCallback);
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteARMResourceInner object
     */
    public Observable<StaticSiteARMResourceInner> createOrUpdateStaticSiteAsync(String resourceGroupName, String name, StaticSiteARMResourceInner staticSiteEnvelope) {
        return createOrUpdateStaticSiteWithServiceResponseAsync(resourceGroupName, name, staticSiteEnvelope).map(new Func1<ServiceResponse<StaticSiteARMResourceInner>, StaticSiteARMResourceInner>() {
            @Override
            public StaticSiteARMResourceInner call(ServiceResponse<StaticSiteARMResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteARMResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteARMResourceInner>> createOrUpdateStaticSiteWithServiceResponseAsync(String resourceGroupName, String name, StaticSiteARMResourceInner staticSiteEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (staticSiteEnvelope == null) {
            throw new IllegalArgumentException("Parameter staticSiteEnvelope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(staticSiteEnvelope);
        return service.createOrUpdateStaticSite(resourceGroupName, name, this.client.subscriptionId(), staticSiteEnvelope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteARMResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteARMResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteARMResourceInner> clientResponse = createOrUpdateStaticSiteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteARMResourceInner> createOrUpdateStaticSiteDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteARMResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteARMResourceInner>() { }.getType())
                .register(202, new TypeToken<StaticSiteARMResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a static site.
     * Description for Deletes a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteStaticSite(String resourceGroupName, String name) {
        deleteStaticSiteWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Deletes a static site.
     * Description for Deletes a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteStaticSiteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteStaticSiteWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Deletes a static site.
     * Description for Deletes a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteStaticSiteAsync(String resourceGroupName, String name) {
        return deleteStaticSiteWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a static site.
     * Description for Deletes a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteStaticSiteWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteStaticSite(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteStaticSiteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteStaticSiteDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteARMResourceInner object if successful.
     */
    public StaticSiteARMResourceInner updateStaticSite(String resourceGroupName, String name, StaticSitePatchResource staticSiteEnvelope) {
        return updateStaticSiteWithServiceResponseAsync(resourceGroupName, name, staticSiteEnvelope).toBlocking().single().body();
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteARMResourceInner> updateStaticSiteAsync(String resourceGroupName, String name, StaticSitePatchResource staticSiteEnvelope, final ServiceCallback<StaticSiteARMResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateStaticSiteWithServiceResponseAsync(resourceGroupName, name, staticSiteEnvelope), serviceCallback);
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteARMResourceInner object
     */
    public Observable<StaticSiteARMResourceInner> updateStaticSiteAsync(String resourceGroupName, String name, StaticSitePatchResource staticSiteEnvelope) {
        return updateStaticSiteWithServiceResponseAsync(resourceGroupName, name, staticSiteEnvelope).map(new Func1<ServiceResponse<StaticSiteARMResourceInner>, StaticSiteARMResourceInner>() {
            @Override
            public StaticSiteARMResourceInner call(ServiceResponse<StaticSiteARMResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new static site in an existing resource group, or updates an existing static site.
     * Description for Creates a new static site in an existing resource group, or updates an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to create or update.
     * @param staticSiteEnvelope A JSON representation of the staticsite properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteARMResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteARMResourceInner>> updateStaticSiteWithServiceResponseAsync(String resourceGroupName, String name, StaticSitePatchResource staticSiteEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (staticSiteEnvelope == null) {
            throw new IllegalArgumentException("Parameter staticSiteEnvelope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(staticSiteEnvelope);
        return service.updateStaticSite(resourceGroupName, name, this.client.subscriptionId(), staticSiteEnvelope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteARMResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteARMResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteARMResourceInner> clientResponse = updateStaticSiteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteARMResourceInner> updateStaticSiteDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteARMResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteARMResourceInner>() { }.getType())
                .register(202, new TypeToken<StaticSiteARMResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteUserARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteUserARMResourceInner> listStaticSiteUsers(final String resourceGroupName, final String name, final String authprovider) {
        ServiceResponse<Page<StaticSiteUserARMResourceInner>> response = listStaticSiteUsersSinglePageAsync(resourceGroupName, name, authprovider).toBlocking().single();
        return new PagedList<StaticSiteUserARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteUserARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteUsersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteUserARMResourceInner>> listStaticSiteUsersAsync(final String resourceGroupName, final String name, final String authprovider, final ListOperationCallback<StaticSiteUserARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteUsersSinglePageAsync(resourceGroupName, name, authprovider),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteUsersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteUserARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteUserARMResourceInner>> listStaticSiteUsersAsync(final String resourceGroupName, final String name, final String authprovider) {
        return listStaticSiteUsersWithServiceResponseAsync(resourceGroupName, name, authprovider)
            .map(new Func1<ServiceResponse<Page<StaticSiteUserARMResourceInner>>, Page<StaticSiteUserARMResourceInner>>() {
                @Override
                public Page<StaticSiteUserARMResourceInner> call(ServiceResponse<Page<StaticSiteUserARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteUserARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> listStaticSiteUsersWithServiceResponseAsync(final String resourceGroupName, final String name, final String authprovider) {
        return listStaticSiteUsersSinglePageAsync(resourceGroupName, name, authprovider)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteUserARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> call(ServiceResponse<Page<StaticSiteUserARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteUsersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
    ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> * @param resourceGroupName Name of the resource group to which the resource belongs.
    ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> * @param name Name of the static site.
    ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> * @param authprovider The auth provider for the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteUserARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> listStaticSiteUsersSinglePageAsync(final String resourceGroupName, final String name, final String authprovider) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (authprovider == null) {
            throw new IllegalArgumentException("Parameter authprovider is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteUsers(resourceGroupName, name, authprovider, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> result = listStaticSiteUsersDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteUserARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> listStaticSiteUsersDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteUserARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteUserARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes the user entry from the static site.
     * Description for Deletes the user entry from the static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteStaticSiteUser(String resourceGroupName, String name, String authprovider, String userid) {
        deleteStaticSiteUserWithServiceResponseAsync(resourceGroupName, name, authprovider, userid).toBlocking().single().body();
    }

    /**
     * Deletes the user entry from the static site.
     * Description for Deletes the user entry from the static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteStaticSiteUserAsync(String resourceGroupName, String name, String authprovider, String userid, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteStaticSiteUserWithServiceResponseAsync(resourceGroupName, name, authprovider, userid), serviceCallback);
    }

    /**
     * Deletes the user entry from the static site.
     * Description for Deletes the user entry from the static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteStaticSiteUserAsync(String resourceGroupName, String name, String authprovider, String userid) {
        return deleteStaticSiteUserWithServiceResponseAsync(resourceGroupName, name, authprovider, userid).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the user entry from the static site.
     * Description for Deletes the user entry from the static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteStaticSiteUserWithServiceResponseAsync(String resourceGroupName, String name, String authprovider, String userid) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (authprovider == null) {
            throw new IllegalArgumentException("Parameter authprovider is required and cannot be null.");
        }
        if (userid == null) {
            throw new IllegalArgumentException("Parameter userid is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteStaticSiteUser(resourceGroupName, name, authprovider, userid, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteStaticSiteUserDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteStaticSiteUserDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates a user entry with the listed roles.
     * Description for Updates a user entry with the listed roles.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteUserARMResourceInner object if successful.
     */
    public StaticSiteUserARMResourceInner updateStaticSiteUser(String resourceGroupName, String name, String authprovider, String userid, StaticSiteUserARMResourceInner staticSiteUserEnvelope) {
        return updateStaticSiteUserWithServiceResponseAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope).toBlocking().single().body();
    }

    /**
     * Updates a user entry with the listed roles.
     * Description for Updates a user entry with the listed roles.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See example.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteUserARMResourceInner> updateStaticSiteUserAsync(String resourceGroupName, String name, String authprovider, String userid, StaticSiteUserARMResourceInner staticSiteUserEnvelope, final ServiceCallback<StaticSiteUserARMResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateStaticSiteUserWithServiceResponseAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope), serviceCallback);
    }

    /**
     * Updates a user entry with the listed roles.
     * Description for Updates a user entry with the listed roles.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteUserARMResourceInner object
     */
    public Observable<StaticSiteUserARMResourceInner> updateStaticSiteUserAsync(String resourceGroupName, String name, String authprovider, String userid, StaticSiteUserARMResourceInner staticSiteUserEnvelope) {
        return updateStaticSiteUserWithServiceResponseAsync(resourceGroupName, name, authprovider, userid, staticSiteUserEnvelope).map(new Func1<ServiceResponse<StaticSiteUserARMResourceInner>, StaticSiteUserARMResourceInner>() {
            @Override
            public StaticSiteUserARMResourceInner call(ServiceResponse<StaticSiteUserARMResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a user entry with the listed roles.
     * Description for Updates a user entry with the listed roles.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @param staticSiteUserEnvelope A JSON representation of the StaticSiteUser properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteUserARMResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteUserARMResourceInner>> updateStaticSiteUserWithServiceResponseAsync(String resourceGroupName, String name, String authprovider, String userid, StaticSiteUserARMResourceInner staticSiteUserEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (authprovider == null) {
            throw new IllegalArgumentException("Parameter authprovider is required and cannot be null.");
        }
        if (userid == null) {
            throw new IllegalArgumentException("Parameter userid is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (staticSiteUserEnvelope == null) {
            throw new IllegalArgumentException("Parameter staticSiteUserEnvelope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(staticSiteUserEnvelope);
        return service.updateStaticSiteUser(resourceGroupName, name, authprovider, userid, this.client.subscriptionId(), staticSiteUserEnvelope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteUserARMResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteUserARMResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteUserARMResourceInner> clientResponse = updateStaticSiteUserDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteUserARMResourceInner> updateStaticSiteUserDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteUserARMResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteUserARMResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteBuildARMResourceInner> getStaticSiteBuilds(final String resourceGroupName, final String name) {
        ServiceResponse<Page<StaticSiteBuildARMResourceInner>> response = getStaticSiteBuildsSinglePageAsync(resourceGroupName, name).toBlocking().single();
        return new PagedList<StaticSiteBuildARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteBuildARMResourceInner> nextPage(String nextPageLink) {
                return getStaticSiteBuildsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteBuildARMResourceInner>> getStaticSiteBuildsAsync(final String resourceGroupName, final String name, final ListOperationCallback<StaticSiteBuildARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getStaticSiteBuildsSinglePageAsync(resourceGroupName, name),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> call(String nextPageLink) {
                    return getStaticSiteBuildsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteBuildARMResourceInner>> getStaticSiteBuildsAsync(final String resourceGroupName, final String name) {
        return getStaticSiteBuildsWithServiceResponseAsync(resourceGroupName, name)
            .map(new Func1<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>, Page<StaticSiteBuildARMResourceInner>>() {
                @Override
                public Page<StaticSiteBuildARMResourceInner> call(ServiceResponse<Page<StaticSiteBuildARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> getStaticSiteBuildsWithServiceResponseAsync(final String resourceGroupName, final String name) {
        return getStaticSiteBuildsSinglePageAsync(resourceGroupName, name)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> call(ServiceResponse<Page<StaticSiteBuildARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getStaticSiteBuildsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
    ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> * @param resourceGroupName Name of the resource group to which the resource belongs.
    ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> getStaticSiteBuildsSinglePageAsync(final String resourceGroupName, final String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getStaticSiteBuilds(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> result = getStaticSiteBuildsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteBuildARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> getStaticSiteBuildsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteBuildARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteBuildARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the details of a static site build.
     * Description for Gets the details of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteBuildARMResourceInner object if successful.
     */
    public StaticSiteBuildARMResourceInner getStaticSiteBuild(String resourceGroupName, String name, String prId) {
        return getStaticSiteBuildWithServiceResponseAsync(resourceGroupName, name, prId).toBlocking().single().body();
    }

    /**
     * Gets the details of a static site build.
     * Description for Gets the details of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteBuildARMResourceInner> getStaticSiteBuildAsync(String resourceGroupName, String name, String prId, final ServiceCallback<StaticSiteBuildARMResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getStaticSiteBuildWithServiceResponseAsync(resourceGroupName, name, prId), serviceCallback);
    }

    /**
     * Gets the details of a static site build.
     * Description for Gets the details of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteBuildARMResourceInner object
     */
    public Observable<StaticSiteBuildARMResourceInner> getStaticSiteBuildAsync(String resourceGroupName, String name, String prId) {
        return getStaticSiteBuildWithServiceResponseAsync(resourceGroupName, name, prId).map(new Func1<ServiceResponse<StaticSiteBuildARMResourceInner>, StaticSiteBuildARMResourceInner>() {
            @Override
            public StaticSiteBuildARMResourceInner call(ServiceResponse<StaticSiteBuildARMResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of a static site build.
     * Description for Gets the details of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteBuildARMResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteBuildARMResourceInner>> getStaticSiteBuildWithServiceResponseAsync(String resourceGroupName, String name, String prId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (prId == null) {
            throw new IllegalArgumentException("Parameter prId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getStaticSiteBuild(resourceGroupName, name, prId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteBuildARMResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteBuildARMResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteBuildARMResourceInner> clientResponse = getStaticSiteBuildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteBuildARMResourceInner> getStaticSiteBuildDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteBuildARMResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteBuildARMResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a static site build.
     * Description for Deletes a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteStaticSiteBuild(String resourceGroupName, String name, String prId) {
        deleteStaticSiteBuildWithServiceResponseAsync(resourceGroupName, name, prId).toBlocking().single().body();
    }

    /**
     * Deletes a static site build.
     * Description for Deletes a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteStaticSiteBuildAsync(String resourceGroupName, String name, String prId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteStaticSiteBuildWithServiceResponseAsync(resourceGroupName, name, prId), serviceCallback);
    }

    /**
     * Deletes a static site build.
     * Description for Deletes a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteStaticSiteBuildAsync(String resourceGroupName, String name, String prId) {
        return deleteStaticSiteBuildWithServiceResponseAsync(resourceGroupName, name, prId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a static site build.
     * Description for Deletes a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteStaticSiteBuildWithServiceResponseAsync(String resourceGroupName, String name, String prId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (prId == null) {
            throw new IllegalArgumentException("Parameter prId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteStaticSiteBuild(resourceGroupName, name, prId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteStaticSiteBuildDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteStaticSiteBuildDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates the function app settings of a static site build.
     * Description for Creates or updates the function app settings of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StringDictionaryInner object if successful.
     */
    public StringDictionaryInner createOrUpdateStaticSiteBuildFunctionAppSettings(String resourceGroupName, String name, String prId, StringDictionaryInner appSettings) {
        return createOrUpdateStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, prId, appSettings).toBlocking().single().body();
    }

    /**
     * Creates or updates the function app settings of a static site build.
     * Description for Creates or updates the function app settings of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings the StringDictionaryInner value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StringDictionaryInner> createOrUpdateStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId, StringDictionaryInner appSettings, final ServiceCallback<StringDictionaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, prId, appSettings), serviceCallback);
    }

    /**
     * Creates or updates the function app settings of a static site build.
     * Description for Creates or updates the function app settings of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<StringDictionaryInner> createOrUpdateStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId, StringDictionaryInner appSettings) {
        return createOrUpdateStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, prId, appSettings).map(new Func1<ServiceResponse<StringDictionaryInner>, StringDictionaryInner>() {
            @Override
            public StringDictionaryInner call(ServiceResponse<StringDictionaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the function app settings of a static site build.
     * Description for Creates or updates the function app settings of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<ServiceResponse<StringDictionaryInner>> createOrUpdateStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(String resourceGroupName, String name, String prId, StringDictionaryInner appSettings) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (prId == null) {
            throw new IllegalArgumentException("Parameter prId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (appSettings == null) {
            throw new IllegalArgumentException("Parameter appSettings is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(appSettings);
        return service.createOrUpdateStaticSiteBuildFunctionAppSettings(resourceGroupName, name, prId, this.client.subscriptionId(), appSettings, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StringDictionaryInner>>>() {
                @Override
                public Observable<ServiceResponse<StringDictionaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StringDictionaryInner> clientResponse = createOrUpdateStaticSiteBuildFunctionAppSettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StringDictionaryInner> createOrUpdateStaticSiteBuildFunctionAppSettingsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StringDictionaryInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StringDictionaryInner>() { }.getType())
                .register(202, new TypeToken<StringDictionaryInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteFunctionOverviewARMResourceInner> listStaticSiteBuildFunctions(final String resourceGroupName, final String name, final String prId) {
        ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response = listStaticSiteBuildFunctionsSinglePageAsync(resourceGroupName, name, prId).toBlocking().single();
        return new PagedList<StaticSiteFunctionOverviewARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteFunctionOverviewARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteBuildFunctionsAsync(final String resourceGroupName, final String name, final String prId, final ListOperationCallback<StaticSiteFunctionOverviewARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteBuildFunctionsSinglePageAsync(resourceGroupName, name, prId),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteBuildFunctionsAsync(final String resourceGroupName, final String name, final String prId) {
        return listStaticSiteBuildFunctionsWithServiceResponseAsync(resourceGroupName, name, prId)
            .map(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Page<StaticSiteFunctionOverviewARMResourceInner>>() {
                @Override
                public Page<StaticSiteFunctionOverviewARMResourceInner> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteBuildFunctionsWithServiceResponseAsync(final String resourceGroupName, final String name, final String prId) {
        return listStaticSiteBuildFunctionsSinglePageAsync(resourceGroupName, name, prId)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteBuildFunctionsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param resourceGroupName Name of the resource group to which the resource belongs.
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param name Name of the static site.
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteBuildFunctionsSinglePageAsync(final String resourceGroupName, final String name, final String prId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (prId == null) {
            throw new IllegalArgumentException("Parameter prId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteBuildFunctions(resourceGroupName, name, prId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> result = listStaticSiteBuildFunctionsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteBuildFunctionsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteFunctionOverviewARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteFunctionOverviewARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StringDictionaryInner object if successful.
     */
    public StringDictionaryInner listStaticSiteBuildFunctionAppSettings(String resourceGroupName, String name, String prId) {
        return listStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, prId).toBlocking().single().body();
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StringDictionaryInner> listStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId, final ServiceCallback<StringDictionaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, prId), serviceCallback);
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<StringDictionaryInner> listStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId) {
        return listStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, prId).map(new Func1<ServiceResponse<StringDictionaryInner>, StringDictionaryInner>() {
            @Override
            public StringDictionaryInner call(ServiceResponse<StringDictionaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<ServiceResponse<StringDictionaryInner>> listStaticSiteBuildFunctionAppSettingsWithServiceResponseAsync(String resourceGroupName, String name, String prId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (prId == null) {
            throw new IllegalArgumentException("Parameter prId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteBuildFunctionAppSettings(resourceGroupName, name, prId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StringDictionaryInner>>>() {
                @Override
                public Observable<ServiceResponse<StringDictionaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StringDictionaryInner> clientResponse = listStaticSiteBuildFunctionAppSettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StringDictionaryInner> listStaticSiteBuildFunctionAppSettingsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StringDictionaryInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StringDictionaryInner>() { }.getType())
                .register(202, new TypeToken<StringDictionaryInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates or updates the function app settings of a static site.
     * Description for Creates or updates the function app settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StringDictionaryInner object if successful.
     */
    public StringDictionaryInner createOrUpdateStaticSiteFunctionAppSettings(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return createOrUpdateStaticSiteFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, appSettings).toBlocking().single().body();
    }

    /**
     * Creates or updates the function app settings of a static site.
     * Description for Creates or updates the function app settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings the StringDictionaryInner value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StringDictionaryInner> createOrUpdateStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings, final ServiceCallback<StringDictionaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateStaticSiteFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, appSettings), serviceCallback);
    }

    /**
     * Creates or updates the function app settings of a static site.
     * Description for Creates or updates the function app settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<StringDictionaryInner> createOrUpdateStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return createOrUpdateStaticSiteFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name, appSettings).map(new Func1<ServiceResponse<StringDictionaryInner>, StringDictionaryInner>() {
            @Override
            public StringDictionaryInner call(ServiceResponse<StringDictionaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates the function app settings of a static site.
     * Description for Creates or updates the function app settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<ServiceResponse<StringDictionaryInner>> createOrUpdateStaticSiteFunctionAppSettingsWithServiceResponseAsync(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (appSettings == null) {
            throw new IllegalArgumentException("Parameter appSettings is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(appSettings);
        return service.createOrUpdateStaticSiteFunctionAppSettings(resourceGroupName, name, this.client.subscriptionId(), appSettings, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StringDictionaryInner>>>() {
                @Override
                public Observable<ServiceResponse<StringDictionaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StringDictionaryInner> clientResponse = createOrUpdateStaticSiteFunctionAppSettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StringDictionaryInner> createOrUpdateStaticSiteFunctionAppSettingsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StringDictionaryInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StringDictionaryInner>() { }.getType())
                .register(202, new TypeToken<StringDictionaryInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates an invitation link for a user with the role.
     * Description for Creates an invitation link for a user with the role.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope the StaticSiteUserInvitationRequestResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteUserInvitationResponseResourceInner object if successful.
     */
    public StaticSiteUserInvitationResponseResourceInner createUserRolesInvitationLink(String resourceGroupName, String name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope) {
        return createUserRolesInvitationLinkWithServiceResponseAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope).toBlocking().single().body();
    }

    /**
     * Creates an invitation link for a user with the role.
     * Description for Creates an invitation link for a user with the role.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope the StaticSiteUserInvitationRequestResource value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteUserInvitationResponseResourceInner> createUserRolesInvitationLinkAsync(String resourceGroupName, String name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope, final ServiceCallback<StaticSiteUserInvitationResponseResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createUserRolesInvitationLinkWithServiceResponseAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope), serviceCallback);
    }

    /**
     * Creates an invitation link for a user with the role.
     * Description for Creates an invitation link for a user with the role.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope the StaticSiteUserInvitationRequestResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteUserInvitationResponseResourceInner object
     */
    public Observable<StaticSiteUserInvitationResponseResourceInner> createUserRolesInvitationLinkAsync(String resourceGroupName, String name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope) {
        return createUserRolesInvitationLinkWithServiceResponseAsync(resourceGroupName, name, staticSiteUserRolesInvitationEnvelope).map(new Func1<ServiceResponse<StaticSiteUserInvitationResponseResourceInner>, StaticSiteUserInvitationResponseResourceInner>() {
            @Override
            public StaticSiteUserInvitationResponseResourceInner call(ServiceResponse<StaticSiteUserInvitationResponseResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates an invitation link for a user with the role.
     * Description for Creates an invitation link for a user with the role.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope the StaticSiteUserInvitationRequestResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteUserInvitationResponseResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteUserInvitationResponseResourceInner>> createUserRolesInvitationLinkWithServiceResponseAsync(String resourceGroupName, String name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (staticSiteUserRolesInvitationEnvelope == null) {
            throw new IllegalArgumentException("Parameter staticSiteUserRolesInvitationEnvelope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(staticSiteUserRolesInvitationEnvelope);
        return service.createUserRolesInvitationLink(resourceGroupName, name, this.client.subscriptionId(), staticSiteUserRolesInvitationEnvelope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteUserInvitationResponseResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteUserInvitationResponseResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteUserInvitationResponseResourceInner> clientResponse = createUserRolesInvitationLinkDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteUserInvitationResponseResourceInner> createUserRolesInvitationLinkDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteUserInvitationResponseResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteUserInvitationResponseResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteCustomDomainOverviewARMResourceInner> listStaticSiteCustomDomains(final String resourceGroupName, final String name) {
        ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>> response = listStaticSiteCustomDomainsSinglePageAsync(resourceGroupName, name).toBlocking().single();
        return new PagedList<StaticSiteCustomDomainOverviewARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteCustomDomainOverviewARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteCustomDomainOverviewARMResourceInner>> listStaticSiteCustomDomainsAsync(final String resourceGroupName, final String name, final ListOperationCallback<StaticSiteCustomDomainOverviewARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteCustomDomainsSinglePageAsync(resourceGroupName, name),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteCustomDomainOverviewARMResourceInner>> listStaticSiteCustomDomainsAsync(final String resourceGroupName, final String name) {
        return listStaticSiteCustomDomainsWithServiceResponseAsync(resourceGroupName, name)
            .map(new Func1<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>, Page<StaticSiteCustomDomainOverviewARMResourceInner>>() {
                @Override
                public Page<StaticSiteCustomDomainOverviewARMResourceInner> call(ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> listStaticSiteCustomDomainsWithServiceResponseAsync(final String resourceGroupName, final String name) {
        return listStaticSiteCustomDomainsSinglePageAsync(resourceGroupName, name)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> call(ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteCustomDomainsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
    ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> * @param resourceGroupName Name of the resource group to which the resource belongs.
    ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> * @param name Name of the static site resource to search in.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> listStaticSiteCustomDomainsSinglePageAsync(final String resourceGroupName, final String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteCustomDomains(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> result = listStaticSiteCustomDomainsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> listStaticSiteCustomDomainsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Creates a new static site custom domain in an existing resource group and static site.
     * Description for Creates a new static site custom domain in an existing resource group and static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StaticSiteCustomDomainOverviewARMResourceInner object if successful.
     */
    public StaticSiteCustomDomainOverviewARMResourceInner createOrUpdateStaticSiteCustomDomain(String resourceGroupName, String name, String domainName) {
        return createOrUpdateStaticSiteCustomDomainWithServiceResponseAsync(resourceGroupName, name, domainName).toBlocking().single().body();
    }

    /**
     * Creates a new static site custom domain in an existing resource group and static site.
     * Description for Creates a new static site custom domain in an existing resource group and static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StaticSiteCustomDomainOverviewARMResourceInner> createOrUpdateStaticSiteCustomDomainAsync(String resourceGroupName, String name, String domainName, final ServiceCallback<StaticSiteCustomDomainOverviewARMResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateStaticSiteCustomDomainWithServiceResponseAsync(resourceGroupName, name, domainName), serviceCallback);
    }

    /**
     * Creates a new static site custom domain in an existing resource group and static site.
     * Description for Creates a new static site custom domain in an existing resource group and static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteCustomDomainOverviewARMResourceInner object
     */
    public Observable<StaticSiteCustomDomainOverviewARMResourceInner> createOrUpdateStaticSiteCustomDomainAsync(String resourceGroupName, String name, String domainName) {
        return createOrUpdateStaticSiteCustomDomainWithServiceResponseAsync(resourceGroupName, name, domainName).map(new Func1<ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner>, StaticSiteCustomDomainOverviewARMResourceInner>() {
            @Override
            public StaticSiteCustomDomainOverviewARMResourceInner call(ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new static site custom domain in an existing resource group and static site.
     * Description for Creates a new static site custom domain in an existing resource group and static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StaticSiteCustomDomainOverviewARMResourceInner object
     */
    public Observable<ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner>> createOrUpdateStaticSiteCustomDomainWithServiceResponseAsync(String resourceGroupName, String name, String domainName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.createOrUpdateStaticSiteCustomDomain(resourceGroupName, name, domainName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner> clientResponse = createOrUpdateStaticSiteCustomDomainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StaticSiteCustomDomainOverviewARMResourceInner> createOrUpdateStaticSiteCustomDomainDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StaticSiteCustomDomainOverviewARMResourceInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StaticSiteCustomDomainOverviewARMResourceInner>() { }.getType())
                .register(202, new TypeToken<StaticSiteCustomDomainOverviewARMResourceInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes a custom domain.
     * Description for Deletes a custom domain.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteStaticSiteCustomDomain(String resourceGroupName, String name, String domainName) {
        deleteStaticSiteCustomDomainWithServiceResponseAsync(resourceGroupName, name, domainName).toBlocking().single().body();
    }

    /**
     * Deletes a custom domain.
     * Description for Deletes a custom domain.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteStaticSiteCustomDomainAsync(String resourceGroupName, String name, String domainName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteStaticSiteCustomDomainWithServiceResponseAsync(resourceGroupName, name, domainName), serviceCallback);
    }

    /**
     * Deletes a custom domain.
     * Description for Deletes a custom domain.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteStaticSiteCustomDomainAsync(String resourceGroupName, String name, String domainName) {
        return deleteStaticSiteCustomDomainWithServiceResponseAsync(resourceGroupName, name, domainName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a custom domain.
     * Description for Deletes a custom domain.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteStaticSiteCustomDomainWithServiceResponseAsync(String resourceGroupName, String name, String domainName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deleteStaticSiteCustomDomain(resourceGroupName, name, domainName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteStaticSiteCustomDomainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteStaticSiteCustomDomainDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Validates a particular custom domain can be added to a static site.
     * Description for Validates a particular custom domain can be added to a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void validateCustomDomainCanBeAddedToStaticSite(String resourceGroupName, String name, String domainName) {
        validateCustomDomainCanBeAddedToStaticSiteWithServiceResponseAsync(resourceGroupName, name, domainName).toBlocking().single().body();
    }

    /**
     * Validates a particular custom domain can be added to a static site.
     * Description for Validates a particular custom domain can be added to a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> validateCustomDomainCanBeAddedToStaticSiteAsync(String resourceGroupName, String name, String domainName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(validateCustomDomainCanBeAddedToStaticSiteWithServiceResponseAsync(resourceGroupName, name, domainName), serviceCallback);
    }

    /**
     * Validates a particular custom domain can be added to a static site.
     * Description for Validates a particular custom domain can be added to a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> validateCustomDomainCanBeAddedToStaticSiteAsync(String resourceGroupName, String name, String domainName) {
        return validateCustomDomainCanBeAddedToStaticSiteWithServiceResponseAsync(resourceGroupName, name, domainName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Validates a particular custom domain can be added to a static site.
     * Description for Validates a particular custom domain can be added to a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> validateCustomDomainCanBeAddedToStaticSiteWithServiceResponseAsync(String resourceGroupName, String name, String domainName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.validateCustomDomainCanBeAddedToStaticSite(resourceGroupName, name, domainName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = validateCustomDomainCanBeAddedToStaticSiteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> validateCustomDomainCanBeAddedToStaticSiteDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Detaches a static site.
     * Description for Detaches a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void detachStaticSite(String resourceGroupName, String name) {
        detachStaticSiteWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Detaches a static site.
     * Description for Detaches a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> detachStaticSiteAsync(String resourceGroupName, String name, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(detachStaticSiteWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Detaches a static site.
     * Description for Detaches a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> detachStaticSiteAsync(String resourceGroupName, String name) {
        return detachStaticSiteWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Detaches a static site.
     * Description for Detaches a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> detachStaticSiteWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.detachStaticSite(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = detachStaticSiteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> detachStaticSiteDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteFunctionOverviewARMResourceInner> listStaticSiteFunctions(final String resourceGroupName, final String name) {
        ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response = listStaticSiteFunctionsSinglePageAsync(resourceGroupName, name).toBlocking().single();
        return new PagedList<StaticSiteFunctionOverviewARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteFunctionOverviewARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteFunctionsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteFunctionsAsync(final String resourceGroupName, final String name, final ListOperationCallback<StaticSiteFunctionOverviewARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteFunctionsSinglePageAsync(resourceGroupName, name),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteFunctionsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteFunctionsAsync(final String resourceGroupName, final String name) {
        return listStaticSiteFunctionsWithServiceResponseAsync(resourceGroupName, name)
            .map(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Page<StaticSiteFunctionOverviewARMResourceInner>>() {
                @Override
                public Page<StaticSiteFunctionOverviewARMResourceInner> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteFunctionsWithServiceResponseAsync(final String resourceGroupName, final String name) {
        return listStaticSiteFunctionsSinglePageAsync(resourceGroupName, name)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteFunctionsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param resourceGroupName Name of the resource group to which the resource belongs.
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteFunctionsSinglePageAsync(final String resourceGroupName, final String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteFunctions(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> result = listStaticSiteFunctionsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteFunctionsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteFunctionOverviewARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteFunctionOverviewARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StringDictionaryInner object if successful.
     */
    public StringDictionaryInner listStaticSiteFunctionAppSettings(String resourceGroupName, String name) {
        return listStaticSiteFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StringDictionaryInner> listStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name, final ServiceCallback<StringDictionaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listStaticSiteFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<StringDictionaryInner> listStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name) {
        return listStaticSiteFunctionAppSettingsWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<StringDictionaryInner>, StringDictionaryInner>() {
            @Override
            public StringDictionaryInner call(ServiceResponse<StringDictionaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<ServiceResponse<StringDictionaryInner>> listStaticSiteFunctionAppSettingsWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteFunctionAppSettings(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StringDictionaryInner>>>() {
                @Override
                public Observable<ServiceResponse<StringDictionaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StringDictionaryInner> clientResponse = listStaticSiteFunctionAppSettingsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StringDictionaryInner> listStaticSiteFunctionAppSettingsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StringDictionaryInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StringDictionaryInner>() { }.getType())
                .register(202, new TypeToken<StringDictionaryInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists the secrets for an existing static site.
     * Description for Lists the secrets for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StringDictionaryInner object if successful.
     */
    public StringDictionaryInner listStaticSiteSecrets(String resourceGroupName, String name) {
        return listStaticSiteSecretsWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().body();
    }

    /**
     * Lists the secrets for an existing static site.
     * Description for Lists the secrets for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StringDictionaryInner> listStaticSiteSecretsAsync(String resourceGroupName, String name, final ServiceCallback<StringDictionaryInner> serviceCallback) {
        return ServiceFuture.fromResponse(listStaticSiteSecretsWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Lists the secrets for an existing static site.
     * Description for Lists the secrets for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<StringDictionaryInner> listStaticSiteSecretsAsync(String resourceGroupName, String name) {
        return listStaticSiteSecretsWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<StringDictionaryInner>, StringDictionaryInner>() {
            @Override
            public StringDictionaryInner call(ServiceResponse<StringDictionaryInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Lists the secrets for an existing static site.
     * Description for Lists the secrets for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StringDictionaryInner object
     */
    public Observable<ServiceResponse<StringDictionaryInner>> listStaticSiteSecretsWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listStaticSiteSecrets(resourceGroupName, name, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StringDictionaryInner>>>() {
                @Override
                public Observable<ServiceResponse<StringDictionaryInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StringDictionaryInner> clientResponse = listStaticSiteSecretsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StringDictionaryInner> listStaticSiteSecretsDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StringDictionaryInner, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StringDictionaryInner>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Resets the api key for an existing static site.
     * Description for Resets the api key for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope the StaticSiteResetPropertiesARMResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void resetStaticSiteApiKey(String resourceGroupName, String name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope) {
        resetStaticSiteApiKeyWithServiceResponseAsync(resourceGroupName, name, resetPropertiesEnvelope).toBlocking().single().body();
    }

    /**
     * Resets the api key for an existing static site.
     * Description for Resets the api key for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope the StaticSiteResetPropertiesARMResource value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> resetStaticSiteApiKeyAsync(String resourceGroupName, String name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(resetStaticSiteApiKeyWithServiceResponseAsync(resourceGroupName, name, resetPropertiesEnvelope), serviceCallback);
    }

    /**
     * Resets the api key for an existing static site.
     * Description for Resets the api key for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope the StaticSiteResetPropertiesARMResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> resetStaticSiteApiKeyAsync(String resourceGroupName, String name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope) {
        return resetStaticSiteApiKeyWithServiceResponseAsync(resourceGroupName, name, resetPropertiesEnvelope).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Resets the api key for an existing static site.
     * Description for Resets the api key for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope the StaticSiteResetPropertiesARMResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> resetStaticSiteApiKeyWithServiceResponseAsync(String resourceGroupName, String name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resetPropertiesEnvelope == null) {
            throw new IllegalArgumentException("Parameter resetPropertiesEnvelope is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(resetPropertiesEnvelope);
        return service.resetStaticSiteApiKey(resourceGroupName, name, this.client.subscriptionId(), resetPropertiesEnvelope, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = resetStaticSiteApiKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> resetStaticSiteApiKeyDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteARMResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteARMResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteARMResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteARMResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteARMResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Page<StaticSiteARMResourceInner>>() {
                @Override
                public Page<StaticSiteARMResourceInner> call(ServiceResponse<Page<StaticSiteARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(ServiceResponse<Page<StaticSiteARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all Static Sites for a subscription.
     * Description for Get all Static Sites for a subscription.
     *
    ServiceResponse<PageImpl<StaticSiteARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteARMResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteARMResourceInner>> listNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteARMResourceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteARMResourceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteARMResourceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteARMResourceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteARMResourceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Page<StaticSiteARMResourceInner>>() {
                @Override
                public Page<StaticSiteARMResourceInner> call(ServiceResponse<Page<StaticSiteARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(ServiceResponse<Page<StaticSiteARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all static sites in the specified resource group.
     * Description for Gets all static sites in the specified resource group.
     *
    ServiceResponse<PageImpl<StaticSiteARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteARMResourceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteARMResourceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteUserARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteUserARMResourceInner> listStaticSiteUsersNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteUserARMResourceInner>> response = listStaticSiteUsersNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteUserARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteUserARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteUsersNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteUserARMResourceInner>> listStaticSiteUsersNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteUserARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteUserARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteUsersNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteUsersNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteUserARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteUserARMResourceInner>> listStaticSiteUsersNextAsync(final String nextPageLink) {
        return listStaticSiteUsersNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteUserARMResourceInner>>, Page<StaticSiteUserARMResourceInner>>() {
                @Override
                public Page<StaticSiteUserARMResourceInner> call(ServiceResponse<Page<StaticSiteUserARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteUserARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> listStaticSiteUsersNextWithServiceResponseAsync(final String nextPageLink) {
        return listStaticSiteUsersNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteUserARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> call(ServiceResponse<Page<StaticSiteUserARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteUsersNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
    ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteUserARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> listStaticSiteUsersNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStaticSiteUsersNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteUserARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> result = listStaticSiteUsersNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteUserARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteUserARMResourceInner>> listStaticSiteUsersNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteUserARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteUserARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteBuildARMResourceInner> getStaticSiteBuildsNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteBuildARMResourceInner>> response = getStaticSiteBuildsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteBuildARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteBuildARMResourceInner> nextPage(String nextPageLink) {
                return getStaticSiteBuildsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteBuildARMResourceInner>> getStaticSiteBuildsNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteBuildARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteBuildARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            getStaticSiteBuildsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> call(String nextPageLink) {
                    return getStaticSiteBuildsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteBuildARMResourceInner>> getStaticSiteBuildsNextAsync(final String nextPageLink) {
        return getStaticSiteBuildsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>, Page<StaticSiteBuildARMResourceInner>>() {
                @Override
                public Page<StaticSiteBuildARMResourceInner> call(ServiceResponse<Page<StaticSiteBuildARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> getStaticSiteBuildsNextWithServiceResponseAsync(final String nextPageLink) {
        return getStaticSiteBuildsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> call(ServiceResponse<Page<StaticSiteBuildARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getStaticSiteBuildsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
    ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteBuildARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> getStaticSiteBuildsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getStaticSiteBuildsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteBuildARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> result = getStaticSiteBuildsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteBuildARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteBuildARMResourceInner>> getStaticSiteBuildsNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteBuildARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteBuildARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteFunctionOverviewARMResourceInner> listStaticSiteBuildFunctionsNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response = listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteFunctionOverviewARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteFunctionOverviewARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteBuildFunctionsNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteFunctionOverviewARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteFunctionOverviewARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteBuildFunctionsNextAsync(final String nextPageLink) {
        return listStaticSiteBuildFunctionsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Page<StaticSiteFunctionOverviewARMResourceInner>>() {
                @Override
                public Page<StaticSiteFunctionOverviewARMResourceInner> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteBuildFunctionsNextWithServiceResponseAsync(final String nextPageLink) {
        return listStaticSiteBuildFunctionsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteBuildFunctionsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteBuildFunctionsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStaticSiteBuildFunctionsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> result = listStaticSiteBuildFunctionsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteBuildFunctionsNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteFunctionOverviewARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteFunctionOverviewARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteCustomDomainOverviewARMResourceInner> listStaticSiteCustomDomainsNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>> response = listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteCustomDomainOverviewARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteCustomDomainOverviewARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteCustomDomainOverviewARMResourceInner>> listStaticSiteCustomDomainsNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteCustomDomainOverviewARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteCustomDomainOverviewARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteCustomDomainOverviewARMResourceInner>> listStaticSiteCustomDomainsNextAsync(final String nextPageLink) {
        return listStaticSiteCustomDomainsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>, Page<StaticSiteCustomDomainOverviewARMResourceInner>>() {
                @Override
                public Page<StaticSiteCustomDomainOverviewARMResourceInner> call(ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> listStaticSiteCustomDomainsNextWithServiceResponseAsync(final String nextPageLink) {
        return listStaticSiteCustomDomainsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> call(ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteCustomDomainsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
    ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteCustomDomainOverviewARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> listStaticSiteCustomDomainsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStaticSiteCustomDomainsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> result = listStaticSiteCustomDomainsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteCustomDomainOverviewARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>> listStaticSiteCustomDomainsNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteCustomDomainOverviewARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws DefaultErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object if successful.
     */
    public PagedList<StaticSiteFunctionOverviewARMResourceInner> listStaticSiteFunctionsNext(final String nextPageLink) {
        ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response = listStaticSiteFunctionsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<StaticSiteFunctionOverviewARMResourceInner>(response.body()) {
            @Override
            public Page<StaticSiteFunctionOverviewARMResourceInner> nextPage(String nextPageLink) {
                return listStaticSiteFunctionsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteFunctionsNextAsync(final String nextPageLink, final ServiceFuture<List<StaticSiteFunctionOverviewARMResourceInner>> serviceFuture, final ListOperationCallback<StaticSiteFunctionOverviewARMResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listStaticSiteFunctionsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(String nextPageLink) {
                    return listStaticSiteFunctionsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<Page<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteFunctionsNextAsync(final String nextPageLink) {
        return listStaticSiteFunctionsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Page<StaticSiteFunctionOverviewARMResourceInner>>() {
                @Override
                public Page<StaticSiteFunctionOverviewARMResourceInner> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteFunctionsNextWithServiceResponseAsync(final String nextPageLink) {
        return listStaticSiteFunctionsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listStaticSiteFunctionsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
    ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;StaticSiteFunctionOverviewARMResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> listStaticSiteFunctionsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listStaticSiteFunctionsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> result = listStaticSiteFunctionsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<StaticSiteFunctionOverviewARMResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<StaticSiteFunctionOverviewARMResourceInner>> listStaticSiteFunctionsNextDelegate(Response<ResponseBody> response) throws DefaultErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<StaticSiteFunctionOverviewARMResourceInner>, DefaultErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<StaticSiteFunctionOverviewARMResourceInner>>() { }.getType())
                .registerError(DefaultErrorResponseException.class)
                .build(response);
    }

}
