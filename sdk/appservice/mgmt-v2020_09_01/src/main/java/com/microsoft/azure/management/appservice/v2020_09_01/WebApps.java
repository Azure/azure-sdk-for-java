/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01;

import rx.Observable;
import com.microsoft.azure.management.appservice.v2020_09_01.Sites;
import rx.Completable;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.BackupRequestInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SiteAuthSettingsV2Inner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.StringDictionaryInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SiteConfigResourceInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.RestoreRequestInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.KeyInfoInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.RelayServiceConnectionEntityInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SwiftVirtualNetworkInner;
import com.microsoft.azure.management.appservice.v2020_09_01.BackupItem;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.CsmPublishingCredentialsPoliciesEntityInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SiteAuthSettingsInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.AzureStoragePropertyDictionaryResourceInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.ConnectionStringDictionaryInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SiteLogsConfigInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.PushSettingsInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SlotConfigNamesResourceInner;
import com.microsoft.azure.management.appservice.v2020_09_01.Snapshot;
import com.microsoft.azure.management.appservice.v2020_09_01.ContinuousWebJob;
import com.microsoft.azure.management.appservice.v2020_09_01.Deployment;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.DeploymentInner;
import com.microsoft.azure.management.appservice.v2020_09_01.Identifier;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.IdentifierInner;
import com.microsoft.azure.management.appservice.v2020_09_01.FunctionEnvelope;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.FunctionEnvelopeInner;
import com.microsoft.azure.management.appservice.v2020_09_01.HostNameBinding;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.HostNameBindingInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.HybridConnectionInner;
import com.microsoft.azure.management.appservice.v2020_09_01.WebSiteInstanceStatus;
import com.microsoft.azure.management.appservice.v2020_09_01.ProcessInfo;
import com.microsoft.azure.management.appservice.v2020_09_01.ProcessModuleInfo;
import com.microsoft.azure.management.appservice.v2020_09_01.ProcessThreadInfo;
import com.microsoft.azure.management.appservice.v2020_09_01.PerfMonResponse;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.PremierAddOnInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.PrivateAccessInner;
import com.microsoft.azure.management.appservice.v2020_09_01.PublicCertificate;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.PublicCertificateInner;
import com.microsoft.azure.management.appservice.v2020_09_01.SiteExtensionInfo;
import com.microsoft.azure.management.appservice.v2020_09_01.Slots;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.SiteSourceControlInner;
import com.microsoft.azure.management.appservice.v2020_09_01.TriggeredWebJob;
import com.microsoft.azure.management.appservice.v2020_09_01.SiteCsmUsageQuota;
import com.microsoft.azure.management.appservice.v2020_09_01.SiteVnetInfo;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.VnetInfoInner;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.VnetGatewayInner;
import com.microsoft.azure.management.appservice.v2020_09_01.WebJob;

import java.io.InputStream;

/**
 * Type representing WebApps.
 */
public interface WebApps {
    /**
     * Begins definition for a new Site resource.
     * @param name resource name.
     * @return the first stage of the new Site definition.
     */
    Sites.DefinitionStages.Blank defineSite(String name);

    /**
     * Begins definition for a new Deployment resource.
     * @param name resource name.
     * @return the first stage of the new Deployment definition.
     */
    Deployment.DefinitionStages.Blank defineDeployment(String name);

    /**
     * Begins definition for a new DomainOwnershipIdentifier resource.
     * @param name resource name.
     * @return the first stage of the new DomainOwnershipIdentifier definition.
     */
    Identifier.DefinitionStages.Blank defineDomainOwnershipIdentifier(String name);

    /**
     * Begins definition for a new Function resource.
     * @param name resource name.
     * @return the first stage of the new Function definition.
     */
    FunctionEnvelope.DefinitionStages.Blank defineFunction(String name);

    /**
     * Begins definition for a new Key resource.
     * @param name resource name.
     * @return the first stage of the new Key definition.
     */
    KeyInfo.DefinitionStages.Blank defineKey(String name);

    /**
     * Begins definition for a new HostNameBinding resource.
     * @param name resource name.
     * @return the first stage of the new HostNameBinding definition.
     */
    HostNameBinding.DefinitionStages.Blank defineHostNameBinding(String name);

    /**
     * Begins definition for a new Relay resource.
     * @param name resource name.
     * @return the first stage of the new Relay definition.
     */
    SiteHybridConnection.DefinitionStages.Blank defineRelay(String name);

    /**
     * Begins definition for a new Premieraddon resource.
     * @param name resource name.
     * @return the first stage of the new Premieraddon definition.
     */
    PremierAddOn.DefinitionStages.Blank definePremieraddon(String name);

    /**
     * Begins definition for a new PublicCertificate resource.
     * @param name resource name.
     * @return the first stage of the new PublicCertificate definition.
     */
    PublicCertificate.DefinitionStages.Blank definePublicCertificate(String name);

    /**
     * Begins definition for a new Siteextension resource.
     * @param name resource name.
     * @return the first stage of the new Siteextension definition.
     */
    SiteExtensionInfo.DefinitionStages.Blank defineSiteextension(String name);

    /**
     * Begins definition for a new Slot resource.
     * @param name resource name.
     * @return the first stage of the new Slot definition.
     */
    Slots.DefinitionStages.Blank defineSlot(String name);

    /**
     * Begins definition for a new PrivateEndpointConnection resource.
     * @param name resource name.
     * @return the first stage of the new PrivateEndpointConnection definition.
     */
    PrivateEndpointConnectionResource.DefinitionStages.Blank definePrivateEndpointConnection(String name);

    /**
     * Begins definition for a new VirtualNetworkConnection resource.
     * @param name resource name.
     * @return the first stage of the new VirtualNetworkConnection definition.
     */
    SiteVnetInfo.DefinitionStages.Blank defineVirtualNetworkConnection(String name);

    /**
     * Begins definition for a new Gateway resource.
     * @param name resource name.
     * @return the first stage of the new Gateway definition.
     */
    SiteVnetGateway.DefinitionStages.Blank defineGateway(String name);

    /**
     * Gets the details of a web, mobile, or API app.
     * Description for Gets the details of a web, mobile, or API app.
     *
     * @param resourceGroupName resource group name
     * @param name resource name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Sites> getByResourceGroupAsync(String resourceGroupName, String name);

    /**
     * Gets all web, mobile, and API apps in the specified resource group.
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     *
     * @param resourceGroupName resource group name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Sites> listByResourceGroupAsync(String resourceGroupName);

    /**
     * Get all apps for a subscription.
     * Description for Get all apps for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Sites> listAsync();

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @param resourceGroupName resource group name
     * @param name resource name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteAsync(String resourceGroupName, String name);

    /**
     * Analyze a custom hostname.
     * Description for Analyze a custom hostname.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CustomHostnameAnalysisResult> analyzeCustomHostnameAsync(String resourceGroupName, String name);

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Description for Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable applySlotConfigToProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity);

    /**
     * Creates a backup of an app.
     * Description for Creates a backup of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Backup configuration. You can use the JSON response from the POST action as input here.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> backupAsync(String resourceGroupName, String name, BackupRequestInner request);

    /**
     * List the configurations of an app.
     * Description for List the configurations of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> listConfigurationsAsync(final String resourceGroupName, final String name);

    /**
     * Updates site's Authentication / Authorization settings for apps via the V2 format.
     * Description for Updates site's Authentication / Authorization settings for apps via the V2 format.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettingsV2 Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettingsV2> updateAuthSettingsV2Async(String resourceGroupName, String name, SiteAuthSettingsV2Inner siteAuthSettingsV2);

    /**
     * Gets site's Authentication / Authorization settings for apps via the V2 format.
     * Description for Gets site's Authentication / Authorization settings for apps via the V2 format.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettingsV2> getAuthSettingsV2Async(String resourceGroupName, String name);

    /**
     * Updates the backup configuration of an app.
     * Description for Updates the backup configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Edited backup configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupRequest> updateBackupConfigurationAsync(String resourceGroupName, String name, BackupRequestInner request);

    /**
     * Deletes the backup configuration of an app.
     * Description for Deletes the backup configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteBackupConfigurationAsync(String resourceGroupName, String name);

    /**
     * Gets the backup configuration of an app.
     * Description for Gets the backup configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupRequest> getBackupConfigurationAsync(String resourceGroupName, String name);

    /**
     * Replaces the metadata of an app.
     * Description for Replaces the metadata of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> updateMetadataAsync(String resourceGroupName, String name, StringDictionaryInner metadata);

    /**
     * Gets the metadata of an app.
     * Description for Gets the metadata of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listMetadataAsync(String resourceGroupName, String name);

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> getConfigurationAsync(String resourceGroupName, String name);

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> createOrUpdateConfigurationAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig);

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> updateConfigurationAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig);

    /**
     * Gets the last lines of docker logs for the given site.
     * Description for Gets the last lines of docker logs for the given site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getWebSiteContainerLogsAsync(String resourceGroupName, String name);

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RestoreRequest> discoverBackupAsync(String resourceGroupName, String name, RestoreRequestInner request);

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Description for Fetch a short lived token that can be exchanged for a master key.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<String> getFunctionsAdminTokenAsync(String resourceGroupName, String name);

    /**
     * Get host secrets for a function app.
     * Description for Get host secrets for a function app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostKeys> listHostKeysAsync(String resourceGroupName, String name);

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable listSyncStatusAsync(String resourceGroupName, String name);

    /**
     * Syncs function trigger metadata to the management database.
     * Description for Syncs function trigger metadata to the management database.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable syncFunctionsAsync(String resourceGroupName, String name);

    /**
     * Add or update a host level secret.
     * Description for Add or update a host level secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param keyType The type of host key.
     * @param keyName The name of the key.
     * @param key The key to create or update
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<KeyInfo> createOrUpdateHostSecretAsync(String resourceGroupName, String name, String keyType, String keyName, KeyInfoInner key);

    /**
     * Delete a host level secret.
     * Description for Delete a host level secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param keyType The type of host key.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteHostSecretAsync(String resourceGroupName, String name, String keyType, String keyName);

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> listRelayServiceConnectionsAsync(String resourceGroupName, String name);

    /**
     * Gets a hybrid connection configuration by its name.
     * Description for Gets a hybrid connection configuration by its name.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> getRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName);

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> createOrUpdateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope);

    /**
     * Deletes a relay service connection by its name.
     * Description for Deletes a relay service connection by its name.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName);

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> updateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope);

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteCloneability> isCloneableAsync(String resourceGroupName, String name);

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> listSiteBackupsAsync(final String resourceGroupName, final String name);

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionSecrets> listSyncFunctionTriggersAsync(String resourceGroupName, String name);

    /**
     * Restores a web app.
     * Description for Restores a web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param subscriptionName Azure subscription.
     * @param migrationOptions Migration migrationOptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StorageMigrationResponse> migrateStorageAsync(String resourceGroupName, String name, String subscriptionName, StorageMigrationOptions migrationOptions);

    /**
     * Migrates a local (in-app) MySql database to a remote MySql database.
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param migrationRequestEnvelope MySql migration options.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Operation> migrateMySqlAsync(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope);

    /**
     * Gets a Swift Virtual Network connection.
     * Description for Gets a Swift Virtual Network connection.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SwiftVirtualNetwork> getSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name);

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SwiftVirtualNetwork> createOrUpdateSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope);

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSwiftVirtualNetworkAsync(String resourceGroupName, String name);

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SwiftVirtualNetwork> updateSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope);

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Description for Start capturing network packets for the site (To be deprecated).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<String> startWebSiteNetworkTraceAsync(String resourceGroupName, String name);

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> startWebSiteNetworkTraceOperationAsync(String resourceGroupName, String name);

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopWebSiteNetworkTraceAsync(String resourceGroupName, String name);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTracesAsync(String resourceGroupName, String name, String operationId);

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable generateNewSitePublishingPasswordAsync(String resourceGroupName, String name);

    /**
     * Gets web app's event logs.
     * Description for Gets web app's event logs.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SitePhpErrorLogFlag> getSitePhpErrorLogFlagAsync(String resourceGroupName, String name);

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getProcessDumpAsync(String resourceGroupName, String name, String processId);

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> listPublishingProfileXmlWithSecretsAsync(String resourceGroupName, String name, CsmPublishingProfileOptions publishingProfileOptions);

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable resetProductionSlotConfigAsync(String resourceGroupName, String name);

    /**
     * Restarts an app (or deployment slot, if specified).
     * Description for Restarts an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restartAsync(String resourceGroupName, String name);

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Description for Restores an app from a backup blob in Azure Storage.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param request Information on restore request .
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreFromBackupBlobAsync(String resourceGroupName, String name, RestoreRequestInner request);

    /**
     * Restores a deleted web app to this web app.
     * Description for Restores a deleted web app to this web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Deleted web app restore information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreFromDeletedAppAsync(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest);

    /**
     * Restores a web app from a snapshot.
     * Description for Restores a web app from a snapshot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreSnapshotAsync(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest);

    /**
     * Copies a deployment slot to another deployment slot of an app.
     * Description for Copies a deployment slot to another deployment slot of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param copySlotEntity JSON object that contains the target slot name and site config properties to override the source slot config. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable copyProductionSlotAsync(String resourceGroupName, String name, CsmCopySlotEntity copySlotEntity);

    /**
     * Get the difference in configuration settings between two web app slots.
     * Description for Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SlotDifference> listSlotDifferencesFromProductionAsync(final String resourceGroupName, final String name, final CsmSlotEntity slotSwapEntity);

    /**
     * Swaps two deployment slots of an app.
     * Description for Swaps two deployment slots of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable swapSlotWithProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity);

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Snapshot> listSnapshotsFromDRSecondaryAsync(final String resourceGroupName, final String name);

    /**
     * Starts an app (or deployment slot, if specified).
     * Description for Starts an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startAsync(String resourceGroupName, String name);

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> startNetworkTraceAsync(String resourceGroupName, String name);

    /**
     * Stops an app (or deployment slot, if specified).
     * Description for Stops an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopAsync(String resourceGroupName, String name);

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopNetworkTraceAsync(String resourceGroupName, String name);

    /**
     * Sync web app repository.
     * Description for Sync web app repository.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable syncRepositoryAsync(String resourceGroupName, String name);

    /**
     * Syncs function trigger metadata to the management database.
     * Description for Syncs function trigger metadata to the management database.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable syncFunctionTriggersAsync(String resourceGroupName, String name);

    /**
     * Gets a backup of an app by its ID.
     * Description for Gets a backup of an app by its ID.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> getBackupStatusAsync(String resourceGroupName, String name, String backupId);

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> listBackupsAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a backup of an app by its ID.
     * Description for Deletes a backup of an app by its ID.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteBackupAsync(String resourceGroupName, String name, String backupId);

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> listBackupStatusSecretsAsync(String resourceGroupName, String name, String backupId, BackupRequestInner request);

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param request Information on restore request .
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreAsync(String resourceGroupName, String name, String backupId, RestoreRequestInner request);

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> listBackupsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets a backup of an app by its ID.
     * Description for Gets a backup of an app by its ID.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> getBackupStatusSlotAsync(String resourceGroupName, String name, String backupId, String slot);

    /**
     * Deletes a backup of an app by its ID.
     * Description for Deletes a backup of an app by its ID.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteBackupSlotAsync(String resourceGroupName, String name, String backupId, String slot);

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param backupId ID of backup.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param request Information on backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> listBackupStatusSecretsSlotAsync(String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request);

    /**
     * Restores a specific backup to another app (or deployment slot, if specified).
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param backupId ID of the backup.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
     * @param request Information on restore request .
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreSlotAsync(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request);

    /**
     * Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given site.
     * Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CsmPublishingCredentialsPoliciesCollection> getBasicPublishingCredentialsPoliciesAsync(String resourceGroupName, String name);

    /**
     * Returns whether FTP is allowed on the site or not.
     * Description for Returns whether FTP is allowed on the site or not.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CsmPublishingCredentialsPoliciesEntity> getFtpAllowedAsync(String resourceGroupName, String name);

    /**
     * Updates whether FTP is allowed on the site or not.
     * Description for Updates whether FTP is allowed on the site or not.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param csmPublishingAccessPoliciesEntity the CsmPublishingCredentialsPoliciesEntityInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CsmPublishingCredentialsPoliciesEntity> updateFtpAllowedAsync(String resourceGroupName, String name, CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity);

    /**
     * Returns whether Scm basic auth is allowed on the site or not.
     * Description for Returns whether Scm basic auth is allowed on the site or not.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CsmPublishingCredentialsPoliciesEntity> getScmAllowedAsync(String resourceGroupName, String name);

    /**
     * Updates whether user publishing credentials are allowed on the site or not.
     * Description for Updates whether user publishing credentials are allowed on the site or not.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param csmPublishingAccessPoliciesEntity the CsmPublishingCredentialsPoliciesEntityInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CsmPublishingCredentialsPoliciesEntity> updateScmAllowedAsync(String resourceGroupName, String name, CsmPublishingCredentialsPoliciesEntityInner csmPublishingAccessPoliciesEntity);

    /**
     * Replaces the application settings of an app.
     * Description for Replaces the application settings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param appSettings Application settings of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> updateApplicationSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings);

    /**
     * Gets the application settings of an app.
     * Description for Gets the application settings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listApplicationSettingsAsync(String resourceGroupName, String name);

    /**
     * Replaces the application settings of an app.
     * Description for Replaces the application settings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the application settings for the production slot.
     * @param appSettings Application settings of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> updateApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot, StringDictionaryInner appSettings);

    /**
     * Gets the application settings of an app.
     * Description for Gets the application settings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the application settings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Description for Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettings> updateAuthSettingsAsync(String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings);

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Description for Gets the Authentication/Authorization settings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettings> getAuthSettingsAsync(String resourceGroupName, String name);

    /**
     * Updates the Authentication / Authorization settings associated with web app.
     * Description for Updates the Authentication / Authorization settings associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettings Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettings> updateAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings);

    /**
     * Gets the Authentication/Authorization settings of an app.
     * Description for Gets the Authentication/Authorization settings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettings> getAuthSettingsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the Azure storage account configurations of an app.
     * Description for Updates the Azure storage account configurations of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AzureStoragePropertyDictionaryResource> updateAzureStorageAccountsAsync(String resourceGroupName, String name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts);

    /**
     * Gets the Azure storage account configurations of an app.
     * Description for Gets the Azure storage account configurations of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AzureStoragePropertyDictionaryResource> listAzureStorageAccountsAsync(String resourceGroupName, String name);

    /**
     * Updates the Azure storage account configurations of an app.
     * Description for Updates the Azure storage account configurations of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
     * @param azureStorageAccounts Azure storage accounts of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AzureStoragePropertyDictionaryResource> updateAzureStorageAccountsSlotAsync(String resourceGroupName, String name, String slot, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts);

    /**
     * Gets the Azure storage account configurations of an app.
     * Description for Gets the Azure storage account configurations of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure storage account configurations for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<AzureStoragePropertyDictionaryResource> listAzureStorageAccountsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Replaces the connection strings of an app.
     * Description for Replaces the connection strings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConnectionStringDictionary> updateConnectionStringsAsync(String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings);

    /**
     * Gets the connection strings of an app.
     * Description for Gets the connection strings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConnectionStringDictionary> listConnectionStringsAsync(String resourceGroupName, String name);

    /**
     * Replaces the connection strings of an app.
     * Description for Replaces the connection strings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the connection settings for the production slot.
     * @param connectionStrings Connection strings of the app or deployment slot. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConnectionStringDictionary> updateConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings);

    /**
     * Gets the connection strings of an app.
     * Description for Gets the connection strings of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection settings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ConnectionStringDictionary> listConnectionStringsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets the logging configuration of an app.
     * Description for Gets the logging configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteLogsConfig> getDiagnosticLogsConfigurationAsync(String resourceGroupName, String name);

    /**
     * Updates the logging configuration of an app.
     * Description for Updates the logging configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteLogsConfig> updateDiagnosticLogsConfigAsync(String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig);

    /**
     * Gets the logging configuration of an app.
     * Description for Gets the logging configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteLogsConfig> getDiagnosticLogsConfigurationSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the logging configuration of an app.
     * Description for Updates the logging configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging configuration for the production slot.
     * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change in the "properties" property.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteLogsConfig> updateDiagnosticLogsConfigSlotAsync(String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig);

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Description for Gets the Git/FTP publishing credentials of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<User> listPublishingCredentialsAsync(String resourceGroupName, String name);

    /**
     * Gets the Git/FTP publishing credentials of an app.
     * Description for Gets the Git/FTP publishing credentials of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing credentials for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<User> listPublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the Push settings associated with web app.
     * Description for Updates the Push settings associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param pushSettings Push settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PushSettings> updateSitePushSettingsAsync(String resourceGroupName, String name, PushSettingsInner pushSettings);

    /**
     * Gets the Push settings associated with web app.
     * Description for Gets the Push settings associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PushSettings> listSitePushSettingsAsync(String resourceGroupName, String name);

    /**
     * Updates the Push settings associated with web app.
     * Description for Updates the Push settings associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param pushSettings Push settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PushSettings> updateSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot, PushSettingsInner pushSettings);

    /**
     * Gets the Push settings associated with web app.
     * Description for Gets the Push settings associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PushSettings> listSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SlotConfigNamesResource> listSlotConfigurationNamesAsync(String resourceGroupName, String name);

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation.
     * Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slotConfigNames Names of application settings and connection strings. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SlotConfigNamesResource> updateSlotConfigurationNamesAsync(String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames);

    /**
     * Returns all Snapshots to the user.
     * Description for Returns all Snapshots to the user.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Snapshot> listSnapshotsAsync(final String resourceGroupName, final String name);

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfoAsync(final String resourceGroupName, final String name);

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> getConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId);

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Description for Reverts the configuration of an app to a previous snapshot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable recoverSiteConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId);

    /**
     * Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigurationSnapshotInfo> listConfigurationSnapshotInfoSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets a snapshot of the configuration of an app at a previous point in time.
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> getConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot);

    /**
     * Reverts the configuration of an app to a previous snapshot.
     * Description for Reverts the configuration of an app to a previous snapshot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param snapshotId The ID of the snapshot to read.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable recoverSiteConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot);

    /**
     * Returns all Snapshots to the user.
     * Description for Returns all Snapshots to the user.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Snapshot> listSnapshotsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets the ZIP archived docker log files for the given site.
     * Description for Gets the ZIP archived docker log files for the given site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getContainerLogsZipAsync(String resourceGroupName, String name);

    /**
     * Gets the ZIP archived docker log files for the given site.
     * Description for Gets the ZIP archived docker log files for the given site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getContainerLogsZipSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ContinuousWebJob> getContinuousWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * Description for List continuous web jobs for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ContinuousWebJob> listContinuousWebJobsAsync(final String resourceGroupName, final String name);

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteContinuousWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Description for Start a continuous web job for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startContinuousWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Description for Stop a continuous web job for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopContinuousWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * List continuous web jobs for an app, or a deployment slot.
     * Description for List continuous web jobs for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ContinuousWebJob> listContinuousWebJobsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets a continuous web job by its ID for an app, or a deployment slot.
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ContinuousWebJob> getContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * Delete a continuous web job by its ID for an app, or a deployment slot.
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * Start a continuous web job for an app, or a deployment slot.
     * Description for Start a continuous web job for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * Stop a continuous web job for an app, or a deployment slot.
     * Description for Stop a continuous web job for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> getDeploymentAsync(String resourceGroupName, String name, String id);

    /**
     * List deployments for an app, or a deployment slot.
     * Description for List deployments for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> listDeploymentsAsync(final String resourceGroupName, final String name);

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteDeploymentAsync(String resourceGroupName, String name, String id);

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> listDeploymentLogAsync(String resourceGroupName, String name, String id);

    /**
     * List deployments for an app, or a deployment slot.
     * Description for List deployments for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> listDeploymentsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get a deployment by its ID for an app, or a deployment slot.
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> getDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot);

    /**
     * Create a deployment for an app, or a deployment slot.
     * Description for Create a deployment for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id ID of an existing deployment.
     * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment for the production slot.
     * @param deployment Deployment details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> createDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, DeploymentInner deployment);

    /**
     * Delete a deployment by its ID for an app, or a deployment slot.
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id Deployment ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot);

    /**
     * List deployment log for specific deployment for an app, or a deployment slot.
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param id The ID of a specific deployment. This is the value of the name property in the JSON response from "GET /api/sites/{siteName}/deployments".
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Deployment> listDeploymentLogSlotAsync(String resourceGroupName, String name, String id, String slot);

    /**
     * Get domain ownership identifier for web app.
     * Description for Get domain ownership identifier for web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Identifier> getDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName);

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Description for Lists ownership identifiers for domain associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Identifier> listDomainOwnershipIdentifiersAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a domain ownership identifier for a web app.
     * Description for Deletes a domain ownership identifier for a web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName);

    /**
     * Lists ownership identifiers for domain associated with web app.
     * Description for Lists ownership identifiers for domain associated with web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Identifier> listDomainOwnershipIdentifiersSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get domain ownership identifier for web app.
     * Description for Get domain ownership identifier for web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Identifier> getDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot);

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Identifier> createOrUpdateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier);

    /**
     * Deletes a domain ownership identifier for a web app.
     * Description for Deletes a domain ownership identifier for a web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot);

    /**
     * Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param domainOwnershipIdentifierName Name of domain ownership identifier.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Identifier> updateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier);

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> getMSDeployStatusAsync(String resourceGroupName, String name);

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param mSDeploy Details of MSDeploy operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> createMSDeployOperationAsync(String resourceGroupName, String name, MSDeploy mSDeploy);

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployLog> getMSDeployLogAsync(String resourceGroupName, String name);

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> getInstanceMsDeployStatusAsync(String resourceGroupName, String name, String instanceId);

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> createInstanceMSDeployOperationAsync(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy);

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param instanceId ID of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployLog> getInstanceMSDeployLogAsync(String resourceGroupName, String name, String instanceId);

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> getMSDeployStatusSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param mSDeploy Details of MSDeploy operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> createMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, MSDeploy mSDeploy);

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployLog> getMSDeployLogSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Get the status of the last MSDeploy operation.
     * Description for Get the status of the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> getInstanceMsDeployStatusSlotAsync(String resourceGroupName, String name, String slot, String instanceId);

    /**
     * Invoke the MSDeploy web app extension.
     * Description for Invoke the MSDeploy web app extension.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @param mSDeploy Details of MSDeploy operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployStatus> createInstanceMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy);

    /**
     * Get the MSDeploy Log for the last MSDeploy operation.
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param instanceId ID of web app instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MSDeployLog> getInstanceMSDeployLogSlotAsync(String resourceGroupName, String name, String slot, String instanceId);

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Description for Get function information by its ID for web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionEnvelope> getFunctionAsync(String resourceGroupName, String name, String functionName);

    /**
     * List the functions for a web site, or a deployment slot.
     * Description for List the functions for a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionEnvelope> listFunctionsAsync(final String resourceGroupName, final String name);

    /**
     * Delete a function for web site, or a deployment slot.
     * Description for Delete a function for web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteFunctionAsync(String resourceGroupName, String name, String functionName);

    /**
     * Get function keys for a function in a web site, or a deployment slot.
     * Description for Get function keys for a function in a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listFunctionKeysAsync(String resourceGroupName, String name, String functionName);

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionSecrets> listFunctionSecretsAsync(String resourceGroupName, String name, String functionName);

    /**
     * List the functions for a web site, or a deployment slot.
     * Description for List the functions for a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionEnvelope> listInstanceFunctionsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get function information by its ID for web site, or a deployment slot.
     * Description for Get function information by its ID for web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionEnvelope> getInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot);

    /**
     * Create function for web site, or a deployment slot.
     * Description for Create function for web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot.
     * @param functionEnvelope Function details.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionEnvelope> createInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope);

    /**
     * Delete a function for web site, or a deployment slot.
     * Description for Delete a function for web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot);

    /**
     * Get function keys for a function in a web site, or a deployment slot.
     * Description for Get function keys for a function in a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listFunctionKeysSlotAsync(String resourceGroupName, String name, String functionName, String slot);

    /**
     * Get function secrets for a function in a web site, or a deployment slot.
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName Function name.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionSecrets> listFunctionSecretsSlotAsync(String resourceGroupName, String name, String functionName, String slot);

    /**
     * Delete a function secret.
     * Description for Delete a function secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName The name of the function.
     * @param keyName The name of the key.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteFunctionSecretAsync(String resourceGroupName, String name, String functionName, String keyName);

    /**
     * Add or update a function secret.
     * Description for Add or update a function secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName The name of the function.
     * @param keyName The name of the key.
     * @param slot Name of the deployment slot.
     * @param key The key to create or update
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<KeyInfo> createOrUpdateFunctionSecretSlotAsync(String resourceGroupName, String name, String functionName, String keyName, String slot, KeyInfoInner key);

    /**
     * Delete a function secret.
     * Description for Delete a function secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param functionName The name of the function.
     * @param keyName The name of the key.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteFunctionSecretSlotAsync(String resourceGroupName, String name, String functionName, String keyName, String slot);

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostNameBinding> getHostNameBindingAsync(String resourceGroupName, String name, String hostName);

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Description for Get hostname bindings for an app or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostNameBinding> listHostNameBindingsAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteHostNameBindingAsync(String resourceGroupName, String name, String hostName);

    /**
     * Get hostname bindings for an app or a deployment slot.
     * Description for Get hostname bindings for an app or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostNameBinding> listHostNameBindingsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get the named hostname binding for an app (or deployment slot, if specified).
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostNameBinding> getHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName);

    /**
     * Creates a hostname binding for an app.
     * Description for Creates a hostname binding for an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param hostName Hostname in the hostname binding.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
     * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostNameBinding> createOrUpdateHostNameBindingSlotAsync(String resourceGroupName, String name, String hostName, String slot, HostNameBindingInner hostNameBinding);

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param hostName Hostname in the hostname binding.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName);

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteHybridConnection> getHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName);

    /**
     * Removes a Hybrid Connection from this site.
     * Description for Removes a Hybrid Connection from this site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName);

    /**
     * Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteHybridConnection> getHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot);

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the hybrid connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteHybridConnection> createOrUpdateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope);

    /**
     * Removes a Hybrid Connection from this site.
     * Description for Removes a Hybrid Connection from this site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot);

    /**
     * Creates a new Hybrid Connection using a Service Bus relay.
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param namespaceName The namespace for this hybrid connection.
     * @param relayName The relay name for this hybrid connection.
     * @param slot The name of the slot for the web app.
     * @param connectionEnvelope The details of the hybrid connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteHybridConnection> updateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope);

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteHybridConnection> listHybridConnectionsAsync(String resourceGroupName, String name);

    /**
     * Retrieves all Service Bus Hybrid Connections used by this Web App.
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteHybridConnection> listHybridConnectionsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebSiteInstanceStatus> getInstanceInfoAsync(String resourceGroupName, String name, String instanceId);

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebSiteInstanceStatus> listInstanceIdentifiersAsync(final String resourceGroupName, final String name);

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getInstanceProcessDumpAsync(String resourceGroupName, String name, String processId, String instanceId);

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebSiteInstanceStatus> listInstanceIdentifiersSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets all scale-out instances of an app.
     * Description for Gets all scale-out instances of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param instanceId the String value
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production slot instances.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebSiteInstanceStatus> getInstanceInfoSlotAsync(String resourceGroupName, String name, String instanceId, String slot);

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getInstanceProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> getInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId);

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> listInstanceProcessesAsync(final String resourceGroupName, final String name, final String instanceId);

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId);

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> listProcessesAsync(final String resourceGroupName, final String name);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> getProcessAsync(String resourceGroupName, String name, String processId);

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteProcessAsync(String resourceGroupName, String name, String processId);

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> listInstanceProcessesSlotAsync(final String resourceGroupName, final String name, final String slot, final String instanceId);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> getInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId);

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId);

    /**
     * Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> listProcessesSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessInfo> getProcessSlotAsync(String resourceGroupName, String name, String processId, String slot);

    /**
     * Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteProcessSlotAsync(String resourceGroupName, String name, String processId, String slot);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> getInstanceProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress, String instanceId);

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> listInstanceProcessModulesAsync(final String resourceGroupName, final String name, final String processId, final String instanceId);

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> listProcessModulesAsync(final String resourceGroupName, final String name, final String processId);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> getProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress);

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> listInstanceProcessModulesSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot, final String instanceId);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> getInstanceProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId);

    /**
     * List module information for a process by its ID for a specific scaled-out instance in a web site.
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> listProcessModulesSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot);

    /**
     * Get process information by its ID for a specific scaled-out instance in a web site.
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param baseAddress Module base address.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessModuleInfo> getProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot);

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessThreadInfo> listInstanceProcessThreadsAsync(final String resourceGroupName, final String name, final String processId, final String instanceId);

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessThreadInfo> listProcessThreadsAsync(final String resourceGroupName, final String name, final String processId);

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in the JSON response from "GET api/sites/{siteName}/instances".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessThreadInfo> listInstanceProcessThreadsSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot, final String instanceId);

    /**
     * List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<ProcessThreadInfo> listProcessThreadsSlotAsync(final String resourceGroupName, final String name, final String processId, final String slot);

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MigrateMySqlStatus> getMigrateMySqlStatusAsync(String resourceGroupName, String name);

    /**
     * Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<MigrateMySqlStatus> getMigrateMySqlStatusSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkFeatures> listNetworkFeaturesAsync(String resourceGroupName, String name, String view);

    /**
     * Gets all network features used by the app (or deployment slot, if specified).
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param view The type of view. This can either be "summary" or "detailed".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get network features for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkFeatures> listNetworkFeaturesSlotAsync(String resourceGroupName, String name, String view, String slot);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTraceOperationAsync(String resourceGroupName, String name, String operationId);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTraceOperationV2Async(String resourceGroupName, String name, String operationId);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String operationId, String slot);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTraceOperationSlotV2Async(String resourceGroupName, String name, String operationId, String slot);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTracesV2Async(String resourceGroupName, String name, String operationId);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTracesSlotV2Async(String resourceGroupName, String name, String operationId, String slot);

    /**
     * Gets perfmon counters for web app.
     * Description for Gets perfmon counters for web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PerfMonResponse> listPerfMonCountersAsync(final String resourceGroupName, final String name);

    /**
     * Gets perfmon counters for web app.
     * Description for Gets perfmon counters for web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PerfMonResponse> listPerfMonCountersSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets a named add-on of an app.
     * Description for Gets a named add-on of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PremierAddOn> getPremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName);

    /**
     * Delete a premier add-on from an app.
     * Description for Delete a premier add-on from an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deletePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName);

    /**
     * Gets the premier add-ons of an app.
     * Description for Gets the premier add-ons of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PremierAddOn> listPremierAddOnsAsync(String resourceGroupName, String name);

    /**
     * Gets the premier add-ons of an app.
     * Description for Gets the premier add-ons of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier add-ons for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PremierAddOn> listPremierAddOnsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets a named add-on of an app.
     * Description for Gets a named add-on of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named add-on for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PremierAddOn> getPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot);

    /**
     * Updates a named add-on of an app.
     * Description for Updates a named add-on of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PremierAddOn> addPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnInner premierAddOn);

    /**
     * Delete a premier add-on from an app.
     * Description for Delete a premier add-on from an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named add-on for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deletePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot);

    /**
     * Updates a named add-on of an app.
     * Description for Updates a named add-on of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param premierAddOnName Add-on name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named add-on for the production slot.
     * @param premierAddOn A JSON representation of the edited premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PremierAddOn> updatePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnPatchResource premierAddOn);

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateAccess> getPrivateAccessAsync(String resourceGroupName, String name);

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param access The information for the private access
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateAccess> putPrivateAccessVnetAsync(String resourceGroupName, String name, PrivateAccessInner access);

    /**
     * Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateAccess> getPrivateAccessSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for the web app.
     * @param access The information for the private access
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateAccess> putPrivateAccessVnetSlotAsync(String resourceGroupName, String name, String slot, PrivateAccessInner access);

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PublicCertificate> getPublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName);

    /**
     * Get public certificates for an app or a deployment slot.
     * Description for Get public certificates for an app or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PublicCertificate> listPublicCertificatesAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deletePublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName);

    /**
     * Get public certificates for an app or a deployment slot.
     * Description for Get public certificates for an app or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PublicCertificate> listPublicCertificatesSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get the named public certificate for an app (or deployment slot, if specified).
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for the production slot.
     * @param publicCertificateName Public certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PublicCertificate> getPublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName);

    /**
     * Creates a hostname binding for an app.
     * Description for Creates a hostname binding for an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param publicCertificateName Public certificate name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding for the production slot.
     * @param publicCertificate Public certificate details. This is the JSON representation of a PublicCertificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PublicCertificate> createOrUpdatePublicCertificateSlotAsync(String resourceGroupName, String name, String publicCertificateName, String slot, PublicCertificateInner publicCertificate);

    /**
     * Deletes a hostname binding for an app.
     * Description for Deletes a hostname binding for an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding for the production slot.
     * @param publicCertificateName Public certificate name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deletePublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName);

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteExtensionInfo> getSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId);

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteExtensionInfo> listSiteExtensionsAsync(final String resourceGroupName, final String name);

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Description for Remove a site extension from a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId);

    /**
     * Get list of siteextensions for a web site, or a deployment slot.
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteExtensionInfo> listSiteExtensionsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Get site extension information by its ID for a web site, or a deployment slot.
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteExtensionInfo> getSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot);

    /**
     * Install site extension on a web site, or a deployment slot.
     * Description for Install site extension on a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteExtensionInfo> installSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot);

    /**
     * Remove a site extension from a web site, or a deployment slot.
     * Description for Remove a site extension from a web site, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param siteExtensionId Site extension name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot);

    /**
     * Gets the details of a web, mobile, or API app.
     * Description for Gets the details of a web, mobile, or API app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Slots> getSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets an app's deployment slots.
     * Description for Gets an app's deployment slots.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Slots> listSlotsAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a web, mobile, or API app, or one of the deployment slots.
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app to delete.
     * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Analyze a custom hostname.
     * Description for Analyze a custom hostname.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<CustomHostnameAnalysisResult> analyzeCustomHostnameSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Applies the configuration settings from the target slot onto the current slot.
     * Description for Applies the configuration settings from the target slot onto the current slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable applySlotConfigurationSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity);

    /**
     * Creates a backup of an app.
     * Description for Creates a backup of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup for the production slot.
     * @param request Backup configuration. You can use the JSON response from the POST action as input here.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> backupSlotAsync(String resourceGroupName, String name, String slot, BackupRequestInner request);

    /**
     * List the configurations of an app.
     * Description for List the configurations of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> listConfigurationsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Updates site's Authentication / Authorization settings for apps via the V2 format.
     * Description for Updates site's Authentication / Authorization settings for apps via the V2 format.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param siteAuthSettingsV2 Auth settings associated with web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettingsV2> updateAuthSettingsV2SlotAsync(String resourceGroupName, String name, String slot, SiteAuthSettingsV2Inner siteAuthSettingsV2);

    /**
     * Gets site's Authentication / Authorization settings for apps via the V2 format.
     * Description for Gets site's Authentication / Authorization settings for apps via the V2 format.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteAuthSettingsV2> getAuthSettingsV2SlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the backup configuration of an app.
     * Description for Updates the backup configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup configuration for the production slot.
     * @param request Edited backup configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupRequest> updateBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, BackupRequestInner request);

    /**
     * Deletes the backup configuration of an app.
     * Description for Deletes the backup configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets the backup configuration of an app.
     * Description for Gets the backup configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupRequest> getBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Replaces the metadata of an app.
     * Description for Replaces the metadata of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the metadata for the production slot.
     * @param metadata Edited metadata of the app or deployment slot. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> updateMetadataSlotAsync(String resourceGroupName, String name, String slot, StringDictionaryInner metadata);

    /**
     * Gets the metadata of an app.
     * Description for Gets the metadata of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listMetadataSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will return configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> getConfigurationSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> createOrUpdateConfigurationSlotAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig);

    /**
     * Updates the configuration of an app.
     * Description for Updates the configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update configuration for the production slot.
     * @param siteConfig JSON representation of a SiteConfig object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteConfigResource> updateConfigurationSlotAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig);

    /**
     * Gets the last lines of docker logs for the given site.
     * Description for Gets the last lines of docker logs for the given site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getWebSiteContainerLogsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery for the production slot.
     * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery of backup.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RestoreRequest> discoverBackupSlotAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request);

    /**
     * Fetch a short lived token that can be exchanged for a master key.
     * Description for Fetch a short lived token that can be exchanged for a master key.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<String> getFunctionsAdminTokenSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Get host secrets for a function app.
     * Description for Get host secrets for a function app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<HostKeys> listHostKeysSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable listSyncStatusSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Syncs function trigger metadata to the management database.
     * Description for Syncs function trigger metadata to the management database.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable syncFunctionsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Add or update a host level secret.
     * Description for Add or update a host level secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param keyType The type of host key.
     * @param keyName The name of the key.
     * @param slot Name of the deployment slot.
     * @param key The key to create or update
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<KeyInfo> createOrUpdateHostSecretSlotAsync(String resourceGroupName, String name, String keyType, String keyName, String slot, KeyInfoInner key);

    /**
     * Delete a host level secret.
     * Description for Delete a host level secret.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param keyType The type of host key.
     * @param keyName The name of the key.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteHostSecretSlotAsync(String resourceGroupName, String name, String keyType, String keyName, String slot);

    /**
     * Gets hybrid connections configured for an app (or deployment slot, if specified).
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid connections for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> listRelayServiceConnectionsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets a hybrid connection configuration by its name.
     * Description for Gets a hybrid connection configuration by its name.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid connection for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> getRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot);

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> createOrUpdateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope);

    /**
     * Deletes a relay service connection by its name.
     * Description for Deletes a relay service connection by its name.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid connection for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot);

    /**
     * Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param entityName Name of the hybrid connection configuration.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a hybrid connection for the production slot.
     * @param connectionEnvelope Details of the hybrid connection configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<RelayServiceConnectionEntity> updateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope);

    /**
     * Shows whether an app can be cloned to another resource group or subscription.
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. By default, this API returns information on the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteCloneability> isCloneableSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets existing backups of an app.
     * Description for Gets existing backups of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<BackupItem> listSiteBackupsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * This is to allow calling via powershell and ARM template.
     * Description for This is to allow calling via powershell and ARM template.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<FunctionSecrets> listSyncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets a Swift Virtual Network connection.
     * Description for Gets a Swift Virtual Network connection.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SwiftVirtualNetwork> getSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SwiftVirtualNetwork> createOrUpdateSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope);

    /**
     * Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSwiftVirtualNetworkSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
    in use by another App Service Plan other than the one this App is in.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update connections for the production slot.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SwiftVirtualNetwork> updateSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope);

    /**
     * Start capturing network packets for the site (To be deprecated).
     * Description for Start capturing network packets for the site (To be deprecated).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<String> startWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> startWebSiteNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param operationId GUID of the operation.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> getNetworkTracesSlotAsync(String resourceGroupName, String name, String operationId, String slot);

    /**
     * Generates a new publishing password for an app (or deployment slot, if specified).
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new publishing password for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable generateNewSitePublishingPasswordSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets web app's event logs.
     * Description for Gets web app's event logs.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SitePhpErrorLogFlag> getSitePhpErrorLogFlagSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param processId PID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> getProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot);

    /**
     * Gets the publishing profile for an app (or deployment slot, if specified).
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing profile for the production slot.
     * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<InputStream> listPublishingProfileXmlWithSecretsSlotAsync(String resourceGroupName, String name, String slot, CsmPublishingProfileOptions publishingProfileOptions);

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API resets configuration settings for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable resetSlotConfigurationSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Restarts an app (or deployment slot, if specified).
     * Description for Restarts an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restart the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restartSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Restores an app from a backup blob in Azure Storage.
     * Description for Restores an app from a backup blob in Azure Storage.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup of the production slot.
     * @param request Information on restore request .
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreFromBackupBlobSlotAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request);

    /**
     * Restores a deleted web app to this web app.
     * Description for Restores a deleted web app to this web app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param restoreRequest Deleted web app restore information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreFromDeletedAppSlotAsync(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest);

    /**
     * Restores a web app from a snapshot.
     * Description for Restores a web app from a snapshot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable restoreSnapshotSlotAsync(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest);

    /**
     * Copies a deployment slot to another deployment slot of an app.
     * Description for Copies a deployment slot to another deployment slot of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param copySlotEntity JSON object that contains the target slot name and site config properties to override the source slot config. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable copySlotSlotAsync(String resourceGroupName, String name, String slot, CsmCopySlotEntity copySlotEntity);

    /**
     * Get the difference in configuration settings between two web app slots.
     * Description for Get the difference in configuration settings between two web app slots.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SlotDifference> listSlotDifferencesSlotAsync(final String resourceGroupName, final String name, final String slot, final CsmSlotEntity slotSwapEntity);

    /**
     * Swaps two deployment slots of an app.
     * Description for Swaps two deployment slots of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the source slot.
     * @param slotSwapEntity JSON object that contains the target slot name. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable swapSlotSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity);

    /**
     * Returns all Snapshots to the user from DRSecondary endpoint.
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Website Name.
     * @param slot Website Slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<Snapshot> listSnapshotsFromDRSecondarySlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Starts an app (or deployment slot, if specified).
     * Description for Starts an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will start the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable startSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Start capturing network packets for the site.
     * Description for Start capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<NetworkTrace> startNetworkTraceSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Stops an app (or deployment slot, if specified).
     * Description for Stops an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will stop the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Stop ongoing capturing network packets for the site.
     * Description for Stop ongoing capturing network packets for the site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name The name of the web app.
     * @param slot The name of the slot for this web app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable stopNetworkTraceSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Sync web app repository.
     * Description for Sync web app repository.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of web app.
     * @param slot Name of web app slot. If not specified then will default to production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable syncRepositorySlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Syncs function trigger metadata to the management database.
     * Description for Syncs function trigger metadata to the management database.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable syncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Gets a private endpoint connection.
     * Description for Gets a private endpoint connection.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the site.
     * @param privateEndpointConnectionName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateEndpointConnectionResource> getPrivateEndpointConnectionAsync(String resourceGroupName, String name, String privateEndpointConnectionName);

    /**
     * Deletes a private endpoint connection.
     * Description for Deletes a private endpoint connection.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the site.
     * @param privateEndpointConnectionName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deletePrivateEndpointConnectionAsync(String resourceGroupName, String name, String privateEndpointConnectionName);

    /**
     * Gets the private link resources.
     * Description for Gets the private link resources.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<PrivateLinkResourcesWrapper> getPrivateLinkResourcesAsync(String resourceGroupName, String name);

    /**
     * Gets the source control configuration of an app.
     * Description for Gets the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the source control configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteSourceControl> getSourceControlSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteSourceControl> createOrUpdateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl);

    /**
     * Deletes the source control configuration of an app.
     * Description for Deletes the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the source control configuration for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSourceControlSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will update the source control configuration for the production slot.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteSourceControl> updateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl);

    /**
     * Gets the source control configuration of an app.
     * Description for Gets the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteSourceControl> getSourceControlAsync(String resourceGroupName, String name);

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteSourceControl> createOrUpdateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl);

    /**
     * Deletes the source control configuration of an app.
     * Description for Deletes the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteSourceControlAsync(String resourceGroupName, String name);

    /**
     * Updates the source control configuration of an app.
     * Description for Updates the source control configuration of an app.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param siteSourceControl JSON representation of a SiteSourceControl object. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteSourceControl> updateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl);

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredWebJob> getTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * Description for List triggered web jobs for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredWebJob> listTriggeredWebJobsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API deletes web job for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * Description for List a triggered web job's history for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredJobHistory> listTriggeredWebJobHistorySlotAsync(final String resourceGroupName, final String name, final String webJobName, final String slot);

    /**
     * Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredJobHistory> getTriggeredWebJobHistorySlotAsync(String resourceGroupName, String name, String webJobName, String id, String slot);

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Description for Run a triggered web job for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable runTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * List triggered web jobs for an app, or a deployment slot.
     * Description for List triggered web jobs for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredWebJob> listTriggeredWebJobsAsync(final String resourceGroupName, final String name);

    /**
     * Gets a triggered web job by its ID for an app, or a deployment slot.
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredWebJob> getTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * Delete a triggered web job by its ID for an app, or a deployment slot.
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * List a triggered web job's history for an app, or a deployment slot.
     * Description for List a triggered web job's history for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredJobHistory> listTriggeredWebJobHistoryAsync(final String resourceGroupName, final String name, final String webJobName);

    /**
     * Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @param id History ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<TriggeredJobHistory> getTriggeredWebJobHistoryAsync(String resourceGroupName, String name, String webJobName, String id);

    /**
     * Run a triggered web job for an app, or a deployment slot.
     * Description for Run a triggered web job for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of Web Job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable runTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName);

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota information of the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteCsmUsageQuota> listUsagesSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * Gets the quota usage information of an app (or deployment slot, if specified).
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteCsmUsageQuota> listUsagesAsync(final String resourceGroupName, final String name);

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named virtual network for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetInfo> getVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot);

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get virtual network connections for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetInfo> listVnetConnectionsSlotAsync(String resourceGroupName, String name, String slot);

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the connection for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot);

    /**
     * Gets the virtual networks the app (or deployment slot) is connected to.
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetInfo> listVnetConnectionsAsync(String resourceGroupName, String name);

    /**
     * Gets a virtual network the app (or deployment slot) is connected to by name.
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetInfo> getVnetConnectionAsync(String resourceGroupName, String name, String vnetName);

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetInfo> createOrUpdateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope);

    /**
     * Deletes a connection from an app (or deployment slot to a named virtual network.
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the virtual network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteVnetConnectionAsync(String resourceGroupName, String name, String vnetName);

    /**
     * Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of an existing Virtual Network.
     * @param connectionEnvelope Properties of the Virtual Network connection. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetInfo> updateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope);

    /**
     * Gets an app's Virtual Network gateway.
     * Description for Gets an app's Virtual Network gateway.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for the production slot's Virtual Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetGateway> getVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot);

    /**
     * Gets an app's Virtual Network gateway.
     * Description for Gets an app's Virtual Network gateway.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetGateway> getVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName);

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetGateway> createOrUpdateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope);

    /**
     * Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the app.
     * @param vnetName Name of the Virtual Network.
     * @param gatewayName Name of the gateway. Currently, the only supported string is "primary".
     * @param connectionEnvelope The properties to update this gateway with.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<SiteVnetGateway> updateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope);

    /**
     * Get webjob information for an app, or a deployment slot.
     * Description for Get webjob information for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebJob> getWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot);

    /**
     * List webjobs for an app, or a deployment slot.
     * Description for List webjobs for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for the production slot.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebJob> listWebJobsSlotAsync(final String resourceGroupName, final String name, final String slot);

    /**
     * List webjobs for an app, or a deployment slot.
     * Description for List webjobs for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebJob> listWebJobsAsync(final String resourceGroupName, final String name);

    /**
     * Get webjob information for an app, or a deployment slot.
     * Description for Get webjob information for an app, or a deployment slot.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site name.
     * @param webJobName Name of the web job.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<WebJob> getWebJobAsync(String resourceGroupName, String name, String webJobName);

}
