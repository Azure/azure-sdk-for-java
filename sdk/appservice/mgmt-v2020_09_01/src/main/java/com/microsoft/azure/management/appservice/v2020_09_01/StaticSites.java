/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2020_09_01;

import com.microsoft.azure.arm.collection.SupportsCreating;
import com.microsoft.azure.arm.resources.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.arm.resources.collection.SupportsBatchDeletion;
import com.microsoft.azure.arm.resources.collection.SupportsGettingByResourceGroup;
import rx.Observable;
import com.microsoft.azure.arm.resources.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.arm.collection.SupportsListing;
import rx.Completable;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.StaticSitesInner;
import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteBuildARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.implementation.StringDictionaryInner;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteFunctionOverviewARMResource;
import com.microsoft.azure.management.appservice.v2020_09_01.StaticSiteCustomDomainOverviewARMResource;

/**
 * Type representing StaticSites.
 */
public interface StaticSites extends SupportsCreating<StaticSiteARMResource.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<StaticSiteARMResource>, SupportsListingByResourceGroup<StaticSiteARMResource>, SupportsListing<StaticSiteARMResource>, HasInner<StaticSitesInner> {
    /**
     * Begins definition for a new CustomDomain resource.
     * @param name resource name.
     * @return the first stage of the new CustomDomain definition.
     */
    StaticSiteCustomDomainOverviewARMResource.DefinitionStages.Blank defineCustomDomain(String name);

    /**
     * Creates an invitation link for a user with the role.
     * Description for Creates an invitation link for a user with the role.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param staticSiteUserRolesInvitationEnvelope the StaticSiteUserInvitationRequestResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteUserInvitationResponseResource> createUserRolesInvitationLinkAsync(String resourceGroupName, String name, StaticSiteUserInvitationRequestResource staticSiteUserRolesInvitationEnvelope);

    /**
     * Detaches a static site.
     * Description for Detaches a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site to detach.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable detachStaticSiteAsync(String resourceGroupName, String name);

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name);

    /**
     * Lists the secrets for an existing static site.
     * Description for Lists the secrets for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listStaticSiteSecretsAsync(String resourceGroupName, String name);

    /**
     * Resets the api key for an existing static site.
     * Description for Resets the api key for an existing static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param resetPropertiesEnvelope the StaticSiteResetPropertiesARMResource value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable resetStaticSiteApiKeyAsync(String resourceGroupName, String name, StaticSiteResetPropertiesARMResource resetPropertiesEnvelope);

    /**
     * Generates a preview workflow file for the static site.
     * Description for Generates a preview workflow file for the static site.
     *
     * @param location Location where you plan to create the static site.
     * @param staticSitesWorkflowPreviewRequest A JSON representation of the StaticSitesWorkflowPreviewRequest properties. See example.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSitesWorkflowPreview> previewWorkflowAsync(String location, StaticSitesWorkflowPreviewRequest staticSitesWorkflowPreviewRequest);

    /**
     * Gets the list of users of a static site.
     * Description for Gets the list of users of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param authprovider The auth provider for the users.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteUserARMResource> listStaticSiteUsersAsync(final String resourceGroupName, final String name, final String authprovider);

    /**
     * Deletes the user entry from the static site.
     * Description for Deletes the user entry from the static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the staticsite.
     * @param authprovider The auth provider for this user.
     * @param userid The user id of the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteStaticSiteUserAsync(String resourceGroupName, String name, String authprovider, String userid);

    /**
     * Gets the details of a static site build.
     * Description for Gets the details of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteBuildARMResource> getStaticSiteBuildAsync(String resourceGroupName, String name, String prId);

    /**
     * Gets all static site builds for a particular static site.
     * Description for Gets all static site builds for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteBuildARMResource> getStaticSiteBuildsAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a static site build.
     * Description for Deletes a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteStaticSiteBuildAsync(String resourceGroupName, String name, String prId);

    /**
     * Gets the application settings of a static site.
     * Description for Gets the application settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> listStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId);

    /**
     * Creates or updates the function app settings of a static site build.
     * Description for Creates or updates the function app settings of a static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> createOrUpdateStaticSiteBuildFunctionAppSettingsAsync(String resourceGroupName, String name, String prId, StringDictionaryInner appSettings);

    /**
     * Creates or updates the function app settings of a static site.
     * Description for Creates or updates the function app settings of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param appSettings the StringDictionaryInner value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StringDictionary> createOrUpdateStaticSiteFunctionAppSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings);

    /**
     * Gets the functions of a particular static site build.
     * Description for Gets the functions of a particular static site build.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param prId The stage site identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteFunctionOverviewARMResource> listStaticSiteBuildFunctionsAsync(final String resourceGroupName, final String name, final String prId);

    /**
     * Gets the functions of a static site.
     * Description for Gets the functions of a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteFunctionOverviewARMResource> listStaticSiteFunctionsAsync(final String resourceGroupName, final String name);

    /**
     * Gets all static site custom domains for a particular static site.
     * Description for Gets all static site custom domains for a particular static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site resource to search in.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Observable<StaticSiteCustomDomainOverviewARMResource> listStaticSiteCustomDomainsAsync(final String resourceGroupName, final String name);

    /**
     * Deletes a custom domain.
     * Description for Deletes a custom domain.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable deleteStaticSiteCustomDomainAsync(String resourceGroupName, String name, String domainName);

    /**
     * Validates a particular custom domain can be added to a static site.
     * Description for Validates a particular custom domain can be added to a static site.
     *
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Name of the static site.
     * @param domainName The custom domain to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    Completable validateCustomDomainCanBeAddedToStaticSiteAsync(String resourceGroupName, String name, String domainName);

}
