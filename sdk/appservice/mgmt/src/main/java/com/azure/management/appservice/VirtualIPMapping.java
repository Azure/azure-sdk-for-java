// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.appservice;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The VirtualIPMapping model. */
@Fluent
public final class VirtualIPMapping {
    /*
     * Virtual IP address.
     */
    @JsonProperty(value = "virtualIP")
    private String virtualIP;

    /*
     * Internal HTTP port.
     */
    @JsonProperty(value = "internalHttpPort")
    private Integer internalHttpPort;

    /*
     * Internal HTTPS port.
     */
    @JsonProperty(value = "internalHttpsPort")
    private Integer internalHttpsPort;

    /*
     * Is virtual IP mapping in use.
     */
    @JsonProperty(value = "inUse")
    private Boolean inUse;

    /*
     * name of the service that virtual IP is assigned to
     */
    @JsonProperty(value = "serviceName")
    private String serviceName;

    /**
     * Get the virtualIP property: Virtual IP address.
     *
     * @return the virtualIP value.
     */
    public String virtualIP() {
        return this.virtualIP;
    }

    /**
     * Set the virtualIP property: Virtual IP address.
     *
     * @param virtualIP the virtualIP value to set.
     * @return the VirtualIPMapping object itself.
     */
    public VirtualIPMapping withVirtualIP(String virtualIP) {
        this.virtualIP = virtualIP;
        return this;
    }

    /**
     * Get the internalHttpPort property: Internal HTTP port.
     *
     * @return the internalHttpPort value.
     */
    public Integer internalHttpPort() {
        return this.internalHttpPort;
    }

    /**
     * Set the internalHttpPort property: Internal HTTP port.
     *
     * @param internalHttpPort the internalHttpPort value to set.
     * @return the VirtualIPMapping object itself.
     */
    public VirtualIPMapping withInternalHttpPort(Integer internalHttpPort) {
        this.internalHttpPort = internalHttpPort;
        return this;
    }

    /**
     * Get the internalHttpsPort property: Internal HTTPS port.
     *
     * @return the internalHttpsPort value.
     */
    public Integer internalHttpsPort() {
        return this.internalHttpsPort;
    }

    /**
     * Set the internalHttpsPort property: Internal HTTPS port.
     *
     * @param internalHttpsPort the internalHttpsPort value to set.
     * @return the VirtualIPMapping object itself.
     */
    public VirtualIPMapping withInternalHttpsPort(Integer internalHttpsPort) {
        this.internalHttpsPort = internalHttpsPort;
        return this;
    }

    /**
     * Get the inUse property: Is virtual IP mapping in use.
     *
     * @return the inUse value.
     */
    public Boolean inUse() {
        return this.inUse;
    }

    /**
     * Set the inUse property: Is virtual IP mapping in use.
     *
     * @param inUse the inUse value to set.
     * @return the VirtualIPMapping object itself.
     */
    public VirtualIPMapping withInUse(Boolean inUse) {
        this.inUse = inUse;
        return this;
    }

    /**
     * Get the serviceName property: name of the service that virtual IP is assigned to.
     *
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: name of the service that virtual IP is assigned to.
     *
     * @param serviceName the serviceName value to set.
     * @return the VirtualIPMapping object itself.
     */
    public VirtualIPMapping withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }
}
