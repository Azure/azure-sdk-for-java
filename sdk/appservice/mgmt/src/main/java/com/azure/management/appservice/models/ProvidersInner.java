// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.appservice.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.appservice.DefaultErrorResponseException;
import com.azure.management.appservice.Enum4;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Providers.
 */
public final class ProvidersInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ProvidersService service;

    /**
     * The service client containing this operation class.
     */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of ProvidersInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public ProvidersInner(WebSiteManagementClientImpl client) {
        this.service = RestProxy.create(ProvidersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * WebSiteManagementClientProviders to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementClientProviders")
    private interface ProvidersService {
        @Get("/providers/Microsoft.Web/availableStacks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ApplicationStackCollectionInner>> getAvailableStacks(@HostParam("$host") String host, @QueryParam("osTypeSelected") Enum4 osTypeSelected, @QueryParam("api-version") String apiVersion);

        @Get("/providers/Microsoft.Web/operations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CsmOperationCollectionInner>> listOperations(@HostParam("$host") String host, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ApplicationStackCollectionInner>> list(@HostParam("$host") String host, @QueryParam("osTypeSelected") Enum4 osTypeSelected, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ApplicationStackCollectionInner>> getAvailableStacksNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CsmOperationCollectionInner>> listOperationsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ApplicationStackCollectionInner>> getAvailableStacksOnPremNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @param osTypeSelected 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ApplicationStackResourceInner>> getAvailableStacksSinglePageAsync(Enum4 osTypeSelected) {
        return service.getAvailableStacks(this.client.getHost(), osTypeSelected, this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @param osTypeSelected 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ApplicationStackResourceInner> getAvailableStacksAsync(Enum4 osTypeSelected) {
        return new PagedFlux<>(
            () -> getAvailableStacksSinglePageAsync(osTypeSelected),
            nextLink -> getAvailableStacksNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ApplicationStackResourceInner> getAvailableStacksAsync() {
        final Enum4 osTypeSelected = null;
        return new PagedFlux<>(
            () -> getAvailableStacksSinglePageAsync(osTypeSelected),
            nextLink -> getAvailableStacksNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @param osTypeSelected 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationStackResourceInner> getAvailableStacks(Enum4 osTypeSelected) {
        return new PagedIterable<>(getAvailableStacksAsync(osTypeSelected));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationStackResourceInner> getAvailableStacks() {
        final Enum4 osTypeSelected = null;
        return new PagedIterable<>(getAvailableStacksAsync(osTypeSelected));
    }

    /**
     * Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CsmOperationDescriptionInner>> listOperationsSinglePageAsync() {
        return service.listOperations(this.client.getHost(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CsmOperationDescriptionInner> listOperationsAsync() {
        return new PagedFlux<>(
            () -> listOperationsSinglePageAsync(),
            nextLink -> listOperationsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets all available operations for the Microsoft.Web resource provider. Also exposes resource metric definitions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmOperationDescriptionInner> listOperations() {
        return new PagedIterable<>(listOperationsAsync());
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @param osTypeSelected 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ApplicationStackResourceInner>> listSinglePageAsync(Enum4 osTypeSelected) {
        return service.list(this.client.getHost(), osTypeSelected, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @param osTypeSelected 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ApplicationStackResourceInner> listAsync(Enum4 osTypeSelected) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(osTypeSelected),
            nextLink -> getAvailableStacksOnPremNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ApplicationStackResourceInner> listAsync() {
        final Enum4 osTypeSelected = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(osTypeSelected),
            nextLink -> getAvailableStacksOnPremNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @param osTypeSelected 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationStackResourceInner> list(Enum4 osTypeSelected) {
        return new PagedIterable<>(listAsync(osTypeSelected));
    }

    /**
     * Description for Get available application frameworks and their versions.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationStackResourceInner> list() {
        final Enum4 osTypeSelected = null;
        return new PagedIterable<>(listAsync(osTypeSelected));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ApplicationStackResourceInner>> getAvailableStacksNextSinglePageAsync(String nextLink) {
        return service.getAvailableStacksNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CsmOperationDescriptionInner>> listOperationsNextSinglePageAsync(String nextLink) {
        return service.listOperationsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ApplicationStackResourceInner>> getAvailableStacksOnPremNextSinglePageAsync(String nextLink) {
        return service.getAvailableStacksOnPremNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
