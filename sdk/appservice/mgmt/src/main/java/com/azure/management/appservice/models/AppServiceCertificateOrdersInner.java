// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.appservice.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.azure.management.resources.fluentcore.collection.InnerSupportsListing;
import com.azure.management.appservice.AppServiceCertificateOrderPatchResource;
import com.azure.management.appservice.AppServiceCertificatePatchResource;
import com.azure.management.appservice.DefaultErrorResponseException;
import com.azure.management.appservice.ReissueCertificateOrderRequest;
import com.azure.management.appservice.RenewCertificateOrderRequest;
import com.azure.management.appservice.SiteSealRequest;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * AppServiceCertificateOrders.
 */
public final class AppServiceCertificateOrdersInner implements InnerSupportsGet<AppServiceCertificateOrderInner>, InnerSupportsListing<AppServiceCertificateOrderInner>, InnerSupportsDelete<Void> {
    /**
     * The proxy service used to perform REST calls.
     */
    private AppServiceCertificateOrdersService service;

    /**
     * The service client containing this operation class.
     */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of AppServiceCertificateOrdersInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public AppServiceCertificateOrdersInner(WebSiteManagementClientImpl client) {
        this.service = RestProxy.create(AppServiceCertificateOrdersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * WebSiteManagementClientAppServiceCertificateOrders to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementClientAppServiceCertificateOrders")
    private interface AppServiceCertificateOrdersService {
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderCollectionInner>> list(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> validatePurchaseInformation(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificateOrderInner appServiceCertificateOrder, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderCollectionInner>> listByResourceGroup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderInner>> getByResourceGroup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificateOrderInner certificateDistinguishedName, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderInner>> update(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificateOrderPatchResource certificateDistinguishedName, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateCollectionInner>> listCertificates(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateResourceInner>> getCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificateResourceInner keyVaultCertificate, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateResourceInner>> updateCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificatePatchResource keyVaultCertificate, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> reissue(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") ReissueCertificateOrderRequest reissueCertificateOrderRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> renew(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RenewCertificateOrderRequest renewCertificateOrderRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resendEmail(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resendRequestEmails(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") NameIdentifierInner nameIdentifier, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSealInner>> retrieveSiteSeal(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSealRequest siteSealRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> verifyDomainOwnership(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<CertificateOrderActionInner>>> retrieveCertificateActions(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<CertificateEmailInner>>> retrieveCertificateEmailHistory(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderInner>> beginCreateOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificateOrderInner certificateDistinguishedName, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateResourceInner>> beginCreateOrUpdateCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("certificateOrderName") String certificateOrderName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AppServiceCertificateResourceInner keyVaultCertificate, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderCollectionInner>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateOrderCollectionInner>> listByResourceGroupNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AppServiceCertificateCollectionInner>> listCertificatesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Description for List all certificate orders in a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AppServiceCertificateOrderInner>> listSinglePageAsync() {
        return service.list(this.client.getHost(), this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List all certificate orders in a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AppServiceCertificateOrderInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List all certificate orders in a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AppServiceCertificateOrderInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Description for Validate information for a certificate order.
     * 
     * @param appServiceCertificateOrder SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> validatePurchaseInformationWithResponseAsync(AppServiceCertificateOrderInner appServiceCertificateOrder) {
        return service.validatePurchaseInformation(this.client.getHost(), this.client.getSubscriptionId(), appServiceCertificateOrder, this.client.getApiVersion());
    }

    /**
     * Description for Validate information for a certificate order.
     * 
     * @param appServiceCertificateOrder SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> validatePurchaseInformationAsync(AppServiceCertificateOrderInner appServiceCertificateOrder) {
        return validatePurchaseInformationWithResponseAsync(appServiceCertificateOrder)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Validate information for a certificate order.
     * 
     * @param appServiceCertificateOrder SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void validatePurchaseInformation(AppServiceCertificateOrderInner appServiceCertificateOrder) {
        validatePurchaseInformationAsync(appServiceCertificateOrder).block();
    }

    /**
     * Description for Get certificate orders in a resource group.
     * 
     * @param resourceGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AppServiceCertificateOrderInner>> listByResourceGroupSinglePageAsync(String resourceGroupName) {
        return service.listByResourceGroup(this.client.getHost(), resourceGroupName, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get certificate orders in a resource group.
     * 
     * @param resourceGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AppServiceCertificateOrderInner> listByResourceGroupAsync(String resourceGroupName) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get certificate orders in a resource group.
     * 
     * @param resourceGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AppServiceCertificateOrderInner> listByResourceGroup(String resourceGroupName) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName));
    }

    /**
     * Description for Get a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AppServiceCertificateOrderInner>> getByResourceGroupWithResponseAsync(String resourceGroupName, String certificateOrderName) {
        return service.getByResourceGroup(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateOrderInner> getByResourceGroupAsync(String resourceGroupName, String certificateOrderName) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, certificateOrderName)
            .flatMap((SimpleResponse<AppServiceCertificateOrderInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateOrderInner getByResourceGroup(String resourceGroupName, String certificateOrderName) {
        return getByResourceGroupAsync(resourceGroupName, certificateOrderName).block();
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return service.createOrUpdate(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), certificateDistinguishedName, this.client.getApiVersion());
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateOrderInner> createOrUpdateAsync(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderInner certificateDistinguishedName) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateWithResponseAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName);
        return client.<AppServiceCertificateOrderInner, AppServiceCertificateOrderInner>getLroResultAsync(response, client.getHttpPipeline(), AppServiceCertificateOrderInner.class, AppServiceCertificateOrderInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateOrderInner createOrUpdate(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return createOrUpdateAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName).block();
    }

    /**
     * Description for Delete an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String certificateOrderName) {
        return service.delete(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String certificateOrderName) {
        return deleteWithResponseAsync(resourceGroupName, certificateOrderName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String certificateOrderName) {
        deleteAsync(resourceGroupName, certificateOrderName).block();
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName ARM resource for a certificate order that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AppServiceCertificateOrderInner>> updateWithResponseAsync(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderPatchResource certificateDistinguishedName) {
        return service.update(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), certificateDistinguishedName, this.client.getApiVersion());
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName ARM resource for a certificate order that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateOrderInner> updateAsync(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderPatchResource certificateDistinguishedName) {
        return updateWithResponseAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName)
            .flatMap((SimpleResponse<AppServiceCertificateOrderInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName ARM resource for a certificate order that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateOrderInner update(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderPatchResource certificateDistinguishedName) {
        return updateAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName).block();
    }

    /**
     * Description for List all certificates associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AppServiceCertificateResourceInner>> listCertificatesSinglePageAsync(String resourceGroupName, String certificateOrderName) {
        return service.listCertificates(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List all certificates associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AppServiceCertificateResourceInner> listCertificatesAsync(String resourceGroupName, String certificateOrderName) {
        return new PagedFlux<>(
            () -> listCertificatesSinglePageAsync(resourceGroupName, certificateOrderName),
            nextLink -> listCertificatesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List all certificates associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AppServiceCertificateResourceInner> listCertificates(String resourceGroupName, String certificateOrderName) {
        return new PagedIterable<>(listCertificatesAsync(resourceGroupName, certificateOrderName));
    }

    /**
     * Description for Get the certificate associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AppServiceCertificateResourceInner>> getCertificateWithResponseAsync(String resourceGroupName, String certificateOrderName, String name) {
        return service.getCertificate(this.client.getHost(), resourceGroupName, certificateOrderName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the certificate associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateResourceInner> getCertificateAsync(String resourceGroupName, String certificateOrderName, String name) {
        return getCertificateWithResponseAsync(resourceGroupName, certificateOrderName, name)
            .flatMap((SimpleResponse<AppServiceCertificateResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the certificate associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateResourceInner getCertificate(String resourceGroupName, String certificateOrderName, String name) {
        return getCertificateAsync(resourceGroupName, certificateOrderName, name).block();
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateCertificateWithResponseAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateResourceInner keyVaultCertificate) {
        return service.createOrUpdateCertificate(this.client.getHost(), resourceGroupName, certificateOrderName, name, this.client.getSubscriptionId(), keyVaultCertificate, this.client.getApiVersion());
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateResourceInner> createOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateResourceInner keyVaultCertificate) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateCertificateWithResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate);
        return client.<AppServiceCertificateResourceInner, AppServiceCertificateResourceInner>getLroResultAsync(response, client.getHttpPipeline(), AppServiceCertificateResourceInner.class, AppServiceCertificateResourceInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateResourceInner createOrUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateResourceInner keyVaultCertificate) {
        return createOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).block();
    }

    /**
     * Description for Delete the certificate associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCertificateWithResponseAsync(String resourceGroupName, String certificateOrderName, String name) {
        return service.deleteCertificate(this.client.getHost(), resourceGroupName, certificateOrderName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete the certificate associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCertificateAsync(String resourceGroupName, String certificateOrderName, String name) {
        return deleteCertificateWithResponseAsync(resourceGroupName, certificateOrderName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete the certificate associated with a certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCertificate(String resourceGroupName, String certificateOrderName, String name) {
        deleteCertificateAsync(resourceGroupName, certificateOrderName, name).block();
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AppServiceCertificateResourceInner>> updateCertificateWithResponseAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificatePatchResource keyVaultCertificate) {
        return service.updateCertificate(this.client.getHost(), resourceGroupName, certificateOrderName, name, this.client.getSubscriptionId(), keyVaultCertificate, this.client.getApiVersion());
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateResourceInner> updateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificatePatchResource keyVaultCertificate) {
        return updateCertificateWithResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate)
            .flatMap((SimpleResponse<AppServiceCertificateResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateResourceInner updateCertificate(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificatePatchResource keyVaultCertificate) {
        return updateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).block();
    }

    /**
     * Description for Reissue an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param reissueCertificateOrderRequest Class representing certificate reissue request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> reissueWithResponseAsync(String resourceGroupName, String certificateOrderName, ReissueCertificateOrderRequest reissueCertificateOrderRequest) {
        return service.reissue(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), reissueCertificateOrderRequest, this.client.getApiVersion());
    }

    /**
     * Description for Reissue an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param reissueCertificateOrderRequest Class representing certificate reissue request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> reissueAsync(String resourceGroupName, String certificateOrderName, ReissueCertificateOrderRequest reissueCertificateOrderRequest) {
        return reissueWithResponseAsync(resourceGroupName, certificateOrderName, reissueCertificateOrderRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Reissue an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param reissueCertificateOrderRequest Class representing certificate reissue request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void reissue(String resourceGroupName, String certificateOrderName, ReissueCertificateOrderRequest reissueCertificateOrderRequest) {
        reissueAsync(resourceGroupName, certificateOrderName, reissueCertificateOrderRequest).block();
    }

    /**
     * Description for Renew an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param renewCertificateOrderRequest Class representing certificate renew request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> renewWithResponseAsync(String resourceGroupName, String certificateOrderName, RenewCertificateOrderRequest renewCertificateOrderRequest) {
        return service.renew(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), renewCertificateOrderRequest, this.client.getApiVersion());
    }

    /**
     * Description for Renew an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param renewCertificateOrderRequest Class representing certificate renew request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> renewAsync(String resourceGroupName, String certificateOrderName, RenewCertificateOrderRequest renewCertificateOrderRequest) {
        return renewWithResponseAsync(resourceGroupName, certificateOrderName, renewCertificateOrderRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Renew an existing certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param renewCertificateOrderRequest Class representing certificate renew request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void renew(String resourceGroupName, String certificateOrderName, RenewCertificateOrderRequest renewCertificateOrderRequest) {
        renewAsync(resourceGroupName, certificateOrderName, renewCertificateOrderRequest).block();
    }

    /**
     * Description for Resend certificate email.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resendEmailWithResponseAsync(String resourceGroupName, String certificateOrderName) {
        return service.resendEmail(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Resend certificate email.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resendEmailAsync(String resourceGroupName, String certificateOrderName) {
        return resendEmailWithResponseAsync(resourceGroupName, certificateOrderName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Resend certificate email.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resendEmail(String resourceGroupName, String certificateOrderName) {
        resendEmailAsync(resourceGroupName, certificateOrderName).block();
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name Name of the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resendRequestEmailsWithResponseAsync(String resourceGroupName, String certificateOrderName, String name) {
        NameIdentifierInner nameIdentifier = new NameIdentifierInner();
        nameIdentifier.withName(name);
        return service.resendRequestEmails(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), nameIdentifier, this.client.getApiVersion());
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name Name of the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resendRequestEmailsAsync(String resourceGroupName, String certificateOrderName, String name) {
        return resendRequestEmailsWithResponseAsync(resourceGroupName, certificateOrderName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name Name of the object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resendRequestEmails(String resourceGroupName, String certificateOrderName, String name) {
        resendRequestEmailsAsync(resourceGroupName, certificateOrderName, name).block();
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param siteSealRequest Site seal request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSealInner>> retrieveSiteSealWithResponseAsync(String resourceGroupName, String certificateOrderName, SiteSealRequest siteSealRequest) {
        return service.retrieveSiteSeal(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), siteSealRequest, this.client.getApiVersion());
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param siteSealRequest Site seal request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSealInner> retrieveSiteSealAsync(String resourceGroupName, String certificateOrderName, SiteSealRequest siteSealRequest) {
        return retrieveSiteSealWithResponseAsync(resourceGroupName, certificateOrderName, siteSealRequest)
            .flatMap((SimpleResponse<SiteSealInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param siteSealRequest Site seal request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSealInner retrieveSiteSeal(String resourceGroupName, String certificateOrderName, SiteSealRequest siteSealRequest) {
        return retrieveSiteSealAsync(resourceGroupName, certificateOrderName, siteSealRequest).block();
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> verifyDomainOwnershipWithResponseAsync(String resourceGroupName, String certificateOrderName) {
        return service.verifyDomainOwnership(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> verifyDomainOwnershipAsync(String resourceGroupName, String certificateOrderName) {
        return verifyDomainOwnershipWithResponseAsync(resourceGroupName, certificateOrderName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Verify domain ownership for this certificate order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void verifyDomainOwnership(String resourceGroupName, String certificateOrderName) {
        verifyDomainOwnershipAsync(resourceGroupName, certificateOrderName).block();
    }

    /**
     * Description for Retrieve the list of certificate actions.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<CertificateOrderActionInner>>> retrieveCertificateActionsWithResponseAsync(String resourceGroupName, String name) {
        return service.retrieveCertificateActions(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Retrieve the list of certificate actions.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CertificateOrderActionInner>> retrieveCertificateActionsAsync(String resourceGroupName, String name) {
        return retrieveCertificateActionsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<List<CertificateOrderActionInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Retrieve the list of certificate actions.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CertificateOrderActionInner> retrieveCertificateActions(String resourceGroupName, String name) {
        return retrieveCertificateActionsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Retrieve email history.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<CertificateEmailInner>>> retrieveCertificateEmailHistoryWithResponseAsync(String resourceGroupName, String name) {
        return service.retrieveCertificateEmailHistory(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Retrieve email history.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CertificateEmailInner>> retrieveCertificateEmailHistoryAsync(String resourceGroupName, String name) {
        return retrieveCertificateEmailHistoryWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<List<CertificateEmailInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Retrieve email history.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CertificateEmailInner> retrieveCertificateEmailHistory(String resourceGroupName, String name) {
        return retrieveCertificateEmailHistoryAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AppServiceCertificateOrderInner>> beginCreateOrUpdateWithResponseAsync(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return service.beginCreateOrUpdate(this.client.getHost(), resourceGroupName, certificateOrderName, this.client.getSubscriptionId(), certificateDistinguishedName, this.client.getApiVersion());
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateOrderInner> beginCreateOrUpdateAsync(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return beginCreateOrUpdateWithResponseAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName)
            .flatMap((SimpleResponse<AppServiceCertificateOrderInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Create or update a certificate purchase order.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param certificateDistinguishedName SSL certificate purchase order.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateOrderInner beginCreateOrUpdate(String resourceGroupName, String certificateOrderName, AppServiceCertificateOrderInner certificateDistinguishedName) {
        return beginCreateOrUpdateAsync(resourceGroupName, certificateOrderName, certificateDistinguishedName).block();
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AppServiceCertificateResourceInner>> beginCreateOrUpdateCertificateWithResponseAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateResourceInner keyVaultCertificate) {
        return service.beginCreateOrUpdateCertificate(this.client.getHost(), resourceGroupName, certificateOrderName, name, this.client.getSubscriptionId(), keyVaultCertificate, this.client.getApiVersion());
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AppServiceCertificateResourceInner> beginCreateOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateResourceInner keyVaultCertificate) {
        return beginCreateOrUpdateCertificateWithResponseAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate)
            .flatMap((SimpleResponse<AppServiceCertificateResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates or updates a certificate and associates with key vault secret.
     * 
     * @param resourceGroupName 
     * @param certificateOrderName 
     * @param name 
     * @param keyVaultCertificate Key Vault container ARM resource for a certificate that is purchased through Azure.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AppServiceCertificateResourceInner beginCreateOrUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, AppServiceCertificateResourceInner keyVaultCertificate) {
        return beginCreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AppServiceCertificateOrderInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AppServiceCertificateOrderInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        return service.listByResourceGroupNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AppServiceCertificateResourceInner>> listCertificatesNextSinglePageAsync(String nextLink) {
        return service.listCertificatesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
