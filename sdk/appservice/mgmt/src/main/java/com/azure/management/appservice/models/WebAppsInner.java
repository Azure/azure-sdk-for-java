// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.appservice.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.management.CloudException;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.azure.management.resources.fluentcore.collection.InnerSupportsListing;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;
import com.azure.management.appservice.CsmPublishingProfileOptions;
import com.azure.management.appservice.CsmSlotEntity;
import com.azure.management.appservice.DefaultErrorResponseException;
import com.azure.management.appservice.DeletedAppRestoreRequest;
import com.azure.management.appservice.MigrateMySqlRequest;
import com.azure.management.appservice.MSDeploy;
import com.azure.management.appservice.PremierAddOnPatchResource;
import com.azure.management.appservice.SnapshotRestoreRequest;
import com.azure.management.appservice.StorageMigrationOptions;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.Collections;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * WebApps.
 */
public final class WebAppsInner implements InnerSupportsGet<SiteInner>, InnerSupportsListing<SiteInner>, InnerSupportsDelete<Void> {
    /**
     * The proxy service used to perform REST calls.
     */
    private WebAppsService service;

    /**
     * The service client containing this operation class.
     */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of WebAppsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public WebAppsInner(WebSiteManagementClientImpl client) {
        this.service = RestProxy.create(WebAppsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * WebSiteManagementClientWebApps to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementClientWebApps")
    private interface WebAppsService {
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppCollectionInner>> list(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppCollectionInner>> listByResourceGroup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("includeSlots") Boolean includeSlots, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteInner>> getByResourceGroup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteInner siteEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("deleteMetrics") Boolean deleteMetrics, @QueryParam("deleteEmptyServerFarm") Boolean deleteEmptyServerFarm, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteInner>> update(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SitePatchResourceInner siteEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CustomHostnameAnalysisResultInner>> analyzeCustomHostname(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> applySlotConfigToProduction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemInner>> backup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") BackupRequestInner request, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listBackups(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemInner>> getBackupStatus(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteBackup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemInner>> listBackupStatusSecrets(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") BackupRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restore(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceCollectionInner>> listConfigurations(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> updateApplicationSettings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") StringDictionaryInner appSettings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> listApplicationSettings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteAuthSettingsInner>> updateAuthSettings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteAuthSettingsInner siteAuthSettings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteAuthSettingsInner>> getAuthSettings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> updateAzureStorageAccounts(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AzureStoragePropertyDictionaryResourceInner azureStorageAccounts, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/azurestorageaccounts/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> listAzureStorageAccounts(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupRequestInner>> updateBackupConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") BackupRequestInner request, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteBackupConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupRequestInner>> getBackupConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<KeyVaultReferenceCollectionInner>> getAppSettingsKeyVaultReferences(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/configreferences/appsettings/{appSettingKey}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<KeyVaultReferenceResourceInner>> getAppSettingKeyVaultReference(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("appSettingKey") String appSettingKey, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ConnectionStringDictionaryInner>> updateConnectionStrings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") ConnectionStringDictionaryInner connectionStrings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ConnectionStringDictionaryInner>> listConnectionStrings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteLogsConfigInner>> getDiagnosticLogsConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteLogsConfigInner>> updateDiagnosticLogsConfig(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteLogsConfigInner siteLogsConfig, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> updateMetadata(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") StringDictionaryInner metadata, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> listMetadata(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> listPublishingCredentials(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PushSettingsInner>> updateSitePushSettings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PushSettingsInner pushSettings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PushSettingsInner>> listSitePushSettings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SlotConfigNamesResourceInner>> listSlotConfigurationNames(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SlotConfigNamesResourceInner>> updateSlotConfigurationNames(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SlotConfigNamesResourceInner slotConfigNames, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> getConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> createOrUpdateConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteConfigResourceInner siteConfig, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> updateConfiguration(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteConfigResourceInner siteConfig, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigurationSnapshotInfoCollectionInner>> listConfigurationSnapshotInfo(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationSnapshot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("snapshotId") String snapshotId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web/snapshots/{snapshotId}/recover")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> recoverSiteConfigurationSnapshot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("snapshotId") String snapshotId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<StreamResponse> getWebSiteContainerLogs(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/containerlogs/zip/download")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<StreamResponse> getContainerLogsZip(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ContinuousWebJobCollectionInner>> listContinuousWebJobs(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ContinuousWebJobInner>> getContinuousWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteContinuousWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/start")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> startContinuousWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/continuouswebjobs/{webJobName}/stop")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopContinuousWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentCollectionInner>> listDeployments(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentInner>> getDeployment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentInner>> createDeployment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DeploymentInner deployment, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteDeployment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}/log")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentInner>> listDeploymentLog(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/discoverbackup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RestoreRequestInner>> discoverBackup(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierCollectionInner>> listDomainOwnershipIdentifiers(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierInner>> getDomainOwnershipIdentifier(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierInner>> createOrUpdateDomainOwnershipIdentifier(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") IdentifierInner domainOwnershipIdentifier, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteDomainOwnershipIdentifier(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierInner>> updateDomainOwnershipIdentifier(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") IdentifierInner domainOwnershipIdentifier, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> getMSDeployStatus(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createMSDeployOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy/log")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployLogInner>> getMSDeployLog(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeCollectionInner>> listFunctions(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/admin/token")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<String>> getFunctionsAdminToken(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeInner>> getFunction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createFunction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") FunctionEnvelopeInner functionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteFunction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<KeyInfoInner>> createOrUpdateFunctionSecret(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("keyName") String keyName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") KeyInfoInner key, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/keys/{keyName}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteFunctionSecret(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("keyName") String keyName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listkeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> listFunctionKeys(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}/listsecrets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionSecretsInner>> listFunctionSecrets(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listkeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostKeysInner>> listHostKeys(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/listsyncstatus")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> listSyncStatus(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/sync")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> syncFunctions(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<KeyInfoInner>> createOrUpdateHostSecret(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("keyType") String keyType, @PathParam("keyName") String keyName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") KeyInfoInner key, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/host/default/{keyType}/{keyName}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteHostSecret(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("keyType") String keyType, @PathParam("keyName") String keyName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingCollectionInner>> listHostNameBindings(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingInner>> getHostNameBinding(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingInner>> createOrUpdateHostNameBinding(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") HostNameBindingInner hostNameBinding, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteHostNameBinding(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> getHybridConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> createOrUpdateHybridConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") HybridConnectionInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteHybridConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> updateHybridConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") HybridConnectionInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> listHybridConnections(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> listRelayServiceConnections(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> getRelayServiceConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> createOrUpdateRelayServiceConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteRelayServiceConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> updateRelayServiceConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppInstanceCollectionInner>> listInstanceIdentifiers(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebSiteInstanceStatusInner>> getInstanceInfo(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> getInstanceMsDeployStatus(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createInstanceMSDeployOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy/log")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployLogInner>> getInstanceMSDeployLog(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listInstanceProcesses(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoInner>> getInstanceProcess(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteInstanceProcess(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/dump")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> getInstanceProcessDump(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listInstanceProcessModules(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoInner>> getInstanceProcessModule(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("baseAddress") String baseAddress, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/processes/{processId}/threads")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listInstanceProcessThreads(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteCloneabilityInner>> isCloneable(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listbackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listSiteBackups(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/listsyncfunctiontriggerstatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionSecretsInner>> listSyncFunctionTriggers(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> migrateStorage(@HostParam("$host") String host, @QueryParam("subscriptionName") String subscriptionName, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") StorageMigrationOptions migrationOptions, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> migrateMySql(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MigrateMySqlRequest migrationRequestEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MigrateMySqlStatusInner>> getMigrateMySqlStatus(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SwiftVirtualNetworkInner>> getSwiftVirtualNetworkConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SwiftVirtualNetworkInner>> createOrUpdateSwiftVirtualNetworkConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SwiftVirtualNetworkInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSwiftVirtualNetwork(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkConfig/virtualNetwork")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SwiftVirtualNetworkInner>> updateSwiftVirtualNetworkConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SwiftVirtualNetworkInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<NetworkFeaturesInner>> listNetworkFeatures(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("view") String view, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/operationresults/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<String>> startWebSiteNetworkTrace(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> startWebSiteNetworkTraceOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopWebSiteNetworkTrace(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraces(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/current/operationresults/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationV2(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTraces/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesV2(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> generateNewSitePublishingPassword(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PerfMonCounterCollectionInner>> listPerfMonCounters(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SitePhpErrorLogFlagInner>> getSitePhpErrorLogFlag(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> listPremierAddOns(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> getPremierAddOn(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> addPremierAddOn(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PremierAddOnInner premierAddOn, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deletePremierAddOn(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> updatePremierAddOn(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PremierAddOnPatchResource premierAddOn, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PrivateAccessInner>> getPrivateAccess(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/privateAccess/virtualNetworks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PrivateAccessInner>> putPrivateAccessVnet(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PrivateAccessInner access, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listProcesses(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoInner>> getProcess(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteProcess(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/dump")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> getProcessDump(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listProcessModules(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/modules/{baseAddress}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoInner>> getProcessModule(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("baseAddress") String baseAddress, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/processes/{processId}/threads")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listProcessThreads(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateCollectionInner>> listPublicCertificates(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateInner>> getPublicCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("publicCertificateName") String publicCertificateName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateInner>> createOrUpdatePublicCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("publicCertificateName") String publicCertificateName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PublicCertificateInner publicCertificate, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deletePublicCertificate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("publicCertificateName") String publicCertificateName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<StreamResponse> listPublishingProfileXmlWithSecrets(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmPublishingProfileOptions publishingProfileOptions, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resetProductionSlotConfig(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> restart(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("softRestart") Boolean softRestart, @QueryParam("synchronous") Boolean synchronous, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromBackupBlob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromDeletedApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DeletedAppRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreSnapshot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SnapshotRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoCollectionInner>> listSiteExtensions(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoInner>> getSiteExtension(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({200, 201, 429})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> installSiteExtension(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSiteExtension(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> copyProductionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmCopySlotEntityInner copySlotEntity, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppCollectionInner>> listSlots(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteInner>> getSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteInner siteEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}")
        @ExpectedResponses({200, 204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @QueryParam("deleteMetrics") Boolean deleteMetrics, @QueryParam("deleteEmptyServerFarm") Boolean deleteEmptyServerFarm, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteInner>> updateSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SitePatchResourceInner siteEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CustomHostnameAnalysisResultInner>> analyzeCustomHostnameSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @QueryParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> applySlotConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemInner>> backupSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") BackupRequestInner request, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listBackupsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemInner>> getBackupStatusSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteBackupSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemInner>> listBackupStatusSecretsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") BackupRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceCollectionInner>> listConfigurationsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> updateApplicationSettingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") StringDictionaryInner appSettings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> listApplicationSettingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteAuthSettingsInner>> updateAuthSettingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteAuthSettingsInner siteAuthSettings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteAuthSettingsInner>> getAuthSettingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> updateAzureStorageAccountsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") AzureStoragePropertyDictionaryResourceInner azureStorageAccounts, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/azurestorageaccounts/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> listAzureStorageAccountsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupRequestInner>> updateBackupConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") BackupRequestInner request, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteBackupConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupRequestInner>> getBackupConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ConnectionStringDictionaryInner>> updateConnectionStringsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") ConnectionStringDictionaryInner connectionStrings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ConnectionStringDictionaryInner>> listConnectionStringsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteLogsConfigInner>> getDiagnosticLogsConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteLogsConfigInner>> updateDiagnosticLogsConfigSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteLogsConfigInner siteLogsConfig, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> updateMetadataSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") StringDictionaryInner metadata, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> listMetadataSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> listPublishingCredentialsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PushSettingsInner>> updateSitePushSettingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PushSettingsInner pushSettings, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PushSettingsInner>> listSitePushSettingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> createOrUpdateConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteConfigResourceInner siteConfig, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> updateConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteConfigResourceInner siteConfig, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigurationSnapshotInfoCollectionInner>> listConfigurationSnapshotInfoSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationSnapshotSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("snapshotId") String snapshotId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web/snapshots/{snapshotId}/recover")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> recoverSiteConfigurationSnapshotSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("snapshotId") String snapshotId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<StreamResponse> getWebSiteContainerLogsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/containerlogs/zip/download")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<StreamResponse> getContainerLogsZipSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ContinuousWebJobCollectionInner>> listContinuousWebJobsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ContinuousWebJobInner>> getContinuousWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteContinuousWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/start")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> startContinuousWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/continuouswebjobs/{webJobName}/stop")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopContinuousWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentCollectionInner>> listDeploymentsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentInner>> getDeploymentSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentInner>> createDeploymentSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DeploymentInner deployment, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteDeploymentSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}/log")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentInner>> listDeploymentLogSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("id") String id, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/discoverbackup")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RestoreRequestInner>> discoverBackupSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierCollectionInner>> listDomainOwnershipIdentifiersSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierInner>> getDomainOwnershipIdentifierSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierInner>> createOrUpdateDomainOwnershipIdentifierSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") IdentifierInner domainOwnershipIdentifier, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteDomainOwnershipIdentifierSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierInner>> updateDomainOwnershipIdentifierSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("domainOwnershipIdentifierName") String domainOwnershipIdentifierName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") IdentifierInner domainOwnershipIdentifier, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> getMSDeployStatusSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createMSDeployOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy/log")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployLogInner>> getMSDeployLogSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeCollectionInner>> listInstanceFunctionsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/admin/token")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<String>> getFunctionsAdminTokenSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeInner>> getInstanceFunctionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createInstanceFunctionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") FunctionEnvelopeInner functionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteInstanceFunctionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<KeyInfoInner>> createOrUpdateFunctionSecretSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("keyName") String keyName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") KeyInfoInner key, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/keys/{keyName}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteFunctionSecretSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("keyName") String keyName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listkeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StringDictionaryInner>> listFunctionKeysSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}/listsecrets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionSecretsInner>> listFunctionSecretsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listkeys")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostKeysInner>> listHostKeysSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/listsyncstatus")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> listSyncStatusSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/sync")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> syncFunctionsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<KeyInfoInner>> createOrUpdateHostSecretSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("keyType") String keyType, @PathParam("keyName") String keyName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") KeyInfoInner key, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/host/default/{keyType}/{keyName}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteHostSecretSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("keyType") String keyType, @PathParam("keyName") String keyName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingCollectionInner>> listHostNameBindingsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingInner>> getHostNameBindingSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingInner>> createOrUpdateHostNameBindingSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("hostName") String hostName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") HostNameBindingInner hostNameBinding, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteHostNameBindingSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("hostName") String hostName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> getHybridConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> createOrUpdateHybridConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") HybridConnectionInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteHybridConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> updateHybridConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("namespaceName") String namespaceName, @PathParam("relayName") String relayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") HybridConnectionInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HybridConnectionInner>> listHybridConnectionsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> listRelayServiceConnectionsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> getRelayServiceConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> createOrUpdateRelayServiceConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteRelayServiceConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RelayServiceConnectionEntityInner>> updateRelayServiceConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("entityName") String entityName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RelayServiceConnectionEntityInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppInstanceCollectionInner>> listInstanceIdentifiersSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebSiteInstanceStatusInner>> getInstanceInfoSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> getInstanceMsDeployStatusSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createInstanceMSDeployOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy/log")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployLogInner>> getInstanceMSDeployLogSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listInstanceProcessesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoInner>> getInstanceProcessSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteInstanceProcessSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/dump")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> getInstanceProcessDumpSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listInstanceProcessModulesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/modules/{baseAddress}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoInner>> getInstanceProcessModuleSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("baseAddress") String baseAddress, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/processes/{processId}/threads")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listInstanceProcessThreadsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteCloneabilityInner>> isCloneableSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listbackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listSiteBackupsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/listsyncfunctiontriggerstatus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionSecretsInner>> listSyncFunctionTriggersSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MigrateMySqlStatusInner>> getMigrateMySqlStatusSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SwiftVirtualNetworkInner>> getSwiftVirtualNetworkConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SwiftVirtualNetworkInner>> createOrUpdateSwiftVirtualNetworkConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SwiftVirtualNetworkInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSwiftVirtualNetworkSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkConfig/virtualNetwork")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SwiftVirtualNetworkInner>> updateSwiftVirtualNetworkConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SwiftVirtualNetworkInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<NetworkFeaturesInner>> listNetworkFeaturesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("view") String view, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/operationresults/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<String>> startWebSiteNetworkTraceSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @PathParam("slot") String slot, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> startWebSiteNetworkTraceOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @PathParam("slot") String slot, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopWebSiteNetworkTraceSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/current/operationresults/{operationId}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationSlotV2(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTraces/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesSlotV2(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("operationId") String operationId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> generateNewSitePublishingPasswordSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PerfMonCounterCollectionInner>> listPerfMonCountersSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SitePhpErrorLogFlagInner>> getSitePhpErrorLogFlagSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> listPremierAddOnsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> getPremierAddOnSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> addPremierAddOnSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PremierAddOnInner premierAddOn, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deletePremierAddOnSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PremierAddOnInner>> updatePremierAddOnSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("premierAddOnName") String premierAddOnName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PremierAddOnPatchResource premierAddOn, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PrivateAccessInner>> getPrivateAccessSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/privateAccess/virtualNetworks")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PrivateAccessInner>> putPrivateAccessVnetSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PrivateAccessInner access, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listProcessesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoInner>> getProcessSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteProcessSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/dump")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> getProcessDumpSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listProcessModulesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/modules/{baseAddress}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoInner>> getProcessModuleSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("baseAddress") String baseAddress, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/processes/{processId}/threads")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listProcessThreadsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("processId") String processId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateCollectionInner>> listPublicCertificatesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateInner>> getPublicCertificateSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("publicCertificateName") String publicCertificateName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateInner>> createOrUpdatePublicCertificateSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("publicCertificateName") String publicCertificateName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") PublicCertificateInner publicCertificate, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deletePublicCertificateSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("publicCertificateName") String publicCertificateName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<StreamResponse> listPublishingProfileXmlWithSecretsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmPublishingProfileOptions publishingProfileOptions, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resetSlotConfigurationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> restartSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @QueryParam("softRestart") Boolean softRestart, @QueryParam("synchronous") Boolean synchronous, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromBackupBlobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromDeletedAppSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DeletedAppRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> restoreSnapshotSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SnapshotRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoCollectionInner>> listSiteExtensionsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoInner>> getSiteExtensionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({200, 201, 429})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> installSiteExtensionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSiteExtensionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> copySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmCopySlotEntityInner copySlotEntity, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SlotDifferenceCollectionInner>> listSlotDifferencesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> swapSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshotsdr")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsFromDRSecondarySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSourceControlInner>> getSourceControlSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateSourceControlSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSourceControlInner siteSourceControl, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 202, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSourceControlSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSourceControlInner>> updateSourceControlSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSourceControlInner siteSourceControl, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> startSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> startNetworkTraceSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @PathParam("slot") String slot, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stopNetworkTrace")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopNetworkTraceSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> syncRepositorySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> syncFunctionTriggersSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredWebJobCollectionInner>> listTriggeredWebJobsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredWebJobInner>> getTriggeredWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteTriggeredWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredJobHistoryCollectionInner>> listTriggeredWebJobHistorySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/history/{id}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredJobHistoryInner>> getTriggeredWebJobHistorySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("id") String id, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/triggeredwebjobs/{webJobName}/run")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> runTriggeredWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CsmUsageQuotaCollectionInner>> listUsagesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<VnetInfoInner>>> listVnetConnectionsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetInfoInner>> getVnetConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetInfoInner>> createOrUpdateVnetConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetInfoInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteVnetConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetInfoInner>> updateVnetConnectionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetInfoInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetGatewayInner>> getVnetConnectionGatewaySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("gatewayName") String gatewayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetGatewayInner>> createOrUpdateVnetConnectionGatewaySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("gatewayName") String gatewayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetGatewayInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetGatewayInner>> updateVnetConnectionGatewaySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("gatewayName") String gatewayName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetGatewayInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebJobCollectionInner>> listWebJobsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/webjobs/{webJobName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebJobInner>> getWebJobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SlotDifferenceCollectionInner>> listSlotDifferencesFromProduction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> swapSlotWithProduction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshots(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshotsdr")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsFromDRSecondary(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSourceControlInner>> getSourceControl(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateSourceControl(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSourceControlInner siteSourceControl, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web")
        @ExpectedResponses({200, 202, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteSourceControl(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSourceControlInner>> updateSourceControl(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSourceControlInner siteSourceControl, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> start(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<Flux<ByteBuffer>>> startNetworkTrace(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stop(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stopNetworkTrace")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> stopNetworkTrace(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> syncRepository(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> syncFunctionTriggers(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredWebJobCollectionInner>> listTriggeredWebJobs(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredWebJobInner>> getTriggeredWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteTriggeredWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredJobHistoryCollectionInner>> listTriggeredWebJobHistory(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/history/{id}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredJobHistoryInner>> getTriggeredWebJobHistory(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("id") String id, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/triggeredwebjobs/{webJobName}/run")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> runTriggeredWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CsmUsageQuotaCollectionInner>> listUsages(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<VnetInfoInner>>> listVnetConnections(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetInfoInner>> getVnetConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetInfoInner>> createOrUpdateVnetConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetInfoInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> deleteVnetConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetInfoInner>> updateVnetConnection(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetInfoInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetGatewayInner>> getVnetConnectionGateway(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("gatewayName") String gatewayName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetGatewayInner>> createOrUpdateVnetConnectionGateway(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("gatewayName") String gatewayName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetGatewayInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<VnetGatewayInner>> updateVnetConnectionGateway(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("vnetName") String vnetName, @PathParam("gatewayName") String gatewayName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") VnetGatewayInner connectionEnvelope, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebJobCollectionInner>> listWebJobs(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/webjobs/{webJobName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebJobInner>> getWebJob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("webJobName") String webJobName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteInner>> beginCreateOrUpdate(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteInner siteEnvelope, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestore(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<UserInner>> beginListPublishingCredentials(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> beginCreateMSDeployOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/functions/{functionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeInner>> beginCreateFunction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") FunctionEnvelopeInner functionEnvelope, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> beginCreateInstanceMSDeployOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<StorageMigrationResponseInner>> beginMigrateStorage(@HostParam("$host") String host, @QueryParam("subscriptionName") String subscriptionName, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") StorageMigrationOptions migrationOptions, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<OperationInner>> beginMigrateMySql(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MigrateMySqlRequest migrationRequestEnvelope, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/startOperation")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartWebSiteNetworkTraceOperation(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromBackupBlob")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreFromBackupBlob(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreFromDeletedApp")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreFromDeletedApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DeletedAppRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restoreSnapshot")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreSnapshot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SnapshotRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({200, 201, 429})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoInner>> beginInstallSiteExtension(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotcopy")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginCopyProductionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmCopySlotEntityInner copySlotEntity, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteInner>> beginCreateOrUpdateSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteInner siteEnvelope, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("backupId") String backupId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<UserInner>> beginListPublishingCredentialsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> beginCreateMSDeployOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/functions/{functionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeInner>> beginCreateInstanceFunctionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("functionName") String functionName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") FunctionEnvelopeInner functionEnvelope, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/extensions/MSDeploy")
        @ExpectedResponses({201, 409})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<MSDeployStatusInner>> beginCreateInstanceMSDeployOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("instanceId") String instanceId, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") MSDeploy mSDeploy, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/startOperation")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartWebSiteNetworkTraceOperationSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @PathParam("slot") String slot, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromBackupBlob")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreFromBackupBlobSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") RestoreRequestInner request, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreFromDeletedApp")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreFromDeletedAppSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") DeletedAppRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restoreSnapshot")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginRestoreSnapshotSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SnapshotRestoreRequest restoreRequest, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/siteextensions/{siteExtensionId}")
        @ExpectedResponses({200, 201, 429})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoInner>> beginInstallSiteExtensionSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("siteExtensionId") String siteExtensionId, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotcopy")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginCopySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmCopySlotEntityInner copySlotEntity, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginSwapSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSourceControlInner>> beginCreateOrUpdateSourceControlSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSourceControlInner siteSourceControl, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/startNetworkTrace")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartNetworkTraceSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @PathParam("slot") String slot, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> beginSwapSlotWithProduction(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") CsmSlotEntity slotSwapEntity, @QueryParam("api-version") String apiVersion);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web")
        @ExpectedResponses({200, 201, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteSourceControlInner>> beginCreateOrUpdateSourceControl(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json") SiteSourceControlInner siteSourceControl, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/startNetworkTrace")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartNetworkTrace(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @QueryParam("durationInSeconds") Integer durationInSeconds, @QueryParam("maxFrameLength") Integer maxFrameLength, @QueryParam("sasUrl") String sasUrl, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppCollectionInner>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppCollectionInner>> listByResourceGroupNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listBackupsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceCollectionInner>> listConfigurationsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigurationSnapshotInfoCollectionInner>> listConfigurationSnapshotInfoNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ContinuousWebJobCollectionInner>> listContinuousWebJobsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentCollectionInner>> listDeploymentsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierCollectionInner>> listDomainOwnershipIdentifiersNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeCollectionInner>> listFunctionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingCollectionInner>> listHostNameBindingsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppInstanceCollectionInner>> listInstanceIdentifiersNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listInstanceProcessesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listInstanceProcessModulesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listInstanceProcessThreadsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listSiteBackupsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PerfMonCounterCollectionInner>> listPerfMonCountersNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listProcessesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listProcessModulesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listProcessThreadsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateCollectionInner>> listPublicCertificatesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoCollectionInner>> listSiteExtensionsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppCollectionInner>> listSlotsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listBackupsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigResourceCollectionInner>> listConfigurationsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteConfigurationSnapshotInfoCollectionInner>> listConfigurationSnapshotInfoSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ContinuousWebJobCollectionInner>> listContinuousWebJobsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DeploymentCollectionInner>> listDeploymentsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<IdentifierCollectionInner>> listDomainOwnershipIdentifiersSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<FunctionEnvelopeCollectionInner>> listInstanceFunctionsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<HostNameBindingCollectionInner>> listHostNameBindingsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebAppInstanceCollectionInner>> listInstanceIdentifiersSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listInstanceProcessesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listInstanceProcessModulesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listInstanceProcessThreadsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<BackupItemCollectionInner>> listSiteBackupsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PerfMonCounterCollectionInner>> listPerfMonCountersSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessInfoCollectionInner>> listProcessesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessModuleInfoCollectionInner>> listProcessModulesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<ProcessThreadInfoCollectionInner>> listProcessThreadsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<PublicCertificateCollectionInner>> listPublicCertificatesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SiteExtensionInfoCollectionInner>> listSiteExtensionsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SlotDifferenceCollectionInner>> listSlotDifferencesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsFromDRSecondarySlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredWebJobCollectionInner>> listTriggeredWebJobsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredJobHistoryCollectionInner>> listTriggeredWebJobHistorySlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CsmUsageQuotaCollectionInner>> listUsagesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebJobCollectionInner>> listWebJobsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SlotDifferenceCollectionInner>> listSlotDifferencesFromProductionNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<SnapshotCollectionInner>> listSnapshotsFromDRSecondaryNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredWebJobCollectionInner>> listTriggeredWebJobsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<TriggeredJobHistoryCollectionInner>> listTriggeredWebJobHistoryNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<CsmUsageQuotaCollectionInner>> listUsagesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<WebJobCollectionInner>> listWebJobsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Description for Get all apps for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInner>> listSinglePageAsync() {
        return service.list(this.client.getHost(), this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get all apps for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteInner> listAsync() {
        return new PagedFlux<>(
            () -> listSinglePageAsync(),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get all apps for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> list() {
        return new PagedIterable<>(listAsync());
    }

    /**
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     * 
     * @param resourceGroupName 
     * @param includeSlots 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInner>> listByResourceGroupSinglePageAsync(String resourceGroupName, Boolean includeSlots) {
        return service.listByResourceGroup(this.client.getHost(), resourceGroupName, includeSlots, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     * 
     * @param resourceGroupName 
     * @param includeSlots 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteInner> listByResourceGroupAsync(String resourceGroupName, Boolean includeSlots) {
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, includeSlots),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     * 
     * @param resourceGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteInner> listByResourceGroupAsync(String resourceGroupName) {
        final Boolean includeSlots = null;
        return new PagedFlux<>(
            () -> listByResourceGroupSinglePageAsync(resourceGroupName, includeSlots),
            nextLink -> listByResourceGroupNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     * 
     * @param resourceGroupName 
     * @param includeSlots 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> listByResourceGroup(String resourceGroupName, Boolean includeSlots) {
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, includeSlots));
    }

    /**
     * Description for Gets all web, mobile, and API apps in the specified resource group.
     * 
     * @param resourceGroupName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> listByResourceGroup(String resourceGroupName) {
        final Boolean includeSlots = null;
        return new PagedIterable<>(listByResourceGroupAsync(resourceGroupName, includeSlots));
    }

    /**
     * Description for Gets the details of a web, mobile, or API app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteInner>> getByResourceGroupWithResponseAsync(String resourceGroupName, String name) {
        return service.getByResourceGroup(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the details of a web, mobile, or API app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> getByResourceGroupAsync(String resourceGroupName, String name) {
        return getByResourceGroupWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SiteInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the details of a web, mobile, or API app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner getByResourceGroup(String resourceGroupName, String name) {
        return getByResourceGroupAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String name, SiteInner siteEnvelope) {
        return service.createOrUpdate(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> createOrUpdateAsync(String resourceGroupName, String name, SiteInner siteEnvelope) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateWithResponseAsync(resourceGroupName, name, siteEnvelope);
        return client.<SiteInner, SiteInner>getLroResultAsync(response, client.getHttpPipeline(), SiteInner.class, SiteInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdate(String resourceGroupName, String name, SiteInner siteEnvelope) {
        return createOrUpdateAsync(resourceGroupName, name, siteEnvelope).block();
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param deleteMetrics 
     * @param deleteEmptyServerFarm 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String resourceGroupName, String name, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) {
        return service.delete(this.client.getHost(), resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param deleteMetrics 
     * @param deleteEmptyServerFarm 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String name, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) {
        return deleteWithResponseAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String resourceGroupName, String name) {
        final Boolean deleteMetrics = null;
        final Boolean deleteEmptyServerFarm = null;
        return deleteWithResponseAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param deleteMetrics 
     * @param deleteEmptyServerFarm 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String name, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) {
        deleteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm).block();
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String name) {
        final Boolean deleteMetrics = null;
        final Boolean deleteEmptyServerFarm = null;
        deleteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm).block();
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope ARM resource for a site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteInner>> updateWithResponseAsync(String resourceGroupName, String name, SitePatchResourceInner siteEnvelope) {
        return service.update(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope ARM resource for a site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> updateAsync(String resourceGroupName, String name, SitePatchResourceInner siteEnvelope) {
        return updateWithResponseAsync(resourceGroupName, name, siteEnvelope)
            .flatMap((SimpleResponse<SiteInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope ARM resource for a site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner update(String resourceGroupName, String name, SitePatchResourceInner siteEnvelope) {
        return updateAsync(resourceGroupName, name, siteEnvelope).block();
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CustomHostnameAnalysisResultInner>> analyzeCustomHostnameWithResponseAsync(String resourceGroupName, String name, String hostName) {
        return service.analyzeCustomHostname(this.client.getHost(), resourceGroupName, name, hostName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CustomHostnameAnalysisResultInner> analyzeCustomHostnameAsync(String resourceGroupName, String name, String hostName) {
        return analyzeCustomHostnameWithResponseAsync(resourceGroupName, name, hostName)
            .flatMap((SimpleResponse<CustomHostnameAnalysisResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CustomHostnameAnalysisResultInner> analyzeCustomHostnameAsync(String resourceGroupName, String name) {
        final String hostName = null;
        return analyzeCustomHostnameWithResponseAsync(resourceGroupName, name, hostName)
            .flatMap((SimpleResponse<CustomHostnameAnalysisResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomHostnameAnalysisResultInner analyzeCustomHostname(String resourceGroupName, String name, String hostName) {
        return analyzeCustomHostnameAsync(resourceGroupName, name, hostName).block();
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomHostnameAnalysisResultInner analyzeCustomHostname(String resourceGroupName, String name) {
        final String hostName = null;
        return analyzeCustomHostnameAsync(resourceGroupName, name, hostName).block();
    }

    /**
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> applySlotConfigToProductionWithResponseAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return service.applySlotConfigToProduction(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion());
    }

    /**
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> applySlotConfigToProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return applySlotConfigToProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void applySlotConfigToProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        applySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity).block();
    }

    /**
     * Description for Creates a backup of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupItemInner>> backupWithResponseAsync(String resourceGroupName, String name, BackupRequestInner request) {
        return service.backup(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Creates a backup of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupItemInner> backupAsync(String resourceGroupName, String name, BackupRequestInner request) {
        return backupWithResponseAsync(resourceGroupName, name, request)
            .flatMap((SimpleResponse<BackupItemInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a backup of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner backup(String resourceGroupName, String name, BackupRequestInner request) {
        return backupAsync(resourceGroupName, name, request).block();
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listBackupsSinglePageAsync(String resourceGroupName, String name) {
        return service.listBackups(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BackupItemInner> listBackupsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listBackupsSinglePageAsync(resourceGroupName, name),
            nextLink -> listBackupsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listBackups(String resourceGroupName, String name) {
        return new PagedIterable<>(listBackupsAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupItemInner>> getBackupStatusWithResponseAsync(String resourceGroupName, String name, String backupId) {
        return service.getBackupStatus(this.client.getHost(), resourceGroupName, name, backupId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupItemInner> getBackupStatusAsync(String resourceGroupName, String name, String backupId) {
        return getBackupStatusWithResponseAsync(resourceGroupName, name, backupId)
            .flatMap((SimpleResponse<BackupItemInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner getBackupStatus(String resourceGroupName, String name, String backupId) {
        return getBackupStatusAsync(resourceGroupName, name, backupId).block();
    }

    /**
     * Description for Deletes a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupWithResponseAsync(String resourceGroupName, String name, String backupId) {
        return service.deleteBackup(this.client.getHost(), resourceGroupName, name, backupId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBackupAsync(String resourceGroupName, String name, String backupId) {
        return deleteBackupWithResponseAsync(resourceGroupName, name, backupId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteBackup(String resourceGroupName, String name, String backupId) {
        deleteBackupAsync(resourceGroupName, name, backupId).block();
    }

    /**
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupItemInner>> listBackupStatusSecretsWithResponseAsync(String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        return service.listBackupStatusSecrets(this.client.getHost(), resourceGroupName, name, backupId, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupItemInner> listBackupStatusSecretsAsync(String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        return listBackupStatusSecretsWithResponseAsync(resourceGroupName, name, backupId, request)
            .flatMap((SimpleResponse<BackupItemInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner listBackupStatusSecrets(String resourceGroupName, String name, String backupId, BackupRequestInner request) {
        return listBackupStatusSecretsAsync(resourceGroupName, name, backupId, request).block();
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreWithResponseAsync(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        return service.restore(this.client.getHost(), resourceGroupName, name, backupId, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreAsync(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreWithResponseAsync(resourceGroupName, name, backupId, request);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restore(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        restoreAsync(resourceGroupName, name, backupId, request).block();
    }

    /**
     * Description for List the configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigResourceInner>> listConfigurationsSinglePageAsync(String resourceGroupName, String name) {
        return service.listConfigurations(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteConfigResourceInner> listConfigurationsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listConfigurationsSinglePageAsync(resourceGroupName, name),
            nextLink -> listConfigurationsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteConfigResourceInner> listConfigurations(String resourceGroupName, String name) {
        return new PagedIterable<>(listConfigurationsAsync(resourceGroupName, name));
    }

    /**
     * Description for Replaces the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param appSettings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> updateApplicationSettingsWithResponseAsync(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return service.updateApplicationSettings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), appSettings, this.client.getApiVersion());
    }

    /**
     * Description for Replaces the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param appSettings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> updateApplicationSettingsAsync(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return updateApplicationSettingsWithResponseAsync(resourceGroupName, name, appSettings)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Replaces the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param appSettings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateApplicationSettings(String resourceGroupName, String name, StringDictionaryInner appSettings) {
        return updateApplicationSettingsAsync(resourceGroupName, name, appSettings).block();
    }

    /**
     * Description for Gets the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> listApplicationSettingsWithResponseAsync(String resourceGroupName, String name) {
        return service.listApplicationSettings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> listApplicationSettingsAsync(String resourceGroupName, String name) {
        return listApplicationSettingsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listApplicationSettings(String resourceGroupName, String name) {
        return listApplicationSettingsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteAuthSettings Configuration settings for the Azure App Service Authentication / Authorization feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteAuthSettingsInner>> updateAuthSettingsWithResponseAsync(String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        return service.updateAuthSettings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteAuthSettings, this.client.getApiVersion());
    }

    /**
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteAuthSettings Configuration settings for the Azure App Service Authentication / Authorization feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteAuthSettingsInner> updateAuthSettingsAsync(String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        return updateAuthSettingsWithResponseAsync(resourceGroupName, name, siteAuthSettings)
            .flatMap((SimpleResponse<SiteAuthSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteAuthSettings Configuration settings for the Azure App Service Authentication / Authorization feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner updateAuthSettings(String resourceGroupName, String name, SiteAuthSettingsInner siteAuthSettings) {
        return updateAuthSettingsAsync(resourceGroupName, name, siteAuthSettings).block();
    }

    /**
     * Description for Gets the Authentication/Authorization settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteAuthSettingsInner>> getAuthSettingsWithResponseAsync(String resourceGroupName, String name) {
        return service.getAuthSettings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Authentication/Authorization settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteAuthSettingsInner> getAuthSettingsAsync(String resourceGroupName, String name) {
        return getAuthSettingsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SiteAuthSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Authentication/Authorization settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner getAuthSettings(String resourceGroupName, String name) {
        return getAuthSettingsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param azureStorageAccounts AzureStorageInfo dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> updateAzureStorageAccountsWithResponseAsync(String resourceGroupName, String name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        return service.updateAzureStorageAccounts(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), azureStorageAccounts, this.client.getApiVersion());
    }

    /**
     * Description for Updates the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param azureStorageAccounts AzureStorageInfo dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AzureStoragePropertyDictionaryResourceInner> updateAzureStorageAccountsAsync(String resourceGroupName, String name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        return updateAzureStorageAccountsWithResponseAsync(resourceGroupName, name, azureStorageAccounts)
            .flatMap((SimpleResponse<AzureStoragePropertyDictionaryResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param azureStorageAccounts AzureStorageInfo dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureStoragePropertyDictionaryResourceInner updateAzureStorageAccounts(String resourceGroupName, String name, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        return updateAzureStorageAccountsAsync(resourceGroupName, name, azureStorageAccounts).block();
    }

    /**
     * Description for Gets the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> listAzureStorageAccountsWithResponseAsync(String resourceGroupName, String name) {
        return service.listAzureStorageAccounts(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AzureStoragePropertyDictionaryResourceInner> listAzureStorageAccountsAsync(String resourceGroupName, String name) {
        return listAzureStorageAccountsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<AzureStoragePropertyDictionaryResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureStoragePropertyDictionaryResourceInner listAzureStorageAccounts(String resourceGroupName, String name) {
        return listAzureStorageAccountsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupRequestInner>> updateBackupConfigurationWithResponseAsync(String resourceGroupName, String name, BackupRequestInner request) {
        return service.updateBackupConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Updates the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupRequestInner> updateBackupConfigurationAsync(String resourceGroupName, String name, BackupRequestInner request) {
        return updateBackupConfigurationWithResponseAsync(resourceGroupName, name, request)
            .flatMap((SimpleResponse<BackupRequestInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner updateBackupConfiguration(String resourceGroupName, String name, BackupRequestInner request) {
        return updateBackupConfigurationAsync(resourceGroupName, name, request).block();
    }

    /**
     * Description for Deletes the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupConfigurationWithResponseAsync(String resourceGroupName, String name) {
        return service.deleteBackupConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBackupConfigurationAsync(String resourceGroupName, String name) {
        return deleteBackupConfigurationWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteBackupConfiguration(String resourceGroupName, String name) {
        deleteBackupConfigurationAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupRequestInner>> getBackupConfigurationWithResponseAsync(String resourceGroupName, String name) {
        return service.getBackupConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupRequestInner> getBackupConfigurationAsync(String resourceGroupName, String name) {
        return getBackupConfigurationWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<BackupRequestInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner getBackupConfiguration(String resourceGroupName, String name) {
        return getBackupConfigurationAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the config reference app settings and status of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<KeyVaultReferenceCollectionInner>> getAppSettingsKeyVaultReferencesWithResponseAsync(String resourceGroupName, String name) {
        return service.getAppSettingsKeyVaultReferences(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the config reference app settings and status of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyVaultReferenceCollectionInner> getAppSettingsKeyVaultReferencesAsync(String resourceGroupName, String name) {
        return getAppSettingsKeyVaultReferencesWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<KeyVaultReferenceCollectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the config reference app settings and status of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyVaultReferenceCollectionInner getAppSettingsKeyVaultReferences(String resourceGroupName, String name) {
        return getAppSettingsKeyVaultReferencesAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the config reference and status of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param appSettingKey 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<KeyVaultReferenceResourceInner>> getAppSettingKeyVaultReferenceWithResponseAsync(String resourceGroupName, String name, String appSettingKey) {
        return service.getAppSettingKeyVaultReference(this.client.getHost(), resourceGroupName, name, appSettingKey, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the config reference and status of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param appSettingKey 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyVaultReferenceResourceInner> getAppSettingKeyVaultReferenceAsync(String resourceGroupName, String name, String appSettingKey) {
        return getAppSettingKeyVaultReferenceWithResponseAsync(resourceGroupName, name, appSettingKey)
            .flatMap((SimpleResponse<KeyVaultReferenceResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the config reference and status of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param appSettingKey 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyVaultReferenceResourceInner getAppSettingKeyVaultReference(String resourceGroupName, String name, String appSettingKey) {
        return getAppSettingKeyVaultReferenceAsync(resourceGroupName, name, appSettingKey).block();
    }

    /**
     * Description for Replaces the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionStrings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ConnectionStringDictionaryInner>> updateConnectionStringsWithResponseAsync(String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        return service.updateConnectionStrings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), connectionStrings, this.client.getApiVersion());
    }

    /**
     * Description for Replaces the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionStrings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ConnectionStringDictionaryInner> updateConnectionStringsAsync(String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        return updateConnectionStringsWithResponseAsync(resourceGroupName, name, connectionStrings)
            .flatMap((SimpleResponse<ConnectionStringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Replaces the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionStrings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner updateConnectionStrings(String resourceGroupName, String name, ConnectionStringDictionaryInner connectionStrings) {
        return updateConnectionStringsAsync(resourceGroupName, name, connectionStrings).block();
    }

    /**
     * Description for Gets the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ConnectionStringDictionaryInner>> listConnectionStringsWithResponseAsync(String resourceGroupName, String name) {
        return service.listConnectionStrings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ConnectionStringDictionaryInner> listConnectionStringsAsync(String resourceGroupName, String name) {
        return listConnectionStringsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<ConnectionStringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner listConnectionStrings(String resourceGroupName, String name) {
        return listConnectionStringsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteLogsConfigInner>> getDiagnosticLogsConfigurationWithResponseAsync(String resourceGroupName, String name) {
        return service.getDiagnosticLogsConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteLogsConfigInner> getDiagnosticLogsConfigurationAsync(String resourceGroupName, String name) {
        return getDiagnosticLogsConfigurationWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SiteLogsConfigInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner getDiagnosticLogsConfiguration(String resourceGroupName, String name) {
        return getDiagnosticLogsConfigurationAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteLogsConfig Configuration of App Service site logs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteLogsConfigInner>> updateDiagnosticLogsConfigWithResponseAsync(String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        return service.updateDiagnosticLogsConfig(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteLogsConfig, this.client.getApiVersion());
    }

    /**
     * Description for Updates the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteLogsConfig Configuration of App Service site logs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteLogsConfigInner> updateDiagnosticLogsConfigAsync(String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        return updateDiagnosticLogsConfigWithResponseAsync(resourceGroupName, name, siteLogsConfig)
            .flatMap((SimpleResponse<SiteLogsConfigInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteLogsConfig Configuration of App Service site logs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner updateDiagnosticLogsConfig(String resourceGroupName, String name, SiteLogsConfigInner siteLogsConfig) {
        return updateDiagnosticLogsConfigAsync(resourceGroupName, name, siteLogsConfig).block();
    }

    /**
     * Description for Replaces the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param metadata String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> updateMetadataWithResponseAsync(String resourceGroupName, String name, StringDictionaryInner metadata) {
        return service.updateMetadata(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), metadata, this.client.getApiVersion());
    }

    /**
     * Description for Replaces the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param metadata String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> updateMetadataAsync(String resourceGroupName, String name, StringDictionaryInner metadata) {
        return updateMetadataWithResponseAsync(resourceGroupName, name, metadata)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Replaces the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param metadata String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateMetadata(String resourceGroupName, String name, StringDictionaryInner metadata) {
        return updateMetadataAsync(resourceGroupName, name, metadata).block();
    }

    /**
     * Description for Gets the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> listMetadataWithResponseAsync(String resourceGroupName, String name) {
        return service.listMetadata(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> listMetadataAsync(String resourceGroupName, String name) {
        return listMetadataWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listMetadata(String resourceGroupName, String name) {
        return listMetadataAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> listPublishingCredentialsWithResponseAsync(String resourceGroupName, String name) {
        return service.listPublishingCredentials(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserInner> listPublishingCredentialsAsync(String resourceGroupName, String name) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = listPublishingCredentialsWithResponseAsync(resourceGroupName, name);
        return client.<UserInner, UserInner>getLroResultAsync(response, client.getHttpPipeline(), UserInner.class, UserInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner listPublishingCredentials(String resourceGroupName, String name) {
        return listPublishingCredentialsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param pushSettings Push settings for the App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PushSettingsInner>> updateSitePushSettingsWithResponseAsync(String resourceGroupName, String name, PushSettingsInner pushSettings) {
        return service.updateSitePushSettings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), pushSettings, this.client.getApiVersion());
    }

    /**
     * Description for Updates the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param pushSettings Push settings for the App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PushSettingsInner> updateSitePushSettingsAsync(String resourceGroupName, String name, PushSettingsInner pushSettings) {
        return updateSitePushSettingsWithResponseAsync(resourceGroupName, name, pushSettings)
            .flatMap((SimpleResponse<PushSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param pushSettings Push settings for the App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PushSettingsInner updateSitePushSettings(String resourceGroupName, String name, PushSettingsInner pushSettings) {
        return updateSitePushSettingsAsync(resourceGroupName, name, pushSettings).block();
    }

    /**
     * Description for Gets the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PushSettingsInner>> listSitePushSettingsWithResponseAsync(String resourceGroupName, String name) {
        return service.listSitePushSettings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PushSettingsInner> listSitePushSettingsAsync(String resourceGroupName, String name) {
        return listSitePushSettingsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<PushSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PushSettingsInner listSitePushSettings(String resourceGroupName, String name) {
        return listSitePushSettingsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SlotConfigNamesResourceInner>> listSlotConfigurationNamesWithResponseAsync(String resourceGroupName, String name) {
        return service.listSlotConfigurationNames(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SlotConfigNamesResourceInner> listSlotConfigurationNamesAsync(String resourceGroupName, String name) {
        return listSlotConfigurationNamesWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SlotConfigNamesResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the names of app settings and connection strings that stick to the slot (not swapped).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SlotConfigNamesResourceInner listSlotConfigurationNames(String resourceGroupName, String name) {
        return listSlotConfigurationNamesAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotConfigNames Slot Config names azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SlotConfigNamesResourceInner>> updateSlotConfigurationNamesWithResponseAsync(String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        return service.updateSlotConfigurationNames(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), slotConfigNames, this.client.getApiVersion());
    }

    /**
     * Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotConfigNames Slot Config names azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SlotConfigNamesResourceInner> updateSlotConfigurationNamesAsync(String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        return updateSlotConfigurationNamesWithResponseAsync(resourceGroupName, name, slotConfigNames)
            .flatMap((SimpleResponse<SlotConfigNamesResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the names of application settings and connection string that remain with the slot during swap operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotConfigNames Slot Config names azure resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SlotConfigNamesResourceInner updateSlotConfigurationNames(String resourceGroupName, String name, SlotConfigNamesResourceInner slotConfigNames) {
        return updateSlotConfigurationNamesAsync(resourceGroupName, name, slotConfigNames).block();
    }

    /**
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationWithResponseAsync(String resourceGroupName, String name) {
        return service.getConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> getConfigurationAsync(String resourceGroupName, String name) {
        return getConfigurationWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner getConfiguration(String resourceGroupName, String name) {
        return getConfigurationAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> createOrUpdateConfigurationWithResponseAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        return service.createOrUpdateConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteConfig, this.client.getApiVersion());
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> createOrUpdateConfigurationAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        return createOrUpdateConfigurationWithResponseAsync(resourceGroupName, name, siteConfig)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner createOrUpdateConfiguration(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        return createOrUpdateConfigurationAsync(resourceGroupName, name, siteConfig).block();
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> updateConfigurationWithResponseAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        return service.updateConfiguration(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteConfig, this.client.getApiVersion());
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> updateConfigurationAsync(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        return updateConfigurationWithResponseAsync(resourceGroupName, name, siteConfig)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner updateConfiguration(String resourceGroupName, String name, SiteConfigResourceInner siteConfig) {
        return updateConfigurationAsync(resourceGroupName, name, siteConfig).block();
    }

    /**
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigurationSnapshotInfoInner>> listConfigurationSnapshotInfoSinglePageAsync(String resourceGroupName, String name) {
        return service.listConfigurationSnapshotInfo(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteConfigurationSnapshotInfoInner> listConfigurationSnapshotInfoAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listConfigurationSnapshotInfoSinglePageAsync(resourceGroupName, name),
            nextLink -> listConfigurationSnapshotInfoNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteConfigurationSnapshotInfoInner> listConfigurationSnapshotInfo(String resourceGroupName, String name) {
        return new PagedIterable<>(listConfigurationSnapshotInfoAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationSnapshotWithResponseAsync(String resourceGroupName, String name, String snapshotId) {
        return service.getConfigurationSnapshot(this.client.getHost(), resourceGroupName, name, snapshotId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> getConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId) {
        return getConfigurationSnapshotWithResponseAsync(resourceGroupName, name, snapshotId)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner getConfigurationSnapshot(String resourceGroupName, String name, String snapshotId) {
        return getConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).block();
    }

    /**
     * Description for Reverts the configuration of an app to a previous snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverSiteConfigurationSnapshotWithResponseAsync(String resourceGroupName, String name, String snapshotId) {
        return service.recoverSiteConfigurationSnapshot(this.client.getHost(), resourceGroupName, name, snapshotId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Reverts the configuration of an app to a previous snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recoverSiteConfigurationSnapshotAsync(String resourceGroupName, String name, String snapshotId) {
        return recoverSiteConfigurationSnapshotWithResponseAsync(resourceGroupName, name, snapshotId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Reverts the configuration of an app to a previous snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void recoverSiteConfigurationSnapshot(String resourceGroupName, String name, String snapshotId) {
        recoverSiteConfigurationSnapshotAsync(resourceGroupName, name, snapshotId).block();
    }

    /**
     * Description for Gets the last lines of docker logs for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getWebSiteContainerLogsWithResponseAsync(String resourceGroupName, String name) {
        return service.getWebSiteContainerLogs(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the last lines of docker logs for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getWebSiteContainerLogsAsync(String resourceGroupName, String name) {
        return getWebSiteContainerLogsWithResponseAsync(resourceGroupName, name)
            .flatMapMany(StreamResponse::getValue);}

    /**
     * Description for Gets the last lines of docker logs for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream getWebSiteContainerLogs(String resourceGroupName, String name) {
        return getWebSiteContainerLogsAsync(resourceGroupName, name)
            .map(ByteBufferBackedInputStream::new)
            .collectList()
            .map(list -> new SequenceInputStream(Collections.enumeration(list)))
            .block();
    }

    /**
     * Description for Gets the ZIP archived docker log files for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getContainerLogsZipWithResponseAsync(String resourceGroupName, String name) {
        return service.getContainerLogsZip(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the ZIP archived docker log files for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getContainerLogsZipAsync(String resourceGroupName, String name) {
        return getContainerLogsZipWithResponseAsync(resourceGroupName, name)
            .flatMapMany(StreamResponse::getValue);}

    /**
     * Description for Gets the ZIP archived docker log files for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream getContainerLogsZip(String resourceGroupName, String name) {
        return getContainerLogsZipAsync(resourceGroupName, name)
            .map(ByteBufferBackedInputStream::new)
            .collectList()
            .map(list -> new SequenceInputStream(Collections.enumeration(list)))
            .block();
    }

    /**
     * Description for List continuous web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ContinuousWebJobInner>> listContinuousWebJobsSinglePageAsync(String resourceGroupName, String name) {
        return service.listContinuousWebJobs(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List continuous web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ContinuousWebJobInner> listContinuousWebJobsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listContinuousWebJobsSinglePageAsync(resourceGroupName, name),
            nextLink -> listContinuousWebJobsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List continuous web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ContinuousWebJobInner> listContinuousWebJobs(String resourceGroupName, String name) {
        return new PagedIterable<>(listContinuousWebJobsAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ContinuousWebJobInner>> getContinuousWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.getContinuousWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContinuousWebJobInner> getContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return getContinuousWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((SimpleResponse<ContinuousWebJobInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContinuousWebJobInner getContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        return getContinuousWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteContinuousWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.deleteContinuousWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return deleteContinuousWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        deleteContinuousWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for Start a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startContinuousWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.startContinuousWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return startContinuousWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Start a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        startContinuousWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopContinuousWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.stopContinuousWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopContinuousWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return stopContinuousWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopContinuousWebJob(String resourceGroupName, String name, String webJobName) {
        stopContinuousWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for List deployments for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentInner>> listDeploymentsSinglePageAsync(String resourceGroupName, String name) {
        return service.listDeployments(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List deployments for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentInner> listDeploymentsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listDeploymentsSinglePageAsync(resourceGroupName, name),
            nextLink -> listDeploymentsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List deployments for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> listDeployments(String resourceGroupName, String name) {
        return new PagedIterable<>(listDeploymentsAsync(resourceGroupName, name));
    }

    /**
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DeploymentInner>> getDeploymentWithResponseAsync(String resourceGroupName, String name, String id) {
        return service.getDeployment(this.client.getHost(), resourceGroupName, name, id, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentInner> getDeploymentAsync(String resourceGroupName, String name, String id) {
        return getDeploymentWithResponseAsync(resourceGroupName, name, id)
            .flatMap((SimpleResponse<DeploymentInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner getDeployment(String resourceGroupName, String name, String id) {
        return getDeploymentAsync(resourceGroupName, name, id).block();
    }

    /**
     * Description for Create a deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param deployment User credentials used for publishing activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DeploymentInner>> createDeploymentWithResponseAsync(String resourceGroupName, String name, String id, DeploymentInner deployment) {
        return service.createDeployment(this.client.getHost(), resourceGroupName, name, id, this.client.getSubscriptionId(), deployment, this.client.getApiVersion());
    }

    /**
     * Description for Create a deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param deployment User credentials used for publishing activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentInner> createDeploymentAsync(String resourceGroupName, String name, String id, DeploymentInner deployment) {
        return createDeploymentWithResponseAsync(resourceGroupName, name, id, deployment)
            .flatMap((SimpleResponse<DeploymentInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Create a deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param deployment User credentials used for publishing activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createDeployment(String resourceGroupName, String name, String id, DeploymentInner deployment) {
        return createDeploymentAsync(resourceGroupName, name, id, deployment).block();
    }

    /**
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentWithResponseAsync(String resourceGroupName, String name, String id) {
        return service.deleteDeployment(this.client.getHost(), resourceGroupName, name, id, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeploymentAsync(String resourceGroupName, String name, String id) {
        return deleteDeploymentWithResponseAsync(resourceGroupName, name, id)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDeployment(String resourceGroupName, String name, String id) {
        deleteDeploymentAsync(resourceGroupName, name, id).block();
    }

    /**
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DeploymentInner>> listDeploymentLogWithResponseAsync(String resourceGroupName, String name, String id) {
        return service.listDeploymentLog(this.client.getHost(), resourceGroupName, name, id, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentInner> listDeploymentLogAsync(String resourceGroupName, String name, String id) {
        return listDeploymentLogWithResponseAsync(resourceGroupName, name, id)
            .flatMap((SimpleResponse<DeploymentInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner listDeploymentLog(String resourceGroupName, String name, String id) {
        return listDeploymentLogAsync(resourceGroupName, name, id).block();
    }

    /**
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RestoreRequestInner>> discoverBackupWithResponseAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        return service.discoverBackup(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RestoreRequestInner> discoverBackupAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        return discoverBackupWithResponseAsync(resourceGroupName, name, request)
            .flatMap((SimpleResponse<RestoreRequestInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreRequestInner discoverBackup(String resourceGroupName, String name, RestoreRequestInner request) {
        return discoverBackupAsync(resourceGroupName, name, request).block();
    }

    /**
     * Description for Lists ownership identifiers for domain associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<IdentifierInner>> listDomainOwnershipIdentifiersSinglePageAsync(String resourceGroupName, String name) {
        return service.listDomainOwnershipIdentifiers(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Lists ownership identifiers for domain associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<IdentifierInner> listDomainOwnershipIdentifiersAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listDomainOwnershipIdentifiersSinglePageAsync(resourceGroupName, name),
            nextLink -> listDomainOwnershipIdentifiersNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Lists ownership identifiers for domain associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IdentifierInner> listDomainOwnershipIdentifiers(String resourceGroupName, String name) {
        return new PagedIterable<>(listDomainOwnershipIdentifiersAsync(resourceGroupName, name));
    }

    /**
     * Description for Get domain ownership identifier for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<IdentifierInner>> getDomainOwnershipIdentifierWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        return service.getDomainOwnershipIdentifier(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get domain ownership identifier for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IdentifierInner> getDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        return getDomainOwnershipIdentifierWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName)
            .flatMap((SimpleResponse<IdentifierInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get domain ownership identifier for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IdentifierInner getDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        return getDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).block();
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<IdentifierInner>> createOrUpdateDomainOwnershipIdentifierWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier) {
        return service.createOrUpdateDomainOwnershipIdentifier(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, this.client.getSubscriptionId(), domainOwnershipIdentifier, this.client.getApiVersion());
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IdentifierInner> createOrUpdateDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier) {
        return createOrUpdateDomainOwnershipIdentifierWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier)
            .flatMap((SimpleResponse<IdentifierInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IdentifierInner createOrUpdateDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier) {
        return createOrUpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier).block();
    }

    /**
     * Description for Deletes a domain ownership identifier for a web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDomainOwnershipIdentifierWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        return service.deleteDomainOwnershipIdentifier(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a domain ownership identifier for a web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        return deleteDomainOwnershipIdentifierWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a domain ownership identifier for a web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName) {
        deleteDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName).block();
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<IdentifierInner>> updateDomainOwnershipIdentifierWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier) {
        return service.updateDomainOwnershipIdentifier(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, this.client.getSubscriptionId(), domainOwnershipIdentifier, this.client.getApiVersion());
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IdentifierInner> updateDomainOwnershipIdentifierAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier) {
        return updateDomainOwnershipIdentifierWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier)
            .flatMap((SimpleResponse<IdentifierInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IdentifierInner updateDomainOwnershipIdentifier(String resourceGroupName, String name, String domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier) {
        return updateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier).block();
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> getMSDeployStatusWithResponseAsync(String resourceGroupName, String name) {
        return service.getMSDeployStatus(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> getMSDeployStatusAsync(String resourceGroupName, String name) {
        return getMSDeployStatusWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner getMSDeployStatus(String resourceGroupName, String name) {
        return getMSDeployStatusAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createMSDeployOperationWithResponseAsync(String resourceGroupName, String name, MSDeploy mSDeploy) {
        return service.createMSDeployOperation(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> createMSDeployOperationAsync(String resourceGroupName, String name, MSDeploy mSDeploy) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createMSDeployOperationWithResponseAsync(resourceGroupName, name, mSDeploy);
        return client.<MSDeployStatusInner, MSDeployStatusInner>getLroResultAsync(response, client.getHttpPipeline(), MSDeployStatusInner.class, MSDeployStatusInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner createMSDeployOperation(String resourceGroupName, String name, MSDeploy mSDeploy) {
        return createMSDeployOperationAsync(resourceGroupName, name, mSDeploy).block();
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployLogInner>> getMSDeployLogWithResponseAsync(String resourceGroupName, String name) {
        return service.getMSDeployLog(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployLogInner> getMSDeployLogAsync(String resourceGroupName, String name) {
        return getMSDeployLogWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<MSDeployLogInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployLogInner getMSDeployLog(String resourceGroupName, String name) {
        return getMSDeployLogAsync(resourceGroupName, name).block();
    }

    /**
     * Description for List the functions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<FunctionEnvelopeInner>> listFunctionsSinglePageAsync(String resourceGroupName, String name) {
        return service.listFunctions(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the functions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<FunctionEnvelopeInner> listFunctionsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listFunctionsSinglePageAsync(resourceGroupName, name),
            nextLink -> listFunctionsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the functions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FunctionEnvelopeInner> listFunctions(String resourceGroupName, String name) {
        return new PagedIterable<>(listFunctionsAsync(resourceGroupName, name));
    }

    /**
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<String>> getFunctionsAdminTokenWithResponseAsync(String resourceGroupName, String name) {
        return service.getFunctionsAdminToken(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> getFunctionsAdminTokenAsync(String resourceGroupName, String name) {
        return getFunctionsAdminTokenWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<String> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getFunctionsAdminToken(String resourceGroupName, String name) {
        return getFunctionsAdminTokenAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Get function information by its ID for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionEnvelopeInner>> getFunctionWithResponseAsync(String resourceGroupName, String name, String functionName) {
        return service.getFunction(this.client.getHost(), resourceGroupName, name, functionName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get function information by its ID for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionEnvelopeInner> getFunctionAsync(String resourceGroupName, String name, String functionName) {
        return getFunctionWithResponseAsync(resourceGroupName, name, functionName)
            .flatMap((SimpleResponse<FunctionEnvelopeInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get function information by its ID for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionEnvelopeInner getFunction(String resourceGroupName, String name, String functionName) {
        return getFunctionAsync(resourceGroupName, name, functionName).block();
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createFunctionWithResponseAsync(String resourceGroupName, String name, String functionName, FunctionEnvelopeInner functionEnvelope) {
        return service.createFunction(this.client.getHost(), resourceGroupName, name, functionName, this.client.getSubscriptionId(), functionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionEnvelopeInner> createFunctionAsync(String resourceGroupName, String name, String functionName, FunctionEnvelopeInner functionEnvelope) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createFunctionWithResponseAsync(resourceGroupName, name, functionName, functionEnvelope);
        return client.<FunctionEnvelopeInner, FunctionEnvelopeInner>getLroResultAsync(response, client.getHttpPipeline(), FunctionEnvelopeInner.class, FunctionEnvelopeInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionEnvelopeInner createFunction(String resourceGroupName, String name, String functionName, FunctionEnvelopeInner functionEnvelope) {
        return createFunctionAsync(resourceGroupName, name, functionName, functionEnvelope).block();
    }

    /**
     * Description for Delete a function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFunctionWithResponseAsync(String resourceGroupName, String name, String functionName) {
        return service.deleteFunction(this.client.getHost(), resourceGroupName, name, functionName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFunctionAsync(String resourceGroupName, String name, String functionName) {
        return deleteFunctionWithResponseAsync(resourceGroupName, name, functionName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFunction(String resourceGroupName, String name, String functionName) {
        deleteFunctionAsync(resourceGroupName, name, functionName).block();
    }

    /**
     * Description for Add or update a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<KeyInfoInner>> createOrUpdateFunctionSecretWithResponseAsync(String resourceGroupName, String name, String functionName, String keyName, KeyInfoInner key) {
        return service.createOrUpdateFunctionSecret(this.client.getHost(), resourceGroupName, name, functionName, keyName, this.client.getSubscriptionId(), key, this.client.getApiVersion());
    }

    /**
     * Description for Add or update a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyInfoInner> createOrUpdateFunctionSecretAsync(String resourceGroupName, String name, String functionName, String keyName, KeyInfoInner key) {
        return createOrUpdateFunctionSecretWithResponseAsync(resourceGroupName, name, functionName, keyName, key)
            .flatMap((SimpleResponse<KeyInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Add or update a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyInfoInner createOrUpdateFunctionSecret(String resourceGroupName, String name, String functionName, String keyName, KeyInfoInner key) {
        return createOrUpdateFunctionSecretAsync(resourceGroupName, name, functionName, keyName, key).block();
    }

    /**
     * Description for Delete a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFunctionSecretWithResponseAsync(String resourceGroupName, String name, String functionName, String keyName) {
        return service.deleteFunctionSecret(this.client.getHost(), resourceGroupName, name, functionName, keyName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFunctionSecretAsync(String resourceGroupName, String name, String functionName, String keyName) {
        return deleteFunctionSecretWithResponseAsync(resourceGroupName, name, functionName, keyName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFunctionSecret(String resourceGroupName, String name, String functionName, String keyName) {
        deleteFunctionSecretAsync(resourceGroupName, name, functionName, keyName).block();
    }

    /**
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> listFunctionKeysWithResponseAsync(String resourceGroupName, String name, String functionName) {
        return service.listFunctionKeys(this.client.getHost(), resourceGroupName, name, functionName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> listFunctionKeysAsync(String resourceGroupName, String name, String functionName) {
        return listFunctionKeysWithResponseAsync(resourceGroupName, name, functionName)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listFunctionKeys(String resourceGroupName, String name, String functionName) {
        return listFunctionKeysAsync(resourceGroupName, name, functionName).block();
    }

    /**
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionSecretsInner>> listFunctionSecretsWithResponseAsync(String resourceGroupName, String name, String functionName) {
        return service.listFunctionSecrets(this.client.getHost(), resourceGroupName, name, functionName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionSecretsInner> listFunctionSecretsAsync(String resourceGroupName, String name, String functionName) {
        return listFunctionSecretsWithResponseAsync(resourceGroupName, name, functionName)
            .flatMap((SimpleResponse<FunctionSecretsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionSecretsInner listFunctionSecrets(String resourceGroupName, String name, String functionName) {
        return listFunctionSecretsAsync(resourceGroupName, name, functionName).block();
    }

    /**
     * Description for Get host secrets for a function app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HostKeysInner>> listHostKeysWithResponseAsync(String resourceGroupName, String name) {
        return service.listHostKeys(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get host secrets for a function app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HostKeysInner> listHostKeysAsync(String resourceGroupName, String name) {
        return listHostKeysWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<HostKeysInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get host secrets for a function app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostKeysInner listHostKeys(String resourceGroupName, String name) {
        return listHostKeysAsync(resourceGroupName, name).block();
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> listSyncStatusWithResponseAsync(String resourceGroupName, String name) {
        return service.listSyncStatus(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> listSyncStatusAsync(String resourceGroupName, String name) {
        return listSyncStatusWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listSyncStatus(String resourceGroupName, String name) {
        listSyncStatusAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> syncFunctionsWithResponseAsync(String resourceGroupName, String name) {
        return service.syncFunctions(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> syncFunctionsAsync(String resourceGroupName, String name) {
        return syncFunctionsWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void syncFunctions(String resourceGroupName, String name) {
        syncFunctionsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Add or update a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<KeyInfoInner>> createOrUpdateHostSecretWithResponseAsync(String resourceGroupName, String name, String keyType, String keyName, KeyInfoInner key) {
        return service.createOrUpdateHostSecret(this.client.getHost(), resourceGroupName, name, keyType, keyName, this.client.getSubscriptionId(), key, this.client.getApiVersion());
    }

    /**
     * Description for Add or update a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyInfoInner> createOrUpdateHostSecretAsync(String resourceGroupName, String name, String keyType, String keyName, KeyInfoInner key) {
        return createOrUpdateHostSecretWithResponseAsync(resourceGroupName, name, keyType, keyName, key)
            .flatMap((SimpleResponse<KeyInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Add or update a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyInfoInner createOrUpdateHostSecret(String resourceGroupName, String name, String keyType, String keyName, KeyInfoInner key) {
        return createOrUpdateHostSecretAsync(resourceGroupName, name, keyType, keyName, key).block();
    }

    /**
     * Description for Delete a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteHostSecretWithResponseAsync(String resourceGroupName, String name, String keyType, String keyName) {
        return service.deleteHostSecret(this.client.getHost(), resourceGroupName, name, keyType, keyName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteHostSecretAsync(String resourceGroupName, String name, String keyType, String keyName) {
        return deleteHostSecretWithResponseAsync(resourceGroupName, name, keyType, keyName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteHostSecret(String resourceGroupName, String name, String keyType, String keyName) {
        deleteHostSecretAsync(resourceGroupName, name, keyType, keyName).block();
    }

    /**
     * Description for Get hostname bindings for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<HostNameBindingInner>> listHostNameBindingsSinglePageAsync(String resourceGroupName, String name) {
        return service.listHostNameBindings(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get hostname bindings for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<HostNameBindingInner> listHostNameBindingsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listHostNameBindingsSinglePageAsync(resourceGroupName, name),
            nextLink -> listHostNameBindingsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get hostname bindings for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostNameBindingInner> listHostNameBindings(String resourceGroupName, String name) {
        return new PagedIterable<>(listHostNameBindingsAsync(resourceGroupName, name));
    }

    /**
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HostNameBindingInner>> getHostNameBindingWithResponseAsync(String resourceGroupName, String name, String hostName) {
        return service.getHostNameBinding(this.client.getHost(), resourceGroupName, name, hostName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HostNameBindingInner> getHostNameBindingAsync(String resourceGroupName, String name, String hostName) {
        return getHostNameBindingWithResponseAsync(resourceGroupName, name, hostName)
            .flatMap((SimpleResponse<HostNameBindingInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostNameBindingInner getHostNameBinding(String resourceGroupName, String name, String hostName) {
        return getHostNameBindingAsync(resourceGroupName, name, hostName).block();
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @param hostNameBinding A hostname binding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HostNameBindingInner>> createOrUpdateHostNameBindingWithResponseAsync(String resourceGroupName, String name, String hostName, HostNameBindingInner hostNameBinding) {
        return service.createOrUpdateHostNameBinding(this.client.getHost(), resourceGroupName, name, hostName, this.client.getSubscriptionId(), hostNameBinding, this.client.getApiVersion());
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @param hostNameBinding A hostname binding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HostNameBindingInner> createOrUpdateHostNameBindingAsync(String resourceGroupName, String name, String hostName, HostNameBindingInner hostNameBinding) {
        return createOrUpdateHostNameBindingWithResponseAsync(resourceGroupName, name, hostName, hostNameBinding)
            .flatMap((SimpleResponse<HostNameBindingInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @param hostNameBinding A hostname binding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostNameBindingInner createOrUpdateHostNameBinding(String resourceGroupName, String name, String hostName, HostNameBindingInner hostNameBinding) {
        return createOrUpdateHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding).block();
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteHostNameBindingWithResponseAsync(String resourceGroupName, String name, String hostName) {
        return service.deleteHostNameBinding(this.client.getHost(), resourceGroupName, name, hostName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteHostNameBindingAsync(String resourceGroupName, String name, String hostName) {
        return deleteHostNameBindingWithResponseAsync(resourceGroupName, name, hostName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteHostNameBinding(String resourceGroupName, String name, String hostName) {
        deleteHostNameBindingAsync(resourceGroupName, name, hostName).block();
    }

    /**
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> getHybridConnectionWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        return service.getHybridConnection(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> getHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        return getHybridConnectionWithResponseAsync(resourceGroupName, name, namespaceName, relayName)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner getHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName) {
        return getHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).block();
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> createOrUpdateHybridConnectionWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName, HybridConnectionInner connectionEnvelope) {
        return service.createOrUpdateHybridConnection(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> createOrUpdateHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, HybridConnectionInner connectionEnvelope) {
        return createOrUpdateHybridConnectionWithResponseAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner createOrUpdateHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, HybridConnectionInner connectionEnvelope) {
        return createOrUpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope).block();
    }

    /**
     * Description for Removes a Hybrid Connection from this site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteHybridConnectionWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        return service.deleteHybridConnection(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Removes a Hybrid Connection from this site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName) {
        return deleteHybridConnectionWithResponseAsync(resourceGroupName, name, namespaceName, relayName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Removes a Hybrid Connection from this site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName) {
        deleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName).block();
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> updateHybridConnectionWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName, HybridConnectionInner connectionEnvelope) {
        return service.updateHybridConnection(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> updateHybridConnectionAsync(String resourceGroupName, String name, String namespaceName, String relayName, HybridConnectionInner connectionEnvelope) {
        return updateHybridConnectionWithResponseAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner updateHybridConnection(String resourceGroupName, String name, String namespaceName, String relayName, HybridConnectionInner connectionEnvelope) {
        return updateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope).block();
    }

    /**
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> listHybridConnectionsWithResponseAsync(String resourceGroupName, String name) {
        return service.listHybridConnections(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> listHybridConnectionsAsync(String resourceGroupName, String name) {
        return listHybridConnectionsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner listHybridConnections(String resourceGroupName, String name) {
        return listHybridConnectionsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> listRelayServiceConnectionsWithResponseAsync(String resourceGroupName, String name) {
        return service.listRelayServiceConnections(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> listRelayServiceConnectionsAsync(String resourceGroupName, String name) {
        return listRelayServiceConnectionsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner listRelayServiceConnections(String resourceGroupName, String name) {
        return listRelayServiceConnectionsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets a hybrid connection configuration by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> getRelayServiceConnectionWithResponseAsync(String resourceGroupName, String name, String entityName) {
        return service.getRelayServiceConnection(this.client.getHost(), resourceGroupName, name, entityName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a hybrid connection configuration by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> getRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName) {
        return getRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a hybrid connection configuration by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner getRelayServiceConnection(String resourceGroupName, String name, String entityName) {
        return getRelayServiceConnectionAsync(resourceGroupName, name, entityName).block();
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> createOrUpdateRelayServiceConnectionWithResponseAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        return service.createOrUpdateRelayServiceConnection(this.client.getHost(), resourceGroupName, name, entityName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> createOrUpdateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName, connectionEnvelope)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner createOrUpdateRelayServiceConnection(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).block();
    }

    /**
     * Description for Deletes a relay service connection by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRelayServiceConnectionWithResponseAsync(String resourceGroupName, String name, String entityName) {
        return service.deleteRelayServiceConnection(this.client.getHost(), resourceGroupName, name, entityName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a relay service connection by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName) {
        return deleteRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a relay service connection by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRelayServiceConnection(String resourceGroupName, String name, String entityName) {
        deleteRelayServiceConnectionAsync(resourceGroupName, name, entityName).block();
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> updateRelayServiceConnectionWithResponseAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        return service.updateRelayServiceConnection(this.client.getHost(), resourceGroupName, name, entityName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> updateRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateRelayServiceConnectionWithResponseAsync(resourceGroupName, name, entityName, connectionEnvelope)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner updateRelayServiceConnection(String resourceGroupName, String name, String entityName, RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope).block();
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInstanceInner>> listInstanceIdentifiersSinglePageAsync(String resourceGroupName, String name) {
        return service.listInstanceIdentifiers(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteInstanceInner> listInstanceIdentifiersAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listInstanceIdentifiersSinglePageAsync(resourceGroupName, name),
            nextLink -> listInstanceIdentifiersNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInstanceInner> listInstanceIdentifiers(String resourceGroupName, String name) {
        return new PagedIterable<>(listInstanceIdentifiersAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<WebSiteInstanceStatusInner>> getInstanceInfoWithResponseAsync(String resourceGroupName, String name, String instanceId) {
        return service.getInstanceInfo(this.client.getHost(), resourceGroupName, name, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WebSiteInstanceStatusInner> getInstanceInfoAsync(String resourceGroupName, String name, String instanceId) {
        return getInstanceInfoWithResponseAsync(resourceGroupName, name, instanceId)
            .flatMap((SimpleResponse<WebSiteInstanceStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebSiteInstanceStatusInner getInstanceInfo(String resourceGroupName, String name, String instanceId) {
        return getInstanceInfoAsync(resourceGroupName, name, instanceId).block();
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> getInstanceMsDeployStatusWithResponseAsync(String resourceGroupName, String name, String instanceId) {
        return service.getInstanceMsDeployStatus(this.client.getHost(), resourceGroupName, name, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> getInstanceMsDeployStatusAsync(String resourceGroupName, String name, String instanceId) {
        return getInstanceMsDeployStatusWithResponseAsync(resourceGroupName, name, instanceId)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner getInstanceMsDeployStatus(String resourceGroupName, String name, String instanceId) {
        return getInstanceMsDeployStatusAsync(resourceGroupName, name, instanceId).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createInstanceMSDeployOperationWithResponseAsync(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        return service.createInstanceMSDeployOperation(this.client.getHost(), resourceGroupName, name, instanceId, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> createInstanceMSDeployOperationAsync(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createInstanceMSDeployOperationWithResponseAsync(resourceGroupName, name, instanceId, mSDeploy);
        return client.<MSDeployStatusInner, MSDeployStatusInner>getLroResultAsync(response, client.getHttpPipeline(), MSDeployStatusInner.class, MSDeployStatusInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner createInstanceMSDeployOperation(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        return createInstanceMSDeployOperationAsync(resourceGroupName, name, instanceId, mSDeploy).block();
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployLogInner>> getInstanceMSDeployLogWithResponseAsync(String resourceGroupName, String name, String instanceId) {
        return service.getInstanceMSDeployLog(this.client.getHost(), resourceGroupName, name, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployLogInner> getInstanceMSDeployLogAsync(String resourceGroupName, String name, String instanceId) {
        return getInstanceMSDeployLogWithResponseAsync(resourceGroupName, name, instanceId)
            .flatMap((SimpleResponse<MSDeployLogInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployLogInner getInstanceMSDeployLog(String resourceGroupName, String name, String instanceId) {
        return getInstanceMSDeployLogAsync(resourceGroupName, name, instanceId).block();
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listInstanceProcessesSinglePageAsync(String resourceGroupName, String name, String instanceId) {
        return service.listInstanceProcesses(this.client.getHost(), resourceGroupName, name, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessInfoInner> listInstanceProcessesAsync(String resourceGroupName, String name, String instanceId) {
        return new PagedFlux<>(
            () -> listInstanceProcessesSinglePageAsync(resourceGroupName, name, instanceId),
            nextLink -> listInstanceProcessesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessInfoInner> listInstanceProcesses(String resourceGroupName, String name, String instanceId) {
        return new PagedIterable<>(listInstanceProcessesAsync(resourceGroupName, name, instanceId));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessInfoInner>> getInstanceProcessWithResponseAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return service.getInstanceProcess(this.client.getHost(), resourceGroupName, name, processId, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessInfoInner> getInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return getInstanceProcessWithResponseAsync(resourceGroupName, name, processId, instanceId)
            .flatMap((SimpleResponse<ProcessInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessInfoInner getInstanceProcess(String resourceGroupName, String name, String processId, String instanceId) {
        return getInstanceProcessAsync(resourceGroupName, name, processId, instanceId).block();
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteInstanceProcessWithResponseAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return service.deleteInstanceProcess(this.client.getHost(), resourceGroupName, name, processId, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteInstanceProcessAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return deleteInstanceProcessWithResponseAsync(resourceGroupName, name, processId, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteInstanceProcess(String resourceGroupName, String name, String processId, String instanceId) {
        deleteInstanceProcessAsync(resourceGroupName, name, processId, instanceId).block();
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getInstanceProcessDumpWithResponseAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return service.getInstanceProcessDump(this.client.getHost(), resourceGroupName, name, processId, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getInstanceProcessDumpAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return getInstanceProcessDumpWithResponseAsync(resourceGroupName, name, processId, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getInstanceProcessDump(String resourceGroupName, String name, String processId, String instanceId) {
        getInstanceProcessDumpAsync(resourceGroupName, name, processId, instanceId).block();
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listInstanceProcessModulesSinglePageAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return service.listInstanceProcessModules(this.client.getHost(), resourceGroupName, name, processId, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessModuleInfoInner> listInstanceProcessModulesAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return new PagedFlux<>(
            () -> listInstanceProcessModulesSinglePageAsync(resourceGroupName, name, processId, instanceId),
            nextLink -> listInstanceProcessModulesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessModuleInfoInner> listInstanceProcessModules(String resourceGroupName, String name, String processId, String instanceId) {
        return new PagedIterable<>(listInstanceProcessModulesAsync(resourceGroupName, name, processId, instanceId));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessModuleInfoInner>> getInstanceProcessModuleWithResponseAsync(String resourceGroupName, String name, String processId, String baseAddress, String instanceId) {
        return service.getInstanceProcessModule(this.client.getHost(), resourceGroupName, name, processId, baseAddress, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessModuleInfoInner> getInstanceProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress, String instanceId) {
        return getInstanceProcessModuleWithResponseAsync(resourceGroupName, name, processId, baseAddress, instanceId)
            .flatMap((SimpleResponse<ProcessModuleInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessModuleInfoInner getInstanceProcessModule(String resourceGroupName, String name, String processId, String baseAddress, String instanceId) {
        return getInstanceProcessModuleAsync(resourceGroupName, name, processId, baseAddress, instanceId).block();
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listInstanceProcessThreadsSinglePageAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return service.listInstanceProcessThreads(this.client.getHost(), resourceGroupName, name, processId, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessThreadInfoInner> listInstanceProcessThreadsAsync(String resourceGroupName, String name, String processId, String instanceId) {
        return new PagedFlux<>(
            () -> listInstanceProcessThreadsSinglePageAsync(resourceGroupName, name, processId, instanceId),
            nextLink -> listInstanceProcessThreadsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessThreadInfoInner> listInstanceProcessThreads(String resourceGroupName, String name, String processId, String instanceId) {
        return new PagedIterable<>(listInstanceProcessThreadsAsync(resourceGroupName, name, processId, instanceId));
    }

    /**
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteCloneabilityInner>> isCloneableWithResponseAsync(String resourceGroupName, String name) {
        return service.isCloneable(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteCloneabilityInner> isCloneableAsync(String resourceGroupName, String name) {
        return isCloneableWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SiteCloneabilityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteCloneabilityInner isCloneable(String resourceGroupName, String name) {
        return isCloneableAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listSiteBackupsSinglePageAsync(String resourceGroupName, String name) {
        return service.listSiteBackups(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BackupItemInner> listSiteBackupsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listSiteBackupsSinglePageAsync(resourceGroupName, name),
            nextLink -> listSiteBackupsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listSiteBackups(String resourceGroupName, String name) {
        return new PagedIterable<>(listSiteBackupsAsync(resourceGroupName, name));
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionSecretsInner>> listSyncFunctionTriggersWithResponseAsync(String resourceGroupName, String name) {
        return service.listSyncFunctionTriggers(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionSecretsInner> listSyncFunctionTriggersAsync(String resourceGroupName, String name) {
        return listSyncFunctionTriggersWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<FunctionSecretsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionSecretsInner listSyncFunctionTriggers(String resourceGroupName, String name) {
        return listSyncFunctionTriggersAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Restores a web app.
     * 
     * @param subscriptionName 
     * @param resourceGroupName 
     * @param name 
     * @param migrationOptions Options for app content migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> migrateStorageWithResponseAsync(String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        return service.migrateStorage(this.client.getHost(), subscriptionName, resourceGroupName, name, this.client.getSubscriptionId(), migrationOptions, this.client.getApiVersion());
    }

    /**
     * Description for Restores a web app.
     * 
     * @param subscriptionName 
     * @param resourceGroupName 
     * @param name 
     * @param migrationOptions Options for app content migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StorageMigrationResponseInner> migrateStorageAsync(String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = migrateStorageWithResponseAsync(subscriptionName, resourceGroupName, name, migrationOptions);
        return client.<StorageMigrationResponseInner, StorageMigrationResponseInner>getLroResultAsync(response, client.getHttpPipeline(), StorageMigrationResponseInner.class, StorageMigrationResponseInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a web app.
     * 
     * @param subscriptionName 
     * @param resourceGroupName 
     * @param name 
     * @param migrationOptions Options for app content migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageMigrationResponseInner migrateStorage(String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        return migrateStorageAsync(subscriptionName, resourceGroupName, name, migrationOptions).block();
    }

    /**
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param migrationRequestEnvelope MySQL migration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> migrateMySqlWithResponseAsync(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        return service.migrateMySql(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), migrationRequestEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param migrationRequestEnvelope MySQL migration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OperationInner> migrateMySqlAsync(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = migrateMySqlWithResponseAsync(resourceGroupName, name, migrationRequestEnvelope);
        return client.<OperationInner, OperationInner>getLroResultAsync(response, client.getHttpPipeline(), OperationInner.class, OperationInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param migrationRequestEnvelope MySQL migration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationInner migrateMySql(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        return migrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope).block();
    }

    /**
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MigrateMySqlStatusInner>> getMigrateMySqlStatusWithResponseAsync(String resourceGroupName, String name) {
        return service.getMigrateMySqlStatus(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MigrateMySqlStatusInner> getMigrateMySqlStatusAsync(String resourceGroupName, String name) {
        return getMigrateMySqlStatusWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<MigrateMySqlStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrateMySqlStatusInner getMigrateMySqlStatus(String resourceGroupName, String name) {
        return getMigrateMySqlStatusAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets a Swift Virtual Network connection.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SwiftVirtualNetworkInner>> getSwiftVirtualNetworkConnectionWithResponseAsync(String resourceGroupName, String name) {
        return service.getSwiftVirtualNetworkConnection(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a Swift Virtual Network connection.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SwiftVirtualNetworkInner> getSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name) {
        return getSwiftVirtualNetworkConnectionWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SwiftVirtualNetworkInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a Swift Virtual Network connection.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SwiftVirtualNetworkInner getSwiftVirtualNetworkConnection(String resourceGroupName, String name) {
        return getSwiftVirtualNetworkConnectionAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SwiftVirtualNetworkInner>> createOrUpdateSwiftVirtualNetworkConnectionWithResponseAsync(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        return service.createOrUpdateSwiftVirtualNetworkConnection(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SwiftVirtualNetworkInner> createOrUpdateSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        return createOrUpdateSwiftVirtualNetworkConnectionWithResponseAsync(resourceGroupName, name, connectionEnvelope)
            .flatMap((SimpleResponse<SwiftVirtualNetworkInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SwiftVirtualNetworkInner createOrUpdateSwiftVirtualNetworkConnection(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        return createOrUpdateSwiftVirtualNetworkConnectionAsync(resourceGroupName, name, connectionEnvelope).block();
    }

    /**
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSwiftVirtualNetworkWithResponseAsync(String resourceGroupName, String name) {
        return service.deleteSwiftVirtualNetwork(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSwiftVirtualNetworkAsync(String resourceGroupName, String name) {
        return deleteSwiftVirtualNetworkWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSwiftVirtualNetwork(String resourceGroupName, String name) {
        deleteSwiftVirtualNetworkAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SwiftVirtualNetworkInner>> updateSwiftVirtualNetworkConnectionWithResponseAsync(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        return service.updateSwiftVirtualNetworkConnection(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SwiftVirtualNetworkInner> updateSwiftVirtualNetworkConnectionAsync(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        return updateSwiftVirtualNetworkConnectionWithResponseAsync(resourceGroupName, name, connectionEnvelope)
            .flatMap((SimpleResponse<SwiftVirtualNetworkInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SwiftVirtualNetworkInner updateSwiftVirtualNetworkConnection(String resourceGroupName, String name, SwiftVirtualNetworkInner connectionEnvelope) {
        return updateSwiftVirtualNetworkConnectionAsync(resourceGroupName, name, connectionEnvelope).block();
    }

    /**
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param view 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<NetworkFeaturesInner>> listNetworkFeaturesWithResponseAsync(String resourceGroupName, String name, String view) {
        return service.listNetworkFeatures(this.client.getHost(), resourceGroupName, name, view, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param view 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NetworkFeaturesInner> listNetworkFeaturesAsync(String resourceGroupName, String name, String view) {
        return listNetworkFeaturesWithResponseAsync(resourceGroupName, name, view)
            .flatMap((SimpleResponse<NetworkFeaturesInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param view 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFeaturesInner listNetworkFeatures(String resourceGroupName, String name, String view) {
        return listNetworkFeaturesAsync(resourceGroupName, name, view).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationWithResponseAsync(String resourceGroupName, String name, String operationId) {
        return service.getNetworkTraceOperation(this.client.getHost(), resourceGroupName, name, operationId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTraceOperationAsync(String resourceGroupName, String name, String operationId) {
        return getNetworkTraceOperationWithResponseAsync(resourceGroupName, name, operationId)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTraceOperation(String resourceGroupName, String name, String operationId) {
        return getNetworkTraceOperationAsync(resourceGroupName, name, operationId).block();
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<String>> startWebSiteNetworkTraceWithResponseAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.startWebSiteNetworkTrace(this.client.getHost(), resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> startWebSiteNetworkTraceAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startWebSiteNetworkTraceWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<String> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> startWebSiteNetworkTraceAsync(String resourceGroupName, String name) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return startWebSiteNetworkTraceWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<String> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String startWebSiteNetworkTrace(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startWebSiteNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String startWebSiteNetworkTrace(String resourceGroupName, String name) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return startWebSiteNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> startWebSiteNetworkTraceOperationWithResponseAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.startWebSiteNetworkTraceOperation(this.client.getHost(), resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> startWebSiteNetworkTraceOperationAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = startWebSiteNetworkTraceOperationWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl);
        return client.<List<NetworkTraceInner>, List<NetworkTraceInner>>getLroResultAsync(response, client.getHttpPipeline(), new TypeReference<List<NetworkTraceInner>>() {}.getType(), new TypeReference<List<NetworkTraceInner>>() {}.getType())
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> startWebSiteNetworkTraceOperation(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startWebSiteNetworkTraceOperationAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopWebSiteNetworkTraceWithResponseAsync(String resourceGroupName, String name) {
        return service.stopWebSiteNetworkTrace(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopWebSiteNetworkTraceAsync(String resourceGroupName, String name) {
        return stopWebSiteNetworkTraceWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopWebSiteNetworkTrace(String resourceGroupName, String name) {
        stopWebSiteNetworkTraceAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesWithResponseAsync(String resourceGroupName, String name, String operationId) {
        return service.getNetworkTraces(this.client.getHost(), resourceGroupName, name, operationId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTracesAsync(String resourceGroupName, String name, String operationId) {
        return getNetworkTracesWithResponseAsync(resourceGroupName, name, operationId)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTraces(String resourceGroupName, String name, String operationId) {
        return getNetworkTracesAsync(resourceGroupName, name, operationId).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationV2WithResponseAsync(String resourceGroupName, String name, String operationId) {
        return service.getNetworkTraceOperationV2(this.client.getHost(), resourceGroupName, name, operationId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTraceOperationV2Async(String resourceGroupName, String name, String operationId) {
        return getNetworkTraceOperationV2WithResponseAsync(resourceGroupName, name, operationId)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTraceOperationV2(String resourceGroupName, String name, String operationId) {
        return getNetworkTraceOperationV2Async(resourceGroupName, name, operationId).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesV2WithResponseAsync(String resourceGroupName, String name, String operationId) {
        return service.getNetworkTracesV2(this.client.getHost(), resourceGroupName, name, operationId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTracesV2Async(String resourceGroupName, String name, String operationId) {
        return getNetworkTracesV2WithResponseAsync(resourceGroupName, name, operationId)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTracesV2(String resourceGroupName, String name, String operationId) {
        return getNetworkTracesV2Async(resourceGroupName, name, operationId).block();
    }

    /**
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> generateNewSitePublishingPasswordWithResponseAsync(String resourceGroupName, String name) {
        return service.generateNewSitePublishingPassword(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> generateNewSitePublishingPasswordAsync(String resourceGroupName, String name) {
        return generateNewSitePublishingPasswordWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void generateNewSitePublishingPassword(String resourceGroupName, String name) {
        generateNewSitePublishingPasswordAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PerfMonResponseInner>> listPerfMonCountersSinglePageAsync(String resourceGroupName, String name, String filter) {
        return service.listPerfMonCounters(this.client.getHost(), resourceGroupName, name, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PerfMonResponseInner> listPerfMonCountersAsync(String resourceGroupName, String name, String filter) {
        return new PagedFlux<>(
            () -> listPerfMonCountersSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> listPerfMonCountersNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PerfMonResponseInner> listPerfMonCountersAsync(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listPerfMonCountersSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> listPerfMonCountersNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PerfMonResponseInner> listPerfMonCounters(String resourceGroupName, String name, String filter) {
        return new PagedIterable<>(listPerfMonCountersAsync(resourceGroupName, name, filter));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PerfMonResponseInner> listPerfMonCounters(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedIterable<>(listPerfMonCountersAsync(resourceGroupName, name, filter));
    }

    /**
     * Description for Gets web app's event logs.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SitePhpErrorLogFlagInner>> getSitePhpErrorLogFlagWithResponseAsync(String resourceGroupName, String name) {
        return service.getSitePhpErrorLogFlag(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets web app's event logs.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SitePhpErrorLogFlagInner> getSitePhpErrorLogFlagAsync(String resourceGroupName, String name) {
        return getSitePhpErrorLogFlagWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SitePhpErrorLogFlagInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets web app's event logs.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SitePhpErrorLogFlagInner getSitePhpErrorLogFlag(String resourceGroupName, String name) {
        return getSitePhpErrorLogFlagAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets the premier add-ons of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> listPremierAddOnsWithResponseAsync(String resourceGroupName, String name) {
        return service.listPremierAddOns(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the premier add-ons of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> listPremierAddOnsAsync(String resourceGroupName, String name) {
        return listPremierAddOnsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the premier add-ons of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner listPremierAddOns(String resourceGroupName, String name) {
        return listPremierAddOnsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> getPremierAddOnWithResponseAsync(String resourceGroupName, String name, String premierAddOnName) {
        return service.getPremierAddOn(this.client.getHost(), resourceGroupName, name, premierAddOnName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> getPremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName) {
        return getPremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner getPremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        return getPremierAddOnAsync(resourceGroupName, name, premierAddOnName).block();
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param premierAddOn Premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> addPremierAddOnWithResponseAsync(String resourceGroupName, String name, String premierAddOnName, PremierAddOnInner premierAddOn) {
        return service.addPremierAddOn(this.client.getHost(), resourceGroupName, name, premierAddOnName, this.client.getSubscriptionId(), premierAddOn, this.client.getApiVersion());
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param premierAddOn Premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> addPremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, PremierAddOnInner premierAddOn) {
        return addPremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName, premierAddOn)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param premierAddOn Premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner addPremierAddOn(String resourceGroupName, String name, String premierAddOnName, PremierAddOnInner premierAddOn) {
        return addPremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn).block();
    }

    /**
     * Description for Delete a premier add-on from an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePremierAddOnWithResponseAsync(String resourceGroupName, String name, String premierAddOnName) {
        return service.deletePremierAddOn(this.client.getHost(), resourceGroupName, name, premierAddOnName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a premier add-on from an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName) {
        return deletePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a premier add-on from an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePremierAddOn(String resourceGroupName, String name, String premierAddOnName) {
        deletePremierAddOnAsync(resourceGroupName, name, premierAddOnName).block();
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param premierAddOn ARM resource for a PremierAddOn.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> updatePremierAddOnWithResponseAsync(String resourceGroupName, String name, String premierAddOnName, PremierAddOnPatchResource premierAddOn) {
        return service.updatePremierAddOn(this.client.getHost(), resourceGroupName, name, premierAddOnName, this.client.getSubscriptionId(), premierAddOn, this.client.getApiVersion());
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param premierAddOn ARM resource for a PremierAddOn.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> updatePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, PremierAddOnPatchResource premierAddOn) {
        return updatePremierAddOnWithResponseAsync(resourceGroupName, name, premierAddOnName, premierAddOn)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param premierAddOn ARM resource for a PremierAddOn.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner updatePremierAddOn(String resourceGroupName, String name, String premierAddOnName, PremierAddOnPatchResource premierAddOn) {
        return updatePremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn).block();
    }

    /**
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PrivateAccessInner>> getPrivateAccessWithResponseAsync(String resourceGroupName, String name) {
        return service.getPrivateAccess(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrivateAccessInner> getPrivateAccessAsync(String resourceGroupName, String name) {
        return getPrivateAccessWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<PrivateAccessInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateAccessInner getPrivateAccess(String resourceGroupName, String name) {
        return getPrivateAccessAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param access Description of the parameters of Private Access for a Web Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PrivateAccessInner>> putPrivateAccessVnetWithResponseAsync(String resourceGroupName, String name, PrivateAccessInner access) {
        return service.putPrivateAccessVnet(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), access, this.client.getApiVersion());
    }

    /**
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param access Description of the parameters of Private Access for a Web Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrivateAccessInner> putPrivateAccessVnetAsync(String resourceGroupName, String name, PrivateAccessInner access) {
        return putPrivateAccessVnetWithResponseAsync(resourceGroupName, name, access)
            .flatMap((SimpleResponse<PrivateAccessInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param access Description of the parameters of Private Access for a Web Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateAccessInner putPrivateAccessVnet(String resourceGroupName, String name, PrivateAccessInner access) {
        return putPrivateAccessVnetAsync(resourceGroupName, name, access).block();
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listProcessesSinglePageAsync(String resourceGroupName, String name) {
        return service.listProcesses(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessInfoInner> listProcessesAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listProcessesSinglePageAsync(resourceGroupName, name),
            nextLink -> listProcessesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessInfoInner> listProcesses(String resourceGroupName, String name) {
        return new PagedIterable<>(listProcessesAsync(resourceGroupName, name));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessInfoInner>> getProcessWithResponseAsync(String resourceGroupName, String name, String processId) {
        return service.getProcess(this.client.getHost(), resourceGroupName, name, processId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessInfoInner> getProcessAsync(String resourceGroupName, String name, String processId) {
        return getProcessWithResponseAsync(resourceGroupName, name, processId)
            .flatMap((SimpleResponse<ProcessInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessInfoInner getProcess(String resourceGroupName, String name, String processId) {
        return getProcessAsync(resourceGroupName, name, processId).block();
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteProcessWithResponseAsync(String resourceGroupName, String name, String processId) {
        return service.deleteProcess(this.client.getHost(), resourceGroupName, name, processId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteProcessAsync(String resourceGroupName, String name, String processId) {
        return deleteProcessWithResponseAsync(resourceGroupName, name, processId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteProcess(String resourceGroupName, String name, String processId) {
        deleteProcessAsync(resourceGroupName, name, processId).block();
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getProcessDumpWithResponseAsync(String resourceGroupName, String name, String processId) {
        return service.getProcessDump(this.client.getHost(), resourceGroupName, name, processId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getProcessDumpAsync(String resourceGroupName, String name, String processId) {
        return getProcessDumpWithResponseAsync(resourceGroupName, name, processId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getProcessDump(String resourceGroupName, String name, String processId) {
        getProcessDumpAsync(resourceGroupName, name, processId).block();
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listProcessModulesSinglePageAsync(String resourceGroupName, String name, String processId) {
        return service.listProcessModules(this.client.getHost(), resourceGroupName, name, processId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessModuleInfoInner> listProcessModulesAsync(String resourceGroupName, String name, String processId) {
        return new PagedFlux<>(
            () -> listProcessModulesSinglePageAsync(resourceGroupName, name, processId),
            nextLink -> listProcessModulesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessModuleInfoInner> listProcessModules(String resourceGroupName, String name, String processId) {
        return new PagedIterable<>(listProcessModulesAsync(resourceGroupName, name, processId));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessModuleInfoInner>> getProcessModuleWithResponseAsync(String resourceGroupName, String name, String processId, String baseAddress) {
        return service.getProcessModule(this.client.getHost(), resourceGroupName, name, processId, baseAddress, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessModuleInfoInner> getProcessModuleAsync(String resourceGroupName, String name, String processId, String baseAddress) {
        return getProcessModuleWithResponseAsync(resourceGroupName, name, processId, baseAddress)
            .flatMap((SimpleResponse<ProcessModuleInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessModuleInfoInner getProcessModule(String resourceGroupName, String name, String processId, String baseAddress) {
        return getProcessModuleAsync(resourceGroupName, name, processId, baseAddress).block();
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listProcessThreadsSinglePageAsync(String resourceGroupName, String name, String processId) {
        return service.listProcessThreads(this.client.getHost(), resourceGroupName, name, processId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessThreadInfoInner> listProcessThreadsAsync(String resourceGroupName, String name, String processId) {
        return new PagedFlux<>(
            () -> listProcessThreadsSinglePageAsync(resourceGroupName, name, processId),
            nextLink -> listProcessThreadsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessThreadInfoInner> listProcessThreads(String resourceGroupName, String name, String processId) {
        return new PagedIterable<>(listProcessThreadsAsync(resourceGroupName, name, processId));
    }

    /**
     * Description for Get public certificates for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PublicCertificateInner>> listPublicCertificatesSinglePageAsync(String resourceGroupName, String name) {
        return service.listPublicCertificates(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get public certificates for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PublicCertificateInner> listPublicCertificatesAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listPublicCertificatesSinglePageAsync(resourceGroupName, name),
            nextLink -> listPublicCertificatesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get public certificates for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PublicCertificateInner> listPublicCertificates(String resourceGroupName, String name) {
        return new PagedIterable<>(listPublicCertificatesAsync(resourceGroupName, name));
    }

    /**
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PublicCertificateInner>> getPublicCertificateWithResponseAsync(String resourceGroupName, String name, String publicCertificateName) {
        return service.getPublicCertificate(this.client.getHost(), resourceGroupName, name, publicCertificateName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PublicCertificateInner> getPublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName) {
        return getPublicCertificateWithResponseAsync(resourceGroupName, name, publicCertificateName)
            .flatMap((SimpleResponse<PublicCertificateInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PublicCertificateInner getPublicCertificate(String resourceGroupName, String name, String publicCertificateName) {
        return getPublicCertificateAsync(resourceGroupName, name, publicCertificateName).block();
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @param publicCertificate Public certificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PublicCertificateInner>> createOrUpdatePublicCertificateWithResponseAsync(String resourceGroupName, String name, String publicCertificateName, PublicCertificateInner publicCertificate) {
        return service.createOrUpdatePublicCertificate(this.client.getHost(), resourceGroupName, name, publicCertificateName, this.client.getSubscriptionId(), publicCertificate, this.client.getApiVersion());
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @param publicCertificate Public certificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PublicCertificateInner> createOrUpdatePublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName, PublicCertificateInner publicCertificate) {
        return createOrUpdatePublicCertificateWithResponseAsync(resourceGroupName, name, publicCertificateName, publicCertificate)
            .flatMap((SimpleResponse<PublicCertificateInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @param publicCertificate Public certificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PublicCertificateInner createOrUpdatePublicCertificate(String resourceGroupName, String name, String publicCertificateName, PublicCertificateInner publicCertificate) {
        return createOrUpdatePublicCertificateAsync(resourceGroupName, name, publicCertificateName, publicCertificate).block();
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePublicCertificateWithResponseAsync(String resourceGroupName, String name, String publicCertificateName) {
        return service.deletePublicCertificate(this.client.getHost(), resourceGroupName, name, publicCertificateName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePublicCertificateAsync(String resourceGroupName, String name, String publicCertificateName) {
        return deletePublicCertificateWithResponseAsync(resourceGroupName, name, publicCertificateName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePublicCertificate(String resourceGroupName, String name, String publicCertificateName) {
        deletePublicCertificateAsync(resourceGroupName, name, publicCertificateName).block();
    }

    /**
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publishingProfileOptions Publishing options for requested profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> listPublishingProfileXmlWithSecretsWithResponseAsync(String resourceGroupName, String name, CsmPublishingProfileOptions publishingProfileOptions) {
        return service.listPublishingProfileXmlWithSecrets(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), publishingProfileOptions, this.client.getApiVersion());
    }

    /**
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publishingProfileOptions Publishing options for requested profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> listPublishingProfileXmlWithSecretsAsync(String resourceGroupName, String name, CsmPublishingProfileOptions publishingProfileOptions) {
        return listPublishingProfileXmlWithSecretsWithResponseAsync(resourceGroupName, name, publishingProfileOptions)
                .flatMapMany(StreamResponse::getValue);
    }

    /**
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publishingProfileOptions Publishing options for requested profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream listPublishingProfileXmlWithSecrets(String resourceGroupName, String name, CsmPublishingProfileOptions publishingProfileOptions) {
        return listPublishingProfileXmlWithSecretsAsync(resourceGroupName, name, publishingProfileOptions)
                .map(ByteBufferBackedInputStream::new)
                .collectList()
                .map(list -> new SequenceInputStream(Collections.enumeration(list)))
                .block();
    }

    /**
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetProductionSlotConfigWithResponseAsync(String resourceGroupName, String name) {
        return service.resetProductionSlotConfig(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetProductionSlotConfigAsync(String resourceGroupName, String name) {
        return resetProductionSlotConfigWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetProductionSlotConfig(String resourceGroupName, String name) {
        resetProductionSlotConfigAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param softRestart 
     * @param synchronous 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartWithResponseAsync(String resourceGroupName, String name, Boolean softRestart, Boolean synchronous) {
        return service.restart(this.client.getHost(), resourceGroupName, name, softRestart, synchronous, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param softRestart 
     * @param synchronous 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartAsync(String resourceGroupName, String name, Boolean softRestart, Boolean synchronous) {
        return restartWithResponseAsync(resourceGroupName, name, softRestart, synchronous)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartAsync(String resourceGroupName, String name) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        return restartWithResponseAsync(resourceGroupName, name, softRestart, synchronous)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param softRestart 
     * @param synchronous 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroupName, String name, Boolean softRestart, Boolean synchronous) {
        restartAsync(resourceGroupName, name, softRestart, synchronous).block();
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restart(String resourceGroupName, String name) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        restartAsync(resourceGroupName, name, softRestart, synchronous).block();
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromBackupBlobWithResponseAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        return service.restoreFromBackupBlob(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreFromBackupBlobAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreFromBackupBlobWithResponseAsync(resourceGroupName, name, request);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreFromBackupBlob(String resourceGroupName, String name, RestoreRequestInner request) {
        restoreFromBackupBlobAsync(resourceGroupName, name, request).block();
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromDeletedAppWithResponseAsync(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        return service.restoreFromDeletedApp(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreFromDeletedAppAsync(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreFromDeletedAppWithResponseAsync(resourceGroupName, name, restoreRequest);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreFromDeletedApp(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        restoreFromDeletedAppAsync(resourceGroupName, name, restoreRequest).block();
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreSnapshotWithResponseAsync(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        return service.restoreSnapshot(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreSnapshotAsync(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreSnapshotWithResponseAsync(resourceGroupName, name, restoreRequest);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreSnapshot(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        restoreSnapshotAsync(resourceGroupName, name, restoreRequest).block();
    }

    /**
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteExtensionInfoInner>> listSiteExtensionsSinglePageAsync(String resourceGroupName, String name) {
        return service.listSiteExtensions(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteExtensionInfoInner> listSiteExtensionsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listSiteExtensionsSinglePageAsync(resourceGroupName, name),
            nextLink -> listSiteExtensionsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteExtensionInfoInner> listSiteExtensions(String resourceGroupName, String name) {
        return new PagedIterable<>(listSiteExtensionsAsync(resourceGroupName, name));
    }

    /**
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteExtensionInfoInner>> getSiteExtensionWithResponseAsync(String resourceGroupName, String name, String siteExtensionId) {
        return service.getSiteExtension(this.client.getHost(), resourceGroupName, name, siteExtensionId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteExtensionInfoInner> getSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId) {
        return getSiteExtensionWithResponseAsync(resourceGroupName, name, siteExtensionId)
            .flatMap((SimpleResponse<SiteExtensionInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteExtensionInfoInner getSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        return getSiteExtensionAsync(resourceGroupName, name, siteExtensionId).block();
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> installSiteExtensionWithResponseAsync(String resourceGroupName, String name, String siteExtensionId) {
        return service.installSiteExtension(this.client.getHost(), resourceGroupName, name, siteExtensionId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteExtensionInfoInner> installSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = installSiteExtensionWithResponseAsync(resourceGroupName, name, siteExtensionId);
        return client.<SiteExtensionInfoInner, SiteExtensionInfoInner>getLroResultAsync(response, client.getHttpPipeline(), SiteExtensionInfoInner.class, SiteExtensionInfoInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteExtensionInfoInner installSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        return installSiteExtensionAsync(resourceGroupName, name, siteExtensionId).block();
    }

    /**
     * Description for Remove a site extension from a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSiteExtensionWithResponseAsync(String resourceGroupName, String name, String siteExtensionId) {
        return service.deleteSiteExtension(this.client.getHost(), resourceGroupName, name, siteExtensionId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Remove a site extension from a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId) {
        return deleteSiteExtensionWithResponseAsync(resourceGroupName, name, siteExtensionId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Remove a site extension from a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        deleteSiteExtensionAsync(resourceGroupName, name, siteExtensionId).block();
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> copyProductionSlotWithResponseAsync(String resourceGroupName, String name, CsmCopySlotEntityInner copySlotEntity) {
        return service.copyProductionSlot(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), copySlotEntity, this.client.getApiVersion());
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copyProductionSlotAsync(String resourceGroupName, String name, CsmCopySlotEntityInner copySlotEntity) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = copyProductionSlotWithResponseAsync(resourceGroupName, name, copySlotEntity);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copyProductionSlot(String resourceGroupName, String name, CsmCopySlotEntityInner copySlotEntity) {
        copyProductionSlotAsync(resourceGroupName, name, copySlotEntity).block();
    }

    /**
     * Description for Gets an app's deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInner>> listSlotsSinglePageAsync(String resourceGroupName, String name) {
        return service.listSlots(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets an app's deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteInner> listSlotsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listSlotsSinglePageAsync(resourceGroupName, name),
            nextLink -> listSlotsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets an app's deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInner> listSlots(String resourceGroupName, String name) {
        return new PagedIterable<>(listSlotsAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets the details of a web, mobile, or API app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteInner>> getSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the details of a web, mobile, or API app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> getSlotAsync(String resourceGroupName, String name, String slot) {
        return getSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SiteInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the details of a web, mobile, or API app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner getSlot(String resourceGroupName, String name, String slot) {
        return getSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        return service.createOrUpdateSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> createOrUpdateSlotAsync(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateSlotWithResponseAsync(resourceGroupName, name, slot, siteEnvelope);
        return client.<SiteInner, SiteInner>getLroResultAsync(response, client.getHttpPipeline(), SiteInner.class, SiteInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner createOrUpdateSlot(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        return createOrUpdateSlotAsync(resourceGroupName, name, slot, siteEnvelope).block();
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param deleteMetrics 
     * @param deleteEmptyServerFarm 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSlotWithResponseAsync(String resourceGroupName, String name, String slot, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) {
        return service.deleteSlot(this.client.getHost(), resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param deleteMetrics 
     * @param deleteEmptyServerFarm 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSlotAsync(String resourceGroupName, String name, String slot, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) {
        return deleteSlotWithResponseAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSlotAsync(String resourceGroupName, String name, String slot) {
        final Boolean deleteMetrics = null;
        final Boolean deleteEmptyServerFarm = null;
        return deleteSlotWithResponseAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param deleteMetrics 
     * @param deleteEmptyServerFarm 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSlot(String resourceGroupName, String name, String slot, Boolean deleteMetrics, Boolean deleteEmptyServerFarm) {
        deleteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm).block();
    }

    /**
     * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSlot(String resourceGroupName, String name, String slot) {
        final Boolean deleteMetrics = null;
        final Boolean deleteEmptyServerFarm = null;
        deleteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm).block();
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope ARM resource for a site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteInner>> updateSlotWithResponseAsync(String resourceGroupName, String name, String slot, SitePatchResourceInner siteEnvelope) {
        return service.updateSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope ARM resource for a site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> updateSlotAsync(String resourceGroupName, String name, String slot, SitePatchResourceInner siteEnvelope) {
        return updateSlotWithResponseAsync(resourceGroupName, name, slot, siteEnvelope)
            .flatMap((SimpleResponse<SiteInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope ARM resource for a site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner updateSlot(String resourceGroupName, String name, String slot, SitePatchResourceInner siteEnvelope) {
        return updateSlotAsync(resourceGroupName, name, slot, siteEnvelope).block();
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CustomHostnameAnalysisResultInner>> analyzeCustomHostnameSlotWithResponseAsync(String resourceGroupName, String name, String slot, String hostName) {
        return service.analyzeCustomHostnameSlot(this.client.getHost(), resourceGroupName, name, slot, hostName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CustomHostnameAnalysisResultInner> analyzeCustomHostnameSlotAsync(String resourceGroupName, String name, String slot, String hostName) {
        return analyzeCustomHostnameSlotWithResponseAsync(resourceGroupName, name, slot, hostName)
            .flatMap((SimpleResponse<CustomHostnameAnalysisResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CustomHostnameAnalysisResultInner> analyzeCustomHostnameSlotAsync(String resourceGroupName, String name, String slot) {
        final String hostName = null;
        return analyzeCustomHostnameSlotWithResponseAsync(resourceGroupName, name, slot, hostName)
            .flatMap((SimpleResponse<CustomHostnameAnalysisResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomHostnameAnalysisResultInner analyzeCustomHostnameSlot(String resourceGroupName, String name, String slot, String hostName) {
        return analyzeCustomHostnameSlotAsync(resourceGroupName, name, slot, hostName).block();
    }

    /**
     * Description for Analyze a custom hostname.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CustomHostnameAnalysisResultInner analyzeCustomHostnameSlot(String resourceGroupName, String name, String slot) {
        final String hostName = null;
        return analyzeCustomHostnameSlotAsync(resourceGroupName, name, slot, hostName).block();
    }

    /**
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> applySlotConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return service.applySlotConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion());
    }

    /**
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> applySlotConfigurationSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return applySlotConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Applies the configuration settings from the target slot onto the current slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void applySlotConfigurationSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        applySlotConfigurationSlotAsync(resourceGroupName, name, slot, slotSwapEntity).block();
    }

    /**
     * Description for Creates a backup of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupItemInner>> backupSlotWithResponseAsync(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return service.backupSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Creates a backup of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupItemInner> backupSlotAsync(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return backupSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap((SimpleResponse<BackupItemInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a backup of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner backupSlot(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return backupSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listBackupsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listBackupsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BackupItemInner> listBackupsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listBackupsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listBackupsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listBackupsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listBackupsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Gets a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupItemInner>> getBackupStatusSlotWithResponseAsync(String resourceGroupName, String name, String backupId, String slot) {
        return service.getBackupStatusSlot(this.client.getHost(), resourceGroupName, name, backupId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupItemInner> getBackupStatusSlotAsync(String resourceGroupName, String name, String backupId, String slot) {
        return getBackupStatusSlotWithResponseAsync(resourceGroupName, name, backupId, slot)
            .flatMap((SimpleResponse<BackupItemInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner getBackupStatusSlot(String resourceGroupName, String name, String backupId, String slot) {
        return getBackupStatusSlotAsync(resourceGroupName, name, backupId, slot).block();
    }

    /**
     * Description for Deletes a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupSlotWithResponseAsync(String resourceGroupName, String name, String backupId, String slot) {
        return service.deleteBackupSlot(this.client.getHost(), resourceGroupName, name, backupId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBackupSlotAsync(String resourceGroupName, String name, String backupId, String slot) {
        return deleteBackupSlotWithResponseAsync(resourceGroupName, name, backupId, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a backup of an app by its ID.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteBackupSlot(String resourceGroupName, String name, String backupId, String slot) {
        deleteBackupSlotAsync(resourceGroupName, name, backupId, slot).block();
    }

    /**
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupItemInner>> listBackupStatusSecretsSlotWithResponseAsync(String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        return service.listBackupStatusSecretsSlot(this.client.getHost(), resourceGroupName, name, backupId, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupItemInner> listBackupStatusSecretsSlotAsync(String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        return listBackupStatusSecretsSlotWithResponseAsync(resourceGroupName, name, backupId, slot, request)
            .flatMap((SimpleResponse<BackupItemInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupItemInner listBackupStatusSecretsSlot(String resourceGroupName, String name, String backupId, String slot, BackupRequestInner request) {
        return listBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, slot, request).block();
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreSlotWithResponseAsync(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        return service.restoreSlot(this.client.getHost(), resourceGroupName, name, backupId, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreSlotAsync(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreSlotWithResponseAsync(resourceGroupName, name, backupId, slot, request);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreSlot(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        restoreSlotAsync(resourceGroupName, name, backupId, slot, request).block();
    }

    /**
     * Description for List the configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigResourceInner>> listConfigurationsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listConfigurationsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteConfigResourceInner> listConfigurationsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listConfigurationsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listConfigurationsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteConfigResourceInner> listConfigurationsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listConfigurationsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Replaces the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param appSettings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> updateApplicationSettingsSlotWithResponseAsync(String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        return service.updateApplicationSettingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), appSettings, this.client.getApiVersion());
    }

    /**
     * Description for Replaces the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param appSettings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> updateApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        return updateApplicationSettingsSlotWithResponseAsync(resourceGroupName, name, slot, appSettings)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Replaces the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param appSettings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateApplicationSettingsSlot(String resourceGroupName, String name, String slot, StringDictionaryInner appSettings) {
        return updateApplicationSettingsSlotAsync(resourceGroupName, name, slot, appSettings).block();
    }

    /**
     * Description for Gets the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> listApplicationSettingsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listApplicationSettingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> listApplicationSettingsSlotAsync(String resourceGroupName, String name, String slot) {
        return listApplicationSettingsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the application settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listApplicationSettingsSlot(String resourceGroupName, String name, String slot) {
        return listApplicationSettingsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteAuthSettings Configuration settings for the Azure App Service Authentication / Authorization feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteAuthSettingsInner>> updateAuthSettingsSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        return service.updateAuthSettingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteAuthSettings, this.client.getApiVersion());
    }

    /**
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteAuthSettings Configuration settings for the Azure App Service Authentication / Authorization feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteAuthSettingsInner> updateAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        return updateAuthSettingsSlotWithResponseAsync(resourceGroupName, name, slot, siteAuthSettings)
            .flatMap((SimpleResponse<SiteAuthSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the Authentication / Authorization settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteAuthSettings Configuration settings for the Azure App Service Authentication / Authorization feature.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner updateAuthSettingsSlot(String resourceGroupName, String name, String slot, SiteAuthSettingsInner siteAuthSettings) {
        return updateAuthSettingsSlotAsync(resourceGroupName, name, slot, siteAuthSettings).block();
    }

    /**
     * Description for Gets the Authentication/Authorization settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteAuthSettingsInner>> getAuthSettingsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getAuthSettingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Authentication/Authorization settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteAuthSettingsInner> getAuthSettingsSlotAsync(String resourceGroupName, String name, String slot) {
        return getAuthSettingsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SiteAuthSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Authentication/Authorization settings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteAuthSettingsInner getAuthSettingsSlot(String resourceGroupName, String name, String slot) {
        return getAuthSettingsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param azureStorageAccounts AzureStorageInfo dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> updateAzureStorageAccountsSlotWithResponseAsync(String resourceGroupName, String name, String slot, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        return service.updateAzureStorageAccountsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), azureStorageAccounts, this.client.getApiVersion());
    }

    /**
     * Description for Updates the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param azureStorageAccounts AzureStorageInfo dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AzureStoragePropertyDictionaryResourceInner> updateAzureStorageAccountsSlotAsync(String resourceGroupName, String name, String slot, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        return updateAzureStorageAccountsSlotWithResponseAsync(resourceGroupName, name, slot, azureStorageAccounts)
            .flatMap((SimpleResponse<AzureStoragePropertyDictionaryResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param azureStorageAccounts AzureStorageInfo dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureStoragePropertyDictionaryResourceInner updateAzureStorageAccountsSlot(String resourceGroupName, String name, String slot, AzureStoragePropertyDictionaryResourceInner azureStorageAccounts) {
        return updateAzureStorageAccountsSlotAsync(resourceGroupName, name, slot, azureStorageAccounts).block();
    }

    /**
     * Description for Gets the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AzureStoragePropertyDictionaryResourceInner>> listAzureStorageAccountsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listAzureStorageAccountsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AzureStoragePropertyDictionaryResourceInner> listAzureStorageAccountsSlotAsync(String resourceGroupName, String name, String slot) {
        return listAzureStorageAccountsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<AzureStoragePropertyDictionaryResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Azure storage account configurations of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AzureStoragePropertyDictionaryResourceInner listAzureStorageAccountsSlot(String resourceGroupName, String name, String slot) {
        return listAzureStorageAccountsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupRequestInner>> updateBackupConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return service.updateBackupConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Updates the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupRequestInner> updateBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return updateBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap((SimpleResponse<BackupRequestInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a backup which will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner updateBackupConfigurationSlot(String resourceGroupName, String name, String slot, BackupRequestInner request) {
        return updateBackupConfigurationSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Description for Deletes the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteBackupConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.deleteBackupConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        return deleteBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteBackupConfigurationSlot(String resourceGroupName, String name, String slot) {
        deleteBackupConfigurationSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<BackupRequestInner>> getBackupConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getBackupConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BackupRequestInner> getBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        return getBackupConfigurationSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<BackupRequestInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the backup configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BackupRequestInner getBackupConfigurationSlot(String resourceGroupName, String name, String slot) {
        return getBackupConfigurationSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Replaces the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionStrings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ConnectionStringDictionaryInner>> updateConnectionStringsSlotWithResponseAsync(String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        return service.updateConnectionStringsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), connectionStrings, this.client.getApiVersion());
    }

    /**
     * Description for Replaces the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionStrings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ConnectionStringDictionaryInner> updateConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        return updateConnectionStringsSlotWithResponseAsync(resourceGroupName, name, slot, connectionStrings)
            .flatMap((SimpleResponse<ConnectionStringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Replaces the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionStrings String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner updateConnectionStringsSlot(String resourceGroupName, String name, String slot, ConnectionStringDictionaryInner connectionStrings) {
        return updateConnectionStringsSlotAsync(resourceGroupName, name, slot, connectionStrings).block();
    }

    /**
     * Description for Gets the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ConnectionStringDictionaryInner>> listConnectionStringsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listConnectionStringsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ConnectionStringDictionaryInner> listConnectionStringsSlotAsync(String resourceGroupName, String name, String slot) {
        return listConnectionStringsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<ConnectionStringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the connection strings of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ConnectionStringDictionaryInner listConnectionStringsSlot(String resourceGroupName, String name, String slot) {
        return listConnectionStringsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteLogsConfigInner>> getDiagnosticLogsConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getDiagnosticLogsConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteLogsConfigInner> getDiagnosticLogsConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        return getDiagnosticLogsConfigurationSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SiteLogsConfigInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner getDiagnosticLogsConfigurationSlot(String resourceGroupName, String name, String slot) {
        return getDiagnosticLogsConfigurationSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteLogsConfig Configuration of App Service site logs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteLogsConfigInner>> updateDiagnosticLogsConfigSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        return service.updateDiagnosticLogsConfigSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteLogsConfig, this.client.getApiVersion());
    }

    /**
     * Description for Updates the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteLogsConfig Configuration of App Service site logs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteLogsConfigInner> updateDiagnosticLogsConfigSlotAsync(String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        return updateDiagnosticLogsConfigSlotWithResponseAsync(resourceGroupName, name, slot, siteLogsConfig)
            .flatMap((SimpleResponse<SiteLogsConfigInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the logging configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteLogsConfig Configuration of App Service site logs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteLogsConfigInner updateDiagnosticLogsConfigSlot(String resourceGroupName, String name, String slot, SiteLogsConfigInner siteLogsConfig) {
        return updateDiagnosticLogsConfigSlotAsync(resourceGroupName, name, slot, siteLogsConfig).block();
    }

    /**
     * Description for Replaces the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param metadata String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> updateMetadataSlotWithResponseAsync(String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        return service.updateMetadataSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), metadata, this.client.getApiVersion());
    }

    /**
     * Description for Replaces the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param metadata String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> updateMetadataSlotAsync(String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        return updateMetadataSlotWithResponseAsync(resourceGroupName, name, slot, metadata)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Replaces the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param metadata String dictionary resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner updateMetadataSlot(String resourceGroupName, String name, String slot, StringDictionaryInner metadata) {
        return updateMetadataSlotAsync(resourceGroupName, name, slot, metadata).block();
    }

    /**
     * Description for Gets the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> listMetadataSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listMetadataSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> listMetadataSlotAsync(String resourceGroupName, String name, String slot) {
        return listMetadataSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the metadata of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listMetadataSlot(String resourceGroupName, String name, String slot) {
        return listMetadataSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> listPublishingCredentialsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listPublishingCredentialsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserInner> listPublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = listPublishingCredentialsSlotWithResponseAsync(resourceGroupName, name, slot);
        return client.<UserInner, UserInner>getLroResultAsync(response, client.getHttpPipeline(), UserInner.class, UserInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner listPublishingCredentialsSlot(String resourceGroupName, String name, String slot) {
        return listPublishingCredentialsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param pushSettings Push settings for the App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PushSettingsInner>> updateSitePushSettingsSlotWithResponseAsync(String resourceGroupName, String name, String slot, PushSettingsInner pushSettings) {
        return service.updateSitePushSettingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), pushSettings, this.client.getApiVersion());
    }

    /**
     * Description for Updates the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param pushSettings Push settings for the App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PushSettingsInner> updateSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot, PushSettingsInner pushSettings) {
        return updateSitePushSettingsSlotWithResponseAsync(resourceGroupName, name, slot, pushSettings)
            .flatMap((SimpleResponse<PushSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param pushSettings Push settings for the App.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PushSettingsInner updateSitePushSettingsSlot(String resourceGroupName, String name, String slot, PushSettingsInner pushSettings) {
        return updateSitePushSettingsSlotAsync(resourceGroupName, name, slot, pushSettings).block();
    }

    /**
     * Description for Gets the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PushSettingsInner>> listSitePushSettingsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listSitePushSettingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PushSettingsInner> listSitePushSettingsSlotAsync(String resourceGroupName, String name, String slot) {
        return listSitePushSettingsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<PushSettingsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Push settings associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PushSettingsInner listSitePushSettingsSlot(String resourceGroupName, String name, String slot) {
        return listSitePushSettingsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> getConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        return getConfigurationSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the configuration of an app, such as platform version and bitness, default documents, virtual applications, Always On, etc.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner getConfigurationSlot(String resourceGroupName, String name, String slot) {
        return getConfigurationSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> createOrUpdateConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        return service.createOrUpdateConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteConfig, this.client.getApiVersion());
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> createOrUpdateConfigurationSlotAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        return createOrUpdateConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, siteConfig)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner createOrUpdateConfigurationSlot(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        return createOrUpdateConfigurationSlotAsync(resourceGroupName, name, slot, siteConfig).block();
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> updateConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        return service.updateConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteConfig, this.client.getApiVersion());
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> updateConfigurationSlotAsync(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        return updateConfigurationSlotWithResponseAsync(resourceGroupName, name, slot, siteConfig)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteConfig Web app configuration ARM resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner updateConfigurationSlot(String resourceGroupName, String name, String slot, SiteConfigResourceInner siteConfig) {
        return updateConfigurationSlotAsync(resourceGroupName, name, slot, siteConfig).block();
    }

    /**
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigurationSnapshotInfoInner>> listConfigurationSnapshotInfoSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listConfigurationSnapshotInfoSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteConfigurationSnapshotInfoInner> listConfigurationSnapshotInfoSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listConfigurationSnapshotInfoSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listConfigurationSnapshotInfoSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list contains a timestamp and the ID of the snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteConfigurationSnapshotInfoInner> listConfigurationSnapshotInfoSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listConfigurationSnapshotInfoSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteConfigResourceInner>> getConfigurationSnapshotSlotWithResponseAsync(String resourceGroupName, String name, String snapshotId, String slot) {
        return service.getConfigurationSnapshotSlot(this.client.getHost(), resourceGroupName, name, snapshotId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteConfigResourceInner> getConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot) {
        return getConfigurationSnapshotSlotWithResponseAsync(resourceGroupName, name, snapshotId, slot)
            .flatMap((SimpleResponse<SiteConfigResourceInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a snapshot of the configuration of an app at a previous point in time.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteConfigResourceInner getConfigurationSnapshotSlot(String resourceGroupName, String name, String snapshotId, String slot) {
        return getConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).block();
    }

    /**
     * Description for Reverts the configuration of an app to a previous snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> recoverSiteConfigurationSnapshotSlotWithResponseAsync(String resourceGroupName, String name, String snapshotId, String slot) {
        return service.recoverSiteConfigurationSnapshotSlot(this.client.getHost(), resourceGroupName, name, snapshotId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Reverts the configuration of an app to a previous snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recoverSiteConfigurationSnapshotSlotAsync(String resourceGroupName, String name, String snapshotId, String slot) {
        return recoverSiteConfigurationSnapshotSlotWithResponseAsync(resourceGroupName, name, snapshotId, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Reverts the configuration of an app to a previous snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param snapshotId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void recoverSiteConfigurationSnapshotSlot(String resourceGroupName, String name, String snapshotId, String slot) {
        recoverSiteConfigurationSnapshotSlotAsync(resourceGroupName, name, snapshotId, slot).block();
    }

    /**
     * Description for Gets the last lines of docker logs for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getWebSiteContainerLogsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getWebSiteContainerLogsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the last lines of docker logs for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getWebSiteContainerLogsSlotAsync(String resourceGroupName, String name, String slot) {
        return getWebSiteContainerLogsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMapMany(StreamResponse::getValue);}

    /**
     * Description for Gets the last lines of docker logs for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream getWebSiteContainerLogsSlot(String resourceGroupName, String name, String slot) {
        return getWebSiteContainerLogsSlotAsync(resourceGroupName, name, slot)
            .map(ByteBufferBackedInputStream::new)
            .collectList()
            .map(list -> new SequenceInputStream(Collections.enumeration(list)))
            .block();
    }

    /**
     * Description for Gets the ZIP archived docker log files for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> getContainerLogsZipSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getContainerLogsZipSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the ZIP archived docker log files for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> getContainerLogsZipSlotAsync(String resourceGroupName, String name, String slot) {
        return getContainerLogsZipSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMapMany(StreamResponse::getValue);}

    /**
     * Description for Gets the ZIP archived docker log files for the given site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream getContainerLogsZipSlot(String resourceGroupName, String name, String slot) {
        return getContainerLogsZipSlotAsync(resourceGroupName, name, slot)
            .map(ByteBufferBackedInputStream::new)
            .collectList()
            .map(list -> new SequenceInputStream(Collections.enumeration(list)))
            .block();
    }

    /**
     * Description for List continuous web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ContinuousWebJobInner>> listContinuousWebJobsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listContinuousWebJobsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List continuous web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ContinuousWebJobInner> listContinuousWebJobsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listContinuousWebJobsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listContinuousWebJobsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List continuous web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ContinuousWebJobInner> listContinuousWebJobsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listContinuousWebJobsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ContinuousWebJobInner>> getContinuousWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.getContinuousWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ContinuousWebJobInner> getContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return getContinuousWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((SimpleResponse<ContinuousWebJobInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ContinuousWebJobInner getContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        return getContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteContinuousWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.deleteContinuousWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return deleteContinuousWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        deleteContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for Start a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startContinuousWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.startContinuousWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return startContinuousWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Start a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        startContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopContinuousWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.stopContinuousWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopContinuousWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return stopContinuousWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stop a continuous web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopContinuousWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        stopContinuousWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for List deployments for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentInner>> listDeploymentsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listDeploymentsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List deployments for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DeploymentInner> listDeploymentsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listDeploymentsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listDeploymentsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List deployments for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DeploymentInner> listDeploymentsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listDeploymentsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DeploymentInner>> getDeploymentSlotWithResponseAsync(String resourceGroupName, String name, String id, String slot) {
        return service.getDeploymentSlot(this.client.getHost(), resourceGroupName, name, id, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentInner> getDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot) {
        return getDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot)
            .flatMap((SimpleResponse<DeploymentInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner getDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        return getDeploymentSlotAsync(resourceGroupName, name, id, slot).block();
    }

    /**
     * Description for Create a deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @param deployment User credentials used for publishing activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DeploymentInner>> createDeploymentSlotWithResponseAsync(String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        return service.createDeploymentSlot(this.client.getHost(), resourceGroupName, name, id, slot, this.client.getSubscriptionId(), deployment, this.client.getApiVersion());
    }

    /**
     * Description for Create a deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @param deployment User credentials used for publishing activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentInner> createDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        return createDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot, deployment)
            .flatMap((SimpleResponse<DeploymentInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Create a deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @param deployment User credentials used for publishing activity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner createDeploymentSlot(String resourceGroupName, String name, String id, String slot, DeploymentInner deployment) {
        return createDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment).block();
    }

    /**
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDeploymentSlotWithResponseAsync(String resourceGroupName, String name, String id, String slot) {
        return service.deleteDeploymentSlot(this.client.getHost(), resourceGroupName, name, id, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot) {
        return deleteDeploymentSlotWithResponseAsync(resourceGroupName, name, id, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a deployment by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDeploymentSlot(String resourceGroupName, String name, String id, String slot) {
        deleteDeploymentSlotAsync(resourceGroupName, name, id, slot).block();
    }

    /**
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DeploymentInner>> listDeploymentLogSlotWithResponseAsync(String resourceGroupName, String name, String id, String slot) {
        return service.listDeploymentLogSlot(this.client.getHost(), resourceGroupName, name, id, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DeploymentInner> listDeploymentLogSlotAsync(String resourceGroupName, String name, String id, String slot) {
        return listDeploymentLogSlotWithResponseAsync(resourceGroupName, name, id, slot)
            .flatMap((SimpleResponse<DeploymentInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for List deployment log for specific deployment for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeploymentInner listDeploymentLogSlot(String resourceGroupName, String name, String id, String slot) {
        return listDeploymentLogSlotAsync(resourceGroupName, name, id, slot).block();
    }

    /**
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RestoreRequestInner>> discoverBackupSlotWithResponseAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return service.discoverBackupSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RestoreRequestInner> discoverBackupSlotAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return discoverBackupSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap((SimpleResponse<RestoreRequestInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Discovers an existing app backup that can be restored from a blob in Azure storage. Use this to get information about the databases stored in a backup.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestoreRequestInner discoverBackupSlot(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return discoverBackupSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Description for Lists ownership identifiers for domain associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<IdentifierInner>> listDomainOwnershipIdentifiersSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listDomainOwnershipIdentifiersSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Lists ownership identifiers for domain associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<IdentifierInner> listDomainOwnershipIdentifiersSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listDomainOwnershipIdentifiersSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listDomainOwnershipIdentifiersSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Lists ownership identifiers for domain associated with web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<IdentifierInner> listDomainOwnershipIdentifiersSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listDomainOwnershipIdentifiersSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get domain ownership identifier for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<IdentifierInner>> getDomainOwnershipIdentifierSlotWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        return service.getDomainOwnershipIdentifierSlot(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get domain ownership identifier for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IdentifierInner> getDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        return getDomainOwnershipIdentifierSlotWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot)
            .flatMap((SimpleResponse<IdentifierInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get domain ownership identifier for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IdentifierInner getDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        return getDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).block();
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<IdentifierInner>> createOrUpdateDomainOwnershipIdentifierSlotWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        return service.createOrUpdateDomainOwnershipIdentifierSlot(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, slot, this.client.getSubscriptionId(), domainOwnershipIdentifier, this.client.getApiVersion());
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IdentifierInner> createOrUpdateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        return createOrUpdateDomainOwnershipIdentifierSlotWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier)
            .flatMap((SimpleResponse<IdentifierInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IdentifierInner createOrUpdateDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        return createOrUpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier).block();
    }

    /**
     * Description for Deletes a domain ownership identifier for a web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteDomainOwnershipIdentifierSlotWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        return service.deleteDomainOwnershipIdentifierSlot(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a domain ownership identifier for a web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        return deleteDomainOwnershipIdentifierSlotWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a domain ownership identifier for a web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot) {
        deleteDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot).block();
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<IdentifierInner>> updateDomainOwnershipIdentifierSlotWithResponseAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        return service.updateDomainOwnershipIdentifierSlot(this.client.getHost(), resourceGroupName, name, domainOwnershipIdentifierName, slot, this.client.getSubscriptionId(), domainOwnershipIdentifier, this.client.getApiVersion());
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<IdentifierInner> updateDomainOwnershipIdentifierSlotAsync(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        return updateDomainOwnershipIdentifierSlotWithResponseAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier)
            .flatMap((SimpleResponse<IdentifierInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a domain ownership identifier for web app, or updates an existing ownership identifier.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param domainOwnershipIdentifierName 
     * @param slot 
     * @param domainOwnershipIdentifier A domain specific resource identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public IdentifierInner updateDomainOwnershipIdentifierSlot(String resourceGroupName, String name, String domainOwnershipIdentifierName, String slot, IdentifierInner domainOwnershipIdentifier) {
        return updateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, domainOwnershipIdentifier).block();
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> getMSDeployStatusSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getMSDeployStatusSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> getMSDeployStatusSlotAsync(String resourceGroupName, String name, String slot) {
        return getMSDeployStatusSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner getMSDeployStatusSlot(String resourceGroupName, String name, String slot) {
        return getMSDeployStatusSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createMSDeployOperationSlotWithResponseAsync(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        return service.createMSDeployOperationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> createMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createMSDeployOperationSlotWithResponseAsync(resourceGroupName, name, slot, mSDeploy);
        return client.<MSDeployStatusInner, MSDeployStatusInner>getLroResultAsync(response, client.getHttpPipeline(), MSDeployStatusInner.class, MSDeployStatusInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner createMSDeployOperationSlot(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        return createMSDeployOperationSlotAsync(resourceGroupName, name, slot, mSDeploy).block();
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployLogInner>> getMSDeployLogSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getMSDeployLogSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployLogInner> getMSDeployLogSlotAsync(String resourceGroupName, String name, String slot) {
        return getMSDeployLogSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<MSDeployLogInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployLogInner getMSDeployLogSlot(String resourceGroupName, String name, String slot) {
        return getMSDeployLogSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for List the functions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<FunctionEnvelopeInner>> listInstanceFunctionsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listInstanceFunctionsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the functions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<FunctionEnvelopeInner> listInstanceFunctionsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listInstanceFunctionsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listInstanceFunctionsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the functions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<FunctionEnvelopeInner> listInstanceFunctionsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listInstanceFunctionsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<String>> getFunctionsAdminTokenSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getFunctionsAdminTokenSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> getFunctionsAdminTokenSlotAsync(String resourceGroupName, String name, String slot) {
        return getFunctionsAdminTokenSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<String> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Fetch a short lived token that can be exchanged for a master key.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getFunctionsAdminTokenSlot(String resourceGroupName, String name, String slot) {
        return getFunctionsAdminTokenSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Get function information by its ID for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionEnvelopeInner>> getInstanceFunctionSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String slot) {
        return service.getInstanceFunctionSlot(this.client.getHost(), resourceGroupName, name, functionName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get function information by its ID for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionEnvelopeInner> getInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        return getInstanceFunctionSlotWithResponseAsync(resourceGroupName, name, functionName, slot)
            .flatMap((SimpleResponse<FunctionEnvelopeInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get function information by its ID for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionEnvelopeInner getInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot) {
        return getInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot).block();
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createInstanceFunctionSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        return service.createInstanceFunctionSlot(this.client.getHost(), resourceGroupName, name, functionName, slot, this.client.getSubscriptionId(), functionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionEnvelopeInner> createInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createInstanceFunctionSlotWithResponseAsync(resourceGroupName, name, functionName, slot, functionEnvelope);
        return client.<FunctionEnvelopeInner, FunctionEnvelopeInner>getLroResultAsync(response, client.getHttpPipeline(), FunctionEnvelopeInner.class, FunctionEnvelopeInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionEnvelopeInner createInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        return createInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot, functionEnvelope).block();
    }

    /**
     * Description for Delete a function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteInstanceFunctionSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String slot) {
        return service.deleteInstanceFunctionSlot(this.client.getHost(), resourceGroupName, name, functionName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        return deleteInstanceFunctionSlotWithResponseAsync(resourceGroupName, name, functionName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot) {
        deleteInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot).block();
    }

    /**
     * Description for Add or update a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param slot 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<KeyInfoInner>> createOrUpdateFunctionSecretSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String keyName, String slot, KeyInfoInner key) {
        return service.createOrUpdateFunctionSecretSlot(this.client.getHost(), resourceGroupName, name, functionName, keyName, slot, this.client.getSubscriptionId(), key, this.client.getApiVersion());
    }

    /**
     * Description for Add or update a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param slot 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyInfoInner> createOrUpdateFunctionSecretSlotAsync(String resourceGroupName, String name, String functionName, String keyName, String slot, KeyInfoInner key) {
        return createOrUpdateFunctionSecretSlotWithResponseAsync(resourceGroupName, name, functionName, keyName, slot, key)
            .flatMap((SimpleResponse<KeyInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Add or update a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param slot 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyInfoInner createOrUpdateFunctionSecretSlot(String resourceGroupName, String name, String functionName, String keyName, String slot, KeyInfoInner key) {
        return createOrUpdateFunctionSecretSlotAsync(resourceGroupName, name, functionName, keyName, slot, key).block();
    }

    /**
     * Description for Delete a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFunctionSecretSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String keyName, String slot) {
        return service.deleteFunctionSecretSlot(this.client.getHost(), resourceGroupName, name, functionName, keyName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFunctionSecretSlotAsync(String resourceGroupName, String name, String functionName, String keyName, String slot) {
        return deleteFunctionSecretSlotWithResponseAsync(resourceGroupName, name, functionName, keyName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a function secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param keyName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteFunctionSecretSlot(String resourceGroupName, String name, String functionName, String keyName, String slot) {
        deleteFunctionSecretSlotAsync(resourceGroupName, name, functionName, keyName, slot).block();
    }

    /**
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StringDictionaryInner>> listFunctionKeysSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String slot) {
        return service.listFunctionKeysSlot(this.client.getHost(), resourceGroupName, name, functionName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StringDictionaryInner> listFunctionKeysSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        return listFunctionKeysSlotWithResponseAsync(resourceGroupName, name, functionName, slot)
            .flatMap((SimpleResponse<StringDictionaryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get function keys for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StringDictionaryInner listFunctionKeysSlot(String resourceGroupName, String name, String functionName, String slot) {
        return listFunctionKeysSlotAsync(resourceGroupName, name, functionName, slot).block();
    }

    /**
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionSecretsInner>> listFunctionSecretsSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String slot) {
        return service.listFunctionSecretsSlot(this.client.getHost(), resourceGroupName, name, functionName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionSecretsInner> listFunctionSecretsSlotAsync(String resourceGroupName, String name, String functionName, String slot) {
        return listFunctionSecretsSlotWithResponseAsync(resourceGroupName, name, functionName, slot)
            .flatMap((SimpleResponse<FunctionSecretsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get function secrets for a function in a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionSecretsInner listFunctionSecretsSlot(String resourceGroupName, String name, String functionName, String slot) {
        return listFunctionSecretsSlotAsync(resourceGroupName, name, functionName, slot).block();
    }

    /**
     * Description for Get host secrets for a function app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HostKeysInner>> listHostKeysSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listHostKeysSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get host secrets for a function app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HostKeysInner> listHostKeysSlotAsync(String resourceGroupName, String name, String slot) {
        return listHostKeysSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<HostKeysInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get host secrets for a function app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostKeysInner listHostKeysSlot(String resourceGroupName, String name, String slot) {
        return listHostKeysSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> listSyncStatusSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listSyncStatusSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> listSyncStatusSlotAsync(String resourceGroupName, String name, String slot) {
        return listSyncStatusSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void listSyncStatusSlot(String resourceGroupName, String name, String slot) {
        listSyncStatusSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> syncFunctionsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.syncFunctionsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> syncFunctionsSlotAsync(String resourceGroupName, String name, String slot) {
        return syncFunctionsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void syncFunctionsSlot(String resourceGroupName, String name, String slot) {
        syncFunctionsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Add or update a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param slot 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<KeyInfoInner>> createOrUpdateHostSecretSlotWithResponseAsync(String resourceGroupName, String name, String keyType, String keyName, String slot, KeyInfoInner key) {
        return service.createOrUpdateHostSecretSlot(this.client.getHost(), resourceGroupName, name, keyType, keyName, slot, this.client.getSubscriptionId(), key, this.client.getApiVersion());
    }

    /**
     * Description for Add or update a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param slot 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<KeyInfoInner> createOrUpdateHostSecretSlotAsync(String resourceGroupName, String name, String keyType, String keyName, String slot, KeyInfoInner key) {
        return createOrUpdateHostSecretSlotWithResponseAsync(resourceGroupName, name, keyType, keyName, slot, key)
            .flatMap((SimpleResponse<KeyInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Add or update a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param slot 
     * @param key Function key info.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public KeyInfoInner createOrUpdateHostSecretSlot(String resourceGroupName, String name, String keyType, String keyName, String slot, KeyInfoInner key) {
        return createOrUpdateHostSecretSlotAsync(resourceGroupName, name, keyType, keyName, slot, key).block();
    }

    /**
     * Description for Delete a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteHostSecretSlotWithResponseAsync(String resourceGroupName, String name, String keyType, String keyName, String slot) {
        return service.deleteHostSecretSlot(this.client.getHost(), resourceGroupName, name, keyType, keyName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteHostSecretSlotAsync(String resourceGroupName, String name, String keyType, String keyName, String slot) {
        return deleteHostSecretSlotWithResponseAsync(resourceGroupName, name, keyType, keyName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a host level secret.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param keyType 
     * @param keyName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteHostSecretSlot(String resourceGroupName, String name, String keyType, String keyName, String slot) {
        deleteHostSecretSlotAsync(resourceGroupName, name, keyType, keyName, slot).block();
    }

    /**
     * Description for Get hostname bindings for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<HostNameBindingInner>> listHostNameBindingsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listHostNameBindingsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get hostname bindings for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<HostNameBindingInner> listHostNameBindingsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listHostNameBindingsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listHostNameBindingsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get hostname bindings for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HostNameBindingInner> listHostNameBindingsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listHostNameBindingsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HostNameBindingInner>> getHostNameBindingSlotWithResponseAsync(String resourceGroupName, String name, String slot, String hostName) {
        return service.getHostNameBindingSlot(this.client.getHost(), resourceGroupName, name, slot, hostName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HostNameBindingInner> getHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName) {
        return getHostNameBindingSlotWithResponseAsync(resourceGroupName, name, slot, hostName)
            .flatMap((SimpleResponse<HostNameBindingInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the named hostname binding for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostNameBindingInner getHostNameBindingSlot(String resourceGroupName, String name, String slot, String hostName) {
        return getHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).block();
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @param slot 
     * @param hostNameBinding A hostname binding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HostNameBindingInner>> createOrUpdateHostNameBindingSlotWithResponseAsync(String resourceGroupName, String name, String hostName, String slot, HostNameBindingInner hostNameBinding) {
        return service.createOrUpdateHostNameBindingSlot(this.client.getHost(), resourceGroupName, name, hostName, slot, this.client.getSubscriptionId(), hostNameBinding, this.client.getApiVersion());
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @param slot 
     * @param hostNameBinding A hostname binding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HostNameBindingInner> createOrUpdateHostNameBindingSlotAsync(String resourceGroupName, String name, String hostName, String slot, HostNameBindingInner hostNameBinding) {
        return createOrUpdateHostNameBindingSlotWithResponseAsync(resourceGroupName, name, hostName, slot, hostNameBinding)
            .flatMap((SimpleResponse<HostNameBindingInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param hostName 
     * @param slot 
     * @param hostNameBinding A hostname binding object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HostNameBindingInner createOrUpdateHostNameBindingSlot(String resourceGroupName, String name, String hostName, String slot, HostNameBindingInner hostNameBinding) {
        return createOrUpdateHostNameBindingSlotAsync(resourceGroupName, name, hostName, slot, hostNameBinding).block();
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteHostNameBindingSlotWithResponseAsync(String resourceGroupName, String name, String slot, String hostName) {
        return service.deleteHostNameBindingSlot(this.client.getHost(), resourceGroupName, name, slot, hostName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName) {
        return deleteHostNameBindingSlotWithResponseAsync(resourceGroupName, name, slot, hostName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param hostName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteHostNameBindingSlot(String resourceGroupName, String name, String slot, String hostName) {
        deleteHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName).block();
    }

    /**
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> getHybridConnectionSlotWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        return service.getHybridConnectionSlot(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> getHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        return getHybridConnectionSlotWithResponseAsync(resourceGroupName, name, namespaceName, relayName, slot)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner getHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        return getHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).block();
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> createOrUpdateHybridConnectionSlotWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        return service.createOrUpdateHybridConnectionSlot(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> createOrUpdateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        return createOrUpdateHybridConnectionSlotWithResponseAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner createOrUpdateHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        return createOrUpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Removes a Hybrid Connection from this site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteHybridConnectionSlotWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        return service.deleteHybridConnectionSlot(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Removes a Hybrid Connection from this site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        return deleteHybridConnectionSlotWithResponseAsync(resourceGroupName, name, namespaceName, relayName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Removes a Hybrid Connection from this site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot) {
        deleteHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot).block();
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> updateHybridConnectionSlotWithResponseAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        return service.updateHybridConnectionSlot(this.client.getHost(), resourceGroupName, name, namespaceName, relayName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> updateHybridConnectionSlotAsync(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        return updateHybridConnectionSlotWithResponseAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new Hybrid Connection using a Service Bus relay.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param namespaceName 
     * @param relayName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection contract. This is used to configure a Hybrid Connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner updateHybridConnectionSlot(String resourceGroupName, String name, String namespaceName, String relayName, String slot, HybridConnectionInner connectionEnvelope) {
        return updateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<HybridConnectionInner>> listHybridConnectionsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listHybridConnectionsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<HybridConnectionInner> listHybridConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        return listHybridConnectionsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<HybridConnectionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridConnectionInner listHybridConnectionsSlot(String resourceGroupName, String name, String slot) {
        return listHybridConnectionsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> listRelayServiceConnectionsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listRelayServiceConnectionsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> listRelayServiceConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        return listRelayServiceConnectionsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner listRelayServiceConnectionsSlot(String resourceGroupName, String name, String slot) {
        return listRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets a hybrid connection configuration by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> getRelayServiceConnectionSlotWithResponseAsync(String resourceGroupName, String name, String entityName, String slot) {
        return service.getRelayServiceConnectionSlot(this.client.getHost(), resourceGroupName, name, entityName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a hybrid connection configuration by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> getRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot) {
        return getRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a hybrid connection configuration by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner getRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot) {
        return getRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).block();
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> createOrUpdateRelayServiceConnectionSlotWithResponseAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        return service.createOrUpdateRelayServiceConnectionSlot(this.client.getHost(), resourceGroupName, name, entityName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> createOrUpdateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner createOrUpdateRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        return createOrUpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Deletes a relay service connection by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRelayServiceConnectionSlotWithResponseAsync(String resourceGroupName, String name, String entityName, String slot) {
        return service.deleteRelayServiceConnectionSlot(this.client.getHost(), resourceGroupName, name, entityName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a relay service connection by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot) {
        return deleteRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a relay service connection by its name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot) {
        deleteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot).block();
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RelayServiceConnectionEntityInner>> updateRelayServiceConnectionSlotWithResponseAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        return service.updateRelayServiceConnectionSlot(this.client.getHost(), resourceGroupName, name, entityName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RelayServiceConnectionEntityInner> updateRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateRelayServiceConnectionSlotWithResponseAsync(resourceGroupName, name, entityName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<RelayServiceConnectionEntityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param entityName 
     * @param slot 
     * @param connectionEnvelope Hybrid Connection for an App Service app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RelayServiceConnectionEntityInner updateRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, RelayServiceConnectionEntityInner connectionEnvelope) {
        return updateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInstanceInner>> listInstanceIdentifiersSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listInstanceIdentifiersSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteInstanceInner> listInstanceIdentifiersSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listInstanceIdentifiersSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listInstanceIdentifiersSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteInstanceInner> listInstanceIdentifiersSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listInstanceIdentifiersSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<WebSiteInstanceStatusInner>> getInstanceInfoSlotWithResponseAsync(String resourceGroupName, String name, String instanceId, String slot) {
        return service.getInstanceInfoSlot(this.client.getHost(), resourceGroupName, name, instanceId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WebSiteInstanceStatusInner> getInstanceInfoSlotAsync(String resourceGroupName, String name, String instanceId, String slot) {
        return getInstanceInfoSlotWithResponseAsync(resourceGroupName, name, instanceId, slot)
            .flatMap((SimpleResponse<WebSiteInstanceStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets all scale-out instances of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebSiteInstanceStatusInner getInstanceInfoSlot(String resourceGroupName, String name, String instanceId, String slot) {
        return getInstanceInfoSlotAsync(resourceGroupName, name, instanceId, slot).block();
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> getInstanceMsDeployStatusSlotWithResponseAsync(String resourceGroupName, String name, String slot, String instanceId) {
        return service.getInstanceMsDeployStatusSlot(this.client.getHost(), resourceGroupName, name, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> getInstanceMsDeployStatusSlotAsync(String resourceGroupName, String name, String slot, String instanceId) {
        return getInstanceMsDeployStatusSlotWithResponseAsync(resourceGroupName, name, slot, instanceId)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the status of the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner getInstanceMsDeployStatusSlot(String resourceGroupName, String name, String slot, String instanceId) {
        return getInstanceMsDeployStatusSlotAsync(resourceGroupName, name, slot, instanceId).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createInstanceMSDeployOperationSlotWithResponseAsync(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        return service.createInstanceMSDeployOperationSlot(this.client.getHost(), resourceGroupName, name, slot, instanceId, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> createInstanceMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createInstanceMSDeployOperationSlotWithResponseAsync(resourceGroupName, name, slot, instanceId, mSDeploy);
        return client.<MSDeployStatusInner, MSDeployStatusInner>getLroResultAsync(response, client.getHttpPipeline(), MSDeployStatusInner.class, MSDeployStatusInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner createInstanceMSDeployOperationSlot(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        return createInstanceMSDeployOperationSlotAsync(resourceGroupName, name, slot, instanceId, mSDeploy).block();
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployLogInner>> getInstanceMSDeployLogSlotWithResponseAsync(String resourceGroupName, String name, String slot, String instanceId) {
        return service.getInstanceMSDeployLogSlot(this.client.getHost(), resourceGroupName, name, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployLogInner> getInstanceMSDeployLogSlotAsync(String resourceGroupName, String name, String slot, String instanceId) {
        return getInstanceMSDeployLogSlotWithResponseAsync(resourceGroupName, name, slot, instanceId)
            .flatMap((SimpleResponse<MSDeployLogInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the MSDeploy Log for the last MSDeploy operation.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployLogInner getInstanceMSDeployLogSlot(String resourceGroupName, String name, String slot, String instanceId) {
        return getInstanceMSDeployLogSlotAsync(resourceGroupName, name, slot, instanceId).block();
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listInstanceProcessesSlotSinglePageAsync(String resourceGroupName, String name, String slot, String instanceId) {
        return service.listInstanceProcessesSlot(this.client.getHost(), resourceGroupName, name, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessInfoInner> listInstanceProcessesSlotAsync(String resourceGroupName, String name, String slot, String instanceId) {
        return new PagedFlux<>(
            () -> listInstanceProcessesSlotSinglePageAsync(resourceGroupName, name, slot, instanceId),
            nextLink -> listInstanceProcessesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessInfoInner> listInstanceProcessesSlot(String resourceGroupName, String name, String slot, String instanceId) {
        return new PagedIterable<>(listInstanceProcessesSlotAsync(resourceGroupName, name, slot, instanceId));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessInfoInner>> getInstanceProcessSlotWithResponseAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return service.getInstanceProcessSlot(this.client.getHost(), resourceGroupName, name, processId, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessInfoInner> getInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return getInstanceProcessSlotWithResponseAsync(resourceGroupName, name, processId, slot, instanceId)
            .flatMap((SimpleResponse<ProcessInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessInfoInner getInstanceProcessSlot(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return getInstanceProcessSlotAsync(resourceGroupName, name, processId, slot, instanceId).block();
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteInstanceProcessSlotWithResponseAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return service.deleteInstanceProcessSlot(this.client.getHost(), resourceGroupName, name, processId, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteInstanceProcessSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return deleteInstanceProcessSlotWithResponseAsync(resourceGroupName, name, processId, slot, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteInstanceProcessSlot(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        deleteInstanceProcessSlotAsync(resourceGroupName, name, processId, slot, instanceId).block();
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getInstanceProcessDumpSlotWithResponseAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return service.getInstanceProcessDumpSlot(this.client.getHost(), resourceGroupName, name, processId, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getInstanceProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return getInstanceProcessDumpSlotWithResponseAsync(resourceGroupName, name, processId, slot, instanceId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getInstanceProcessDumpSlot(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        getInstanceProcessDumpSlotAsync(resourceGroupName, name, processId, slot, instanceId).block();
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listInstanceProcessModulesSlotSinglePageAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return service.listInstanceProcessModulesSlot(this.client.getHost(), resourceGroupName, name, processId, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessModuleInfoInner> listInstanceProcessModulesSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return new PagedFlux<>(
            () -> listInstanceProcessModulesSlotSinglePageAsync(resourceGroupName, name, processId, slot, instanceId),
            nextLink -> listInstanceProcessModulesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessModuleInfoInner> listInstanceProcessModulesSlot(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return new PagedIterable<>(listInstanceProcessModulesSlotAsync(resourceGroupName, name, processId, slot, instanceId));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessModuleInfoInner>> getInstanceProcessModuleSlotWithResponseAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId) {
        return service.getInstanceProcessModuleSlot(this.client.getHost(), resourceGroupName, name, processId, baseAddress, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessModuleInfoInner> getInstanceProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId) {
        return getInstanceProcessModuleSlotWithResponseAsync(resourceGroupName, name, processId, baseAddress, slot, instanceId)
            .flatMap((SimpleResponse<ProcessModuleInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessModuleInfoInner getInstanceProcessModuleSlot(String resourceGroupName, String name, String processId, String baseAddress, String slot, String instanceId) {
        return getInstanceProcessModuleSlotAsync(resourceGroupName, name, processId, baseAddress, slot, instanceId).block();
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listInstanceProcessThreadsSlotSinglePageAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return service.listInstanceProcessThreadsSlot(this.client.getHost(), resourceGroupName, name, processId, slot, instanceId, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessThreadInfoInner> listInstanceProcessThreadsSlotAsync(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return new PagedFlux<>(
            () -> listInstanceProcessThreadsSlotSinglePageAsync(resourceGroupName, name, processId, slot, instanceId),
            nextLink -> listInstanceProcessThreadsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @param instanceId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessThreadInfoInner> listInstanceProcessThreadsSlot(String resourceGroupName, String name, String processId, String slot, String instanceId) {
        return new PagedIterable<>(listInstanceProcessThreadsSlotAsync(resourceGroupName, name, processId, slot, instanceId));
    }

    /**
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteCloneabilityInner>> isCloneableSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.isCloneableSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteCloneabilityInner> isCloneableSlotAsync(String resourceGroupName, String name, String slot) {
        return isCloneableSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SiteCloneabilityInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Shows whether an app can be cloned to another resource group or subscription.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteCloneabilityInner isCloneableSlot(String resourceGroupName, String name, String slot) {
        return isCloneableSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listSiteBackupsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listSiteBackupsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BackupItemInner> listSiteBackupsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listSiteBackupsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listSiteBackupsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets existing backups of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BackupItemInner> listSiteBackupsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listSiteBackupsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionSecretsInner>> listSyncFunctionTriggersSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listSyncFunctionTriggersSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionSecretsInner> listSyncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot) {
        return listSyncFunctionTriggersSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<FunctionSecretsInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for This is to allow calling via powershell and ARM template.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionSecretsInner listSyncFunctionTriggersSlot(String resourceGroupName, String name, String slot) {
        return listSyncFunctionTriggersSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MigrateMySqlStatusInner>> getMigrateMySqlStatusSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getMigrateMySqlStatusSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MigrateMySqlStatusInner> getMigrateMySqlStatusSlotAsync(String resourceGroupName, String name, String slot) {
        return getMigrateMySqlStatusSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<MigrateMySqlStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Returns the status of MySql in app migration, if one is active, and whether or not MySql in app is enabled.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MigrateMySqlStatusInner getMigrateMySqlStatusSlot(String resourceGroupName, String name, String slot) {
        return getMigrateMySqlStatusSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets a Swift Virtual Network connection.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SwiftVirtualNetworkInner>> getSwiftVirtualNetworkConnectionSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getSwiftVirtualNetworkConnectionSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a Swift Virtual Network connection.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SwiftVirtualNetworkInner> getSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot) {
        return getSwiftVirtualNetworkConnectionSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SwiftVirtualNetworkInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a Swift Virtual Network connection.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SwiftVirtualNetworkInner getSwiftVirtualNetworkConnectionSlot(String resourceGroupName, String name, String slot) {
        return getSwiftVirtualNetworkConnectionSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SwiftVirtualNetworkInner>> createOrUpdateSwiftVirtualNetworkConnectionSlotWithResponseAsync(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        return service.createOrUpdateSwiftVirtualNetworkConnectionSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SwiftVirtualNetworkInner> createOrUpdateSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        return createOrUpdateSwiftVirtualNetworkConnectionSlotWithResponseAsync(resourceGroupName, name, slot, connectionEnvelope)
            .flatMap((SimpleResponse<SwiftVirtualNetworkInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SwiftVirtualNetworkInner createOrUpdateSwiftVirtualNetworkConnectionSlot(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        return createOrUpdateSwiftVirtualNetworkConnectionSlotAsync(resourceGroupName, name, slot, connectionEnvelope).block();
    }

    /**
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSwiftVirtualNetworkSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.deleteSwiftVirtualNetworkSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSwiftVirtualNetworkSlotAsync(String resourceGroupName, String name, String slot) {
        return deleteSwiftVirtualNetworkSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSwiftVirtualNetworkSlot(String resourceGroupName, String name, String slot) {
        deleteSwiftVirtualNetworkSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SwiftVirtualNetworkInner>> updateSwiftVirtualNetworkConnectionSlotWithResponseAsync(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        return service.updateSwiftVirtualNetworkConnectionSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SwiftVirtualNetworkInner> updateSwiftVirtualNetworkConnectionSlotAsync(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        return updateSwiftVirtualNetworkConnectionSlotWithResponseAsync(resourceGroupName, name, slot, connectionEnvelope)
            .flatMap((SimpleResponse<SwiftVirtualNetworkInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Integrates this Web App with a Virtual Network. This requires that 1) "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has already been delegated, and is not
     * in use by another App Service Plan other than the one this App is in.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param connectionEnvelope Swift Virtual Network Contract. This is used to enable the new Swift way of doing virtual network integration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SwiftVirtualNetworkInner updateSwiftVirtualNetworkConnectionSlot(String resourceGroupName, String name, String slot, SwiftVirtualNetworkInner connectionEnvelope) {
        return updateSwiftVirtualNetworkConnectionSlotAsync(resourceGroupName, name, slot, connectionEnvelope).block();
    }

    /**
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param view 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<NetworkFeaturesInner>> listNetworkFeaturesSlotWithResponseAsync(String resourceGroupName, String name, String view, String slot) {
        return service.listNetworkFeaturesSlot(this.client.getHost(), resourceGroupName, name, view, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param view 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<NetworkFeaturesInner> listNetworkFeaturesSlotAsync(String resourceGroupName, String name, String view, String slot) {
        return listNetworkFeaturesSlotWithResponseAsync(resourceGroupName, name, view, slot)
            .flatMap((SimpleResponse<NetworkFeaturesInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets all network features used by the app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param view 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkFeaturesInner listNetworkFeaturesSlot(String resourceGroupName, String name, String view, String slot) {
        return listNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationSlotWithResponseAsync(String resourceGroupName, String name, String operationId, String slot) {
        return service.getNetworkTraceOperationSlot(this.client.getHost(), resourceGroupName, name, operationId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTraceOperationSlotWithResponseAsync(resourceGroupName, name, operationId, slot)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTraceOperationSlot(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTraceOperationSlotAsync(resourceGroupName, name, operationId, slot).block();
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<String>> startWebSiteNetworkTraceSlotWithResponseAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.startWebSiteNetworkTraceSlot(this.client.getHost(), resourceGroupName, name, durationInSeconds, slot, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> startWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startWebSiteNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<String> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<String> startWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return startWebSiteNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<String> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String startWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site (To be deprecated).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String startWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return startWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> startWebSiteNetworkTraceOperationSlotWithResponseAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.startWebSiteNetworkTraceOperationSlot(this.client.getHost(), resourceGroupName, name, durationInSeconds, slot, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> startWebSiteNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = startWebSiteNetworkTraceOperationSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl);
        return client.<List<NetworkTraceInner>, List<NetworkTraceInner>>getLroResultAsync(response, client.getHttpPipeline(), new TypeReference<List<NetworkTraceInner>>() {}.getType(), new TypeReference<List<NetworkTraceInner>>() {}.getType())
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> startWebSiteNetworkTraceOperationSlot(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startWebSiteNetworkTraceOperationSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopWebSiteNetworkTraceSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.stopWebSiteNetworkTraceSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopWebSiteNetworkTraceSlotAsync(String resourceGroupName, String name, String slot) {
        return stopWebSiteNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopWebSiteNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        stopWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesSlotWithResponseAsync(String resourceGroupName, String name, String operationId, String slot) {
        return service.getNetworkTracesSlot(this.client.getHost(), resourceGroupName, name, operationId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTracesSlotAsync(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTracesSlotWithResponseAsync(resourceGroupName, name, operationId, slot)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTracesSlot(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTracesSlotAsync(resourceGroupName, name, operationId, slot).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTraceOperationSlotV2WithResponseAsync(String resourceGroupName, String name, String operationId, String slot) {
        return service.getNetworkTraceOperationSlotV2(this.client.getHost(), resourceGroupName, name, operationId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTraceOperationSlotV2Async(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTraceOperationSlotV2WithResponseAsync(resourceGroupName, name, operationId, slot)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTraceOperationSlotV2(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTraceOperationSlotV2Async(resourceGroupName, name, operationId, slot).block();
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> getNetworkTracesSlotV2WithResponseAsync(String resourceGroupName, String name, String operationId, String slot) {
        return service.getNetworkTracesSlotV2(this.client.getHost(), resourceGroupName, name, operationId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> getNetworkTracesSlotV2Async(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTracesSlotV2WithResponseAsync(resourceGroupName, name, operationId, slot)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named operation for a network trace capturing (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param operationId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> getNetworkTracesSlotV2(String resourceGroupName, String name, String operationId, String slot) {
        return getNetworkTracesSlotV2Async(resourceGroupName, name, operationId, slot).block();
    }

    /**
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> generateNewSitePublishingPasswordSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.generateNewSitePublishingPasswordSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> generateNewSitePublishingPasswordSlotAsync(String resourceGroupName, String name, String slot) {
        return generateNewSitePublishingPasswordSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Generates a new publishing password for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void generateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot) {
        generateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PerfMonResponseInner>> listPerfMonCountersSlotSinglePageAsync(String resourceGroupName, String name, String slot, String filter) {
        return service.listPerfMonCountersSlot(this.client.getHost(), resourceGroupName, name, slot, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PerfMonResponseInner> listPerfMonCountersSlotAsync(String resourceGroupName, String name, String slot, String filter) {
        return new PagedFlux<>(
            () -> listPerfMonCountersSlotSinglePageAsync(resourceGroupName, name, slot, filter),
            nextLink -> listPerfMonCountersSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PerfMonResponseInner> listPerfMonCountersSlotAsync(String resourceGroupName, String name, String slot) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listPerfMonCountersSlotSinglePageAsync(resourceGroupName, name, slot, filter),
            nextLink -> listPerfMonCountersSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PerfMonResponseInner> listPerfMonCountersSlot(String resourceGroupName, String name, String slot, String filter) {
        return new PagedIterable<>(listPerfMonCountersSlotAsync(resourceGroupName, name, slot, filter));
    }

    /**
     * Description for Gets perfmon counters for web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PerfMonResponseInner> listPerfMonCountersSlot(String resourceGroupName, String name, String slot) {
        final String filter = null;
        return new PagedIterable<>(listPerfMonCountersSlotAsync(resourceGroupName, name, slot, filter));
    }

    /**
     * Description for Gets web app's event logs.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SitePhpErrorLogFlagInner>> getSitePhpErrorLogFlagSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getSitePhpErrorLogFlagSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets web app's event logs.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SitePhpErrorLogFlagInner> getSitePhpErrorLogFlagSlotAsync(String resourceGroupName, String name, String slot) {
        return getSitePhpErrorLogFlagSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SitePhpErrorLogFlagInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets web app's event logs.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SitePhpErrorLogFlagInner getSitePhpErrorLogFlagSlot(String resourceGroupName, String name, String slot) {
        return getSitePhpErrorLogFlagSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets the premier add-ons of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> listPremierAddOnsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listPremierAddOnsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the premier add-ons of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> listPremierAddOnsSlotAsync(String resourceGroupName, String name, String slot) {
        return listPremierAddOnsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the premier add-ons of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner listPremierAddOnsSlot(String resourceGroupName, String name, String slot) {
        return listPremierAddOnsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> getPremierAddOnSlotWithResponseAsync(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return service.getPremierAddOnSlot(this.client.getHost(), resourceGroupName, name, premierAddOnName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> getPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return getPremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner getPremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return getPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).block();
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @param premierAddOn Premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> addPremierAddOnSlotWithResponseAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnInner premierAddOn) {
        return service.addPremierAddOnSlot(this.client.getHost(), resourceGroupName, name, premierAddOnName, slot, this.client.getSubscriptionId(), premierAddOn, this.client.getApiVersion());
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @param premierAddOn Premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> addPremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnInner premierAddOn) {
        return addPremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @param premierAddOn Premier add-on.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner addPremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnInner premierAddOn) {
        return addPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn).block();
    }

    /**
     * Description for Delete a premier add-on from an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePremierAddOnSlotWithResponseAsync(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return service.deletePremierAddOnSlot(this.client.getHost(), resourceGroupName, name, premierAddOnName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a premier add-on from an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot) {
        return deletePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a premier add-on from an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot) {
        deletePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot).block();
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @param premierAddOn ARM resource for a PremierAddOn.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PremierAddOnInner>> updatePremierAddOnSlotWithResponseAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnPatchResource premierAddOn) {
        return service.updatePremierAddOnSlot(this.client.getHost(), resourceGroupName, name, premierAddOnName, slot, this.client.getSubscriptionId(), premierAddOn, this.client.getApiVersion());
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @param premierAddOn ARM resource for a PremierAddOn.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PremierAddOnInner> updatePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnPatchResource premierAddOn) {
        return updatePremierAddOnSlotWithResponseAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn)
            .flatMap((SimpleResponse<PremierAddOnInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates a named add-on of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param premierAddOnName 
     * @param slot 
     * @param premierAddOn ARM resource for a PremierAddOn.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PremierAddOnInner updatePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, PremierAddOnPatchResource premierAddOn) {
        return updatePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot, premierAddOn).block();
    }

    /**
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PrivateAccessInner>> getPrivateAccessSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getPrivateAccessSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrivateAccessInner> getPrivateAccessSlotAsync(String resourceGroupName, String name, String slot) {
        return getPrivateAccessSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<PrivateAccessInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateAccessInner getPrivateAccessSlot(String resourceGroupName, String name, String slot) {
        return getPrivateAccessSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param access Description of the parameters of Private Access for a Web Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PrivateAccessInner>> putPrivateAccessVnetSlotWithResponseAsync(String resourceGroupName, String name, String slot, PrivateAccessInner access) {
        return service.putPrivateAccessVnetSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), access, this.client.getApiVersion());
    }

    /**
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param access Description of the parameters of Private Access for a Web Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrivateAccessInner> putPrivateAccessVnetSlotAsync(String resourceGroupName, String name, String slot, PrivateAccessInner access) {
        return putPrivateAccessVnetSlotWithResponseAsync(resourceGroupName, name, slot, access)
            .flatMap((SimpleResponse<PrivateAccessInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Sets data around private site access enablement and authorized Virtual Networks that can access the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param access Description of the parameters of Private Access for a Web Site.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrivateAccessInner putPrivateAccessVnetSlot(String resourceGroupName, String name, String slot, PrivateAccessInner access) {
        return putPrivateAccessVnetSlotAsync(resourceGroupName, name, slot, access).block();
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listProcessesSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listProcessesSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessInfoInner> listProcessesSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listProcessesSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listProcessesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get list of processes for a web site, or a deployment slot, or for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessInfoInner> listProcessesSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listProcessesSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessInfoInner>> getProcessSlotWithResponseAsync(String resourceGroupName, String name, String processId, String slot) {
        return service.getProcessSlot(this.client.getHost(), resourceGroupName, name, processId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessInfoInner> getProcessSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        return getProcessSlotWithResponseAsync(resourceGroupName, name, processId, slot)
            .flatMap((SimpleResponse<ProcessInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessInfoInner getProcessSlot(String resourceGroupName, String name, String processId, String slot) {
        return getProcessSlotAsync(resourceGroupName, name, processId, slot).block();
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteProcessSlotWithResponseAsync(String resourceGroupName, String name, String processId, String slot) {
        return service.deleteProcessSlot(this.client.getHost(), resourceGroupName, name, processId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteProcessSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        return deleteProcessSlotWithResponseAsync(resourceGroupName, name, processId, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteProcessSlot(String resourceGroupName, String name, String processId, String slot) {
        deleteProcessSlotAsync(resourceGroupName, name, processId, slot).block();
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getProcessDumpSlotWithResponseAsync(String resourceGroupName, String name, String processId, String slot) {
        return service.getProcessDumpSlot(this.client.getHost(), resourceGroupName, name, processId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getProcessDumpSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        return getProcessDumpSlotWithResponseAsync(resourceGroupName, name, processId, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getProcessDumpSlot(String resourceGroupName, String name, String processId, String slot) {
        getProcessDumpSlotAsync(resourceGroupName, name, processId, slot).block();
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listProcessModulesSlotSinglePageAsync(String resourceGroupName, String name, String processId, String slot) {
        return service.listProcessModulesSlot(this.client.getHost(), resourceGroupName, name, processId, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessModuleInfoInner> listProcessModulesSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        return new PagedFlux<>(
            () -> listProcessModulesSlotSinglePageAsync(resourceGroupName, name, processId, slot),
            nextLink -> listProcessModulesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List module information for a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessModuleInfoInner> listProcessModulesSlot(String resourceGroupName, String name, String processId, String slot) {
        return new PagedIterable<>(listProcessModulesSlotAsync(resourceGroupName, name, processId, slot));
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ProcessModuleInfoInner>> getProcessModuleSlotWithResponseAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot) {
        return service.getProcessModuleSlot(this.client.getHost(), resourceGroupName, name, processId, baseAddress, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ProcessModuleInfoInner> getProcessModuleSlotAsync(String resourceGroupName, String name, String processId, String baseAddress, String slot) {
        return getProcessModuleSlotWithResponseAsync(resourceGroupName, name, processId, baseAddress, slot)
            .flatMap((SimpleResponse<ProcessModuleInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get process information by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param baseAddress 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProcessModuleInfoInner getProcessModuleSlot(String resourceGroupName, String name, String processId, String baseAddress, String slot) {
        return getProcessModuleSlotAsync(resourceGroupName, name, processId, baseAddress, slot).block();
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listProcessThreadsSlotSinglePageAsync(String resourceGroupName, String name, String processId, String slot) {
        return service.listProcessThreadsSlot(this.client.getHost(), resourceGroupName, name, processId, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ProcessThreadInfoInner> listProcessThreadsSlotAsync(String resourceGroupName, String name, String processId, String slot) {
        return new PagedFlux<>(
            () -> listProcessThreadsSlotSinglePageAsync(resourceGroupName, name, processId, slot),
            nextLink -> listProcessThreadsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List the threads in a process by its ID for a specific scaled-out instance in a web site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param processId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ProcessThreadInfoInner> listProcessThreadsSlot(String resourceGroupName, String name, String processId, String slot) {
        return new PagedIterable<>(listProcessThreadsSlotAsync(resourceGroupName, name, processId, slot));
    }

    /**
     * Description for Get public certificates for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PublicCertificateInner>> listPublicCertificatesSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listPublicCertificatesSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get public certificates for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PublicCertificateInner> listPublicCertificatesSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listPublicCertificatesSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listPublicCertificatesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get public certificates for an app or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PublicCertificateInner> listPublicCertificatesSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listPublicCertificatesSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PublicCertificateInner>> getPublicCertificateSlotWithResponseAsync(String resourceGroupName, String name, String slot, String publicCertificateName) {
        return service.getPublicCertificateSlot(this.client.getHost(), resourceGroupName, name, slot, publicCertificateName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PublicCertificateInner> getPublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName) {
        return getPublicCertificateSlotWithResponseAsync(resourceGroupName, name, slot, publicCertificateName)
            .flatMap((SimpleResponse<PublicCertificateInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get the named public certificate for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PublicCertificateInner getPublicCertificateSlot(String resourceGroupName, String name, String slot, String publicCertificateName) {
        return getPublicCertificateSlotAsync(resourceGroupName, name, slot, publicCertificateName).block();
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @param slot 
     * @param publicCertificate Public certificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<PublicCertificateInner>> createOrUpdatePublicCertificateSlotWithResponseAsync(String resourceGroupName, String name, String publicCertificateName, String slot, PublicCertificateInner publicCertificate) {
        return service.createOrUpdatePublicCertificateSlot(this.client.getHost(), resourceGroupName, name, publicCertificateName, slot, this.client.getSubscriptionId(), publicCertificate, this.client.getApiVersion());
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @param slot 
     * @param publicCertificate Public certificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PublicCertificateInner> createOrUpdatePublicCertificateSlotAsync(String resourceGroupName, String name, String publicCertificateName, String slot, PublicCertificateInner publicCertificate) {
        return createOrUpdatePublicCertificateSlotWithResponseAsync(resourceGroupName, name, publicCertificateName, slot, publicCertificate)
            .flatMap((SimpleResponse<PublicCertificateInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param publicCertificateName 
     * @param slot 
     * @param publicCertificate Public certificate object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PublicCertificateInner createOrUpdatePublicCertificateSlot(String resourceGroupName, String name, String publicCertificateName, String slot, PublicCertificateInner publicCertificate) {
        return createOrUpdatePublicCertificateSlotAsync(resourceGroupName, name, publicCertificateName, slot, publicCertificate).block();
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePublicCertificateSlotWithResponseAsync(String resourceGroupName, String name, String slot, String publicCertificateName) {
        return service.deletePublicCertificateSlot(this.client.getHost(), resourceGroupName, name, slot, publicCertificateName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePublicCertificateSlotAsync(String resourceGroupName, String name, String slot, String publicCertificateName) {
        return deletePublicCertificateSlotWithResponseAsync(resourceGroupName, name, slot, publicCertificateName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a hostname binding for an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publicCertificateName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deletePublicCertificateSlot(String resourceGroupName, String name, String slot, String publicCertificateName) {
        deletePublicCertificateSlotAsync(resourceGroupName, name, slot, publicCertificateName).block();
    }

    /**
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publishingProfileOptions Publishing options for requested profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> listPublishingProfileXmlWithSecretsSlotWithResponseAsync(String resourceGroupName, String name, String slot, CsmPublishingProfileOptions publishingProfileOptions) {
        return service.listPublishingProfileXmlWithSecretsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), publishingProfileOptions, this.client.getApiVersion());
    }

    /**
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publishingProfileOptions Publishing options for requested profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> listPublishingProfileXmlWithSecretsSlotAsync(String resourceGroupName, String name, String slot, CsmPublishingProfileOptions publishingProfileOptions) {
        return listPublishingProfileXmlWithSecretsSlotWithResponseAsync(resourceGroupName, name, slot, publishingProfileOptions)
                .flatMapMany(StreamResponse::getValue);
    }

    /**
     * Description for Gets the publishing profile for an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param publishingProfileOptions Publishing options for requested profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public InputStream listPublishingProfileXmlWithSecretsSlot(String resourceGroupName, String name, String slot, CsmPublishingProfileOptions publishingProfileOptions) {
        return listPublishingProfileXmlWithSecretsSlotAsync(resourceGroupName, name, slot, publishingProfileOptions)
                .map(ByteBufferBackedInputStream::new)
                .collectList()
                .map(list -> new SequenceInputStream(Collections.enumeration(list)))
                .block();
    }

    /**
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetSlotConfigurationSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.resetSlotConfigurationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetSlotConfigurationSlotAsync(String resourceGroupName, String name, String slot) {
        return resetSlotConfigurationSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Resets the configuration settings of the current slot if they were previously modified by calling the API with POST.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetSlotConfigurationSlot(String resourceGroupName, String name, String slot) {
        resetSlotConfigurationSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param softRestart 
     * @param synchronous 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> restartSlotWithResponseAsync(String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous) {
        return service.restartSlot(this.client.getHost(), resourceGroupName, name, slot, softRestart, synchronous, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param softRestart 
     * @param synchronous 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartSlotAsync(String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous) {
        return restartSlotWithResponseAsync(resourceGroupName, name, slot, softRestart, synchronous)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restartSlotAsync(String resourceGroupName, String name, String slot) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        return restartSlotWithResponseAsync(resourceGroupName, name, slot, softRestart, synchronous)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param softRestart 
     * @param synchronous 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restartSlot(String resourceGroupName, String name, String slot, Boolean softRestart, Boolean synchronous) {
        restartSlotAsync(resourceGroupName, name, slot, softRestart, synchronous).block();
    }

    /**
     * Description for Restarts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restartSlot(String resourceGroupName, String name, String slot) {
        final Boolean softRestart = null;
        final Boolean synchronous = null;
        restartSlotAsync(resourceGroupName, name, slot, softRestart, synchronous).block();
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromBackupBlobSlotWithResponseAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return service.restoreFromBackupBlobSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreFromBackupBlobSlotAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreFromBackupBlobSlotWithResponseAsync(resourceGroupName, name, slot, request);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreFromBackupBlobSlot(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        restoreFromBackupBlobSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreFromDeletedAppSlotWithResponseAsync(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        return service.restoreFromDeletedAppSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreFromDeletedAppSlotAsync(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreFromDeletedAppSlotWithResponseAsync(resourceGroupName, name, slot, restoreRequest);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreFromDeletedAppSlot(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        restoreFromDeletedAppSlotAsync(resourceGroupName, name, slot, restoreRequest).block();
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> restoreSnapshotSlotWithResponseAsync(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        return service.restoreSnapshotSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> restoreSnapshotSlotAsync(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = restoreSnapshotSlotWithResponseAsync(resourceGroupName, name, slot, restoreRequest);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreSnapshotSlot(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        restoreSnapshotSlotAsync(resourceGroupName, name, slot, restoreRequest).block();
    }

    /**
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteExtensionInfoInner>> listSiteExtensionsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listSiteExtensionsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SiteExtensionInfoInner> listSiteExtensionsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listSiteExtensionsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listSiteExtensionsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get list of siteextensions for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SiteExtensionInfoInner> listSiteExtensionsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listSiteExtensionsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteExtensionInfoInner>> getSiteExtensionSlotWithResponseAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return service.getSiteExtensionSlot(this.client.getHost(), resourceGroupName, name, siteExtensionId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteExtensionInfoInner> getSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return getSiteExtensionSlotWithResponseAsync(resourceGroupName, name, siteExtensionId, slot)
            .flatMap((SimpleResponse<SiteExtensionInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get site extension information by its ID for a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteExtensionInfoInner getSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return getSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).block();
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> installSiteExtensionSlotWithResponseAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return service.installSiteExtensionSlot(this.client.getHost(), resourceGroupName, name, siteExtensionId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteExtensionInfoInner> installSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = installSiteExtensionSlotWithResponseAsync(resourceGroupName, name, siteExtensionId, slot);
        return client.<SiteExtensionInfoInner, SiteExtensionInfoInner>getLroResultAsync(response, client.getHttpPipeline(), SiteExtensionInfoInner.class, SiteExtensionInfoInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteExtensionInfoInner installSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return installSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).block();
    }

    /**
     * Description for Remove a site extension from a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSiteExtensionSlotWithResponseAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return service.deleteSiteExtensionSlot(this.client.getHost(), resourceGroupName, name, siteExtensionId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Remove a site extension from a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return deleteSiteExtensionSlotWithResponseAsync(resourceGroupName, name, siteExtensionId, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Remove a site extension from a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot) {
        deleteSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).block();
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> copySlotWithResponseAsync(String resourceGroupName, String name, String slot, CsmCopySlotEntityInner copySlotEntity) {
        return service.copySlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), copySlotEntity, this.client.getApiVersion());
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> copySlotAsync(String resourceGroupName, String name, String slot, CsmCopySlotEntityInner copySlotEntity) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = copySlotWithResponseAsync(resourceGroupName, name, slot, copySlotEntity);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void copySlot(String resourceGroupName, String name, String slot, CsmCopySlotEntityInner copySlotEntity) {
        copySlotAsync(resourceGroupName, name, slot, copySlotEntity).block();
    }

    /**
     * Description for Get the difference in configuration settings between two web app slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SlotDifferenceInner>> listSlotDifferencesSlotSinglePageAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return service.listSlotDifferencesSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get the difference in configuration settings between two web app slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SlotDifferenceInner> listSlotDifferencesSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return new PagedFlux<>(
            () -> listSlotDifferencesSlotSinglePageAsync(resourceGroupName, name, slot, slotSwapEntity),
            nextLink -> listSlotDifferencesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get the difference in configuration settings between two web app slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SlotDifferenceInner> listSlotDifferencesSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return new PagedIterable<>(listSlotDifferencesSlotAsync(resourceGroupName, name, slot, slotSwapEntity));
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> swapSlotWithResponseAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return service.swapSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion());
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> swapSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = swapSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void swapSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        swapSlotAsync(resourceGroupName, name, slot, slotSwapEntity).block();
    }

    /**
     * Description for Returns all Snapshots to the user.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listSnapshotsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Returns all Snapshots to the user.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SnapshotInner> listSnapshotsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listSnapshotsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listSnapshotsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Returns all Snapshots to the user.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SnapshotInner> listSnapshotsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listSnapshotsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsFromDRSecondarySlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listSnapshotsFromDRSecondarySlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SnapshotInner> listSnapshotsFromDRSecondarySlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listSnapshotsFromDRSecondarySlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listSnapshotsFromDRSecondarySlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SnapshotInner> listSnapshotsFromDRSecondarySlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listSnapshotsFromDRSecondarySlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Gets the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSourceControlInner>> getSourceControlSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.getSourceControlSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> getSourceControlSlotAsync(String resourceGroupName, String name, String slot) {
        return getSourceControlSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<SiteSourceControlInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner getSourceControlSlot(String resourceGroupName, String name, String slot) {
        return getSourceControlSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateSourceControlSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return service.createOrUpdateSourceControlSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteSourceControl, this.client.getApiVersion());
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> createOrUpdateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, siteSourceControl);
        return client.<SiteSourceControlInner, SiteSourceControlInner>getLroResultAsync(response, client.getHttpPipeline(), SiteSourceControlInner.class, SiteSourceControlInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner createOrUpdateSourceControlSlot(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return createOrUpdateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).block();
    }

    /**
     * Description for Deletes the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSourceControlSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.deleteSourceControlSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSourceControlSlotAsync(String resourceGroupName, String name, String slot) {
        return deleteSourceControlSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSourceControlSlot(String resourceGroupName, String name, String slot) {
        deleteSourceControlSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSourceControlInner>> updateSourceControlSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return service.updateSourceControlSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteSourceControl, this.client.getApiVersion());
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> updateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return updateSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, siteSourceControl)
            .flatMap((SimpleResponse<SiteSourceControlInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner updateSourceControlSlot(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return updateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).block();
    }

    /**
     * Description for Starts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.startSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Starts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startSlotAsync(String resourceGroupName, String name, String slot) {
        return startSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Starts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void startSlot(String resourceGroupName, String name, String slot) {
        startSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> startNetworkTraceSlotWithResponseAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.startNetworkTraceSlot(this.client.getHost(), resourceGroupName, name, durationInSeconds, slot, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> startNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = startNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl);
        return client.<List<NetworkTraceInner>, List<NetworkTraceInner>>getLroResultAsync(response, client.getHttpPipeline(), new TypeReference<List<NetworkTraceInner>>() {}.getType(), new TypeReference<List<NetworkTraceInner>>() {}.getType())
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> startNetworkTraceSlot(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Stops an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.stopSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stops an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopSlotAsync(String resourceGroupName, String name, String slot) {
        return stopSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stops an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopSlot(String resourceGroupName, String name, String slot) {
        stopSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopNetworkTraceSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.stopNetworkTraceSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopNetworkTraceSlotAsync(String resourceGroupName, String name, String slot) {
        return stopNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        stopNetworkTraceSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Sync web app repository.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> syncRepositorySlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.syncRepositorySlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Sync web app repository.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> syncRepositorySlotAsync(String resourceGroupName, String name, String slot) {
        return syncRepositorySlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Sync web app repository.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void syncRepositorySlot(String resourceGroupName, String name, String slot) {
        syncRepositorySlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> syncFunctionTriggersSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.syncFunctionTriggersSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> syncFunctionTriggersSlotAsync(String resourceGroupName, String name, String slot) {
        return syncFunctionTriggersSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void syncFunctionTriggersSlot(String resourceGroupName, String name, String slot) {
        syncFunctionTriggersSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for List triggered web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredWebJobInner>> listTriggeredWebJobsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listTriggeredWebJobsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List triggered web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TriggeredWebJobInner> listTriggeredWebJobsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listTriggeredWebJobsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listTriggeredWebJobsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List triggered web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriggeredWebJobInner> listTriggeredWebJobsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listTriggeredWebJobsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TriggeredWebJobInner>> getTriggeredWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.getTriggeredWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TriggeredWebJobInner> getTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return getTriggeredWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((SimpleResponse<TriggeredWebJobInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriggeredWebJobInner getTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        return getTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTriggeredWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.deleteTriggeredWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return deleteTriggeredWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        deleteTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredJobHistoryInner>> listTriggeredWebJobHistorySlotSinglePageAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.listTriggeredWebJobHistorySlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TriggeredJobHistoryInner> listTriggeredWebJobHistorySlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return new PagedFlux<>(
            () -> listTriggeredWebJobHistorySlotSinglePageAsync(resourceGroupName, name, webJobName, slot),
            nextLink -> listTriggeredWebJobHistorySlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriggeredJobHistoryInner> listTriggeredWebJobHistorySlot(String resourceGroupName, String name, String webJobName, String slot) {
        return new PagedIterable<>(listTriggeredWebJobHistorySlotAsync(resourceGroupName, name, webJobName, slot));
    }

    /**
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TriggeredJobHistoryInner>> getTriggeredWebJobHistorySlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String id, String slot) {
        return service.getTriggeredWebJobHistorySlot(this.client.getHost(), resourceGroupName, name, webJobName, id, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TriggeredJobHistoryInner> getTriggeredWebJobHistorySlotAsync(String resourceGroupName, String name, String webJobName, String id, String slot) {
        return getTriggeredWebJobHistorySlotWithResponseAsync(resourceGroupName, name, webJobName, id, slot)
            .flatMap((SimpleResponse<TriggeredJobHistoryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param id 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriggeredJobHistoryInner getTriggeredWebJobHistorySlot(String resourceGroupName, String name, String webJobName, String id, String slot) {
        return getTriggeredWebJobHistorySlotAsync(resourceGroupName, name, webJobName, id, slot).block();
    }

    /**
     * Description for Run a triggered web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> runTriggeredWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.runTriggeredWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Run a triggered web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> runTriggeredWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return runTriggeredWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Run a triggered web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void runTriggeredWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        runTriggeredWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CsmUsageQuotaInner>> listUsagesSlotSinglePageAsync(String resourceGroupName, String name, String slot, String filter) {
        return service.listUsagesSlot(this.client.getHost(), resourceGroupName, name, slot, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CsmUsageQuotaInner> listUsagesSlotAsync(String resourceGroupName, String name, String slot, String filter) {
        return new PagedFlux<>(
            () -> listUsagesSlotSinglePageAsync(resourceGroupName, name, slot, filter),
            nextLink -> listUsagesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CsmUsageQuotaInner> listUsagesSlotAsync(String resourceGroupName, String name, String slot) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listUsagesSlotSinglePageAsync(resourceGroupName, name, slot, filter),
            nextLink -> listUsagesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> listUsagesSlot(String resourceGroupName, String name, String slot, String filter) {
        return new PagedIterable<>(listUsagesSlotAsync(resourceGroupName, name, slot, filter));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> listUsagesSlot(String resourceGroupName, String name, String slot) {
        final String filter = null;
        return new PagedIterable<>(listUsagesSlotAsync(resourceGroupName, name, slot, filter));
    }

    /**
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<VnetInfoInner>>> listVnetConnectionsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.listVnetConnectionsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<VnetInfoInner>> listVnetConnectionsSlotAsync(String resourceGroupName, String name, String slot) {
        return listVnetConnectionsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<List<VnetInfoInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<VnetInfoInner> listVnetConnectionsSlot(String resourceGroupName, String name, String slot) {
        return listVnetConnectionsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetInfoInner>> getVnetConnectionSlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String slot) {
        return service.getVnetConnectionSlot(this.client.getHost(), resourceGroupName, name, vnetName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetInfoInner> getVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot) {
        return getVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot)
            .flatMap((SimpleResponse<VnetInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner getVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        return getVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).block();
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetInfoInner>> createOrUpdateVnetConnectionSlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return service.createOrUpdateVnetConnectionSlot(this.client.getHost(), resourceGroupName, name, vnetName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetInfoInner> createOrUpdateVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return createOrUpdateVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<VnetInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner createOrUpdateVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return createOrUpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteVnetConnectionSlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String slot) {
        return service.deleteVnetConnectionSlot(this.client.getHost(), resourceGroupName, name, vnetName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot) {
        return deleteVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot) {
        deleteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot).block();
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetInfoInner>> updateVnetConnectionSlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return service.updateVnetConnectionSlot(this.client.getHost(), resourceGroupName, name, vnetName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetInfoInner> updateVnetConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return updateVnetConnectionSlotWithResponseAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<VnetInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param slot 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner updateVnetConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, VnetInfoInner connectionEnvelope) {
        return updateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Gets an app's Virtual Network gateway.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetGatewayInner>> getVnetConnectionGatewaySlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        return service.getVnetConnectionGatewaySlot(this.client.getHost(), resourceGroupName, name, vnetName, gatewayName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets an app's Virtual Network gateway.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetGatewayInner> getVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        return getVnetConnectionGatewaySlotWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, slot)
            .flatMap((SimpleResponse<VnetGatewayInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets an app's Virtual Network gateway.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner getVnetConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot) {
        return getVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot).block();
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetGatewayInner>> createOrUpdateVnetConnectionGatewaySlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, VnetGatewayInner connectionEnvelope) {
        return service.createOrUpdateVnetConnectionGatewaySlot(this.client.getHost(), resourceGroupName, name, vnetName, gatewayName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetGatewayInner> createOrUpdateVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, VnetGatewayInner connectionEnvelope) {
        return createOrUpdateVnetConnectionGatewaySlotWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<VnetGatewayInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner createOrUpdateVnetConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, VnetGatewayInner connectionEnvelope) {
        return createOrUpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope).block();
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetGatewayInner>> updateVnetConnectionGatewaySlotWithResponseAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, VnetGatewayInner connectionEnvelope) {
        return service.updateVnetConnectionGatewaySlot(this.client.getHost(), resourceGroupName, name, vnetName, gatewayName, slot, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetGatewayInner> updateVnetConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, VnetGatewayInner connectionEnvelope) {
        return updateVnetConnectionGatewaySlotWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope)
            .flatMap((SimpleResponse<VnetGatewayInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param slot 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner updateVnetConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, VnetGatewayInner connectionEnvelope) {
        return updateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot, connectionEnvelope).block();
    }

    /**
     * Description for List webjobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<WebJobInner>> listWebJobsSlotSinglePageAsync(String resourceGroupName, String name, String slot) {
        return service.listWebJobsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List webjobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<WebJobInner> listWebJobsSlotAsync(String resourceGroupName, String name, String slot) {
        return new PagedFlux<>(
            () -> listWebJobsSlotSinglePageAsync(resourceGroupName, name, slot),
            nextLink -> listWebJobsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List webjobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WebJobInner> listWebJobsSlot(String resourceGroupName, String name, String slot) {
        return new PagedIterable<>(listWebJobsSlotAsync(resourceGroupName, name, slot));
    }

    /**
     * Description for Get webjob information for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<WebJobInner>> getWebJobSlotWithResponseAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return service.getWebJobSlot(this.client.getHost(), resourceGroupName, name, webJobName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get webjob information for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WebJobInner> getWebJobSlotAsync(String resourceGroupName, String name, String webJobName, String slot) {
        return getWebJobSlotWithResponseAsync(resourceGroupName, name, webJobName, slot)
            .flatMap((SimpleResponse<WebJobInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get webjob information for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebJobInner getWebJobSlot(String resourceGroupName, String name, String webJobName, String slot) {
        return getWebJobSlotAsync(resourceGroupName, name, webJobName, slot).block();
    }

    /**
     * Description for Get the difference in configuration settings between two web app slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SlotDifferenceInner>> listSlotDifferencesFromProductionSinglePageAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return service.listSlotDifferencesFromProduction(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get the difference in configuration settings between two web app slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SlotDifferenceInner> listSlotDifferencesFromProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return new PagedFlux<>(
            () -> listSlotDifferencesFromProductionSinglePageAsync(resourceGroupName, name, slotSwapEntity),
            nextLink -> listSlotDifferencesFromProductionNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get the difference in configuration settings between two web app slots.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SlotDifferenceInner> listSlotDifferencesFromProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return new PagedIterable<>(listSlotDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity));
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> swapSlotWithProductionWithResponseAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return service.swapSlotWithProduction(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion());
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> swapSlotWithProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = swapSlotWithProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity);
        return client.<Void, Void>getLroResultAsync(response, client.getHttpPipeline(), Void.class, Void.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void swapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        swapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).block();
    }

    /**
     * Description for Returns all Snapshots to the user.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsSinglePageAsync(String resourceGroupName, String name) {
        return service.listSnapshots(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Returns all Snapshots to the user.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SnapshotInner> listSnapshotsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listSnapshotsSinglePageAsync(resourceGroupName, name),
            nextLink -> listSnapshotsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Returns all Snapshots to the user.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SnapshotInner> listSnapshots(String resourceGroupName, String name) {
        return new PagedIterable<>(listSnapshotsAsync(resourceGroupName, name));
    }

    /**
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsFromDRSecondarySinglePageAsync(String resourceGroupName, String name) {
        return service.listSnapshotsFromDRSecondary(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<SnapshotInner> listSnapshotsFromDRSecondaryAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listSnapshotsFromDRSecondarySinglePageAsync(resourceGroupName, name),
            nextLink -> listSnapshotsFromDRSecondaryNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Returns all Snapshots to the user from DRSecondary endpoint.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SnapshotInner> listSnapshotsFromDRSecondary(String resourceGroupName, String name) {
        return new PagedIterable<>(listSnapshotsFromDRSecondaryAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSourceControlInner>> getSourceControlWithResponseAsync(String resourceGroupName, String name) {
        return service.getSourceControl(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> getSourceControlAsync(String resourceGroupName, String name) {
        return getSourceControlWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<SiteSourceControlInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner getSourceControl(String resourceGroupName, String name) {
        return getSourceControlAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> createOrUpdateSourceControlWithResponseAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return service.createOrUpdateSourceControl(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteSourceControl, this.client.getApiVersion());
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> createOrUpdateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = createOrUpdateSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl);
        return client.<SiteSourceControlInner, SiteSourceControlInner>getLroResultAsync(response, client.getHttpPipeline(), SiteSourceControlInner.class, SiteSourceControlInner.class)
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner createOrUpdateSourceControl(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return createOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).block();
    }

    /**
     * Description for Deletes the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteSourceControlWithResponseAsync(String resourceGroupName, String name) {
        return service.deleteSourceControl(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSourceControlAsync(String resourceGroupName, String name) {
        return deleteSourceControlWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteSourceControl(String resourceGroupName, String name) {
        deleteSourceControlAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSourceControlInner>> updateSourceControlWithResponseAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return service.updateSourceControl(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteSourceControl, this.client.getApiVersion());
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> updateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return updateSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl)
            .flatMap((SimpleResponse<SiteSourceControlInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner updateSourceControl(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return updateSourceControlAsync(resourceGroupName, name, siteSourceControl).block();
    }

    /**
     * Description for Starts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> startWithResponseAsync(String resourceGroupName, String name) {
        return service.start(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Starts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> startAsync(String resourceGroupName, String name) {
        return startWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Starts an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void start(String resourceGroupName, String name) {
        startAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Flux<ByteBuffer>>> startNetworkTraceWithResponseAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.startNetworkTrace(this.client.getHost(), resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> startNetworkTraceAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        Mono<SimpleResponse<Flux<ByteBuffer>>> response = startNetworkTraceWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl);
        return client.<List<NetworkTraceInner>, List<NetworkTraceInner>>getLroResultAsync(response, client.getHttpPipeline(), new TypeReference<List<NetworkTraceInner>>() {}.getType(), new TypeReference<List<NetworkTraceInner>>() {}.getType())
            .last()
            .flatMap(AsyncPollResponse::getFinalResult);
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> startNetworkTrace(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return startNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Stops an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopWithResponseAsync(String resourceGroupName, String name) {
        return service.stop(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stops an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopAsync(String resourceGroupName, String name) {
        return stopWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stops an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stop(String resourceGroupName, String name) {
        stopAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> stopNetworkTraceWithResponseAsync(String resourceGroupName, String name) {
        return service.stopNetworkTrace(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> stopNetworkTraceAsync(String resourceGroupName, String name) {
        return stopNetworkTraceWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Stop ongoing capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void stopNetworkTrace(String resourceGroupName, String name) {
        stopNetworkTraceAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Sync web app repository.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> syncRepositoryWithResponseAsync(String resourceGroupName, String name) {
        return service.syncRepository(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Sync web app repository.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> syncRepositoryAsync(String resourceGroupName, String name) {
        return syncRepositoryWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Sync web app repository.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void syncRepository(String resourceGroupName, String name) {
        syncRepositoryAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> syncFunctionTriggersWithResponseAsync(String resourceGroupName, String name) {
        return service.syncFunctionTriggers(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> syncFunctionTriggersAsync(String resourceGroupName, String name) {
        return syncFunctionTriggersWithResponseAsync(resourceGroupName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Syncs function trigger metadata to the management database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void syncFunctionTriggers(String resourceGroupName, String name) {
        syncFunctionTriggersAsync(resourceGroupName, name).block();
    }

    /**
     * Description for List triggered web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredWebJobInner>> listTriggeredWebJobsSinglePageAsync(String resourceGroupName, String name) {
        return service.listTriggeredWebJobs(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List triggered web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TriggeredWebJobInner> listTriggeredWebJobsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listTriggeredWebJobsSinglePageAsync(resourceGroupName, name),
            nextLink -> listTriggeredWebJobsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List triggered web jobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriggeredWebJobInner> listTriggeredWebJobs(String resourceGroupName, String name) {
        return new PagedIterable<>(listTriggeredWebJobsAsync(resourceGroupName, name));
    }

    /**
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TriggeredWebJobInner>> getTriggeredWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.getTriggeredWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TriggeredWebJobInner> getTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return getTriggeredWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((SimpleResponse<TriggeredWebJobInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriggeredWebJobInner getTriggeredWebJob(String resourceGroupName, String name, String webJobName) {
        return getTriggeredWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteTriggeredWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.deleteTriggeredWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return deleteTriggeredWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Delete a triggered web job by its ID for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteTriggeredWebJob(String resourceGroupName, String name, String webJobName) {
        deleteTriggeredWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredJobHistoryInner>> listTriggeredWebJobHistorySinglePageAsync(String resourceGroupName, String name, String webJobName) {
        return service.listTriggeredWebJobHistory(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<TriggeredJobHistoryInner> listTriggeredWebJobHistoryAsync(String resourceGroupName, String name, String webJobName) {
        return new PagedFlux<>(
            () -> listTriggeredWebJobHistorySinglePageAsync(resourceGroupName, name, webJobName),
            nextLink -> listTriggeredWebJobHistoryNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List a triggered web job's history for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<TriggeredJobHistoryInner> listTriggeredWebJobHistory(String resourceGroupName, String name, String webJobName) {
        return new PagedIterable<>(listTriggeredWebJobHistoryAsync(resourceGroupName, name, webJobName));
    }

    /**
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TriggeredJobHistoryInner>> getTriggeredWebJobHistoryWithResponseAsync(String resourceGroupName, String name, String webJobName, String id) {
        return service.getTriggeredWebJobHistory(this.client.getHost(), resourceGroupName, name, webJobName, id, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TriggeredJobHistoryInner> getTriggeredWebJobHistoryAsync(String resourceGroupName, String name, String webJobName, String id) {
        return getTriggeredWebJobHistoryWithResponseAsync(resourceGroupName, name, webJobName, id)
            .flatMap((SimpleResponse<TriggeredJobHistoryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a triggered web job's history by its ID for an app, , or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @param id 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TriggeredJobHistoryInner getTriggeredWebJobHistory(String resourceGroupName, String name, String webJobName, String id) {
        return getTriggeredWebJobHistoryAsync(resourceGroupName, name, webJobName, id).block();
    }

    /**
     * Description for Run a triggered web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> runTriggeredWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.runTriggeredWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Run a triggered web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> runTriggeredWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return runTriggeredWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Run a triggered web job for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void runTriggeredWebJob(String resourceGroupName, String name, String webJobName) {
        runTriggeredWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CsmUsageQuotaInner>> listUsagesSinglePageAsync(String resourceGroupName, String name, String filter) {
        return service.listUsages(this.client.getHost(), resourceGroupName, name, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CsmUsageQuotaInner> listUsagesAsync(String resourceGroupName, String name, String filter) {
        return new PagedFlux<>(
            () -> listUsagesSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> listUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CsmUsageQuotaInner> listUsagesAsync(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedFlux<>(
            () -> listUsagesSinglePageAsync(resourceGroupName, name, filter),
            nextLink -> listUsagesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> listUsages(String resourceGroupName, String name, String filter) {
        return new PagedIterable<>(listUsagesAsync(resourceGroupName, name, filter));
    }

    /**
     * Description for Gets the quota usage information of an app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CsmUsageQuotaInner> listUsages(String resourceGroupName, String name) {
        final String filter = null;
        return new PagedIterable<>(listUsagesAsync(resourceGroupName, name, filter));
    }

    /**
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<VnetInfoInner>>> listVnetConnectionsWithResponseAsync(String resourceGroupName, String name) {
        return service.listVnetConnections(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<VnetInfoInner>> listVnetConnectionsAsync(String resourceGroupName, String name) {
        return listVnetConnectionsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<List<VnetInfoInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the virtual networks the app (or deployment slot) is connected to.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<VnetInfoInner> listVnetConnections(String resourceGroupName, String name) {
        return listVnetConnectionsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetInfoInner>> getVnetConnectionWithResponseAsync(String resourceGroupName, String name, String vnetName) {
        return service.getVnetConnection(this.client.getHost(), resourceGroupName, name, vnetName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetInfoInner> getVnetConnectionAsync(String resourceGroupName, String name, String vnetName) {
        return getVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName)
            .flatMap((SimpleResponse<VnetInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets a virtual network the app (or deployment slot) is connected to by name.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner getVnetConnection(String resourceGroupName, String name, String vnetName) {
        return getVnetConnectionAsync(resourceGroupName, name, vnetName).block();
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetInfoInner>> createOrUpdateVnetConnectionWithResponseAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return service.createOrUpdateVnetConnection(this.client.getHost(), resourceGroupName, name, vnetName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetInfoInner> createOrUpdateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return createOrUpdateVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, connectionEnvelope)
            .flatMap((SimpleResponse<VnetInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner createOrUpdateVnetConnection(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return createOrUpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).block();
    }

    /**
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteVnetConnectionWithResponseAsync(String resourceGroupName, String name, String vnetName) {
        return service.deleteVnetConnection(this.client.getHost(), resourceGroupName, name, vnetName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteVnetConnectionAsync(String resourceGroupName, String name, String vnetName) {
        return deleteVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Deletes a connection from an app (or deployment slot to a named virtual network.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteVnetConnection(String resourceGroupName, String name, String vnetName) {
        deleteVnetConnectionAsync(resourceGroupName, name, vnetName).block();
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetInfoInner>> updateVnetConnectionWithResponseAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return service.updateVnetConnection(this.client.getHost(), resourceGroupName, name, vnetName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetInfoInner> updateVnetConnectionAsync(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return updateVnetConnectionWithResponseAsync(resourceGroupName, name, vnetName, connectionEnvelope)
            .flatMap((SimpleResponse<VnetInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a Virtual Network connection to an app or slot (PUT) or updates the connection properties (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param connectionEnvelope Virtual Network information contract.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetInfoInner updateVnetConnection(String resourceGroupName, String name, String vnetName, VnetInfoInner connectionEnvelope) {
        return updateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope).block();
    }

    /**
     * Description for Gets an app's Virtual Network gateway.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetGatewayInner>> getVnetConnectionGatewayWithResponseAsync(String resourceGroupName, String name, String vnetName, String gatewayName) {
        return service.getVnetConnectionGateway(this.client.getHost(), resourceGroupName, name, vnetName, gatewayName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets an app's Virtual Network gateway.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetGatewayInner> getVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName) {
        return getVnetConnectionGatewayWithResponseAsync(resourceGroupName, name, vnetName, gatewayName)
            .flatMap((SimpleResponse<VnetGatewayInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets an app's Virtual Network gateway.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner getVnetConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName) {
        return getVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName).block();
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetGatewayInner>> createOrUpdateVnetConnectionGatewayWithResponseAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        return service.createOrUpdateVnetConnectionGateway(this.client.getHost(), resourceGroupName, name, vnetName, gatewayName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetGatewayInner> createOrUpdateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        return createOrUpdateVnetConnectionGatewayWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
            .flatMap((SimpleResponse<VnetGatewayInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner createOrUpdateVnetConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        return createOrUpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).block();
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<VnetGatewayInner>> updateVnetConnectionGatewayWithResponseAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        return service.updateVnetConnectionGateway(this.client.getHost(), resourceGroupName, name, vnetName, gatewayName, this.client.getSubscriptionId(), connectionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<VnetGatewayInner> updateVnetConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        return updateVnetConnectionGatewayWithResponseAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope)
            .flatMap((SimpleResponse<VnetGatewayInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param vnetName 
     * @param gatewayName 
     * @param connectionEnvelope The Virtual Network gateway contract. This is used to give the Virtual Network gateway access to the VPN package.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public VnetGatewayInner updateVnetConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, VnetGatewayInner connectionEnvelope) {
        return updateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope).block();
    }

    /**
     * Description for List webjobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<WebJobInner>> listWebJobsSinglePageAsync(String resourceGroupName, String name) {
        return service.listWebJobs(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List webjobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<WebJobInner> listWebJobsAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listWebJobsSinglePageAsync(resourceGroupName, name),
            nextLink -> listWebJobsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List webjobs for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<WebJobInner> listWebJobs(String resourceGroupName, String name) {
        return new PagedIterable<>(listWebJobsAsync(resourceGroupName, name));
    }

    /**
     * Description for Get webjob information for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<WebJobInner>> getWebJobWithResponseAsync(String resourceGroupName, String name, String webJobName) {
        return service.getWebJob(this.client.getHost(), resourceGroupName, name, webJobName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get webjob information for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<WebJobInner> getWebJobAsync(String resourceGroupName, String name, String webJobName) {
        return getWebJobWithResponseAsync(resourceGroupName, name, webJobName)
            .flatMap((SimpleResponse<WebJobInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get webjob information for an app, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param webJobName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public WebJobInner getWebJob(String resourceGroupName, String name, String webJobName) {
        return getWebJobAsync(resourceGroupName, name, webJobName).block();
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteInner>> beginCreateOrUpdateWithResponseAsync(String resourceGroupName, String name, SiteInner siteEnvelope) {
        return service.beginCreateOrUpdate(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> beginCreateOrUpdateAsync(String resourceGroupName, String name, SiteInner siteEnvelope) {
        return beginCreateOrUpdateWithResponseAsync(resourceGroupName, name, siteEnvelope)
            .flatMap((SimpleResponse<SiteInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner beginCreateOrUpdate(String resourceGroupName, String name, SiteInner siteEnvelope) {
        return beginCreateOrUpdateAsync(resourceGroupName, name, siteEnvelope).block();
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreWithResponseAsync(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        return service.beginRestore(this.client.getHost(), resourceGroupName, name, backupId, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreAsync(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        return beginRestoreWithResponseAsync(resourceGroupName, name, backupId, request)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestore(String resourceGroupName, String name, String backupId, RestoreRequestInner request) {
        beginRestoreAsync(resourceGroupName, name, backupId, request).block();
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<UserInner>> beginListPublishingCredentialsWithResponseAsync(String resourceGroupName, String name) {
        return service.beginListPublishingCredentials(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserInner> beginListPublishingCredentialsAsync(String resourceGroupName, String name) {
        return beginListPublishingCredentialsWithResponseAsync(resourceGroupName, name)
            .flatMap((SimpleResponse<UserInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner beginListPublishingCredentials(String resourceGroupName, String name) {
        return beginListPublishingCredentialsAsync(resourceGroupName, name).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> beginCreateMSDeployOperationWithResponseAsync(String resourceGroupName, String name, MSDeploy mSDeploy) {
        return service.beginCreateMSDeployOperation(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> beginCreateMSDeployOperationAsync(String resourceGroupName, String name, MSDeploy mSDeploy) {
        return beginCreateMSDeployOperationWithResponseAsync(resourceGroupName, name, mSDeploy)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner beginCreateMSDeployOperation(String resourceGroupName, String name, MSDeploy mSDeploy) {
        return beginCreateMSDeployOperationAsync(resourceGroupName, name, mSDeploy).block();
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionEnvelopeInner>> beginCreateFunctionWithResponseAsync(String resourceGroupName, String name, String functionName, FunctionEnvelopeInner functionEnvelope) {
        return service.beginCreateFunction(this.client.getHost(), resourceGroupName, name, functionName, this.client.getSubscriptionId(), functionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionEnvelopeInner> beginCreateFunctionAsync(String resourceGroupName, String name, String functionName, FunctionEnvelopeInner functionEnvelope) {
        return beginCreateFunctionWithResponseAsync(resourceGroupName, name, functionName, functionEnvelope)
            .flatMap((SimpleResponse<FunctionEnvelopeInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionEnvelopeInner beginCreateFunction(String resourceGroupName, String name, String functionName, FunctionEnvelopeInner functionEnvelope) {
        return beginCreateFunctionAsync(resourceGroupName, name, functionName, functionEnvelope).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> beginCreateInstanceMSDeployOperationWithResponseAsync(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        return service.beginCreateInstanceMSDeployOperation(this.client.getHost(), resourceGroupName, name, instanceId, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> beginCreateInstanceMSDeployOperationAsync(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        return beginCreateInstanceMSDeployOperationWithResponseAsync(resourceGroupName, name, instanceId, mSDeploy)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner beginCreateInstanceMSDeployOperation(String resourceGroupName, String name, String instanceId, MSDeploy mSDeploy) {
        return beginCreateInstanceMSDeployOperationAsync(resourceGroupName, name, instanceId, mSDeploy).block();
    }

    /**
     * Description for Restores a web app.
     * 
     * @param subscriptionName 
     * @param resourceGroupName 
     * @param name 
     * @param migrationOptions Options for app content migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<StorageMigrationResponseInner>> beginMigrateStorageWithResponseAsync(String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        return service.beginMigrateStorage(this.client.getHost(), subscriptionName, resourceGroupName, name, this.client.getSubscriptionId(), migrationOptions, this.client.getApiVersion());
    }

    /**
     * Description for Restores a web app.
     * 
     * @param subscriptionName 
     * @param resourceGroupName 
     * @param name 
     * @param migrationOptions Options for app content migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StorageMigrationResponseInner> beginMigrateStorageAsync(String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        return beginMigrateStorageWithResponseAsync(subscriptionName, resourceGroupName, name, migrationOptions)
            .flatMap((SimpleResponse<StorageMigrationResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Restores a web app.
     * 
     * @param subscriptionName 
     * @param resourceGroupName 
     * @param name 
     * @param migrationOptions Options for app content migration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StorageMigrationResponseInner beginMigrateStorage(String subscriptionName, String resourceGroupName, String name, StorageMigrationOptions migrationOptions) {
        return beginMigrateStorageAsync(subscriptionName, resourceGroupName, name, migrationOptions).block();
    }

    /**
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param migrationRequestEnvelope MySQL migration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OperationInner>> beginMigrateMySqlWithResponseAsync(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        return service.beginMigrateMySql(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), migrationRequestEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param migrationRequestEnvelope MySQL migration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OperationInner> beginMigrateMySqlAsync(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        return beginMigrateMySqlWithResponseAsync(resourceGroupName, name, migrationRequestEnvelope)
            .flatMap((SimpleResponse<OperationInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Migrates a local (in-app) MySql database to a remote MySql database.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param migrationRequestEnvelope MySQL migration request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OperationInner beginMigrateMySql(String resourceGroupName, String name, MigrateMySqlRequest migrationRequestEnvelope) {
        return beginMigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartWebSiteNetworkTraceOperationWithResponseAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.beginStartWebSiteNetworkTraceOperation(this.client.getHost(), resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartWebSiteNetworkTraceOperationAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartWebSiteNetworkTraceOperationWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartWebSiteNetworkTraceOperationAsync(String resourceGroupName, String name) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartWebSiteNetworkTraceOperationWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartWebSiteNetworkTraceOperation(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartWebSiteNetworkTraceOperationAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartWebSiteNetworkTraceOperation(String resourceGroupName, String name) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartWebSiteNetworkTraceOperationAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreFromBackupBlobWithResponseAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        return service.beginRestoreFromBackupBlob(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreFromBackupBlobAsync(String resourceGroupName, String name, RestoreRequestInner request) {
        return beginRestoreFromBackupBlobWithResponseAsync(resourceGroupName, name, request)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreFromBackupBlob(String resourceGroupName, String name, RestoreRequestInner request) {
        beginRestoreFromBackupBlobAsync(resourceGroupName, name, request).block();
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreFromDeletedAppWithResponseAsync(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        return service.beginRestoreFromDeletedApp(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreFromDeletedAppAsync(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        return beginRestoreFromDeletedAppWithResponseAsync(resourceGroupName, name, restoreRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreFromDeletedApp(String resourceGroupName, String name, DeletedAppRestoreRequest restoreRequest) {
        beginRestoreFromDeletedAppAsync(resourceGroupName, name, restoreRequest).block();
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreSnapshotWithResponseAsync(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        return service.beginRestoreSnapshot(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreSnapshotAsync(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        return beginRestoreSnapshotWithResponseAsync(resourceGroupName, name, restoreRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreSnapshot(String resourceGroupName, String name, SnapshotRestoreRequest restoreRequest) {
        beginRestoreSnapshotAsync(resourceGroupName, name, restoreRequest).block();
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteExtensionInfoInner>> beginInstallSiteExtensionWithResponseAsync(String resourceGroupName, String name, String siteExtensionId) {
        return service.beginInstallSiteExtension(this.client.getHost(), resourceGroupName, name, siteExtensionId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteExtensionInfoInner> beginInstallSiteExtensionAsync(String resourceGroupName, String name, String siteExtensionId) {
        return beginInstallSiteExtensionWithResponseAsync(resourceGroupName, name, siteExtensionId)
            .flatMap((SimpleResponse<SiteExtensionInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteExtensionInfoInner beginInstallSiteExtension(String resourceGroupName, String name, String siteExtensionId) {
        return beginInstallSiteExtensionAsync(resourceGroupName, name, siteExtensionId).block();
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginCopyProductionSlotWithResponseAsync(String resourceGroupName, String name, CsmCopySlotEntityInner copySlotEntity) {
        return service.beginCopyProductionSlot(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), copySlotEntity, this.client.getApiVersion());
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginCopyProductionSlotAsync(String resourceGroupName, String name, CsmCopySlotEntityInner copySlotEntity) {
        return beginCopyProductionSlotWithResponseAsync(resourceGroupName, name, copySlotEntity)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginCopyProductionSlot(String resourceGroupName, String name, CsmCopySlotEntityInner copySlotEntity) {
        beginCopyProductionSlotAsync(resourceGroupName, name, copySlotEntity).block();
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteInner>> beginCreateOrUpdateSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        return service.beginCreateOrUpdateSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteInner> beginCreateOrUpdateSlotAsync(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        return beginCreateOrUpdateSlotWithResponseAsync(resourceGroupName, name, slot, siteEnvelope)
            .flatMap((SimpleResponse<SiteInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an existing app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteEnvelope A web app, a mobile app backend, or an API app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteInner beginCreateOrUpdateSlot(String resourceGroupName, String name, String slot, SiteInner siteEnvelope) {
        return beginCreateOrUpdateSlotAsync(resourceGroupName, name, slot, siteEnvelope).block();
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreSlotWithResponseAsync(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        return service.beginRestoreSlot(this.client.getHost(), resourceGroupName, name, backupId, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreSlotAsync(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        return beginRestoreSlotWithResponseAsync(resourceGroupName, name, backupId, slot, request)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores a specific backup to another app (or deployment slot, if specified).
     * 
     * @param resourceGroupName 
     * @param name 
     * @param backupId 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreSlot(String resourceGroupName, String name, String backupId, String slot, RestoreRequestInner request) {
        beginRestoreSlotAsync(resourceGroupName, name, backupId, slot, request).block();
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<UserInner>> beginListPublishingCredentialsSlotWithResponseAsync(String resourceGroupName, String name, String slot) {
        return service.beginListPublishingCredentialsSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<UserInner> beginListPublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot) {
        return beginListPublishingCredentialsSlotWithResponseAsync(resourceGroupName, name, slot)
            .flatMap((SimpleResponse<UserInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Gets the Git/FTP publishing credentials of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public UserInner beginListPublishingCredentialsSlot(String resourceGroupName, String name, String slot) {
        return beginListPublishingCredentialsSlotAsync(resourceGroupName, name, slot).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> beginCreateMSDeployOperationSlotWithResponseAsync(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        return service.beginCreateMSDeployOperationSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> beginCreateMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        return beginCreateMSDeployOperationSlotWithResponseAsync(resourceGroupName, name, slot, mSDeploy)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner beginCreateMSDeployOperationSlot(String resourceGroupName, String name, String slot, MSDeploy mSDeploy) {
        return beginCreateMSDeployOperationSlotAsync(resourceGroupName, name, slot, mSDeploy).block();
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<FunctionEnvelopeInner>> beginCreateInstanceFunctionSlotWithResponseAsync(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        return service.beginCreateInstanceFunctionSlot(this.client.getHost(), resourceGroupName, name, functionName, slot, this.client.getSubscriptionId(), functionEnvelope, this.client.getApiVersion());
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FunctionEnvelopeInner> beginCreateInstanceFunctionSlotAsync(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        return beginCreateInstanceFunctionSlotWithResponseAsync(resourceGroupName, name, functionName, slot, functionEnvelope)
            .flatMap((SimpleResponse<FunctionEnvelopeInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Create function for web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param functionName 
     * @param slot 
     * @param functionEnvelope Function information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public FunctionEnvelopeInner beginCreateInstanceFunctionSlot(String resourceGroupName, String name, String functionName, String slot, FunctionEnvelopeInner functionEnvelope) {
        return beginCreateInstanceFunctionSlotAsync(resourceGroupName, name, functionName, slot, functionEnvelope).block();
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<MSDeployStatusInner>> beginCreateInstanceMSDeployOperationSlotWithResponseAsync(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        return service.beginCreateInstanceMSDeployOperationSlot(this.client.getHost(), resourceGroupName, name, slot, instanceId, this.client.getSubscriptionId(), mSDeploy, this.client.getApiVersion());
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<MSDeployStatusInner> beginCreateInstanceMSDeployOperationSlotAsync(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        return beginCreateInstanceMSDeployOperationSlotWithResponseAsync(resourceGroupName, name, slot, instanceId, mSDeploy)
            .flatMap((SimpleResponse<MSDeployStatusInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Invoke the MSDeploy web app extension.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param instanceId 
     * @param mSDeploy MSDeploy ARM PUT information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public MSDeployStatusInner beginCreateInstanceMSDeployOperationSlot(String resourceGroupName, String name, String slot, String instanceId, MSDeploy mSDeploy) {
        return beginCreateInstanceMSDeployOperationSlotAsync(resourceGroupName, name, slot, instanceId, mSDeploy).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartWebSiteNetworkTraceOperationSlotWithResponseAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.beginStartWebSiteNetworkTraceOperationSlot(this.client.getHost(), resourceGroupName, name, durationInSeconds, slot, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartWebSiteNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartWebSiteNetworkTraceOperationSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartWebSiteNetworkTraceOperationSlotAsync(String resourceGroupName, String name, String slot) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartWebSiteNetworkTraceOperationSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartWebSiteNetworkTraceOperationSlot(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartWebSiteNetworkTraceOperationSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartWebSiteNetworkTraceOperationSlot(String resourceGroupName, String name, String slot) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartWebSiteNetworkTraceOperationSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreFromBackupBlobSlotWithResponseAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return service.beginRestoreFromBackupBlobSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), request, this.client.getApiVersion());
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreFromBackupBlobSlotAsync(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        return beginRestoreFromBackupBlobSlotWithResponseAsync(resourceGroupName, name, slot, request)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores an app from a backup blob in Azure Storage.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param request Description of a restore request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreFromBackupBlobSlot(String resourceGroupName, String name, String slot, RestoreRequestInner request) {
        beginRestoreFromBackupBlobSlotAsync(resourceGroupName, name, slot, request).block();
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreFromDeletedAppSlotWithResponseAsync(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        return service.beginRestoreFromDeletedAppSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreFromDeletedAppSlotAsync(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        return beginRestoreFromDeletedAppSlotWithResponseAsync(resourceGroupName, name, slot, restoreRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores a deleted web app to this web app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about restoring a deleted app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreFromDeletedAppSlot(String resourceGroupName, String name, String slot, DeletedAppRestoreRequest restoreRequest) {
        beginRestoreFromDeletedAppSlotAsync(resourceGroupName, name, slot, restoreRequest).block();
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginRestoreSnapshotSlotWithResponseAsync(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        return service.beginRestoreSnapshotSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), restoreRequest, this.client.getApiVersion());
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginRestoreSnapshotSlotAsync(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        return beginRestoreSnapshotSlotWithResponseAsync(resourceGroupName, name, slot, restoreRequest)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Restores a web app from a snapshot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param restoreRequest Details about app recovery operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginRestoreSnapshotSlot(String resourceGroupName, String name, String slot, SnapshotRestoreRequest restoreRequest) {
        beginRestoreSnapshotSlotAsync(resourceGroupName, name, slot, restoreRequest).block();
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteExtensionInfoInner>> beginInstallSiteExtensionSlotWithResponseAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return service.beginInstallSiteExtensionSlot(this.client.getHost(), resourceGroupName, name, siteExtensionId, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteExtensionInfoInner> beginInstallSiteExtensionSlotAsync(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return beginInstallSiteExtensionSlotWithResponseAsync(resourceGroupName, name, siteExtensionId, slot)
            .flatMap((SimpleResponse<SiteExtensionInfoInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Install site extension on a web site, or a deployment slot.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteExtensionId 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteExtensionInfoInner beginInstallSiteExtensionSlot(String resourceGroupName, String name, String siteExtensionId, String slot) {
        return beginInstallSiteExtensionSlotAsync(resourceGroupName, name, siteExtensionId, slot).block();
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginCopySlotWithResponseAsync(String resourceGroupName, String name, String slot, CsmCopySlotEntityInner copySlotEntity) {
        return service.beginCopySlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), copySlotEntity, this.client.getApiVersion());
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginCopySlotAsync(String resourceGroupName, String name, String slot, CsmCopySlotEntityInner copySlotEntity) {
        return beginCopySlotWithResponseAsync(resourceGroupName, name, slot, copySlotEntity)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Copies a deployment slot to another deployment slot of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param copySlotEntity Copy deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginCopySlot(String resourceGroupName, String name, String slot, CsmCopySlotEntityInner copySlotEntity) {
        beginCopySlotAsync(resourceGroupName, name, slot, copySlotEntity).block();
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginSwapSlotWithResponseAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return service.beginSwapSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion());
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginSwapSlotAsync(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        return beginSwapSlotWithResponseAsync(resourceGroupName, name, slot, slotSwapEntity)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginSwapSlot(String resourceGroupName, String name, String slot, CsmSlotEntity slotSwapEntity) {
        beginSwapSlotAsync(resourceGroupName, name, slot, slotSwapEntity).block();
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSourceControlInner>> beginCreateOrUpdateSourceControlSlotWithResponseAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return service.beginCreateOrUpdateSourceControlSlot(this.client.getHost(), resourceGroupName, name, slot, this.client.getSubscriptionId(), siteSourceControl, this.client.getApiVersion());
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> beginCreateOrUpdateSourceControlSlotAsync(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return beginCreateOrUpdateSourceControlSlotWithResponseAsync(resourceGroupName, name, slot, siteSourceControl)
            .flatMap((SimpleResponse<SiteSourceControlInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner beginCreateOrUpdateSourceControlSlot(String resourceGroupName, String name, String slot, SiteSourceControlInner siteSourceControl) {
        return beginCreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, slot, siteSourceControl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartNetworkTraceSlotWithResponseAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.beginStartNetworkTraceSlot(this.client.getHost(), resourceGroupName, name, durationInSeconds, slot, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartNetworkTraceSlotAsync(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartNetworkTraceSlotAsync(String resourceGroupName, String name, String slot) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartNetworkTraceSlotWithResponseAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartNetworkTraceSlot(String resourceGroupName, String name, String slot, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartNetworkTraceSlot(String resourceGroupName, String name, String slot) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> beginSwapSlotWithProductionWithResponseAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return service.beginSwapSlotWithProduction(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), slotSwapEntity, this.client.getApiVersion());
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> beginSwapSlotWithProductionAsync(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        return beginSwapSlotWithProductionWithResponseAsync(resourceGroupName, name, slotSwapEntity)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Swaps two deployment slots of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param slotSwapEntity Deployment slot parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void beginSwapSlotWithProduction(String resourceGroupName, String name, CsmSlotEntity slotSwapEntity) {
        beginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity).block();
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<SiteSourceControlInner>> beginCreateOrUpdateSourceControlWithResponseAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return service.beginCreateOrUpdateSourceControl(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), siteSourceControl, this.client.getApiVersion());
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SiteSourceControlInner> beginCreateOrUpdateSourceControlAsync(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return beginCreateOrUpdateSourceControlWithResponseAsync(resourceGroupName, name, siteSourceControl)
            .flatMap((SimpleResponse<SiteSourceControlInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Updates the source control configuration of an app.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param siteSourceControl Source control configuration for an app.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SiteSourceControlInner beginCreateOrUpdateSourceControl(String resourceGroupName, String name, SiteSourceControlInner siteSourceControl) {
        return beginCreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<List<NetworkTraceInner>>> beginStartNetworkTraceWithResponseAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return service.beginStartNetworkTrace(this.client.getHost(), resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartNetworkTraceAsync(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartNetworkTraceWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<NetworkTraceInner>> beginStartNetworkTraceAsync(String resourceGroupName, String name) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartNetworkTraceWithResponseAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl)
            .flatMap((SimpleResponse<List<NetworkTraceInner>> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param durationInSeconds 
     * @param maxFrameLength 
     * @param sasUrl 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartNetworkTrace(String resourceGroupName, String name, Integer durationInSeconds, Integer maxFrameLength, String sasUrl) {
        return beginStartNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Description for Start capturing network packets for the site.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<NetworkTraceInner> beginStartNetworkTrace(String resourceGroupName, String name) {
        final Integer durationInSeconds = null;
        final Integer maxFrameLength = null;
        final String sasUrl = null;
        return beginStartNetworkTraceAsync(resourceGroupName, name, durationInSeconds, maxFrameLength, sasUrl).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInner>> listByResourceGroupNextSinglePageAsync(String nextLink) {
        return service.listByResourceGroupNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listBackupsNextSinglePageAsync(String nextLink) {
        return service.listBackupsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigResourceInner>> listConfigurationsNextSinglePageAsync(String nextLink) {
        return service.listConfigurationsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigurationSnapshotInfoInner>> listConfigurationSnapshotInfoNextSinglePageAsync(String nextLink) {
        return service.listConfigurationSnapshotInfoNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ContinuousWebJobInner>> listContinuousWebJobsNextSinglePageAsync(String nextLink) {
        return service.listContinuousWebJobsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentInner>> listDeploymentsNextSinglePageAsync(String nextLink) {
        return service.listDeploymentsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<IdentifierInner>> listDomainOwnershipIdentifiersNextSinglePageAsync(String nextLink) {
        return service.listDomainOwnershipIdentifiersNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<FunctionEnvelopeInner>> listFunctionsNextSinglePageAsync(String nextLink) {
        return service.listFunctionsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<HostNameBindingInner>> listHostNameBindingsNextSinglePageAsync(String nextLink) {
        return service.listHostNameBindingsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInstanceInner>> listInstanceIdentifiersNextSinglePageAsync(String nextLink) {
        return service.listInstanceIdentifiersNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listInstanceProcessesNextSinglePageAsync(String nextLink) {
        return service.listInstanceProcessesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listInstanceProcessModulesNextSinglePageAsync(String nextLink) {
        return service.listInstanceProcessModulesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listInstanceProcessThreadsNextSinglePageAsync(String nextLink) {
        return service.listInstanceProcessThreadsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listSiteBackupsNextSinglePageAsync(String nextLink) {
        return service.listSiteBackupsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PerfMonResponseInner>> listPerfMonCountersNextSinglePageAsync(String nextLink) {
        return service.listPerfMonCountersNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listProcessesNextSinglePageAsync(String nextLink) {
        return service.listProcessesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listProcessModulesNextSinglePageAsync(String nextLink) {
        return service.listProcessModulesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listProcessThreadsNextSinglePageAsync(String nextLink) {
        return service.listProcessThreadsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PublicCertificateInner>> listPublicCertificatesNextSinglePageAsync(String nextLink) {
        return service.listPublicCertificatesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteExtensionInfoInner>> listSiteExtensionsNextSinglePageAsync(String nextLink) {
        return service.listSiteExtensionsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInner>> listSlotsNextSinglePageAsync(String nextLink) {
        return service.listSlotsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listBackupsSlotNextSinglePageAsync(String nextLink) {
        return service.listBackupsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigResourceInner>> listConfigurationsSlotNextSinglePageAsync(String nextLink) {
        return service.listConfigurationsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteConfigurationSnapshotInfoInner>> listConfigurationSnapshotInfoSlotNextSinglePageAsync(String nextLink) {
        return service.listConfigurationSnapshotInfoSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ContinuousWebJobInner>> listContinuousWebJobsSlotNextSinglePageAsync(String nextLink) {
        return service.listContinuousWebJobsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DeploymentInner>> listDeploymentsSlotNextSinglePageAsync(String nextLink) {
        return service.listDeploymentsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<IdentifierInner>> listDomainOwnershipIdentifiersSlotNextSinglePageAsync(String nextLink) {
        return service.listDomainOwnershipIdentifiersSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<FunctionEnvelopeInner>> listInstanceFunctionsSlotNextSinglePageAsync(String nextLink) {
        return service.listInstanceFunctionsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<HostNameBindingInner>> listHostNameBindingsSlotNextSinglePageAsync(String nextLink) {
        return service.listHostNameBindingsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteInstanceInner>> listInstanceIdentifiersSlotNextSinglePageAsync(String nextLink) {
        return service.listInstanceIdentifiersSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listInstanceProcessesSlotNextSinglePageAsync(String nextLink) {
        return service.listInstanceProcessesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listInstanceProcessModulesSlotNextSinglePageAsync(String nextLink) {
        return service.listInstanceProcessModulesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listInstanceProcessThreadsSlotNextSinglePageAsync(String nextLink) {
        return service.listInstanceProcessThreadsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BackupItemInner>> listSiteBackupsSlotNextSinglePageAsync(String nextLink) {
        return service.listSiteBackupsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PerfMonResponseInner>> listPerfMonCountersSlotNextSinglePageAsync(String nextLink) {
        return service.listPerfMonCountersSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessInfoInner>> listProcessesSlotNextSinglePageAsync(String nextLink) {
        return service.listProcessesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessModuleInfoInner>> listProcessModulesSlotNextSinglePageAsync(String nextLink) {
        return service.listProcessModulesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ProcessThreadInfoInner>> listProcessThreadsSlotNextSinglePageAsync(String nextLink) {
        return service.listProcessThreadsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PublicCertificateInner>> listPublicCertificatesSlotNextSinglePageAsync(String nextLink) {
        return service.listPublicCertificatesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SiteExtensionInfoInner>> listSiteExtensionsSlotNextSinglePageAsync(String nextLink) {
        return service.listSiteExtensionsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SlotDifferenceInner>> listSlotDifferencesSlotNextSinglePageAsync(String nextLink) {
        return service.listSlotDifferencesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsSlotNextSinglePageAsync(String nextLink) {
        return service.listSnapshotsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsFromDRSecondarySlotNextSinglePageAsync(String nextLink) {
        return service.listSnapshotsFromDRSecondarySlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredWebJobInner>> listTriggeredWebJobsSlotNextSinglePageAsync(String nextLink) {
        return service.listTriggeredWebJobsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredJobHistoryInner>> listTriggeredWebJobHistorySlotNextSinglePageAsync(String nextLink) {
        return service.listTriggeredWebJobHistorySlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CsmUsageQuotaInner>> listUsagesSlotNextSinglePageAsync(String nextLink) {
        return service.listUsagesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<WebJobInner>> listWebJobsSlotNextSinglePageAsync(String nextLink) {
        return service.listWebJobsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SlotDifferenceInner>> listSlotDifferencesFromProductionNextSinglePageAsync(String nextLink) {
        return service.listSlotDifferencesFromProductionNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsNextSinglePageAsync(String nextLink) {
        return service.listSnapshotsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<SnapshotInner>> listSnapshotsFromDRSecondaryNextSinglePageAsync(String nextLink) {
        return service.listSnapshotsFromDRSecondaryNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredWebJobInner>> listTriggeredWebJobsNextSinglePageAsync(String nextLink) {
        return service.listTriggeredWebJobsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<TriggeredJobHistoryInner>> listTriggeredWebJobHistoryNextSinglePageAsync(String nextLink) {
        return service.listTriggeredWebJobHistoryNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CsmUsageQuotaInner>> listUsagesNextSinglePageAsync(String nextLink) {
        return service.listUsagesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<WebJobInner>> listWebJobsNextSinglePageAsync(String nextLink) {
        return service.listWebJobsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
