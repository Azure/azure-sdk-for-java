// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.appservice.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.appservice.DefaultErrorResponseException;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Diagnostics.
 */
public final class DiagnosticsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private DiagnosticsService service;

    /**
     * The service client containing this operation class.
     */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of DiagnosticsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public DiagnosticsInner(WebSiteManagementClientImpl client) {
        this.service = RestProxy.create(DiagnosticsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * WebSiteManagementClientDiagnostics to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementClientDiagnostics")
    private interface DiagnosticsService {
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseCollectionInner>> listHostingEnvironmentDetectorResponses(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseInner>> getHostingEnvironmentDetectorResponse(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("name") String name, @PathParam("detectorName") String detectorName, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseCollectionInner>> listSiteDetectorResponses(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseInner>> getSiteDetectorResponse(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("detectorName") String detectorName, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticCategoryCollectionInner>> listSiteDiagnosticCategories(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticCategoryInner>> getSiteDiagnosticCategory(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticAnalysisCollectionInner>> listSiteAnalyses(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AnalysisDefinitionInner>> getSiteAnalysis(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("analysisName") String analysisName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticAnalysisInner>> executeSiteAnalysis(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("analysisName") String analysisName, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticDetectorCollectionInner>> listSiteDetectors(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorDefinitionInner>> getSiteDetector(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("detectorName") String detectorName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticDetectorResponseInner>> executeSiteDetector(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("detectorName") String detectorName, @PathParam("diagnosticCategory") String diagnosticCategory, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseCollectionInner>> listSiteDetectorResponsesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseInner>> getSiteDetectorResponseSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("detectorName") String detectorName, @PathParam("slot") String slot, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticCategoryCollectionInner>> listSiteDiagnosticCategoriesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticCategoryInner>> getSiteDiagnosticCategorySlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticAnalysisCollectionInner>> listSiteAnalysesSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<AnalysisDefinitionInner>> getSiteAnalysisSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("analysisName") String analysisName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticAnalysisInner>> executeSiteAnalysisSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("analysisName") String analysisName, @PathParam("slot") String slot, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticDetectorCollectionInner>> listSiteDetectorsSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorDefinitionInner>> getSiteDetectorSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("detectorName") String detectorName, @PathParam("slot") String slot, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticDetectorResponseInner>> executeSiteDetectorSlot(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("detectorName") String detectorName, @PathParam("diagnosticCategory") String diagnosticCategory, @PathParam("slot") String slot, @QueryParam("startTime") OffsetDateTime startTime, @QueryParam("endTime") OffsetDateTime endTime, @QueryParam("timeGrain") String timeGrain, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseCollectionInner>> listHostingEnvironmentDetectorResponsesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseCollectionInner>> listSiteDetectorResponsesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticCategoryCollectionInner>> listSiteDiagnosticCategoriesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticAnalysisCollectionInner>> listSiteAnalysesNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticDetectorCollectionInner>> listSiteDetectorsNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DetectorResponseCollectionInner>> listSiteDetectorResponsesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticCategoryCollectionInner>> listSiteDiagnosticCategoriesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticAnalysisCollectionInner>> listSiteAnalysesSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<DiagnosticDetectorCollectionInner>> listSiteDetectorsSlotNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Description for List Hosting Environment Detector Responses.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorResponseInner>> listHostingEnvironmentDetectorResponsesSinglePageAsync(String resourceGroupName, String name) {
        return service.listHostingEnvironmentDetectorResponses(this.client.getHost(), resourceGroupName, name, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List Hosting Environment Detector Responses.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DetectorResponseInner> listHostingEnvironmentDetectorResponsesAsync(String resourceGroupName, String name) {
        return new PagedFlux<>(
            () -> listHostingEnvironmentDetectorResponsesSinglePageAsync(resourceGroupName, name),
            nextLink -> listHostingEnvironmentDetectorResponsesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List Hosting Environment Detector Responses.
     * 
     * @param resourceGroupName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DetectorResponseInner> listHostingEnvironmentDetectorResponses(String resourceGroupName, String name) {
        return new PagedIterable<>(listHostingEnvironmentDetectorResponsesAsync(resourceGroupName, name));
    }

    /**
     * Description for Get Hosting Environment Detector Response.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param detectorName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectorResponseInner>> getHostingEnvironmentDetectorResponseWithResponseAsync(String resourceGroupName, String name, String detectorName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.getHostingEnvironmentDetectorResponse(this.client.getHost(), resourceGroupName, name, detectorName, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Hosting Environment Detector Response.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param detectorName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorResponseInner> getHostingEnvironmentDetectorResponseAsync(String resourceGroupName, String name, String detectorName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return getHostingEnvironmentDetectorResponseWithResponseAsync(resourceGroupName, name, detectorName, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Hosting Environment Detector Response.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorResponseInner> getHostingEnvironmentDetectorResponseAsync(String resourceGroupName, String name, String detectorName) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return getHostingEnvironmentDetectorResponseWithResponseAsync(resourceGroupName, name, detectorName, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Hosting Environment Detector Response.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param detectorName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorResponseInner getHostingEnvironmentDetectorResponse(String resourceGroupName, String name, String detectorName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return getHostingEnvironmentDetectorResponseAsync(resourceGroupName, name, detectorName, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get Hosting Environment Detector Response.
     * 
     * @param resourceGroupName 
     * @param name 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorResponseInner getHostingEnvironmentDetectorResponse(String resourceGroupName, String name, String detectorName) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return getHostingEnvironmentDetectorResponseAsync(resourceGroupName, name, detectorName, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for List Site Detector Responses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorResponseInner>> listSiteDetectorResponsesSinglePageAsync(String resourceGroupName, String siteName) {
        return service.listSiteDetectorResponses(this.client.getHost(), resourceGroupName, siteName, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List Site Detector Responses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DetectorResponseInner> listSiteDetectorResponsesAsync(String resourceGroupName, String siteName) {
        return new PagedFlux<>(
            () -> listSiteDetectorResponsesSinglePageAsync(resourceGroupName, siteName),
            nextLink -> listSiteDetectorResponsesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List Site Detector Responses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DetectorResponseInner> listSiteDetectorResponses(String resourceGroupName, String siteName) {
        return new PagedIterable<>(listSiteDetectorResponsesAsync(resourceGroupName, siteName));
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectorResponseInner>> getSiteDetectorResponseWithResponseAsync(String resourceGroupName, String siteName, String detectorName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.getSiteDetectorResponse(this.client.getHost(), resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorResponseInner> getSiteDetectorResponseAsync(String resourceGroupName, String siteName, String detectorName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return getSiteDetectorResponseWithResponseAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorResponseInner> getSiteDetectorResponseAsync(String resourceGroupName, String siteName, String detectorName) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return getSiteDetectorResponseWithResponseAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorResponseInner getSiteDetectorResponse(String resourceGroupName, String siteName, String detectorName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return getSiteDetectorResponseAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorResponseInner getSiteDetectorResponse(String resourceGroupName, String siteName, String detectorName) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return getSiteDetectorResponseAsync(resourceGroupName, siteName, detectorName, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get Diagnostics Categories.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DiagnosticCategoryInner>> listSiteDiagnosticCategoriesSinglePageAsync(String resourceGroupName, String siteName) {
        return service.listSiteDiagnosticCategories(this.client.getHost(), resourceGroupName, siteName, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get Diagnostics Categories.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiagnosticCategoryInner> listSiteDiagnosticCategoriesAsync(String resourceGroupName, String siteName) {
        return new PagedFlux<>(
            () -> listSiteDiagnosticCategoriesSinglePageAsync(resourceGroupName, siteName),
            nextLink -> listSiteDiagnosticCategoriesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get Diagnostics Categories.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiagnosticCategoryInner> listSiteDiagnosticCategories(String resourceGroupName, String siteName) {
        return new PagedIterable<>(listSiteDiagnosticCategoriesAsync(resourceGroupName, siteName));
    }

    /**
     * Description for Get Diagnostics Category.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticCategoryInner>> getSiteDiagnosticCategoryWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory) {
        return service.getSiteDiagnosticCategory(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Diagnostics Category.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticCategoryInner> getSiteDiagnosticCategoryAsync(String resourceGroupName, String siteName, String diagnosticCategory) {
        return getSiteDiagnosticCategoryWithResponseAsync(resourceGroupName, siteName, diagnosticCategory)
            .flatMap((SimpleResponse<DiagnosticCategoryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Diagnostics Category.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticCategoryInner getSiteDiagnosticCategory(String resourceGroupName, String siteName, String diagnosticCategory) {
        return getSiteDiagnosticCategoryAsync(resourceGroupName, siteName, diagnosticCategory).block();
    }

    /**
     * Description for Get Site Analyses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AnalysisDefinitionInner>> listSiteAnalysesSinglePageAsync(String resourceGroupName, String siteName, String diagnosticCategory) {
        return service.listSiteAnalyses(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get Site Analyses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AnalysisDefinitionInner> listSiteAnalysesAsync(String resourceGroupName, String siteName, String diagnosticCategory) {
        return new PagedFlux<>(
            () -> listSiteAnalysesSinglePageAsync(resourceGroupName, siteName, diagnosticCategory),
            nextLink -> listSiteAnalysesNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get Site Analyses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalysisDefinitionInner> listSiteAnalyses(String resourceGroupName, String siteName, String diagnosticCategory) {
        return new PagedIterable<>(listSiteAnalysesAsync(resourceGroupName, siteName, diagnosticCategory));
    }

    /**
     * Description for Get Site Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AnalysisDefinitionInner>> getSiteAnalysisWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName) {
        return service.getSiteAnalysis(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, analysisName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Site Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalysisDefinitionInner> getSiteAnalysisAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName) {
        return getSiteAnalysisWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, analysisName)
            .flatMap((SimpleResponse<AnalysisDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Site Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisDefinitionInner getSiteAnalysis(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName) {
        return getSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName).block();
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticAnalysisInner>> executeSiteAnalysisWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.executeSiteAnalysis(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticAnalysisInner> executeSiteAnalysisAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteAnalysisWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticAnalysisInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticAnalysisInner> executeSiteAnalysisAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteAnalysisWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticAnalysisInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticAnalysisInner executeSiteAnalysis(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticAnalysisInner executeSiteAnalysis(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get Detectors.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorDefinitionInner>> listSiteDetectorsSinglePageAsync(String resourceGroupName, String siteName, String diagnosticCategory) {
        return service.listSiteDetectors(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get Detectors.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DetectorDefinitionInner> listSiteDetectorsAsync(String resourceGroupName, String siteName, String diagnosticCategory) {
        return new PagedFlux<>(
            () -> listSiteDetectorsSinglePageAsync(resourceGroupName, siteName, diagnosticCategory),
            nextLink -> listSiteDetectorsNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get Detectors.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DetectorDefinitionInner> listSiteDetectors(String resourceGroupName, String siteName, String diagnosticCategory) {
        return new PagedIterable<>(listSiteDetectorsAsync(resourceGroupName, siteName, diagnosticCategory));
    }

    /**
     * Description for Get Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectorDefinitionInner>> getSiteDetectorWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName) {
        return service.getSiteDetector(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, detectorName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorDefinitionInner> getSiteDetectorAsync(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName) {
        return getSiteDetectorWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, detectorName)
            .flatMap((SimpleResponse<DetectorDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param detectorName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorDefinitionInner getSiteDetector(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName) {
        return getSiteDetectorAsync(resourceGroupName, siteName, diagnosticCategory, detectorName).block();
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticDetectorResponseInner>> executeSiteDetectorWithResponseAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.executeSiteDetector(this.client.getHost(), resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticDetectorResponseInner> executeSiteDetectorAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteDetectorWithResponseAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticDetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticDetectorResponseInner> executeSiteDetectorAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteDetectorWithResponseAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticDetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticDetectorResponseInner executeSiteDetector(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteDetectorAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticDetectorResponseInner executeSiteDetector(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteDetectorAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for List Site Detector Responses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorResponseInner>> listSiteDetectorResponsesSlotSinglePageAsync(String resourceGroupName, String siteName, String slot) {
        return service.listSiteDetectorResponsesSlot(this.client.getHost(), resourceGroupName, siteName, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List Site Detector Responses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DetectorResponseInner> listSiteDetectorResponsesSlotAsync(String resourceGroupName, String siteName, String slot) {
        return new PagedFlux<>(
            () -> listSiteDetectorResponsesSlotSinglePageAsync(resourceGroupName, siteName, slot),
            nextLink -> listSiteDetectorResponsesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List Site Detector Responses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DetectorResponseInner> listSiteDetectorResponsesSlot(String resourceGroupName, String siteName, String slot) {
        return new PagedIterable<>(listSiteDetectorResponsesSlotAsync(resourceGroupName, siteName, slot));
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectorResponseInner>> getSiteDetectorResponseSlotWithResponseAsync(String resourceGroupName, String siteName, String detectorName, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.getSiteDetectorResponseSlot(this.client.getHost(), resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorResponseInner> getSiteDetectorResponseSlotAsync(String resourceGroupName, String siteName, String detectorName, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return getSiteDetectorResponseSlotWithResponseAsync(resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorResponseInner> getSiteDetectorResponseSlotAsync(String resourceGroupName, String siteName, String detectorName, String slot) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return getSiteDetectorResponseSlotWithResponseAsync(resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorResponseInner getSiteDetectorResponseSlot(String resourceGroupName, String siteName, String detectorName, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return getSiteDetectorResponseSlotAsync(resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get site detector response.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorResponseInner getSiteDetectorResponseSlot(String resourceGroupName, String siteName, String detectorName, String slot) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return getSiteDetectorResponseSlotAsync(resourceGroupName, siteName, detectorName, slot, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get Diagnostics Categories.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DiagnosticCategoryInner>> listSiteDiagnosticCategoriesSlotSinglePageAsync(String resourceGroupName, String siteName, String slot) {
        return service.listSiteDiagnosticCategoriesSlot(this.client.getHost(), resourceGroupName, siteName, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get Diagnostics Categories.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DiagnosticCategoryInner> listSiteDiagnosticCategoriesSlotAsync(String resourceGroupName, String siteName, String slot) {
        return new PagedFlux<>(
            () -> listSiteDiagnosticCategoriesSlotSinglePageAsync(resourceGroupName, siteName, slot),
            nextLink -> listSiteDiagnosticCategoriesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get Diagnostics Categories.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiagnosticCategoryInner> listSiteDiagnosticCategoriesSlot(String resourceGroupName, String siteName, String slot) {
        return new PagedIterable<>(listSiteDiagnosticCategoriesSlotAsync(resourceGroupName, siteName, slot));
    }

    /**
     * Description for Get Diagnostics Category.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticCategoryInner>> getSiteDiagnosticCategorySlotWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return service.getSiteDiagnosticCategorySlot(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Diagnostics Category.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticCategoryInner> getSiteDiagnosticCategorySlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return getSiteDiagnosticCategorySlotWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, slot)
            .flatMap((SimpleResponse<DiagnosticCategoryInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Diagnostics Category.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticCategoryInner getSiteDiagnosticCategorySlot(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return getSiteDiagnosticCategorySlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).block();
    }

    /**
     * Description for Get Site Analyses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AnalysisDefinitionInner>> listSiteAnalysesSlotSinglePageAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return service.listSiteAnalysesSlot(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get Site Analyses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<AnalysisDefinitionInner> listSiteAnalysesSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return new PagedFlux<>(
            () -> listSiteAnalysesSlotSinglePageAsync(resourceGroupName, siteName, diagnosticCategory, slot),
            nextLink -> listSiteAnalysesSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get Site Analyses.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AnalysisDefinitionInner> listSiteAnalysesSlot(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return new PagedIterable<>(listSiteAnalysesSlotAsync(resourceGroupName, siteName, diagnosticCategory, slot));
    }

    /**
     * Description for Get Site Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AnalysisDefinitionInner>> getSiteAnalysisSlotWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot) {
        return service.getSiteAnalysisSlot(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, analysisName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Site Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AnalysisDefinitionInner> getSiteAnalysisSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot) {
        return getSiteAnalysisSlotWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot)
            .flatMap((SimpleResponse<AnalysisDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Site Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AnalysisDefinitionInner getSiteAnalysisSlot(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot) {
        return getSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot).block();
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticAnalysisInner>> executeSiteAnalysisSlotWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.executeSiteAnalysisSlot(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticAnalysisInner> executeSiteAnalysisSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteAnalysisSlotWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticAnalysisInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticAnalysisInner> executeSiteAnalysisSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteAnalysisSlotWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticAnalysisInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticAnalysisInner executeSiteAnalysisSlot(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Execute Analysis.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param analysisName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticAnalysisInner executeSiteAnalysisSlot(String resourceGroupName, String siteName, String diagnosticCategory, String analysisName, String slot) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Get Detectors.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorDefinitionInner>> listSiteDetectorsSlotSinglePageAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return service.listSiteDetectorsSlot(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, slot, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get Detectors.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DetectorDefinitionInner> listSiteDetectorsSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return new PagedFlux<>(
            () -> listSiteDetectorsSlotSinglePageAsync(resourceGroupName, siteName, diagnosticCategory, slot),
            nextLink -> listSiteDetectorsSlotNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get Detectors.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DetectorDefinitionInner> listSiteDetectorsSlot(String resourceGroupName, String siteName, String diagnosticCategory, String slot) {
        return new PagedIterable<>(listSiteDetectorsSlotAsync(resourceGroupName, siteName, diagnosticCategory, slot));
    }

    /**
     * Description for Get Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param detectorName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectorDefinitionInner>> getSiteDetectorSlotWithResponseAsync(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot) {
        return service.getSiteDetectorSlot(this.client.getHost(), resourceGroupName, siteName, diagnosticCategory, detectorName, slot, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param detectorName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectorDefinitionInner> getSiteDetectorSlotAsync(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot) {
        return getSiteDetectorSlotWithResponseAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, slot)
            .flatMap((SimpleResponse<DetectorDefinitionInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param diagnosticCategory 
     * @param detectorName 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DetectorDefinitionInner getSiteDetectorSlot(String resourceGroupName, String siteName, String diagnosticCategory, String detectorName, String slot) {
        return getSiteDetectorSlotAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, slot).block();
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DiagnosticDetectorResponseInner>> executeSiteDetectorSlotWithResponseAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return service.executeSiteDetectorSlot(this.client.getHost(), resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticDetectorResponseInner> executeSiteDetectorSlotAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteDetectorSlotWithResponseAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticDetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DiagnosticDetectorResponseInner> executeSiteDetectorSlotAsync(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteDetectorSlotWithResponseAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain)
            .flatMap((SimpleResponse<DiagnosticDetectorResponseInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param slot 
     * @param startTime 
     * @param endTime 
     * @param timeGrain 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticDetectorResponseInner executeSiteDetectorSlot(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot, OffsetDateTime startTime, OffsetDateTime endTime, String timeGrain) {
        return executeSiteDetectorSlotAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain).block();
    }

    /**
     * Description for Execute Detector.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param detectorName 
     * @param diagnosticCategory 
     * @param slot 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiagnosticDetectorResponseInner executeSiteDetectorSlot(String resourceGroupName, String siteName, String detectorName, String diagnosticCategory, String slot) {
        final OffsetDateTime startTime = null;
        final OffsetDateTime endTime = null;
        final String timeGrain = null;
        return executeSiteDetectorSlotAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorResponseInner>> listHostingEnvironmentDetectorResponsesNextSinglePageAsync(String nextLink) {
        return service.listHostingEnvironmentDetectorResponsesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorResponseInner>> listSiteDetectorResponsesNextSinglePageAsync(String nextLink) {
        return service.listSiteDetectorResponsesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DiagnosticCategoryInner>> listSiteDiagnosticCategoriesNextSinglePageAsync(String nextLink) {
        return service.listSiteDiagnosticCategoriesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AnalysisDefinitionInner>> listSiteAnalysesNextSinglePageAsync(String nextLink) {
        return service.listSiteAnalysesNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorDefinitionInner>> listSiteDetectorsNextSinglePageAsync(String nextLink) {
        return service.listSiteDetectorsNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorResponseInner>> listSiteDetectorResponsesSlotNextSinglePageAsync(String nextLink) {
        return service.listSiteDetectorResponsesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DiagnosticCategoryInner>> listSiteDiagnosticCategoriesSlotNextSinglePageAsync(String nextLink) {
        return service.listSiteDiagnosticCategoriesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<AnalysisDefinitionInner>> listSiteAnalysesSlotNextSinglePageAsync(String nextLink) {
        return service.listSiteAnalysesSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DetectorDefinitionInner>> listSiteDetectorsSlotNextSinglePageAsync(String nextLink) {
        return service.listSiteDetectorsSlotNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
