// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.appservice.models;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.appservice.DefaultErrorResponseException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Recommendations.
 */
public final class RecommendationsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private RecommendationsService service;

    /**
     * The service client containing this operation class.
     */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of RecommendationsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public RecommendationsInner(WebSiteManagementClientImpl client) {
        this.service = RestProxy.create(RecommendationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * WebSiteManagementClientRecommendations to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WebSiteManagementClientRecommendations")
    private interface RecommendationsService {
        @Get("/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> list(@HostParam("$host") String host, @QueryParam("featured") Boolean featured, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resetAllFilters(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/{name}/disable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> disableRecommendationForSubscription(@HostParam("$host") String host, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendationHistory")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listHistoryForHostingEnvironment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostingEnvironmentName") String hostingEnvironmentName, @QueryParam("expiredOnly") Boolean expiredOnly, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listRecommendedRulesForHostingEnvironment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostingEnvironmentName") String hostingEnvironmentName, @QueryParam("featured") Boolean featured, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/disable")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> disableAllForHostingEnvironment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("environmentName") String environmentName, @PathParam("hostingEnvironmentName") String hostingEnvironmentName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/reset")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resetAllFiltersForHostingEnvironment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("environmentName") String environmentName, @PathParam("hostingEnvironmentName") String hostingEnvironmentName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationRuleInner>> getRuleDetailsByHostingEnvironment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("hostingEnvironmentName") String hostingEnvironmentName, @PathParam("name") String name, @QueryParam("updateSeen") Boolean updateSeen, @QueryParam("recommendationId") String recommendationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{hostingEnvironmentName}/recommendations/{name}/disable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> disableRecommendationForHostingEnvironment(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @QueryParam("environmentName") String environmentName, @PathParam("name") String name, @PathParam("hostingEnvironmentName") String hostingEnvironmentName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listHistoryForWebApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @QueryParam("expiredOnly") Boolean expiredOnly, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listRecommendedRulesForWebApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @QueryParam("featured") Boolean featured, @QueryParam(value = "$filter", encoded = true) String filter, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> disableAllForWebApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> resetAllFiltersForWebApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationRuleInner>> getRuleDetailsByWebApp(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("name") String name, @QueryParam("updateSeen") Boolean updateSeen, @QueryParam("recommendationId") String recommendationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}/disable")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<Response<Void>> disableRecommendationForSite(@HostParam("$host") String host, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("siteName") String siteName, @PathParam("name") String name, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listHistoryForHostingEnvironmentNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listRecommendedRulesForHostingEnvironmentNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listHistoryForWebAppNext(@PathParam(value = "nextLink", encoded = true) String nextLink);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorResponseException.class)
        Mono<SimpleResponse<RecommendationCollectionInner>> listRecommendedRulesForWebAppNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * Description for List all recommendations for a subscription.
     * 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listSinglePageAsync(Boolean featured, String filter) {
        return service.list(this.client.getHost(), featured, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for List all recommendations for a subscription.
     * 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listAsync(Boolean featured, String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(featured, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List all recommendations for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listAsync() {
        final Boolean featured = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listSinglePageAsync(featured, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Description for List all recommendations for a subscription.
     * 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> list(Boolean featured, String filter) {
        return new PagedIterable<>(listAsync(featured, filter));
    }

    /**
     * Description for List all recommendations for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> list() {
        final Boolean featured = null;
        final String filter = null;
        return new PagedIterable<>(listAsync(featured, filter));
    }

    /**
     * Description for Reset all recommendation opt-out settings for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetAllFiltersWithResponseAsync() {
        return service.resetAllFilters(this.client.getHost(), this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Reset all recommendation opt-out settings for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetAllFiltersAsync() {
        return resetAllFiltersWithResponseAsync()
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Reset all recommendation opt-out settings for a subscription.
     * 
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetAllFilters() {
        resetAllFiltersAsync().block();
    }

    /**
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableRecommendationForSubscriptionWithResponseAsync(String name) {
        return service.disableRecommendationForSubscription(this.client.getHost(), name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableRecommendationForSubscriptionAsync(String name) {
        return disableRecommendationForSubscriptionWithResponseAsync(name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Disables the specified rule so it will not apply to a subscription in the future.
     * 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableRecommendationForSubscription(String name) {
        disableRecommendationForSubscriptionAsync(name).block();
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param expiredOnly 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listHistoryForHostingEnvironmentSinglePageAsync(String resourceGroupName, String hostingEnvironmentName, Boolean expiredOnly, String filter) {
        return service.listHistoryForHostingEnvironment(this.client.getHost(), resourceGroupName, hostingEnvironmentName, expiredOnly, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param expiredOnly 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listHistoryForHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, Boolean expiredOnly, String filter) {
        return new PagedFlux<>(
            () -> listHistoryForHostingEnvironmentSinglePageAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter),
            nextLink -> listHistoryForHostingEnvironmentNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listHistoryForHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName) {
        final Boolean expiredOnly = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listHistoryForHostingEnvironmentSinglePageAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter),
            nextLink -> listHistoryForHostingEnvironmentNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param expiredOnly 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listHistoryForHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, Boolean expiredOnly, String filter) {
        return new PagedIterable<>(listHistoryForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listHistoryForHostingEnvironment(String resourceGroupName, String hostingEnvironmentName) {
        final Boolean expiredOnly = null;
        final String filter = null;
        return new PagedIterable<>(listHistoryForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, expiredOnly, filter));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listRecommendedRulesForHostingEnvironmentSinglePageAsync(String resourceGroupName, String hostingEnvironmentName, Boolean featured, String filter) {
        return service.listRecommendedRulesForHostingEnvironment(this.client.getHost(), resourceGroupName, hostingEnvironmentName, featured, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listRecommendedRulesForHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, Boolean featured, String filter) {
        return new PagedFlux<>(
            () -> listRecommendedRulesForHostingEnvironmentSinglePageAsync(resourceGroupName, hostingEnvironmentName, featured, filter),
            nextLink -> listRecommendedRulesForHostingEnvironmentNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listRecommendedRulesForHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName) {
        final Boolean featured = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listRecommendedRulesForHostingEnvironmentSinglePageAsync(resourceGroupName, hostingEnvironmentName, featured, filter),
            nextLink -> listRecommendedRulesForHostingEnvironmentNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listRecommendedRulesForHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, Boolean featured, String filter) {
        return new PagedIterable<>(listRecommendedRulesForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, featured, filter));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listRecommendedRulesForHostingEnvironment(String resourceGroupName, String hostingEnvironmentName) {
        final Boolean featured = null;
        final String filter = null;
        return new PagedIterable<>(listRecommendedRulesForHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, featured, filter));
    }

    /**
     * Description for Disable all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableAllForHostingEnvironmentWithResponseAsync(String resourceGroupName, String environmentName, String hostingEnvironmentName) {
        return service.disableAllForHostingEnvironment(this.client.getHost(), resourceGroupName, environmentName, hostingEnvironmentName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Disable all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableAllForHostingEnvironmentAsync(String resourceGroupName, String environmentName, String hostingEnvironmentName) {
        return disableAllForHostingEnvironmentWithResponseAsync(resourceGroupName, environmentName, hostingEnvironmentName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Disable all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableAllForHostingEnvironment(String resourceGroupName, String environmentName, String hostingEnvironmentName) {
        disableAllForHostingEnvironmentAsync(resourceGroupName, environmentName, hostingEnvironmentName).block();
    }

    /**
     * Description for Reset all recommendation opt-out settings for an app.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetAllFiltersForHostingEnvironmentWithResponseAsync(String resourceGroupName, String environmentName, String hostingEnvironmentName) {
        return service.resetAllFiltersForHostingEnvironment(this.client.getHost(), resourceGroupName, environmentName, hostingEnvironmentName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Reset all recommendation opt-out settings for an app.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetAllFiltersForHostingEnvironmentAsync(String resourceGroupName, String environmentName, String hostingEnvironmentName) {
        return resetAllFiltersForHostingEnvironmentWithResponseAsync(resourceGroupName, environmentName, hostingEnvironmentName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Reset all recommendation opt-out settings for an app.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetAllFiltersForHostingEnvironment(String resourceGroupName, String environmentName, String hostingEnvironmentName) {
        resetAllFiltersForHostingEnvironmentAsync(resourceGroupName, environmentName, hostingEnvironmentName).block();
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param name 
     * @param updateSeen 
     * @param recommendationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecommendationRuleInner>> getRuleDetailsByHostingEnvironmentWithResponseAsync(String resourceGroupName, String hostingEnvironmentName, String name, Boolean updateSeen, String recommendationId) {
        return service.getRuleDetailsByHostingEnvironment(this.client.getHost(), resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param name 
     * @param updateSeen 
     * @param recommendationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecommendationRuleInner> getRuleDetailsByHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, String name, Boolean updateSeen, String recommendationId) {
        return getRuleDetailsByHostingEnvironmentWithResponseAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId)
            .flatMap((SimpleResponse<RecommendationRuleInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecommendationRuleInner> getRuleDetailsByHostingEnvironmentAsync(String resourceGroupName, String hostingEnvironmentName, String name) {
        final Boolean updateSeen = null;
        final String recommendationId = null;
        return getRuleDetailsByHostingEnvironmentWithResponseAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId)
            .flatMap((SimpleResponse<RecommendationRuleInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param name 
     * @param updateSeen 
     * @param recommendationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecommendationRuleInner getRuleDetailsByHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, String name, Boolean updateSeen, String recommendationId) {
        return getRuleDetailsByHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId).block();
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param hostingEnvironmentName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecommendationRuleInner getRuleDetailsByHostingEnvironment(String resourceGroupName, String hostingEnvironmentName, String name) {
        final Boolean updateSeen = null;
        final String recommendationId = null;
        return getRuleDetailsByHostingEnvironmentAsync(resourceGroupName, hostingEnvironmentName, name, updateSeen, recommendationId).block();
    }

    /**
     * Description for Disables the specific rule for a web site permanently.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param name 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableRecommendationForHostingEnvironmentWithResponseAsync(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName) {
        return service.disableRecommendationForHostingEnvironment(this.client.getHost(), resourceGroupName, environmentName, name, hostingEnvironmentName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Disables the specific rule for a web site permanently.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param name 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableRecommendationForHostingEnvironmentAsync(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName) {
        return disableRecommendationForHostingEnvironmentWithResponseAsync(resourceGroupName, environmentName, name, hostingEnvironmentName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Disables the specific rule for a web site permanently.
     * 
     * @param resourceGroupName 
     * @param environmentName 
     * @param name 
     * @param hostingEnvironmentName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableRecommendationForHostingEnvironment(String resourceGroupName, String environmentName, String name, String hostingEnvironmentName) {
        disableRecommendationForHostingEnvironmentAsync(resourceGroupName, environmentName, name, hostingEnvironmentName).block();
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param expiredOnly 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listHistoryForWebAppSinglePageAsync(String resourceGroupName, String siteName, Boolean expiredOnly, String filter) {
        return service.listHistoryForWebApp(this.client.getHost(), resourceGroupName, siteName, expiredOnly, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param expiredOnly 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listHistoryForWebAppAsync(String resourceGroupName, String siteName, Boolean expiredOnly, String filter) {
        return new PagedFlux<>(
            () -> listHistoryForWebAppSinglePageAsync(resourceGroupName, siteName, expiredOnly, filter),
            nextLink -> listHistoryForWebAppNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listHistoryForWebAppAsync(String resourceGroupName, String siteName) {
        final Boolean expiredOnly = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listHistoryForWebAppSinglePageAsync(resourceGroupName, siteName, expiredOnly, filter),
            nextLink -> listHistoryForWebAppNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param expiredOnly 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listHistoryForWebApp(String resourceGroupName, String siteName, Boolean expiredOnly, String filter) {
        return new PagedIterable<>(listHistoryForWebAppAsync(resourceGroupName, siteName, expiredOnly, filter));
    }

    /**
     * Description for Get past recommendations for an app, optionally specified by the time range.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listHistoryForWebApp(String resourceGroupName, String siteName) {
        final Boolean expiredOnly = null;
        final String filter = null;
        return new PagedIterable<>(listHistoryForWebAppAsync(resourceGroupName, siteName, expiredOnly, filter));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listRecommendedRulesForWebAppSinglePageAsync(String resourceGroupName, String siteName, Boolean featured, String filter) {
        return service.listRecommendedRulesForWebApp(this.client.getHost(), resourceGroupName, siteName, featured, filter, this.client.getSubscriptionId(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listRecommendedRulesForWebAppAsync(String resourceGroupName, String siteName, Boolean featured, String filter) {
        return new PagedFlux<>(
            () -> listRecommendedRulesForWebAppSinglePageAsync(resourceGroupName, siteName, featured, filter),
            nextLink -> listRecommendedRulesForWebAppNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<RecommendationInner> listRecommendedRulesForWebAppAsync(String resourceGroupName, String siteName) {
        final Boolean featured = null;
        final String filter = null;
        return new PagedFlux<>(
            () -> listRecommendedRulesForWebAppSinglePageAsync(resourceGroupName, siteName, featured, filter),
            nextLink -> listRecommendedRulesForWebAppNextSinglePageAsync(nextLink));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param featured 
     * @param filter 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listRecommendedRulesForWebApp(String resourceGroupName, String siteName, Boolean featured, String filter) {
        return new PagedIterable<>(listRecommendedRulesForWebAppAsync(resourceGroupName, siteName, featured, filter));
    }

    /**
     * Description for Get all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<RecommendationInner> listRecommendedRulesForWebApp(String resourceGroupName, String siteName) {
        final Boolean featured = null;
        final String filter = null;
        return new PagedIterable<>(listRecommendedRulesForWebAppAsync(resourceGroupName, siteName, featured, filter));
    }

    /**
     * Description for Disable all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableAllForWebAppWithResponseAsync(String resourceGroupName, String siteName) {
        return service.disableAllForWebApp(this.client.getHost(), resourceGroupName, siteName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Disable all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableAllForWebAppAsync(String resourceGroupName, String siteName) {
        return disableAllForWebAppWithResponseAsync(resourceGroupName, siteName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Disable all recommendations for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableAllForWebApp(String resourceGroupName, String siteName) {
        disableAllForWebAppAsync(resourceGroupName, siteName).block();
    }

    /**
     * Description for Reset all recommendation opt-out settings for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> resetAllFiltersForWebAppWithResponseAsync(String resourceGroupName, String siteName) {
        return service.resetAllFiltersForWebApp(this.client.getHost(), resourceGroupName, siteName, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Reset all recommendation opt-out settings for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> resetAllFiltersForWebAppAsync(String resourceGroupName, String siteName) {
        return resetAllFiltersForWebAppWithResponseAsync(resourceGroupName, siteName)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Reset all recommendation opt-out settings for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void resetAllFiltersForWebApp(String resourceGroupName, String siteName) {
        resetAllFiltersForWebAppAsync(resourceGroupName, siteName).block();
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @param updateSeen 
     * @param recommendationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<RecommendationRuleInner>> getRuleDetailsByWebAppWithResponseAsync(String resourceGroupName, String siteName, String name, Boolean updateSeen, String recommendationId) {
        return service.getRuleDetailsByWebApp(this.client.getHost(), resourceGroupName, siteName, name, updateSeen, recommendationId, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @param updateSeen 
     * @param recommendationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecommendationRuleInner> getRuleDetailsByWebAppAsync(String resourceGroupName, String siteName, String name, Boolean updateSeen, String recommendationId) {
        return getRuleDetailsByWebAppWithResponseAsync(resourceGroupName, siteName, name, updateSeen, recommendationId)
            .flatMap((SimpleResponse<RecommendationRuleInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecommendationRuleInner> getRuleDetailsByWebAppAsync(String resourceGroupName, String siteName, String name) {
        final Boolean updateSeen = null;
        final String recommendationId = null;
        return getRuleDetailsByWebAppWithResponseAsync(resourceGroupName, siteName, name, updateSeen, recommendationId)
            .flatMap((SimpleResponse<RecommendationRuleInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @param updateSeen 
     * @param recommendationId 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecommendationRuleInner getRuleDetailsByWebApp(String resourceGroupName, String siteName, String name, Boolean updateSeen, String recommendationId) {
        return getRuleDetailsByWebAppAsync(resourceGroupName, siteName, name, updateSeen, recommendationId).block();
    }

    /**
     * Description for Get a recommendation rule for an app.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecommendationRuleInner getRuleDetailsByWebApp(String resourceGroupName, String siteName, String name) {
        final Boolean updateSeen = null;
        final String recommendationId = null;
        return getRuleDetailsByWebAppAsync(resourceGroupName, siteName, name, updateSeen, recommendationId).block();
    }

    /**
     * Description for Disables the specific rule for a web site permanently.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> disableRecommendationForSiteWithResponseAsync(String resourceGroupName, String siteName, String name) {
        return service.disableRecommendationForSite(this.client.getHost(), resourceGroupName, siteName, name, this.client.getSubscriptionId(), this.client.getApiVersion());
    }

    /**
     * Description for Disables the specific rule for a web site permanently.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> disableRecommendationForSiteAsync(String resourceGroupName, String siteName, String name) {
        return disableRecommendationForSiteWithResponseAsync(resourceGroupName, siteName, name)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Description for Disables the specific rule for a web site permanently.
     * 
     * @param resourceGroupName 
     * @param siteName 
     * @param name 
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void disableRecommendationForSite(String resourceGroupName, String siteName, String name) {
        disableRecommendationForSiteAsync(resourceGroupName, siteName, name).block();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listHistoryForHostingEnvironmentNextSinglePageAsync(String nextLink) {
        return service.listHistoryForHostingEnvironmentNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listRecommendedRulesForHostingEnvironmentNextSinglePageAsync(String nextLink) {
        return service.listRecommendedRulesForHostingEnvironmentNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listHistoryForWebAppNextSinglePageAsync(String nextLink) {
        return service.listHistoryForWebAppNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<RecommendationInner>> listRecommendedRulesForWebAppNextSinglePageAsync(String nextLink) {
        return service.listRecommendedRulesForWebAppNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().value(),
            res.getValue().nextLink(),
            null));
    }
}
