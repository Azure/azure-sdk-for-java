/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2019_08_01.implementation;

import com.microsoft.azure.management.appservice.v2019_08_01.StaticSiteCustomDomainOverviewARMResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import org.joda.time.DateTime;

class StaticSiteCustomDomainOverviewARMResourceImpl extends CreatableUpdatableImpl<StaticSiteCustomDomainOverviewARMResource, StaticSiteCustomDomainOverviewARMResourceInner, StaticSiteCustomDomainOverviewARMResourceImpl> implements StaticSiteCustomDomainOverviewARMResource, StaticSiteCustomDomainOverviewARMResource.Definition, StaticSiteCustomDomainOverviewARMResource.Update {
    private final AppServiceManager manager;
    private String resourceGroupName;
    private String name;
    private String domainName;

    StaticSiteCustomDomainOverviewARMResourceImpl(String name, AppServiceManager manager) {
        super(name, new StaticSiteCustomDomainOverviewARMResourceInner());
        this.manager = manager;
        // Set resource name
        this.domainName = name;
        //
    }

    StaticSiteCustomDomainOverviewARMResourceImpl(StaticSiteCustomDomainOverviewARMResourceInner inner, AppServiceManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.domainName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "staticSites");
        this.domainName = IdParsingUtils.getValueFromIdByName(inner.id(), "customDomains");
        //
    }

    @Override
    public AppServiceManager manager() {
        return this.manager;
    }

    @Override
    public Observable<StaticSiteCustomDomainOverviewARMResource> createResourceAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return client.createOrUpdateStaticSiteCustomDomainAsync(this.resourceGroupName, this.name, this.domainName)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<StaticSiteCustomDomainOverviewARMResource> updateResourceAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return client.createOrUpdateStaticSiteCustomDomainAsync(this.resourceGroupName, this.name, this.domainName)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<StaticSiteCustomDomainOverviewARMResourceInner> getInnerAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return null; // NOP getInnerAsync implementation as get is not supported
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public DateTime createdOn() {
        return this.inner().createdOn();
    }

    @Override
    public String domainName() {
        return this.inner().domainName();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public StaticSiteCustomDomainOverviewARMResourceImpl withExistingStaticSite(String resourceGroupName, String name) {
        this.resourceGroupName = resourceGroupName;
        this.name = name;
        return this;
    }

}
