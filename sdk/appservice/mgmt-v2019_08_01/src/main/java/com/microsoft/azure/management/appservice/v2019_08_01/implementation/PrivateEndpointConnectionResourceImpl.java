/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2019_08_01.implementation;

import com.microsoft.azure.management.appservice.v2019_08_01.PrivateEndpointConnectionResource;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.appservice.v2019_08_01.PrivateLinkConnectionApprovalRequestResource;
import com.microsoft.azure.management.appservice.v2019_08_01.ArmIdWrapper;
import com.microsoft.azure.management.appservice.v2019_08_01.PrivateLinkConnectionState;
import rx.functions.Func1;

class PrivateEndpointConnectionResourceImpl extends CreatableUpdatableImpl<PrivateEndpointConnectionResource, PrivateEndpointConnectionResourceInner, PrivateEndpointConnectionResourceImpl> implements PrivateEndpointConnectionResource, PrivateEndpointConnectionResource.Definition, PrivateEndpointConnectionResource.Update {
    private final AppServiceManager manager;
    private String resourceGroupName;
    private String name;
    private String privateEndpointConnectionName;
    private PrivateLinkConnectionApprovalRequestResource createOrUpdateParameter;

    PrivateEndpointConnectionResourceImpl(String name, AppServiceManager manager) {
        super(name, new PrivateEndpointConnectionResourceInner());
        this.manager = manager;
        // Set resource name
        this.privateEndpointConnectionName = name;
        //
        this.createOrUpdateParameter = new PrivateLinkConnectionApprovalRequestResource();
    }

    PrivateEndpointConnectionResourceImpl(PrivateEndpointConnectionResourceInner inner, AppServiceManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.privateEndpointConnectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.name = IdParsingUtils.getValueFromIdByName(inner.id(), "sites");
        this.privateEndpointConnectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateEndpointConnections");
        //
        this.createOrUpdateParameter = new PrivateLinkConnectionApprovalRequestResource();
    }

    @Override
    public AppServiceManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PrivateEndpointConnectionResource> createResourceAsync() {
        WebAppsInner client = this.manager().inner().webApps();
        return client.approveOrRejectPrivateEndpointConnectionAsync(this.resourceGroupName, this.name, this.privateEndpointConnectionName, this.createOrUpdateParameter)
            .map(new Func1<PrivateEndpointConnectionResourceInner, PrivateEndpointConnectionResourceInner>() {
               @Override
               public PrivateEndpointConnectionResourceInner call(PrivateEndpointConnectionResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PrivateEndpointConnectionResource> updateResourceAsync() {
        WebAppsInner client = this.manager().inner().webApps();
        return client.approveOrRejectPrivateEndpointConnectionAsync(this.resourceGroupName, this.name, this.privateEndpointConnectionName, this.createOrUpdateParameter)
            .map(new Func1<PrivateEndpointConnectionResourceInner, PrivateEndpointConnectionResourceInner>() {
               @Override
               public PrivateEndpointConnectionResourceInner call(PrivateEndpointConnectionResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<PrivateEndpointConnectionResourceInner> getInnerAsync() {
        WebAppsInner client = this.manager().inner().webApps();
        return client.getPrivateEndpointConnectionAsync(this.resourceGroupName, this.name, this.privateEndpointConnectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createOrUpdateParameter = new PrivateLinkConnectionApprovalRequestResource();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ArmIdWrapper privateEndpoint() {
        return this.inner().privateEndpoint();
    }

    @Override
    public PrivateLinkConnectionState privateLinkServiceConnectionState() {
        return this.inner().privateLinkServiceConnectionState();
    }

    @Override
    public String provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PrivateEndpointConnectionResourceImpl withExistingSite(String resourceGroupName, String name) {
        this.resourceGroupName = resourceGroupName;
        this.name = name;
        return this;
    }

    @Override
    public PrivateEndpointConnectionResourceImpl withKind(String kind) {
        this.createOrUpdateParameter.withKind(kind);
        return this;
    }

    @Override
    public PrivateEndpointConnectionResourceImpl withPrivateLinkServiceConnectionState(PrivateLinkConnectionState privateLinkServiceConnectionState) {
        this.createOrUpdateParameter.withPrivateLinkServiceConnectionState(privateLinkServiceConnectionState);
        return this;
    }

}
