/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.appservice.v2019_08_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.appservice.v2019_08_01.StaticSiteARMResource;
import rx.Observable;
import com.microsoft.azure.management.appservice.v2019_08_01.StaticSitePatchResource;
import java.util.List;
import com.microsoft.azure.management.appservice.v2019_08_01.StaticSiteBuildProperties;
import com.microsoft.azure.management.appservice.v2019_08_01.SkuDescription;
import rx.functions.Func1;

class StaticSiteARMResourceImpl extends GroupableResourceCoreImpl<StaticSiteARMResource, StaticSiteARMResourceInner, StaticSiteARMResourceImpl, AppServiceManager> implements StaticSiteARMResource, StaticSiteARMResource.Definition, StaticSiteARMResource.Update {
    private StaticSitePatchResource updateParameter;
    StaticSiteARMResourceImpl(String name, StaticSiteARMResourceInner inner, AppServiceManager manager) {
        super(name, inner, manager);
        this.updateParameter = new StaticSitePatchResource();
    }

    @Override
    public Observable<StaticSiteARMResource> createResourceAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return client.createOrUpdateStaticSiteAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<StaticSiteARMResourceInner, StaticSiteARMResourceInner>() {
               @Override
               public StaticSiteARMResourceInner call(StaticSiteARMResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<StaticSiteARMResource> updateResourceAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return client.updateStaticSiteAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<StaticSiteARMResourceInner, StaticSiteARMResourceInner>() {
               @Override
               public StaticSiteARMResourceInner call(StaticSiteARMResourceInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<StaticSiteARMResourceInner> getInnerAsync() {
        StaticSitesInner client = this.manager().inner().staticSites();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new StaticSitePatchResource();
    }

    @Override
    public String branch() {
        return this.inner().branch();
    }

    @Override
    public StaticSiteBuildProperties buildProperties() {
        return this.inner().buildProperties();
    }

    @Override
    public List<String> customDomains() {
        return this.inner().customDomains();
    }

    @Override
    public String defaultHostname() {
        return this.inner().defaultHostname();
    }

    @Override
    public String kind() {
        return this.inner().kind();
    }

    @Override
    public String repositoryToken() {
        return this.inner().repositoryToken();
    }

    @Override
    public String repositoryUrl() {
        return this.inner().repositoryUrl();
    }

    @Override
    public SkuDescription sku() {
        return this.inner().sku();
    }

    @Override
    public StaticSiteARMResourceImpl withSku(SkuDescription sku) {
        this.inner().withSku(sku);
        return this;
    }

    @Override
    public StaticSiteARMResourceImpl withBranch(String branch) {
        if (isInCreateMode()) {
            this.inner().withBranch(branch);
        } else {
            this.updateParameter.withBranch(branch);
        }
        return this;
    }

    @Override
    public StaticSiteARMResourceImpl withBuildProperties(StaticSiteBuildProperties buildProperties) {
        if (isInCreateMode()) {
            this.inner().withBuildProperties(buildProperties);
        } else {
            this.updateParameter.withBuildProperties(buildProperties);
        }
        return this;
    }

    @Override
    public StaticSiteARMResourceImpl withKind(String kind) {
        if (isInCreateMode()) {
            this.inner().withKind(kind);
        } else {
            this.updateParameter.withKind(kind);
        }
        return this;
    }

    @Override
    public StaticSiteARMResourceImpl withRepositoryToken(String repositoryToken) {
        if (isInCreateMode()) {
            this.inner().withRepositoryToken(repositoryToken);
        } else {
            this.updateParameter.withRepositoryToken(repositoryToken);
        }
        return this;
    }

    @Override
    public StaticSiteARMResourceImpl withRepositoryUrl(String repositoryUrl) {
        if (isInCreateMode()) {
            this.inner().withRepositoryUrl(repositoryUrl);
        } else {
            this.updateParameter.withRepositoryUrl(repositoryUrl);
        }
        return this;
    }

}
