// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dependencymap.models.DependencyProcessFilter;
import com.azure.resourcemanager.dependencymap.models.GetDependencyViewForAllMachinesRequest;
import com.azure.resourcemanager.dependencymap.models.ProcessNameFilter;
import com.azure.resourcemanager.dependencymap.models.ProcessNameFilterOperator;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class GetDependencyViewForAllMachinesRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetDependencyViewForAllMachinesRequest model = BinaryData.fromString(
            "{\"filters\":{\"processNameFilter\":{\"operator\":\"notContains\",\"processNames\":[\"iksqr\",\"lssai\"]}}}")
            .toObject(GetDependencyViewForAllMachinesRequest.class);
        Assertions.assertEquals(ProcessNameFilterOperator.NOT_CONTAINS, model.filters().processNameFilter().operator());
        Assertions.assertEquals("iksqr", model.filters().processNameFilter().processNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetDependencyViewForAllMachinesRequest model
            = new GetDependencyViewForAllMachinesRequest().withFilters(new DependencyProcessFilter()
                .withProcessNameFilter(new ProcessNameFilter().withOperator(ProcessNameFilterOperator.NOT_CONTAINS)
                    .withProcessNames(Arrays.asList("iksqr", "lssai"))));
        model = BinaryData.fromObject(model).toObject(GetDependencyViewForAllMachinesRequest.class);
        Assertions.assertEquals(ProcessNameFilterOperator.NOT_CONTAINS, model.filters().processNameFilter().operator());
        Assertions.assertEquals("iksqr", model.filters().processNameFilter().processNames().get(0));
    }
}
