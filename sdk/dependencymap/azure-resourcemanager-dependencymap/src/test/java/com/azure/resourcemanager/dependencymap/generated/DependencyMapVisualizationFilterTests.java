// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dependencymap.models.DateTimeFilter;
import com.azure.resourcemanager.dependencymap.models.DependencyMapVisualizationFilter;
import com.azure.resourcemanager.dependencymap.models.ProcessNameFilter;
import com.azure.resourcemanager.dependencymap.models.ProcessNameFilterOperator;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DependencyMapVisualizationFilterTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DependencyMapVisualizationFilter model = BinaryData.fromString(
            "{\"dateTime\":{\"startDateTimeUtc\":\"2021-06-13T21:33:31Z\",\"endDateTimeUtc\":\"2021-02-16T21:00:55Z\"},\"processNameFilter\":{\"operator\":\"contains\",\"processNames\":[\"mkjozkrwf\",\"dio\",\"jpslwejd\",\"vwryoqpso\"]}}")
            .toObject(DependencyMapVisualizationFilter.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T21:33:31Z"), model.dateTime().startDateTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T21:00:55Z"), model.dateTime().endDateTimeUtc());
        Assertions.assertEquals(ProcessNameFilterOperator.CONTAINS, model.processNameFilter().operator());
        Assertions.assertEquals("mkjozkrwf", model.processNameFilter().processNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DependencyMapVisualizationFilter model = new DependencyMapVisualizationFilter()
            .withDateTime(new DateTimeFilter().withStartDateTimeUtc(OffsetDateTime.parse("2021-06-13T21:33:31Z"))
                .withEndDateTimeUtc(OffsetDateTime.parse("2021-02-16T21:00:55Z")))
            .withProcessNameFilter(new ProcessNameFilter().withOperator(ProcessNameFilterOperator.CONTAINS)
                .withProcessNames(Arrays.asList("mkjozkrwf", "dio", "jpslwejd", "vwryoqpso")));
        model = BinaryData.fromObject(model).toObject(DependencyMapVisualizationFilter.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T21:33:31Z"), model.dateTime().startDateTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-16T21:00:55Z"), model.dateTime().endDateTimeUtc());
        Assertions.assertEquals(ProcessNameFilterOperator.CONTAINS, model.processNameFilter().operator());
        Assertions.assertEquals("mkjozkrwf", model.processNameFilter().processNames().get(0));
    }
}
