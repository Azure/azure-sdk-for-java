// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dependencymap.models.DateTimeFilter;
import com.azure.resourcemanager.dependencymap.models.DependencyMapVisualizationFilter;
import com.azure.resourcemanager.dependencymap.models.GetDependencyViewForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.ProcessNameFilter;
import com.azure.resourcemanager.dependencymap.models.ProcessNameFilterOperator;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class GetDependencyViewForFocusedMachineRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        GetDependencyViewForFocusedMachineRequest model = BinaryData.fromString(
            "{\"focusedMachineId\":\"h\",\"filters\":{\"dateTime\":{\"startDateTimeUtc\":\"2021-08-17T15:27:50Z\",\"endDateTimeUtc\":\"2021-04-29T07:45:55Z\"},\"processNameFilter\":{\"operator\":\"contains\",\"processNames\":[\"pmqnja\",\"wixjsprozvcp\",\"tegjvwmf\",\"atscmd\"]}}}")
            .toObject(GetDependencyViewForFocusedMachineRequest.class);
        Assertions.assertEquals("h", model.focusedMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-17T15:27:50Z"),
            model.filters().dateTime().startDateTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T07:45:55Z"),
            model.filters().dateTime().endDateTimeUtc());
        Assertions.assertEquals(ProcessNameFilterOperator.CONTAINS, model.filters().processNameFilter().operator());
        Assertions.assertEquals("pmqnja", model.filters().processNameFilter().processNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        GetDependencyViewForFocusedMachineRequest model = new GetDependencyViewForFocusedMachineRequest()
            .withFocusedMachineId("h")
            .withFilters(new DependencyMapVisualizationFilter()
                .withDateTime(new DateTimeFilter().withStartDateTimeUtc(OffsetDateTime.parse("2021-08-17T15:27:50Z"))
                    .withEndDateTimeUtc(OffsetDateTime.parse("2021-04-29T07:45:55Z")))
                .withProcessNameFilter(new ProcessNameFilter().withOperator(ProcessNameFilterOperator.CONTAINS)
                    .withProcessNames(Arrays.asList("pmqnja", "wixjsprozvcp", "tegjvwmf", "atscmd"))));
        model = BinaryData.fromObject(model).toObject(GetDependencyViewForFocusedMachineRequest.class);
        Assertions.assertEquals("h", model.focusedMachineId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-17T15:27:50Z"),
            model.filters().dateTime().startDateTimeUtc());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-29T07:45:55Z"),
            model.filters().dateTime().endDateTimeUtc());
        Assertions.assertEquals(ProcessNameFilterOperator.CONTAINS, model.filters().processNameFilter().operator());
        Assertions.assertEquals("pmqnja", model.filters().processNameFilter().processNames().get(0));
    }
}
