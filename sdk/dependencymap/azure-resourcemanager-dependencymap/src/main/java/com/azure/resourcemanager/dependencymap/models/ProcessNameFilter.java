// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Process name filter for dependency map visualization apis.
 */
@Fluent
public final class ProcessNameFilter implements JsonSerializable<ProcessNameFilter> {
    /*
     * Operator for process name filter
     */
    @Generated
    private ProcessNameFilterOperator operator;

    /*
     * List of process names on which the operator should be applied
     */
    @Generated
    private List<String> processNames;

    /**
     * Creates an instance of ProcessNameFilter class.
     */
    @Generated
    public ProcessNameFilter() {
    }

    /**
     * Get the operator property: Operator for process name filter.
     * 
     * @return the operator value.
     */
    @Generated
    public ProcessNameFilterOperator operator() {
        return this.operator;
    }

    /**
     * Set the operator property: Operator for process name filter.
     * 
     * @param operator the operator value to set.
     * @return the ProcessNameFilter object itself.
     */
    @Generated
    public ProcessNameFilter withOperator(ProcessNameFilterOperator operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the processNames property: List of process names on which the operator should be applied.
     * 
     * @return the processNames value.
     */
    @Generated
    public List<String> processNames() {
        return this.processNames;
    }

    /**
     * Set the processNames property: List of process names on which the operator should be applied.
     * 
     * @param processNames the processNames value to set.
     * @return the ProcessNameFilter object itself.
     */
    @Generated
    public ProcessNameFilter withProcessNames(List<String> processNames) {
        this.processNames = processNames;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property operator in model ProcessNameFilter"));
        }
        if (processNames() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property processNames in model ProcessNameFilter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ProcessNameFilter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operator", this.operator == null ? null : this.operator.toString());
        jsonWriter.writeArrayField("processNames", this.processNames, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProcessNameFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProcessNameFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProcessNameFilter.
     */
    public static ProcessNameFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProcessNameFilter deserializedProcessNameFilter = new ProcessNameFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operator".equals(fieldName)) {
                    deserializedProcessNameFilter.operator = ProcessNameFilterOperator.fromString(reader.getString());
                } else if ("processNames".equals(fieldName)) {
                    List<String> processNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedProcessNameFilter.processNames = processNames;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProcessNameFilter;
        });
    }
}
