// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dependencymap.fluent.MapsClient;
import com.azure.resourcemanager.dependencymap.fluent.models.MapsResourceInner;
import com.azure.resourcemanager.dependencymap.models.ExportDependenciesRequest;
import com.azure.resourcemanager.dependencymap.models.GetConnectionsForProcessOnFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.GetConnectionsWithConnectedMachineForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.GetDependencyViewForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.Maps;
import com.azure.resourcemanager.dependencymap.models.MapsResource;

public final class MapsImpl implements Maps {
    private static final ClientLogger LOGGER = new ClientLogger(MapsImpl.class);

    private final MapsClient innerClient;

    private final com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager;

    public MapsImpl(MapsClient innerClient,
        com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<MapsResource> getByResourceGroupWithResponse(String resourceGroupName, String mapName,
        Context context) {
        Response<MapsResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, mapName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MapsResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public MapsResource getByResourceGroup(String resourceGroupName, String mapName) {
        MapsResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, mapName);
        if (inner != null) {
            return new MapsResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String mapName) {
        this.serviceClient().delete(resourceGroupName, mapName);
    }

    public void delete(String resourceGroupName, String mapName, Context context) {
        this.serviceClient().delete(resourceGroupName, mapName, context);
    }

    public PagedIterable<MapsResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<MapsResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MapsResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MapsResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<MapsResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MapsResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MapsResource> list() {
        PagedIterable<MapsResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MapsResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<MapsResource> list(Context context) {
        PagedIterable<MapsResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MapsResourceImpl(inner1, this.manager()));
    }

    public void getDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body) {
        this.serviceClient().getDependencyViewForFocusedMachine(resourceGroupName, mapName, body);
    }

    public void getDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body, Context context) {
        this.serviceClient().getDependencyViewForFocusedMachine(resourceGroupName, mapName, body, context);
    }

    public void getConnectionsWithConnectedMachineForFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body) {
        this.serviceClient().getConnectionsWithConnectedMachineForFocusedMachine(resourceGroupName, mapName, body);
    }

    public void getConnectionsWithConnectedMachineForFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body, Context context) {
        this.serviceClient()
            .getConnectionsWithConnectedMachineForFocusedMachine(resourceGroupName, mapName, body, context);
    }

    public void getConnectionsForProcessOnFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsForProcessOnFocusedMachineRequest body) {
        this.serviceClient().getConnectionsForProcessOnFocusedMachine(resourceGroupName, mapName, body);
    }

    public void getConnectionsForProcessOnFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsForProcessOnFocusedMachineRequest body, Context context) {
        this.serviceClient().getConnectionsForProcessOnFocusedMachine(resourceGroupName, mapName, body, context);
    }

    public void exportDependencies(String resourceGroupName, String mapName, ExportDependenciesRequest body) {
        this.serviceClient().exportDependencies(resourceGroupName, mapName, body);
    }

    public void exportDependencies(String resourceGroupName, String mapName, ExportDependenciesRequest body,
        Context context) {
        this.serviceClient().exportDependencies(resourceGroupName, mapName, body, context);
    }

    public MapsResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, mapName, Context.NONE).getValue();
    }

    public Response<MapsResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, mapName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        this.delete(resourceGroupName, mapName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        this.delete(resourceGroupName, mapName, context);
    }

    private MapsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dependencymap.DependencyMapManager manager() {
        return this.serviceManager;
    }

    public MapsResourceImpl define(String name) {
        return new MapsResourceImpl(name, this.manager());
    }
}
