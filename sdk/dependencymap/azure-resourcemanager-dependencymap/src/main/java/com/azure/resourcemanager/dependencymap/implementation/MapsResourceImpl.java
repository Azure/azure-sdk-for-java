// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dependencymap.fluent.models.MapsResourceInner;
import com.azure.resourcemanager.dependencymap.models.ExportDependenciesRequest;
import com.azure.resourcemanager.dependencymap.models.GetConnectionsForProcessOnFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.GetConnectionsWithConnectedMachineForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.GetDependencyViewForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.MapsResource;
import com.azure.resourcemanager.dependencymap.models.MapsResourceProperties;
import com.azure.resourcemanager.dependencymap.models.MapsResourceTagsUpdate;
import java.util.Collections;
import java.util.Map;

public final class MapsResourceImpl implements MapsResource, MapsResource.Definition, MapsResource.Update {
    private MapsResourceInner innerObject;

    private final com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public MapsResourceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public MapsResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.dependencymap.DependencyMapManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String mapName;

    private MapsResourceTagsUpdate updateProperties;

    public MapsResourceImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public MapsResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getMaps()
            .createOrUpdate(resourceGroupName, mapName, this.innerModel(), Context.NONE);
        return this;
    }

    public MapsResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMaps()
            .createOrUpdate(resourceGroupName, mapName, this.innerModel(), context);
        return this;
    }

    MapsResourceImpl(String name, com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager) {
        this.innerObject = new MapsResourceInner();
        this.serviceManager = serviceManager;
        this.mapName = name;
    }

    public MapsResourceImpl update() {
        this.updateProperties = new MapsResourceTagsUpdate();
        return this;
    }

    public MapsResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getMaps()
            .update(resourceGroupName, mapName, updateProperties, Context.NONE);
        return this;
    }

    public MapsResource apply(Context context) {
        this.innerObject
            = serviceManager.serviceClient().getMaps().update(resourceGroupName, mapName, updateProperties, context);
        return this;
    }

    MapsResourceImpl(MapsResourceInner innerObject,
        com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.mapName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "maps");
    }

    public MapsResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getMaps()
            .getByResourceGroupWithResponse(resourceGroupName, mapName, Context.NONE)
            .getValue();
        return this;
    }

    public MapsResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getMaps()
            .getByResourceGroupWithResponse(resourceGroupName, mapName, context)
            .getValue();
        return this;
    }

    public void getDependencyViewForFocusedMachine(GetDependencyViewForFocusedMachineRequest body) {
        serviceManager.maps().getDependencyViewForFocusedMachine(resourceGroupName, mapName, body);
    }

    public void getDependencyViewForFocusedMachine(GetDependencyViewForFocusedMachineRequest body, Context context) {
        serviceManager.maps().getDependencyViewForFocusedMachine(resourceGroupName, mapName, body, context);
    }

    public void getConnectionsWithConnectedMachineForFocusedMachine(
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body) {
        serviceManager.maps().getConnectionsWithConnectedMachineForFocusedMachine(resourceGroupName, mapName, body);
    }

    public void getConnectionsWithConnectedMachineForFocusedMachine(
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body, Context context) {
        serviceManager.maps()
            .getConnectionsWithConnectedMachineForFocusedMachine(resourceGroupName, mapName, body, context);
    }

    public void getConnectionsForProcessOnFocusedMachine(GetConnectionsForProcessOnFocusedMachineRequest body) {
        serviceManager.maps().getConnectionsForProcessOnFocusedMachine(resourceGroupName, mapName, body);
    }

    public void getConnectionsForProcessOnFocusedMachine(GetConnectionsForProcessOnFocusedMachineRequest body,
        Context context) {
        serviceManager.maps().getConnectionsForProcessOnFocusedMachine(resourceGroupName, mapName, body, context);
    }

    public void exportDependencies(ExportDependenciesRequest body) {
        serviceManager.maps().exportDependencies(resourceGroupName, mapName, body);
    }

    public void exportDependencies(ExportDependenciesRequest body, Context context) {
        serviceManager.maps().exportDependencies(resourceGroupName, mapName, body, context);
    }

    public MapsResourceImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public MapsResourceImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public MapsResourceImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public MapsResourceImpl withProperties(MapsResourceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
