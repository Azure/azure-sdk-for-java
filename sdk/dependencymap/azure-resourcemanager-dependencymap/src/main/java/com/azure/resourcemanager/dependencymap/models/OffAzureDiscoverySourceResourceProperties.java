// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * OffAzure discovery source resource properties.
 */
@Fluent
public final class OffAzureDiscoverySourceResourceProperties extends DiscoverySourceResourceProperties {
    /*
     * Source type of Discovery Source resource.
     */
    private SourceType sourceType = SourceType.OFF_AZURE;

    /**
     * Creates an instance of OffAzureDiscoverySourceResourceProperties class.
     */
    public OffAzureDiscoverySourceResourceProperties() {
    }

    /**
     * Get the sourceType property: Source type of Discovery Source resource.
     * 
     * @return the sourceType value.
     */
    @Override
    public SourceType sourceType() {
        return this.sourceType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OffAzureDiscoverySourceResourceProperties withSourceId(String sourceId) {
        super.withSourceId(sourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceId", sourceId());
        jsonWriter.writeStringField("sourceType", this.sourceType == null ? null : this.sourceType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OffAzureDiscoverySourceResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OffAzureDiscoverySourceResourceProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OffAzureDiscoverySourceResourceProperties.
     */
    public static OffAzureDiscoverySourceResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffAzureDiscoverySourceResourceProperties deserializedOffAzureDiscoverySourceResourceProperties
                = new OffAzureDiscoverySourceResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceId".equals(fieldName)) {
                    deserializedOffAzureDiscoverySourceResourceProperties.withSourceId(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOffAzureDiscoverySourceResourceProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("sourceType".equals(fieldName)) {
                    deserializedOffAzureDiscoverySourceResourceProperties.sourceType
                        = SourceType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOffAzureDiscoverySourceResourceProperties;
        });
    }
}
