// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of Maps.
 */
public interface Maps {
    /**
     * Get a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MapsResource along with {@link Response}.
     */
    Response<MapsResource> getByResourceGroupWithResponse(String resourceGroupName, String mapName, Context context);

    /**
     * Get a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MapsResource.
     */
    MapsResource getByResourceGroup(String resourceGroupName, String mapName);

    /**
     * Delete a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByResourceGroup(String resourceGroupName, String mapName);

    /**
     * Delete a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String mapName, Context context);

    /**
     * List MapsResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MapsResource> listByResourceGroup(String resourceGroupName);

    /**
     * List MapsResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MapsResource> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List MapsResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MapsResource> list();

    /**
     * List MapsResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<MapsResource> list(Context context);

    /**
     * Get dependency map of single machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body);

    /**
     * Get dependency map of single machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body, Context context);

    /**
     * Get network connections between machines.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getConnectionsWithConnectedMachineForFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body);

    /**
     * Get network connections between machines.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getConnectionsWithConnectedMachineForFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body, Context context);

    /**
     * Get network connections of a process.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getConnectionsForProcessOnFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsForProcessOnFocusedMachineRequest body);

    /**
     * Get network connections of a process.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getConnectionsForProcessOnFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsForProcessOnFocusedMachineRequest body, Context context);

    /**
     * Export dependencies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void exportDependencies(String resourceGroupName, String mapName, ExportDependenciesRequest body);

    /**
     * Export dependencies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void exportDependencies(String resourceGroupName, String mapName, ExportDependenciesRequest body, Context context);

    /**
     * Get a MapsResource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MapsResource along with {@link Response}.
     */
    MapsResource getById(String id);

    /**
     * Get a MapsResource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MapsResource along with {@link Response}.
     */
    Response<MapsResource> getByIdWithResponse(String id, Context context);

    /**
     * Delete a MapsResource.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Delete a MapsResource.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new MapsResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new MapsResource definition.
     */
    MapsResource.DefinitionStages.Blank define(String name);
}
