// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Model representing properties returned upon successful completion of the export dependencies asynchronous operation.
 */
@Immutable
public final class GetDependencyViewForAllMachinesResultProperties
    implements JsonSerializable<GetDependencyViewForAllMachinesResultProperties> {
    /*
     * The SAS URI of the blob containing the layout file for the multi-server view.
     */
    private String layoutFileSasUrl;

    /**
     * Creates an instance of GetDependencyViewForAllMachinesResultProperties class.
     */
    private GetDependencyViewForAllMachinesResultProperties() {
    }

    /**
     * Get the layoutFileSasUrl property: The SAS URI of the blob containing the layout file for the multi-server view.
     * 
     * @return the layoutFileSasUrl value.
     */
    public String layoutFileSasUrl() {
        return this.layoutFileSasUrl;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("layoutFileSasUrl", this.layoutFileSasUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetDependencyViewForAllMachinesResultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetDependencyViewForAllMachinesResultProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GetDependencyViewForAllMachinesResultProperties.
     */
    public static GetDependencyViewForAllMachinesResultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetDependencyViewForAllMachinesResultProperties deserializedGetDependencyViewForAllMachinesResultProperties
                = new GetDependencyViewForAllMachinesResultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("layoutFileSasUrl".equals(fieldName)) {
                    deserializedGetDependencyViewForAllMachinesResultProperties.layoutFileSasUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetDependencyViewForAllMachinesResultProperties;
        });
    }
}
