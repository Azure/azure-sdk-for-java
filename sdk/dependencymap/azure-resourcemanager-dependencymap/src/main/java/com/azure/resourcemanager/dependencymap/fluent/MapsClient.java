// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dependencymap.fluent.models.ExportDependenciesOperationResultInner;
import com.azure.resourcemanager.dependencymap.fluent.models.MapsResourceInner;
import com.azure.resourcemanager.dependencymap.models.ExportDependenciesRequest;
import com.azure.resourcemanager.dependencymap.models.GetConnectionsForProcessOnFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.GetConnectionsWithConnectedMachineForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.GetDependencyViewForFocusedMachineRequest;
import com.azure.resourcemanager.dependencymap.models.MapsResourceTagsUpdate;

/**
 * An instance of this class provides access to all the operations defined in MapsClient.
 */
public interface MapsClient {
    /**
     * Get a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MapsResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<MapsResourceInner> getByResourceGroupWithResponse(String resourceGroupName, String mapName,
        Context context);

    /**
     * Get a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a MapsResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MapsResourceInner getByResourceGroup(String resourceGroupName, String mapName);

    /**
     * Create a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MapsResourceInner>, MapsResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String mapName, MapsResourceInner resource);

    /**
     * Create a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MapsResourceInner>, MapsResourceInner> beginCreateOrUpdate(String resourceGroupName,
        String mapName, MapsResourceInner resource, Context context);

    /**
     * Create a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MapsResourceInner createOrUpdate(String resourceGroupName, String mapName, MapsResourceInner resource);

    /**
     * Create a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MapsResourceInner createOrUpdate(String resourceGroupName, String mapName, MapsResourceInner resource,
        Context context);

    /**
     * Update a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MapsResourceInner>, MapsResourceInner> beginUpdate(String resourceGroupName, String mapName,
        MapsResourceTagsUpdate properties);

    /**
     * Update a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<MapsResourceInner>, MapsResourceInner> beginUpdate(String resourceGroupName, String mapName,
        MapsResourceTagsUpdate properties, Context context);

    /**
     * Update a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MapsResourceInner update(String resourceGroupName, String mapName, MapsResourceTagsUpdate properties);

    /**
     * Update a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Maps resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    MapsResourceInner update(String resourceGroupName, String mapName, MapsResourceTagsUpdate properties,
        Context context);

    /**
     * Delete a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String mapName);

    /**
     * Delete a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String mapName, Context context);

    /**
     * Delete a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String mapName);

    /**
     * Delete a MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String mapName, Context context);

    /**
     * List MapsResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MapsResourceInner> listByResourceGroup(String resourceGroupName);

    /**
     * List MapsResource resources by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MapsResourceInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List MapsResource resources by subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MapsResourceInner> list();

    /**
     * List MapsResource resources by subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a MapsResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<MapsResourceInner> list(Context context);

    /**
     * Get dependency map of single machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of dependency map of single machine.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginGetDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body);

    /**
     * Get dependency map of single machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of dependency map of single machine.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginGetDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body, Context context);

    /**
     * Get dependency map of single machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body);

    /**
     * Get dependency map of single machine.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getDependencyViewForFocusedMachine(String resourceGroupName, String mapName,
        GetDependencyViewForFocusedMachineRequest body, Context context);

    /**
     * Get network connections between machines.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network connections between machines.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginGetConnectionsWithConnectedMachineForFocusedMachine(
        String resourceGroupName, String mapName, GetConnectionsWithConnectedMachineForFocusedMachineRequest body);

    /**
     * Get network connections between machines.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network connections between machines.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginGetConnectionsWithConnectedMachineForFocusedMachine(
        String resourceGroupName, String mapName, GetConnectionsWithConnectedMachineForFocusedMachineRequest body,
        Context context);

    /**
     * Get network connections between machines.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getConnectionsWithConnectedMachineForFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body);

    /**
     * Get network connections between machines.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getConnectionsWithConnectedMachineForFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsWithConnectedMachineForFocusedMachineRequest body, Context context);

    /**
     * Get network connections of a process.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network connections of a process.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginGetConnectionsForProcessOnFocusedMachine(String resourceGroupName,
        String mapName, GetConnectionsForProcessOnFocusedMachineRequest body);

    /**
     * Get network connections of a process.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network connections of a process.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginGetConnectionsForProcessOnFocusedMachine(String resourceGroupName,
        String mapName, GetConnectionsForProcessOnFocusedMachineRequest body, Context context);

    /**
     * Get network connections of a process.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getConnectionsForProcessOnFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsForProcessOnFocusedMachineRequest body);

    /**
     * Get network connections of a process.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void getConnectionsForProcessOnFocusedMachine(String resourceGroupName, String mapName,
        GetConnectionsForProcessOnFocusedMachineRequest body, Context context);

    /**
     * Export dependencies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExportDependenciesOperationResultInner>, ExportDependenciesOperationResultInner>
        beginExportDependencies(String resourceGroupName, String mapName, ExportDependenciesRequest body);

    /**
     * Export dependencies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ExportDependenciesOperationResultInner>, ExportDependenciesOperationResultInner>
        beginExportDependencies(String resourceGroupName, String mapName, ExportDependenciesRequest body,
            Context context);

    /**
     * Export dependencies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExportDependenciesOperationResultInner exportDependencies(String resourceGroupName, String mapName,
        ExportDependenciesRequest body);

    /**
     * Export dependencies.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ExportDependenciesOperationResultInner exportDependencies(String resourceGroupName, String mapName,
        ExportDependenciesRequest body, Context context);
}
