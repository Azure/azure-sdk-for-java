// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dependencymap.models.ExportDependenciesResultProperties;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Model representing the result of the export dependencies asynchronous operation.
 */
@Immutable
public final class ExportDependenciesOperationResultInner
    implements JsonSerializable<ExportDependenciesOperationResultInner> {
    /*
     * The status URL of export dependencies operation.
     */
    private String id;

    /*
     * The resource name of the operation status. It must match the last segment of 'id' field.
     */
    private String name;

    /*
     * The overall arm status of the operation. It has one of the terminal states - Succeeded/Failed/Canceled.
     */
    private String status;

    /*
     * Contains error details if status is Failed/Canceled.
     */
    private ManagementError error;

    /*
     * The start time of the operation.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of the operation.
     */
    private OffsetDateTime endTime;

    /*
     * Properties for export dependencies. These should only be set if the status is Succeeded.
     */
    private ExportDependenciesResultProperties properties;

    /**
     * Creates an instance of ExportDependenciesOperationResultInner class.
     */
    private ExportDependenciesOperationResultInner() {
    }

    /**
     * Get the id property: The status URL of export dependencies operation.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The resource name of the operation status. It must match the last segment of 'id' field.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the status property: The overall arm status of the operation. It has one of the terminal states -
     * Succeeded/Failed/Canceled.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the error property: Contains error details if status is Failed/Canceled.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Get the startTime property: The start time of the operation.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the operation.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the properties property: Properties for export dependencies. These should only be set if the status is
     * Succeeded.
     * 
     * @return the properties value.
     */
    public ExportDependenciesResultProperties properties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportDependenciesOperationResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportDependenciesOperationResultInner if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportDependenciesOperationResultInner.
     */
    public static ExportDependenciesOperationResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportDependenciesOperationResultInner deserializedExportDependenciesOperationResultInner
                = new ExportDependenciesOperationResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("status".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.status = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.name = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.error = ManagementError.fromJson(reader);
                } else if ("startTime".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("properties".equals(fieldName)) {
                    deserializedExportDependenciesOperationResultInner.properties
                        = ExportDependenciesResultProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportDependenciesOperationResultInner;
        });
    }
}
