// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * UTC DateTime filter for dependency map visualization apis.
 */
@Fluent
public final class DateTimeFilter implements JsonSerializable<DateTimeFilter> {
    /*
     * Start date time for dependency map visualization query
     */
    private OffsetDateTime startDateTimeUtc;

    /*
     * End date time for dependency map visualization query
     */
    private OffsetDateTime endDateTimeUtc;

    /**
     * Creates an instance of DateTimeFilter class.
     */
    public DateTimeFilter() {
    }

    /**
     * Get the startDateTimeUtc property: Start date time for dependency map visualization query.
     * 
     * @return the startDateTimeUtc value.
     */
    public OffsetDateTime startDateTimeUtc() {
        return this.startDateTimeUtc;
    }

    /**
     * Set the startDateTimeUtc property: Start date time for dependency map visualization query.
     * 
     * @param startDateTimeUtc the startDateTimeUtc value to set.
     * @return the DateTimeFilter object itself.
     */
    public DateTimeFilter withStartDateTimeUtc(OffsetDateTime startDateTimeUtc) {
        this.startDateTimeUtc = startDateTimeUtc;
        return this;
    }

    /**
     * Get the endDateTimeUtc property: End date time for dependency map visualization query.
     * 
     * @return the endDateTimeUtc value.
     */
    public OffsetDateTime endDateTimeUtc() {
        return this.endDateTimeUtc;
    }

    /**
     * Set the endDateTimeUtc property: End date time for dependency map visualization query.
     * 
     * @param endDateTimeUtc the endDateTimeUtc value to set.
     * @return the DateTimeFilter object itself.
     */
    public DateTimeFilter withEndDateTimeUtc(OffsetDateTime endDateTimeUtc) {
        this.endDateTimeUtc = endDateTimeUtc;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startDateTimeUtc",
            this.startDateTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startDateTimeUtc));
        jsonWriter.writeStringField("endDateTimeUtc",
            this.endDateTimeUtc == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDateTimeUtc));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DateTimeFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DateTimeFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DateTimeFilter.
     */
    public static DateTimeFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DateTimeFilter deserializedDateTimeFilter = new DateTimeFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startDateTimeUtc".equals(fieldName)) {
                    deserializedDateTimeFilter.startDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endDateTimeUtc".equals(fieldName)) {
                    deserializedDateTimeFilter.endDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDateTimeFilter;
        });
    }
}
