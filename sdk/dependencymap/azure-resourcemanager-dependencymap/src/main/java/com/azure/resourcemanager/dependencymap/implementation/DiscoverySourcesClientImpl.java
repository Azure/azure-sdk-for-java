// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.dependencymap.fluent.DiscoverySourcesClient;
import com.azure.resourcemanager.dependencymap.fluent.models.DiscoverySourceResourceInner;
import com.azure.resourcemanager.dependencymap.implementation.models.DiscoverySourceResourceListResult;
import com.azure.resourcemanager.dependencymap.models.DiscoverySourceResourceTagsUpdate;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DiscoverySourcesClient.
 */
public final class DiscoverySourcesClientImpl implements DiscoverySourcesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DiscoverySourcesService service;

    /**
     * The service client containing this operation class.
     */
    private final DependencyMapManagementClientImpl client;

    /**
     * Initializes an instance of DiscoverySourcesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DiscoverySourcesClientImpl(DependencyMapManagementClientImpl client) {
        this.service
            = RestProxy.create(DiscoverySourcesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DependencyMapManagementClientDiscoverySources to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DependencyMapManagementClientDiscoverySources")
    public interface DiscoverySourcesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoverySourceResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoverySourceResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DiscoverySourceResourceInner resource,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DiscoverySourceResourceInner resource,
            Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DiscoverySourceResourceTagsUpdate properties, Context context);

        @Patch("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") DiscoverySourceResourceTagsUpdate properties, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources/{sourceName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @PathParam("sourceName") String sourceName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoverySourceResourceListResult>> listByMapsResource(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DependencyMap/maps/{mapName}/discoverySources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoverySourceResourceListResult> listByMapsResourceSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("mapName") String mapName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DiscoverySourceResourceListResult>> listByMapsResourceNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DiscoverySourceResourceListResult> listByMapsResourceNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoverySourceResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DiscoverySourceResourceInner>> getWithResponseAsync(String resourceGroupName, String mapName,
        String sourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            return Mono.error(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoverySourceResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscoverySourceResourceInner> getAsync(String resourceGroupName, String mapName, String sourceName) {
        return getWithResponseAsync(resourceGroupName, mapName, sourceName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoverySourceResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DiscoverySourceResourceInner> getWithResponse(String resourceGroupName, String mapName,
        String sourceName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, mapName, sourceName, accept, context);
    }

    /**
     * Get a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DiscoverySourceResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoverySourceResourceInner get(String resourceGroupName, String mapName, String sourceName) {
        return getWithResponse(resourceGroupName, mapName, sourceName, Context.NONE).getValue();
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName, String mapName,
        String sourceName, DiscoverySourceResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            return Mono.error(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, contentType, accept, resource,
                context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, contentType, accept, resource,
            Context.NONE);
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, contentType, accept, resource,
            context);
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiscoverySourceResourceInner>, DiscoverySourceResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String mapName, String sourceName, DiscoverySourceResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(resourceGroupName, mapName, sourceName, resource);
        return this.client.<DiscoverySourceResourceInner, DiscoverySourceResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), DiscoverySourceResourceInner.class, DiscoverySourceResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiscoverySourceResourceInner>, DiscoverySourceResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String mapName, String sourceName, DiscoverySourceResourceInner resource) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, mapName, sourceName, resource);
        return this.client.<DiscoverySourceResourceInner, DiscoverySourceResourceInner>getLroResult(response,
            DiscoverySourceResourceInner.class, DiscoverySourceResourceInner.class, Context.NONE);
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiscoverySourceResourceInner>, DiscoverySourceResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String mapName, String sourceName, DiscoverySourceResourceInner resource,
        Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(resourceGroupName, mapName, sourceName, resource, context);
        return this.client.<DiscoverySourceResourceInner, DiscoverySourceResourceInner>getLroResult(response,
            DiscoverySourceResourceInner.class, DiscoverySourceResourceInner.class, context);
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscoverySourceResourceInner> createOrUpdateAsync(String resourceGroupName, String mapName,
        String sourceName, DiscoverySourceResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, mapName, sourceName, resource).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoverySourceResourceInner createOrUpdate(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceInner resource) {
        return beginCreateOrUpdate(resourceGroupName, mapName, sourceName, resource).getFinalResult();
    }

    /**
     * Create a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoverySourceResourceInner createOrUpdate(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, mapName, sourceName, resource, context).getFinalResult();
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String resourceGroupName, String mapName,
        String sourceName, DiscoverySourceResourceTagsUpdate properties) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            return Mono.error(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        if (properties == null) {
            return Mono.error(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, contentType, accept,
                properties, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceTagsUpdate properties) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        if (properties == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, contentType, accept, properties,
            Context.NONE);
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceTagsUpdate properties, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        if (properties == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter properties is required and cannot be null."));
        } else {
            properties.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, contentType, accept, properties,
            context);
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DiscoverySourceResourceInner>, DiscoverySourceResourceInner> beginUpdateAsync(
        String resourceGroupName, String mapName, String sourceName, DiscoverySourceResourceTagsUpdate properties) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(resourceGroupName, mapName, sourceName, properties);
        return this.client.<DiscoverySourceResourceInner, DiscoverySourceResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), DiscoverySourceResourceInner.class, DiscoverySourceResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiscoverySourceResourceInner>, DiscoverySourceResourceInner> beginUpdate(
        String resourceGroupName, String mapName, String sourceName, DiscoverySourceResourceTagsUpdate properties) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, mapName, sourceName, properties);
        return this.client.<DiscoverySourceResourceInner, DiscoverySourceResourceInner>getLroResult(response,
            DiscoverySourceResourceInner.class, DiscoverySourceResourceInner.class, Context.NONE);
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DiscoverySourceResourceInner>, DiscoverySourceResourceInner> beginUpdate(
        String resourceGroupName, String mapName, String sourceName, DiscoverySourceResourceTagsUpdate properties,
        Context context) {
        Response<BinaryData> response = updateWithResponse(resourceGroupName, mapName, sourceName, properties, context);
        return this.client.<DiscoverySourceResourceInner, DiscoverySourceResourceInner>getLroResult(response,
            DiscoverySourceResourceInner.class, DiscoverySourceResourceInner.class, context);
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DiscoverySourceResourceInner> updateAsync(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceTagsUpdate properties) {
        return beginUpdateAsync(resourceGroupName, mapName, sourceName, properties).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoverySourceResourceInner update(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceTagsUpdate properties) {
        return beginUpdate(resourceGroupName, mapName, sourceName, properties).getFinalResult();
    }

    /**
     * Update a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Discovery Source resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DiscoverySourceResourceInner update(String resourceGroupName, String mapName, String sourceName,
        DiscoverySourceResourceTagsUpdate properties, Context context) {
        return beginUpdate(resourceGroupName, mapName, sourceName, properties, context).getFinalResult();
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String mapName,
        String sourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            return Mono.error(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String mapName, String sourceName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, Context.NONE);
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String mapName, String sourceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        if (sourceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter sourceName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, mapName, sourceName, context);
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String mapName,
        String sourceName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, mapName, sourceName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String mapName, String sourceName) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, mapName, sourceName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String mapName, String sourceName,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(resourceGroupName, mapName, sourceName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String mapName, String sourceName) {
        return beginDeleteAsync(resourceGroupName, mapName, sourceName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String mapName, String sourceName) {
        beginDelete(resourceGroupName, mapName, sourceName).getFinalResult();
    }

    /**
     * Delete a DiscoverySourceResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param sourceName discovery source resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String mapName, String sourceName, Context context) {
        beginDelete(resourceGroupName, mapName, sourceName, context).getFinalResult();
    }

    /**
     * List DiscoverySourceResource resources by MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DiscoverySourceResourceInner>>
        listByMapsResourceSinglePageAsync(String resourceGroupName, String mapName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            return Mono.error(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByMapsResource(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, mapName, accept, context))
            .<PagedResponse<DiscoverySourceResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List DiscoverySourceResource resources by MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DiscoverySourceResourceInner> listByMapsResourceAsync(String resourceGroupName, String mapName) {
        return new PagedFlux<>(() -> listByMapsResourceSinglePageAsync(resourceGroupName, mapName),
            nextLink -> listByMapsResourceNextSinglePageAsync(nextLink));
    }

    /**
     * List DiscoverySourceResource resources by MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoverySourceResourceInner> listByMapsResourceSinglePage(String resourceGroupName,
        String mapName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoverySourceResourceListResult> res
            = service.listByMapsResourceSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, mapName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DiscoverySourceResource resources by MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoverySourceResourceInner> listByMapsResourceSinglePage(String resourceGroupName,
        String mapName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (mapName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter mapName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoverySourceResourceListResult> res = service.listByMapsResourceSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, mapName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DiscoverySourceResource resources by MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySourceResourceInner> listByMapsResource(String resourceGroupName, String mapName) {
        return new PagedIterable<>(() -> listByMapsResourceSinglePage(resourceGroupName, mapName),
            nextLink -> listByMapsResourceNextSinglePage(nextLink));
    }

    /**
     * List DiscoverySourceResource resources by MapsResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param mapName Maps resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DiscoverySourceResourceInner> listByMapsResource(String resourceGroupName, String mapName,
        Context context) {
        return new PagedIterable<>(() -> listByMapsResourceSinglePage(resourceGroupName, mapName, context),
            nextLink -> listByMapsResourceNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DiscoverySourceResourceInner>> listByMapsResourceNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByMapsResourceNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DiscoverySourceResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoverySourceResourceInner> listByMapsResourceNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoverySourceResourceListResult> res
            = service.listByMapsResourceNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DiscoverySourceResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DiscoverySourceResourceInner> listByMapsResourceNextSinglePage(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<DiscoverySourceResourceListResult> res
            = service.listByMapsResourceNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscoverySourcesClientImpl.class);
}
