// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * ExportDependencies request model.
 */
@Fluent
public final class ExportDependenciesRequest implements JsonSerializable<ExportDependenciesRequest> {
    /*
     * Machine arm id
     */
    private String focusedMachineId;

    /*
     * Filters for ExportDependencies
     */
    private DependencyMapVisualizationFilter filters;

    /**
     * Creates an instance of ExportDependenciesRequest class.
     */
    public ExportDependenciesRequest() {
    }

    /**
     * Get the focusedMachineId property: Machine arm id.
     * 
     * @return the focusedMachineId value.
     */
    public String focusedMachineId() {
        return this.focusedMachineId;
    }

    /**
     * Set the focusedMachineId property: Machine arm id.
     * 
     * @param focusedMachineId the focusedMachineId value to set.
     * @return the ExportDependenciesRequest object itself.
     */
    public ExportDependenciesRequest withFocusedMachineId(String focusedMachineId) {
        this.focusedMachineId = focusedMachineId;
        return this;
    }

    /**
     * Get the filters property: Filters for ExportDependencies.
     * 
     * @return the filters value.
     */
    public DependencyMapVisualizationFilter filters() {
        return this.filters;
    }

    /**
     * Set the filters property: Filters for ExportDependencies.
     * 
     * @param filters the filters value to set.
     * @return the ExportDependenciesRequest object itself.
     */
    public ExportDependenciesRequest withFilters(DependencyMapVisualizationFilter filters) {
        this.filters = filters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (focusedMachineId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property focusedMachineId in model ExportDependenciesRequest"));
        }
        if (filters() != null) {
            filters().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ExportDependenciesRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("focusedMachineId", this.focusedMachineId);
        jsonWriter.writeJsonField("filters", this.filters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExportDependenciesRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExportDependenciesRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ExportDependenciesRequest.
     */
    public static ExportDependenciesRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExportDependenciesRequest deserializedExportDependenciesRequest = new ExportDependenciesRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("focusedMachineId".equals(fieldName)) {
                    deserializedExportDependenciesRequest.focusedMachineId = reader.getString();
                } else if ("filters".equals(fieldName)) {
                    deserializedExportDependenciesRequest.filters = DependencyMapVisualizationFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExportDependenciesRequest;
        });
    }
}
