// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * GetDependencyViewForAllMachines request model.
 */
@Fluent
public final class GetDependencyViewForAllMachinesRequest
    implements JsonSerializable<GetDependencyViewForAllMachinesRequest> {
    /*
     * Filters for GetDependencyViewForAllMachines
     */
    private DependencyProcessFilter filters;

    /**
     * Creates an instance of GetDependencyViewForAllMachinesRequest class.
     */
    public GetDependencyViewForAllMachinesRequest() {
    }

    /**
     * Get the filters property: Filters for GetDependencyViewForAllMachines.
     * 
     * @return the filters value.
     */
    public DependencyProcessFilter filters() {
        return this.filters;
    }

    /**
     * Set the filters property: Filters for GetDependencyViewForAllMachines.
     * 
     * @param filters the filters value to set.
     * @return the GetDependencyViewForAllMachinesRequest object itself.
     */
    public GetDependencyViewForAllMachinesRequest withFilters(DependencyProcessFilter filters) {
        this.filters = filters;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("filters", this.filters);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetDependencyViewForAllMachinesRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetDependencyViewForAllMachinesRequest if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetDependencyViewForAllMachinesRequest.
     */
    public static GetDependencyViewForAllMachinesRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetDependencyViewForAllMachinesRequest deserializedGetDependencyViewForAllMachinesRequest
                = new GetDependencyViewForAllMachinesRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filters".equals(fieldName)) {
                    deserializedGetDependencyViewForAllMachinesRequest.filters
                        = DependencyProcessFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetDependencyViewForAllMachinesRequest;
        });
    }
}
