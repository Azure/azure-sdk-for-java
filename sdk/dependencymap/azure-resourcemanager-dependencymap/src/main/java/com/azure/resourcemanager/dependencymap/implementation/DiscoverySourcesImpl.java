// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.dependencymap.fluent.DiscoverySourcesClient;
import com.azure.resourcemanager.dependencymap.fluent.models.DiscoverySourceResourceInner;
import com.azure.resourcemanager.dependencymap.models.DiscoverySourceResource;
import com.azure.resourcemanager.dependencymap.models.DiscoverySources;

public final class DiscoverySourcesImpl implements DiscoverySources {
    private static final ClientLogger LOGGER = new ClientLogger(DiscoverySourcesImpl.class);

    private final DiscoverySourcesClient innerClient;

    private final com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager;

    public DiscoverySourcesImpl(DiscoverySourcesClient innerClient,
        com.azure.resourcemanager.dependencymap.DependencyMapManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DiscoverySourceResource> getWithResponse(String resourceGroupName, String mapName,
        String sourceName, Context context) {
        Response<DiscoverySourceResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, mapName, sourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DiscoverySourceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DiscoverySourceResource get(String resourceGroupName, String mapName, String sourceName) {
        DiscoverySourceResourceInner inner = this.serviceClient().get(resourceGroupName, mapName, sourceName);
        if (inner != null) {
            return new DiscoverySourceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String mapName, String sourceName) {
        this.serviceClient().delete(resourceGroupName, mapName, sourceName);
    }

    public void delete(String resourceGroupName, String mapName, String sourceName, Context context) {
        this.serviceClient().delete(resourceGroupName, mapName, sourceName, context);
    }

    public PagedIterable<DiscoverySourceResource> listByMapsResource(String resourceGroupName, String mapName) {
        PagedIterable<DiscoverySourceResourceInner> inner
            = this.serviceClient().listByMapsResource(resourceGroupName, mapName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DiscoverySourceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DiscoverySourceResource> listByMapsResource(String resourceGroupName, String mapName,
        Context context) {
        PagedIterable<DiscoverySourceResourceInner> inner
            = this.serviceClient().listByMapsResource(resourceGroupName, mapName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DiscoverySourceResourceImpl(inner1, this.manager()));
    }

    public DiscoverySourceResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        String sourceName = ResourceManagerUtils.getValueFromIdByName(id, "discoverySources");
        if (sourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoverySources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, mapName, sourceName, Context.NONE).getValue();
    }

    public Response<DiscoverySourceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        String sourceName = ResourceManagerUtils.getValueFromIdByName(id, "discoverySources");
        if (sourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoverySources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, mapName, sourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        String sourceName = ResourceManagerUtils.getValueFromIdByName(id, "discoverySources");
        if (sourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoverySources'.", id)));
        }
        this.delete(resourceGroupName, mapName, sourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String mapName = ResourceManagerUtils.getValueFromIdByName(id, "maps");
        if (mapName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'maps'.", id)));
        }
        String sourceName = ResourceManagerUtils.getValueFromIdByName(id, "discoverySources");
        if (sourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'discoverySources'.", id)));
        }
        this.delete(resourceGroupName, mapName, sourceName, context);
    }

    private DiscoverySourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.dependencymap.DependencyMapManager manager() {
        return this.serviceManager;
    }

    public DiscoverySourceResourceImpl define(String name) {
        return new DiscoverySourceResourceImpl(name, this.manager());
    }
}
