// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DependencyProcessFilter model.
 */
@Fluent
public final class DependencyProcessFilter implements JsonSerializable<DependencyProcessFilter> {
    /*
     * Process name filter
     */
    private ProcessNameFilter processNameFilter;

    /**
     * Creates an instance of DependencyProcessFilter class.
     */
    public DependencyProcessFilter() {
    }

    /**
     * Get the processNameFilter property: Process name filter.
     * 
     * @return the processNameFilter value.
     */
    public ProcessNameFilter processNameFilter() {
        return this.processNameFilter;
    }

    /**
     * Set the processNameFilter property: Process name filter.
     * 
     * @param processNameFilter the processNameFilter value to set.
     * @return the DependencyProcessFilter object itself.
     */
    public DependencyProcessFilter withProcessNameFilter(ProcessNameFilter processNameFilter) {
        this.processNameFilter = processNameFilter;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("processNameFilter", this.processNameFilter);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DependencyProcessFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DependencyProcessFilter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DependencyProcessFilter.
     */
    public static DependencyProcessFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DependencyProcessFilter deserializedDependencyProcessFilter = new DependencyProcessFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("processNameFilter".equals(fieldName)) {
                    deserializedDependencyProcessFilter.processNameFilter = ProcessNameFilter.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDependencyProcessFilter;
        });
    }
}
