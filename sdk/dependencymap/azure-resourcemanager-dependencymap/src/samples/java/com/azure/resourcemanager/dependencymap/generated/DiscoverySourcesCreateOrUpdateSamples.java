// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.dependencymap.generated;

import com.azure.resourcemanager.dependencymap.models.DiscoverySourceResourceProperties;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for DiscoverySources CreateOrUpdate.
 */
public final class DiscoverySourcesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-01-31-preview/DiscoverySources_CreateOrUpdate.json
     */
    /**
     * Sample code: DiscoverySources_CreateOrUpdate - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to DependencyMapManager.
     */
    public static void discoverySourcesCreateOrUpdateGeneratedByMaximumSetRule(
        com.azure.resourcemanager.dependencymap.DependencyMapManager manager) {
        manager.discoverySources()
            .define("sourceTest1")
            .withRegion("y")
            .withExistingMap("rgdependencyMap", "mapsTest1")
            .withTags(mapOf())
            .withProperties(new DiscoverySourceResourceProperties().withSourceId("wzlrkzumplzjmixbqv"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
