// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.OutboundNetworkDependenciesEndpoint;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersListOutboundNetworkDependenciesEndpointsMockTests {
    @Test
    public void testListOutboundNetworkDependenciesEndpoints() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"category\":\"jlrigjkskyrioovz\",\"endpoints\":[{\"domainName\":\"waabzmifrygzn\",\"endpointDetails\":[{}]},{\"domainName\":\"ri\",\"endpointDetails\":[{}]}],\"provisioningState\":\"Deleting\"},\"etag\":\"opxlhslnelxieixy\",\"id\":\"llxecwc\",\"name\":\"ojphslhc\",\"type\":\"wjutifdwfmv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KustoManager manager = KustoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<OutboundNetworkDependenciesEndpoint> response = manager.clusters()
            .listOutboundNetworkDependenciesEndpoints("nptgoeiybba", "pfhvfslk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jlrigjkskyrioovz", response.iterator().next().category());
        Assertions.assertEquals("waabzmifrygzn", response.iterator().next().endpoints().get(0).domainName());
    }
}
