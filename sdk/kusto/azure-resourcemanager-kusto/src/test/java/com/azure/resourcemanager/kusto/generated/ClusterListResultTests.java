// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.fluent.models.ClusterInner;
import com.azure.resourcemanager.kusto.models.AzureSku;
import com.azure.resourcemanager.kusto.models.AzureSkuName;
import com.azure.resourcemanager.kusto.models.AzureSkuTier;
import com.azure.resourcemanager.kusto.models.ClusterListResult;
import com.azure.resourcemanager.kusto.models.ClusterNetworkAccessFlag;
import com.azure.resourcemanager.kusto.models.EngineType;
import com.azure.resourcemanager.kusto.models.Identity;
import com.azure.resourcemanager.kusto.models.IdentityType;
import com.azure.resourcemanager.kusto.models.PublicIpType;
import com.azure.resourcemanager.kusto.models.PublicNetworkAccess;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClusterListResultTests {
    @Test
    public void testDeserialize() {
        ClusterListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"sku\":{\"name\":\"Standard_E64i_v3\",\"capacity\":1868038426,\"tier\":\"Basic\"},\"zones\":[\"mryw\",\"uzoqft\"],\"identity\":{\"principalId\":\"zrnkcqvyxlwh\",\"tenantId\":\"sicohoqqnwvlry\",\"type\":\"SystemAssigned,"
                        + " UserAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"state\":\"Unavailable\",\"provisioningState\":\"Running\",\"uri\":\"mqhgyxzkonocuk\",\"dataIngestionUri\":\"lyaxuc\",\"stateReason\":\"uqszfk\",\"trustedExternalTenants\":[],\"enableDiskEncryption\":true,\"enableStreamingIngest\":true,\"enablePurge\":false,\"enableDoubleEncryption\":true,\"publicNetworkAccess\":\"Enabled\",\"allowedIpRangeList\":[],\"engineType\":\"V2\",\"acceptedAudiences\":[],\"enableAutoStop\":true,\"restrictOutboundNetworkAccess\":\"Disabled\",\"allowedFqdnList\":[],\"publicIPType\":\"IPv4\",\"virtualClusterGraduationProperties\":\"frzpwvlqdqgb\",\"privateEndpointConnections\":[]},\"etag\":\"lihkaetcktvfc\",\"location\":\"vf\",\"tags\":{\"xerf\":\"ymuctqhjfbebrj\",\"phxepcyvahf\":\"wutttxfvjrbi\",\"gidokgjljyoxgvcl\":\"ljkyqxjvuuj\",\"jhtxfvgxbfsmxne\":\"bgsncghkjeszzhb\"},\"id\":\"mpvecxgodebfqk\",\"name\":\"rbmpukgri\",\"type\":\"flz\"},{\"sku\":{\"name\":\"Standard_E16as_v4+4TB_PS\",\"capacity\":294567134,\"tier\":\"Standard\"},\"zones\":[\"ycispnqzahmgkb\",\"pyydhi\"],\"identity\":{\"principalId\":\"qqkpikadrg\",\"tenantId\":\"qagnbuyn\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"state\":\"Unavailable\",\"provisioningState\":\"Deleting\",\"uri\":\"siarbutrcvpn\",\"dataIngestionUri\":\"zmhjrunmp\",\"stateReason\":\"tdbhrbnla\",\"trustedExternalTenants\":[],\"enableDiskEncryption\":false,\"enableStreamingIngest\":false,\"enablePurge\":true,\"enableDoubleEncryption\":true,\"publicNetworkAccess\":\"Enabled\",\"allowedIpRangeList\":[],\"engineType\":\"V2\",\"acceptedAudiences\":[],\"enableAutoStop\":false,\"restrictOutboundNetworkAccess\":\"Enabled\",\"allowedFqdnList\":[],\"publicIPType\":\"DualStack\",\"virtualClusterGraduationProperties\":\"qidybyx\",\"privateEndpointConnections\":[]},\"etag\":\"clha\",\"location\":\"xdbabphlwr\",\"tags\":{\"azt\":\"ktsthsucocmny\"},\"id\":\"bt\",\"name\":\"wrqpue\",\"type\":\"ckzywbiexzfeyue\"}]}")
                .toObject(ClusterListResult.class);
        Assertions.assertEquals("vf", model.value().get(0).location());
        Assertions.assertEquals("ymuctqhjfbebrj", model.value().get(0).tags().get("xerf"));
        Assertions.assertEquals(AzureSkuName.STANDARD_E64I_V3, model.value().get(0).sku().name());
        Assertions.assertEquals(1868038426, model.value().get(0).sku().capacity());
        Assertions.assertEquals(AzureSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals("mryw", model.value().get(0).zones().get(0));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(true, model.value().get(0).enableDiskEncryption());
        Assertions.assertEquals(true, model.value().get(0).enableStreamingIngest());
        Assertions.assertEquals(false, model.value().get(0).enablePurge());
        Assertions.assertEquals(true, model.value().get(0).enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(EngineType.V2, model.value().get(0).engineType());
        Assertions.assertEquals(true, model.value().get(0).enableAutoStop());
        Assertions
            .assertEquals(ClusterNetworkAccessFlag.DISABLED, model.value().get(0).restrictOutboundNetworkAccess());
        Assertions.assertEquals(PublicIpType.IPV4, model.value().get(0).publicIpType());
        Assertions.assertEquals("frzpwvlqdqgb", model.value().get(0).virtualClusterGraduationProperties());
    }

    @Test
    public void testSerialize() {
        ClusterListResult model =
            new ClusterListResult()
                .withValue(
                    Arrays
                        .asList(
                            new ClusterInner()
                                .withLocation("vf")
                                .withTags(
                                    mapOf(
                                        "xerf",
                                        "ymuctqhjfbebrj",
                                        "phxepcyvahf",
                                        "wutttxfvjrbi",
                                        "gidokgjljyoxgvcl",
                                        "ljkyqxjvuuj",
                                        "jhtxfvgxbfsmxne",
                                        "bgsncghkjeszzhb"))
                                .withSku(
                                    new AzureSku()
                                        .withName(AzureSkuName.STANDARD_E64I_V3)
                                        .withCapacity(1868038426)
                                        .withTier(AzureSkuTier.BASIC))
                                .withZones(Arrays.asList("mryw", "uzoqft"))
                                .withIdentity(
                                    new Identity()
                                        .withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withTrustedExternalTenants(Arrays.asList())
                                .withEnableDiskEncryption(true)
                                .withEnableStreamingIngest(true)
                                .withEnablePurge(false)
                                .withEnableDoubleEncryption(true)
                                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                                .withAllowedIpRangeList(Arrays.asList())
                                .withEngineType(EngineType.V2)
                                .withAcceptedAudiences(Arrays.asList())
                                .withEnableAutoStop(true)
                                .withRestrictOutboundNetworkAccess(ClusterNetworkAccessFlag.DISABLED)
                                .withAllowedFqdnList(Arrays.asList())
                                .withPublicIpType(PublicIpType.IPV4)
                                .withVirtualClusterGraduationProperties("frzpwvlqdqgb"),
                            new ClusterInner()
                                .withLocation("xdbabphlwr")
                                .withTags(mapOf("azt", "ktsthsucocmny"))
                                .withSku(
                                    new AzureSku()
                                        .withName(AzureSkuName.STANDARD_E16AS_V4_4TB_PS)
                                        .withCapacity(294567134)
                                        .withTier(AzureSkuTier.STANDARD))
                                .withZones(Arrays.asList("ycispnqzahmgkb", "pyydhi"))
                                .withIdentity(
                                    new Identity()
                                        .withType(IdentityType.USER_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withTrustedExternalTenants(Arrays.asList())
                                .withEnableDiskEncryption(false)
                                .withEnableStreamingIngest(false)
                                .withEnablePurge(true)
                                .withEnableDoubleEncryption(true)
                                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                                .withAllowedIpRangeList(Arrays.asList())
                                .withEngineType(EngineType.V2)
                                .withAcceptedAudiences(Arrays.asList())
                                .withEnableAutoStop(false)
                                .withRestrictOutboundNetworkAccess(ClusterNetworkAccessFlag.ENABLED)
                                .withAllowedFqdnList(Arrays.asList())
                                .withPublicIpType(PublicIpType.DUAL_STACK)
                                .withVirtualClusterGraduationProperties("qidybyx")));
        model = BinaryData.fromObject(model).toObject(ClusterListResult.class);
        Assertions.assertEquals("vf", model.value().get(0).location());
        Assertions.assertEquals("ymuctqhjfbebrj", model.value().get(0).tags().get("xerf"));
        Assertions.assertEquals(AzureSkuName.STANDARD_E64I_V3, model.value().get(0).sku().name());
        Assertions.assertEquals(1868038426, model.value().get(0).sku().capacity());
        Assertions.assertEquals(AzureSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals("mryw", model.value().get(0).zones().get(0));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(true, model.value().get(0).enableDiskEncryption());
        Assertions.assertEquals(true, model.value().get(0).enableStreamingIngest());
        Assertions.assertEquals(false, model.value().get(0).enablePurge());
        Assertions.assertEquals(true, model.value().get(0).enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals(EngineType.V2, model.value().get(0).engineType());
        Assertions.assertEquals(true, model.value().get(0).enableAutoStop());
        Assertions
            .assertEquals(ClusterNetworkAccessFlag.DISABLED, model.value().get(0).restrictOutboundNetworkAccess());
        Assertions.assertEquals(PublicIpType.IPV4, model.value().get(0).publicIpType());
        Assertions.assertEquals("frzpwvlqdqgb", model.value().get(0).virtualClusterGraduationProperties());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
