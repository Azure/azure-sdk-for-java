// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.models.Identity;
import com.azure.resourcemanager.kusto.models.IdentityType;
import com.azure.resourcemanager.kusto.models.IdentityUserAssignedIdentities;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class IdentityTests {
    @Test
    public void testDeserialize() {
        Identity model =
            BinaryData
                .fromString(
                    "{\"principalId\":\"uwfzitonpe\",\"tenantId\":\"pjkjlxofpdv\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"kpode\":{\"principalId\":\"ypininm\",\"clientId\":\"huyb\"},\"o\":{\"principalId\":\"oginuvamiheognar\",\"clientId\":\"xth\"},\"bwjzr\":{\"principalId\":\"si\",\"clientId\":\"evcciqihnhun\"}}}")
                .toObject(Identity.class);
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.type());
    }

    @Test
    public void testSerialize() {
        Identity model =
            new Identity()
                .withType(IdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(
                    mapOf(
                        "kpode",
                        new IdentityUserAssignedIdentities(),
                        "o",
                        new IdentityUserAssignedIdentities(),
                        "bwjzr",
                        new IdentityUserAssignedIdentities()));
        model = BinaryData.fromObject(model).toObject(Identity.class);
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.type());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
