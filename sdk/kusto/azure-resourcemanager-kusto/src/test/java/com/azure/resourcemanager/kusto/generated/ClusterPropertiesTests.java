// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.fluent.models.ClusterProperties;
import com.azure.resourcemanager.kusto.models.AcceptedAudiences;
import com.azure.resourcemanager.kusto.models.ClusterNetworkAccessFlag;
import com.azure.resourcemanager.kusto.models.EngineType;
import com.azure.resourcemanager.kusto.models.KeyVaultProperties;
import com.azure.resourcemanager.kusto.models.OptimizedAutoscale;
import com.azure.resourcemanager.kusto.models.PublicIpType;
import com.azure.resourcemanager.kusto.models.PublicNetworkAccess;
import com.azure.resourcemanager.kusto.models.TrustedExternalTenant;
import com.azure.resourcemanager.kusto.models.VirtualNetworkConfiguration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClusterPropertiesTests {
    @Test
    public void testDeserialize() {
        ClusterProperties model =
            BinaryData
                .fromString(
                    "{\"state\":\"Stopping\",\"provisioningState\":\"Succeeded\",\"uri\":\"ofjaeqjhqjb\",\"dataIngestionUri\":\"v\",\"stateReason\":\"mjqulngsn\",\"trustedExternalTenants\":[{\"value\":\"bkzgcwrwclx\"},{\"value\":\"rljdouskcqv\"},{\"value\":\"cr\"},{\"value\":\"dkwt\"}],\"optimizedAutoscale\":{\"version\":24386691,\"isEnabled\":true,\"minimum\":1728330738,\"maximum\":1299495603},\"enableDiskEncryption\":false,\"enableStreamingIngest\":true,\"virtualNetworkConfiguration\":{\"subnetId\":\"rglssainqpj\",\"enginePublicIpId\":\"nzl\",\"dataManagementPublicIpId\":\"jfm\"},\"keyVaultProperties\":{\"keyName\":\"ebvmgxsabkyqd\",\"keyVersion\":\"jitcjczdzevn\",\"keyVaultUri\":\"krwpdap\",\"userIdentity\":\"sbdkvwr\"},\"enablePurge\":false,\"languageExtensions\":{\"value\":[{\"languageExtensionName\":\"PYTHON\"}]},\"enableDoubleEncryption\":false,\"publicNetworkAccess\":\"Disabled\",\"allowedIpRangeList\":[\"mrldhu\",\"jzzd\",\"tqxhocdgeab\",\"gphuticndvka\"],\"engineType\":\"V3\",\"acceptedAudiences\":[{\"value\":\"tyhxhurokft\"}],\"enableAutoStop\":true,\"restrictOutboundNetworkAccess\":\"Disabled\",\"allowedFqdnList\":[\"pwcukjfkgiawxk\",\"ryplwckbasyypn\",\"dhsgcba\",\"phejkotynqgoulz\"],\"publicIPType\":\"DualStack\",\"virtualClusterGraduationProperties\":\"kwy\",\"privateEndpointConnections\":[{\"properties\":{\"groupId\":\"bmadgak\",\"provisioningState\":\"s\"},\"id\":\"yb\",\"name\":\"qqedqytbciqfou\",\"type\":\"lmmnkzsmodmglo\"},{\"properties\":{\"groupId\":\"kwtmutduqktapspw\",\"provisioningState\":\"uertumk\"},\"id\":\"svqwhbmdgbbjfd\",\"name\":\"gmbmbexppbh\",\"type\":\"q\"}]}")
                .toObject(ClusterProperties.class);
        Assertions.assertEquals("bkzgcwrwclx", model.trustedExternalTenants().get(0).value());
        Assertions.assertEquals(24386691, model.optimizedAutoscale().version());
        Assertions.assertEquals(true, model.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(1728330738, model.optimizedAutoscale().minimum());
        Assertions.assertEquals(1299495603, model.optimizedAutoscale().maximum());
        Assertions.assertEquals(false, model.enableDiskEncryption());
        Assertions.assertEquals(true, model.enableStreamingIngest());
        Assertions.assertEquals("rglssainqpj", model.virtualNetworkConfiguration().subnetId());
        Assertions.assertEquals("nzl", model.virtualNetworkConfiguration().enginePublicIpId());
        Assertions.assertEquals("jfm", model.virtualNetworkConfiguration().dataManagementPublicIpId());
        Assertions.assertEquals("ebvmgxsabkyqd", model.keyVaultProperties().keyName());
        Assertions.assertEquals("jitcjczdzevn", model.keyVaultProperties().keyVersion());
        Assertions.assertEquals("krwpdap", model.keyVaultProperties().keyVaultUri());
        Assertions.assertEquals("sbdkvwr", model.keyVaultProperties().userIdentity());
        Assertions.assertEquals(false, model.enablePurge());
        Assertions.assertEquals(false, model.enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("mrldhu", model.allowedIpRangeList().get(0));
        Assertions.assertEquals(EngineType.V3, model.engineType());
        Assertions.assertEquals("tyhxhurokft", model.acceptedAudiences().get(0).value());
        Assertions.assertEquals(true, model.enableAutoStop());
        Assertions.assertEquals(ClusterNetworkAccessFlag.DISABLED, model.restrictOutboundNetworkAccess());
        Assertions.assertEquals("pwcukjfkgiawxk", model.allowedFqdnList().get(0));
        Assertions.assertEquals(PublicIpType.DUAL_STACK, model.publicIpType());
        Assertions.assertEquals("kwy", model.virtualClusterGraduationProperties());
    }

    @Test
    public void testSerialize() {
        ClusterProperties model =
            new ClusterProperties()
                .withTrustedExternalTenants(
                    Arrays
                        .asList(
                            new TrustedExternalTenant().withValue("bkzgcwrwclx"),
                            new TrustedExternalTenant().withValue("rljdouskcqv"),
                            new TrustedExternalTenant().withValue("cr"),
                            new TrustedExternalTenant().withValue("dkwt")))
                .withOptimizedAutoscale(
                    new OptimizedAutoscale()
                        .withVersion(24386691)
                        .withIsEnabled(true)
                        .withMinimum(1728330738)
                        .withMaximum(1299495603))
                .withEnableDiskEncryption(false)
                .withEnableStreamingIngest(true)
                .withVirtualNetworkConfiguration(
                    new VirtualNetworkConfiguration()
                        .withSubnetId("rglssainqpj")
                        .withEnginePublicIpId("nzl")
                        .withDataManagementPublicIpId("jfm"))
                .withKeyVaultProperties(
                    new KeyVaultProperties()
                        .withKeyName("ebvmgxsabkyqd")
                        .withKeyVersion("jitcjczdzevn")
                        .withKeyVaultUri("krwpdap")
                        .withUserIdentity("sbdkvwr"))
                .withEnablePurge(false)
                .withEnableDoubleEncryption(false)
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withAllowedIpRangeList(Arrays.asList("mrldhu", "jzzd", "tqxhocdgeab", "gphuticndvka"))
                .withEngineType(EngineType.V3)
                .withAcceptedAudiences(Arrays.asList(new AcceptedAudiences().withValue("tyhxhurokft")))
                .withEnableAutoStop(true)
                .withRestrictOutboundNetworkAccess(ClusterNetworkAccessFlag.DISABLED)
                .withAllowedFqdnList(Arrays.asList("pwcukjfkgiawxk", "ryplwckbasyypn", "dhsgcba", "phejkotynqgoulz"))
                .withPublicIpType(PublicIpType.DUAL_STACK)
                .withVirtualClusterGraduationProperties("kwy");
        model = BinaryData.fromObject(model).toObject(ClusterProperties.class);
        Assertions.assertEquals("bkzgcwrwclx", model.trustedExternalTenants().get(0).value());
        Assertions.assertEquals(24386691, model.optimizedAutoscale().version());
        Assertions.assertEquals(true, model.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(1728330738, model.optimizedAutoscale().minimum());
        Assertions.assertEquals(1299495603, model.optimizedAutoscale().maximum());
        Assertions.assertEquals(false, model.enableDiskEncryption());
        Assertions.assertEquals(true, model.enableStreamingIngest());
        Assertions.assertEquals("rglssainqpj", model.virtualNetworkConfiguration().subnetId());
        Assertions.assertEquals("nzl", model.virtualNetworkConfiguration().enginePublicIpId());
        Assertions.assertEquals("jfm", model.virtualNetworkConfiguration().dataManagementPublicIpId());
        Assertions.assertEquals("ebvmgxsabkyqd", model.keyVaultProperties().keyName());
        Assertions.assertEquals("jitcjczdzevn", model.keyVaultProperties().keyVersion());
        Assertions.assertEquals("krwpdap", model.keyVaultProperties().keyVaultUri());
        Assertions.assertEquals("sbdkvwr", model.keyVaultProperties().userIdentity());
        Assertions.assertEquals(false, model.enablePurge());
        Assertions.assertEquals(false, model.enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("mrldhu", model.allowedIpRangeList().get(0));
        Assertions.assertEquals(EngineType.V3, model.engineType());
        Assertions.assertEquals("tyhxhurokft", model.acceptedAudiences().get(0).value());
        Assertions.assertEquals(true, model.enableAutoStop());
        Assertions.assertEquals(ClusterNetworkAccessFlag.DISABLED, model.restrictOutboundNetworkAccess());
        Assertions.assertEquals("pwcukjfkgiawxk", model.allowedFqdnList().get(0));
        Assertions.assertEquals(PublicIpType.DUAL_STACK, model.publicIpType());
        Assertions.assertEquals("kwy", model.virtualClusterGraduationProperties());
    }
}
