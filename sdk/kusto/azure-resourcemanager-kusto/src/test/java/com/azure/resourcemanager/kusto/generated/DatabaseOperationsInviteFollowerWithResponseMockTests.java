// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.DatabaseInviteFollowerRequest;
import com.azure.resourcemanager.kusto.models.DatabaseInviteFollowerResult;
import com.azure.resourcemanager.kusto.models.TableLevelSharingProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatabaseOperationsInviteFollowerWithResponseMockTests {
    @Test
    public void testInviteFollowerWithResponse() throws Exception {
        String responseStr = "{\"generatedInvitation\":\"ewbidyvteowxv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KustoManager manager = KustoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DatabaseInviteFollowerResult response = manager.databaseOperations()
            .inviteFollowerWithResponse("wjksghudgzhxo", "jggsvo", "jkxibda",
                new DatabaseInviteFollowerRequest().withInviteeEmail("hrkmdyomkxfbvfbh")
                    .withTableLevelSharingProperties(new TableLevelSharingProperties()
                        .withTablesToInclude(Arrays.asList("hpwpgddeimawzovg"))
                        .withTablesToExclude(Arrays.asList("muikjcjcaztbws"))
                        .withExternalTablesToInclude(Arrays.asList("owxwcomli", "ytwvczcswkacve"))
                        .withExternalTablesToExclude(Arrays.asList("dvlvhbwrnfxtgdd"))
                        .withMaterializedViewsToInclude(Arrays.asList("hehnmnaoya"))
                        .withMaterializedViewsToExclude(Arrays.asList("oe", "swankltytmh", "roznnhdrlktgj", "sggux"))
                        .withFunctionsToInclude(Arrays.asList("lwywae", "czg", "bukklels"))
                        .withFunctionsToExclude(Arrays.asList("lycsxz", "jks", "lsmdesqplpvmjc"))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ewbidyvteowxv", response.generatedInvitation());
    }
}
