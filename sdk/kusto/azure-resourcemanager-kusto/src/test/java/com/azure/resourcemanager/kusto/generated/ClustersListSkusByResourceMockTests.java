// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.AzureResourceSku;
import com.azure.resourcemanager.kusto.models.AzureScaleType;
import com.azure.resourcemanager.kusto.models.AzureSkuName;
import com.azure.resourcemanager.kusto.models.AzureSkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersListSkusByResourceMockTests {
    @Test
    public void testListSkusByResource() throws Exception {
        String responseStr
            = "{\"value\":[{\"resourceType\":\"qglcfhmlrqryxynq\",\"sku\":{\"name\":\"Standard_D14_v2\",\"capacity\":69570650,\"tier\":\"Standard\"},\"capacity\":{\"scaleType\":\"automatic\",\"minimum\":347579095,\"maximum\":786397425,\"default\":432652683}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KustoManager manager = KustoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AzureResourceSku> response
            = manager.clusters().listSkusByResource("wgnyfusfzsvtui", "zh", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qglcfhmlrqryxynq", response.iterator().next().resourceType());
        Assertions.assertEquals(AzureSkuName.STANDARD_D14_V2, response.iterator().next().sku().name());
        Assertions.assertEquals(69570650, response.iterator().next().sku().capacity());
        Assertions.assertEquals(AzureSkuTier.STANDARD, response.iterator().next().sku().tier());
        Assertions.assertEquals(AzureScaleType.AUTOMATIC, response.iterator().next().capacity().scaleType());
        Assertions.assertEquals(347579095, response.iterator().next().capacity().minimum());
        Assertions.assertEquals(786397425, response.iterator().next().capacity().maximum());
        Assertions.assertEquals(432652683, response.iterator().next().capacity().defaultProperty());
    }
}
