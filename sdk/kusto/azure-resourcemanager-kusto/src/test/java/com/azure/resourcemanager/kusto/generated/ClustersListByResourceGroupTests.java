// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.AzureSkuName;
import com.azure.resourcemanager.kusto.models.AzureSkuTier;
import com.azure.resourcemanager.kusto.models.Cluster;
import com.azure.resourcemanager.kusto.models.ClusterNetworkAccessFlag;
import com.azure.resourcemanager.kusto.models.EngineType;
import com.azure.resourcemanager.kusto.models.IdentityType;
import com.azure.resourcemanager.kusto.models.PublicIpType;
import com.azure.resourcemanager.kusto.models.PublicNetworkAccess;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClustersListByResourceGroupTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"Standard_E8s_v5+2TB_PS\",\"capacity\":1126923901,\"tier\":\"Basic\"},\"zones\":[\"mrfhirctymox\"],\"identity\":{\"principalId\":\"pipiwyczuhxac\",\"tenantId\":\"jlihhyus\",\"type\":\"SystemAssigned,"
                + " UserAssigned\",\"userAssignedIdentities\":{}},\"properties\":{\"state\":\"Running\",\"provisioningState\":\"Creating\",\"uri\":\"wdgzxulucv\",\"dataIngestionUri\":\"mrsreuzvxurisjnh\",\"stateReason\":\"txifqj\",\"trustedExternalTenants\":[],\"optimizedAutoscale\":{\"version\":1479016708,\"isEnabled\":false,\"minimum\":983459975,\"maximum\":912922053},\"enableDiskEncryption\":false,\"enableStreamingIngest\":true,\"virtualNetworkConfiguration\":{\"subnetId\":\"sutrgjup\",\"enginePublicIpId\":\"uutpwoqhih\",\"dataManagementPublicIpId\":\"jqgwzp\"},\"keyVaultProperties\":{\"keyName\":\"n\",\"keyVersion\":\"ypsxjvfoim\",\"keyVaultUri\":\"slirciz\",\"userIdentity\":\"vydfceacvlhvygdy\"},\"enablePurge\":true,\"languageExtensions\":{\"value\":[]},\"enableDoubleEncryption\":true,\"publicNetworkAccess\":\"Enabled\",\"allowedIpRangeList\":[\"slbi\"],\"engineType\":\"V2\",\"acceptedAudiences\":[],\"enableAutoStop\":false,\"restrictOutboundNetworkAccess\":\"Enabled\",\"allowedFqdnList\":[\"mznbaeqphch\",\"nrnrp\"],\"publicIPType\":\"DualStack\",\"virtualClusterGraduationProperties\":\"wrykqgai\",\"privateEndpointConnections\":[]},\"etag\":\"klbydv\",\"location\":\"hbejdznxcvdsrhnj\",\"tags\":{\"qfzgemjdftul\":\"lvtno\",\"tmczuomejwcwwqi\":\"ltducea\",\"vpkjpr\":\"knssxmojm\"},\"id\":\"kwcf\",\"name\":\"ql\",\"type\":\"yxgtczh\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        KustoManager manager =
            KustoManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Cluster> response = manager.clusters().listByResourceGroup("snrbgyefrymsgao", Context.NONE);

        Assertions.assertEquals("hbejdznxcvdsrhnj", response.iterator().next().location());
        Assertions.assertEquals("lvtno", response.iterator().next().tags().get("qfzgemjdftul"));
        Assertions.assertEquals(AzureSkuName.STANDARD_E8S_V5_2TB_PS, response.iterator().next().sku().name());
        Assertions.assertEquals(1126923901, response.iterator().next().sku().capacity());
        Assertions.assertEquals(AzureSkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("mrfhirctymox", response.iterator().next().zones().get(0));
        Assertions
            .assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(1479016708, response.iterator().next().optimizedAutoscale().version());
        Assertions.assertEquals(false, response.iterator().next().optimizedAutoscale().isEnabled());
        Assertions.assertEquals(983459975, response.iterator().next().optimizedAutoscale().minimum());
        Assertions.assertEquals(912922053, response.iterator().next().optimizedAutoscale().maximum());
        Assertions.assertEquals(false, response.iterator().next().enableDiskEncryption());
        Assertions.assertEquals(true, response.iterator().next().enableStreamingIngest());
        Assertions.assertEquals("sutrgjup", response.iterator().next().virtualNetworkConfiguration().subnetId());
        Assertions
            .assertEquals("uutpwoqhih", response.iterator().next().virtualNetworkConfiguration().enginePublicIpId());
        Assertions
            .assertEquals(
                "jqgwzp", response.iterator().next().virtualNetworkConfiguration().dataManagementPublicIpId());
        Assertions.assertEquals("n", response.iterator().next().keyVaultProperties().keyName());
        Assertions.assertEquals("ypsxjvfoim", response.iterator().next().keyVaultProperties().keyVersion());
        Assertions.assertEquals("slirciz", response.iterator().next().keyVaultProperties().keyVaultUri());
        Assertions.assertEquals("vydfceacvlhvygdy", response.iterator().next().keyVaultProperties().userIdentity());
        Assertions.assertEquals(true, response.iterator().next().enablePurge());
        Assertions.assertEquals(true, response.iterator().next().enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("slbi", response.iterator().next().allowedIpRangeList().get(0));
        Assertions.assertEquals(EngineType.V2, response.iterator().next().engineType());
        Assertions.assertEquals(false, response.iterator().next().enableAutoStop());
        Assertions
            .assertEquals(ClusterNetworkAccessFlag.ENABLED, response.iterator().next().restrictOutboundNetworkAccess());
        Assertions.assertEquals("mznbaeqphch", response.iterator().next().allowedFqdnList().get(0));
        Assertions.assertEquals(PublicIpType.DUAL_STACK, response.iterator().next().publicIpType());
        Assertions.assertEquals("wrykqgai", response.iterator().next().virtualClusterGraduationProperties());
    }
}
