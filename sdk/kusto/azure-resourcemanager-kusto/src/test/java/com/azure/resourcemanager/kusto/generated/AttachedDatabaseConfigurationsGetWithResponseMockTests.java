// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.AttachedDatabaseConfiguration;
import com.azure.resourcemanager.kusto.models.DefaultPrincipalsModificationKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttachedDatabaseConfigurationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"location\":\"pqxpx\",\"properties\":{\"provisioningState\":\"Deleting\",\"databaseName\":\"ngjsaasi\",\"clusterResourceId\":\"xtmkzjvkviir\",\"attachedDatabaseNames\":[\"grwsdp\",\"ra\",\"zvzbglbyv\",\"ctctbrxkjz\"],\"defaultPrincipalsModificationKind\":\"Replace\",\"tableLevelSharingProperties\":{\"tablesToInclude\":[\"fmsh\"],\"tablesToExclude\":[\"bkgozxwopdbydpi\",\"qaclnapxbiy\",\"nugj\",\"nfsm\"],\"externalTablesToInclude\":[\"tuxuuyilflq\",\"iquvrehm\",\"njhvsujztc\",\"ytqj\"],\"externalTablesToExclude\":[\"auunfprnjletlx\"],\"materializedViewsToInclude\":[\"pddouifamowaziyn\",\"nlqwzdvpiwhx\",\"szdtmaajquh\"],\"materializedViewsToExclude\":[\"lrjvmtyg\"],\"functionsToInclude\":[\"zyos\",\"spshckfkyjp\",\"sp\"],\"functionsToExclude\":[\"sdfppyogtie\",\"ujtv\"]},\"databaseNameOverride\":\"kcnyx\",\"databaseNamePrefix\":\"munjdxvglnkvx\"},\"id\":\"xpaglqivbgkc\",\"name\":\"khpzvuqdflv\",\"type\":\"niypfpubcpzg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        KustoManager manager =
            KustoManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        AttachedDatabaseConfiguration response =
            manager
                .attachedDatabaseConfigurations()
                .getWithResponse("rdhlis", "gwflq", "mpizru", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("pqxpx", response.location());
        Assertions.assertEquals("ngjsaasi", response.databaseName());
        Assertions.assertEquals("xtmkzjvkviir", response.clusterResourceId());
        Assertions
            .assertEquals(DefaultPrincipalsModificationKind.REPLACE, response.defaultPrincipalsModificationKind());
        Assertions.assertEquals("fmsh", response.tableLevelSharingProperties().tablesToInclude().get(0));
        Assertions.assertEquals("bkgozxwopdbydpi", response.tableLevelSharingProperties().tablesToExclude().get(0));
        Assertions.assertEquals("tuxuuyilflq", response.tableLevelSharingProperties().externalTablesToInclude().get(0));
        Assertions
            .assertEquals("auunfprnjletlx", response.tableLevelSharingProperties().externalTablesToExclude().get(0));
        Assertions
            .assertEquals(
                "pddouifamowaziyn", response.tableLevelSharingProperties().materializedViewsToInclude().get(0));
        Assertions.assertEquals("lrjvmtyg", response.tableLevelSharingProperties().materializedViewsToExclude().get(0));
        Assertions.assertEquals("zyos", response.tableLevelSharingProperties().functionsToInclude().get(0));
        Assertions.assertEquals("sdfppyogtie", response.tableLevelSharingProperties().functionsToExclude().get(0));
        Assertions.assertEquals("kcnyx", response.databaseNameOverride());
        Assertions.assertEquals("munjdxvglnkvx", response.databaseNamePrefix());
    }
}
