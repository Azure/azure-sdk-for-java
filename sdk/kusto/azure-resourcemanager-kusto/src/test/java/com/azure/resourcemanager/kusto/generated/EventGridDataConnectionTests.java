// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.models.BlobStorageEventType;
import com.azure.resourcemanager.kusto.models.DatabaseRouting;
import com.azure.resourcemanager.kusto.models.EventGridDataConnection;
import com.azure.resourcemanager.kusto.models.EventGridDataFormat;
import org.junit.jupiter.api.Assertions;

public final class EventGridDataConnectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventGridDataConnection model =
            BinaryData
                .fromString(
                    "{\"kind\":\"EventGrid\",\"properties\":{\"storageAccountResourceId\":\"fhjxakvvjgs\",\"eventGridResourceId\":\"r\",\"eventHubResourceId\":\"il\",\"consumerGroup\":\"yw\",\"tableName\":\"kgkxn\",\"mappingRuleName\":\"dabg\",\"dataFormat\":\"RAW\",\"ignoreFirstRecord\":true,\"blobStorageEventType\":\"Microsoft.Storage.BlobCreated\",\"managedIdentityResourceId\":\"wbcihxuuwh\",\"managedIdentityObjectId\":\"yxccyb\",\"databaseRouting\":\"Multi\",\"provisioningState\":\"Succeeded\"},\"location\":\"kudzpxgwj\",\"id\":\"lma\",\"name\":\"stcyohpfkyrkdbd\",\"type\":\"iogsjkmnwq\"}")
                .toObject(EventGridDataConnection.class);
        Assertions.assertEquals("kudzpxgwj", model.location());
        Assertions.assertEquals("fhjxakvvjgs", model.storageAccountResourceId());
        Assertions.assertEquals("r", model.eventGridResourceId());
        Assertions.assertEquals("il", model.eventHubResourceId());
        Assertions.assertEquals("yw", model.consumerGroup());
        Assertions.assertEquals("kgkxn", model.tableName());
        Assertions.assertEquals("dabg", model.mappingRuleName());
        Assertions.assertEquals(EventGridDataFormat.RAW, model.dataFormat());
        Assertions.assertEquals(true, model.ignoreFirstRecord());
        Assertions.assertEquals(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED, model.blobStorageEventType());
        Assertions.assertEquals("wbcihxuuwh", model.managedIdentityResourceId());
        Assertions.assertEquals(DatabaseRouting.MULTI, model.databaseRouting());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventGridDataConnection model =
            new EventGridDataConnection()
                .withLocation("kudzpxgwj")
                .withStorageAccountResourceId("fhjxakvvjgs")
                .withEventGridResourceId("r")
                .withEventHubResourceId("il")
                .withConsumerGroup("yw")
                .withTableName("kgkxn")
                .withMappingRuleName("dabg")
                .withDataFormat(EventGridDataFormat.RAW)
                .withIgnoreFirstRecord(true)
                .withBlobStorageEventType(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED)
                .withManagedIdentityResourceId("wbcihxuuwh")
                .withDatabaseRouting(DatabaseRouting.MULTI);
        model = BinaryData.fromObject(model).toObject(EventGridDataConnection.class);
        Assertions.assertEquals("kudzpxgwj", model.location());
        Assertions.assertEquals("fhjxakvvjgs", model.storageAccountResourceId());
        Assertions.assertEquals("r", model.eventGridResourceId());
        Assertions.assertEquals("il", model.eventHubResourceId());
        Assertions.assertEquals("yw", model.consumerGroup());
        Assertions.assertEquals("kgkxn", model.tableName());
        Assertions.assertEquals("dabg", model.mappingRuleName());
        Assertions.assertEquals(EventGridDataFormat.RAW, model.dataFormat());
        Assertions.assertEquals(true, model.ignoreFirstRecord());
        Assertions.assertEquals(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED, model.blobStorageEventType());
        Assertions.assertEquals("wbcihxuuwh", model.managedIdentityResourceId());
        Assertions.assertEquals(DatabaseRouting.MULTI, model.databaseRouting());
    }
}
