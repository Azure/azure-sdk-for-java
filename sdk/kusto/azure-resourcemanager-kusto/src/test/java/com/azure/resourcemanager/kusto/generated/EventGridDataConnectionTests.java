// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.models.BlobStorageEventType;
import com.azure.resourcemanager.kusto.models.DatabaseRouting;
import com.azure.resourcemanager.kusto.models.EventGridDataConnection;
import com.azure.resourcemanager.kusto.models.EventGridDataFormat;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class EventGridDataConnectionTests {
    @Test
    public void testDeserialize() {
        EventGridDataConnection model =
            BinaryData
                .fromString(
                    "{\"kind\":\"EventGrid\",\"properties\":{\"storageAccountResourceId\":\"y\",\"eventGridResourceId\":\"tronzmyhgfi\",\"eventHubResourceId\":\"nsxkmcwaekrrjr\",\"consumerGroup\":\"afxtsgum\",\"tableName\":\"glikkxwslolb\",\"mappingRuleName\":\"vuzlm\",\"dataFormat\":\"TSV\",\"ignoreFirstRecord\":false,\"blobStorageEventType\":\"Microsoft.Storage.BlobCreated\",\"managedIdentityResourceId\":\"plcrpwjxeznoig\",\"managedIdentityObjectId\":\"njwmwkpnbsazejj\",\"databaseRouting\":\"Multi\",\"provisioningState\":\"Running\"},\"location\":\"hsxttaugzxnf\",\"id\":\"azpxdtnkdmkqjjl\",\"name\":\"uenvrkp\",\"type\":\"ou\"}")
                .toObject(EventGridDataConnection.class);
        Assertions.assertEquals("hsxttaugzxnf", model.location());
        Assertions.assertEquals("y", model.storageAccountResourceId());
        Assertions.assertEquals("tronzmyhgfi", model.eventGridResourceId());
        Assertions.assertEquals("nsxkmcwaekrrjr", model.eventHubResourceId());
        Assertions.assertEquals("afxtsgum", model.consumerGroup());
        Assertions.assertEquals("glikkxwslolb", model.tableName());
        Assertions.assertEquals("vuzlm", model.mappingRuleName());
        Assertions.assertEquals(EventGridDataFormat.TSV, model.dataFormat());
        Assertions.assertEquals(false, model.ignoreFirstRecord());
        Assertions.assertEquals(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED, model.blobStorageEventType());
        Assertions.assertEquals("plcrpwjxeznoig", model.managedIdentityResourceId());
        Assertions.assertEquals(DatabaseRouting.MULTI, model.databaseRouting());
    }

    @Test
    public void testSerialize() {
        EventGridDataConnection model =
            new EventGridDataConnection()
                .withLocation("hsxttaugzxnf")
                .withStorageAccountResourceId("y")
                .withEventGridResourceId("tronzmyhgfi")
                .withEventHubResourceId("nsxkmcwaekrrjr")
                .withConsumerGroup("afxtsgum")
                .withTableName("glikkxwslolb")
                .withMappingRuleName("vuzlm")
                .withDataFormat(EventGridDataFormat.TSV)
                .withIgnoreFirstRecord(false)
                .withBlobStorageEventType(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED)
                .withManagedIdentityResourceId("plcrpwjxeznoig")
                .withDatabaseRouting(DatabaseRouting.MULTI);
        model = BinaryData.fromObject(model).toObject(EventGridDataConnection.class);
        Assertions.assertEquals("hsxttaugzxnf", model.location());
        Assertions.assertEquals("y", model.storageAccountResourceId());
        Assertions.assertEquals("tronzmyhgfi", model.eventGridResourceId());
        Assertions.assertEquals("nsxkmcwaekrrjr", model.eventHubResourceId());
        Assertions.assertEquals("afxtsgum", model.consumerGroup());
        Assertions.assertEquals("glikkxwslolb", model.tableName());
        Assertions.assertEquals("vuzlm", model.mappingRuleName());
        Assertions.assertEquals(EventGridDataFormat.TSV, model.dataFormat());
        Assertions.assertEquals(false, model.ignoreFirstRecord());
        Assertions.assertEquals(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED, model.blobStorageEventType());
        Assertions.assertEquals("plcrpwjxeznoig", model.managedIdentityResourceId());
        Assertions.assertEquals(DatabaseRouting.MULTI, model.databaseRouting());
    }
}
