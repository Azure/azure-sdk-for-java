// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.models.BlobStorageEventType;
import com.azure.resourcemanager.kusto.models.DatabaseRouting;
import com.azure.resourcemanager.kusto.models.EventGridDataConnection;
import com.azure.resourcemanager.kusto.models.EventGridDataFormat;
import org.junit.jupiter.api.Assertions;

public final class EventGridDataConnectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventGridDataConnection model =
            BinaryData
                .fromString(
                    "{\"kind\":\"EventGrid\",\"properties\":{\"storageAccountResourceId\":\"alhsnvkc\",\"eventGridResourceId\":\"xzrpo\",\"eventHubResourceId\":\"imlnwiaaomylw\",\"consumerGroup\":\"azul\",\"tableName\":\"ethwwnpjhlfz\",\"mappingRuleName\":\"pchwa\",\"dataFormat\":\"SCSV\",\"ignoreFirstRecord\":true,\"blobStorageEventType\":\"Microsoft.Storage.BlobCreated\",\"managedIdentityResourceId\":\"epgfew\",\"managedIdentityObjectId\":\"wlyxgncxyk\",\"databaseRouting\":\"Single\",\"provisioningState\":\"Deleting\"},\"location\":\"immbcx\",\"id\":\"h\",\"name\":\"cporxvxcjz\",\"type\":\"qizxfpxtgqscjavf\"}")
                .toObject(EventGridDataConnection.class);
        Assertions.assertEquals("immbcx", model.location());
        Assertions.assertEquals("alhsnvkc", model.storageAccountResourceId());
        Assertions.assertEquals("xzrpo", model.eventGridResourceId());
        Assertions.assertEquals("imlnwiaaomylw", model.eventHubResourceId());
        Assertions.assertEquals("azul", model.consumerGroup());
        Assertions.assertEquals("ethwwnpjhlfz", model.tableName());
        Assertions.assertEquals("pchwa", model.mappingRuleName());
        Assertions.assertEquals(EventGridDataFormat.SCSV, model.dataFormat());
        Assertions.assertEquals(true, model.ignoreFirstRecord());
        Assertions.assertEquals(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED, model.blobStorageEventType());
        Assertions.assertEquals("epgfew", model.managedIdentityResourceId());
        Assertions.assertEquals(DatabaseRouting.SINGLE, model.databaseRouting());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventGridDataConnection model =
            new EventGridDataConnection()
                .withLocation("immbcx")
                .withStorageAccountResourceId("alhsnvkc")
                .withEventGridResourceId("xzrpo")
                .withEventHubResourceId("imlnwiaaomylw")
                .withConsumerGroup("azul")
                .withTableName("ethwwnpjhlfz")
                .withMappingRuleName("pchwa")
                .withDataFormat(EventGridDataFormat.SCSV)
                .withIgnoreFirstRecord(true)
                .withBlobStorageEventType(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED)
                .withManagedIdentityResourceId("epgfew")
                .withDatabaseRouting(DatabaseRouting.SINGLE);
        model = BinaryData.fromObject(model).toObject(EventGridDataConnection.class);
        Assertions.assertEquals("immbcx", model.location());
        Assertions.assertEquals("alhsnvkc", model.storageAccountResourceId());
        Assertions.assertEquals("xzrpo", model.eventGridResourceId());
        Assertions.assertEquals("imlnwiaaomylw", model.eventHubResourceId());
        Assertions.assertEquals("azul", model.consumerGroup());
        Assertions.assertEquals("ethwwnpjhlfz", model.tableName());
        Assertions.assertEquals("pchwa", model.mappingRuleName());
        Assertions.assertEquals(EventGridDataFormat.SCSV, model.dataFormat());
        Assertions.assertEquals(true, model.ignoreFirstRecord());
        Assertions.assertEquals(BlobStorageEventType.MICROSOFT_STORAGE_BLOB_CREATED, model.blobStorageEventType());
        Assertions.assertEquals("epgfew", model.managedIdentityResourceId());
        Assertions.assertEquals(DatabaseRouting.SINGLE, model.databaseRouting());
    }
}
