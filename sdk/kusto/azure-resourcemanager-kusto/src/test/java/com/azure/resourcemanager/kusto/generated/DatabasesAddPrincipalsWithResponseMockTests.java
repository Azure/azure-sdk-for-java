// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.fluent.models.DatabasePrincipalInner;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalListRequest;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalListResult;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalRole;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatabasesAddPrincipalsWithResponseMockTests {
    @Test
    public void testAddPrincipalsWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"role\":\"Ingestor\",\"name\":\"tjxtxr\",\"type\":\"Group\",\"fqn\":\"tjvidt\",\"email\":\"epu\",\"appId\":\"vyjtcvu\",\"tenantName\":\"asiz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KustoManager manager = KustoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DatabasePrincipalListResult response = manager.databases()
            .addPrincipalsWithResponse("fypococtfjgti", "rjvzuyt", "rmlmuowo",
                new DatabasePrincipalListRequest()
                    .withValue(Arrays.asList(new DatabasePrincipalInner().withRole(DatabasePrincipalRole.ADMIN)
                        .withName("iropionszon")
                        .withType(DatabasePrincipalType.APP)
                        .withFqn("gajinnixjawrtmj")
                        .withEmail("myccx")
                        .withAppId("hcoxov"))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(DatabasePrincipalRole.INGESTOR, response.value().get(0).role());
        Assertions.assertEquals("tjxtxr", response.value().get(0).name());
        Assertions.assertEquals(DatabasePrincipalType.GROUP, response.value().get(0).type());
        Assertions.assertEquals("tjvidt", response.value().get(0).fqn());
        Assertions.assertEquals("epu", response.value().get(0).email());
        Assertions.assertEquals("vyjtcvu", response.value().get(0).appId());
    }
}
