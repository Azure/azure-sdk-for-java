// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.AttachedDatabaseConfiguration;
import com.azure.resourcemanager.kusto.models.DefaultPrincipalsModificationKind;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttachedDatabaseConfigurationsListByClusterMockTests {
    @Test
    public void testListByCluster() throws Exception {
        String responseStr
            = "{\"value\":[{\"location\":\"bjb\",\"properties\":{\"provisioningState\":\"Canceled\",\"databaseName\":\"gtdysnaqu\",\"clusterResourceId\":\"lqbctqhamzjrw\",\"attachedDatabaseNames\":[\"zeqyjleziun\",\"xdfzantkw\",\"eg\",\"amlbnseqacjjvpil\"],\"defaultPrincipalsModificationKind\":\"None\",\"tableLevelSharingProperties\":{\"tablesToInclude\":[\"jagmdi\",\"gueiookjbsahrtdt\",\"delqacslmoto\",\"bnfxofvc\"],\"tablesToExclude\":[\"dirazf\",\"xejw\"],\"externalTablesToInclude\":[\"dujtmvcope\",\"c\",\"jurbuhhlkyqltqsr\",\"gtuwkff\"],\"externalTablesToExclude\":[\"tsysi\",\"fvcl\",\"lxnfuijtkbusqogs\",\"ikayiansharuj\"],\"materializedViewsToInclude\":[\"qxfzyjqttvwk\"],\"materializedViewsToExclude\":[\"j\",\"enuygbq\",\"qqekewvnqvcdlgu\"],\"functionsToInclude\":[\"mfdjwn\",\"axpunjqikczvv\",\"tacgxmfc\"],\"functionsToExclude\":[\"rxhtvso\"]},\"databaseNameOverride\":\"lwntsjgqrs\",\"databaseNamePrefix\":\"p\"},\"id\":\"uuuybnchrsziz\",\"name\":\"yuel\",\"type\":\"etndnbfqyggagf\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KustoManager manager = KustoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AttachedDatabaseConfiguration> response = manager.attachedDatabaseConfigurations()
            .listByCluster("ncnwfepbnwgf", "xjg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bjb", response.iterator().next().location());
        Assertions.assertEquals("gtdysnaqu", response.iterator().next().databaseName());
        Assertions.assertEquals("lqbctqhamzjrw", response.iterator().next().clusterResourceId());
        Assertions.assertEquals(DefaultPrincipalsModificationKind.NONE,
            response.iterator().next().defaultPrincipalsModificationKind());
        Assertions.assertEquals("jagmdi",
            response.iterator().next().tableLevelSharingProperties().tablesToInclude().get(0));
        Assertions.assertEquals("dirazf",
            response.iterator().next().tableLevelSharingProperties().tablesToExclude().get(0));
        Assertions.assertEquals("dujtmvcope",
            response.iterator().next().tableLevelSharingProperties().externalTablesToInclude().get(0));
        Assertions.assertEquals("tsysi",
            response.iterator().next().tableLevelSharingProperties().externalTablesToExclude().get(0));
        Assertions.assertEquals("qxfzyjqttvwk",
            response.iterator().next().tableLevelSharingProperties().materializedViewsToInclude().get(0));
        Assertions.assertEquals("j",
            response.iterator().next().tableLevelSharingProperties().materializedViewsToExclude().get(0));
        Assertions.assertEquals("mfdjwn",
            response.iterator().next().tableLevelSharingProperties().functionsToInclude().get(0));
        Assertions.assertEquals("rxhtvso",
            response.iterator().next().tableLevelSharingProperties().functionsToExclude().get(0));
        Assertions.assertEquals("lwntsjgqrs", response.iterator().next().databaseNameOverride());
        Assertions.assertEquals("p", response.iterator().next().databaseNamePrefix());
    }
}
