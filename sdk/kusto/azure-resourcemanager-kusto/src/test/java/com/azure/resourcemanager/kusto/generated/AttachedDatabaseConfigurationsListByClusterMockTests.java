// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.AttachedDatabaseConfiguration;
import com.azure.resourcemanager.kusto.models.DefaultPrincipalsModificationKind;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AttachedDatabaseConfigurationsListByClusterMockTests {
    @Test
    public void testListByCluster() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"location\":\"e\",\"properties\":{\"provisioningState\":\"Running\",\"databaseName\":\"tag\",\"clusterResourceId\":\"tsxoatftgz\",\"attachedDatabaseNames\":[\"bs\",\"vefloccsrmozihmi\",\"g\",\"wtxxpkyjcx\"],\"defaultPrincipalsModificationKind\":\"Union\",\"tableLevelSharingProperties\":{\"tablesToInclude\":[\"ytfmpc\",\"cil\",\"mcayk\"],\"tablesToExclude\":[\"oxuztrksx\",\"pndfcpfnznt\",\"jtwkjaos\"],\"externalTablesToInclude\":[\"zvoamktc\",\"iosmgbzahgxqdly\",\"tlt\",\"ap\"],\"externalTablesToExclude\":[\"zkatb\"],\"materializedViewsToInclude\":[\"znnbsoqeqalarvl\",\"gunbtgfebwlnbm\",\"yreeudz\",\"av\"],\"materializedViewsToExclude\":[\"qmjxlyyzglgouwtl\",\"jjyuojqtobax\"],\"functionsToInclude\":[\"ytunlbfjkwr\"],\"functionsToExclude\":[\"kqbh\",\"y\",\"qunjqh\"]},\"databaseNameOverride\":\"nxaulk\",\"databaseNamePrefix\":\"kdk\"},\"id\":\"fmjnnawtqa\",\"name\":\"pxuckpggq\",\"type\":\"wey\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        KustoManager manager =
            KustoManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AttachedDatabaseConfiguration> response =
            manager
                .attachedDatabaseConfigurations()
                .listByCluster("aohdjh", "flzokxco", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("e", response.iterator().next().location());
        Assertions.assertEquals("tag", response.iterator().next().databaseName());
        Assertions.assertEquals("tsxoatftgz", response.iterator().next().clusterResourceId());
        Assertions
            .assertEquals(
                DefaultPrincipalsModificationKind.UNION,
                response.iterator().next().defaultPrincipalsModificationKind());
        Assertions
            .assertEquals("ytfmpc", response.iterator().next().tableLevelSharingProperties().tablesToInclude().get(0));
        Assertions
            .assertEquals(
                "oxuztrksx", response.iterator().next().tableLevelSharingProperties().tablesToExclude().get(0));
        Assertions
            .assertEquals(
                "zvoamktc", response.iterator().next().tableLevelSharingProperties().externalTablesToInclude().get(0));
        Assertions
            .assertEquals(
                "zkatb", response.iterator().next().tableLevelSharingProperties().externalTablesToExclude().get(0));
        Assertions
            .assertEquals(
                "znnbsoqeqalarvl",
                response.iterator().next().tableLevelSharingProperties().materializedViewsToInclude().get(0));
        Assertions
            .assertEquals(
                "qmjxlyyzglgouwtl",
                response.iterator().next().tableLevelSharingProperties().materializedViewsToExclude().get(0));
        Assertions
            .assertEquals(
                "ytunlbfjkwr", response.iterator().next().tableLevelSharingProperties().functionsToInclude().get(0));
        Assertions
            .assertEquals("kqbh", response.iterator().next().tableLevelSharingProperties().functionsToExclude().get(0));
        Assertions.assertEquals("nxaulk", response.iterator().next().databaseNameOverride());
        Assertions.assertEquals("kdk", response.iterator().next().databaseNamePrefix());
    }
}
