// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.kusto.KustoManager;
import com.azure.resourcemanager.kusto.models.AttachedDatabaseConfiguration;
import com.azure.resourcemanager.kusto.models.DefaultPrincipalsModificationKind;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AttachedDatabaseConfigurationsListByClusterMockTests {
    @Test
    public void testListByCluster() throws Exception {
        String responseStr
            = "{\"value\":[{\"location\":\"gx\",\"properties\":{\"provisioningState\":\"Running\",\"databaseName\":\"serxht\",\"clusterResourceId\":\"soxhlwntsjgqr\",\"attachedDatabaseNames\":[\"p\"],\"defaultPrincipalsModificationKind\":\"Union\",\"tableLevelSharingProperties\":{\"tablesToInclude\":[\"bnchrsziz\"],\"tablesToExclude\":[\"elyetndnbf\",\"yggagflnlgmt\",\"wahzjmucftbyr\"],\"externalTablesToInclude\":[\"ohkpigqfu\",\"u\",\"kzmkwklsnoxaxmqe\"],\"externalTablesToExclude\":[\"h\",\"jnhgwydyyn\"],\"materializedViewsToInclude\":[\"khgb\"],\"materializedViewsToExclude\":[\"anarfdlpukhpyrne\"],\"functionsToInclude\":[\"cpeogkhnmgbrou\",\"ddbhf\",\"pfpazjzoywjxhpdu\"],\"functionsToExclude\":[\"tacnpqwtehtuev\",\"hrljy\"]},\"databaseNameOverride\":\"gwxhnsduugwbsreu\",\"databaseNamePrefix\":\"q\"},\"id\":\"fuarenlvhht\",\"name\":\"lnvnafvvkyfedev\",\"type\":\"bo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        KustoManager manager = KustoManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<AttachedDatabaseConfiguration> response
            = manager.attachedDatabaseConfigurations().listByCluster("jqi", "czvvit", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gx", response.iterator().next().location());
        Assertions.assertEquals("serxht", response.iterator().next().databaseName());
        Assertions.assertEquals("soxhlwntsjgqr", response.iterator().next().clusterResourceId());
        Assertions.assertEquals(DefaultPrincipalsModificationKind.UNION,
            response.iterator().next().defaultPrincipalsModificationKind());
        Assertions.assertEquals("bnchrsziz",
            response.iterator().next().tableLevelSharingProperties().tablesToInclude().get(0));
        Assertions.assertEquals("elyetndnbf",
            response.iterator().next().tableLevelSharingProperties().tablesToExclude().get(0));
        Assertions.assertEquals("ohkpigqfu",
            response.iterator().next().tableLevelSharingProperties().externalTablesToInclude().get(0));
        Assertions.assertEquals("h",
            response.iterator().next().tableLevelSharingProperties().externalTablesToExclude().get(0));
        Assertions.assertEquals("khgb",
            response.iterator().next().tableLevelSharingProperties().materializedViewsToInclude().get(0));
        Assertions.assertEquals("anarfdlpukhpyrne",
            response.iterator().next().tableLevelSharingProperties().materializedViewsToExclude().get(0));
        Assertions.assertEquals("cpeogkhnmgbrou",
            response.iterator().next().tableLevelSharingProperties().functionsToInclude().get(0));
        Assertions.assertEquals("tacnpqwtehtuev",
            response.iterator().next().tableLevelSharingProperties().functionsToExclude().get(0));
        Assertions.assertEquals("gwxhnsduugwbsreu", response.iterator().next().databaseNameOverride());
        Assertions.assertEquals("q", response.iterator().next().databaseNamePrefix());
    }
}
