// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.kusto.fluent.models.ClusterInner;
import com.azure.resourcemanager.kusto.models.AcceptedAudiences;
import com.azure.resourcemanager.kusto.models.AzureSku;
import com.azure.resourcemanager.kusto.models.AzureSkuName;
import com.azure.resourcemanager.kusto.models.AzureSkuTier;
import com.azure.resourcemanager.kusto.models.ClusterNetworkAccessFlag;
import com.azure.resourcemanager.kusto.models.EngineType;
import com.azure.resourcemanager.kusto.models.Identity;
import com.azure.resourcemanager.kusto.models.IdentityType;
import com.azure.resourcemanager.kusto.models.IdentityUserAssignedIdentities;
import com.azure.resourcemanager.kusto.models.KeyVaultProperties;
import com.azure.resourcemanager.kusto.models.OptimizedAutoscale;
import com.azure.resourcemanager.kusto.models.PublicIpType;
import com.azure.resourcemanager.kusto.models.PublicNetworkAccess;
import com.azure.resourcemanager.kusto.models.TrustedExternalTenant;
import com.azure.resourcemanager.kusto.models.VirtualNetworkConfiguration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class ClusterInnerTests {
    @Test
    public void testDeserialize() {
        ClusterInner model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"Standard_E16s_v5+3TB_PS\",\"capacity\":304908421,\"tier\":\"Standard\"},\"zones\":[\"jxpybczmeh\",\"tzopbsphrupidgsy\",\"bejhphoycmsxa\",\"bhdxbm\"],\"identity\":{\"principalId\":\"oqjzehtbmufpowno\",\"tenantId\":\"hwlrx\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{\"rbt\":{\"principalId\":\"qijgkd\",\"clientId\":\"pazlobcufpdz\"},\"zlhjxrifkwmrvkt\":{\"principalId\":\"qjnqglhqgnufoooj\",\"clientId\":\"ifsqesaagdfmg\"}}},\"properties\":{\"state\":\"Starting\",\"provisioningState\":\"Creating\",\"uri\":\"ipa\",\"dataIngestionUri\":\"ajpsquc\",\"stateReason\":\"o\",\"trustedExternalTenants\":[{\"value\":\"fogknygjofjdde\"}],\"optimizedAutoscale\":{\"version\":492523913,\"isEnabled\":true,\"minimum\":1080662266,\"maximum\":1305479900},\"enableDiskEncryption\":true,\"enableStreamingIngest\":true,\"virtualNetworkConfiguration\":{\"subnetId\":\"reitjzyflusar\",\"enginePublicIpId\":\"mofcq\",\"dataManagementPublicIpId\":\"smy\"},\"keyVaultProperties\":{\"keyName\":\"dtmlxhekuksjt\",\"keyVersion\":\"kc\",\"keyVaultUri\":\"parcry\",\"userIdentity\":\"nzwuxzd\"},\"enablePurge\":false,\"languageExtensions\":{\"value\":[]},\"enableDoubleEncryption\":false,\"publicNetworkAccess\":\"Disabled\",\"allowedIpRangeList\":[\"mrqobmtukknr\",\"rtihfxtijbpz\"],\"engineType\":\"V2\",\"acceptedAudiences\":[{\"value\":\"ymglzufcyz\"},{\"value\":\"hdbihan\"},{\"value\":\"hfcbjysa\"},{\"value\":\"th\"}],\"enableAutoStop\":false,\"restrictOutboundNetworkAccess\":\"Disabled\",\"allowedFqdnList\":[\"pikxwczbyscnpqxu\",\"ivyqniwbybrkxvd\",\"mjgr\"],\"publicIPType\":\"IPv4\",\"virtualClusterGraduationProperties\":\"ukxgaud\",\"privateEndpointConnections\":[{\"id\":\"s\",\"name\":\"cnyejhkryhtnapcz\",\"type\":\"lokjyemkk\"},{\"id\":\"pjoxzjnch\",\"name\":\"ejspodmail\",\"type\":\"ydehoj\"},{\"id\":\"huxinpmqnj\",\"name\":\"qwixjspro\",\"type\":\"vcputegj\"},{\"id\":\"fdatsc\",\"name\":\"dvpjhulsuuvmk\",\"type\":\"ozkrwfndiodjpslw\"}]},\"etag\":\"dpvwryoqpsoaccta\",\"location\":\"akl\",\"tags\":{\"paojakhmsbzjh\":\"hbcryffdfdosyge\"},\"id\":\"rzevdphlxaol\",\"name\":\"hqtrgqjbpf\",\"type\":\"fsinzgvfcjrwzoxx\"}")
                .toObject(ClusterInner.class);
        Assertions.assertEquals("akl", model.location());
        Assertions.assertEquals("hbcryffdfdosyge", model.tags().get("paojakhmsbzjh"));
        Assertions.assertEquals(AzureSkuName.STANDARD_E16S_V5_3TB_PS, model.sku().name());
        Assertions.assertEquals(304908421, model.sku().capacity());
        Assertions.assertEquals(AzureSkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("jxpybczmeh", model.zones().get(0));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("fogknygjofjdde", model.trustedExternalTenants().get(0).value());
        Assertions.assertEquals(492523913, model.optimizedAutoscale().version());
        Assertions.assertEquals(true, model.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(1080662266, model.optimizedAutoscale().minimum());
        Assertions.assertEquals(1305479900, model.optimizedAutoscale().maximum());
        Assertions.assertEquals(true, model.enableDiskEncryption());
        Assertions.assertEquals(true, model.enableStreamingIngest());
        Assertions.assertEquals("reitjzyflusar", model.virtualNetworkConfiguration().subnetId());
        Assertions.assertEquals("mofcq", model.virtualNetworkConfiguration().enginePublicIpId());
        Assertions.assertEquals("smy", model.virtualNetworkConfiguration().dataManagementPublicIpId());
        Assertions.assertEquals("dtmlxhekuksjt", model.keyVaultProperties().keyName());
        Assertions.assertEquals("kc", model.keyVaultProperties().keyVersion());
        Assertions.assertEquals("parcry", model.keyVaultProperties().keyVaultUri());
        Assertions.assertEquals("nzwuxzd", model.keyVaultProperties().userIdentity());
        Assertions.assertEquals(false, model.enablePurge());
        Assertions.assertEquals(false, model.enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("mrqobmtukknr", model.allowedIpRangeList().get(0));
        Assertions.assertEquals(EngineType.V2, model.engineType());
        Assertions.assertEquals("ymglzufcyz", model.acceptedAudiences().get(0).value());
        Assertions.assertEquals(false, model.enableAutoStop());
        Assertions.assertEquals(ClusterNetworkAccessFlag.DISABLED, model.restrictOutboundNetworkAccess());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.allowedFqdnList().get(0));
        Assertions.assertEquals(PublicIpType.IPV4, model.publicIpType());
        Assertions.assertEquals("ukxgaud", model.virtualClusterGraduationProperties());
    }

    @Test
    public void testSerialize() {
        ClusterInner model =
            new ClusterInner()
                .withLocation("akl")
                .withTags(mapOf("paojakhmsbzjh", "hbcryffdfdosyge"))
                .withSku(
                    new AzureSku()
                        .withName(AzureSkuName.STANDARD_E16S_V5_3TB_PS)
                        .withCapacity(304908421)
                        .withTier(AzureSkuTier.STANDARD))
                .withZones(Arrays.asList("jxpybczmeh", "tzopbsphrupidgsy", "bejhphoycmsxa", "bhdxbm"))
                .withIdentity(
                    new Identity()
                        .withType(IdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "rbt",
                                new IdentityUserAssignedIdentities(),
                                "zlhjxrifkwmrvkt",
                                new IdentityUserAssignedIdentities())))
                .withTrustedExternalTenants(Arrays.asList(new TrustedExternalTenant().withValue("fogknygjofjdde")))
                .withOptimizedAutoscale(
                    new OptimizedAutoscale()
                        .withVersion(492523913)
                        .withIsEnabled(true)
                        .withMinimum(1080662266)
                        .withMaximum(1305479900))
                .withEnableDiskEncryption(true)
                .withEnableStreamingIngest(true)
                .withVirtualNetworkConfiguration(
                    new VirtualNetworkConfiguration()
                        .withSubnetId("reitjzyflusar")
                        .withEnginePublicIpId("mofcq")
                        .withDataManagementPublicIpId("smy"))
                .withKeyVaultProperties(
                    new KeyVaultProperties()
                        .withKeyName("dtmlxhekuksjt")
                        .withKeyVersion("kc")
                        .withKeyVaultUri("parcry")
                        .withUserIdentity("nzwuxzd"))
                .withEnablePurge(false)
                .withEnableDoubleEncryption(false)
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withAllowedIpRangeList(Arrays.asList("mrqobmtukknr", "rtihfxtijbpz"))
                .withEngineType(EngineType.V2)
                .withAcceptedAudiences(
                    Arrays
                        .asList(
                            new AcceptedAudiences().withValue("ymglzufcyz"),
                            new AcceptedAudiences().withValue("hdbihan"),
                            new AcceptedAudiences().withValue("hfcbjysa"),
                            new AcceptedAudiences().withValue("th")))
                .withEnableAutoStop(false)
                .withRestrictOutboundNetworkAccess(ClusterNetworkAccessFlag.DISABLED)
                .withAllowedFqdnList(Arrays.asList("pikxwczbyscnpqxu", "ivyqniwbybrkxvd", "mjgr"))
                .withPublicIpType(PublicIpType.IPV4)
                .withVirtualClusterGraduationProperties("ukxgaud");
        model = BinaryData.fromObject(model).toObject(ClusterInner.class);
        Assertions.assertEquals("akl", model.location());
        Assertions.assertEquals("hbcryffdfdosyge", model.tags().get("paojakhmsbzjh"));
        Assertions.assertEquals(AzureSkuName.STANDARD_E16S_V5_3TB_PS, model.sku().name());
        Assertions.assertEquals(304908421, model.sku().capacity());
        Assertions.assertEquals(AzureSkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals("jxpybczmeh", model.zones().get(0));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("fogknygjofjdde", model.trustedExternalTenants().get(0).value());
        Assertions.assertEquals(492523913, model.optimizedAutoscale().version());
        Assertions.assertEquals(true, model.optimizedAutoscale().isEnabled());
        Assertions.assertEquals(1080662266, model.optimizedAutoscale().minimum());
        Assertions.assertEquals(1305479900, model.optimizedAutoscale().maximum());
        Assertions.assertEquals(true, model.enableDiskEncryption());
        Assertions.assertEquals(true, model.enableStreamingIngest());
        Assertions.assertEquals("reitjzyflusar", model.virtualNetworkConfiguration().subnetId());
        Assertions.assertEquals("mofcq", model.virtualNetworkConfiguration().enginePublicIpId());
        Assertions.assertEquals("smy", model.virtualNetworkConfiguration().dataManagementPublicIpId());
        Assertions.assertEquals("dtmlxhekuksjt", model.keyVaultProperties().keyName());
        Assertions.assertEquals("kc", model.keyVaultProperties().keyVersion());
        Assertions.assertEquals("parcry", model.keyVaultProperties().keyVaultUri());
        Assertions.assertEquals("nzwuxzd", model.keyVaultProperties().userIdentity());
        Assertions.assertEquals(false, model.enablePurge());
        Assertions.assertEquals(false, model.enableDoubleEncryption());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("mrqobmtukknr", model.allowedIpRangeList().get(0));
        Assertions.assertEquals(EngineType.V2, model.engineType());
        Assertions.assertEquals("ymglzufcyz", model.acceptedAudiences().get(0).value());
        Assertions.assertEquals(false, model.enableAutoStop());
        Assertions.assertEquals(ClusterNetworkAccessFlag.DISABLED, model.restrictOutboundNetworkAccess());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.allowedFqdnList().get(0));
        Assertions.assertEquals(PublicIpType.IPV4, model.publicIpType());
        Assertions.assertEquals("ukxgaud", model.virtualClusterGraduationProperties());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
