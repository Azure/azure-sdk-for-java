// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.CalloutType;
import com.azure.resourcemanager.kusto.models.OutboundAccess;
import java.io.IOException;

/**
 * Configuration for external callout policies, including URI patterns, access types, and service types.
 */
@Fluent
public final class CalloutPolicyInner implements JsonSerializable<CalloutPolicyInner> {
    /*
     * Regular expression or FQDN pattern for the callout URI.
     */
    private String calloutUriRegex;

    /*
     * Type of the callout service, specifying the kind of external resource or service being accessed.
     */
    private CalloutType calloutType;

    /*
     * Indicates whether outbound access is permitted for the specified URI pattern.
     */
    private OutboundAccess outboundAccess;

    /*
     * Unique identifier for the callout configuration.
     */
    private String calloutId;

    /**
     * Creates an instance of CalloutPolicyInner class.
     */
    public CalloutPolicyInner() {
    }

    /**
     * Get the calloutUriRegex property: Regular expression or FQDN pattern for the callout URI.
     * 
     * @return the calloutUriRegex value.
     */
    public String calloutUriRegex() {
        return this.calloutUriRegex;
    }

    /**
     * Set the calloutUriRegex property: Regular expression or FQDN pattern for the callout URI.
     * 
     * @param calloutUriRegex the calloutUriRegex value to set.
     * @return the CalloutPolicyInner object itself.
     */
    public CalloutPolicyInner withCalloutUriRegex(String calloutUriRegex) {
        this.calloutUriRegex = calloutUriRegex;
        return this;
    }

    /**
     * Get the calloutType property: Type of the callout service, specifying the kind of external resource or service
     * being accessed.
     * 
     * @return the calloutType value.
     */
    public CalloutType calloutType() {
        return this.calloutType;
    }

    /**
     * Set the calloutType property: Type of the callout service, specifying the kind of external resource or service
     * being accessed.
     * 
     * @param calloutType the calloutType value to set.
     * @return the CalloutPolicyInner object itself.
     */
    public CalloutPolicyInner withCalloutType(CalloutType calloutType) {
        this.calloutType = calloutType;
        return this;
    }

    /**
     * Get the outboundAccess property: Indicates whether outbound access is permitted for the specified URI pattern.
     * 
     * @return the outboundAccess value.
     */
    public OutboundAccess outboundAccess() {
        return this.outboundAccess;
    }

    /**
     * Set the outboundAccess property: Indicates whether outbound access is permitted for the specified URI pattern.
     * 
     * @param outboundAccess the outboundAccess value to set.
     * @return the CalloutPolicyInner object itself.
     */
    public CalloutPolicyInner withOutboundAccess(OutboundAccess outboundAccess) {
        this.outboundAccess = outboundAccess;
        return this;
    }

    /**
     * Get the calloutId property: Unique identifier for the callout configuration.
     * 
     * @return the calloutId value.
     */
    public String calloutId() {
        return this.calloutId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("calloutUriRegex", this.calloutUriRegex);
        jsonWriter.writeStringField("calloutType", this.calloutType == null ? null : this.calloutType.toString());
        jsonWriter.writeStringField("outboundAccess",
            this.outboundAccess == null ? null : this.outboundAccess.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalloutPolicyInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalloutPolicyInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CalloutPolicyInner.
     */
    public static CalloutPolicyInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CalloutPolicyInner deserializedCalloutPolicyInner = new CalloutPolicyInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("calloutUriRegex".equals(fieldName)) {
                    deserializedCalloutPolicyInner.calloutUriRegex = reader.getString();
                } else if ("calloutType".equals(fieldName)) {
                    deserializedCalloutPolicyInner.calloutType = CalloutType.fromString(reader.getString());
                } else if ("outboundAccess".equals(fieldName)) {
                    deserializedCalloutPolicyInner.outboundAccess = OutboundAccess.fromString(reader.getString());
                } else if ("calloutId".equals(fieldName)) {
                    deserializedCalloutPolicyInner.calloutId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCalloutPolicyInner;
        });
    }
}
