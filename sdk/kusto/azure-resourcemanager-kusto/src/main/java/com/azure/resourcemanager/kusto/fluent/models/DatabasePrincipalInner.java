// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalRole;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalType;
import java.io.IOException;

/**
 * A class representing database principal entity.
 */
@Fluent
public final class DatabasePrincipalInner implements JsonSerializable<DatabasePrincipalInner> {
    /*
     * Database principal role.
     */
    private DatabasePrincipalRole role;

    /*
     * Database principal name.
     */
    private String name;

    /*
     * Database principal type.
     */
    private DatabasePrincipalType type;

    /*
     * Database principal fully qualified name.
     */
    private String fqn;

    /*
     * Database principal email if exists.
     */
    private String email;

    /*
     * Application id - relevant only for application principal type.
     */
    private String appId;

    /*
     * The tenant name of the principal
     */
    private String tenantName;

    /**
     * Creates an instance of DatabasePrincipalInner class.
     */
    public DatabasePrincipalInner() {
    }

    /**
     * Get the role property: Database principal role.
     * 
     * @return the role value.
     */
    public DatabasePrincipalRole role() {
        return this.role;
    }

    /**
     * Set the role property: Database principal role.
     * 
     * @param role the role value to set.
     * @return the DatabasePrincipalInner object itself.
     */
    public DatabasePrincipalInner withRole(DatabasePrincipalRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the name property: Database principal name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Database principal name.
     * 
     * @param name the name value to set.
     * @return the DatabasePrincipalInner object itself.
     */
    public DatabasePrincipalInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the type property: Database principal type.
     * 
     * @return the type value.
     */
    public DatabasePrincipalType type() {
        return this.type;
    }

    /**
     * Set the type property: Database principal type.
     * 
     * @param type the type value to set.
     * @return the DatabasePrincipalInner object itself.
     */
    public DatabasePrincipalInner withType(DatabasePrincipalType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the fqn property: Database principal fully qualified name.
     * 
     * @return the fqn value.
     */
    public String fqn() {
        return this.fqn;
    }

    /**
     * Set the fqn property: Database principal fully qualified name.
     * 
     * @param fqn the fqn value to set.
     * @return the DatabasePrincipalInner object itself.
     */
    public DatabasePrincipalInner withFqn(String fqn) {
        this.fqn = fqn;
        return this;
    }

    /**
     * Get the email property: Database principal email if exists.
     * 
     * @return the email value.
     */
    public String email() {
        return this.email;
    }

    /**
     * Set the email property: Database principal email if exists.
     * 
     * @param email the email value to set.
     * @return the DatabasePrincipalInner object itself.
     */
    public DatabasePrincipalInner withEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Get the appId property: Application id - relevant only for application principal type.
     * 
     * @return the appId value.
     */
    public String appId() {
        return this.appId;
    }

    /**
     * Set the appId property: Application id - relevant only for application principal type.
     * 
     * @param appId the appId value to set.
     * @return the DatabasePrincipalInner object itself.
     */
    public DatabasePrincipalInner withAppId(String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Get the tenantName property: The tenant name of the principal.
     * 
     * @return the tenantName value.
     */
    public String tenantName() {
        return this.tenantName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property role in model DatabasePrincipalInner"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DatabasePrincipalInner"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property type in model DatabasePrincipalInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabasePrincipalInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("fqn", this.fqn);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("appId", this.appId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabasePrincipalInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabasePrincipalInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabasePrincipalInner.
     */
    public static DatabasePrincipalInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabasePrincipalInner deserializedDatabasePrincipalInner = new DatabasePrincipalInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("role".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.role = DatabasePrincipalRole.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.type = DatabasePrincipalType.fromString(reader.getString());
                } else if ("fqn".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.fqn = reader.getString();
                } else if ("email".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.email = reader.getString();
                } else if ("appId".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.appId = reader.getString();
                } else if ("tenantName".equals(fieldName)) {
                    deserializedDatabasePrincipalInner.tenantName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabasePrincipalInner;
        });
    }
}
