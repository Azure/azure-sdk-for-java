// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.DatabaseShareOrigin;
import com.azure.resourcemanager.kusto.models.TableLevelSharingProperties;
import java.io.IOException;

/**
 * A class representing the properties of a follower database object.
 */
@Fluent
public final class FollowerDatabaseProperties implements JsonSerializable<FollowerDatabaseProperties> {
    /*
     * Resource id of the cluster that follows a database owned by this cluster.
     */
    private String clusterResourceId;

    /*
     * Resource name of the attached database configuration in the follower cluster.
     */
    private String attachedDatabaseConfigurationName;

    /*
     * The database name owned by this cluster that was followed. * in case following all databases.
     */
    private String databaseName;

    /*
     * Table level sharing specifications
     */
    private TableLevelSharingProperties tableLevelSharingProperties;

    /*
     * The origin of the following setup.
     */
    private DatabaseShareOrigin databaseShareOrigin;

    /**
     * Creates an instance of FollowerDatabaseProperties class.
     */
    public FollowerDatabaseProperties() {
    }

    /**
     * Get the clusterResourceId property: Resource id of the cluster that follows a database owned by this cluster.
     * 
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Set the clusterResourceId property: Resource id of the cluster that follows a database owned by this cluster.
     * 
     * @param clusterResourceId the clusterResourceId value to set.
     * @return the FollowerDatabaseProperties object itself.
     */
    public FollowerDatabaseProperties withClusterResourceId(String clusterResourceId) {
        this.clusterResourceId = clusterResourceId;
        return this;
    }

    /**
     * Get the attachedDatabaseConfigurationName property: Resource name of the attached database configuration in the
     * follower cluster.
     * 
     * @return the attachedDatabaseConfigurationName value.
     */
    public String attachedDatabaseConfigurationName() {
        return this.attachedDatabaseConfigurationName;
    }

    /**
     * Set the attachedDatabaseConfigurationName property: Resource name of the attached database configuration in the
     * follower cluster.
     * 
     * @param attachedDatabaseConfigurationName the attachedDatabaseConfigurationName value to set.
     * @return the FollowerDatabaseProperties object itself.
     */
    public FollowerDatabaseProperties withAttachedDatabaseConfigurationName(String attachedDatabaseConfigurationName) {
        this.attachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
        return this;
    }

    /**
     * Get the databaseName property: The database name owned by this cluster that was followed. * in case following all
     * databases.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the tableLevelSharingProperties property: Table level sharing specifications.
     * 
     * @return the tableLevelSharingProperties value.
     */
    public TableLevelSharingProperties tableLevelSharingProperties() {
        return this.tableLevelSharingProperties;
    }

    /**
     * Get the databaseShareOrigin property: The origin of the following setup.
     * 
     * @return the databaseShareOrigin value.
     */
    public DatabaseShareOrigin databaseShareOrigin() {
        return this.databaseShareOrigin;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clusterResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clusterResourceId in model FollowerDatabaseProperties"));
        }
        if (attachedDatabaseConfigurationName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property attachedDatabaseConfigurationName in model FollowerDatabaseProperties"));
        }
        if (tableLevelSharingProperties() != null) {
            tableLevelSharingProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FollowerDatabaseProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clusterResourceId", this.clusterResourceId);
        jsonWriter.writeStringField("attachedDatabaseConfigurationName", this.attachedDatabaseConfigurationName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FollowerDatabaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FollowerDatabaseProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FollowerDatabaseProperties.
     */
    public static FollowerDatabaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FollowerDatabaseProperties deserializedFollowerDatabaseProperties = new FollowerDatabaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clusterResourceId".equals(fieldName)) {
                    deserializedFollowerDatabaseProperties.clusterResourceId = reader.getString();
                } else if ("attachedDatabaseConfigurationName".equals(fieldName)) {
                    deserializedFollowerDatabaseProperties.attachedDatabaseConfigurationName = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedFollowerDatabaseProperties.databaseName = reader.getString();
                } else if ("tableLevelSharingProperties".equals(fieldName)) {
                    deserializedFollowerDatabaseProperties.tableLevelSharingProperties
                        = TableLevelSharingProperties.fromJson(reader);
                } else if ("databaseShareOrigin".equals(fieldName)) {
                    deserializedFollowerDatabaseProperties.databaseShareOrigin
                        = DatabaseShareOrigin.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFollowerDatabaseProperties;
        });
    }
}
