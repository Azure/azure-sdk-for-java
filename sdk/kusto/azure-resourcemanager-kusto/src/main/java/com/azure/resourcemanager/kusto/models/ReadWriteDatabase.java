// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.fluent.models.DatabaseInner;
import com.azure.resourcemanager.kusto.fluent.models.ReadWriteDatabaseProperties;
import java.io.IOException;
import java.time.Duration;

/**
 * Class representing a read write database.
 */
@Fluent
public final class ReadWriteDatabase extends DatabaseInner {
    /*
     * Kind of the database
     */
    private Kind kind = Kind.READ_WRITE;

    /*
     * The database properties.
     */
    private ReadWriteDatabaseProperties innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ReadWriteDatabase class.
     */
    public ReadWriteDatabase() {
    }

    /**
     * Get the kind property: Kind of the database.
     * 
     * @return the kind value.
     */
    @Override
    public Kind kind() {
        return this.kind;
    }

    /**
     * Get the innerProperties property: The database properties.
     * 
     * @return the innerProperties value.
     */
    private ReadWriteDatabaseProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ReadWriteDatabase withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the softDeletePeriod property: The time the data should be kept before it stops being accessible to queries
     * in TimeSpan.
     * 
     * @return the softDeletePeriod value.
     */
    public Duration softDeletePeriod() {
        return this.innerProperties() == null ? null : this.innerProperties().softDeletePeriod();
    }

    /**
     * Set the softDeletePeriod property: The time the data should be kept before it stops being accessible to queries
     * in TimeSpan.
     * 
     * @param softDeletePeriod the softDeletePeriod value to set.
     * @return the ReadWriteDatabase object itself.
     */
    public ReadWriteDatabase withSoftDeletePeriod(Duration softDeletePeriod) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ReadWriteDatabaseProperties();
        }
        this.innerProperties().withSoftDeletePeriod(softDeletePeriod);
        return this;
    }

    /**
     * Get the hotCachePeriod property: The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     * @return the hotCachePeriod value.
     */
    public Duration hotCachePeriod() {
        return this.innerProperties() == null ? null : this.innerProperties().hotCachePeriod();
    }

    /**
     * Set the hotCachePeriod property: The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     * @param hotCachePeriod the hotCachePeriod value to set.
     * @return the ReadWriteDatabase object itself.
     */
    public ReadWriteDatabase withHotCachePeriod(Duration hotCachePeriod) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ReadWriteDatabaseProperties();
        }
        this.innerProperties().withHotCachePeriod(hotCachePeriod);
        return this;
    }

    /**
     * Get the statistics property: The statistics of the database.
     * 
     * @return the statistics value.
     */
    public DatabaseStatistics statistics() {
        return this.innerProperties() == null ? null : this.innerProperties().statistics();
    }

    /**
     * Get the isFollowed property: Indicates whether the database is followed.
     * 
     * @return the isFollowed value.
     */
    public Boolean isFollowed() {
        return this.innerProperties() == null ? null : this.innerProperties().isFollowed();
    }

    /**
     * Get the keyVaultProperties property: KeyVault properties for the database encryption.
     * 
     * @return the keyVaultProperties value.
     */
    public KeyVaultProperties keyVaultProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultProperties();
    }

    /**
     * Set the keyVaultProperties property: KeyVault properties for the database encryption.
     * 
     * @param keyVaultProperties the keyVaultProperties value to set.
     * @return the ReadWriteDatabase object itself.
     */
    public ReadWriteDatabase withKeyVaultProperties(KeyVaultProperties keyVaultProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ReadWriteDatabaseProperties();
        }
        this.innerProperties().withKeyVaultProperties(keyVaultProperties);
        return this;
    }

    /**
     * Get the suspensionDetails property: The database suspension details. If the database is suspended, this object
     * contains information related to the database's suspension state.
     * 
     * @return the suspensionDetails value.
     */
    public SuspensionDetails suspensionDetails() {
        return this.innerProperties() == null ? null : this.innerProperties().suspensionDetails();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReadWriteDatabase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReadWriteDatabase if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReadWriteDatabase.
     */
    public static ReadWriteDatabase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReadWriteDatabase deserializedReadWriteDatabase = new ReadWriteDatabase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedReadWriteDatabase.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedReadWriteDatabase.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedReadWriteDatabase.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedReadWriteDatabase.withLocation(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedReadWriteDatabase.kind = Kind.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedReadWriteDatabase.innerProperties = ReadWriteDatabaseProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReadWriteDatabase;
        });
    }
}
