// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.ProvisioningState;
import java.io.IOException;

/**
 * A class representing the properties of a managed private endpoint object.
 */
@Fluent
public final class ManagedPrivateEndpointProperties implements JsonSerializable<ManagedPrivateEndpointProperties> {
    /*
     * The ARM resource ID of the resource for which the managed private endpoint is created.
     */
    private String privateLinkResourceId;

    /*
     * The region of the resource to which the managed private endpoint is created.
     */
    private String privateLinkResourceRegion;

    /*
     * The groupId in which the managed private endpoint is created.
     */
    private String groupId;

    /*
     * The user request message.
     */
    private String requestMessage;

    /*
     * The provisioned state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ManagedPrivateEndpointProperties class.
     */
    public ManagedPrivateEndpointProperties() {
    }

    /**
     * Get the privateLinkResourceId property: The ARM resource ID of the resource for which the managed private
     * endpoint is created.
     * 
     * @return the privateLinkResourceId value.
     */
    public String privateLinkResourceId() {
        return this.privateLinkResourceId;
    }

    /**
     * Set the privateLinkResourceId property: The ARM resource ID of the resource for which the managed private
     * endpoint is created.
     * 
     * @param privateLinkResourceId the privateLinkResourceId value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    public ManagedPrivateEndpointProperties withPrivateLinkResourceId(String privateLinkResourceId) {
        this.privateLinkResourceId = privateLinkResourceId;
        return this;
    }

    /**
     * Get the privateLinkResourceRegion property: The region of the resource to which the managed private endpoint is
     * created.
     * 
     * @return the privateLinkResourceRegion value.
     */
    public String privateLinkResourceRegion() {
        return this.privateLinkResourceRegion;
    }

    /**
     * Set the privateLinkResourceRegion property: The region of the resource to which the managed private endpoint is
     * created.
     * 
     * @param privateLinkResourceRegion the privateLinkResourceRegion value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    public ManagedPrivateEndpointProperties withPrivateLinkResourceRegion(String privateLinkResourceRegion) {
        this.privateLinkResourceRegion = privateLinkResourceRegion;
        return this;
    }

    /**
     * Get the groupId property: The groupId in which the managed private endpoint is created.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: The groupId in which the managed private endpoint is created.
     * 
     * @param groupId the groupId value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    public ManagedPrivateEndpointProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the requestMessage property: The user request message.
     * 
     * @return the requestMessage value.
     */
    public String requestMessage() {
        return this.requestMessage;
    }

    /**
     * Set the requestMessage property: The user request message.
     * 
     * @param requestMessage the requestMessage value to set.
     * @return the ManagedPrivateEndpointProperties object itself.
     */
    public ManagedPrivateEndpointProperties withRequestMessage(String requestMessage) {
        this.requestMessage = requestMessage;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateLinkResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateLinkResourceId in model ManagedPrivateEndpointProperties"));
        }
        if (groupId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupId in model ManagedPrivateEndpointProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ManagedPrivateEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("privateLinkResourceId", this.privateLinkResourceId);
        jsonWriter.writeStringField("groupId", this.groupId);
        jsonWriter.writeStringField("privateLinkResourceRegion", this.privateLinkResourceRegion);
        jsonWriter.writeStringField("requestMessage", this.requestMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ManagedPrivateEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ManagedPrivateEndpointProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ManagedPrivateEndpointProperties.
     */
    public static ManagedPrivateEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ManagedPrivateEndpointProperties deserializedManagedPrivateEndpointProperties
                = new ManagedPrivateEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("privateLinkResourceId".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.privateLinkResourceId = reader.getString();
                } else if ("groupId".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.groupId = reader.getString();
                } else if ("privateLinkResourceRegion".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.privateLinkResourceRegion = reader.getString();
                } else if ("requestMessage".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.requestMessage = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedManagedPrivateEndpointProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedManagedPrivateEndpointProperties;
        });
    }
}
