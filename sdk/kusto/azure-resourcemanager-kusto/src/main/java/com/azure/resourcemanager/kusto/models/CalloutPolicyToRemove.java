// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Configuration for an external callout policy to remove.
 */
@Fluent
public final class CalloutPolicyToRemove implements JsonSerializable<CalloutPolicyToRemove> {
    /*
     * Unique identifier for the callout configuration.
     */
    private String calloutId;

    /**
     * Creates an instance of CalloutPolicyToRemove class.
     */
    public CalloutPolicyToRemove() {
    }

    /**
     * Get the calloutId property: Unique identifier for the callout configuration.
     * 
     * @return the calloutId value.
     */
    public String calloutId() {
        return this.calloutId;
    }

    /**
     * Set the calloutId property: Unique identifier for the callout configuration.
     * 
     * @param calloutId the calloutId value to set.
     * @return the CalloutPolicyToRemove object itself.
     */
    public CalloutPolicyToRemove withCalloutId(String calloutId) {
        this.calloutId = calloutId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("calloutId", this.calloutId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalloutPolicyToRemove from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalloutPolicyToRemove if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CalloutPolicyToRemove.
     */
    public static CalloutPolicyToRemove fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CalloutPolicyToRemove deserializedCalloutPolicyToRemove = new CalloutPolicyToRemove();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("calloutId".equals(fieldName)) {
                    deserializedCalloutPolicyToRemove.calloutId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCalloutPolicyToRemove;
        });
    }
}
