// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The result returned from a data connection validation request.
 */
@Fluent
public final class DataConnectionValidationResult implements JsonSerializable<DataConnectionValidationResult> {
    /*
     * A message which indicates a problem in data connection validation.
     */
    private String errorMessage;

    /**
     * Creates an instance of DataConnectionValidationResult class.
     */
    public DataConnectionValidationResult() {
    }

    /**
     * Get the errorMessage property: A message which indicates a problem in data connection validation.
     * 
     * @return the errorMessage value.
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * Set the errorMessage property: A message which indicates a problem in data connection validation.
     * 
     * @param errorMessage the errorMessage value to set.
     * @return the DataConnectionValidationResult object itself.
     */
    public DataConnectionValidationResult withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("errorMessage", this.errorMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataConnectionValidationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataConnectionValidationResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataConnectionValidationResult.
     */
    public static DataConnectionValidationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataConnectionValidationResult deserializedDataConnectionValidationResult
                = new DataConnectionValidationResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorMessage".equals(fieldName)) {
                    deserializedDataConnectionValidationResult.errorMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataConnectionValidationResult;
        });
    }
}
