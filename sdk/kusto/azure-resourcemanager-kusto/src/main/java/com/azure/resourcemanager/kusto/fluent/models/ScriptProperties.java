// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.PrincipalPermissionsAction;
import com.azure.resourcemanager.kusto.models.ProvisioningState;
import com.azure.resourcemanager.kusto.models.ScriptLevel;
import java.io.IOException;

/**
 * A class representing database script property.
 */
@Fluent
public final class ScriptProperties implements JsonSerializable<ScriptProperties> {
    /*
     * The url to the KQL script blob file. Must not be used together with scriptContent property
     */
    private String scriptUrl;

    /*
     * The SaS token that provide read access to the file which contain the script. Must be provided when using
     * scriptUrl property.
     */
    private String scriptUrlSasToken;

    /*
     * The script content. This property should be used when the script is provide inline and not through file in a SA.
     * Must not be used together with scriptUrl and scriptUrlSasToken properties.
     */
    private String scriptContent;

    /*
     * A unique string. If changed the script will be applied again.
     */
    private String forceUpdateTag;

    /*
     * Flag that indicates whether to continue if one of the command fails.
     */
    private Boolean continueOnErrors;

    /*
     * The provisioned state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * Differentiates between the type of script commands included - Database or Cluster. The default is Database.
     */
    private ScriptLevel scriptLevel;

    /*
     * Indicates if the permissions for the script caller are kept following completion of the script.
     */
    private PrincipalPermissionsAction principalPermissionsAction;

    /**
     * Creates an instance of ScriptProperties class.
     */
    public ScriptProperties() {
    }

    /**
     * Get the scriptUrl property: The url to the KQL script blob file. Must not be used together with scriptContent
     * property.
     * 
     * @return the scriptUrl value.
     */
    public String scriptUrl() {
        return this.scriptUrl;
    }

    /**
     * Set the scriptUrl property: The url to the KQL script blob file. Must not be used together with scriptContent
     * property.
     * 
     * @param scriptUrl the scriptUrl value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withScriptUrl(String scriptUrl) {
        this.scriptUrl = scriptUrl;
        return this;
    }

    /**
     * Get the scriptUrlSasToken property: The SaS token that provide read access to the file which contain the script.
     * Must be provided when using scriptUrl property.
     * 
     * @return the scriptUrlSasToken value.
     */
    public String scriptUrlSasToken() {
        return this.scriptUrlSasToken;
    }

    /**
     * Set the scriptUrlSasToken property: The SaS token that provide read access to the file which contain the script.
     * Must be provided when using scriptUrl property.
     * 
     * @param scriptUrlSasToken the scriptUrlSasToken value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withScriptUrlSasToken(String scriptUrlSasToken) {
        this.scriptUrlSasToken = scriptUrlSasToken;
        return this;
    }

    /**
     * Get the scriptContent property: The script content. This property should be used when the script is provide
     * inline and not through file in a SA. Must not be used together with scriptUrl and scriptUrlSasToken properties.
     * 
     * @return the scriptContent value.
     */
    public String scriptContent() {
        return this.scriptContent;
    }

    /**
     * Set the scriptContent property: The script content. This property should be used when the script is provide
     * inline and not through file in a SA. Must not be used together with scriptUrl and scriptUrlSasToken properties.
     * 
     * @param scriptContent the scriptContent value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withScriptContent(String scriptContent) {
        this.scriptContent = scriptContent;
        return this;
    }

    /**
     * Get the forceUpdateTag property: A unique string. If changed the script will be applied again.
     * 
     * @return the forceUpdateTag value.
     */
    public String forceUpdateTag() {
        return this.forceUpdateTag;
    }

    /**
     * Set the forceUpdateTag property: A unique string. If changed the script will be applied again.
     * 
     * @param forceUpdateTag the forceUpdateTag value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withForceUpdateTag(String forceUpdateTag) {
        this.forceUpdateTag = forceUpdateTag;
        return this;
    }

    /**
     * Get the continueOnErrors property: Flag that indicates whether to continue if one of the command fails.
     * 
     * @return the continueOnErrors value.
     */
    public Boolean continueOnErrors() {
        return this.continueOnErrors;
    }

    /**
     * Set the continueOnErrors property: Flag that indicates whether to continue if one of the command fails.
     * 
     * @param continueOnErrors the continueOnErrors value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withContinueOnErrors(Boolean continueOnErrors) {
        this.continueOnErrors = continueOnErrors;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the scriptLevel property: Differentiates between the type of script commands included - Database or Cluster.
     * The default is Database.
     * 
     * @return the scriptLevel value.
     */
    public ScriptLevel scriptLevel() {
        return this.scriptLevel;
    }

    /**
     * Set the scriptLevel property: Differentiates between the type of script commands included - Database or Cluster.
     * The default is Database.
     * 
     * @param scriptLevel the scriptLevel value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withScriptLevel(ScriptLevel scriptLevel) {
        this.scriptLevel = scriptLevel;
        return this;
    }

    /**
     * Get the principalPermissionsAction property: Indicates if the permissions for the script caller are kept
     * following completion of the script.
     * 
     * @return the principalPermissionsAction value.
     */
    public PrincipalPermissionsAction principalPermissionsAction() {
        return this.principalPermissionsAction;
    }

    /**
     * Set the principalPermissionsAction property: Indicates if the permissions for the script caller are kept
     * following completion of the script.
     * 
     * @param principalPermissionsAction the principalPermissionsAction value to set.
     * @return the ScriptProperties object itself.
     */
    public ScriptProperties withPrincipalPermissionsAction(PrincipalPermissionsAction principalPermissionsAction) {
        this.principalPermissionsAction = principalPermissionsAction;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scriptUrl", this.scriptUrl);
        jsonWriter.writeStringField("scriptUrlSasToken", this.scriptUrlSasToken);
        jsonWriter.writeStringField("scriptContent", this.scriptContent);
        jsonWriter.writeStringField("forceUpdateTag", this.forceUpdateTag);
        jsonWriter.writeBooleanField("continueOnErrors", this.continueOnErrors);
        jsonWriter.writeStringField("scriptLevel", this.scriptLevel == null ? null : this.scriptLevel.toString());
        jsonWriter.writeStringField("principalPermissionsAction",
            this.principalPermissionsAction == null ? null : this.principalPermissionsAction.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptProperties.
     */
    public static ScriptProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptProperties deserializedScriptProperties = new ScriptProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scriptUrl".equals(fieldName)) {
                    deserializedScriptProperties.scriptUrl = reader.getString();
                } else if ("scriptUrlSasToken".equals(fieldName)) {
                    deserializedScriptProperties.scriptUrlSasToken = reader.getString();
                } else if ("scriptContent".equals(fieldName)) {
                    deserializedScriptProperties.scriptContent = reader.getString();
                } else if ("forceUpdateTag".equals(fieldName)) {
                    deserializedScriptProperties.forceUpdateTag = reader.getString();
                } else if ("continueOnErrors".equals(fieldName)) {
                    deserializedScriptProperties.continueOnErrors = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedScriptProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("scriptLevel".equals(fieldName)) {
                    deserializedScriptProperties.scriptLevel = ScriptLevel.fromString(reader.getString());
                } else if ("principalPermissionsAction".equals(fieldName)) {
                    deserializedScriptProperties.principalPermissionsAction
                        = PrincipalPermissionsAction.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptProperties;
        });
    }
}
