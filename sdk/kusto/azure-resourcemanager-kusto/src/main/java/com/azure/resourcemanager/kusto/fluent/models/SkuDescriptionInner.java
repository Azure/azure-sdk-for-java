// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.SkuLocationInfoItem;
import java.io.IOException;
import java.util.List;

/**
 * The Kusto SKU description of given resource type.
 */
@Immutable
public final class SkuDescriptionInner implements JsonSerializable<SkuDescriptionInner> {
    /*
     * The resource type
     */
    private String resourceType;

    /*
     * The name of the SKU
     */
    private String name;

    /*
     * The tier of the SKU
     */
    private String tier;

    /*
     * The set of locations that the SKU is available
     */
    private List<String> locations;

    /*
     * Locations and zones
     */
    private List<SkuLocationInfoItem> locationInfo;

    /*
     * The restrictions because of which SKU cannot be used
     */
    private List<Object> restrictions;

    /**
     * Creates an instance of SkuDescriptionInner class.
     */
    public SkuDescriptionInner() {
    }

    /**
     * Get the resourceType property: The resource type.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the name property: The name of the SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the tier property: The tier of the SKU.
     * 
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Get the locations property: The set of locations that the SKU is available.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Get the locationInfo property: Locations and zones.
     * 
     * @return the locationInfo value.
     */
    public List<SkuLocationInfoItem> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Get the restrictions property: The restrictions because of which SKU cannot be used.
     * 
     * @return the restrictions value.
     */
    public List<Object> restrictions() {
        return this.restrictions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (locationInfo() != null) {
            locationInfo().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuDescriptionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuDescriptionInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuDescriptionInner.
     */
    public static SkuDescriptionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuDescriptionInner deserializedSkuDescriptionInner = new SkuDescriptionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedSkuDescriptionInner.resourceType = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedSkuDescriptionInner.name = reader.getString();
                } else if ("tier".equals(fieldName)) {
                    deserializedSkuDescriptionInner.tier = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedSkuDescriptionInner.locations = locations;
                } else if ("locationInfo".equals(fieldName)) {
                    List<SkuLocationInfoItem> locationInfo
                        = reader.readArray(reader1 -> SkuLocationInfoItem.fromJson(reader1));
                    deserializedSkuDescriptionInner.locationInfo = locationInfo;
                } else if ("restrictions".equals(fieldName)) {
                    List<Object> restrictions = reader.readArray(reader1 -> reader1.readUntyped());
                    deserializedSkuDescriptionInner.restrictions = restrictions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuDescriptionInner;
        });
    }
}
