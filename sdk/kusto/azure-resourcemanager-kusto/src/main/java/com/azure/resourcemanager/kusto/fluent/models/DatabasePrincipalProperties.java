// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.DatabasePrincipalRole;
import com.azure.resourcemanager.kusto.models.PrincipalType;
import com.azure.resourcemanager.kusto.models.ProvisioningState;
import java.io.IOException;

/**
 * A class representing database principal property.
 */
@Fluent
public final class DatabasePrincipalProperties implements JsonSerializable<DatabasePrincipalProperties> {
    /*
     * The principal ID assigned to the database principal. It can be a user email, application ID, or security group
     * name.
     */
    private String principalId;

    /*
     * Database principal role.
     */
    private DatabasePrincipalRole role;

    /*
     * The tenant id of the principal
     */
    private String tenantId;

    /*
     * Principal type.
     */
    private PrincipalType principalType;

    /*
     * The tenant name of the principal
     */
    private String tenantName;

    /*
     * The principal name
     */
    private String principalName;

    /*
     * The provisioned state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The service principal object id in AAD (Azure active directory)
     */
    private String aadObjectId;

    /**
     * Creates an instance of DatabasePrincipalProperties class.
     */
    public DatabasePrincipalProperties() {
    }

    /**
     * Get the principalId property: The principal ID assigned to the database principal. It can be a user email,
     * application ID, or security group name.
     * 
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: The principal ID assigned to the database principal. It can be a user email,
     * application ID, or security group name.
     * 
     * @param principalId the principalId value to set.
     * @return the DatabasePrincipalProperties object itself.
     */
    public DatabasePrincipalProperties withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the role property: Database principal role.
     * 
     * @return the role value.
     */
    public DatabasePrincipalRole role() {
        return this.role;
    }

    /**
     * Set the role property: Database principal role.
     * 
     * @param role the role value to set.
     * @return the DatabasePrincipalProperties object itself.
     */
    public DatabasePrincipalProperties withRole(DatabasePrincipalRole role) {
        this.role = role;
        return this;
    }

    /**
     * Get the tenantId property: The tenant id of the principal.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The tenant id of the principal.
     * 
     * @param tenantId the tenantId value to set.
     * @return the DatabasePrincipalProperties object itself.
     */
    public DatabasePrincipalProperties withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the principalType property: Principal type.
     * 
     * @return the principalType value.
     */
    public PrincipalType principalType() {
        return this.principalType;
    }

    /**
     * Set the principalType property: Principal type.
     * 
     * @param principalType the principalType value to set.
     * @return the DatabasePrincipalProperties object itself.
     */
    public DatabasePrincipalProperties withPrincipalType(PrincipalType principalType) {
        this.principalType = principalType;
        return this;
    }

    /**
     * Get the tenantName property: The tenant name of the principal.
     * 
     * @return the tenantName value.
     */
    public String tenantName() {
        return this.tenantName;
    }

    /**
     * Get the principalName property: The principal name.
     * 
     * @return the principalName value.
     */
    public String principalName() {
        return this.principalName;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the aadObjectId property: The service principal object id in AAD (Azure active directory).
     * 
     * @return the aadObjectId value.
     */
    public String aadObjectId() {
        return this.aadObjectId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (principalId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property principalId in model DatabasePrincipalProperties"));
        }
        if (role() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property role in model DatabasePrincipalProperties"));
        }
        if (principalType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property principalType in model DatabasePrincipalProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabasePrincipalProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("principalId", this.principalId);
        jsonWriter.writeStringField("role", this.role == null ? null : this.role.toString());
        jsonWriter.writeStringField("principalType", this.principalType == null ? null : this.principalType.toString());
        jsonWriter.writeStringField("tenantId", this.tenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabasePrincipalProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabasePrincipalProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabasePrincipalProperties.
     */
    public static DatabasePrincipalProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabasePrincipalProperties deserializedDatabasePrincipalProperties = new DatabasePrincipalProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("principalId".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.principalId = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.role = DatabasePrincipalRole.fromString(reader.getString());
                } else if ("principalType".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.principalType
                        = PrincipalType.fromString(reader.getString());
                } else if ("tenantId".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.tenantId = reader.getString();
                } else if ("tenantName".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.tenantName = reader.getString();
                } else if ("principalName".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.principalName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("aadObjectId".equals(fieldName)) {
                    deserializedDatabasePrincipalProperties.aadObjectId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabasePrincipalProperties;
        });
    }
}
