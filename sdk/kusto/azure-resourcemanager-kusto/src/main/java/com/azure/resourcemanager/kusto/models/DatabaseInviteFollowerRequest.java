// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The request to invite a follower to a database.
 */
@Fluent
public final class DatabaseInviteFollowerRequest implements JsonSerializable<DatabaseInviteFollowerRequest> {
    /*
     * The email of the invited user for which the follower invitation is generated.
     */
    private String inviteeEmail;

    /*
     * Table level sharing specifications
     */
    private TableLevelSharingProperties tableLevelSharingProperties;

    /**
     * Creates an instance of DatabaseInviteFollowerRequest class.
     */
    public DatabaseInviteFollowerRequest() {
    }

    /**
     * Get the inviteeEmail property: The email of the invited user for which the follower invitation is generated.
     * 
     * @return the inviteeEmail value.
     */
    public String inviteeEmail() {
        return this.inviteeEmail;
    }

    /**
     * Set the inviteeEmail property: The email of the invited user for which the follower invitation is generated.
     * 
     * @param inviteeEmail the inviteeEmail value to set.
     * @return the DatabaseInviteFollowerRequest object itself.
     */
    public DatabaseInviteFollowerRequest withInviteeEmail(String inviteeEmail) {
        this.inviteeEmail = inviteeEmail;
        return this;
    }

    /**
     * Get the tableLevelSharingProperties property: Table level sharing specifications.
     * 
     * @return the tableLevelSharingProperties value.
     */
    public TableLevelSharingProperties tableLevelSharingProperties() {
        return this.tableLevelSharingProperties;
    }

    /**
     * Set the tableLevelSharingProperties property: Table level sharing specifications.
     * 
     * @param tableLevelSharingProperties the tableLevelSharingProperties value to set.
     * @return the DatabaseInviteFollowerRequest object itself.
     */
    public DatabaseInviteFollowerRequest
        withTableLevelSharingProperties(TableLevelSharingProperties tableLevelSharingProperties) {
        this.tableLevelSharingProperties = tableLevelSharingProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inviteeEmail() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property inviteeEmail in model DatabaseInviteFollowerRequest"));
        }
        if (tableLevelSharingProperties() != null) {
            tableLevelSharingProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DatabaseInviteFollowerRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inviteeEmail", this.inviteeEmail);
        jsonWriter.writeJsonField("tableLevelSharingProperties", this.tableLevelSharingProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatabaseInviteFollowerRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatabaseInviteFollowerRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DatabaseInviteFollowerRequest.
     */
    public static DatabaseInviteFollowerRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatabaseInviteFollowerRequest deserializedDatabaseInviteFollowerRequest
                = new DatabaseInviteFollowerRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inviteeEmail".equals(fieldName)) {
                    deserializedDatabaseInviteFollowerRequest.inviteeEmail = reader.getString();
                } else if ("tableLevelSharingProperties".equals(fieldName)) {
                    deserializedDatabaseInviteFollowerRequest.tableLevelSharingProperties
                        = TableLevelSharingProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatabaseInviteFollowerRequest;
        });
    }
}
