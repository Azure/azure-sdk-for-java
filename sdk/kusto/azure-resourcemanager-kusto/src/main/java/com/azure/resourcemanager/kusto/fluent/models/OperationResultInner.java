// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.ProvisioningState;
import com.azure.resourcemanager.kusto.models.Status;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Operation Result Entity.
 */
@Fluent
public final class OperationResultInner implements JsonSerializable<OperationResultInner> {
    /*
     * ID of the resource.
     */
    private String id;

    /*
     * Name of the resource.
     */
    private String name;

    /*
     * status of the Operation result.
     */
    private Status status;

    /*
     * The operation start time
     */
    private OffsetDateTime startTime;

    /*
     * The operation end time
     */
    private OffsetDateTime endTime;

    /*
     * Percentage completed.
     */
    private Double percentComplete;

    /*
     * Properties of the operation results
     */
    private OperationResultProperties innerProperties;

    /*
     * Object that contains the error code and message if the operation failed.
     */
    private OperationResultErrorProperties innerError;

    /**
     * Creates an instance of OperationResultInner class.
     */
    public OperationResultInner() {
    }

    /**
     * Get the id property: ID of the resource.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: Name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the status property: status of the Operation result.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the startTime property: The operation start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The operation start time.
     * 
     * @param startTime the startTime value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The operation end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The operation end time.
     * 
     * @param endTime the endTime value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the percentComplete property: Percentage completed.
     * 
     * @return the percentComplete value.
     */
    public Double percentComplete() {
        return this.percentComplete;
    }

    /**
     * Set the percentComplete property: Percentage completed.
     * 
     * @param percentComplete the percentComplete value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withPercentComplete(Double percentComplete) {
        this.percentComplete = percentComplete;
        return this;
    }

    /**
     * Get the innerProperties property: Properties of the operation results.
     * 
     * @return the innerProperties value.
     */
    private OperationResultProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the innerError property: Object that contains the error code and message if the operation failed.
     * 
     * @return the innerError value.
     */
    private OperationResultErrorProperties innerError() {
        return this.innerError;
    }

    /**
     * Get the operationKind property: The kind of the operation.
     * 
     * @return the operationKind value.
     */
    public String operationKind() {
        return this.innerProperties() == null ? null : this.innerProperties().operationKind();
    }

    /**
     * Set the operationKind property: The kind of the operation.
     * 
     * @param operationKind the operationKind value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withOperationKind(String operationKind) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperationResultProperties();
        }
        this.innerProperties().withOperationKind(operationKind);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the operationState property: The state of the operation.
     * 
     * @return the operationState value.
     */
    public String operationState() {
        return this.innerProperties() == null ? null : this.innerProperties().operationState();
    }

    /**
     * Set the operationState property: The state of the operation.
     * 
     * @param operationState the operationState value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withOperationState(String operationState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new OperationResultProperties();
        }
        this.innerProperties().withOperationState(operationState);
        return this;
    }

    /**
     * Get the code property: The code of the error.
     * 
     * @return the code value.
     */
    public String code() {
        return this.innerError() == null ? null : this.innerError().code();
    }

    /**
     * Set the code property: The code of the error.
     * 
     * @param code the code value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withCode(String code) {
        if (this.innerError() == null) {
            this.innerError = new OperationResultErrorProperties();
        }
        this.innerError().withCode(code);
        return this;
    }

    /**
     * Get the message property: The error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.innerError() == null ? null : this.innerError().message();
    }

    /**
     * Set the message property: The error message.
     * 
     * @param message the message value to set.
     * @return the OperationResultInner object itself.
     */
    public OperationResultInner withMessage(String message) {
        if (this.innerError() == null) {
            this.innerError = new OperationResultErrorProperties();
        }
        this.innerError().withMessage(message);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (innerError() != null) {
            innerError().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeNumberField("percentComplete", this.percentComplete);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("error", this.innerError);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationResultInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationResultInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationResultInner.
     */
    public static OperationResultInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationResultInner deserializedOperationResultInner = new OperationResultInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedOperationResultInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedOperationResultInner.name = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedOperationResultInner.status = Status.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedOperationResultInner.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedOperationResultInner.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("percentComplete".equals(fieldName)) {
                    deserializedOperationResultInner.percentComplete = reader.getNullable(JsonReader::getDouble);
                } else if ("properties".equals(fieldName)) {
                    deserializedOperationResultInner.innerProperties = OperationResultProperties.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    deserializedOperationResultInner.innerError = OperationResultErrorProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationResultInner;
        });
    }
}
