// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.DatabaseStatistics;
import com.azure.resourcemanager.kusto.models.KeyVaultProperties;
import com.azure.resourcemanager.kusto.models.ProvisioningState;
import com.azure.resourcemanager.kusto.models.SuspensionDetails;
import java.io.IOException;
import java.time.Duration;

/**
 * Class representing the Kusto database properties.
 */
@Fluent
public final class ReadWriteDatabaseProperties implements JsonSerializable<ReadWriteDatabaseProperties> {
    /*
     * The provisioned state of the resource.
     */
    private ProvisioningState provisioningState;

    /*
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     */
    private Duration softDeletePeriod;

    /*
     * The time the data should be kept in cache for fast queries in TimeSpan.
     */
    private Duration hotCachePeriod;

    /*
     * The statistics of the database.
     */
    private DatabaseStatistics statistics;

    /*
     * Indicates whether the database is followed.
     */
    private Boolean isFollowed;

    /*
     * KeyVault properties for the database encryption.
     */
    private KeyVaultProperties keyVaultProperties;

    /*
     * The database suspension details. If the database is suspended, this object contains information related to the
     * database's suspension state.
     */
    private SuspensionDetails suspensionDetails;

    /**
     * Creates an instance of ReadWriteDatabaseProperties class.
     */
    public ReadWriteDatabaseProperties() {
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the softDeletePeriod property: The time the data should be kept before it stops being accessible to queries
     * in TimeSpan.
     * 
     * @return the softDeletePeriod value.
     */
    public Duration softDeletePeriod() {
        return this.softDeletePeriod;
    }

    /**
     * Set the softDeletePeriod property: The time the data should be kept before it stops being accessible to queries
     * in TimeSpan.
     * 
     * @param softDeletePeriod the softDeletePeriod value to set.
     * @return the ReadWriteDatabaseProperties object itself.
     */
    public ReadWriteDatabaseProperties withSoftDeletePeriod(Duration softDeletePeriod) {
        this.softDeletePeriod = softDeletePeriod;
        return this;
    }

    /**
     * Get the hotCachePeriod property: The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     * @return the hotCachePeriod value.
     */
    public Duration hotCachePeriod() {
        return this.hotCachePeriod;
    }

    /**
     * Set the hotCachePeriod property: The time the data should be kept in cache for fast queries in TimeSpan.
     * 
     * @param hotCachePeriod the hotCachePeriod value to set.
     * @return the ReadWriteDatabaseProperties object itself.
     */
    public ReadWriteDatabaseProperties withHotCachePeriod(Duration hotCachePeriod) {
        this.hotCachePeriod = hotCachePeriod;
        return this;
    }

    /**
     * Get the statistics property: The statistics of the database.
     * 
     * @return the statistics value.
     */
    public DatabaseStatistics statistics() {
        return this.statistics;
    }

    /**
     * Get the isFollowed property: Indicates whether the database is followed.
     * 
     * @return the isFollowed value.
     */
    public Boolean isFollowed() {
        return this.isFollowed;
    }

    /**
     * Get the keyVaultProperties property: KeyVault properties for the database encryption.
     * 
     * @return the keyVaultProperties value.
     */
    public KeyVaultProperties keyVaultProperties() {
        return this.keyVaultProperties;
    }

    /**
     * Set the keyVaultProperties property: KeyVault properties for the database encryption.
     * 
     * @param keyVaultProperties the keyVaultProperties value to set.
     * @return the ReadWriteDatabaseProperties object itself.
     */
    public ReadWriteDatabaseProperties withKeyVaultProperties(KeyVaultProperties keyVaultProperties) {
        this.keyVaultProperties = keyVaultProperties;
        return this;
    }

    /**
     * Get the suspensionDetails property: The database suspension details. If the database is suspended, this object
     * contains information related to the database's suspension state.
     * 
     * @return the suspensionDetails value.
     */
    public SuspensionDetails suspensionDetails() {
        return this.suspensionDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (statistics() != null) {
            statistics().validate();
        }
        if (keyVaultProperties() != null) {
            keyVaultProperties().validate();
        }
        if (suspensionDetails() != null) {
            suspensionDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("softDeletePeriod", CoreUtils.durationToStringWithDays(this.softDeletePeriod));
        jsonWriter.writeStringField("hotCachePeriod", CoreUtils.durationToStringWithDays(this.hotCachePeriod));
        jsonWriter.writeJsonField("keyVaultProperties", this.keyVaultProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReadWriteDatabaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReadWriteDatabaseProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReadWriteDatabaseProperties.
     */
    public static ReadWriteDatabaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReadWriteDatabaseProperties deserializedReadWriteDatabaseProperties = new ReadWriteDatabaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("softDeletePeriod".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.softDeletePeriod
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("hotCachePeriod".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.hotCachePeriod
                        = reader.getNullable(nonNullReader -> Duration.parse(nonNullReader.getString()));
                } else if ("statistics".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.statistics = DatabaseStatistics.fromJson(reader);
                } else if ("isFollowed".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.isFollowed = reader.getNullable(JsonReader::getBoolean);
                } else if ("keyVaultProperties".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.keyVaultProperties = KeyVaultProperties.fromJson(reader);
                } else if ("suspensionDetails".equals(fieldName)) {
                    deserializedReadWriteDatabaseProperties.suspensionDetails = SuspensionDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReadWriteDatabaseProperties;
        });
    }
}
