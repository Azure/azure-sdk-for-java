// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a properties of a cluster that is part of a migration.
 */
@Immutable
public final class MigrationClusterProperties implements JsonSerializable<MigrationClusterProperties> {
    /*
     * The resource ID of the cluster.
     */
    private String id;

    /*
     * The public URL of the cluster.
     */
    private String uri;

    /*
     * The public data ingestion URL of the cluster.
     */
    private String dataIngestionUri;

    /*
     * The role of the cluster in the migration process.
     */
    private MigrationClusterRole role;

    /**
     * Creates an instance of MigrationClusterProperties class.
     */
    public MigrationClusterProperties() {
    }

    /**
     * Get the id property: The resource ID of the cluster.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the uri property: The public URL of the cluster.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Get the dataIngestionUri property: The public data ingestion URL of the cluster.
     * 
     * @return the dataIngestionUri value.
     */
    public String dataIngestionUri() {
        return this.dataIngestionUri;
    }

    /**
     * Get the role property: The role of the cluster in the migration process.
     * 
     * @return the role value.
     */
    public MigrationClusterRole role() {
        return this.role;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MigrationClusterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MigrationClusterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MigrationClusterProperties.
     */
    public static MigrationClusterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MigrationClusterProperties deserializedMigrationClusterProperties = new MigrationClusterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMigrationClusterProperties.id = reader.getString();
                } else if ("uri".equals(fieldName)) {
                    deserializedMigrationClusterProperties.uri = reader.getString();
                } else if ("dataIngestionUri".equals(fieldName)) {
                    deserializedMigrationClusterProperties.dataIngestionUri = reader.getString();
                } else if ("role".equals(fieldName)) {
                    deserializedMigrationClusterProperties.role = MigrationClusterRole.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMigrationClusterProperties;
        });
    }
}
