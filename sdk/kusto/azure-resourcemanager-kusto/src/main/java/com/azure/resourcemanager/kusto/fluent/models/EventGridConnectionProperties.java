// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.kusto.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.kusto.models.BlobStorageEventType;
import com.azure.resourcemanager.kusto.models.DatabaseRouting;
import com.azure.resourcemanager.kusto.models.EventGridDataFormat;
import com.azure.resourcemanager.kusto.models.ProvisioningState;
import java.io.IOException;

/**
 * Class representing the Kusto event grid connection properties.
 */
@Fluent
public final class EventGridConnectionProperties implements JsonSerializable<EventGridConnectionProperties> {
    /*
     * The resource ID of the storage account where the data resides.
     */
    private String storageAccountResourceId;

    /*
     * The resource ID of the event grid that is subscribed to the storage account events.
     */
    private String eventGridResourceId;

    /*
     * The resource ID where the event grid is configured to send events.
     */
    private String eventHubResourceId;

    /*
     * The event hub consumer group.
     */
    private String consumerGroup;

    /*
     * The table where the data should be ingested. Optionally the table information can be added to each message.
     */
    private String tableName;

    /*
     * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
     */
    private String mappingRuleName;

    /*
     * The data format of the message. Optionally the data format can be added to each message.
     */
    private EventGridDataFormat dataFormat;

    /*
     * A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file
     */
    private Boolean ignoreFirstRecord;

    /*
     * The name of blob storage event type to process.
     */
    private BlobStorageEventType blobStorageEventType;

    /*
     * The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub and
     * storage account.
     */
    private String managedIdentityResourceId;

    /*
     * The object ID of managedIdentityResourceId
     */
    private String managedIdentityObjectId;

    /*
     * Indication for database routing information from the data connection, by default only database routing
     * information is allowed
     */
    private DatabaseRouting databaseRouting;

    /*
     * The provisioned state of the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of EventGridConnectionProperties class.
     */
    public EventGridConnectionProperties() {
    }

    /**
     * Get the storageAccountResourceId property: The resource ID of the storage account where the data resides.
     * 
     * @return the storageAccountResourceId value.
     */
    public String storageAccountResourceId() {
        return this.storageAccountResourceId;
    }

    /**
     * Set the storageAccountResourceId property: The resource ID of the storage account where the data resides.
     * 
     * @param storageAccountResourceId the storageAccountResourceId value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withStorageAccountResourceId(String storageAccountResourceId) {
        this.storageAccountResourceId = storageAccountResourceId;
        return this;
    }

    /**
     * Get the eventGridResourceId property: The resource ID of the event grid that is subscribed to the storage account
     * events.
     * 
     * @return the eventGridResourceId value.
     */
    public String eventGridResourceId() {
        return this.eventGridResourceId;
    }

    /**
     * Set the eventGridResourceId property: The resource ID of the event grid that is subscribed to the storage account
     * events.
     * 
     * @param eventGridResourceId the eventGridResourceId value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withEventGridResourceId(String eventGridResourceId) {
        this.eventGridResourceId = eventGridResourceId;
        return this;
    }

    /**
     * Get the eventHubResourceId property: The resource ID where the event grid is configured to send events.
     * 
     * @return the eventHubResourceId value.
     */
    public String eventHubResourceId() {
        return this.eventHubResourceId;
    }

    /**
     * Set the eventHubResourceId property: The resource ID where the event grid is configured to send events.
     * 
     * @param eventHubResourceId the eventHubResourceId value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withEventHubResourceId(String eventHubResourceId) {
        this.eventHubResourceId = eventHubResourceId;
        return this;
    }

    /**
     * Get the consumerGroup property: The event hub consumer group.
     * 
     * @return the consumerGroup value.
     */
    public String consumerGroup() {
        return this.consumerGroup;
    }

    /**
     * Set the consumerGroup property: The event hub consumer group.
     * 
     * @param consumerGroup the consumerGroup value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withConsumerGroup(String consumerGroup) {
        this.consumerGroup = consumerGroup;
        return this;
    }

    /**
     * Get the tableName property: The table where the data should be ingested. Optionally the table information can be
     * added to each message.
     * 
     * @return the tableName value.
     */
    public String tableName() {
        return this.tableName;
    }

    /**
     * Set the tableName property: The table where the data should be ingested. Optionally the table information can be
     * added to each message.
     * 
     * @param tableName the tableName value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }

    /**
     * Get the mappingRuleName property: The mapping rule to be used to ingest the data. Optionally the mapping
     * information can be added to each message.
     * 
     * @return the mappingRuleName value.
     */
    public String mappingRuleName() {
        return this.mappingRuleName;
    }

    /**
     * Set the mappingRuleName property: The mapping rule to be used to ingest the data. Optionally the mapping
     * information can be added to each message.
     * 
     * @param mappingRuleName the mappingRuleName value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withMappingRuleName(String mappingRuleName) {
        this.mappingRuleName = mappingRuleName;
        return this;
    }

    /**
     * Get the dataFormat property: The data format of the message. Optionally the data format can be added to each
     * message.
     * 
     * @return the dataFormat value.
     */
    public EventGridDataFormat dataFormat() {
        return this.dataFormat;
    }

    /**
     * Set the dataFormat property: The data format of the message. Optionally the data format can be added to each
     * message.
     * 
     * @param dataFormat the dataFormat value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withDataFormat(EventGridDataFormat dataFormat) {
        this.dataFormat = dataFormat;
        return this;
    }

    /**
     * Get the ignoreFirstRecord property: A Boolean value that, if set to true, indicates that ingestion should ignore
     * the first record of every file.
     * 
     * @return the ignoreFirstRecord value.
     */
    public Boolean ignoreFirstRecord() {
        return this.ignoreFirstRecord;
    }

    /**
     * Set the ignoreFirstRecord property: A Boolean value that, if set to true, indicates that ingestion should ignore
     * the first record of every file.
     * 
     * @param ignoreFirstRecord the ignoreFirstRecord value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withIgnoreFirstRecord(Boolean ignoreFirstRecord) {
        this.ignoreFirstRecord = ignoreFirstRecord;
        return this;
    }

    /**
     * Get the blobStorageEventType property: The name of blob storage event type to process.
     * 
     * @return the blobStorageEventType value.
     */
    public BlobStorageEventType blobStorageEventType() {
        return this.blobStorageEventType;
    }

    /**
     * Set the blobStorageEventType property: The name of blob storage event type to process.
     * 
     * @param blobStorageEventType the blobStorageEventType value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withBlobStorageEventType(BlobStorageEventType blobStorageEventType) {
        this.blobStorageEventType = blobStorageEventType;
        return this;
    }

    /**
     * Get the managedIdentityResourceId property: The resource ID of a managed identity (system or user assigned) to be
     * used to authenticate with event hub and storage account.
     * 
     * @return the managedIdentityResourceId value.
     */
    public String managedIdentityResourceId() {
        return this.managedIdentityResourceId;
    }

    /**
     * Set the managedIdentityResourceId property: The resource ID of a managed identity (system or user assigned) to be
     * used to authenticate with event hub and storage account.
     * 
     * @param managedIdentityResourceId the managedIdentityResourceId value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withManagedIdentityResourceId(String managedIdentityResourceId) {
        this.managedIdentityResourceId = managedIdentityResourceId;
        return this;
    }

    /**
     * Get the managedIdentityObjectId property: The object ID of managedIdentityResourceId.
     * 
     * @return the managedIdentityObjectId value.
     */
    public String managedIdentityObjectId() {
        return this.managedIdentityObjectId;
    }

    /**
     * Get the databaseRouting property: Indication for database routing information from the data connection, by
     * default only database routing information is allowed.
     * 
     * @return the databaseRouting value.
     */
    public DatabaseRouting databaseRouting() {
        return this.databaseRouting;
    }

    /**
     * Set the databaseRouting property: Indication for database routing information from the data connection, by
     * default only database routing information is allowed.
     * 
     * @param databaseRouting the databaseRouting value to set.
     * @return the EventGridConnectionProperties object itself.
     */
    public EventGridConnectionProperties withDatabaseRouting(DatabaseRouting databaseRouting) {
        this.databaseRouting = databaseRouting;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioned state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageAccountResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property storageAccountResourceId in model EventGridConnectionProperties"));
        }
        if (eventHubResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property eventHubResourceId in model EventGridConnectionProperties"));
        }
        if (consumerGroup() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property consumerGroup in model EventGridConnectionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EventGridConnectionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageAccountResourceId", this.storageAccountResourceId);
        jsonWriter.writeStringField("eventHubResourceId", this.eventHubResourceId);
        jsonWriter.writeStringField("consumerGroup", this.consumerGroup);
        jsonWriter.writeStringField("eventGridResourceId", this.eventGridResourceId);
        jsonWriter.writeStringField("tableName", this.tableName);
        jsonWriter.writeStringField("mappingRuleName", this.mappingRuleName);
        jsonWriter.writeStringField("dataFormat", this.dataFormat == null ? null : this.dataFormat.toString());
        jsonWriter.writeBooleanField("ignoreFirstRecord", this.ignoreFirstRecord);
        jsonWriter.writeStringField("blobStorageEventType",
            this.blobStorageEventType == null ? null : this.blobStorageEventType.toString());
        jsonWriter.writeStringField("managedIdentityResourceId", this.managedIdentityResourceId);
        jsonWriter.writeStringField("databaseRouting",
            this.databaseRouting == null ? null : this.databaseRouting.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventGridConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventGridConnectionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EventGridConnectionProperties.
     */
    public static EventGridConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventGridConnectionProperties deserializedEventGridConnectionProperties
                = new EventGridConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageAccountResourceId".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.storageAccountResourceId = reader.getString();
                } else if ("eventHubResourceId".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.eventHubResourceId = reader.getString();
                } else if ("consumerGroup".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.consumerGroup = reader.getString();
                } else if ("eventGridResourceId".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.eventGridResourceId = reader.getString();
                } else if ("tableName".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.tableName = reader.getString();
                } else if ("mappingRuleName".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.mappingRuleName = reader.getString();
                } else if ("dataFormat".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.dataFormat
                        = EventGridDataFormat.fromString(reader.getString());
                } else if ("ignoreFirstRecord".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.ignoreFirstRecord
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("blobStorageEventType".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.blobStorageEventType
                        = BlobStorageEventType.fromString(reader.getString());
                } else if ("managedIdentityResourceId".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.managedIdentityResourceId = reader.getString();
                } else if ("managedIdentityObjectId".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.managedIdentityObjectId = reader.getString();
                } else if ("databaseRouting".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.databaseRouting
                        = DatabaseRouting.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEventGridConnectionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventGridConnectionProperties;
        });
    }
}
