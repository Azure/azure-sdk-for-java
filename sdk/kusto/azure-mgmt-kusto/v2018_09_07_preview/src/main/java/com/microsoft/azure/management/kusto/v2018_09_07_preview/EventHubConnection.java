/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2018_09_07_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.management.kusto.v2018_09_07_preview.implementation.EventHubConnectionInner;
import com.microsoft.azure.arm.model.Indexable;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.kusto.v2018_09_07_preview.implementation.KustoManager;

/**
 * Type representing EventHubConnection.
 */
public interface EventHubConnection extends HasInner<EventHubConnectionInner>, Indexable, Refreshable<EventHubConnection>, Updatable<EventHubConnection.Update>, HasManager<KustoManager> {
    /**
     * @return the consumerGroup value.
     */
    String consumerGroup();

    /**
     * @return the dataFormat value.
     */
    DataFormat dataFormat();

    /**
     * @return the eventHubResourceId value.
     */
    String eventHubResourceId();

    /**
     * @return the id value.
     */
    String id();

    /**
     * @return the location value.
     */
    String location();

    /**
     * @return the mappingRuleName value.
     */
    String mappingRuleName();

    /**
     * @return the name value.
     */
    String name();

    /**
     * @return the tableName value.
     */
    String tableName();

    /**
     * @return the type value.
     */
    String type();

    /**
     * The entirety of the EventHubConnection definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithDatabasis, DefinitionStages.WithConsumerGroup, DefinitionStages.WithEventHubResourceId, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of EventHubConnection definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a EventHubConnection definition.
         */
        interface Blank extends WithDatabasis {
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify Databasis.
         */
        interface WithDatabasis {
           /**
            * Specifies resourceGroupName, clusterName, databaseName.
            * @param resourceGroupName The name of the resource group containing the Kusto cluster
            * @param clusterName The name of the Kusto cluster
            * @param databaseName The name of the database in the Kusto cluster
            * @return the next definition stage
            */
            WithConsumerGroup withExistingDatabasis(String resourceGroupName, String clusterName, String databaseName);
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify ConsumerGroup.
         */
        interface WithConsumerGroup {
           /**
            * Specifies consumerGroup.
            * @param consumerGroup The event hub consumer group
            * @return the next definition stage
            */
            WithEventHubResourceId withConsumerGroup(String consumerGroup);
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify EventHubResourceId.
         */
        interface WithEventHubResourceId {
           /**
            * Specifies eventHubResourceId.
            * @param eventHubResourceId The resource ID of the event hub to be used to create a data connection
            * @return the next definition stage
            */
            WithCreate withEventHubResourceId(String eventHubResourceId);
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify DataFormat.
         */
        interface WithDataFormat {
            /**
             * Specifies dataFormat.
             * @param dataFormat The data format of the message. Optionally the data format can be added to each message. Possible values include: 'MULTIJSON', 'JSON', 'CSV'
             * @return the next definition stage
             */
            WithCreate withDataFormat(DataFormat dataFormat);
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location Resource location
             * @return the next definition stage
             */
            WithCreate withLocation(String location);
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify MappingRuleName.
         */
        interface WithMappingRuleName {
            /**
             * Specifies mappingRuleName.
             * @param mappingRuleName The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message
             * @return the next definition stage
             */
            WithCreate withMappingRuleName(String mappingRuleName);
        }

        /**
         * The stage of the eventhubconnection definition allowing to specify TableName.
         */
        interface WithTableName {
            /**
             * Specifies tableName.
             * @param tableName The table where the data should be ingested. Optionally the table information can be added to each message
             * @return the next definition stage
             */
            WithCreate withTableName(String tableName);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<EventHubConnection>, DefinitionStages.WithDataFormat, DefinitionStages.WithLocation, DefinitionStages.WithMappingRuleName, DefinitionStages.WithTableName {
        }
    }
    /**
     * The template for a EventHubConnection update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<EventHubConnection>, UpdateStages.WithDataFormat, UpdateStages.WithLocation, UpdateStages.WithMappingRuleName, UpdateStages.WithTableName {
    }

    /**
     * Grouping of EventHubConnection update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the eventhubconnection update allowing to specify DataFormat.
         */
        interface WithDataFormat {
            /**
             * Specifies dataFormat.
             * @param dataFormat The data format of the message. Optionally the data format can be added to each message. Possible values include: 'MULTIJSON', 'JSON', 'CSV'
             * @return the next update stage
             */
            Update withDataFormat(DataFormat dataFormat);
        }

        /**
         * The stage of the eventhubconnection update allowing to specify Location.
         */
        interface WithLocation {
            /**
             * Specifies location.
             * @param location Resource location
             * @return the next update stage
             */
            Update withLocation(String location);
        }

        /**
         * The stage of the eventhubconnection update allowing to specify MappingRuleName.
         */
        interface WithMappingRuleName {
            /**
             * Specifies mappingRuleName.
             * @param mappingRuleName The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message
             * @return the next update stage
             */
            Update withMappingRuleName(String mappingRuleName);
        }

        /**
         * The stage of the eventhubconnection update allowing to specify TableName.
         */
        interface WithTableName {
            /**
             * Specifies tableName.
             * @param tableName The table where the data should be ingested. Optionally the table information can be added to each message
             * @return the next update stage
             */
            Update withTableName(String tableName);
        }

    }
}
