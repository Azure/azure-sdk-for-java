/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2020_06_14.implementation;

import com.microsoft.azure.management.kusto.v2020_06_14.AzureSku;
import java.util.List;
import com.microsoft.azure.management.kusto.v2020_06_14.Identity;
import com.microsoft.azure.management.kusto.v2020_06_14.State;
import com.microsoft.azure.management.kusto.v2020_06_14.ProvisioningState;
import com.microsoft.azure.management.kusto.v2020_06_14.TrustedExternalTenant;
import com.microsoft.azure.management.kusto.v2020_06_14.OptimizedAutoscale;
import com.microsoft.azure.management.kusto.v2020_06_14.VirtualNetworkConfiguration;
import com.microsoft.azure.management.kusto.v2020_06_14.KeyVaultProperties;
import com.microsoft.azure.management.kusto.v2020_06_14.LanguageExtensionsList;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * Class representing a Kusto cluster.
 */
@JsonFlatten
public class ClusterInner extends Resource {
    /**
     * The SKU of the cluster.
     */
    @JsonProperty(value = "sku", required = true)
    private AzureSku sku;

    /**
     * The availability zones of the cluster.
     */
    @JsonProperty(value = "zones")
    private List<String> zones;

    /**
     * The identity of the cluster, if configured.
     */
    @JsonProperty(value = "identity")
    private Identity identity;

    /**
     * The state of the resource. Possible values include: 'Creating',
     * 'Unavailable', 'Running', 'Deleting', 'Deleted', 'Stopping', 'Stopped',
     * 'Starting', 'Updating'.
     */
    @JsonProperty(value = "properties.state", access = JsonProperty.Access.WRITE_ONLY)
    private State state;

    /**
     * The provisioned state of the resource. Possible values include:
     * 'Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * The cluster URI.
     */
    @JsonProperty(value = "properties.uri", access = JsonProperty.Access.WRITE_ONLY)
    private String uri;

    /**
     * The cluster data ingestion URI.
     */
    @JsonProperty(value = "properties.dataIngestionUri", access = JsonProperty.Access.WRITE_ONLY)
    private String dataIngestionUri;

    /**
     * The reason for the cluster's current state.
     */
    @JsonProperty(value = "properties.stateReason", access = JsonProperty.Access.WRITE_ONLY)
    private String stateReason;

    /**
     * The cluster's external tenants.
     */
    @JsonProperty(value = "properties.trustedExternalTenants")
    private List<TrustedExternalTenant> trustedExternalTenants;

    /**
     * Optimized auto scale definition.
     */
    @JsonProperty(value = "properties.optimizedAutoscale")
    private OptimizedAutoscale optimizedAutoscale;

    /**
     * A boolean value that indicates if the cluster's disks are encrypted.
     */
    @JsonProperty(value = "properties.enableDiskEncryption")
    private Boolean enableDiskEncryption;

    /**
     * A boolean value that indicates if the streaming ingest is enabled.
     */
    @JsonProperty(value = "properties.enableStreamingIngest")
    private Boolean enableStreamingIngest;

    /**
     * Virtual network definition.
     */
    @JsonProperty(value = "properties.virtualNetworkConfiguration")
    private VirtualNetworkConfiguration virtualNetworkConfiguration;

    /**
     * KeyVault properties for the cluster encryption.
     */
    @JsonProperty(value = "properties.keyVaultProperties")
    private KeyVaultProperties keyVaultProperties;

    /**
     * A boolean value that indicates if the purge operations are enabled.
     */
    @JsonProperty(value = "properties.enablePurge")
    private Boolean enablePurge;

    /**
     * List of the cluster's language extensions.
     */
    @JsonProperty(value = "properties.languageExtensions", access = JsonProperty.Access.WRITE_ONLY)
    private LanguageExtensionsList languageExtensions;

    /**
     * A boolean value that indicates if double encryption is enabled.
     */
    @JsonProperty(value = "properties.enableDoubleEncryption")
    private Boolean enableDoubleEncryption;

    /**
     * Get the SKU of the cluster.
     *
     * @return the sku value
     */
    public AzureSku sku() {
        return this.sku;
    }

    /**
     * Set the SKU of the cluster.
     *
     * @param sku the sku value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withSku(AzureSku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the availability zones of the cluster.
     *
     * @return the zones value
     */
    public List<String> zones() {
        return this.zones;
    }

    /**
     * Set the availability zones of the cluster.
     *
     * @param zones the zones value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withZones(List<String> zones) {
        this.zones = zones;
        return this;
    }

    /**
     * Get the identity of the cluster, if configured.
     *
     * @return the identity value
     */
    public Identity identity() {
        return this.identity;
    }

    /**
     * Set the identity of the cluster, if configured.
     *
     * @param identity the identity value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the state of the resource. Possible values include: 'Creating', 'Unavailable', 'Running', 'Deleting', 'Deleted', 'Stopping', 'Stopped', 'Starting', 'Updating'.
     *
     * @return the state value
     */
    public State state() {
        return this.state;
    }

    /**
     * Get the provisioned state of the resource. Possible values include: 'Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving'.
     *
     * @return the provisioningState value
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the cluster URI.
     *
     * @return the uri value
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Get the cluster data ingestion URI.
     *
     * @return the dataIngestionUri value
     */
    public String dataIngestionUri() {
        return this.dataIngestionUri;
    }

    /**
     * Get the reason for the cluster's current state.
     *
     * @return the stateReason value
     */
    public String stateReason() {
        return this.stateReason;
    }

    /**
     * Get the cluster's external tenants.
     *
     * @return the trustedExternalTenants value
     */
    public List<TrustedExternalTenant> trustedExternalTenants() {
        return this.trustedExternalTenants;
    }

    /**
     * Set the cluster's external tenants.
     *
     * @param trustedExternalTenants the trustedExternalTenants value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withTrustedExternalTenants(List<TrustedExternalTenant> trustedExternalTenants) {
        this.trustedExternalTenants = trustedExternalTenants;
        return this;
    }

    /**
     * Get optimized auto scale definition.
     *
     * @return the optimizedAutoscale value
     */
    public OptimizedAutoscale optimizedAutoscale() {
        return this.optimizedAutoscale;
    }

    /**
     * Set optimized auto scale definition.
     *
     * @param optimizedAutoscale the optimizedAutoscale value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withOptimizedAutoscale(OptimizedAutoscale optimizedAutoscale) {
        this.optimizedAutoscale = optimizedAutoscale;
        return this;
    }

    /**
     * Get a boolean value that indicates if the cluster's disks are encrypted.
     *
     * @return the enableDiskEncryption value
     */
    public Boolean enableDiskEncryption() {
        return this.enableDiskEncryption;
    }

    /**
     * Set a boolean value that indicates if the cluster's disks are encrypted.
     *
     * @param enableDiskEncryption the enableDiskEncryption value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withEnableDiskEncryption(Boolean enableDiskEncryption) {
        this.enableDiskEncryption = enableDiskEncryption;
        return this;
    }

    /**
     * Get a boolean value that indicates if the streaming ingest is enabled.
     *
     * @return the enableStreamingIngest value
     */
    public Boolean enableStreamingIngest() {
        return this.enableStreamingIngest;
    }

    /**
     * Set a boolean value that indicates if the streaming ingest is enabled.
     *
     * @param enableStreamingIngest the enableStreamingIngest value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withEnableStreamingIngest(Boolean enableStreamingIngest) {
        this.enableStreamingIngest = enableStreamingIngest;
        return this;
    }

    /**
     * Get virtual network definition.
     *
     * @return the virtualNetworkConfiguration value
     */
    public VirtualNetworkConfiguration virtualNetworkConfiguration() {
        return this.virtualNetworkConfiguration;
    }

    /**
     * Set virtual network definition.
     *
     * @param virtualNetworkConfiguration the virtualNetworkConfiguration value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withVirtualNetworkConfiguration(VirtualNetworkConfiguration virtualNetworkConfiguration) {
        this.virtualNetworkConfiguration = virtualNetworkConfiguration;
        return this;
    }

    /**
     * Get keyVault properties for the cluster encryption.
     *
     * @return the keyVaultProperties value
     */
    public KeyVaultProperties keyVaultProperties() {
        return this.keyVaultProperties;
    }

    /**
     * Set keyVault properties for the cluster encryption.
     *
     * @param keyVaultProperties the keyVaultProperties value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withKeyVaultProperties(KeyVaultProperties keyVaultProperties) {
        this.keyVaultProperties = keyVaultProperties;
        return this;
    }

    /**
     * Get a boolean value that indicates if the purge operations are enabled.
     *
     * @return the enablePurge value
     */
    public Boolean enablePurge() {
        return this.enablePurge;
    }

    /**
     * Set a boolean value that indicates if the purge operations are enabled.
     *
     * @param enablePurge the enablePurge value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withEnablePurge(Boolean enablePurge) {
        this.enablePurge = enablePurge;
        return this;
    }

    /**
     * Get list of the cluster's language extensions.
     *
     * @return the languageExtensions value
     */
    public LanguageExtensionsList languageExtensions() {
        return this.languageExtensions;
    }

    /**
     * Get a boolean value that indicates if double encryption is enabled.
     *
     * @return the enableDoubleEncryption value
     */
    public Boolean enableDoubleEncryption() {
        return this.enableDoubleEncryption;
    }

    /**
     * Set a boolean value that indicates if double encryption is enabled.
     *
     * @param enableDoubleEncryption the enableDoubleEncryption value to set
     * @return the ClusterInner object itself.
     */
    public ClusterInner withEnableDoubleEncryption(Boolean enableDoubleEncryption) {
        this.enableDoubleEncryption = enableDoubleEncryption;
        return this;
    }

}
