/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2020_02_15.implementation;

import com.microsoft.azure.management.kusto.v2020_02_15.DatabasePrincipalAssignment;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.kusto.v2020_02_15.DatabasePrincipalRole;
import com.microsoft.azure.management.kusto.v2020_02_15.PrincipalType;
import com.microsoft.azure.management.kusto.v2020_02_15.ProvisioningState;

class DatabasePrincipalAssignmentImpl extends CreatableUpdatableImpl<DatabasePrincipalAssignment, DatabasePrincipalAssignmentInner, DatabasePrincipalAssignmentImpl> implements DatabasePrincipalAssignment, DatabasePrincipalAssignment.Definition, DatabasePrincipalAssignment.Update {
    private final KustoManager manager;
    private String resourceGroupName;
    private String clusterName;
    private String databaseName;
    private String principalAssignmentName;

    DatabasePrincipalAssignmentImpl(String name, KustoManager manager) {
        super(name, new DatabasePrincipalAssignmentInner());
        this.manager = manager;
        // Set resource name
        this.principalAssignmentName = name;
        //
    }

    DatabasePrincipalAssignmentImpl(DatabasePrincipalAssignmentInner inner, KustoManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.principalAssignmentName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.principalAssignmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "principalAssignments");
        //
    }

    @Override
    public KustoManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DatabasePrincipalAssignment> createResourceAsync() {
        DatabasePrincipalAssignmentsInner client = this.manager().inner().databasePrincipalAssignments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.principalAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DatabasePrincipalAssignment> updateResourceAsync() {
        DatabasePrincipalAssignmentsInner client = this.manager().inner().databasePrincipalAssignments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.principalAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DatabasePrincipalAssignmentInner> getInnerAsync() {
        DatabasePrincipalAssignmentsInner client = this.manager().inner().databasePrincipalAssignments();
        return client.getAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.principalAssignmentName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String principalId() {
        return this.inner().principalId();
    }

    @Override
    public String principalName() {
        return this.inner().principalName();
    }

    @Override
    public PrincipalType principalType() {
        return this.inner().principalType();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public DatabasePrincipalRole role() {
        return this.inner().role();
    }

    @Override
    public String tenantId() {
        return this.inner().tenantId();
    }

    @Override
    public String tenantName() {
        return this.inner().tenantName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DatabasePrincipalAssignmentImpl withExistingDatabasis(String resourceGroupName, String clusterName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public DatabasePrincipalAssignmentImpl withPrincipalId(String principalId) {
        this.inner().withPrincipalId(principalId);
        return this;
    }

    @Override
    public DatabasePrincipalAssignmentImpl withPrincipalType(PrincipalType principalType) {
        this.inner().withPrincipalType(principalType);
        return this;
    }

    @Override
    public DatabasePrincipalAssignmentImpl withRole(DatabasePrincipalRole role) {
        this.inner().withRole(role);
        return this;
    }

    @Override
    public DatabasePrincipalAssignmentImpl withTenantId(String tenantId) {
        this.inner().withTenantId(tenantId);
        return this;
    }

}
