/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2020_02_15.implementation;

import com.microsoft.azure.management.kusto.v2020_02_15.DataConnection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;

class DataConnectionImpl extends CreatableUpdatableImpl<DataConnection, DataConnectionInner, DataConnectionImpl> implements DataConnection, DataConnection.Definition, DataConnection.Update {
    private final KustoManager manager;
    private String resourceGroupName;
    private String clusterName;
    private String databaseName;
    private String dataConnectionName;

    DataConnectionImpl(String name, KustoManager manager) {
        super(name, new DataConnectionInner());
        this.manager = manager;
        // Set resource name
        this.dataConnectionName = name;
        //
    }

    DataConnectionImpl(DataConnectionInner inner, KustoManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.dataConnectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.dataConnectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "dataConnections");
        //
    }

    @Override
    public KustoManager manager() {
        return this.manager;
    }

    @Override
    public Observable<DataConnection> createResourceAsync() {
        DataConnectionsInner client = this.manager().inner().dataConnections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.dataConnectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DataConnection> updateResourceAsync() {
        DataConnectionsInner client = this.manager().inner().dataConnections();
        return client.updateAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.dataConnectionName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DataConnectionInner> getInnerAsync() {
        DataConnectionsInner client = this.manager().inner().dataConnections();
        return client.getAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.dataConnectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public DataConnectionImpl withExistingDatabasis(String resourceGroupName, String clusterName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public DataConnectionImpl withLocation(String location) {
        this.inner().withLocation(location);
        return this;
    }

}
