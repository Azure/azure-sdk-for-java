/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.kusto.v2020_02_15.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.kusto.v2020_02_15.DatabasePrincipalAssignments;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.kusto.v2020_02_15.DatabasePrincipalAssignment;
import com.microsoft.azure.management.kusto.v2020_02_15.CheckNameResult;

class DatabasePrincipalAssignmentsImpl extends WrapperImpl<DatabasePrincipalAssignmentsInner> implements DatabasePrincipalAssignments {
    private final KustoManager manager;

    DatabasePrincipalAssignmentsImpl(KustoManager manager) {
        super(manager.inner().databasePrincipalAssignments());
        this.manager = manager;
    }

    public KustoManager manager() {
        return this.manager;
    }

    @Override
    public DatabasePrincipalAssignmentImpl define(String name) {
        return wrapModel(name);
    }

    private DatabasePrincipalAssignmentImpl wrapModel(DatabasePrincipalAssignmentInner inner) {
        return  new DatabasePrincipalAssignmentImpl(inner, manager());
    }

    private DatabasePrincipalAssignmentImpl wrapModel(String name) {
        return new DatabasePrincipalAssignmentImpl(name, this.manager());
    }

    @Override
    public Observable<DatabasePrincipalAssignment> listAsync(String resourceGroupName, String clusterName, String databaseName) {
        DatabasePrincipalAssignmentsInner client = this.inner();
        return client.listAsync(resourceGroupName, clusterName, databaseName)
        .flatMap(new Func1<List<DatabasePrincipalAssignmentInner>, Observable<DatabasePrincipalAssignmentInner>>() {
            @Override
            public Observable<DatabasePrincipalAssignmentInner> call(List<DatabasePrincipalAssignmentInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<DatabasePrincipalAssignmentInner, DatabasePrincipalAssignment>() {
            @Override
            public DatabasePrincipalAssignment call(DatabasePrincipalAssignmentInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DatabasePrincipalAssignment> getAsync(String resourceGroupName, String clusterName, String databaseName, String principalAssignmentName) {
        DatabasePrincipalAssignmentsInner client = this.inner();
        return client.getAsync(resourceGroupName, clusterName, databaseName, principalAssignmentName)
        .flatMap(new Func1<DatabasePrincipalAssignmentInner, Observable<DatabasePrincipalAssignment>>() {
            @Override
            public Observable<DatabasePrincipalAssignment> call(DatabasePrincipalAssignmentInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DatabasePrincipalAssignment)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String clusterName, String databaseName, String principalAssignmentName) {
        DatabasePrincipalAssignmentsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, clusterName, databaseName, principalAssignmentName).toCompletable();
    }

    @Override
    public Observable<CheckNameResult> checkNameAvailabilityAsync(String resourceGroupName, String clusterName, String databaseName, String name) {
        DatabasePrincipalAssignmentsInner client = this.inner();
        return client.checkNameAvailabilityAsync(resourceGroupName, clusterName, databaseName, name)
        .map(new Func1<CheckNameResultInner, CheckNameResult>() {
            @Override
            public CheckNameResult call(CheckNameResultInner inner) {
                return new CheckNameResultImpl(inner, manager());
            }
        });
    }

}
