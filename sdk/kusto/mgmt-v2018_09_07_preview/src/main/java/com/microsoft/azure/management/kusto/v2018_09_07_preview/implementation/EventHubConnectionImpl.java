/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2018_09_07_preview.implementation;

import com.microsoft.azure.management.kusto.v2018_09_07_preview.EventHubConnection;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.kusto.v2018_09_07_preview.EventHubConnectionUpdate;
import com.microsoft.azure.management.kusto.v2018_09_07_preview.DataFormat;
import rx.functions.Func1;

class EventHubConnectionImpl extends CreatableUpdatableImpl<EventHubConnection, EventHubConnectionInner, EventHubConnectionImpl> implements EventHubConnection, EventHubConnection.Definition, EventHubConnection.Update {
    private final KustoManager manager;
    private String resourceGroupName;
    private String clusterName;
    private String databaseName;
    private String eventHubConnectionName;
    private EventHubConnectionUpdate updateParameter;

    EventHubConnectionImpl(String name, KustoManager manager) {
        super(name, new EventHubConnectionInner());
        this.manager = manager;
        // Set resource name
        this.eventHubConnectionName = name;
        //
        this.updateParameter = new EventHubConnectionUpdate();
    }

    EventHubConnectionImpl(EventHubConnectionInner inner, KustoManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.eventHubConnectionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.databaseName = IdParsingUtils.getValueFromIdByName(inner.id(), "databases");
        this.eventHubConnectionName = IdParsingUtils.getValueFromIdByName(inner.id(), "eventhubconnections");
        //
        this.updateParameter = new EventHubConnectionUpdate();
    }

    @Override
    public KustoManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EventHubConnection> createResourceAsync() {
        EventHubConnectionsInner client = this.manager().inner().eventHubConnections();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.eventHubConnectionName, this.inner())
            .map(new Func1<EventHubConnectionInner, EventHubConnectionInner>() {
               @Override
               public EventHubConnectionInner call(EventHubConnectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<EventHubConnection> updateResourceAsync() {
        EventHubConnectionsInner client = this.manager().inner().eventHubConnections();
        return client.updateAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.eventHubConnectionName, this.updateParameter)
            .map(new Func1<EventHubConnectionInner, EventHubConnectionInner>() {
               @Override
               public EventHubConnectionInner call(EventHubConnectionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EventHubConnectionInner> getInnerAsync() {
        EventHubConnectionsInner client = this.manager().inner().eventHubConnections();
        return client.getAsync(this.resourceGroupName, this.clusterName, this.databaseName, this.eventHubConnectionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new EventHubConnectionUpdate();
    }

    @Override
    public String consumerGroup() {
        return this.inner().consumerGroup();
    }

    @Override
    public DataFormat dataFormat() {
        return this.inner().dataFormat();
    }

    @Override
    public String eventHubResourceId() {
        return this.inner().eventHubResourceId();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String location() {
        return this.inner().location();
    }

    @Override
    public String mappingRuleName() {
        return this.inner().mappingRuleName();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String tableName() {
        return this.inner().tableName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public EventHubConnectionImpl withExistingDatabasis(String resourceGroupName, String clusterName, String databaseName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        this.databaseName = databaseName;
        return this;
    }

    @Override
    public EventHubConnectionImpl withConsumerGroup(String consumerGroup) {
        this.inner().withConsumerGroup(consumerGroup);
        return this;
    }

    @Override
    public EventHubConnectionImpl withEventHubResourceId(String eventHubResourceId) {
        this.inner().withEventHubResourceId(eventHubResourceId);
        return this;
    }

    @Override
    public EventHubConnectionImpl withDataFormat(DataFormat dataFormat) {
        if (isInCreateMode()) {
            this.inner().withDataFormat(dataFormat);
        } else {
            this.updateParameter.withDataFormat(dataFormat);
        }
        return this;
    }

    @Override
    public EventHubConnectionImpl withLocation(String location) {
        if (isInCreateMode()) {
            this.inner().withLocation(location);
        } else {
            this.updateParameter.withLocation(location);
        }
        return this;
    }

    @Override
    public EventHubConnectionImpl withMappingRuleName(String mappingRuleName) {
        if (isInCreateMode()) {
            this.inner().withMappingRuleName(mappingRuleName);
        } else {
            this.updateParameter.withMappingRuleName(mappingRuleName);
        }
        return this;
    }

    @Override
    public EventHubConnectionImpl withTableName(String tableName) {
        if (isInCreateMode()) {
            this.inner().withTableName(tableName);
        } else {
            this.updateParameter.withTableName(tableName);
        }
        return this;
    }

}
