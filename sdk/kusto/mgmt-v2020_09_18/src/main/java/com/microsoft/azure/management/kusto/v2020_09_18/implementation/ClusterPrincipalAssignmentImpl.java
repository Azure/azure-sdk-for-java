/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2020_09_18.implementation;

import com.microsoft.azure.management.kusto.v2020_09_18.ClusterPrincipalAssignment;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.kusto.v2020_09_18.ClusterPrincipalRole;
import com.microsoft.azure.management.kusto.v2020_09_18.PrincipalType;
import com.microsoft.azure.management.kusto.v2020_09_18.ProvisioningState;

class ClusterPrincipalAssignmentImpl extends CreatableUpdatableImpl<ClusterPrincipalAssignment, ClusterPrincipalAssignmentInner, ClusterPrincipalAssignmentImpl> implements ClusterPrincipalAssignment, ClusterPrincipalAssignment.Definition, ClusterPrincipalAssignment.Update {
    private final KustoManager manager;
    private String resourceGroupName;
    private String clusterName;
    private String principalAssignmentName;

    ClusterPrincipalAssignmentImpl(String name, KustoManager manager) {
        super(name, new ClusterPrincipalAssignmentInner());
        this.manager = manager;
        // Set resource name
        this.principalAssignmentName = name;
        //
    }

    ClusterPrincipalAssignmentImpl(ClusterPrincipalAssignmentInner inner, KustoManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.principalAssignmentName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.clusterName = IdParsingUtils.getValueFromIdByName(inner.id(), "clusters");
        this.principalAssignmentName = IdParsingUtils.getValueFromIdByName(inner.id(), "principalAssignments");
        //
    }

    @Override
    public KustoManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ClusterPrincipalAssignment> createResourceAsync() {
        ClusterPrincipalAssignmentsInner client = this.manager().inner().clusterPrincipalAssignments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.principalAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ClusterPrincipalAssignment> updateResourceAsync() {
        ClusterPrincipalAssignmentsInner client = this.manager().inner().clusterPrincipalAssignments();
        return client.createOrUpdateAsync(this.resourceGroupName, this.clusterName, this.principalAssignmentName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ClusterPrincipalAssignmentInner> getInnerAsync() {
        ClusterPrincipalAssignmentsInner client = this.manager().inner().clusterPrincipalAssignments();
        return client.getAsync(this.resourceGroupName, this.clusterName, this.principalAssignmentName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String principalId() {
        return this.inner().principalId();
    }

    @Override
    public String principalName() {
        return this.inner().principalName();
    }

    @Override
    public PrincipalType principalType() {
        return this.inner().principalType();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public ClusterPrincipalRole role() {
        return this.inner().role();
    }

    @Override
    public String tenantId() {
        return this.inner().tenantId();
    }

    @Override
    public String tenantName() {
        return this.inner().tenantName();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ClusterPrincipalAssignmentImpl withExistingCluster(String resourceGroupName, String clusterName) {
        this.resourceGroupName = resourceGroupName;
        this.clusterName = clusterName;
        return this;
    }

    @Override
    public ClusterPrincipalAssignmentImpl withPrincipalId(String principalId) {
        this.inner().withPrincipalId(principalId);
        return this;
    }

    @Override
    public ClusterPrincipalAssignmentImpl withPrincipalType(PrincipalType principalType) {
        this.inner().withPrincipalType(principalType);
        return this;
    }

    @Override
    public ClusterPrincipalAssignmentImpl withRole(ClusterPrincipalRole role) {
        this.inner().withRole(role);
        return this;
    }

    @Override
    public ClusterPrincipalAssignmentImpl withTenantId(String tenantId) {
        this.inner().withTenantId(tenantId);
        return this;
    }

}
