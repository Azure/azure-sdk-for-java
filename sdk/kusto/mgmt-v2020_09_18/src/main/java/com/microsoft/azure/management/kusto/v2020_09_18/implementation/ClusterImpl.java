/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.kusto.v2020_09_18.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.kusto.v2020_09_18.Cluster;
import rx.Observable;
import com.microsoft.azure.management.kusto.v2020_09_18.ClusterUpdate;
import java.util.List;
import com.microsoft.azure.management.kusto.v2020_09_18.AzureSku;
import com.microsoft.azure.management.kusto.v2020_09_18.Identity;
import com.microsoft.azure.management.kusto.v2020_09_18.State;
import com.microsoft.azure.management.kusto.v2020_09_18.ProvisioningState;
import com.microsoft.azure.management.kusto.v2020_09_18.TrustedExternalTenant;
import com.microsoft.azure.management.kusto.v2020_09_18.OptimizedAutoscale;
import com.microsoft.azure.management.kusto.v2020_09_18.VirtualNetworkConfiguration;
import com.microsoft.azure.management.kusto.v2020_09_18.KeyVaultProperties;
import com.microsoft.azure.management.kusto.v2020_09_18.LanguageExtensionsList;
import com.microsoft.azure.management.kusto.v2020_09_18.EngineType;
import rx.functions.Func1;

class ClusterImpl extends GroupableResourceCoreImpl<Cluster, ClusterInner, ClusterImpl, KustoManager> implements Cluster, Cluster.Definition, Cluster.Update {
    private ClusterUpdate updateParameter;
    ClusterImpl(String name, ClusterInner inner, KustoManager manager) {
        super(name, inner, manager);
        this.updateParameter = new ClusterUpdate();
    }

    @Override
    public Observable<Cluster> createResourceAsync() {
        ClustersInner client = this.manager().inner().clusters();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<ClusterInner, ClusterInner>() {
               @Override
               public ClusterInner call(ClusterInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Cluster> updateResourceAsync() {
        ClustersInner client = this.manager().inner().clusters();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<ClusterInner, ClusterInner>() {
               @Override
               public ClusterInner call(ClusterInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ClusterInner> getInnerAsync() {
        ClustersInner client = this.manager().inner().clusters();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new ClusterUpdate();
    }

    @Override
    public String dataIngestionUri() {
        return this.inner().dataIngestionUri();
    }

    @Override
    public Boolean enableDiskEncryption() {
        return this.inner().enableDiskEncryption();
    }

    @Override
    public Boolean enableDoubleEncryption() {
        return this.inner().enableDoubleEncryption();
    }

    @Override
    public Boolean enablePurge() {
        return this.inner().enablePurge();
    }

    @Override
    public Boolean enableStreamingIngest() {
        return this.inner().enableStreamingIngest();
    }

    @Override
    public EngineType engineType() {
        return this.inner().engineType();
    }

    @Override
    public Identity identity() {
        return this.inner().identity();
    }

    @Override
    public KeyVaultProperties keyVaultProperties() {
        return this.inner().keyVaultProperties();
    }

    @Override
    public LanguageExtensionsList languageExtensions() {
        return this.inner().languageExtensions();
    }

    @Override
    public OptimizedAutoscale optimizedAutoscale() {
        return this.inner().optimizedAutoscale();
    }

    @Override
    public ProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public AzureSku sku() {
        return this.inner().sku();
    }

    @Override
    public State state() {
        return this.inner().state();
    }

    @Override
    public String stateReason() {
        return this.inner().stateReason();
    }

    @Override
    public List<TrustedExternalTenant> trustedExternalTenants() {
        return this.inner().trustedExternalTenants();
    }

    @Override
    public String uri() {
        return this.inner().uri();
    }

    @Override
    public VirtualNetworkConfiguration virtualNetworkConfiguration() {
        return this.inner().virtualNetworkConfiguration();
    }

    @Override
    public List<String> zones() {
        return this.inner().zones();
    }

    @Override
    public ClusterImpl withZones(List<String> zones) {
        this.inner().withZones(zones);
        return this;
    }

    @Override
    public ClusterImpl withSku(AzureSku sku) {
        if (isInCreateMode()) {
            this.inner().withSku(sku);
        } else {
            this.updateParameter.withSku(sku);
        }
        return this;
    }

    @Override
    public ClusterImpl withEnableDiskEncryption(Boolean enableDiskEncryption) {
        if (isInCreateMode()) {
            this.inner().withEnableDiskEncryption(enableDiskEncryption);
        } else {
            this.updateParameter.withEnableDiskEncryption(enableDiskEncryption);
        }
        return this;
    }

    @Override
    public ClusterImpl withEnableDoubleEncryption(Boolean enableDoubleEncryption) {
        if (isInCreateMode()) {
            this.inner().withEnableDoubleEncryption(enableDoubleEncryption);
        } else {
            this.updateParameter.withEnableDoubleEncryption(enableDoubleEncryption);
        }
        return this;
    }

    @Override
    public ClusterImpl withEnablePurge(Boolean enablePurge) {
        if (isInCreateMode()) {
            this.inner().withEnablePurge(enablePurge);
        } else {
            this.updateParameter.withEnablePurge(enablePurge);
        }
        return this;
    }

    @Override
    public ClusterImpl withEnableStreamingIngest(Boolean enableStreamingIngest) {
        if (isInCreateMode()) {
            this.inner().withEnableStreamingIngest(enableStreamingIngest);
        } else {
            this.updateParameter.withEnableStreamingIngest(enableStreamingIngest);
        }
        return this;
    }

    @Override
    public ClusterImpl withEngineType(EngineType engineType) {
        if (isInCreateMode()) {
            this.inner().withEngineType(engineType);
        } else {
            this.updateParameter.withEngineType(engineType);
        }
        return this;
    }

    @Override
    public ClusterImpl withIdentity(Identity identity) {
        if (isInCreateMode()) {
            this.inner().withIdentity(identity);
        } else {
            this.updateParameter.withIdentity(identity);
        }
        return this;
    }

    @Override
    public ClusterImpl withKeyVaultProperties(KeyVaultProperties keyVaultProperties) {
        if (isInCreateMode()) {
            this.inner().withKeyVaultProperties(keyVaultProperties);
        } else {
            this.updateParameter.withKeyVaultProperties(keyVaultProperties);
        }
        return this;
    }

    @Override
    public ClusterImpl withOptimizedAutoscale(OptimizedAutoscale optimizedAutoscale) {
        if (isInCreateMode()) {
            this.inner().withOptimizedAutoscale(optimizedAutoscale);
        } else {
            this.updateParameter.withOptimizedAutoscale(optimizedAutoscale);
        }
        return this;
    }

    @Override
    public ClusterImpl withTrustedExternalTenants(List<TrustedExternalTenant> trustedExternalTenants) {
        if (isInCreateMode()) {
            this.inner().withTrustedExternalTenants(trustedExternalTenants);
        } else {
            this.updateParameter.withTrustedExternalTenants(trustedExternalTenants);
        }
        return this;
    }

    @Override
    public ClusterImpl withVirtualNetworkConfiguration(VirtualNetworkConfiguration virtualNetworkConfiguration) {
        if (isInCreateMode()) {
            this.inner().withVirtualNetworkConfiguration(virtualNetworkConfiguration);
        } else {
            this.updateParameter.withVirtualNetworkConfiguration(virtualNetworkConfiguration);
        }
        return this;
    }

}
