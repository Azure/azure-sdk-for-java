// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub;

import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.DiagnosticConfiguration;
import com.azure.resourcemanager.webpubsub.models.EventHandlerSettings;
import com.azure.resourcemanager.webpubsub.models.EventHandlerTemplate;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentity;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.NetworkAcl;
import com.azure.resourcemanager.webpubsub.models.PrivateEndpointAcl;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubNetworkACLs;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import com.azure.resourcemanager.webpubsub.models.WebPubSubTlsSettings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for WebPubSub CreateOrUpdate. */
public final class WebPubSubCreateOrUpdateSamples {
    /**
     * Sample code: WebPubSub_CreateOrUpdate.
     *
     * @param webPubSubManager Entry point to WebPubSubManager. REST API for Azure WebPubSub Service.
     */
    public static void webPubSubCreateOrUpdate(com.azure.resourcemanager.webpubsub.WebPubSubManager webPubSubManager) {
        webPubSubManager
            .webPubSubs()
            .define("myWebPubSubService")
            .withRegion("eastus")
            .withExistingResourceGroup("myResourceGroup")
            .withTags(mapOf("key1", "value1"))
            .withSku(new ResourceSku().withName("Standard_S1").withTier(WebPubSubSkuTier.STANDARD).withCapacity(1))
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED))
            .withTls(new WebPubSubTlsSettings().withClientCertEnabled(false))
            .withDiagnosticConfiguration(
                new DiagnosticConfiguration()
                    .withEnableConnectivityLogs("Disabled")
                    .withEnableMessagingLogs("Disabled")
                    .withEnableLiveTrace("Disabled"))
            .withEventHandler(
                new EventHandlerSettings()
                    .withItems(
                        mapOf(
                            "hub1",
                            Arrays
                                .asList(
                                    new EventHandlerTemplate()
                                        .withUrlTemplate("https://example.com/chat/api/hub1")
                                        .withUserEventPattern("*")),
                            "hub2",
                            Arrays
                                .asList(
                                    new EventHandlerTemplate()
                                        .withUrlTemplate("https://example.com/chat/api/hub2/example1")
                                        .withUserEventPattern("example1"),
                                    new EventHandlerTemplate()
                                        .withUrlTemplate("https://example.com/chat/api/hub2/example2")
                                        .withUserEventPattern("example2")))))
            .withNetworkACLs(
                new WebPubSubNetworkACLs()
                    .withDefaultAction(AclAction.DENY)
                    .withPublicNetwork(
                        new NetworkAcl().withAllow(Arrays.asList(WebPubSubRequestType.CLIENT_CONNECTION)))
                    .withPrivateEndpoints(
                        Arrays
                            .asList(
                                new PrivateEndpointAcl()
                                    .withAllow(Arrays.asList(WebPubSubRequestType.SERVER_CONNECTION))
                                    .withName("mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e"))))
            .withPublicNetworkAccess("Enabled")
            .withDisableLocalAuth(false)
            .withDisableAadAuth(false)
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
