// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.webpubsub.models.PrivateEndpoint;
import com.azure.resourcemanager.webpubsub.models.PrivateLinkServiceConnectionState;
import com.azure.resourcemanager.webpubsub.models.PrivateLinkServiceConnectionStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class PrivateEndpointConnectionInnerTests {
    @Test
    public void testDeserialize() {
        PrivateEndpointConnectionInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"provisioningState\":\"Moving\",\"privateEndpoint\":{\"id\":\"debfqkkrbmpukgri\"},\"groupIds\":[\"zlfbxzpuzycispnq\",\"ahmgkbrp\",\"y\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"uqqkpik\",\"actionsRequired\":\"rgvtqag\"}},\"id\":\"buynhijggm\",\"name\":\"bfs\",\"type\":\"arbu\"}")
                .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("debfqkkrbmpukgri", model.privateEndpoint().id());
        Assertions
            .assertEquals(
                PrivateLinkServiceConnectionStatus.REJECTED, model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("uqqkpik", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("rgvtqag", model.privateLinkServiceConnectionState().actionsRequired());
    }

    @Test
    public void testSerialize() {
        PrivateEndpointConnectionInner model =
            new PrivateEndpointConnectionInner()
                .withPrivateEndpoint(new PrivateEndpoint().withId("debfqkkrbmpukgri"))
                .withPrivateLinkServiceConnectionState(
                    new PrivateLinkServiceConnectionState()
                        .withStatus(PrivateLinkServiceConnectionStatus.REJECTED)
                        .withDescription("uqqkpik")
                        .withActionsRequired("rgvtqag"));
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("debfqkkrbmpukgri", model.privateEndpoint().id());
        Assertions
            .assertEquals(
                PrivateLinkServiceConnectionStatus.REJECTED, model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("uqqkpik", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("rgvtqag", model.privateLinkServiceConnectionState().actionsRequired());
    }
}
