// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.ServiceKind;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubResource;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WebPubSubsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"name\":\"kk\",\"tier\":\"Standard\",\"size\":\"rtkgdojbmxvavref\",\"family\":\"esvecuijpx\",\"capacity\":214563643},\"properties\":{\"provisioningState\":\"Running\",\"externalIP\":\"tujwsawdd\",\"hostName\":\"babxvitit\",\"publicPort\":1297733750,\"serverPort\":1671083084,\"version\":\"avoxtfg\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{},\"groupIds\":[\"pypqtgsfj\",\"cbslhhx\",\"db\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"d\",\"name\":\"tnsi\",\"type\":\"ud\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"es\",\"privateLinkResourceId\":\"kdlpa\",\"provisioningState\":\"Failed\",\"requestMessage\":\"x\",\"status\":\"Rejected\"},\"id\":\"cfxwmdbox\",\"name\":\"fgsftufqob\",\"type\":\"jln\"}],\"tls\":{\"clientCertEnabled\":false},\"hostNamePrefix\":\"kknhxkizvytnrzv\",\"liveTraceConfiguration\":{\"enabled\":\"r\",\"categories\":[{\"name\":\"anokqgu\",\"enabled\":\"jqnv\"},{\"name\":\"oylaxxul\",\"enabled\":\"isdos\"},{\"name\":\"b\",\"enabled\":\"vgjrwhr\"},{\"name\":\"ycy\",\"enabled\":\"c\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"knfnwmbtmvpdv\",\"enabled\":\"httz\"},{\"name\":\"fedxihchrphkm\",\"enabled\":\"jdqnsdfzpbgt\"},{\"name\":\"ylkdghrje\",\"enabled\":\"tl\"},{\"name\":\"ez\",\"enabled\":\"hokvbwnh\"}]},\"networkACLs\":{\"defaultAction\":\"Allow\",\"publicNetwork\":{\"allow\":[\"ServerConnection\",\"RESTAPI\",\"ServerConnection\",\"Trace\"],\"deny\":[\"Trace\",\"Trace\"]},\"privateEndpoints\":[{\"name\":\"e\",\"allow\":[\"ServerConnection\",\"ServerConnection\"],\"deny\":[\"Trace\"]}],\"ipRules\":[{\"value\":\"sheafid\",\"action\":\"Deny\"},{\"value\":\"sr\",\"action\":\"Allow\"},{\"value\":\"ssjhoiftxfkf\",\"action\":\"Allow\"}]},\"publicNetworkAccess\":\"rhptilluc\",\"disableLocalAuth\":true,\"disableAadAuth\":false,\"regionEndpointEnabled\":\"q\",\"resourceStopped\":\"mcwsldrizetpwb\"},\"kind\":\"WebPubSub\",\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"oylhjlmuoyxprimr\":{\"principalId\":\"bqzmizaka\",\"clientId\":\"nkjpdnjzha\"},\"vasylwxdzau\":{\"principalId\":\"pteecjme\",\"clientId\":\"ls\"}},\"principalId\":\"eoohguufuzboyj\",\"tenantId\":\"hwtzolb\"},\"location\":\"mwmdxmebwjscjpa\",\"tags\":{\"yijddtvqcttad\":\"veabfqxnmwmqtib\",\"zaapmudqmeqwi\":\"jaeukmrsieekpn\"},\"id\":\"pibudqwyxebeybpm\",\"name\":\"znrtffyaqit\",\"type\":\"hheioqaqhvseuf\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WebPubSubManager manager =
            WebPubSubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        WebPubSubResource response =
            manager
                .webPubSubs()
                .getByResourceGroupWithResponse("ktp", "ymerteeammxq", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("mwmdxmebwjscjpa", response.location());
        Assertions.assertEquals("veabfqxnmwmqtib", response.tags().get("yijddtvqcttad"));
        Assertions.assertEquals("kk", response.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals(214563643, response.sku().capacity());
        Assertions.assertEquals(ServiceKind.WEB_PUB_SUB, response.kind());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.identity().type());
        Assertions.assertEquals(false, response.tls().clientCertEnabled());
        Assertions.assertEquals("r", response.liveTraceConfiguration().enabled());
        Assertions.assertEquals("anokqgu", response.liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("jqnv", response.liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("knfnwmbtmvpdv", response.resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("httz", response.resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.ALLOW, response.networkACLs().defaultAction());
        Assertions
            .assertEquals(
                WebPubSubRequestType.SERVER_CONNECTION, response.networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(WebPubSubRequestType.TRACE, response.networkACLs().publicNetwork().deny().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.SERVER_CONNECTION,
                response.networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions
            .assertEquals(WebPubSubRequestType.TRACE, response.networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("e", response.networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("sheafid", response.networkACLs().ipRules().get(0).value());
        Assertions.assertEquals(AclAction.DENY, response.networkACLs().ipRules().get(0).action());
        Assertions.assertEquals("rhptilluc", response.publicNetworkAccess());
        Assertions.assertEquals(true, response.disableLocalAuth());
        Assertions.assertEquals(false, response.disableAadAuth());
        Assertions.assertEquals("q", response.regionEndpointEnabled());
        Assertions.assertEquals("mcwsldrizetpwb", response.resourceStopped());
    }
}
