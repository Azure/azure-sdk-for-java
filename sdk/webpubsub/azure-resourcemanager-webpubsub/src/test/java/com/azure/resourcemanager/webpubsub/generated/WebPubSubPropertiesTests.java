// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.WebPubSubProperties;
import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.IpRule;
import com.azure.resourcemanager.webpubsub.models.LiveTraceCategory;
import com.azure.resourcemanager.webpubsub.models.LiveTraceConfiguration;
import com.azure.resourcemanager.webpubsub.models.NetworkAcl;
import com.azure.resourcemanager.webpubsub.models.PrivateEndpointAcl;
import com.azure.resourcemanager.webpubsub.models.ResourceLogCategory;
import com.azure.resourcemanager.webpubsub.models.ResourceLogConfiguration;
import com.azure.resourcemanager.webpubsub.models.WebPubSubNetworkACLs;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubTlsSettings;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WebPubSubPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WebPubSubProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Updating\",\"externalIP\":\"yuq\",\"hostName\":\"pqlpq\",\"publicPort\":1951399012,\"serverPort\":1475911208,\"version\":\"gbdbutauv\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{\"id\":\"mhykojoxafnndl\"},\"groupIds\":[\"hkoymkcdyhbp\",\"kpw\",\"reqnovvqfov\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"suwsyrsnds\",\"actionsRequired\":\"g\"}},\"id\":\"gvraeaen\",\"name\":\"qnzarrwl\",\"type\":\"uu\"},{\"properties\":{\"provisioningState\":\"Running\",\"privateEndpoint\":{\"id\":\"cewiipfpub\"},\"groupIds\":[\"wwiftohqkvpuv\",\"sgplsakn\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"n\",\"actionsRequired\":\"ph\"}},\"id\":\"pxodlqiyntorzih\",\"name\":\"eosjswsr\",\"type\":\"slyzrpzbchckqq\"},{\"properties\":{\"provisioningState\":\"Updating\",\"privateEndpoint\":{\"id\":\"ysuiizynkedya\"},\"groupIds\":[\"yhqmibzyhwi\",\"smypyynpc\",\"pumnz\",\"mwzn\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"nsorgjhxbldt\",\"actionsRequired\":\"wrlkdmtn\"}},\"id\":\"ok\",\"name\":\"tllxdyhgsyocogj\",\"type\":\"tdtbnnhadooc\"},{\"properties\":{\"provisioningState\":\"Updating\",\"privateEndpoint\":{\"id\":\"hnvpamqgxq\"},\"groupIds\":[\"zikywgg\",\"kallatmel\",\"uipiccjzk\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"vc\",\"actionsRequired\":\"y\"}},\"id\":\"yrnxxmueedn\",\"name\":\"rdvstkwqqtch\",\"type\":\"alm\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"aayg\",\"privateLinkResourceId\":\"v\",\"provisioningState\":\"Moving\",\"requestMessage\":\"iohgwxrtfud\",\"status\":\"Disconnected\"},\"id\":\"gyqagvrvmnpkuk\",\"name\":\"himdbl\",\"type\":\"gwimfn\"},{\"properties\":{\"groupId\":\"fjxwmsz\",\"privateLinkResourceId\":\"kfoqreyfkzikfj\",\"provisioningState\":\"Canceled\",\"requestMessage\":\"a\",\"status\":\"Timeout\"},\"id\":\"czelpcirel\",\"name\":\"feaenwab\",\"type\":\"atklddxbjhwuaa\"},{\"properties\":{\"groupId\":\"zjosp\",\"privateLinkResourceId\":\"youlp\",\"provisioningState\":\"Creating\",\"requestMessage\":\"ag\",\"status\":\"Disconnected\"},\"id\":\"mjwosytx\",\"name\":\"tcs\",\"type\":\"fcktqumiekke\"}],\"tls\":{\"clientCertEnabled\":false},\"hostNamePrefix\":\"ly\",\"liveTraceConfiguration\":{\"enabled\":\"dgqggebdu\",\"categories\":[{\"name\":\"eqidbqfatpx\",\"enabled\":\"rxcyjmoad\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"m\",\"enabled\":\"dmjsjqb\"}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"Trace\"],\"deny\":[\"ClientConnection\"]},\"privateEndpoints\":[{\"name\":\"uhpkxkgymar\",\"allow\":[\"ClientConnection\"],\"deny\":[\"RESTAPI\",\"ServerConnection\",\"RESTAPI\",\"ServerConnection\"]},{\"name\":\"hky\",\"allow\":[\"RESTAPI\",\"ClientConnection\",\"Trace\"],\"deny\":[\"Trace\",\"ClientConnection\",\"RESTAPI\"]}],\"ipRules\":[{\"value\":\"zqalkrmnjijpx\",\"action\":\"Allow\"},{\"value\":\"udfnbyxba\",\"action\":\"Allow\"},{\"value\":\"yvayffimrzr\",\"action\":\"Allow\"},{\"value\":\"ogs\",\"action\":\"Allow\"}]},\"publicNetworkAccess\":\"vfdnwnwmewzsyyce\",\"disableLocalAuth\":true,\"disableAadAuth\":false,\"regionEndpointEnabled\":\"judpfrxt\",\"resourceStopped\":\"hzv\"}")
                .toObject(WebPubSubProperties.class);
        Assertions.assertEquals(false, model.tls().clientCertEnabled());
        Assertions.assertEquals("dgqggebdu", model.liveTraceConfiguration().enabled());
        Assertions.assertEquals("eqidbqfatpx", model.liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("rxcyjmoad", model.liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("m", model.resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("dmjsjqb", model.resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.DENY, model.networkACLs().defaultAction());
        Assertions.assertEquals(WebPubSubRequestType.TRACE, model.networkACLs().publicNetwork().allow().get(0));
        Assertions
            .assertEquals(WebPubSubRequestType.CLIENT_CONNECTION, model.networkACLs().publicNetwork().deny().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.CLIENT_CONNECTION, model.networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions
            .assertEquals(WebPubSubRequestType.RESTAPI, model.networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("uhpkxkgymar", model.networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("zqalkrmnjijpx", model.networkACLs().ipRules().get(0).value());
        Assertions.assertEquals(AclAction.ALLOW, model.networkACLs().ipRules().get(0).action());
        Assertions.assertEquals("vfdnwnwmewzsyyce", model.publicNetworkAccess());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(false, model.disableAadAuth());
        Assertions.assertEquals("judpfrxt", model.regionEndpointEnabled());
        Assertions.assertEquals("hzv", model.resourceStopped());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WebPubSubProperties model =
            new WebPubSubProperties()
                .withTls(new WebPubSubTlsSettings().withClientCertEnabled(false))
                .withLiveTraceConfiguration(
                    new LiveTraceConfiguration()
                        .withEnabled("dgqggebdu")
                        .withCategories(
                            Arrays.asList(new LiveTraceCategory().withName("eqidbqfatpx").withEnabled("rxcyjmoad"))))
                .withResourceLogConfiguration(
                    new ResourceLogConfiguration()
                        .withCategories(Arrays.asList(new ResourceLogCategory().withName("m").withEnabled("dmjsjqb"))))
                .withNetworkACLs(
                    new WebPubSubNetworkACLs()
                        .withDefaultAction(AclAction.DENY)
                        .withPublicNetwork(
                            new NetworkAcl()
                                .withAllow(Arrays.asList(WebPubSubRequestType.TRACE))
                                .withDeny(Arrays.asList(WebPubSubRequestType.CLIENT_CONNECTION)))
                        .withPrivateEndpoints(
                            Arrays
                                .asList(
                                    new PrivateEndpointAcl()
                                        .withAllow(Arrays.asList(WebPubSubRequestType.CLIENT_CONNECTION))
                                        .withDeny(
                                            Arrays
                                                .asList(
                                                    WebPubSubRequestType.RESTAPI,
                                                    WebPubSubRequestType.SERVER_CONNECTION,
                                                    WebPubSubRequestType.RESTAPI,
                                                    WebPubSubRequestType.SERVER_CONNECTION))
                                        .withName("uhpkxkgymar"),
                                    new PrivateEndpointAcl()
                                        .withAllow(
                                            Arrays
                                                .asList(
                                                    WebPubSubRequestType.RESTAPI,
                                                    WebPubSubRequestType.CLIENT_CONNECTION,
                                                    WebPubSubRequestType.TRACE))
                                        .withDeny(
                                            Arrays
                                                .asList(
                                                    WebPubSubRequestType.TRACE,
                                                    WebPubSubRequestType.CLIENT_CONNECTION,
                                                    WebPubSubRequestType.RESTAPI))
                                        .withName("hky")))
                        .withIpRules(
                            Arrays
                                .asList(
                                    new IpRule().withValue("zqalkrmnjijpx").withAction(AclAction.ALLOW),
                                    new IpRule().withValue("udfnbyxba").withAction(AclAction.ALLOW),
                                    new IpRule().withValue("yvayffimrzr").withAction(AclAction.ALLOW),
                                    new IpRule().withValue("ogs").withAction(AclAction.ALLOW))))
                .withPublicNetworkAccess("vfdnwnwmewzsyyce")
                .withDisableLocalAuth(true)
                .withDisableAadAuth(false)
                .withRegionEndpointEnabled("judpfrxt")
                .withResourceStopped("hzv");
        model = BinaryData.fromObject(model).toObject(WebPubSubProperties.class);
        Assertions.assertEquals(false, model.tls().clientCertEnabled());
        Assertions.assertEquals("dgqggebdu", model.liveTraceConfiguration().enabled());
        Assertions.assertEquals("eqidbqfatpx", model.liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("rxcyjmoad", model.liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("m", model.resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("dmjsjqb", model.resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.DENY, model.networkACLs().defaultAction());
        Assertions.assertEquals(WebPubSubRequestType.TRACE, model.networkACLs().publicNetwork().allow().get(0));
        Assertions
            .assertEquals(WebPubSubRequestType.CLIENT_CONNECTION, model.networkACLs().publicNetwork().deny().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.CLIENT_CONNECTION, model.networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions
            .assertEquals(WebPubSubRequestType.RESTAPI, model.networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("uhpkxkgymar", model.networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("zqalkrmnjijpx", model.networkACLs().ipRules().get(0).value());
        Assertions.assertEquals(AclAction.ALLOW, model.networkACLs().ipRules().get(0).action());
        Assertions.assertEquals("vfdnwnwmewzsyyce", model.publicNetworkAccess());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(false, model.disableAadAuth());
        Assertions.assertEquals("judpfrxt", model.regionEndpointEnabled());
        Assertions.assertEquals("hzv", model.resourceStopped());
    }
}
