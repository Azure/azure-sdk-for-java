// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.ServiceKind;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubResource;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WebPubSubsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"bugrj\",\"tier\":\"Free\",\"size\":\"jc\",\"family\":\"sofieypefojyqd\",\"capacity\":219137261},\"properties\":{\"provisioningState\":\"Succeeded\",\"externalIP\":\"lcwkhihihlhz\",\"hostName\":\"qtz\",\"publicPort\":693588960,\"serverPort\":1050448632,\"version\":\"wcjhfgmv\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Running\",\"privateEndpoint\":{},\"groupIds\":[\"teyowclu\",\"ovekqvgqouwi\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"pjwyiv\",\"name\":\"ikf\",\"type\":\"cvhrfsp\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{},\"groupIds\":[\"ikteusqczkvyk\",\"xubyjaffmmfblcqc\",\"ubgq\",\"brta\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"tttwgdslqxih\",\"name\":\"rmooizqse\",\"type\":\"pxiutc\"},{\"properties\":{\"provisioningState\":\"Failed\",\"privateEndpoint\":{},\"groupIds\":[\"petogebjox\",\"lhvnhlab\",\"q\",\"kkzjcjbtrga\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"vibr\",\"name\":\"jj\",\"type\":\"toqbeitpkxztmoob\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"privateEndpoint\":{},\"groupIds\":[\"fc\",\"qmpimaqxzhem\",\"yhohujswtwkozzwc\",\"lkb\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"fajnjwltlwtjjguk\",\"name\":\"alhsnvkc\",\"type\":\"mxzrpoa\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"wiaaomylweaz\",\"privateLinkResourceId\":\"lcsethwwnpj\",\"provisioningState\":\"Failed\",\"requestMessage\":\"swpchwahfbousn\",\"status\":\"Pending\"},\"id\":\"fewetwlyxgncx\",\"name\":\"kxhdjhlimmbcx\",\"type\":\"h\"},{\"properties\":{\"groupId\":\"po\",\"privateLinkResourceId\":\"xvxcjzhq\",\"provisioningState\":\"Moving\",\"requestMessage\":\"pxtgqscjav\",\"status\":\"Pending\"},\"id\":\"hdqazkmtgguwp\",\"name\":\"jrajcivm\",\"type\":\"ghfcfiwrxgkneuvy\"},{\"properties\":{\"groupId\":\"zqodfvpgshox\",\"privateLinkResourceId\":\"sgbpfgzdjtx\",\"provisioningState\":\"Creating\",\"requestMessage\":\"bqvgaqv\",\"status\":\"Approved\"},\"id\":\"cqusr\",\"name\":\"vetnwsdtutn\",\"type\":\"lduycv\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"mewip\",\"liveTraceConfiguration\":{\"enabled\":\"k\",\"categories\":[{\"name\":\"uqgsj\",\"enabled\":\"undxgketw\"},{\"name\":\"hzjhf\",\"enabled\":\"hvvmuvgpmun\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"mhfbuzjy\",\"enabled\":\"sasbhu\"},{\"name\":\"pohyuemslynsqyr\",\"enabled\":\"oobrlttyms\"}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"ServerConnection\",\"Trace\",\"ClientConnection\",\"Trace\"],\"deny\":[\"ServerConnection\",\"ServerConnection\"]},\"privateEndpoints\":[{\"name\":\"axhnfh\",\"allow\":[\"ClientConnection\"],\"deny\":[\"Trace\"]}],\"ipRules\":[{\"value\":\"vk\",\"action\":\"Deny\"},{\"value\":\"un\",\"action\":\"Allow\"}]},\"publicNetworkAccess\":\"rtikvcpwpg\",\"disableLocalAuth\":false,\"disableAadAuth\":true,\"regionEndpointEnabled\":\"tso\",\"resourceStopped\":\"rkenx\",\"socketIO\":{\"serviceMode\":\"yefrpmpdnqqska\"}},\"kind\":\"WebPubSub\",\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"rfe\":{\"principalId\":\"pqfrtqlkz\",\"clientId\":\"gnitgvkxlzyq\"},\"bkbxgomfa\":{\"principalId\":\"ealzxwhcansymoyq\",\"clientId\":\"wigdi\"},\"zbezkgimsidxasic\":{\"principalId\":\"wasqvdaeyyg\",\"clientId\":\"akjsqz\"},\"qgatjeaahhvjhhn\":{\"principalId\":\"yvvjskgfmo\",\"clientId\":\"ah\"}},\"principalId\":\"zybbj\",\"tenantId\":\"dj\"},\"location\":\"yxkyxvx\",\"tags\":{\"dnlj\":\"lbj\",\"aulx\":\"age\"},\"id\":\"nsmjbnkppxynen\",\"name\":\"svxeizzgwklnsr\",\"type\":\"ffeycx\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WebPubSubManager manager = WebPubSubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WebPubSubResource> response = manager.webPubSubs().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yxkyxvx", response.iterator().next().location());
        Assertions.assertEquals("lbj", response.iterator().next().tags().get("dnlj"));
        Assertions.assertEquals("bugrj", response.iterator().next().sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.FREE, response.iterator().next().sku().tier());
        Assertions.assertEquals(219137261, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ServiceKind.WEB_PUB_SUB, response.iterator().next().kind());
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(true, response.iterator().next().tls().clientCertEnabled());
        Assertions.assertEquals("k", response.iterator().next().liveTraceConfiguration().enabled());
        Assertions.assertEquals("uqgsj",
            response.iterator().next().liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("undxgketw",
            response.iterator().next().liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("mhfbuzjy",
            response.iterator().next().resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("sasbhu",
            response.iterator().next().resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.DENY, response.iterator().next().networkACLs().defaultAction());
        Assertions.assertEquals(WebPubSubRequestType.SERVER_CONNECTION,
            response.iterator().next().networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(WebPubSubRequestType.SERVER_CONNECTION,
            response.iterator().next().networkACLs().publicNetwork().deny().get(0));
        Assertions.assertEquals(WebPubSubRequestType.CLIENT_CONNECTION,
            response.iterator().next().networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions.assertEquals(WebPubSubRequestType.TRACE,
            response.iterator().next().networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("axhnfh", response.iterator().next().networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("vk", response.iterator().next().networkACLs().ipRules().get(0).value());
        Assertions.assertEquals(AclAction.DENY, response.iterator().next().networkACLs().ipRules().get(0).action());
        Assertions.assertEquals("rtikvcpwpg", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().disableAadAuth());
        Assertions.assertEquals("tso", response.iterator().next().regionEndpointEnabled());
        Assertions.assertEquals("rkenx", response.iterator().next().resourceStopped());
        Assertions.assertEquals("yefrpmpdnqqska", response.iterator().next().socketIO().serviceMode());
    }
}
