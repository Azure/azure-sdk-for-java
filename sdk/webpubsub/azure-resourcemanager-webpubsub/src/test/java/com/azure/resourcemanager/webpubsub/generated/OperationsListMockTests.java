// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.Operation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"jlxr\",\"isDataAction\":true,\"display\":{\"provider\":\"apeewchpxlkt\",\"resource\":\"uziycsl\",\"operation\":\"ufuztcktyhjtq\",\"description\":\"cgzulwmmrqzzr\"},\"origin\":\"vpglydz\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"ev\",\"displayName\":\"epr\",\"displayDescription\":\"t\",\"unit\":\"ytp\",\"aggregationType\":\"mov\",\"fillGapWithZero\":\"fvaawzqa\",\"category\":\"lgzurig\",\"dimensions\":[{}]},{\"name\":\"xndticokpvzmlqtm\",\"displayName\":\"gxobfirclnp\",\"displayDescription\":\"iayz\",\"unit\":\"ykhyawfvjlboxqvk\",\"aggregationType\":\"mxho\",\"fillGapWithZero\":\"ynhdwdigum\",\"category\":\"raauzzpt\",\"dimensions\":[{},{}]}],\"logSpecifications\":[{\"name\":\"zhezwwvaiq\",\"displayName\":\"vv\"},{\"name\":\"nk\",\"displayName\":\"hqyikvy\"}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WebPubSubManager manager =
            WebPubSubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jlxr", response.iterator().next().name());
        Assertions.assertEquals(true, response.iterator().next().isDataAction());
        Assertions.assertEquals("apeewchpxlkt", response.iterator().next().display().provider());
        Assertions.assertEquals("uziycsl", response.iterator().next().display().resource());
        Assertions.assertEquals("ufuztcktyhjtq", response.iterator().next().display().operation());
        Assertions.assertEquals("cgzulwmmrqzzr", response.iterator().next().display().description());
        Assertions.assertEquals("vpglydz", response.iterator().next().origin());
        Assertions
            .assertEquals(
                "ev",
                response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions
            .assertEquals(
                "epr",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .displayName());
        Assertions
            .assertEquals(
                "t",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .displayDescription());
        Assertions
            .assertEquals(
                "ytp",
                response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions
            .assertEquals(
                "mov",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .aggregationType());
        Assertions
            .assertEquals(
                "fvaawzqa",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .fillGapWithZero());
        Assertions
            .assertEquals(
                "lgzurig",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .category());
        Assertions
            .assertEquals(
                "zhezwwvaiq",
                response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions
            .assertEquals(
                "vv",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .logSpecifications()
                    .get(0)
                    .displayName());
    }
}
