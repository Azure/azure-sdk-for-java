// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.Operation;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"name\":\"vv\",\"isDataAction\":false,\"display\":{\"provider\":\"hhqyi\",\"resource\":\"y\",\"operation\":\"uyav\",\"description\":\"wmn\"},\"origin\":\"ttijfybvpoekrs\",\"properties\":{\"serviceSpecification\":{\"metricSpecifications\":[{\"name\":\"uzqgnjdgkynsc\",\"displayName\":\"qhzvhxnkomt\",\"displayDescription\":\"bo\",\"unit\":\"pnvdxz\",\"aggregationType\":\"ihfrbbcevqa\",\"fillGapWithZero\":\"ltd\",\"category\":\"fkqojpy\",\"dimensions\":[{}]},{\"name\":\"rdcnifmzzsdy\",\"displayName\":\"rnysux\",\"displayDescription\":\"rafwgckhocxvdf\",\"unit\":\"wafqroud\",\"aggregationType\":\"pavehhr\",\"fillGapWithZero\":\"bunzozudh\",\"category\":\"gkmoyxcdyuibhmfd\",\"dimensions\":[{},{}]},{\"name\":\"dvfvfcjnaeoi\",\"displayName\":\"vhmgorffukis\",\"displayDescription\":\"w\",\"unit\":\"hwplefaxvx\",\"aggregationType\":\"cbtgnhnz\",\"fillGapWithZero\":\"qxtjjfzqlqhyca\",\"category\":\"dggxdbeesmi\",\"dimensions\":[{},{},{},{}]}],\"logSpecifications\":[{\"name\":\"riaa\",\"displayName\":\"uagydwqfbylyrf\"}]}}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WebPubSubManager manager = WebPubSubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("vv", response.iterator().next().name());
        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("hhqyi", response.iterator().next().display().provider());
        Assertions.assertEquals("y", response.iterator().next().display().resource());
        Assertions.assertEquals("uyav", response.iterator().next().display().operation());
        Assertions.assertEquals("wmn", response.iterator().next().display().description());
        Assertions.assertEquals("ttijfybvpoekrs", response.iterator().next().origin());
        Assertions.assertEquals("uzqgnjdgkynsc",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions.assertEquals("qhzvhxnkomt",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).displayName());
        Assertions.assertEquals("bo",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .displayDescription());
        Assertions.assertEquals("pnvdxz",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions.assertEquals("ihfrbbcevqa",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .aggregationType());
        Assertions.assertEquals("ltd",
            response.iterator()
                .next()
                .properties()
                .serviceSpecification()
                .metricSpecifications()
                .get(0)
                .fillGapWithZero());
        Assertions.assertEquals("fkqojpy",
            response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).category());
        Assertions.assertEquals("riaa",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions.assertEquals("uagydwqfbylyrf",
            response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).displayName());
    }
}
