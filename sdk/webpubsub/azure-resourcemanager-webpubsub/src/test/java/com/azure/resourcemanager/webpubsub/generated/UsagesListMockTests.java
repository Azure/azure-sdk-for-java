// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.SignalRServiceUsage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"id\":\"sxjb\",\"currentValue\":4851960046016392272,\"limit\":3068254664144085762,\"name\":{\"value\":\"zjqatucoig\",\"localizedValue\":\"xncnwfe\"},\"unit\":\"nwgfmxjgcgbjbgd\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WebPubSubManager manager = WebPubSubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SignalRServiceUsage> response
            = manager.usages().list("uewmrswnjlxuzrhw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sxjb", response.iterator().next().id());
        Assertions.assertEquals(4851960046016392272L, response.iterator().next().currentValue());
        Assertions.assertEquals(3068254664144085762L, response.iterator().next().limit());
        Assertions.assertEquals("zjqatucoig", response.iterator().next().name().value());
        Assertions.assertEquals("xncnwfe", response.iterator().next().name().localizedValue());
        Assertions.assertEquals("nwgfmxjgcgbjbgd", response.iterator().next().unit());
    }
}
