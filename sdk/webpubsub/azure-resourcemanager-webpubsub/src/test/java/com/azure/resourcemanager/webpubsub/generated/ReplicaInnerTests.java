// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.ReplicaInner;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaInner model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"rxkpmloazuruoc\",\"tier\":\"Free\",\"size\":\"rb\",\"family\":\"oybfhjxakvvj\",\"capacity\":1902606328},\"properties\":{\"provisioningState\":\"Updating\"},\"location\":\"lmywwtkgkxnyed\",\"tags\":{\"xuuwhcj\":\"yvudtjuewbci\",\"akkud\":\"xccybvpa\",\"wjplma\":\"px\"},\"id\":\"stcyohpfkyrkdbd\",\"name\":\"iogsjkmnwq\",\"type\":\"nobaiyhddviacegf\"}")
                .toObject(ReplicaInner.class);
        Assertions.assertEquals("lmywwtkgkxnyed", model.location());
        Assertions.assertEquals("yvudtjuewbci", model.tags().get("xuuwhcj"));
        Assertions.assertEquals("rxkpmloazuruoc", model.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.FREE, model.sku().tier());
        Assertions.assertEquals(1902606328, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaInner model =
            new ReplicaInner()
                .withLocation("lmywwtkgkxnyed")
                .withTags(mapOf("xuuwhcj", "yvudtjuewbci", "akkud", "xccybvpa", "wjplma", "px"))
                .withSku(
                    new ResourceSku()
                        .withName("rxkpmloazuruoc")
                        .withTier(WebPubSubSkuTier.FREE)
                        .withCapacity(1902606328));
        model = BinaryData.fromObject(model).toObject(ReplicaInner.class);
        Assertions.assertEquals("lmywwtkgkxnyed", model.location());
        Assertions.assertEquals("yvudtjuewbci", model.tags().get("xuuwhcj"));
        Assertions.assertEquals("rxkpmloazuruoc", model.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.FREE, model.sku().tier());
        Assertions.assertEquals(1902606328, model.sku().capacity());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
