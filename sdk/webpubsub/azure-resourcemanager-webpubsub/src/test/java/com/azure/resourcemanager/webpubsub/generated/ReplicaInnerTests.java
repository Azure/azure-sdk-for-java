// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.ReplicaInner;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaInner model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"rnxrxcpj\",\"tier\":\"Standard\",\"size\":\"vokqdzfv\",\"family\":\"ivjlfrqttbajlka\",\"capacity\":764088106},\"properties\":{\"provisioningState\":\"Canceled\",\"regionEndpointEnabled\":\"pidkqqfkuvscxkdm\",\"resourceStopped\":\"govibrxkpmloazu\"},\"location\":\"ocbgoorbteoyb\",\"tags\":{\"il\":\"xakvvjgslor\",\"t\":\"yw\"},\"id\":\"gkxnyedabg\",\"name\":\"vudtjuewbcihx\",\"type\":\"uwhcjyxccybv\"}")
            .toObject(ReplicaInner.class);
        Assertions.assertEquals("ocbgoorbteoyb", model.location());
        Assertions.assertEquals("xakvvjgslor", model.tags().get("il"));
        Assertions.assertEquals("rnxrxcpj", model.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals(764088106, model.sku().capacity());
        Assertions.assertEquals("pidkqqfkuvscxkdm", model.regionEndpointEnabled());
        Assertions.assertEquals("govibrxkpmloazu", model.resourceStopped());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaInner model = new ReplicaInner().withLocation("ocbgoorbteoyb")
            .withTags(mapOf("il", "xakvvjgslor", "t", "yw"))
            .withSku(new ResourceSku().withName("rnxrxcpj").withTier(WebPubSubSkuTier.STANDARD).withCapacity(764088106))
            .withRegionEndpointEnabled("pidkqqfkuvscxkdm")
            .withResourceStopped("govibrxkpmloazu");
        model = BinaryData.fromObject(model).toObject(ReplicaInner.class);
        Assertions.assertEquals("ocbgoorbteoyb", model.location());
        Assertions.assertEquals("xakvvjgslor", model.tags().get("il"));
        Assertions.assertEquals("rnxrxcpj", model.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.STANDARD, model.sku().tier());
        Assertions.assertEquals(764088106, model.sku().capacity());
        Assertions.assertEquals("pidkqqfkuvscxkdm", model.regionEndpointEnabled());
        Assertions.assertEquals("govibrxkpmloazu", model.resourceStopped());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
