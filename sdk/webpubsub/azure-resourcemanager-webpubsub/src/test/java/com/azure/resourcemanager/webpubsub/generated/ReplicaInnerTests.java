// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.ReplicaInner;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaInner model =
            BinaryData
                .fromString(
                    "{\"sku\":{\"name\":\"icc\",\"tier\":\"Basic\",\"size\":\"scjfnyns\",\"family\":\"ujiz\",\"capacity\":1473813191},\"properties\":{\"provisioningState\":\"Updating\",\"regionEndpointEnabled\":\"byowbblgyavutp\",\"resourceStopped\":\"joxoism\"},\"location\":\"sbpimlq\",\"tags\":{\"qzdwlvwlyoup\":\"xkcgxxlxsffgcvi\",\"kfm\":\"gfbkjubdyh\",\"ktlahbqa\":\"nsgowzfttst\"},\"id\":\"tx\",\"name\":\"gzukxitmm\",\"type\":\"tg\"}")
                .toObject(ReplicaInner.class);
        Assertions.assertEquals("sbpimlq", model.location());
        Assertions.assertEquals("xkcgxxlxsffgcvi", model.tags().get("qzdwlvwlyoup"));
        Assertions.assertEquals("icc", model.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals(1473813191, model.sku().capacity());
        Assertions.assertEquals("byowbblgyavutp", model.regionEndpointEnabled());
        Assertions.assertEquals("joxoism", model.resourceStopped());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaInner model =
            new ReplicaInner()
                .withLocation("sbpimlq")
                .withTags(mapOf("qzdwlvwlyoup", "xkcgxxlxsffgcvi", "kfm", "gfbkjubdyh", "ktlahbqa", "nsgowzfttst"))
                .withSku(new ResourceSku().withName("icc").withTier(WebPubSubSkuTier.BASIC).withCapacity(1473813191))
                .withRegionEndpointEnabled("byowbblgyavutp")
                .withResourceStopped("joxoism");
        model = BinaryData.fromObject(model).toObject(ReplicaInner.class);
        Assertions.assertEquals("sbpimlq", model.location());
        Assertions.assertEquals("xkcgxxlxsffgcvi", model.tags().get("qzdwlvwlyoup"));
        Assertions.assertEquals("icc", model.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals(1473813191, model.sku().capacity());
        Assertions.assertEquals("byowbblgyavutp", model.regionEndpointEnabled());
        Assertions.assertEquals("joxoism", model.resourceStopped());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
