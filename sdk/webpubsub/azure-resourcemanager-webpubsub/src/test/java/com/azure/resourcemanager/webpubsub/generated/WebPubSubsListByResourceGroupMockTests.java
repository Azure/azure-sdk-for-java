// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.ServiceKind;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubResource;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WebPubSubsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"xukuqgsj\",\"tier\":\"Standard\",\"size\":\"dxgketwzhhzjhfj\",\"family\":\"vvmu\",\"capacity\":2138305376},\"properties\":{\"provisioningState\":\"Running\",\"externalIP\":\"qsxvmhf\",\"hostName\":\"zjyi\",\"publicPort\":368548009,\"serverPort\":554244740,\"version\":\"udypohyuems\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Failed\",\"privateEndpoint\":{},\"groupIds\":[\"oobrlttyms\",\"nygq\",\"nfwqzdzgtilaxhn\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"lyvijouwiv\",\"name\":\"xoyzunbix\",\"type\":\"rtikvcpwpg\"},{\"properties\":{\"provisioningState\":\"Updating\",\"privateEndpoint\":{},\"groupIds\":[\"soxfrken\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"yyefrpmpdnqqs\",\"name\":\"awaoqvmmbnpqfrt\",\"type\":\"lkzmegnitgvkxl\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"privateEndpoint\":{},\"groupIds\":[\"gcealzxwh\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"symoyq\",\"name\":\"lwigdivbkbx\",\"type\":\"omfaj\"},{\"properties\":{\"provisioningState\":\"Unknown\",\"privateEndpoint\":{},\"groupIds\":[\"aeyyg\",\"xakjsqzhzb\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"gims\",\"name\":\"dxasicddyvv\",\"type\":\"skgfmocwahpq\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"eaahhvjhhn\",\"privateLinkResourceId\":\"kzyb\",\"provisioningState\":\"Canceled\",\"requestMessage\":\"dj\",\"status\":\"Pending\"},\"id\":\"xkyxvxevblbj\",\"name\":\"dnlj\",\"type\":\"age\"},{\"properties\":{\"groupId\":\"ulxunsmjbnkpp\",\"privateLinkResourceId\":\"ynenlsvxeizz\",\"provisioningState\":\"Succeeded\",\"requestMessage\":\"nsrmffeycx\",\"status\":\"Timeout\"},\"id\":\"piymerteea\",\"name\":\"mx\",\"type\":\"iekkkzddrtkgdojb\"},{\"properties\":{\"groupId\":\"vavrefdees\",\"privateLinkResourceId\":\"ecuijpxtxs\",\"provisioningState\":\"Running\",\"requestMessage\":\"tujwsawdd\",\"status\":\"Approved\"},\"id\":\"abxvi\",\"name\":\"itvtzeexavo\",\"type\":\"tfgle\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"bwpypqtgsfjacb\",\"liveTraceConfiguration\":{\"enabled\":\"hxudbxvodht\",\"categories\":[{\"name\":\"ud\",\"enabled\":\"m\"},{\"name\":\"sckdlp\",\"enabled\":\"zrcxfailcfxwmdbo\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"ft\",\"enabled\":\"qobr\"},{\"name\":\"nac\",\"enabled\":\"ckknhxkizvy\"},{\"name\":\"rzvul\",\"enabled\":\"aaeranokqgukk\"},{\"name\":\"nvbroylaxx\",\"enabled\":\"cdisd\"}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"ServerConnection\",\"ClientConnection\",\"ServerConnection\"],\"deny\":[\"ServerConnection\",\"ClientConnection\",\"Trace\"]},\"privateEndpoints\":[{\"name\":\"cytdclxgccknfnwm\",\"allow\":[\"RESTAPI\",\"Trace\",\"RESTAPI\",\"Trace\"],\"deny\":[\"ClientConnection\",\"ServerConnection\",\"ServerConnection\",\"RESTAPI\"]}]},\"publicNetworkAccess\":\"efedxihchrphkm\",\"disableLocalAuth\":true,\"disableAadAuth\":true},\"kind\":\"WebPubSub\",\"identity\":{\"type\":\"None\",\"userAssignedIdentities\":{\"euutlwxezwzh\":{\"principalId\":\"tg\",\"clientId\":\"lkdghr\"}},\"principalId\":\"vbwnhhtq\",\"tenantId\":\"ehgpp\"},\"location\":\"ifhpf\",\"tags\":{\"csheafidltugsr\":\"jvgcxtx\",\"h\":\"smkss\",\"egprhptil\":\"iftxfkf\",\"qtgdqohmcwsl\":\"ucb\"},\"id\":\"riz\",\"name\":\"tpwb\",\"type\":\"a\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WebPubSubManager manager =
            WebPubSubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WebPubSubResource> response =
            manager.webPubSubs().listByResourceGroup("zhyrmewipmve", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ifhpf", response.iterator().next().location());
        Assertions.assertEquals("jvgcxtx", response.iterator().next().tags().get("csheafidltugsr"));
        Assertions.assertEquals("xukuqgsj", response.iterator().next().sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.STANDARD, response.iterator().next().sku().tier());
        Assertions.assertEquals(2138305376, response.iterator().next().sku().capacity());
        Assertions.assertEquals(ServiceKind.WEB_PUB_SUB, response.iterator().next().kind());
        Assertions.assertEquals(ManagedIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals(true, response.iterator().next().tls().clientCertEnabled());
        Assertions.assertEquals("hxudbxvodht", response.iterator().next().liveTraceConfiguration().enabled());
        Assertions.assertEquals("ud", response.iterator().next().liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("m", response.iterator().next().liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("ft", response.iterator().next().resourceLogConfiguration().categories().get(0).name());
        Assertions
            .assertEquals("qobr", response.iterator().next().resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.DENY, response.iterator().next().networkACLs().defaultAction());
        Assertions
            .assertEquals(
                WebPubSubRequestType.SERVER_CONNECTION,
                response.iterator().next().networkACLs().publicNetwork().allow().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.SERVER_CONNECTION,
                response.iterator().next().networkACLs().publicNetwork().deny().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.RESTAPI,
                response.iterator().next().networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.CLIENT_CONNECTION,
                response.iterator().next().networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions
            .assertEquals(
                "cytdclxgccknfnwm", response.iterator().next().networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("efedxihchrphkm", response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().disableAadAuth());
    }
}
