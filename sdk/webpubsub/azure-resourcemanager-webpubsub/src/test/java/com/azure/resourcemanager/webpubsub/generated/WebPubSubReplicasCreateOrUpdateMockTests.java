// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.Replica;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WebPubSubReplicasCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"lwgniiprglvawu\",\"tier\":\"Free\",\"size\":\"fypiv\",\"family\":\"bbjpmcubkmif\",\"capacity\":2127053211},\"properties\":{\"provisioningState\":\"Succeeded\",\"regionEndpointEnabled\":\"phavpmhbrb\",\"resourceStopped\":\"vgovpbbttefjokn\"},\"location\":\"qyzqedikdfrdb\",\"tags\":{\"qlggwfi\":\"rjgeih\",\"mgtvlj\":\"zcxmjpbyep\",\"yfqi\":\"rc\",\"ui\":\"gxhnpomyqwcabv\"},\"id\":\"eeyaswl\",\"name\":\"augmrmfjlr\",\"type\":\"wtoaukhfk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WebPubSubManager manager = WebPubSubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Replica response = manager.webPubSubReplicas()
            .define("wkufykhvuhxepm")
            .withRegion("lrmymyincqlhri")
            .withExistingWebPubSub("ewbidyvteowxv", "piudeugfsxzecpa")
            .withTags(mapOf("cgxuugqkctotiowl", "lmiiiovg"))
            .withSku(new ResourceSku().withName("tznabao").withTier(WebPubSubSkuTier.STANDARD).withCapacity(423835249))
            .withRegionEndpointEnabled("ds")
            .withResourceStopped("pemmucfxhik")
            .create();

        Assertions.assertEquals("qyzqedikdfrdb", response.location());
        Assertions.assertEquals("rjgeih", response.tags().get("qlggwfi"));
        Assertions.assertEquals("lwgniiprglvawu", response.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.FREE, response.sku().tier());
        Assertions.assertEquals(2127053211, response.sku().capacity());
        Assertions.assertEquals("phavpmhbrb", response.regionEndpointEnabled());
        Assertions.assertEquals("vgovpbbttefjokn", response.resourceStopped());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
