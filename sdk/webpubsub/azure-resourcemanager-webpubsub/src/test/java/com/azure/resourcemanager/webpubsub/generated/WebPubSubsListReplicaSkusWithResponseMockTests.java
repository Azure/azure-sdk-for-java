// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.SkuList;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WebPubSubsListReplicaSkusWithResponseMockTests {
    @Test
    public void testListReplicaSkusWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"resourceType\":\"pbdbzqgqqi\",\"sku\":{\"name\":\"dsvqwt\",\"tier\":\"Free\",\"size\":\"ibcysihsgqc\",\"family\":\"hohsd\",\"capacity\":1273234897},\"capacity\":{\"minimum\":1235671059,\"maximum\":1121231141,\"default\":757345037,\"allowedValues\":[1526999298,1610179215,1206774170],\"scaleType\":\"Automatic\"}},{\"resourceType\":\"muapcvhdbevw\",\"sku\":{\"name\":\"xeyskonqzinkfkbg\",\"tier\":\"Basic\",\"size\":\"wxeqocljmygvkzqk\",\"family\":\"eokbze\",\"capacity\":50022372},\"capacity\":{\"minimum\":204772746,\"maximum\":1829804009,\"default\":1049990644,\"allowedValues\":[22024155,1208921361],\"scaleType\":\"Automatic\"}},{\"resourceType\":\"bkwvzg\",\"sku\":{\"name\":\"v\",\"tier\":\"Basic\",\"size\":\"d\",\"family\":\"zmqpnodawopqhewj\",\"capacity\":1244000330},\"capacity\":{\"minimum\":2086359092,\"maximum\":888576031,\"default\":199675617,\"allowedValues\":[699852565],\"scaleType\":\"None\"}},{\"resourceType\":\"atutmzlbiojlvfhr\",\"sku\":{\"name\":\"pn\",\"tier\":\"Premium\",\"size\":\"wwyyurmoch\",\"family\":\"rprsnm\",\"capacity\":1333760269},\"capacity\":{\"minimum\":139342243,\"maximum\":363300411,\"default\":1340031798,\"allowedValues\":[1170067597],\"scaleType\":\"Manual\"}}],\"nextLink\":\"cpilj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WebPubSubManager manager =
            WebPubSubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        SkuList response =
            manager
                .webPubSubs()
                .listReplicaSkusWithResponse(
                    "cmjkavlgorbmftpm", "tzfjltf", "nzcyjtotp", com.azure.core.util.Context.NONE)
                .getValue();
    }
}
