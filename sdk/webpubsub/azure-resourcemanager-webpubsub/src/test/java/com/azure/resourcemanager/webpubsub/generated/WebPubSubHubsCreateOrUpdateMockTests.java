// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.EventHandler;
import com.azure.resourcemanager.webpubsub.models.EventListener;
import com.azure.resourcemanager.webpubsub.models.EventListenerEndpoint;
import com.azure.resourcemanager.webpubsub.models.EventListenerFilter;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentitySettings;
import com.azure.resourcemanager.webpubsub.models.UpstreamAuthSettings;
import com.azure.resourcemanager.webpubsub.models.UpstreamAuthType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubHub;
import com.azure.resourcemanager.webpubsub.models.WebPubSubHubProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WebPubSubHubsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"eventHandlers\":[{\"urlTemplate\":\"rmfsvbpav\",\"userEventPattern\":\"pfppd\",\"systemEvents\":[\"upgahxkum\",\"sjcaacfdmmcpugm\",\"hqepvufhbzehewh\"],\"auth\":{\"type\":\"ManagedIdentity\",\"managedIdentity\":{}}},{\"urlTemplate\":\"bqnbl\",\"userEventPattern\":\"eaclgschorimk\",\"systemEvents\":[\"rmoucsofl\"],\"auth\":{\"type\":\"ManagedIdentity\",\"managedIdentity\":{}}},{\"urlTemplate\":\"yfcaabeolhbhlvbm\",\"userEventPattern\":\"qi\",\"systemEvents\":[\"tkcudfbsfarfsiow\",\"kjxnqpvwgfstmhq\",\"kizmdksaoafclu\"],\"auth\":{\"type\":\"ManagedIdentity\",\"managedIdentity\":{}}}],\"eventListeners\":[{\"filter\":{\"type\":\"EventListenerFilter\"},\"endpoint\":{\"type\":\"EventListenerEndpoint\"}},{\"filter\":{\"type\":\"EventListenerFilter\"},\"endpoint\":{\"type\":\"EventListenerEndpoint\"}},{\"filter\":{\"type\":\"EventListenerFilter\"},\"endpoint\":{\"type\":\"EventListenerEndpoint\"}},{\"filter\":{\"type\":\"EventListenerFilter\"},\"endpoint\":{\"type\":\"EventListenerEndpoint\"}}],\"anonymousConnectPolicy\":\"im\",\"webSocketKeepAliveIntervalInSeconds\":614051045},\"id\":\"gc\",\"name\":\"wpbmzgwesydsxwef\",\"type\":\"hecbvopwndyq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WebPubSubManager manager = WebPubSubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WebPubSubHub response = manager.webPubSubHubs()
            .define("o")
            .withExistingWebPubSub("uxvnsasbcrymodi", "rxklobdxnazpmk")
            .withProperties(new WebPubSubHubProperties()
                .withEventHandlers(Arrays.asList(new EventHandler().withUrlTemplate("vevfxz")
                    .withUserEventPattern("jhbzxliohrdddtf")
                    .withSystemEvents(Arrays.asList("ba", "pcbbnzqcykna", "qofyuicdhzbdy", "wwgbdv"))
                    .withAuth(new UpstreamAuthSettings().withType(UpstreamAuthType.NONE)
                        .withManagedIdentity(new ManagedIdentitySettings()))))
                .withEventListeners(Arrays.asList(new EventListener().withFilter(new EventListenerFilter())
                    .withEndpoint(new EventListenerEndpoint())))
                .withAnonymousConnectPolicy("ffplfmuvapckcc")
                .withWebSocketKeepAliveIntervalInSeconds(643996998))
            .create();

        Assertions.assertEquals("rmfsvbpav", response.properties().eventHandlers().get(0).urlTemplate());
        Assertions.assertEquals("pfppd", response.properties().eventHandlers().get(0).userEventPattern());
        Assertions.assertEquals("upgahxkum", response.properties().eventHandlers().get(0).systemEvents().get(0));
        Assertions.assertEquals(UpstreamAuthType.MANAGED_IDENTITY,
            response.properties().eventHandlers().get(0).auth().type());
        Assertions.assertEquals("im", response.properties().anonymousConnectPolicy());
        Assertions.assertEquals(614051045, response.properties().webSocketKeepAliveIntervalInSeconds());
    }
}
