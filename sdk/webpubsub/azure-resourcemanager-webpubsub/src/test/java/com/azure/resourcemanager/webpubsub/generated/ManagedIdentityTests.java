// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentity;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.UserAssignedIdentityProperty;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedIdentityTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedIdentity model = BinaryData.fromString(
            "{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"wib\":{\"principalId\":\"olppvksrpqvujz\",\"clientId\":\"ehtwdwrft\"},\"hevxcced\":{\"principalId\":\"cdl\",\"clientId\":\"shfwpracstwity\"},\"navvwx\":{\"principalId\":\"nmdyodnwzxl\",\"clientId\":\"cvnhltiugc\"},\"daciz\":{\"principalId\":\"byqunyow\",\"clientId\":\"lmdjrkvfgbvfvpdb\"}},\"principalId\":\"q\",\"tenantId\":\"krribdeibqi\"}")
            .toObject(ManagedIdentity.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedIdentity model = new ManagedIdentity().withType(ManagedIdentityType.USER_ASSIGNED)
            .withUserAssignedIdentities(
                mapOf("wib", new UserAssignedIdentityProperty(), "hevxcced", new UserAssignedIdentityProperty(),
                    "navvwx", new UserAssignedIdentityProperty(), "daciz", new UserAssignedIdentityProperty()));
        model = BinaryData.fromObject(model).toObject(ManagedIdentity.class);
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
