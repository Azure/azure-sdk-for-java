// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.LiveTraceCategory;
import com.azure.resourcemanager.webpubsub.models.LiveTraceConfiguration;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentity;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.NetworkAcl;
import com.azure.resourcemanager.webpubsub.models.PrivateEndpointAcl;
import com.azure.resourcemanager.webpubsub.models.ResourceLogCategory;
import com.azure.resourcemanager.webpubsub.models.ResourceLogConfiguration;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.ServiceKind;
import com.azure.resourcemanager.webpubsub.models.UserAssignedIdentityProperty;
import com.azure.resourcemanager.webpubsub.models.WebPubSubNetworkACLs;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubResource;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import com.azure.resourcemanager.webpubsub.models.WebPubSubTlsSettings;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WebPubSubsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"name\":\"czznvfbycjsxj\",\"tier\":\"Free\",\"size\":\"z\",\"family\":\"mwmxqhndvnoamld\",\"capacity\":1759834581},\"properties\":{\"provisioningState\":\"Succeeded\",\"externalIP\":\"jhhflzokxcoxpel\",\"hostName\":\"eta\",\"publicPort\":502894547,\"serverPort\":514838413,\"version\":\"atftgzpnpbsw\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{},\"groupIds\":[\"mozi\",\"m\",\"pgawtxxpkyjcxcjx\",\"rytfmpcycil\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"aykggnoxu\",\"name\":\"t\",\"type\":\"ksxwpnd\"},{\"properties\":{\"provisioningState\":\"Creating\",\"privateEndpoint\":{},\"groupIds\":[\"thjtwk\",\"aosrxuz\",\"oamktcq\",\"os\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"zah\",\"name\":\"xqdlyrtltlapr\",\"type\":\"tz\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{},\"groupIds\":[\"znnbsoqeqalarvl\",\"gunbtgfebwlnbm\",\"yreeudz\",\"av\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"qmjxlyyzglgouwtl\",\"name\":\"jjyuojqtobax\",\"type\":\"j\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"nlb\",\"privateLinkResourceId\":\"jkwrusnkq\",\"provisioningState\":\"Failed\",\"requestMessage\":\"rqunjq\",\"status\":\"Timeout\"},\"id\":\"nxaulk\",\"name\":\"akdkifmjnnawtqab\",\"type\":\"xuckpggqoweyir\"}],\"tls\":{\"clientCertEnabled\":true},\"hostNamePrefix\":\"ngwflqqmpizruwn\",\"liveTraceConfiguration\":{\"enabled\":\"pxiwf\",\"categories\":[{\"name\":\"saasiixtmkzj\",\"enabled\":\"viirhgfgrws\"},{\"name\":\"gratzvzbglbyvict\",\"enabled\":\"brxkjzwr\"},{\"name\":\"ffm\",\"enabled\":\"kwfbkgo\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"dby\",\"enabled\":\"izqaclnapxbiyg\"},{\"name\":\"gjkn\",\"enabled\":\"mfcttux\"},{\"name\":\"yilflqoiquvrehmr\",\"enabled\":\"hvsujztc\"}]},\"networkACLs\":{\"defaultAction\":\"Allow\",\"publicNetwork\":{\"allow\":[\"ClientConnection\"],\"deny\":[\"Trace\",\"RESTAPI\",\"ServerConnection\",\"RESTAPI\"]},\"privateEndpoints\":[{\"name\":\"jletlxsmrpddo\",\"allow\":[\"Trace\"],\"deny\":[\"ServerConnection\"]}]},\"publicNetworkAccess\":\"z\",\"disableLocalAuth\":true,\"disableAadAuth\":true},\"kind\":\"SocketIO\",\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"jvmtygjbmz\":{\"principalId\":\"w\",\"clientId\":\"qszdtmaajquhuxyl\"},\"fkyjpmspbpssdfpp\":{\"principalId\":\"spsp\",\"clientId\":\"c\"}},\"principalId\":\"gt\",\"tenantId\":\"yujtvczkcnyx\"},\"location\":\"munjdxvglnkvx\",\"tags\":{\"zvuqdflvon\":\"aglqivbgkcvkh\",\"pubcpzgpxtivhjk\":\"yp\",\"hgovfgp\":\"idibgqjxgpn\"},\"id\":\"kqmhhaowjr\",\"name\":\"zvuporqzdfuydz\",\"type\":\"kfvxcnq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        WebPubSubManager manager =
            WebPubSubManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        WebPubSubResource response =
            manager
                .webPubSubs()
                .define("jg")
                .withRegion("nwjizcilnghgshej")
                .withExistingResourceGroup("qwpwyawbzasqbuc")
                .withTags(mapOf("xlxqzvn", "xqmul", "mikzeb", "rsbycucrwn"))
                .withSku(new ResourceSku().withName("exaoguya").withTier(WebPubSubSkuTier.FREE).withCapacity(813441118))
                .withKind(ServiceKind.SOCKET_IO)
                .withIdentity(
                    new ManagedIdentity()
                        .withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "jx",
                                new UserAssignedIdentityProperty(),
                                "vru",
                                new UserAssignedIdentityProperty(),
                                "ffqyinlj",
                                new UserAssignedIdentityProperty(),
                                "xgvelfclduccbird",
                                new UserAssignedIdentityProperty())))
                .withTls(new WebPubSubTlsSettings().withClientCertEnabled(true))
                .withLiveTraceConfiguration(
                    new LiveTraceConfiguration()
                        .withEnabled("ni")
                        .withCategories(
                            Arrays.asList(new LiveTraceCategory().withName("gbzjedmstkv").withEnabled("v"))))
                .withResourceLogConfiguration(
                    new ResourceLogConfiguration()
                        .withCategories(
                            Arrays
                                .asList(
                                    new ResourceLogCategory().withName("iznk").withEnabled("f"),
                                    new ResourceLogCategory().withName("snvpdibmi").withEnabled("stbz"),
                                    new ResourceLogCategory().withName("iwbuqny").withEnabled("hzfylsgcrpfbc"),
                                    new ResourceLogCategory().withName("ezzcez").withEnabled("fwyfwlwxjwet"))))
                .withNetworkACLs(
                    new WebPubSubNetworkACLs()
                        .withDefaultAction(AclAction.ALLOW)
                        .withPublicNetwork(
                            new NetworkAcl()
                                .withAllow(
                                    Arrays
                                        .asList(
                                            WebPubSubRequestType.RESTAPI,
                                            WebPubSubRequestType.RESTAPI,
                                            WebPubSubRequestType.RESTAPI))
                                .withDeny(Arrays.asList(WebPubSubRequestType.TRACE)))
                        .withPrivateEndpoints(
                            Arrays
                                .asList(
                                    new PrivateEndpointAcl()
                                        .withAllow(
                                            Arrays
                                                .asList(
                                                    WebPubSubRequestType.RESTAPI,
                                                    WebPubSubRequestType.CLIENT_CONNECTION,
                                                    WebPubSubRequestType.CLIENT_CONNECTION))
                                        .withDeny(
                                            Arrays
                                                .asList(
                                                    WebPubSubRequestType.RESTAPI,
                                                    WebPubSubRequestType.RESTAPI,
                                                    WebPubSubRequestType.RESTAPI))
                                        .withName("trsqqw"))))
                .withPublicNetworkAccess("axfe")
                .withDisableLocalAuth(false)
                .withDisableAadAuth(true)
                .create();

        Assertions.assertEquals("munjdxvglnkvx", response.location());
        Assertions.assertEquals("aglqivbgkcvkh", response.tags().get("zvuqdflvon"));
        Assertions.assertEquals("czznvfbycjsxj", response.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.FREE, response.sku().tier());
        Assertions.assertEquals(1759834581, response.sku().capacity());
        Assertions.assertEquals(ServiceKind.SOCKET_IO, response.kind());
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(true, response.tls().clientCertEnabled());
        Assertions.assertEquals("pxiwf", response.liveTraceConfiguration().enabled());
        Assertions.assertEquals("saasiixtmkzj", response.liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("viirhgfgrws", response.liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("dby", response.resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("izqaclnapxbiyg", response.resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.ALLOW, response.networkACLs().defaultAction());
        Assertions
            .assertEquals(
                WebPubSubRequestType.CLIENT_CONNECTION, response.networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(WebPubSubRequestType.TRACE, response.networkACLs().publicNetwork().deny().get(0));
        Assertions
            .assertEquals(WebPubSubRequestType.TRACE, response.networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions
            .assertEquals(
                WebPubSubRequestType.SERVER_CONNECTION, response.networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("jletlxsmrpddo", response.networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("z", response.publicNetworkAccess());
        Assertions.assertEquals(true, response.disableLocalAuth());
        Assertions.assertEquals(true, response.disableAadAuth());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
