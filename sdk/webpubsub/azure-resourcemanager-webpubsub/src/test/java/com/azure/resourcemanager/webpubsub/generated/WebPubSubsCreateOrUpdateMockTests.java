// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.webpubsub.WebPubSubManager;
import com.azure.resourcemanager.webpubsub.models.AclAction;
import com.azure.resourcemanager.webpubsub.models.IpRule;
import com.azure.resourcemanager.webpubsub.models.LiveTraceCategory;
import com.azure.resourcemanager.webpubsub.models.LiveTraceConfiguration;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentity;
import com.azure.resourcemanager.webpubsub.models.ManagedIdentityType;
import com.azure.resourcemanager.webpubsub.models.NetworkAcl;
import com.azure.resourcemanager.webpubsub.models.PrivateEndpointAcl;
import com.azure.resourcemanager.webpubsub.models.ResourceLogCategory;
import com.azure.resourcemanager.webpubsub.models.ResourceLogConfiguration;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.ServiceKind;
import com.azure.resourcemanager.webpubsub.models.UserAssignedIdentityProperty;
import com.azure.resourcemanager.webpubsub.models.WebPubSubNetworkACLs;
import com.azure.resourcemanager.webpubsub.models.WebPubSubRequestType;
import com.azure.resourcemanager.webpubsub.models.WebPubSubResource;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSocketIOSettings;
import com.azure.resourcemanager.webpubsub.models.WebPubSubTlsSettings;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WebPubSubsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"tctbrxkjzwrgxffm\",\"tier\":\"Basic\",\"size\":\"fbkgozxwopdby\",\"family\":\"izqaclnapxbiyg\",\"capacity\":966053961},\"properties\":{\"provisioningState\":\"Succeeded\",\"externalIP\":\"smfcttuxuuyilfl\",\"hostName\":\"iquvrehm\",\"publicPort\":1061957314,\"serverPort\":1799585778,\"version\":\"ujztcz\",\"privateEndpointConnections\":[{\"properties\":{\"provisioningState\":\"Failed\",\"privateEndpoint\":{},\"groupIds\":[\"unfprnjletlxs\",\"rpddouifamo\",\"aziynknlqwzdv\",\"iwhxqszdtmaajq\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"xylrjvmtygjbmz\",\"name\":\"ospspshckf\",\"type\":\"yjpmspbpssdfppyo\"},{\"properties\":{\"provisioningState\":\"Succeeded\",\"privateEndpoint\":{},\"groupIds\":[\"tvczkcnyxr\",\"munjdxvglnkvx\",\"xpaglqivbgkc\",\"khpzvuqdflv\"],\"privateLinkServiceConnectionState\":{}},\"id\":\"yp\",\"name\":\"pubcpzgpxtivhjk\",\"type\":\"idibgqjxgpn\"}],\"sharedPrivateLinkResources\":[{\"properties\":{\"groupId\":\"vfgpikqmhhaowjrm\",\"privateLinkResourceId\":\"vuporqzdfuydzv\",\"provisioningState\":\"Running\",\"requestMessage\":\"cnqmxqpsw\",\"status\":\"Pending\"},\"id\":\"khlg\",\"name\":\"dhbemzqkzszu\",\"type\":\"iwtglxxhljfpg\"},{\"properties\":{\"groupId\":\"crmnzhrgmqgjs\",\"privateLinkResourceId\":\"vpqcb\",\"provisioningState\":\"Unknown\",\"requestMessage\":\"odth\",\"status\":\"Disconnected\"},\"id\":\"vriibakclacjfr\",\"name\":\"xousxauzl\",\"type\":\"vsg\"},{\"properties\":{\"groupId\":\"ohqfzizv\",\"privateLinkResourceId\":\"xmmkjs\",\"provisioningState\":\"Failed\",\"requestMessage\":\"wpztekovmribia\",\"status\":\"Pending\"},\"id\":\"lu\",\"name\":\"fotang\",\"type\":\"fhnykzcugs\"},{\"properties\":{\"groupId\":\"x\",\"privateLinkResourceId\":\"lmzqwmvtxnjmx\",\"provisioningState\":\"Canceled\",\"requestMessage\":\"udtc\",\"status\":\"Disconnected\"},\"id\":\"ynpdkvgfab\",\"name\":\"iyji\",\"type\":\"uzphdugnei\"}],\"tls\":{\"clientCertEnabled\":false},\"hostNamePrefix\":\"xgjiuqh\",\"liveTraceConfiguration\":{\"enabled\":\"ozipqwjedmurrxx\",\"categories\":[{\"name\":\"ktvqylkmqpzoy\",\"enabled\":\"fbcgwgcloxoebqin\"},{\"name\":\"pnwjfujq\",\"enabled\":\"fcbahhp\"},{\"name\":\"ofoiy\",\"enabled\":\"p\"},{\"name\":\"lkmkkholvdndvi\",\"enabled\":\"ogphuartvtiu\"}]},\"resourceLogConfiguration\":{\"categories\":[{\"name\":\"hnmnahmnx\",\"enabled\":\"xjqirwrweoox\"},{\"name\":\"i\",\"enabled\":\"xwrsnew\"}]},\"networkACLs\":{\"defaultAction\":\"Deny\",\"publicNetwork\":{\"allow\":[\"Trace\",\"Trace\"],\"deny\":[\"ClientConnection\",\"RESTAPI\",\"RESTAPI\",\"RESTAPI\"]},\"privateEndpoints\":[{\"name\":\"hxzga\",\"allow\":[\"ClientConnection\",\"ClientConnection\",\"ClientConnection\"],\"deny\":[\"RESTAPI\",\"RESTAPI\",\"RESTAPI\"]},{\"name\":\"qhppubowsepdfgk\",\"allow\":[\"ServerConnection\",\"Trace\",\"Trace\"],\"deny\":[\"ServerConnection\"]},{\"name\":\"tcjuahokqto\",\"allow\":[\"Trace\",\"ClientConnection\",\"Trace\"],\"deny\":[\"Trace\"]},{\"name\":\"fphwpnu\",\"allow\":[\"RESTAPI\",\"RESTAPI\"],\"deny\":[\"ClientConnection\"]}],\"ipRules\":[{\"value\":\"slwkojpl\",\"action\":\"Deny\"},{\"value\":\"pdwrpqafgfugsn\",\"action\":\"Allow\"}]},\"publicNetworkAccess\":\"et\",\"disableLocalAuth\":true,\"disableAadAuth\":false,\"regionEndpointEnabled\":\"octfjgtixrjvzuyt\",\"resourceStopped\":\"mlmuowol\",\"socketIO\":{\"serviceMode\":\"iropionszon\"}},\"kind\":\"SocketIO\",\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ekhenl\":{\"principalId\":\"ixjawrtm\",\"clientId\":\"jmyccxlzhcoxov\"}},\"principalId\":\"fnrdtjxtxr\",\"tenantId\":\"qtj\"},\"location\":\"dt\",\"tags\":{\"cvuwkasiz\":\"puslvyj\"},\"id\":\"esfuught\",\"name\":\"qfecjxeygtuhx\",\"type\":\"ic\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        WebPubSubManager manager = WebPubSubManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WebPubSubResource response = manager.webPubSubs()
            .define("tswbzuwfmd")
            .withRegion("ulkpakd")
            .withExistingResourceGroup("ivqiheb")
            .withTags(
                mapOf("bpxuckpggqoweyi", "mjnnawtq", "ruwnpqxpx", "dhlisngwflqqmpi", "ixtmkzjvkviirhgf", "wfcngjsaas"))
            .withSku(new ResourceSku().withName("agegiz").withTier(WebPubSubSkuTier.PREMIUM).withCapacity(1377938879))
            .withKind(ServiceKind.WEB_PUB_SUB)
            .withIdentity(new ManagedIdentity().withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                .withUserAssignedIdentities(mapOf("wtlmjjyuo", new UserAssignedIdentityProperty(), "fjkwrusnkq",
                    new UserAssignedIdentityProperty())))
            .withTls(new WebPubSubTlsSettings().withClientCertEnabled(true))
            .withLiveTraceConfiguration(new LiveTraceConfiguration().withEnabled("hokzrusw")
                .withCategories(Arrays.asList(new LiveTraceCategory().withName("zznvfbyc").withEnabled("xjww"),
                    new LiveTraceCategory().withName("z").withEnabled("mwmxqhndvnoamld"))))
            .withResourceLogConfiguration(new ResourceLogConfiguration()
                .withCategories(Arrays.asList(new ResourceLogCategory().withName("hdjhhflz").withEnabled("xcoxpelnjet"),
                    new ResourceLogCategory().withName("ltsxoatf").withEnabled("zpnpbswv"))))
            .withNetworkACLs(new WebPubSubNetworkACLs().withDefaultAction(AclAction.ALLOW)
                .withPublicNetwork(new NetworkAcl()
                    .withAllow(Arrays.asList(WebPubSubRequestType.TRACE, WebPubSubRequestType.CLIENT_CONNECTION,
                        WebPubSubRequestType.RESTAPI))
                    .withDeny(Arrays.asList(WebPubSubRequestType.TRACE, WebPubSubRequestType.CLIENT_CONNECTION,
                        WebPubSubRequestType.SERVER_CONNECTION, WebPubSubRequestType.TRACE)))
                .withPrivateEndpoints(Arrays.asList(
                    new PrivateEndpointAcl()
                        .withAllow(Arrays.asList(WebPubSubRequestType.RESTAPI, WebPubSubRequestType.RESTAPI))
                        .withDeny(Arrays.asList(WebPubSubRequestType.RESTAPI, WebPubSubRequestType.TRACE,
                            WebPubSubRequestType.TRACE, WebPubSubRequestType.CLIENT_CONNECTION))
                        .withName("wtxxpkyjcx"),
                    new PrivateEndpointAcl().withAllow(Arrays.asList(WebPubSubRequestType.RESTAPI))
                        .withDeny(Arrays.asList(WebPubSubRequestType.RESTAPI, WebPubSubRequestType.CLIENT_CONNECTION,
                            WebPubSubRequestType.RESTAPI, WebPubSubRequestType.SERVER_CONNECTION))
                        .withName("ycilrmcaykggnox")))
                .withIpRules(Arrays.asList(new IpRule().withValue("pfnznthjtwkj").withAction(AclAction.DENY),
                    new IpRule().withValue("xuzvoamktcqi").withAction(AclAction.DENY),
                    new IpRule().withValue("bzahgxqd").withAction(AclAction.ALLOW))))
            .withPublicNetworkAccess("ltlaprltzkatbhj")
            .withDisableLocalAuth(true)
            .withDisableAadAuth(true)
            .withRegionEndpointEnabled("oqeq")
            .withResourceStopped("arvlagunbt")
            .withSocketIO(new WebPubSubSocketIOSettings().withServiceMode("bwln"))
            .create();

        Assertions.assertEquals("dt", response.location());
        Assertions.assertEquals("puslvyj", response.tags().get("cvuwkasiz"));
        Assertions.assertEquals("tctbrxkjzwrgxffm", response.sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, response.sku().tier());
        Assertions.assertEquals(966053961, response.sku().capacity());
        Assertions.assertEquals(ServiceKind.SOCKET_IO, response.kind());
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals(false, response.tls().clientCertEnabled());
        Assertions.assertEquals("ozipqwjedmurrxx", response.liveTraceConfiguration().enabled());
        Assertions.assertEquals("ktvqylkmqpzoy", response.liveTraceConfiguration().categories().get(0).name());
        Assertions.assertEquals("fbcgwgcloxoebqin", response.liveTraceConfiguration().categories().get(0).enabled());
        Assertions.assertEquals("hnmnahmnx", response.resourceLogConfiguration().categories().get(0).name());
        Assertions.assertEquals("xjqirwrweoox", response.resourceLogConfiguration().categories().get(0).enabled());
        Assertions.assertEquals(AclAction.DENY, response.networkACLs().defaultAction());
        Assertions.assertEquals(WebPubSubRequestType.TRACE, response.networkACLs().publicNetwork().allow().get(0));
        Assertions.assertEquals(WebPubSubRequestType.CLIENT_CONNECTION,
            response.networkACLs().publicNetwork().deny().get(0));
        Assertions.assertEquals(WebPubSubRequestType.CLIENT_CONNECTION,
            response.networkACLs().privateEndpoints().get(0).allow().get(0));
        Assertions.assertEquals(WebPubSubRequestType.RESTAPI,
            response.networkACLs().privateEndpoints().get(0).deny().get(0));
        Assertions.assertEquals("hxzga", response.networkACLs().privateEndpoints().get(0).name());
        Assertions.assertEquals("slwkojpl", response.networkACLs().ipRules().get(0).value());
        Assertions.assertEquals(AclAction.DENY, response.networkACLs().ipRules().get(0).action());
        Assertions.assertEquals("et", response.publicNetworkAccess());
        Assertions.assertEquals(true, response.disableLocalAuth());
        Assertions.assertEquals(false, response.disableAadAuth());
        Assertions.assertEquals("octfjgtixrjvzuyt", response.regionEndpointEnabled());
        Assertions.assertEquals("mlmuowol", response.resourceStopped());
        Assertions.assertEquals("iropionszon", response.socketIO().serviceMode());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
