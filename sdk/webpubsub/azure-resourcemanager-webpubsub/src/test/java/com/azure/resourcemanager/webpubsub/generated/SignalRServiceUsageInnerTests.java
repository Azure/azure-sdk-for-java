// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.SignalRServiceUsageInner;
import com.azure.resourcemanager.webpubsub.models.SignalRServiceUsageName;
import org.junit.jupiter.api.Assertions;

public final class SignalRServiceUsageInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SignalRServiceUsageInner model =
            BinaryData
                .fromString(
                    "{\"id\":\"qktapspwgcuert\",\"currentValue\":7020809285560485144,\"limit\":6338655194328976084,\"name\":{\"value\":\"hbmdgbbjfdd\",\"localizedValue\":\"bmbexppbhtqqro\"},\"unit\":\"p\"}")
                .toObject(SignalRServiceUsageInner.class);
        Assertions.assertEquals("qktapspwgcuert", model.id());
        Assertions.assertEquals(7020809285560485144L, model.currentValue());
        Assertions.assertEquals(6338655194328976084L, model.limit());
        Assertions.assertEquals("hbmdgbbjfdd", model.name().value());
        Assertions.assertEquals("bmbexppbhtqqro", model.name().localizedValue());
        Assertions.assertEquals("p", model.unit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SignalRServiceUsageInner model =
            new SignalRServiceUsageInner()
                .withId("qktapspwgcuert")
                .withCurrentValue(7020809285560485144L)
                .withLimit(6338655194328976084L)
                .withName(new SignalRServiceUsageName().withValue("hbmdgbbjfdd").withLocalizedValue("bmbexppbhtqqro"))
                .withUnit("p");
        model = BinaryData.fromObject(model).toObject(SignalRServiceUsageInner.class);
        Assertions.assertEquals("qktapspwgcuert", model.id());
        Assertions.assertEquals(7020809285560485144L, model.currentValue());
        Assertions.assertEquals(6338655194328976084L, model.limit());
        Assertions.assertEquals("hbmdgbbjfdd", model.name().value());
        Assertions.assertEquals("bmbexppbhtqqro", model.name().localizedValue());
        Assertions.assertEquals("p", model.unit());
    }
}
