// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.ReplicaInner;
import com.azure.resourcemanager.webpubsub.models.ReplicaList;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"sku\":{\"name\":\"fnhtbaxkgxyw\",\"tier\":\"Basic\",\"size\":\"yklyhpluodpvruud\",\"family\":\"zibt\",\"capacity\":1721626377},\"properties\":{\"provisioningState\":\"Creating\",\"regionEndpointEnabled\":\"stvdxeclz\",\"resourceStopped\":\"qbcvhzlhplod\"},\"location\":\"dlwwqfbumlkxt\",\"tags\":{\"rtawcoezb\":\"fsmlmbtxhwgfw\",\"kqfqjbvl\":\"hubskhudygooo\",\"zf\":\"orfmluiqt\",\"ryeu\":\"vyvnqqyb\"},\"id\":\"yjkqabqgzslesjcb\",\"name\":\"ernntiewdjcvbquw\",\"type\":\"behwagohb\"},{\"sku\":{\"name\":\"fkmr\",\"tier\":\"Premium\",\"size\":\"vhmxtdrjfu\",\"family\":\"coebjvewzcj\",\"capacity\":96469803},\"properties\":{\"provisioningState\":\"Succeeded\",\"regionEndpointEnabled\":\"guaadraufactkahz\",\"resourceStopped\":\"ajjziuxxpshne\"},\"location\":\"ulfgslqu\",\"tags\":{\"o\":\"dlenrdsutujbazpj\",\"uvwpklvxwmyg\":\"minyflnorwm\",\"hiszepnnbjcrxgib\":\"xpgpq\"},\"id\":\"daxconfozauorsuk\",\"name\":\"kwbqplhlvnuu\",\"type\":\"pzlrphw\"},{\"sku\":{\"name\":\"oldweyuqdu\",\"tier\":\"Basic\",\"size\":\"nrwrbiork\",\"family\":\"lywjhh\",\"capacity\":1472152819},\"properties\":{\"provisioningState\":\"Failed\",\"regionEndpointEnabled\":\"ivfomiloxgg\",\"resourceStopped\":\"fi\"},\"location\":\"dieuzaofj\",\"tags\":{\"ubiipuipwoqonma\":\"cyyysfgdot\"},\"id\":\"jeknizshq\",\"name\":\"cimpevfg\",\"type\":\"b\"}],\"nextLink\":\"rilbywdx\"}")
                .toObject(ReplicaList.class);
        Assertions.assertEquals("dlwwqfbumlkxt", model.value().get(0).location());
        Assertions.assertEquals("fsmlmbtxhwgfw", model.value().get(0).tags().get("rtawcoezb"));
        Assertions.assertEquals("fnhtbaxkgxyw", model.value().get(0).sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(1721626377, model.value().get(0).sku().capacity());
        Assertions.assertEquals("stvdxeclz", model.value().get(0).regionEndpointEnabled());
        Assertions.assertEquals("qbcvhzlhplod", model.value().get(0).resourceStopped());
        Assertions.assertEquals("rilbywdx", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaList model =
            new ReplicaList()
                .withValue(
                    Arrays
                        .asList(
                            new ReplicaInner()
                                .withLocation("dlwwqfbumlkxt")
                                .withTags(
                                    mapOf(
                                        "rtawcoezb",
                                        "fsmlmbtxhwgfw",
                                        "kqfqjbvl",
                                        "hubskhudygooo",
                                        "zf",
                                        "orfmluiqt",
                                        "ryeu",
                                        "vyvnqqyb"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("fnhtbaxkgxyw")
                                        .withTier(WebPubSubSkuTier.BASIC)
                                        .withCapacity(1721626377))
                                .withRegionEndpointEnabled("stvdxeclz")
                                .withResourceStopped("qbcvhzlhplod"),
                            new ReplicaInner()
                                .withLocation("ulfgslqu")
                                .withTags(
                                    mapOf(
                                        "o",
                                        "dlenrdsutujbazpj",
                                        "uvwpklvxwmyg",
                                        "minyflnorwm",
                                        "hiszepnnbjcrxgib",
                                        "xpgpq"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("fkmr")
                                        .withTier(WebPubSubSkuTier.PREMIUM)
                                        .withCapacity(96469803))
                                .withRegionEndpointEnabled("guaadraufactkahz")
                                .withResourceStopped("ajjziuxxpshne"),
                            new ReplicaInner()
                                .withLocation("dieuzaofj")
                                .withTags(mapOf("ubiipuipwoqonma", "cyyysfgdot"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("oldweyuqdu")
                                        .withTier(WebPubSubSkuTier.BASIC)
                                        .withCapacity(1472152819))
                                .withRegionEndpointEnabled("ivfomiloxgg")
                                .withResourceStopped("fi")))
                .withNextLink("rilbywdx");
        model = BinaryData.fromObject(model).toObject(ReplicaList.class);
        Assertions.assertEquals("dlwwqfbumlkxt", model.value().get(0).location());
        Assertions.assertEquals("fsmlmbtxhwgfw", model.value().get(0).tags().get("rtawcoezb"));
        Assertions.assertEquals("fnhtbaxkgxyw", model.value().get(0).sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(1721626377, model.value().get(0).sku().capacity());
        Assertions.assertEquals("stvdxeclz", model.value().get(0).regionEndpointEnabled());
        Assertions.assertEquals("qbcvhzlhplod", model.value().get(0).resourceStopped());
        Assertions.assertEquals("rilbywdx", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
