// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.ReplicaInner;
import com.azure.resourcemanager.webpubsub.models.ReplicaList;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaList model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"sku\":{\"name\":\"btx\",\"tier\":\"Basic\",\"size\":\"wsrt\",\"family\":\"coezbrhubskh\",\"capacity\":662703919},\"properties\":{\"provisioningState\":\"Moving\"},\"location\":\"kkqfqjbvle\",\"tags\":{\"iqtqzfavyvnq\":\"ml\",\"euayjkqabqgzsles\":\"ybar\",\"vbquwr\":\"cbhernntiewdj\",\"uffkmrqemvvh\":\"ehwagoh\"},\"id\":\"xtdr\",\"name\":\"futacoebjvewzc\",\"type\":\"znmwcp\"},{\"sku\":{\"name\":\"uaadraufactkahzo\",\"tier\":\"Standard\",\"size\":\"ziuxxpshnee\",\"family\":\"lfg\",\"capacity\":1157333655},\"properties\":{\"provisioningState\":\"Failed\"},\"location\":\"dlenrdsutujbazpj\",\"tags\":{\"uvwpklvxwmyg\":\"minyflnorwm\",\"hiszepnnbjcrxgib\":\"xpgpq\",\"kwbqplhlvnuu\":\"daxconfozauorsuk\",\"soldweyuqdunv\":\"pzlrphw\"},\"id\":\"nnrwrbiork\",\"name\":\"alywjhhgdn\",\"type\":\"xmsivfomiloxggdu\"},{\"sku\":{\"name\":\"q\",\"tier\":\"Premium\",\"size\":\"uzaofjchvcyyy\",\"family\":\"gdotcubiipuipwo\",\"capacity\":1120696384},\"properties\":{\"provisioningState\":\"Failed\"},\"location\":\"ekni\",\"tags\":{\"pevf\":\"qvci\",\"smiccwrwfscj\":\"mblrrilbywd\",\"nszqujiz\":\"n\",\"byowbblgyavutp\":\"voqyt\"},\"id\":\"hjoxo\",\"name\":\"smsks\",\"type\":\"pi\"},{\"sku\":{\"name\":\"qolj\",\"tier\":\"Basic\",\"size\":\"xxlxsffgcvizq\",\"family\":\"wlvwlyoupf\",\"capacity\":1825475274},\"properties\":{\"provisioningState\":\"Canceled\"},\"location\":\"dyhgkfminsg\",\"tags\":{\"lahb\":\"fttsttk\",\"qtgqqqxhrnxr\":\"actxtgzukxitm\",\"okqdzfvaz\":\"cpjuisa\",\"ajlkatnw\":\"vjlfrqtt\"},\"id\":\"yiopi\",\"name\":\"kqqfk\",\"type\":\"vscx\"}],\"nextLink\":\"mligov\"}")
                .toObject(ReplicaList.class);
        Assertions.assertEquals("kkqfqjbvle", model.value().get(0).location());
        Assertions.assertEquals("ml", model.value().get(0).tags().get("iqtqzfavyvnq"));
        Assertions.assertEquals("btx", model.value().get(0).sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(662703919, model.value().get(0).sku().capacity());
        Assertions.assertEquals("mligov", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaList model =
            new ReplicaList()
                .withValue(
                    Arrays
                        .asList(
                            new ReplicaInner()
                                .withLocation("kkqfqjbvle")
                                .withTags(
                                    mapOf(
                                        "iqtqzfavyvnq",
                                        "ml",
                                        "euayjkqabqgzsles",
                                        "ybar",
                                        "vbquwr",
                                        "cbhernntiewdj",
                                        "uffkmrqemvvh",
                                        "ehwagoh"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("btx")
                                        .withTier(WebPubSubSkuTier.BASIC)
                                        .withCapacity(662703919)),
                            new ReplicaInner()
                                .withLocation("dlenrdsutujbazpj")
                                .withTags(
                                    mapOf(
                                        "uvwpklvxwmyg",
                                        "minyflnorwm",
                                        "hiszepnnbjcrxgib",
                                        "xpgpq",
                                        "kwbqplhlvnuu",
                                        "daxconfozauorsuk",
                                        "soldweyuqdunv",
                                        "pzlrphw"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("uaadraufactkahzo")
                                        .withTier(WebPubSubSkuTier.STANDARD)
                                        .withCapacity(1157333655)),
                            new ReplicaInner()
                                .withLocation("ekni")
                                .withTags(
                                    mapOf(
                                        "pevf",
                                        "qvci",
                                        "smiccwrwfscj",
                                        "mblrrilbywd",
                                        "nszqujiz",
                                        "n",
                                        "byowbblgyavutp",
                                        "voqyt"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("q")
                                        .withTier(WebPubSubSkuTier.PREMIUM)
                                        .withCapacity(1120696384)),
                            new ReplicaInner()
                                .withLocation("dyhgkfminsg")
                                .withTags(
                                    mapOf(
                                        "lahb",
                                        "fttsttk",
                                        "qtgqqqxhrnxr",
                                        "actxtgzukxitm",
                                        "okqdzfvaz",
                                        "cpjuisa",
                                        "ajlkatnw",
                                        "vjlfrqtt"))
                                .withSku(
                                    new ResourceSku()
                                        .withName("qolj")
                                        .withTier(WebPubSubSkuTier.BASIC)
                                        .withCapacity(1825475274))))
                .withNextLink("mligov");
        model = BinaryData.fromObject(model).toObject(ReplicaList.class);
        Assertions.assertEquals("kkqfqjbvle", model.value().get(0).location());
        Assertions.assertEquals("ml", model.value().get(0).tags().get("iqtqzfavyvnq"));
        Assertions.assertEquals("btx", model.value().get(0).sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(662703919, model.value().get(0).sku().capacity());
        Assertions.assertEquals("mligov", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
