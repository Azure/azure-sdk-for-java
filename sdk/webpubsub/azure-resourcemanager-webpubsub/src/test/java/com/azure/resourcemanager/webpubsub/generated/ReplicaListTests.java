// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.webpubsub.fluent.models.ReplicaInner;
import com.azure.resourcemanager.webpubsub.models.ReplicaList;
import com.azure.resourcemanager.webpubsub.models.ResourceSku;
import com.azure.resourcemanager.webpubsub.models.WebPubSubSkuTier;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ReplicaListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ReplicaList model = BinaryData.fromString(
            "{\"value\":[{\"sku\":{\"name\":\"qplhlvnu\",\"tier\":\"Basic\",\"size\":\"lrphwzsoldw\",\"family\":\"uqdunvmnnrwrbi\",\"capacity\":2098382686},\"properties\":{\"provisioningState\":\"Unknown\",\"regionEndpointEnabled\":\"wjhhgdnhxmsivf\",\"resourceStopped\":\"iloxggdufiq\"},\"location\":\"ieuzaofjchvcyyy\",\"tags\":{\"oqonma\":\"dotcubiipuip\",\"cimpevfg\":\"jeknizshq\",\"rrilbywdxsmic\":\"b\",\"qujizdvo\":\"wrwfscjfnyns\"},\"id\":\"ytibyow\",\"name\":\"blgyavutpthj\",\"type\":\"xoi\"},{\"sku\":{\"name\":\"sks\",\"tier\":\"Free\",\"size\":\"lqol\",\"family\":\"kcgxxlxsffgcvi\",\"capacity\":1820797792},\"properties\":{\"provisioningState\":\"Failed\",\"regionEndpointEnabled\":\"w\",\"resourceStopped\":\"oupfgfb\"},\"location\":\"ubdyhgk\",\"tags\":{\"ktlahbqa\":\"nsgowzfttst\"},\"id\":\"tx\",\"name\":\"gzukxitmm\",\"type\":\"tg\"}],\"nextLink\":\"q\"}")
            .toObject(ReplicaList.class);
        Assertions.assertEquals("ieuzaofjchvcyyy", model.value().get(0).location());
        Assertions.assertEquals("dotcubiipuip", model.value().get(0).tags().get("oqonma"));
        Assertions.assertEquals("qplhlvnu", model.value().get(0).sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(2098382686, model.value().get(0).sku().capacity());
        Assertions.assertEquals("wjhhgdnhxmsivf", model.value().get(0).regionEndpointEnabled());
        Assertions.assertEquals("iloxggdufiq", model.value().get(0).resourceStopped());
        Assertions.assertEquals("q", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ReplicaList model = new ReplicaList().withValue(Arrays.asList(
            new ReplicaInner().withLocation("ieuzaofjchvcyyy")
                .withTags(mapOf("oqonma", "dotcubiipuip", "cimpevfg", "jeknizshq", "rrilbywdxsmic", "b", "qujizdvo",
                    "wrwfscjfnyns"))
                .withSku(
                    new ResourceSku().withName("qplhlvnu").withTier(WebPubSubSkuTier.BASIC).withCapacity(2098382686))
                .withRegionEndpointEnabled("wjhhgdnhxmsivf")
                .withResourceStopped("iloxggdufiq"),
            new ReplicaInner().withLocation("ubdyhgk")
                .withTags(mapOf("ktlahbqa", "nsgowzfttst"))
                .withSku(new ResourceSku().withName("sks").withTier(WebPubSubSkuTier.FREE).withCapacity(1820797792))
                .withRegionEndpointEnabled("w")
                .withResourceStopped("oupfgfb")))
            .withNextLink("q");
        model = BinaryData.fromObject(model).toObject(ReplicaList.class);
        Assertions.assertEquals("ieuzaofjchvcyyy", model.value().get(0).location());
        Assertions.assertEquals("dotcubiipuip", model.value().get(0).tags().get("oqonma"));
        Assertions.assertEquals("qplhlvnu", model.value().get(0).sku().name());
        Assertions.assertEquals(WebPubSubSkuTier.BASIC, model.value().get(0).sku().tier());
        Assertions.assertEquals(2098382686, model.value().get(0).sku().capacity());
        Assertions.assertEquals("wjhhgdnhxmsivf", model.value().get(0).regionEndpointEnabled());
        Assertions.assertEquals("iloxggdufiq", model.value().get(0).resourceStopped());
        Assertions.assertEquals("q", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
