// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Upstream auth settings. If not set, no auth is used for upstream messages.
 */
@Fluent
public final class UpstreamAuthSettings implements JsonSerializable<UpstreamAuthSettings> {
    /*
     * Upstream auth type enum.
     */
    private UpstreamAuthType type;

    /*
     * Managed identity settings for upstream.
     */
    private ManagedIdentitySettings managedIdentity;

    /**
     * Creates an instance of UpstreamAuthSettings class.
     */
    public UpstreamAuthSettings() {
    }

    /**
     * Get the type property: Upstream auth type enum.
     * 
     * @return the type value.
     */
    public UpstreamAuthType type() {
        return this.type;
    }

    /**
     * Set the type property: Upstream auth type enum.
     * 
     * @param type the type value to set.
     * @return the UpstreamAuthSettings object itself.
     */
    public UpstreamAuthSettings withType(UpstreamAuthType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the managedIdentity property: Managed identity settings for upstream.
     * 
     * @return the managedIdentity value.
     */
    public ManagedIdentitySettings managedIdentity() {
        return this.managedIdentity;
    }

    /**
     * Set the managedIdentity property: Managed identity settings for upstream.
     * 
     * @param managedIdentity the managedIdentity value to set.
     * @return the UpstreamAuthSettings object itself.
     */
    public UpstreamAuthSettings withManagedIdentity(ManagedIdentitySettings managedIdentity) {
        this.managedIdentity = managedIdentity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (managedIdentity() != null) {
            managedIdentity().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("managedIdentity", this.managedIdentity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpstreamAuthSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpstreamAuthSettings if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpstreamAuthSettings.
     */
    public static UpstreamAuthSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpstreamAuthSettings deserializedUpstreamAuthSettings = new UpstreamAuthSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedUpstreamAuthSettings.type = UpstreamAuthType.fromString(reader.getString());
                } else if ("managedIdentity".equals(fieldName)) {
                    deserializedUpstreamAuthSettings.managedIdentity = ManagedIdentitySettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpstreamAuthSettings;
        });
    }
}
