// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Throttle the client connection by the user ID.
 */
@Fluent
public final class ThrottleByUserIdRule extends ClientConnectionCountRule {
    /*
     * The type property.
     */
    private ClientConnectionCountRuleDiscriminator type
        = ClientConnectionCountRuleDiscriminator.THROTTLE_BY_USER_ID_RULE;

    /*
     * Maximum connection count allowed for the same user ID. Clients with the same user ID will get rejected if the
     * connection count exceeds this value. Default value is 20.
     */
    private Integer maxCount;

    /**
     * Creates an instance of ThrottleByUserIdRule class.
     */
    public ThrottleByUserIdRule() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Override
    public ClientConnectionCountRuleDiscriminator type() {
        return this.type;
    }

    /**
     * Get the maxCount property: Maximum connection count allowed for the same user ID. Clients with the same user ID
     * will get rejected if the connection count exceeds this value. Default value is 20.
     * 
     * @return the maxCount value.
     */
    public Integer maxCount() {
        return this.maxCount;
    }

    /**
     * Set the maxCount property: Maximum connection count allowed for the same user ID. Clients with the same user ID
     * will get rejected if the connection count exceeds this value. Default value is 20.
     * 
     * @param maxCount the maxCount value to set.
     * @return the ThrottleByUserIdRule object itself.
     */
    public ThrottleByUserIdRule withMaxCount(Integer maxCount) {
        this.maxCount = maxCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("maxCount", this.maxCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThrottleByUserIdRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThrottleByUserIdRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ThrottleByUserIdRule.
     */
    public static ThrottleByUserIdRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThrottleByUserIdRule deserializedThrottleByUserIdRule = new ThrottleByUserIdRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedThrottleByUserIdRule.type
                        = ClientConnectionCountRuleDiscriminator.fromString(reader.getString());
                } else if ("maxCount".equals(fieldName)) {
                    deserializedThrottleByUserIdRule.maxCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThrottleByUserIdRule;
        });
    }
}
