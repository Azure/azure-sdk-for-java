// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.webpubsub.models.ProvisioningState;
import java.io.IOException;

/**
 * A custom certificate.
 */
@Fluent
public final class CustomCertificateInner extends ProxyResource {
    /*
     * Custom certificate properties.
     */
    private CustomCertificateProperties innerProperties = new CustomCertificateProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of CustomCertificateInner class.
     */
    public CustomCertificateInner() {
    }

    /**
     * Get the innerProperties property: Custom certificate properties.
     * 
     * @return the innerProperties value.
     */
    private CustomCertificateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the keyVaultBaseUri property: Base uri of the KeyVault that stores certificate.
     * 
     * @return the keyVaultBaseUri value.
     */
    public String keyVaultBaseUri() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultBaseUri();
    }

    /**
     * Set the keyVaultBaseUri property: Base uri of the KeyVault that stores certificate.
     * 
     * @param keyVaultBaseUri the keyVaultBaseUri value to set.
     * @return the CustomCertificateInner object itself.
     */
    public CustomCertificateInner withKeyVaultBaseUri(String keyVaultBaseUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomCertificateProperties();
        }
        this.innerProperties().withKeyVaultBaseUri(keyVaultBaseUri);
        return this;
    }

    /**
     * Get the keyVaultSecretName property: Certificate secret name.
     * 
     * @return the keyVaultSecretName value.
     */
    public String keyVaultSecretName() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultSecretName();
    }

    /**
     * Set the keyVaultSecretName property: Certificate secret name.
     * 
     * @param keyVaultSecretName the keyVaultSecretName value to set.
     * @return the CustomCertificateInner object itself.
     */
    public CustomCertificateInner withKeyVaultSecretName(String keyVaultSecretName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomCertificateProperties();
        }
        this.innerProperties().withKeyVaultSecretName(keyVaultSecretName);
        return this;
    }

    /**
     * Get the keyVaultSecretVersion property: Certificate secret version.
     * 
     * @return the keyVaultSecretVersion value.
     */
    public String keyVaultSecretVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().keyVaultSecretVersion();
    }

    /**
     * Set the keyVaultSecretVersion property: Certificate secret version.
     * 
     * @param keyVaultSecretVersion the keyVaultSecretVersion value to set.
     * @return the CustomCertificateInner object itself.
     */
    public CustomCertificateInner withKeyVaultSecretVersion(String keyVaultSecretVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new CustomCertificateProperties();
        }
        this.innerProperties().withKeyVaultSecretVersion(keyVaultSecretVersion);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model CustomCertificateInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CustomCertificateInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomCertificateInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomCertificateInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CustomCertificateInner.
     */
    public static CustomCertificateInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomCertificateInner deserializedCustomCertificateInner = new CustomCertificateInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCustomCertificateInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedCustomCertificateInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCustomCertificateInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedCustomCertificateInner.innerProperties = CustomCertificateProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedCustomCertificateInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomCertificateInner;
        });
    }
}
