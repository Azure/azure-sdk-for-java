// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Throttle the client connection by a custom JWT claim.
 */
@Fluent
public final class ThrottleByJwtCustomClaimRule extends ClientConnectionCountRule {
    /*
     * The type property.
     */
    private ClientConnectionCountRuleDiscriminator type
        = ClientConnectionCountRuleDiscriminator.THROTTLE_BY_JWT_CUSTOM_CLAIM_RULE;

    /*
     * The name of the claim in the JWT token. The client connection with the same claim value will be aggregated. If
     * the claim is not found in the token, the connection will be allowed.
     */
    private String claimName;

    /*
     * Maximum connection count allowed for the same Jwt claim value. Clients with the same Jwt claim will get rejected
     * if the connection count exceeds this value. Default value is 20.
     */
    private Integer maxCount;

    /**
     * Creates an instance of ThrottleByJwtCustomClaimRule class.
     */
    public ThrottleByJwtCustomClaimRule() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Override
    public ClientConnectionCountRuleDiscriminator type() {
        return this.type;
    }

    /**
     * Get the claimName property: The name of the claim in the JWT token. The client connection with the same claim
     * value will be aggregated. If the claim is not found in the token, the connection will be allowed.
     * 
     * @return the claimName value.
     */
    public String claimName() {
        return this.claimName;
    }

    /**
     * Set the claimName property: The name of the claim in the JWT token. The client connection with the same claim
     * value will be aggregated. If the claim is not found in the token, the connection will be allowed.
     * 
     * @param claimName the claimName value to set.
     * @return the ThrottleByJwtCustomClaimRule object itself.
     */
    public ThrottleByJwtCustomClaimRule withClaimName(String claimName) {
        this.claimName = claimName;
        return this;
    }

    /**
     * Get the maxCount property: Maximum connection count allowed for the same Jwt claim value. Clients with the same
     * Jwt claim will get rejected if the connection count exceeds this value. Default value is 20.
     * 
     * @return the maxCount value.
     */
    public Integer maxCount() {
        return this.maxCount;
    }

    /**
     * Set the maxCount property: Maximum connection count allowed for the same Jwt claim value. Clients with the same
     * Jwt claim will get rejected if the connection count exceeds this value. Default value is 20.
     * 
     * @param maxCount the maxCount value to set.
     * @return the ThrottleByJwtCustomClaimRule object itself.
     */
    public ThrottleByJwtCustomClaimRule withMaxCount(Integer maxCount) {
        this.maxCount = maxCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (claimName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property claimName in model ThrottleByJwtCustomClaimRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ThrottleByJwtCustomClaimRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("claimName", this.claimName);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("maxCount", this.maxCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThrottleByJwtCustomClaimRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThrottleByJwtCustomClaimRule if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ThrottleByJwtCustomClaimRule.
     */
    public static ThrottleByJwtCustomClaimRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThrottleByJwtCustomClaimRule deserializedThrottleByJwtCustomClaimRule = new ThrottleByJwtCustomClaimRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("claimName".equals(fieldName)) {
                    deserializedThrottleByJwtCustomClaimRule.claimName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedThrottleByJwtCustomClaimRule.type
                        = ClientConnectionCountRuleDiscriminator.fromString(reader.getString());
                } else if ("maxCount".equals(fieldName)) {
                    deserializedThrottleByJwtCustomClaimRule.maxCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThrottleByJwtCustomClaimRule;
        });
    }
}
