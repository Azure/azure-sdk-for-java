// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.webpubsub.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Filter events by their name.
 */
@Fluent
public final class EventNameFilter extends EventListenerFilter {
    /*
     * The type property.
     */
    private EventListenerFilterDiscriminator type = EventListenerFilterDiscriminator.EVENT_NAME;

    /*
     * Gets or sets a list of system events. Supported events: "connected" and "disconnected". Blocking event "connect"
     * is not supported because it requires a response.
     */
    private List<String> systemEvents;

    /*
     * Gets or sets a matching pattern for event names.
     * There are 3 kinds of patterns supported:
     * 1. "*", it matches any event name
     * 2. Combine multiple events with ",", for example "event1,event2", it matches events "event1" and "event2"
     * 3. A single event name, for example, "event1", it matches "event1"
     */
    private String userEventPattern;

    /**
     * Creates an instance of EventNameFilter class.
     */
    public EventNameFilter() {
    }

    /**
     * Get the type property: The type property.
     * 
     * @return the type value.
     */
    @Override
    public EventListenerFilterDiscriminator type() {
        return this.type;
    }

    /**
     * Get the systemEvents property: Gets or sets a list of system events. Supported events: "connected" and
     * "disconnected". Blocking event "connect" is not supported because it requires a response.
     * 
     * @return the systemEvents value.
     */
    public List<String> systemEvents() {
        return this.systemEvents;
    }

    /**
     * Set the systemEvents property: Gets or sets a list of system events. Supported events: "connected" and
     * "disconnected". Blocking event "connect" is not supported because it requires a response.
     * 
     * @param systemEvents the systemEvents value to set.
     * @return the EventNameFilter object itself.
     */
    public EventNameFilter withSystemEvents(List<String> systemEvents) {
        this.systemEvents = systemEvents;
        return this;
    }

    /**
     * Get the userEventPattern property: Gets or sets a matching pattern for event names.
     * There are 3 kinds of patterns supported:
     * 1. "*", it matches any event name
     * 2. Combine multiple events with ",", for example "event1,event2", it matches events "event1" and "event2"
     * 3. A single event name, for example, "event1", it matches "event1".
     * 
     * @return the userEventPattern value.
     */
    public String userEventPattern() {
        return this.userEventPattern;
    }

    /**
     * Set the userEventPattern property: Gets or sets a matching pattern for event names.
     * There are 3 kinds of patterns supported:
     * 1. "*", it matches any event name
     * 2. Combine multiple events with ",", for example "event1,event2", it matches events "event1" and "event2"
     * 3. A single event name, for example, "event1", it matches "event1".
     * 
     * @param userEventPattern the userEventPattern value to set.
     * @return the EventNameFilter object itself.
     */
    public EventNameFilter withUserEventPattern(String userEventPattern) {
        this.userEventPattern = userEventPattern;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeArrayField("systemEvents", this.systemEvents, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("userEventPattern", this.userEventPattern);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventNameFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventNameFilter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventNameFilter.
     */
    public static EventNameFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventNameFilter deserializedEventNameFilter = new EventNameFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedEventNameFilter.type = EventListenerFilterDiscriminator.fromString(reader.getString());
                } else if ("systemEvents".equals(fieldName)) {
                    List<String> systemEvents = reader.readArray(reader1 -> reader1.getString());
                    deserializedEventNameFilter.systemEvents = systemEvents;
                } else if ("userEventPattern".equals(fieldName)) {
                    deserializedEventNameFilter.userEventPattern = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventNameFilter;
        });
    }
}
