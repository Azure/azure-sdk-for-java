// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.webpubsub.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.messaging.webpubsub.models.WebPubSubContentType;
import com.azure.messaging.webpubsub.models.WebPubSubPermission;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WebPubSubs. */
public final class WebPubSubsImpl {
    /** The proxy service used to perform REST calls. */
    private final WebPubSubsService service;

    /** The service client containing this operation class. */
    private final AzureWebPubSubServiceRestAPIImpl client;

    /**
     * Initializes an instance of WebPubSubsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WebPubSubsImpl(AzureWebPubSubServiceRestAPIImpl client) {
        this.service =
                RestProxy.create(WebPubSubsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureWebPubSubServiceRestAPIWebPubSubs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureWebPubSubServic")
    public interface WebPubSubsService {
        @Post("/api/hubs/{hub}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToAll(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @QueryParam("excluded") Iterable<String> excluded,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Type") WebPubSubContentType contentType,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> message,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/hubs/{hub}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToAll(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @QueryParam("excluded") Iterable<String> excluded,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String message,
                Context context);

        @Head("/api/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> connectionExists(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/hubs/{hub}/connections/{connectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> closeClientConnection(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @QueryParam("reason") String reason,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/api/hubs/{hub}/connections/{connectionId}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToConnection(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Type") WebPubSubContentType contentType,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> message,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/hubs/{hub}/connections/{connectionId}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToConnection(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("connectionId") String connectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String message,
                Context context);

        @Head("/api/hubs/{hub}/groups/{group}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> groupExists(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/api/hubs/{hub}/groups/{group}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @QueryParam("excluded") Iterable<String> excluded,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Type") WebPubSubContentType contentType,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> message,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/hubs/{hub}/groups/{group}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @QueryParam("excluded") Iterable<String> excluded,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String message,
                Context context);

        @Put("/api/hubs/{hub}/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addConnectionToGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/hubs/{hub}/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeConnectionFromGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Head("/api/hubs/{hub}/users/{userId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> userExists(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("userId") String userId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Post("/api/hubs/{hub}/users/{userId}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToUser(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("userId") String userId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Content-Type") WebPubSubContentType contentType,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> message,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/hubs/{hub}/users/{userId}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToUser(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("userId") String userId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String message,
                Context context);

        @Put("/api/hubs/{hub}/users/{userId}/groups/{group}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addUserToGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("userId") String userId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/hubs/{hub}/users/{userId}/groups/{group}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeUserFromGroup(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("group") String group,
                @PathParam("userId") String userId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/hubs/{hub}/users/{userId}/groups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeUserFromAllGroups(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("userId") String userId,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Put("/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> grantPermission(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("permission") WebPubSubPermission permission,
                @PathParam("connectionId") String connectionId,
                @QueryParam("targetName") String targetName,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> revokePermission(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("permission") WebPubSubPermission permission,
                @PathParam("connectionId") String connectionId,
                @QueryParam("targetName") String targetName,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Head("/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> checkPermission(
                @HostParam("$host") String host,
                @PathParam("hub") String hub,
                @PathParam("permission") WebPubSubPermission permission,
                @PathParam("connectionId") String connectionId,
                @QueryParam("targetName") String targetName,
                @QueryParam("api-version") String apiVersion,
                Context context);
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToAllWithResponseAsync(
            String hub,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToAll(
                                this.client.getHost(),
                                hub,
                                excluded,
                                this.client.getApiVersion(),
                                contentType,
                                message,
                                contentLength,
                                context));
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToAllWithResponseAsync(
            String hub,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded,
            Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToAll(
                this.client.getHost(),
                hub,
                excluded,
                this.client.getApiVersion(),
                contentType,
                message,
                contentLength,
                context);
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToAllAsync(
            String hub,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded) {
        return sendToAllWithResponseAsync(hub, contentType, message, contentLength, excluded)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToAllAsync(
            String hub,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded,
            Context context) {
        return sendToAllWithResponseAsync(hub, contentType, message, contentLength, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToAll(
            String hub,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded) {
        sendToAllAsync(hub, contentType, message, contentLength, excluded).block();
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToAllWithResponse(
            String hub,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded,
            Context context) {
        return sendToAllWithResponseAsync(hub, contentType, message, contentLength, excluded, context).block();
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToAllWithResponseAsync(String hub, String message, Iterable<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToAll(
                                this.client.getHost(), hub, excluded, this.client.getApiVersion(), message, context));
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToAllWithResponseAsync(
            String hub, String message, Iterable<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToAll(this.client.getHost(), hub, excluded, this.client.getApiVersion(), message, context);
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToAllAsync(String hub, String message, Iterable<String> excluded) {
        return sendToAllWithResponseAsync(hub, message, excluded).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToAllAsync(String hub, String message, Iterable<String> excluded, Context context) {
        return sendToAllWithResponseAsync(hub, message, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToAll(String hub, String message, Iterable<String> excluded) {
        sendToAllAsync(hub, message, excluded).block();
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToAllWithResponse(
            String hub, String message, Iterable<String> excluded, Context context) {
        return sendToAllWithResponseAsync(hub, message, excluded, context).block();
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> connectionExistsWithResponseAsync(String hub, String connectionId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.connectionExists(
                                this.client.getHost(), hub, connectionId, this.client.getApiVersion(), context));
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> connectionExistsWithResponseAsync(String hub, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.connectionExists(this.client.getHost(), hub, connectionId, this.client.getApiVersion(), context);
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> connectionExistsAsync(String hub, String connectionId) {
        return connectionExistsWithResponseAsync(hub, connectionId)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> connectionExistsAsync(String hub, String connectionId, Context context) {
        return connectionExistsWithResponseAsync(hub, connectionId, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean connectionExists(String hub, String connectionId) {
        Boolean value = connectionExistsAsync(hub, connectionId).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> connectionExistsWithResponse(String hub, String connectionId, Context context) {
        return connectionExistsWithResponseAsync(hub, connectionId, context).block();
    }

    /**
     * Close the client connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId Target connection Id.
     * @param reason The reason closing the client connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> closeClientConnectionWithResponseAsync(String hub, String connectionId, String reason) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.closeClientConnection(
                                this.client.getHost(),
                                hub,
                                connectionId,
                                reason,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Close the client connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId Target connection Id.
     * @param reason The reason closing the client connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> closeClientConnectionWithResponseAsync(
            String hub, String connectionId, String reason, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.closeClientConnection(
                this.client.getHost(), hub, connectionId, reason, this.client.getApiVersion(), context);
    }

    /**
     * Close the client connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId Target connection Id.
     * @param reason The reason closing the client connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> closeClientConnectionAsync(String hub, String connectionId, String reason) {
        return closeClientConnectionWithResponseAsync(hub, connectionId, reason)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Close the client connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId Target connection Id.
     * @param reason The reason closing the client connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> closeClientConnectionAsync(String hub, String connectionId, String reason, Context context) {
        return closeClientConnectionWithResponseAsync(hub, connectionId, reason, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Close the client connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId Target connection Id.
     * @param reason The reason closing the client connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void closeClientConnection(String hub, String connectionId, String reason) {
        closeClientConnectionAsync(hub, connectionId, reason).block();
    }

    /**
     * Close the client connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId Target connection Id.
     * @param reason The reason closing the client connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> closeClientConnectionWithResponse(
            String hub, String connectionId, String reason, Context context) {
        return closeClientConnectionWithResponseAsync(hub, connectionId, reason, context).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String hub, String connectionId, WebPubSubContentType contentType, Flux<ByteBuffer> message, long contentLength) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToConnection(
                                this.client.getHost(),
                                hub,
                                connectionId,
                                this.client.getApiVersion(),
                                contentType,
                                message,
                                contentLength,
                                context));
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String hub,
            String connectionId,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToConnection(
                this.client.getHost(),
                hub,
                connectionId,
                this.client.getApiVersion(),
                contentType,
                message,
                contentLength,
                context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(
            String hub, String connectionId, WebPubSubContentType contentType, Flux<ByteBuffer> message, long contentLength) {
        return sendToConnectionWithResponseAsync(hub, connectionId, contentType, message, contentLength)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(
            String hub,
            String connectionId,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Context context) {
        return sendToConnectionWithResponseAsync(hub, connectionId, contentType, message, contentLength, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToConnection(
            String hub, String connectionId, WebPubSubContentType contentType, Flux<ByteBuffer> message, long contentLength) {
        sendToConnectionAsync(hub, connectionId, contentType, message, contentLength).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToConnectionWithResponse(
            String hub,
            String connectionId,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Context context) {
        return sendToConnectionWithResponseAsync(hub, connectionId, contentType, message, contentLength, context)
                .block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param message The payload body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(String hub, String connectionId, String message) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToConnection(
                                this.client.getHost(),
                                hub,
                                connectionId,
                                this.client.getApiVersion(),
                                message,
                                context));
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param message The payload body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String hub, String connectionId, String message, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToConnection(
                this.client.getHost(), hub, connectionId, this.client.getApiVersion(), message, context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param message The payload body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(String hub, String connectionId, String message) {
        return sendToConnectionWithResponseAsync(hub, connectionId, message)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param message The payload body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(String hub, String connectionId, String message, Context context) {
        return sendToConnectionWithResponseAsync(hub, connectionId, message, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param message The payload body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToConnection(String hub, String connectionId, String message) {
        sendToConnectionAsync(hub, connectionId, message).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param connectionId The connection Id.
     * @param message The payload body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToConnectionWithResponse(
            String hub, String connectionId, String message, Context context) {
        return sendToConnectionWithResponseAsync(hub, connectionId, message, context).block();
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> groupExistsWithResponseAsync(String hub, String group) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.groupExists(this.client.getHost(), hub, group, this.client.getApiVersion(), context));
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> groupExistsWithResponseAsync(String hub, String group, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return service.groupExists(this.client.getHost(), hub, group, this.client.getApiVersion(), context);
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> groupExistsAsync(String hub, String group) {
        return groupExistsWithResponseAsync(hub, group)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> groupExistsAsync(String hub, String group, Context context) {
        return groupExistsWithResponseAsync(hub, group, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean groupExists(String hub, String group) {
        Boolean value = groupExistsAsync(hub, group).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> groupExistsWithResponse(String hub, String group, Context context) {
        return groupExistsWithResponseAsync(hub, group, context).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToGroupWithResponseAsync(
            String hub,
            String group,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToGroup(
                                this.client.getHost(),
                                hub,
                                group,
                                excluded,
                                this.client.getApiVersion(),
                                contentType,
                                message,
                                contentLength,
                                context));
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToGroupWithResponseAsync(
            String hub,
            String group,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded,
            Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToGroup(
                this.client.getHost(),
                hub,
                group,
                excluded,
                this.client.getApiVersion(),
                contentType,
                message,
                contentLength,
                context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToGroupAsync(
            String hub,
            String group,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded) {
        return sendToGroupWithResponseAsync(hub, group, contentType, message, contentLength, excluded)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToGroupAsync(
            String hub,
            String group,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded,
            Context context) {
        return sendToGroupWithResponseAsync(hub, group, contentType, message, contentLength, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToGroup(
            String hub,
            String group,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded) {
        sendToGroupAsync(hub, group, contentType, message, contentLength, excluded).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToGroupWithResponse(
            String hub,
            String group,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Iterable<String> excluded,
            Context context) {
        return sendToGroupWithResponseAsync(hub, group, contentType, message, contentLength, excluded, context).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToGroupWithResponseAsync(
            String hub, String group, String message, Iterable<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToGroup(
                                this.client.getHost(),
                                hub,
                                group,
                                excluded,
                                this.client.getApiVersion(),
                                message,
                                context));
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToGroupWithResponseAsync(
            String hub, String group, String message, Iterable<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToGroup(
                this.client.getHost(), hub, group, excluded, this.client.getApiVersion(), message, context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToGroupAsync(String hub, String group, String message, Iterable<String> excluded) {
        return sendToGroupWithResponseAsync(hub, group, message, excluded)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToGroupAsync(
            String hub, String group, String message, Iterable<String> excluded, Context context) {
        return sendToGroupWithResponseAsync(hub, group, message, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToGroup(String hub, String group, String message, Iterable<String> excluded) {
        sendToGroupAsync(hub, group, message, excluded).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param message The payload body.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToGroupWithResponse(
            String hub, String group, String message, Iterable<String> excluded, Context context) {
        return sendToGroupWithResponseAsync(hub, group, message, excluded, context).block();
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConnectionToGroupWithResponseAsync(String hub, String group, String connectionId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.addConnectionToGroup(
                                this.client.getHost(), hub, group, connectionId, this.client.getApiVersion(), context));
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConnectionToGroupWithResponseAsync(
            String hub, String group, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.addConnectionToGroup(
                this.client.getHost(), hub, group, connectionId, this.client.getApiVersion(), context);
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addConnectionToGroupAsync(String hub, String group, String connectionId) {
        return addConnectionToGroupWithResponseAsync(hub, group, connectionId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addConnectionToGroupAsync(String hub, String group, String connectionId, Context context) {
        return addConnectionToGroupWithResponseAsync(hub, group, connectionId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addConnectionToGroup(String hub, String group, String connectionId) {
        addConnectionToGroupAsync(hub, group, connectionId).block();
    }

    /**
     * Add a connection to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addConnectionToGroupWithResponse(
            String hub, String group, String connectionId, Context context) {
        return addConnectionToGroupWithResponseAsync(hub, group, connectionId, context).block();
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConnectionFromGroupWithResponseAsync(
            String hub, String group, String connectionId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.removeConnectionFromGroup(
                                this.client.getHost(), hub, group, connectionId, this.client.getApiVersion(), context));
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConnectionFromGroupWithResponseAsync(
            String hub, String group, String connectionId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.removeConnectionFromGroup(
                this.client.getHost(), hub, group, connectionId, this.client.getApiVersion(), context);
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeConnectionFromGroupAsync(String hub, String group, String connectionId) {
        return removeConnectionFromGroupWithResponseAsync(hub, group, connectionId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeConnectionFromGroupAsync(String hub, String group, String connectionId, Context context) {
        return removeConnectionFromGroupWithResponseAsync(hub, group, connectionId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeConnectionFromGroup(String hub, String group, String connectionId) {
        removeConnectionFromGroupAsync(hub, group, connectionId).block();
    }

    /**
     * Remove a connection from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeConnectionFromGroupWithResponse(
            String hub, String group, String connectionId, Context context) {
        return removeConnectionFromGroupWithResponseAsync(hub, group, connectionId, context).block();
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> userExistsWithResponseAsync(String hub, String userId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.userExists(this.client.getHost(), hub, userId, this.client.getApiVersion(), context));
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> userExistsWithResponseAsync(String hub, String userId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return service.userExists(this.client.getHost(), hub, userId, this.client.getApiVersion(), context);
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> userExistsAsync(String hub, String userId) {
        return userExistsWithResponseAsync(hub, userId)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> userExistsAsync(String hub, String userId, Context context) {
        return userExistsWithResponseAsync(hub, userId, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean userExists(String hub, String userId) {
        Boolean value = userExistsAsync(hub, userId).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> userExistsWithResponse(String hub, String userId, Context context) {
        return userExistsWithResponseAsync(hub, userId, context).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(
            String hub, String userId, WebPubSubContentType contentType, Flux<ByteBuffer> message, long contentLength) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToUser(
                                this.client.getHost(),
                                hub,
                                userId,
                                this.client.getApiVersion(),
                                contentType,
                                message,
                                contentLength,
                                context));
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(
            String hub,
            String userId,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        if (contentType == null) {
            return Mono.error(new IllegalArgumentException("Parameter contentType is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToUser(
                this.client.getHost(),
                hub,
                userId,
                this.client.getApiVersion(),
                contentType,
                message,
                contentLength,
                context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(
            String hub, String userId, WebPubSubContentType contentType, Flux<ByteBuffer> message, long contentLength) {
        return sendToUserWithResponseAsync(hub, userId, contentType, message, contentLength)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(
            String hub,
            String userId,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Context context) {
        return sendToUserWithResponseAsync(hub, userId, contentType, message, contentLength, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToUser(
            String hub, String userId, WebPubSubContentType contentType, Flux<ByteBuffer> message, long contentLength) {
        sendToUserAsync(hub, userId, contentType, message, contentLength).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param contentType Upload file type.
     * @param message The payload body.
     * @param contentLength The contentLength parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToUserWithResponse(
            String hub,
            String userId,
            WebPubSubContentType contentType,
            Flux<ByteBuffer> message,
            long contentLength,
            Context context) {
        return sendToUserWithResponseAsync(hub, userId, contentType, message, contentLength, context).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param message The payload body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(String hub, String userId, String message) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToUser(
                                this.client.getHost(), hub, userId, this.client.getApiVersion(), message, context));
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param message The payload body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(
            String hub, String userId, String message, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        if (message == null) {
            return Mono.error(new IllegalArgumentException("Parameter message is required and cannot be null."));
        }
        return service.sendToUser(this.client.getHost(), hub, userId, this.client.getApiVersion(), message, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param message The payload body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(String hub, String userId, String message) {
        return sendToUserWithResponseAsync(hub, userId, message).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param message The payload body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(String hub, String userId, String message, Context context) {
        return sendToUserWithResponseAsync(hub, userId, message, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param message The payload body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToUser(String hub, String userId, String message) {
        sendToUserAsync(hub, userId, message).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId The user Id.
     * @param message The payload body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToUserWithResponse(String hub, String userId, String message, Context context) {
        return sendToUserWithResponseAsync(hub, userId, message, context).block();
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addUserToGroupWithResponseAsync(String hub, String group, String userId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.addUserToGroup(
                                this.client.getHost(), hub, group, userId, this.client.getApiVersion(), context));
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addUserToGroupWithResponseAsync(
            String hub, String group, String userId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return service.addUserToGroup(this.client.getHost(), hub, group, userId, this.client.getApiVersion(), context);
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addUserToGroupAsync(String hub, String group, String userId) {
        return addUserToGroupWithResponseAsync(hub, group, userId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addUserToGroupAsync(String hub, String group, String userId, Context context) {
        return addUserToGroupWithResponseAsync(hub, group, userId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addUserToGroup(String hub, String group, String userId) {
        addUserToGroupAsync(hub, group, userId).block();
    }

    /**
     * Add a user to the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addUserToGroupWithResponse(String hub, String group, String userId, Context context) {
        return addUserToGroupWithResponseAsync(hub, group, userId, context).block();
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromGroupWithResponseAsync(String hub, String group, String userId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.removeUserFromGroup(
                                this.client.getHost(), hub, group, userId, this.client.getApiVersion(), context));
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromGroupWithResponseAsync(
            String hub, String group, String userId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return service.removeUserFromGroup(
                this.client.getHost(), hub, group, userId, this.client.getApiVersion(), context);
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromGroupAsync(String hub, String group, String userId) {
        return removeUserFromGroupWithResponseAsync(hub, group, userId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromGroupAsync(String hub, String group, String userId, Context context) {
        return removeUserFromGroupWithResponseAsync(hub, group, userId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeUserFromGroup(String hub, String group, String userId) {
        removeUserFromGroupAsync(hub, group, userId).block();
    }

    /**
     * Remove a user from the target group.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeUserFromGroupWithResponse(String hub, String group, String userId, Context context) {
        return removeUserFromGroupWithResponseAsync(hub, group, userId, context).block();
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromAllGroupsWithResponseAsync(String hub, String userId) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.removeUserFromAllGroups(
                                this.client.getHost(), hub, userId, this.client.getApiVersion(), context));
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromAllGroupsWithResponseAsync(String hub, String userId, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (userId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userId is required and cannot be null."));
        }
        return service.removeUserFromAllGroups(
                this.client.getHost(), hub, userId, this.client.getApiVersion(), context);
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromAllGroupsAsync(String hub, String userId) {
        return removeUserFromAllGroupsWithResponseAsync(hub, userId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromAllGroupsAsync(String hub, String userId, Context context) {
        return removeUserFromAllGroupsWithResponseAsync(hub, userId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeUserFromAllGroups(String hub, String userId) {
        removeUserFromAllGroupsAsync(hub, userId).block();
    }

    /**
     * Remove a user from all groups.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param userId Target user Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeUserFromAllGroupsWithResponse(String hub, String userId, Context context) {
        return removeUserFromAllGroupsWithResponseAsync(hub, userId, context).block();
    }

    /**
     * Grant permission to the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, grant the permission to all the targets. If set, grant the permission to
     *     the specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> grantPermissionWithResponseAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (permission == null) {
            return Mono.error(new IllegalArgumentException("Parameter permission is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.grantPermission(
                                this.client.getHost(),
                                hub,
                                permission,
                                connectionId,
                                targetName,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Grant permission to the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, grant the permission to all the targets. If set, grant the permission to
     *     the specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> grantPermissionWithResponseAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (permission == null) {
            return Mono.error(new IllegalArgumentException("Parameter permission is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.grantPermission(
                this.client.getHost(), hub, permission, connectionId, targetName, this.client.getApiVersion(), context);
    }

    /**
     * Grant permission to the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, grant the permission to all the targets. If set, grant the permission to
     *     the specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> grantPermissionAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        return grantPermissionWithResponseAsync(hub, permission, connectionId, targetName)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Grant permission to the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, grant the permission to all the targets. If set, grant the permission to
     *     the specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> grantPermissionAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        return grantPermissionWithResponseAsync(hub, permission, connectionId, targetName, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Grant permission to the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, grant the permission to all the targets. If set, grant the permission to
     *     the specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void grantPermission(String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        grantPermissionAsync(hub, permission, connectionId, targetName).block();
    }

    /**
     * Grant permission to the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, grant the permission to all the targets. If set, grant the permission to
     *     the specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> grantPermissionWithResponse(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        return grantPermissionWithResponseAsync(hub, permission, connectionId, targetName, context).block();
    }

    /**
     * Revoke permission for the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, revoke the permission for all targets. If set, revoke the permission for
     *     the specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> revokePermissionWithResponseAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (permission == null) {
            return Mono.error(new IllegalArgumentException("Parameter permission is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.revokePermission(
                                this.client.getHost(),
                                hub,
                                permission,
                                connectionId,
                                targetName,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Revoke permission for the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, revoke the permission for all targets. If set, revoke the permission for
     *     the specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> revokePermissionWithResponseAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (permission == null) {
            return Mono.error(new IllegalArgumentException("Parameter permission is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.revokePermission(
                this.client.getHost(), hub, permission, connectionId, targetName, this.client.getApiVersion(), context);
    }

    /**
     * Revoke permission for the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, revoke the permission for all targets. If set, revoke the permission for
     *     the specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> revokePermissionAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        return revokePermissionWithResponseAsync(hub, permission, connectionId, targetName)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Revoke permission for the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, revoke the permission for all targets. If set, revoke the permission for
     *     the specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> revokePermissionAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        return revokePermissionWithResponseAsync(hub, permission, connectionId, targetName, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Revoke permission for the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, revoke the permission for all targets. If set, revoke the permission for
     *     the specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void revokePermission(String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        revokePermissionAsync(hub, permission, connectionId, targetName).block();
    }

    /**
     * Revoke permission for the connection.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, revoke the permission for all targets. If set, revoke the permission for
     *     the specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> revokePermissionWithResponse(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        return revokePermissionWithResponseAsync(hub, permission, connectionId, targetName, context).block();
    }

    /**
     * Check if a connection has permission to the specified action.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, get the permission for all targets. If set, get the permission for the
     *     specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkPermissionWithResponseAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (permission == null) {
            return Mono.error(new IllegalArgumentException("Parameter permission is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.checkPermission(
                                this.client.getHost(),
                                hub,
                                permission,
                                connectionId,
                                targetName,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Check if a connection has permission to the specified action.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, get the permission for all targets. If set, get the permission for the
     *     specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkPermissionWithResponseAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (hub == null) {
            return Mono.error(new IllegalArgumentException("Parameter hub is required and cannot be null."));
        }
        if (permission == null) {
            return Mono.error(new IllegalArgumentException("Parameter permission is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.checkPermission(
                this.client.getHost(), hub, permission, connectionId, targetName, this.client.getApiVersion(), context);
    }

    /**
     * Check if a connection has permission to the specified action.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, get the permission for all targets. If set, get the permission for the
     *     specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkPermissionAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        return checkPermissionWithResponseAsync(hub, permission, connectionId, targetName)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if a connection has permission to the specified action.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, get the permission for all targets. If set, get the permission for the
     *     specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkPermissionAsync(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        return checkPermissionWithResponseAsync(hub, permission, connectionId, targetName, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if a connection has permission to the specified action.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, get the permission for all targets. If set, get the permission for the
     *     specific target. The meaning of the target depends on the specific permission.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean checkPermission(String hub, WebPubSubPermission permission, String connectionId, String targetName) {
        Boolean value = checkPermissionAsync(hub, permission, connectionId, targetName).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if a connection has permission to the specified action.
     *
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore.
     * @param permission The permission: current supported actions are joinLeaveGroup and sendToGroup.
     * @param connectionId Target connection Id.
     * @param targetName Optional. If not set, get the permission for all targets. If set, get the permission for the
     *     specific target. The meaning of the target depends on the specific permission.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> checkPermissionWithResponse(
            String hub, WebPubSubPermission permission, String connectionId, String targetName, Context context) {
        return checkPermissionWithResponseAsync(hub, permission, connectionId, targetName, context).block();
    }
}
