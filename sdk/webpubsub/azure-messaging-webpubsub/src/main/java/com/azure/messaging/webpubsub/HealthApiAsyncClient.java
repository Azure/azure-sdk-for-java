// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.webpubsub;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.messaging.webpubsub.implementation.HealthApisImpl;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous WebPubSubServiceClient type.
 */
public final class HealthApiAsyncClient {
    @Generated
    private final HealthApisImpl serviceClient;

    /**
     * Initializes an instance of HealthApiAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    HealthApiAsyncClient(HealthApisImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Get service health status.
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return service health status along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getServiceStatusWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getServiceStatusWithResponseAsync(requestOptions);
    }
}
