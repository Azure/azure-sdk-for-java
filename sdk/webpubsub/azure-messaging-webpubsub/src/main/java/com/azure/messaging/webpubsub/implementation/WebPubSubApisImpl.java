// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.webpubsub.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in WebPubSubApis. */
public final class WebPubSubApisImpl {
    /** The proxy service used to perform REST calls. */
    private final WebPubSubApisService service;

    /** The service client containing this operation class. */
    private final AzureWebPubSubServiceRestAPIImpl client;

    /**
     * Initializes an instance of WebPubSubApisImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    WebPubSubApisImpl(AzureWebPubSubServiceRestAPIImpl client) {
        this.service =
                RestProxy.create(WebPubSubApisService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureWebPubSubServiceRestAPIWebPubSubApis to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureWebPubSubServic")
    public interface WebPubSubApisService {
        @Post("/api/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> broadcast(
                @HostParam("$host") String host,
                @QueryParam("hub") String hub,
                @QueryParam("excluded") String excluded,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> payloadMessage,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> broadcast(
                @HostParam("$host") String host,
                @QueryParam("hub") String hub,
                @QueryParam("excluded") String excluded,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String payloadMessage,
                Context context);

        @Post("/api/users/{id}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToUser(
                @HostParam("$host") String host,
                @PathParam("id") String id,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> payloadMessage,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/users/{id}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToUser(
                @HostParam("$host") String host,
                @PathParam("id") String id,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String payloadMessage,
                Context context);

        @Post("/api/connections/{connectionId}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToConnection(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> payloadMessage,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/connections/{connectionId}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> sendToConnection(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String payloadMessage,
                Context context);

        @Post("/api/groups/{group}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> groupBroadcast(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @QueryParam("hub") String hub,
                @QueryParam("excluded") String excluded,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/octet-stream") Flux<ByteBuffer> payloadMessage,
                @HeaderParam("Content-Length") long contentLength,
                Context context);

        @Post("/api/groups/{group}/:send")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> groupBroadcast(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @QueryParam("hub") String hub,
                @QueryParam("excluded") String excluded,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("text/plain") String payloadMessage,
                Context context);

        @Head("/api/connections/{connectionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> checkConnectionExistence(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/connections/{connectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> closeClientConnection(
                @HostParam("$host") String host,
                @PathParam("connectionId") String connectionId,
                @QueryParam("hub") String hub,
                @QueryParam("reason") String reason,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Head("/api/groups/{group}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> checkGroupExistence(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Head("/api/users/{user}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> checkUserExistence(
                @HostParam("$host") String host,
                @PathParam("user") String user,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Put("/api/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addConnectionToGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/groups/{group}/connections/{connectionId}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeConnectionFromGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("connectionId") String connectionId,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Head("/api/users/{user}/groups/{group}")
        @ExpectedResponses({200, 404})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Boolean>> checkUserExistenceInGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Put("/api/users/{user}/groups/{group}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> addUserToGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                @QueryParam("hub") String hub,
                @QueryParam("ttl") Integer ttl,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/users/{user}/groups/{group}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeUserFromGroup(
                @HostParam("$host") String host,
                @PathParam("group") String group,
                @PathParam("user") String user,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);

        @Delete("/api/users/{user}/groups")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> removeUserFromAllGroups(
                @HostParam("$host") String host,
                @PathParam("user") String user,
                @QueryParam("hub") String hub,
                @QueryParam("api-version") String apiVersion,
                Context context);
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> broadcastWithResponseAsync(
            Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.broadcast(
                                this.client.getHost(),
                                hub,
                                excludedConverted,
                                this.client.getApiVersion(),
                                payloadMessage,
                                contentLength,
                                context));
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> broadcastWithResponseAsync(
            Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.broadcast(
                this.client.getHost(),
                hub,
                excludedConverted,
                this.client.getApiVersion(),
                payloadMessage,
                contentLength,
                context);
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> broadcastAsync(
            Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded) {
        return broadcastWithResponseAsync(payloadMessage, contentLength, hub, excluded)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> broadcastAsync(
            Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded, Context context) {
        return broadcastWithResponseAsync(payloadMessage, contentLength, hub, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void broadcast(Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded) {
        broadcastAsync(payloadMessage, contentLength, hub, excluded).block();
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> broadcastWithResponse(
            Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded, Context context) {
        return broadcastWithResponseAsync(payloadMessage, contentLength, hub, excluded, context).block();
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> broadcastWithResponseAsync(String payloadMessage, String hub, List<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.broadcast(
                                this.client.getHost(),
                                hub,
                                excludedConverted,
                                this.client.getApiVersion(),
                                payloadMessage,
                                context));
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> broadcastWithResponseAsync(
            String payloadMessage, String hub, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.broadcast(
                this.client.getHost(), hub, excludedConverted, this.client.getApiVersion(), payloadMessage, context);
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> broadcastAsync(String payloadMessage, String hub, List<String> excluded) {
        return broadcastWithResponseAsync(payloadMessage, hub, excluded).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> broadcastAsync(String payloadMessage, String hub, List<String> excluded, Context context) {
        return broadcastWithResponseAsync(payloadMessage, hub, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void broadcast(String payloadMessage, String hub, List<String> excluded) {
        broadcastAsync(payloadMessage, hub, excluded).block();
    }

    /**
     * Broadcast content inside request body to all the connected client connections.
     *
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> broadcastWithResponse(
            String payloadMessage, String hub, List<String> excluded, Context context) {
        return broadcastWithResponseAsync(payloadMessage, hub, excluded, context).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(
            String id, Flux<ByteBuffer> payloadMessage, long contentLength, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToUser(
                                this.client.getHost(),
                                id,
                                hub,
                                this.client.getApiVersion(),
                                payloadMessage,
                                contentLength,
                                context));
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(
            String id, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return service.sendToUser(
                this.client.getHost(), id, hub, this.client.getApiVersion(), payloadMessage, contentLength, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(String id, Flux<ByteBuffer> payloadMessage, long contentLength, String hub) {
        return sendToUserWithResponseAsync(id, payloadMessage, contentLength, hub)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(
            String id, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, Context context) {
        return sendToUserWithResponseAsync(id, payloadMessage, contentLength, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToUser(String id, Flux<ByteBuffer> payloadMessage, long contentLength, String hub) {
        sendToUserAsync(id, payloadMessage, contentLength, hub).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToUserWithResponse(
            String id, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, Context context) {
        return sendToUserWithResponseAsync(id, payloadMessage, contentLength, hub, context).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(String id, String payloadMessage, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToUser(
                                this.client.getHost(), id, hub, this.client.getApiVersion(), payloadMessage, context));
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToUserWithResponseAsync(
            String id, String payloadMessage, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (id == null) {
            return Mono.error(new IllegalArgumentException("Parameter id is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return service.sendToUser(this.client.getHost(), id, hub, this.client.getApiVersion(), payloadMessage, context);
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(String id, String payloadMessage, String hub) {
        return sendToUserWithResponseAsync(id, payloadMessage, hub).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToUserAsync(String id, String payloadMessage, String hub, Context context) {
        return sendToUserWithResponseAsync(id, payloadMessage, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToUser(String id, String payloadMessage, String hub) {
        sendToUserAsync(id, payloadMessage, hub).block();
    }

    /**
     * Send content inside request body to the specific user.
     *
     * @param id The user Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToUserWithResponse(String id, String payloadMessage, String hub, Context context) {
        return sendToUserWithResponseAsync(id, payloadMessage, hub, context).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String connectionId, Flux<ByteBuffer> payloadMessage, long contentLength, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToConnection(
                                this.client.getHost(),
                                connectionId,
                                hub,
                                this.client.getApiVersion(),
                                payloadMessage,
                                contentLength,
                                context));
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String connectionId, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return service.sendToConnection(
                this.client.getHost(),
                connectionId,
                hub,
                this.client.getApiVersion(),
                payloadMessage,
                contentLength,
                context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(
            String connectionId, Flux<ByteBuffer> payloadMessage, long contentLength, String hub) {
        return sendToConnectionWithResponseAsync(connectionId, payloadMessage, contentLength, hub)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(
            String connectionId, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, Context context) {
        return sendToConnectionWithResponseAsync(connectionId, payloadMessage, contentLength, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToConnection(String connectionId, Flux<ByteBuffer> payloadMessage, long contentLength, String hub) {
        sendToConnectionAsync(connectionId, payloadMessage, contentLength, hub).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToConnectionWithResponse(
            String connectionId, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, Context context) {
        return sendToConnectionWithResponseAsync(connectionId, payloadMessage, contentLength, hub, context).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String connectionId, String payloadMessage, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.sendToConnection(
                                this.client.getHost(),
                                connectionId,
                                hub,
                                this.client.getApiVersion(),
                                payloadMessage,
                                context));
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> sendToConnectionWithResponseAsync(
            String connectionId, String payloadMessage, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        return service.sendToConnection(
                this.client.getHost(), connectionId, hub, this.client.getApiVersion(), payloadMessage, context);
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(String connectionId, String payloadMessage, String hub) {
        return sendToConnectionWithResponseAsync(connectionId, payloadMessage, hub)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> sendToConnectionAsync(String connectionId, String payloadMessage, String hub, Context context) {
        return sendToConnectionWithResponseAsync(connectionId, payloadMessage, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void sendToConnection(String connectionId, String payloadMessage, String hub) {
        sendToConnectionAsync(connectionId, payloadMessage, hub).block();
    }

    /**
     * Send content inside request body to the specific connection.
     *
     * @param connectionId The connection Id.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> sendToConnectionWithResponse(
            String connectionId, String payloadMessage, String hub, Context context) {
        return sendToConnectionWithResponseAsync(connectionId, payloadMessage, hub, context).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> groupBroadcastWithResponseAsync(
            String group, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.groupBroadcast(
                                this.client.getHost(),
                                group,
                                hub,
                                excludedConverted,
                                this.client.getApiVersion(),
                                payloadMessage,
                                contentLength,
                                context));
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> groupBroadcastWithResponseAsync(
            String group,
            Flux<ByteBuffer> payloadMessage,
            long contentLength,
            String hub,
            List<String> excluded,
            Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.groupBroadcast(
                this.client.getHost(),
                group,
                hub,
                excludedConverted,
                this.client.getApiVersion(),
                payloadMessage,
                contentLength,
                context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> groupBroadcastAsync(
            String group, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded) {
        return groupBroadcastWithResponseAsync(group, payloadMessage, contentLength, hub, excluded)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> groupBroadcastAsync(
            String group,
            Flux<ByteBuffer> payloadMessage,
            long contentLength,
            String hub,
            List<String> excluded,
            Context context) {
        return groupBroadcastWithResponseAsync(group, payloadMessage, contentLength, hub, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void groupBroadcast(
            String group, Flux<ByteBuffer> payloadMessage, long contentLength, String hub, List<String> excluded) {
        groupBroadcastAsync(group, payloadMessage, contentLength, hub, excluded).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage The payloadMessage parameter.
     * @param contentLength The contentLength parameter.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> groupBroadcastWithResponse(
            String group,
            Flux<ByteBuffer> payloadMessage,
            long contentLength,
            String hub,
            List<String> excluded,
            Context context) {
        return groupBroadcastWithResponseAsync(group, payloadMessage, contentLength, hub, excluded, context).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> groupBroadcastWithResponseAsync(
            String group, String payloadMessage, String hub, List<String> excluded) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.groupBroadcast(
                                this.client.getHost(),
                                group,
                                hub,
                                excludedConverted,
                                this.client.getApiVersion(),
                                payloadMessage,
                                context));
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> groupBroadcastWithResponseAsync(
            String group, String payloadMessage, String hub, List<String> excluded, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (payloadMessage == null) {
            return Mono.error(new IllegalArgumentException("Parameter payloadMessage is required and cannot be null."));
        }
        String excludedConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeList(excluded, CollectionFormat.CSV);
        return service.groupBroadcast(
                this.client.getHost(),
                group,
                hub,
                excludedConverted,
                this.client.getApiVersion(),
                payloadMessage,
                context);
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> groupBroadcastAsync(String group, String payloadMessage, String hub, List<String> excluded) {
        return groupBroadcastWithResponseAsync(group, payloadMessage, hub, excluded)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> groupBroadcastAsync(
            String group, String payloadMessage, String hub, List<String> excluded, Context context) {
        return groupBroadcastWithResponseAsync(group, payloadMessage, hub, excluded, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void groupBroadcast(String group, String payloadMessage, String hub, List<String> excluded) {
        groupBroadcastAsync(group, payloadMessage, hub, excluded).block();
    }

    /**
     * Send content inside request body to a group of connections.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param payloadMessage simple string.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param excluded Excluded connection Ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> groupBroadcastWithResponse(
            String group, String payloadMessage, String hub, List<String> excluded, Context context) {
        return groupBroadcastWithResponseAsync(group, payloadMessage, hub, excluded, context).block();
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkConnectionExistenceWithResponseAsync(String connectionId, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.checkConnectionExistence(
                                this.client.getHost(), connectionId, hub, this.client.getApiVersion(), context));
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkConnectionExistenceWithResponseAsync(
            String connectionId, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.checkConnectionExistence(
                this.client.getHost(), connectionId, hub, this.client.getApiVersion(), context);
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkConnectionExistenceAsync(String connectionId, String hub) {
        return checkConnectionExistenceWithResponseAsync(connectionId, hub)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkConnectionExistenceAsync(String connectionId, String hub, Context context) {
        return checkConnectionExistenceWithResponseAsync(connectionId, hub, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean checkConnectionExistence(String connectionId, String hub) {
        Boolean value = checkConnectionExistenceAsync(connectionId, hub).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if the connection with the given connectionId exists.
     *
     * @param connectionId The connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> checkConnectionExistenceWithResponse(String connectionId, String hub, Context context) {
        return checkConnectionExistenceWithResponseAsync(connectionId, hub, context).block();
    }

    /**
     * Close the client connection.
     *
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param reason The reason closing the client connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> closeClientConnectionWithResponseAsync(String connectionId, String hub, String reason) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.closeClientConnection(
                                this.client.getHost(),
                                connectionId,
                                hub,
                                reason,
                                this.client.getApiVersion(),
                                context));
    }

    /**
     * Close the client connection.
     *
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param reason The reason closing the client connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> closeClientConnectionWithResponseAsync(
            String connectionId, String hub, String reason, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.closeClientConnection(
                this.client.getHost(), connectionId, hub, reason, this.client.getApiVersion(), context);
    }

    /**
     * Close the client connection.
     *
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param reason The reason closing the client connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> closeClientConnectionAsync(String connectionId, String hub, String reason) {
        return closeClientConnectionWithResponseAsync(connectionId, hub, reason)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Close the client connection.
     *
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param reason The reason closing the client connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> closeClientConnectionAsync(String connectionId, String hub, String reason, Context context) {
        return closeClientConnectionWithResponseAsync(connectionId, hub, reason, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Close the client connection.
     *
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param reason The reason closing the client connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void closeClientConnection(String connectionId, String hub, String reason) {
        closeClientConnectionAsync(connectionId, hub, reason).block();
    }

    /**
     * Close the client connection.
     *
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param reason The reason closing the client connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> closeClientConnectionWithResponse(
            String connectionId, String hub, String reason, Context context) {
        return closeClientConnectionWithResponseAsync(connectionId, hub, reason, context).block();
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkGroupExistenceWithResponseAsync(String group, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.checkGroupExistence(
                                this.client.getHost(), group, hub, this.client.getApiVersion(), context));
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkGroupExistenceWithResponseAsync(String group, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        return service.checkGroupExistence(this.client.getHost(), group, hub, this.client.getApiVersion(), context);
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkGroupExistenceAsync(String group, String hub) {
        return checkGroupExistenceWithResponseAsync(group, hub)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkGroupExistenceAsync(String group, String hub, Context context) {
        return checkGroupExistenceWithResponseAsync(group, hub, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean checkGroupExistence(String group, String hub) {
        Boolean value = checkGroupExistenceAsync(group, hub).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if there are any client connections inside the given group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> checkGroupExistenceWithResponse(String group, String hub, Context context) {
        return checkGroupExistenceWithResponseAsync(group, hub, context).block();
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkUserExistenceWithResponseAsync(String user, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.checkUserExistence(
                                this.client.getHost(), user, hub, this.client.getApiVersion(), context));
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkUserExistenceWithResponseAsync(String user, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.checkUserExistence(this.client.getHost(), user, hub, this.client.getApiVersion(), context);
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkUserExistenceAsync(String user, String hub) {
        return checkUserExistenceWithResponseAsync(user, hub)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkUserExistenceAsync(String user, String hub, Context context) {
        return checkUserExistenceWithResponseAsync(user, hub, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean checkUserExistence(String user, String hub) {
        Boolean value = checkUserExistenceAsync(user, hub).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check if there are any client connections connected for the given user.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> checkUserExistenceWithResponse(String user, String hub, Context context) {
        return checkUserExistenceWithResponseAsync(user, hub, context).block();
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConnectionToGroupWithResponseAsync(String group, String connectionId, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.addConnectionToGroup(
                                this.client.getHost(), group, connectionId, hub, this.client.getApiVersion(), context));
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addConnectionToGroupWithResponseAsync(
            String group, String connectionId, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.addConnectionToGroup(
                this.client.getHost(), group, connectionId, hub, this.client.getApiVersion(), context);
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addConnectionToGroupAsync(String group, String connectionId, String hub) {
        return addConnectionToGroupWithResponseAsync(group, connectionId, hub)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addConnectionToGroupAsync(String group, String connectionId, String hub, Context context) {
        return addConnectionToGroupWithResponseAsync(group, connectionId, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addConnectionToGroup(String group, String connectionId, String hub) {
        addConnectionToGroupAsync(group, connectionId, hub).block();
    }

    /**
     * Add a connection to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addConnectionToGroupWithResponse(
            String group, String connectionId, String hub, Context context) {
        return addConnectionToGroupWithResponseAsync(group, connectionId, hub, context).block();
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConnectionFromGroupWithResponseAsync(
            String group, String connectionId, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.removeConnectionFromGroup(
                                this.client.getHost(), group, connectionId, hub, this.client.getApiVersion(), context));
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeConnectionFromGroupWithResponseAsync(
            String group, String connectionId, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (connectionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectionId is required and cannot be null."));
        }
        return service.removeConnectionFromGroup(
                this.client.getHost(), group, connectionId, hub, this.client.getApiVersion(), context);
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeConnectionFromGroupAsync(String group, String connectionId, String hub) {
        return removeConnectionFromGroupWithResponseAsync(group, connectionId, hub)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeConnectionFromGroupAsync(String group, String connectionId, String hub, Context context) {
        return removeConnectionFromGroupWithResponseAsync(group, connectionId, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeConnectionFromGroup(String group, String connectionId, String hub) {
        removeConnectionFromGroupAsync(group, connectionId, hub).block();
    }

    /**
     * Remove a connection from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param connectionId Target connection Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeConnectionFromGroupWithResponse(
            String group, String connectionId, String hub, Context context) {
        return removeConnectionFromGroupWithResponseAsync(group, connectionId, hub, context).block();
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkUserExistenceInGroupWithResponseAsync(String group, String user, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.checkUserExistenceInGroup(
                                this.client.getHost(), group, user, hub, this.client.getApiVersion(), context));
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Boolean>> checkUserExistenceInGroupWithResponseAsync(
            String group, String user, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.checkUserExistenceInGroup(
                this.client.getHost(), group, user, hub, this.client.getApiVersion(), context);
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkUserExistenceInGroupAsync(String group, String user, String hub) {
        return checkUserExistenceInGroupWithResponseAsync(group, user, hub)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Boolean> checkUserExistenceInGroupAsync(String group, String user, String hub, Context context) {
        return checkUserExistenceInGroupWithResponseAsync(group, user, hub, context)
                .flatMap(
                        (Response<Boolean> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return whether resource exists.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public boolean checkUserExistenceInGroup(String group, String user, String hub) {
        Boolean value = checkUserExistenceInGroupAsync(group, user, hub).block();
        if (value != null) {
            return value;
        } else {
            throw new NullPointerException();
        }
    }

    /**
     * Check whether a user exists in the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Boolean> checkUserExistenceInGroupWithResponse(
            String group, String user, String hub, Context context) {
        return checkUserExistenceInGroupWithResponseAsync(group, user, hub, context).block();
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addUserToGroupWithResponseAsync(String group, String user, String hub, Integer ttl) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.addUserToGroup(
                                this.client.getHost(), group, user, hub, ttl, this.client.getApiVersion(), context));
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addUserToGroupWithResponseAsync(
            String group, String user, String hub, Integer ttl, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.addUserToGroup(
                this.client.getHost(), group, user, hub, ttl, this.client.getApiVersion(), context);
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addUserToGroupAsync(String group, String user, String hub, Integer ttl) {
        return addUserToGroupWithResponseAsync(group, user, hub, ttl).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addUserToGroupAsync(String group, String user, String hub, Integer ttl, Context context) {
        return addUserToGroupWithResponseAsync(group, user, hub, ttl, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addUserToGroup(String group, String user, String hub, Integer ttl) {
        addUserToGroupAsync(group, user, hub, ttl).block();
    }

    /**
     * Add a user to the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param ttl Specifies the seconds that the user exists in the group. If not set, the user lives in the group
     *     forever.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addUserToGroupWithResponse(
            String group, String user, String hub, Integer ttl, Context context) {
        return addUserToGroupWithResponseAsync(group, user, hub, ttl, context).block();
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromGroupWithResponseAsync(String group, String user, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.removeUserFromGroup(
                                this.client.getHost(), group, user, hub, this.client.getApiVersion(), context));
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromGroupWithResponseAsync(
            String group, String user, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (group == null) {
            return Mono.error(new IllegalArgumentException("Parameter group is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.removeUserFromGroup(
                this.client.getHost(), group, user, hub, this.client.getApiVersion(), context);
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromGroupAsync(String group, String user, String hub) {
        return removeUserFromGroupWithResponseAsync(group, user, hub).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromGroupAsync(String group, String user, String hub, Context context) {
        return removeUserFromGroupWithResponseAsync(group, user, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeUserFromGroup(String group, String user, String hub) {
        removeUserFromGroupAsync(group, user, hub).block();
    }

    /**
     * Remove a user from the target group.
     *
     * @param group Target group name, which length should be greater than 0 and less than 1025.
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeUserFromGroupWithResponse(String group, String user, String hub, Context context) {
        return removeUserFromGroupWithResponseAsync(group, user, hub, context).block();
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromAllGroupsWithResponseAsync(String user, String hub) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context ->
                        service.removeUserFromAllGroups(
                                this.client.getHost(), user, hub, this.client.getApiVersion(), context));
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeUserFromAllGroupsWithResponseAsync(String user, String hub, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        if (user == null) {
            return Mono.error(new IllegalArgumentException("Parameter user is required and cannot be null."));
        }
        return service.removeUserFromAllGroups(this.client.getHost(), user, hub, this.client.getApiVersion(), context);
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromAllGroupsAsync(String user, String hub) {
        return removeUserFromAllGroupsWithResponseAsync(user, hub).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeUserFromAllGroupsAsync(String user, String hub, Context context) {
        return removeUserFromAllGroupsWithResponseAsync(user, hub, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeUserFromAllGroups(String user, String hub) {
        removeUserFromAllGroupsAsync(user, hub).block();
    }

    /**
     * Remove a user from all groups.
     *
     * @param user Target user Id.
     * @param hub Target hub name, which should start with alphabetic characters and only contain alpha-numeric
     *     characters or underscore. When it is not set, it uses the default hub.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeUserFromAllGroupsWithResponse(String user, String hub, Context context) {
        return removeUserFromAllGroupsWithResponseAsync(user, hub, context).block();
    }
}
