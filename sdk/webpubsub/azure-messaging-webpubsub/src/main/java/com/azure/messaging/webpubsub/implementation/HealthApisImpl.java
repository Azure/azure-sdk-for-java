// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.webpubsub.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Head;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in HealthApis. */
public final class HealthApisImpl {
    /** The proxy service used to perform REST calls. */
    private final HealthApisService service;

    /** The service client containing this operation class. */
    private final AzureWebPubSubServiceRestAPIImpl client;

    /**
     * Initializes an instance of HealthApisImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HealthApisImpl(AzureWebPubSubServiceRestAPIImpl client) {
        this.service =
                RestProxy.create(HealthApisService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureWebPubSubServiceRestAPIHealthApis to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureWebPubSubServic")
    public interface HealthApisService {
        @Head("/api/health")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> getHealthStatus(
                @HostParam("$host") String host, @QueryParam("api-version") String apiVersion, Context context);
    }

    /**
     * Get service health status.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getHealthStatusWithResponseAsync() {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context -> service.getHealthStatus(this.client.getHost(), this.client.getApiVersion(), context));
    }

    /**
     * Get service health status.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getHealthStatusWithResponseAsync(Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.getHealthStatus(this.client.getHost(), this.client.getApiVersion(), context);
    }

    /**
     * Get service health status.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getHealthStatusAsync() {
        return getHealthStatusWithResponseAsync().flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Get service health status.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getHealthStatusAsync(Context context) {
        return getHealthStatusWithResponseAsync(context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Get service health status.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getHealthStatus() {
        getHealthStatusAsync().block();
    }

    /**
     * Get service health status.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return service health status.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getHealthStatusWithResponse(Context context) {
        return getHealthStatusWithResponseAsync(context).block();
    }
}
