// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.webpubsub.implementation;

import com.azure.core.annotation.Head;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/** An instance of this class provides access to all the operations defined in HealthApis. */
public final class HealthApisImpl {
    /** The proxy service used to perform REST calls. */
    private final HealthApisService service;

    /** The service client containing this operation class. */
    private final AzureWebPubSubServiceRestAPIImpl client;

    /**
     * Initializes an instance of HealthApisImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HealthApisImpl(AzureWebPubSubServiceRestAPIImpl client) {
        this.service =
                RestProxy.create(HealthApisService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureWebPubSubServiceRestAPIHealthApis to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureWebPubSubServic")
    public interface HealthApisService {
        @Head("/api/health")
        Mono<Response<Void>> getServiceStatus(
                @HostParam("$host") String host, RequestOptions requestOptions, Context context);
    }

    /**
     * Get service health status.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getServiceStatusWithResponseAsync(RequestOptions requestOptions) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return FluxUtil.withContext(
                context -> service.getServiceStatus(this.client.getHost(), requestOptions, context));
    }

    /**
     * Get service health status.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> getServiceStatusWithResponseAsync(RequestOptions requestOptions, Context context) {
        if (this.client.getHost() == null) {
            return Mono.error(
                    new IllegalArgumentException("Parameter this.client.getHost() is required and cannot be null."));
        }
        return service.getServiceStatus(this.client.getHost(), requestOptions, context);
    }

    /**
     * Get service health status.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getServiceStatusAsync(RequestOptions requestOptions) {
        return getServiceStatusWithResponseAsync(requestOptions).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Get service health status.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> getServiceStatusAsync(RequestOptions requestOptions, Context context) {
        return getServiceStatusWithResponseAsync(requestOptions, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Get service health status.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getServiceStatus(RequestOptions requestOptions) {
        getServiceStatusAsync(requestOptions).block();
    }

    /**
     * Get service health status.
     *
     * @return a DynamicRequest where customizations can be made before sent to the service.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getServiceStatusWithResponse(RequestOptions requestOptions, Context context) {
        return getServiceStatusWithResponseAsync(requestOptions, context).block();
    }

}
