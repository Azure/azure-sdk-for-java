// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsInner;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaSubscriptionAllocationsClient.
 */
public interface GroupQuotaSubscriptionAllocationsClient {
    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SubscriptionQuotaAllocationsInner> list(String managementGroupId, String groupQuotaName,
        String filter);

    /**
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location.
     * 
     * Gets all the quota allocated to a subscription for the specific Resource Provider, Location. This will include
     * the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the subscription
     * can be allocated back to the MG Group Quota. Use the $filter parameter to filter out the specific resource based
     * on the ResourceProvider/Location. $filter is a required parameter.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specific Resource Provider, Location as paginated
     * response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<SubscriptionQuotaAllocationsInner> list(String managementGroupId, String groupQuotaName,
        String filter, Context context);

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SubscriptionQuotaAllocationsInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String resourceName, String filter, Context context);

    /**
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     * 
     * Gets Quota allocated to a subscription for the specific Resource Provider, Location, ResourceName. This will
     * include the GroupQuota and total quota allocated to the subscription. Only the Group quota allocated to the
     * subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceName Resource name.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return quota allocated to a subscription for the specific Resource Provider, Location, ResourceName.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SubscriptionQuotaAllocationsInner get(String managementGroupId, String groupQuotaName, String resourceName,
        String filter);
}
