// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The SubscriptionQuotaAllocationsListProperties model.
 */
@Fluent
public final class SubscriptionQuotaAllocationsListProperties
    implements JsonSerializable<SubscriptionQuotaAllocationsListProperties> {
    /*
     * Request status.
     */
    private RequestState provisioningState;

    /*
     * Subscription quota list.
     */
    private List<SubscriptionQuotaAllocations> value;

    /*
     * The URL to use for getting the next set of results.
     */
    private String nextLink;

    /**
     * Creates an instance of SubscriptionQuotaAllocationsListProperties class.
     */
    public SubscriptionQuotaAllocationsListProperties() {
    }

    /**
     * Get the provisioningState property: Request status.
     * 
     * @return the provisioningState value.
     */
    public RequestState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the value property: Subscription quota list.
     * 
     * @return the value value.
     */
    public List<SubscriptionQuotaAllocations> value() {
        return this.value;
    }

    /**
     * Set the value property: Subscription quota list.
     * 
     * @param value the value value to set.
     * @return the SubscriptionQuotaAllocationsListProperties object itself.
     */
    public SubscriptionQuotaAllocationsListProperties withValue(List<SubscriptionQuotaAllocations> value) {
        this.value = value;
        return this;
    }

    /**
     * Get the nextLink property: The URL to use for getting the next set of results.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubscriptionQuotaAllocationsListProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubscriptionQuotaAllocationsListProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubscriptionQuotaAllocationsListProperties.
     */
    public static SubscriptionQuotaAllocationsListProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubscriptionQuotaAllocationsListProperties deserializedSubscriptionQuotaAllocationsListProperties
                = new SubscriptionQuotaAllocationsListProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedSubscriptionQuotaAllocationsListProperties.provisioningState
                        = RequestState.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    List<SubscriptionQuotaAllocations> value
                        = reader.readArray(reader1 -> SubscriptionQuotaAllocations.fromJson(reader1));
                    deserializedSubscriptionQuotaAllocationsListProperties.value = value;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedSubscriptionQuotaAllocationsListProperties.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscriptionQuotaAllocationsListProperties;
        });
    }
}
