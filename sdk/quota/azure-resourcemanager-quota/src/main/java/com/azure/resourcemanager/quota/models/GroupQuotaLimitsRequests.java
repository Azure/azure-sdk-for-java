// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.quota.fluent.models.SubmittedResourceRequestStatusInner;

/**
 * Resource collection API of GroupQuotaLimitsRequests.
 */
public interface GroupQuotaLimitsRequests {
    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String resourceName);

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest, Context context);

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    SubmittedResourceRequestStatus update(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String resourceName);

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    SubmittedResourceRequestStatus update(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest, Context context);

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response}.
     */
    Response<SubmittedResourceRequestStatus> getWithResponse(String managementGroupId, String groupQuotaName,
        String requestId, Context context);

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId.
     */
    SubmittedResourceRequestStatus get(String managementGroupId, String groupQuotaName, String requestId);

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<SubmittedResourceRequestStatus> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter);

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedIterable}.
     */
    PagedIterable<SubmittedResourceRequestStatus> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter, Context context);
}
