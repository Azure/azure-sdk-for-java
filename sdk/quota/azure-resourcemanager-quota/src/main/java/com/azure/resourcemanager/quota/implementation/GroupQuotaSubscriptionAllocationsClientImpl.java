// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionAllocationsClient;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsListInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaSubscriptionAllocationsClient.
 */
public final class GroupQuotaSubscriptionAllocationsClientImpl implements GroupQuotaSubscriptionAllocationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaSubscriptionAllocationsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionAllocationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionAllocationsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service = RestProxy.create(GroupQuotaSubscriptionAllocationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaSubscriptionAllocations to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaSubscriptionAllocationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocations/{location}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubscriptionQuotaAllocationsListInner>> list(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}.
     * 
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}. This will include the GroupQuota and total quota allocated to the
     * subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU} along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationsListInner>> listWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String location) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
                    groupQuotaName, resourceProviderName, location, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}.
     * 
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}. This will include the GroupQuota and total quota allocated to the
     * subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU} along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubscriptionQuotaAllocationsListInner>> listWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String location, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), managementGroupId, this.client.getSubscriptionId(),
            groupQuotaName, resourceProviderName, location, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}.
     * 
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}. This will include the GroupQuota and total quota allocated to the
     * subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsListInner> listAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        return listWithResponseAsync(managementGroupId, groupQuotaName, resourceProviderName, location)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}.
     * 
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}. This will include the GroupQuota and total quota allocated to the
     * subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU} along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubscriptionQuotaAllocationsListInner> listWithResponse(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String location, Context context) {
        return listWithResponseAsync(managementGroupId, groupQuotaName, resourceProviderName, location, context)
            .block();
    }

    /**
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}.
     * 
     * Gets all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}. This will include the GroupQuota and total quota allocated to the
     * subscription. Only the Group quota allocated to the subscription can be allocated back to the MG Group Quota.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quota allocated to a subscription for the specified resource provider and location for resource
     * names passed in $filter=resourceName eq {SKU}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsListInner list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        return listWithResponse(managementGroupId, groupQuotaName, resourceProviderName, location, Context.NONE)
            .getValue();
    }
}
