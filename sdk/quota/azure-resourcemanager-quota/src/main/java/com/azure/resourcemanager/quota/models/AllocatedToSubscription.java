// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SubscriptionIds and quota allocated to subscriptions from the GroupQuota.
 */
@Immutable
public final class AllocatedToSubscription implements JsonSerializable<AllocatedToSubscription> {
    /*
     * An Azure subscriptionId.
     */
    private String subscriptionId;

    /*
     * The amount of quota allocated to this subscriptionId from the GroupQuotasEntity.
     */
    private Long quotaAllocated;

    /**
     * Creates an instance of AllocatedToSubscription class.
     */
    private AllocatedToSubscription() {
    }

    /**
     * Get the subscriptionId property: An Azure subscriptionId.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the quotaAllocated property: The amount of quota allocated to this subscriptionId from the GroupQuotasEntity.
     * 
     * @return the quotaAllocated value.
     */
    public Long quotaAllocated() {
        return this.quotaAllocated;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeNumberField("quotaAllocated", this.quotaAllocated);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AllocatedToSubscription from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AllocatedToSubscription if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AllocatedToSubscription.
     */
    public static AllocatedToSubscription fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AllocatedToSubscription deserializedAllocatedToSubscription = new AllocatedToSubscription();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedAllocatedToSubscription.subscriptionId = reader.getString();
                } else if ("quotaAllocated".equals(fieldName)) {
                    deserializedAllocatedToSubscription.quotaAllocated = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAllocatedToSubscription;
        });
    }
}
