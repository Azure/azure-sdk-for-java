// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The QuotaAllocationRequestBaseProperties model.
 */
@Fluent
public final class QuotaAllocationRequestBaseProperties
    implements JsonSerializable<QuotaAllocationRequestBaseProperties> {
    /*
     * The new quota limit for the subscription. The incremental quota will be allocated from pre-approved group quota.
     */
    private Long limit;

    /*
     * Name of the resource provided by the resource provider. This property is already included in the request URI, so
     * it is a readonly property returned in the response.
     */
    private QuotaAllocationRequestBasePropertiesName innerName;

    /*
     * The location for which the subscription is allocated
     */
    private String region;

    /**
     * Creates an instance of QuotaAllocationRequestBaseProperties class.
     */
    public QuotaAllocationRequestBaseProperties() {
    }

    /**
     * Get the limit property: The new quota limit for the subscription. The incremental quota will be allocated from
     * pre-approved group quota.
     * 
     * @return the limit value.
     */
    public Long limit() {
        return this.limit;
    }

    /**
     * Set the limit property: The new quota limit for the subscription. The incremental quota will be allocated from
     * pre-approved group quota.
     * 
     * @param limit the limit value to set.
     * @return the QuotaAllocationRequestBaseProperties object itself.
     */
    public QuotaAllocationRequestBaseProperties withLimit(Long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the innerName property: Name of the resource provided by the resource provider. This property is already
     * included in the request URI, so it is a readonly property returned in the response.
     * 
     * @return the innerName value.
     */
    private QuotaAllocationRequestBasePropertiesName innerName() {
        return this.innerName;
    }

    /**
     * Get the region property: The location for which the subscription is allocated.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: The location for which the subscription is allocated.
     * 
     * @param region the region value to set.
     * @return the QuotaAllocationRequestBaseProperties object itself.
     */
    public QuotaAllocationRequestBaseProperties withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Get the value property: Resource name.
     * 
     * @return the value value.
     */
    public String value() {
        return this.innerName() == null ? null : this.innerName().value();
    }

    /**
     * Get the localizedValue property: Resource display name.
     * 
     * @return the localizedValue value.
     */
    public String localizedValue() {
        return this.innerName() == null ? null : this.innerName().localizedValue();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerName() != null) {
            innerName().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeStringField("region", this.region);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaAllocationRequestBaseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaAllocationRequestBaseProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuotaAllocationRequestBaseProperties.
     */
    public static QuotaAllocationRequestBaseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaAllocationRequestBaseProperties deserializedQuotaAllocationRequestBaseProperties
                = new QuotaAllocationRequestBaseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("limit".equals(fieldName)) {
                    deserializedQuotaAllocationRequestBaseProperties.limit = reader.getNullable(JsonReader::getLong);
                } else if ("name".equals(fieldName)) {
                    deserializedQuotaAllocationRequestBaseProperties.innerName
                        = QuotaAllocationRequestBasePropertiesName.fromJson(reader);
                } else if ("region".equals(fieldName)) {
                    deserializedQuotaAllocationRequestBaseProperties.region = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaAllocationRequestBaseProperties;
        });
    }
}
