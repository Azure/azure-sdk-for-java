// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaDetailsName;
import java.io.IOException;

/**
 * Quota properties for the specified resource.
 */
@Fluent
public final class SubscriptionQuotaAllocationsProperties extends SubscriptionQuotaDetails {
    /*
     * Name of the resource provided by the resource provider. This property is already included in the request URI, so
     * it is a readonly property returned in the response.
     */
    private SubscriptionQuotaDetailsName innerName;

    /*
     * The shareable quota for the subscription.
     */
    private Long shareableQuota;

    /**
     * Creates an instance of SubscriptionQuotaAllocationsProperties class.
     */
    public SubscriptionQuotaAllocationsProperties() {
    }

    /**
     * Get the innerName property: Name of the resource provided by the resource provider. This property is already
     * included in the request URI, so it is a readonly property returned in the response.
     * 
     * @return the innerName value.
     */
    private SubscriptionQuotaDetailsName innerName() {
        return this.innerName;
    }

    /**
     * Get the shareableQuota property: The shareable quota for the subscription.
     * 
     * @return the shareableQuota value.
     */
    @Override
    public Long shareableQuota() {
        return this.shareableQuota;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionQuotaAllocationsProperties withResourceName(String resourceName) {
        super.withResourceName(resourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SubscriptionQuotaAllocationsProperties withLimit(Long limit) {
        super.withLimit(limit);
        return this;
    }

    /**
     * Get the value property: Resource name.
     * 
     * @return the value value.
     */
    public String value() {
        return this.innerName() == null ? null : this.innerName().value();
    }

    /**
     * Get the localizedValue property: Resource display name.
     * 
     * @return the localizedValue value.
     */
    public String localizedValue() {
        return this.innerName() == null ? null : this.innerName().localizedValue();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerName() != null) {
            innerName().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceName", resourceName());
        jsonWriter.writeNumberField("limit", limit());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubscriptionQuotaAllocationsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubscriptionQuotaAllocationsProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubscriptionQuotaAllocationsProperties.
     */
    public static SubscriptionQuotaAllocationsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubscriptionQuotaAllocationsProperties deserializedSubscriptionQuotaAllocationsProperties
                = new SubscriptionQuotaAllocationsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceName".equals(fieldName)) {
                    deserializedSubscriptionQuotaAllocationsProperties.withResourceName(reader.getString());
                } else if ("limit".equals(fieldName)) {
                    deserializedSubscriptionQuotaAllocationsProperties
                        .withLimit(reader.getNullable(JsonReader::getLong));
                } else if ("shareableQuota".equals(fieldName)) {
                    deserializedSubscriptionQuotaAllocationsProperties.shareableQuota
                        = reader.getNullable(JsonReader::getLong);
                } else if ("name".equals(fieldName)) {
                    deserializedSubscriptionQuotaAllocationsProperties.innerName
                        = SubscriptionQuotaDetailsName.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscriptionQuotaAllocationsProperties;
        });
    }
}
