// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsRequestsClient;
import com.azure.resourcemanager.quota.fluent.models.SubmittedResourceRequestStatusInner;
import com.azure.resourcemanager.quota.models.SubmittedResourceRequestStatusList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLimitsRequestsClient.
 */
public final class GroupQuotaLimitsRequestsClientImpl implements GroupQuotaLimitsRequestsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaLimitsRequestsService service;

    /**
     * The service client containing this operation class.
     */
    private final AzureQuotaExtensionApiImpl client;

    /**
     * Initializes an instance of GroupQuotaLimitsRequestsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaLimitsRequestsClientImpl(AzureQuotaExtensionApiImpl client) {
        this.service = RestProxy.create(GroupQuotaLimitsRequestsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureQuotaExtensionApiGroupQuotaLimitsRequests to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "AzureQuotaExtensionA")
    public interface GroupQuotaLimitsRequestsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests/{resourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName,
            @PathParam("resourceName") String resourceName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SubmittedResourceRequestStatusInner groupQuotaRequest,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests/{resourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName,
            @PathParam("resourceName") String resourceName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SubmittedResourceRequestStatusInner groupQuotaRequest,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusInner>> get(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("requestId") String requestId,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusList>> list(@HostParam("$host") String endpoint,
            @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName,
            @QueryParam("api-version") String apiVersion, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName,
        SubmittedResourceRequestStatusInner groupQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                resourceProviderName, resourceName, this.client.getApiVersion(), groupQuotaRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName,
        SubmittedResourceRequestStatusInner groupQuotaRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.createOrUpdate(this.client.getEndpoint(), managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, this.client.getApiVersion(), groupQuotaRequest, accept, context);
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName,
        SubmittedResourceRequestStatusInner groupQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, groupQuotaRequest);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, this.client.getContext());
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, groupQuotaRequest);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, this.client.getContext());
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdateAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName,
        SubmittedResourceRequestStatusInner groupQuotaRequest, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, groupQuotaRequest, context);
        return this.client.<ProxyResource, ProxyResource>getLroResult(mono, this.client.getHttpPipeline(),
            ProxyResource.class, ProxyResource.class, context);
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        return this
            .beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
                groupQuotaRequest)
            .getSyncPoller();
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ProxyResource>, ProxyResource> beginCreateOrUpdate(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String resourceName,
        SubmittedResourceRequestStatusInner groupQuotaRequest, Context context) {
        return this
            .beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
                groupQuotaRequest, context)
            .getSyncPoller();
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ProxyResource> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest,
        Context context) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        return createOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest).block();
    }

    /**
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Put the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * ("name": {"value" : "resourceName") properties are specified in the request body. Only 1 resource quota can be
     * requested.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ProxyResource createOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest, Context context) {
        return createOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest, context).block();
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                resourceProviderName, resourceName, this.client.getApiVersion(), groupQuotaRequest, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), managementGroupId, groupQuotaName, resourceProviderName,
            resourceName, this.client.getApiVersion(), groupQuotaRequest, accept, context);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubmittedResourceRequestStatusInner>, SubmittedResourceRequestStatusInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, groupQuotaRequest);
        return this.client.<SubmittedResourceRequestStatusInner, SubmittedResourceRequestStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), SubmittedResourceRequestStatusInner.class,
            SubmittedResourceRequestStatusInner.class, this.client.getContext());
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubmittedResourceRequestStatusInner>, SubmittedResourceRequestStatusInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, groupQuotaRequest);
        return this.client.<SubmittedResourceRequestStatusInner, SubmittedResourceRequestStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), SubmittedResourceRequestStatusInner.class,
            SubmittedResourceRequestStatusInner.class, this.client.getContext());
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubmittedResourceRequestStatusInner>, SubmittedResourceRequestStatusInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, resourceName, groupQuotaRequest, context);
        return this.client.<SubmittedResourceRequestStatusInner, SubmittedResourceRequestStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), SubmittedResourceRequestStatusInner.class,
            SubmittedResourceRequestStatusInner.class, context);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubmittedResourceRequestStatusInner>, SubmittedResourceRequestStatusInner>
        beginUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName, String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        return this
            .beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName, groupQuotaRequest)
            .getSyncPoller();
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubmittedResourceRequestStatusInner>, SubmittedResourceRequestStatusInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String resourceName,
        SubmittedResourceRequestStatusInner groupQuotaRequest, Context context) {
        return this
            .beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName, groupQuotaRequest,
                context)
            .getSyncPoller();
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubmittedResourceRequestStatusInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubmittedResourceRequestStatusInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubmittedResourceRequestStatusInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest,
        Context context) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName,
            groupQuotaRequest, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmittedResourceRequestStatusInner update(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName) {
        final SubmittedResourceRequestStatusInner groupQuotaRequest = null;
        return updateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName, groupQuotaRequest)
            .block();
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource.
     * 
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. the location and resourceName
     * properties are specified in the request body. Only 1 resource quota can be requested. Please note that patch
     * request creates a new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param resourceName Resource name.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return status of a single GroupQuota request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmittedResourceRequestStatusInner update(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String resourceName, SubmittedResourceRequestStatusInner groupQuotaRequest,
        Context context) {
        return updateAsync(managementGroupId, groupQuotaName, resourceProviderName, resourceName, groupQuotaRequest,
            context).block();
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubmittedResourceRequestStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String requestId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName, requestId,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubmittedResourceRequestStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String requestId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), managementGroupId, groupQuotaName, requestId,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubmittedResourceRequestStatusInner> getAsync(String managementGroupId, String groupQuotaName,
        String requestId) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, requestId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubmittedResourceRequestStatusInner> getWithResponse(String managementGroupId,
        String groupQuotaName, String requestId, Context context) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, requestId, context).block();
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmittedResourceRequestStatusInner get(String managementGroupId, String groupQuotaName, String requestId) {
        return getWithResponse(managementGroupId, groupQuotaName, requestId, Context.NONE).getValue();
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), managementGroupId, groupQuotaName,
                resourceProviderName, this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<SubmittedResourceRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), managementGroupId, groupQuotaName, resourceProviderName,
                this.client.getApiVersion(), filter, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubmittedResourceRequestStatusInner> listAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(managementGroupId, groupQuotaName, resourceProviderName, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubmittedResourceRequestStatusInner> listAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(managementGroupId, groupQuotaName, resourceProviderName, filter, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, resourceProviderName, filter));
    }

    /**
     * Get the status of a single GroupQuota request by requestId.
     * 
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location} and resource eq {resourceName}
     * Example: $filter=location eq eastus and resourceName eq cores.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter, Context context) {
        return new PagedIterable<>(listAsync(managementGroupId, groupQuotaName, resourceProviderName, filter, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubmittedResourceRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items
     * 
     * The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return share Quota Entity list along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }
}
