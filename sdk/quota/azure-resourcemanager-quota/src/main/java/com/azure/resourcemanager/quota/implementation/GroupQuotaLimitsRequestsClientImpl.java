// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsRequestsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaLimitListInner;
import com.azure.resourcemanager.quota.fluent.models.SubmittedResourceRequestStatusInner;
import com.azure.resourcemanager.quota.implementation.models.SubmittedResourceRequestStatusList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLimitsRequestsClient.
 */
public final class GroupQuotaLimitsRequestsClientImpl implements GroupQuotaLimitsRequestsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaLimitsRequestsService service;

    /**
     * The service client containing this operation class.
     */
    private final QuotaManagementClientImpl client;

    /**
     * Initializes an instance of GroupQuotaLimitsRequestsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaLimitsRequestsClientImpl(QuotaManagementClientImpl client) {
        this.service = RestProxy.create(GroupQuotaLimitsRequestsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaManagementClientGroupQuotaLimitsRequests to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "QuotaManagementClientGroupQuotaLimitsRequests")
    public interface GroupQuotaLimitsRequestsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SubmittedResourceRequestStatusList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaLimits/{location}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotaLimitListInner groupQuotaRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/groupQuotaLimits/{location}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotaLimitListInner groupQuotaRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("requestId") String requestId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/groupQuotaRequests/{requestId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SubmittedResourceRequestStatusInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("requestId") String requestId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SubmittedResourceRequestStatusList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<SubmittedResourceRequestStatusList> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators \r\n|---------------------|------------------------\n\r\n location eq
     * {location} and resource eq {resourceName}\n Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (filter == null) {
            return Mono.error(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, resourceProviderName, filter, accept, context))
            .<PagedResponse<SubmittedResourceRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators \r\n|---------------------|------------------------\n\r\n location eq
     * {location} and resource eq {resourceName}\n Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SubmittedResourceRequestStatusInner> listAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(managementGroupId, groupQuotaName, resourceProviderName, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators \r\n|---------------------|------------------------\n\r\n location eq
     * {location} and resource eq {resourceName}\n Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SubmittedResourceRequestStatusInner> listSinglePage(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (filter == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SubmittedResourceRequestStatusList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
                groupQuotaName, resourceProviderName, filter, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators \r\n|---------------------|------------------------\n\r\n location eq
     * {location} and resource eq {resourceName}\n Example: $filter=location eq eastus and resourceName eq cores.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SubmittedResourceRequestStatusInner> listSinglePage(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (filter == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter filter is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SubmittedResourceRequestStatusList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
                groupQuotaName, resourceProviderName, filter, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators \r\n|---------------------|------------------------\n\r\n location eq
     * {location} and resource eq {resourceName}\n Example: $filter=location eq eastus and resourceName eq cores.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter) {
        return new PagedIterable<>(
            () -> listSinglePage(managementGroupId, groupQuotaName, resourceProviderName, filter),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators \r\n|---------------------|------------------------\n\r\n location eq
     * {location} and resource eq {resourceName}\n Example: $filter=location eq eastus and resourceName eq cores.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SubmittedResourceRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter, Context context) {
        return new PagedIterable<>(
            () -> listSinglePage(managementGroupId, groupQuotaName, resourceProviderName, filter, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotaLimitListInner groupQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (location == null) {
            return Mono.error(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, resourceProviderName, location, accept, groupQuotaRequest, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotaLimitListInner groupQuotaRequest) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, groupQuotaRequest, Context.NONE);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotaLimitListInner groupQuotaRequest, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (resourceProviderName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceProviderName is required and cannot be null."));
        }
        if (location == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter location is required and cannot be null."));
        }
        if (groupQuotaRequest != null) {
            groupQuotaRequest.validate();
        }
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, groupQuotaRequest, context);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitListInner>, GroupQuotaLimitListInner> beginUpdateAsync(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
        GroupQuotaLimitListInner groupQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, groupQuotaRequest);
        return this.client.<GroupQuotaLimitListInner, GroupQuotaLimitListInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotaLimitListInner.class, GroupQuotaLimitListInner.class,
            this.client.getContext());
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaLimitListInner>, GroupQuotaLimitListInner> beginUpdateAsync(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String location) {
        final GroupQuotaLimitListInner groupQuotaRequest = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, groupQuotaRequest);
        return this.client.<GroupQuotaLimitListInner, GroupQuotaLimitListInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotaLimitListInner.class, GroupQuotaLimitListInner.class,
            this.client.getContext());
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitListInner>, GroupQuotaLimitListInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
        GroupQuotaLimitListInner groupQuotaRequest) {
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName, location, groupQuotaRequest);
        return this.client.<GroupQuotaLimitListInner, GroupQuotaLimitListInner>getLroResult(response,
            GroupQuotaLimitListInner.class, GroupQuotaLimitListInner.class, Context.NONE);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitListInner>, GroupQuotaLimitListInner>
        beginUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName, String location) {
        final GroupQuotaLimitListInner groupQuotaRequest = null;
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName, location, groupQuotaRequest);
        return this.client.<GroupQuotaLimitListInner, GroupQuotaLimitListInner>getLroResult(response,
            GroupQuotaLimitListInner.class, GroupQuotaLimitListInner.class, Context.NONE);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaLimitListInner>, GroupQuotaLimitListInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
        GroupQuotaLimitListInner groupQuotaRequest, Context context) {
        Response<BinaryData> response = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName,
            location, groupQuotaRequest, context);
        return this.client.<GroupQuotaLimitListInner, GroupQuotaLimitListInner>getLroResult(response,
            GroupQuotaLimitListInner.class, GroupQuotaLimitListInner.class, context);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitListInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotaLimitListInner groupQuotaRequest) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location, groupQuotaRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaLimitListInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        final GroupQuotaLimitListInner groupQuotaRequest = null;
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location, groupQuotaRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitListInner update(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String location) {
        final GroupQuotaLimitListInner groupQuotaRequest = null;
        return beginUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, groupQuotaRequest)
            .getFinalResult();
    }

    /**
     * Create the GroupQuota requests for a specific ResourceProvider/Location/Resource. The resourceName properties are
     * specified in the request body. Only 1 resource quota can be requested. Please note that patch request creates a
     * new groupQuota request.
     * Use the polling API - OperationsStatus URI specified in Azure-AsyncOperation header field, with retry-after
     * duration in seconds to check the intermediate status. This API provides the finals status with the request
     * details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param groupQuotaRequest The GroupQuotaRequest body details for specific resourceProvider/location/resources.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quota Limit details.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaLimitListInner update(String managementGroupId, String groupQuotaName, String resourceProviderName,
        String location, GroupQuotaLimitListInner groupQuotaRequest, Context context) {
        return beginUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, groupQuotaRequest,
            context).getFinalResult();
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SubmittedResourceRequestStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String requestId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            return Mono.error(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, requestId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubmittedResourceRequestStatusInner> getAsync(String managementGroupId, String groupQuotaName,
        String requestId) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, requestId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SubmittedResourceRequestStatusInner> getWithResponse(String managementGroupId,
        String groupQuotaName, String requestId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (managementGroupId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter managementGroupId is required and cannot be null."));
        }
        if (groupQuotaName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter groupQuotaName is required and cannot be null."));
        }
        if (requestId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter requestId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, requestId, accept, context);
    }

    /**
     * Get API to check the status of a GroupQuota request by requestId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubmittedResourceRequestStatusInner get(String managementGroupId, String groupQuotaName, String requestId) {
        return getWithResponse(managementGroupId, groupQuotaName, requestId, Context.NONE).getValue();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SubmittedResourceRequestStatusInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<SubmittedResourceRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SubmittedResourceRequestStatusInner> listNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SubmittedResourceRequestStatusList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a GroupQuota request by requestId along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<SubmittedResourceRequestStatusInner> listNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<SubmittedResourceRequestStatusList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(GroupQuotaLimitsRequestsClientImpl.class);
}
