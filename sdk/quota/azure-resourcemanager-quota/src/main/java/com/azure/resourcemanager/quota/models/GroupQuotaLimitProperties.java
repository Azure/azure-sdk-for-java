// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaDetailsName;
import java.io.IOException;

/**
 * Group Quota properties for the specified resource.
 */
@Fluent
public final class GroupQuotaLimitProperties extends GroupQuotaDetails {
    /*
     * Quota allocated to subscriptions
     */
    private AllocatedQuotaToSubscriptionList allocatedToSubscriptions;

    /*
     * The available Group Quota Limit at the MG level. This Group quota can be allocated to subscription(s).
     */
    private Long availableLimit;

    /*
     * Name of the resource provided by the resource provider. This property is already included in the request URI, so
     * it is a readonly property returned in the response.
     */
    private GroupQuotaDetailsName innerName;

    /*
     * The usages units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET
     * response in the request body of your PUT operation.
     */
    private String unit;

    /**
     * Creates an instance of GroupQuotaLimitProperties class.
     */
    public GroupQuotaLimitProperties() {
    }

    /**
     * Get the allocatedToSubscriptions property: Quota allocated to subscriptions.
     * 
     * @return the allocatedToSubscriptions value.
     */
    @Override
    public AllocatedQuotaToSubscriptionList allocatedToSubscriptions() {
        return this.allocatedToSubscriptions;
    }

    /**
     * Get the availableLimit property: The available Group Quota Limit at the MG level. This Group quota can be
     * allocated to subscription(s).
     * 
     * @return the availableLimit value.
     */
    @Override
    public Long availableLimit() {
        return this.availableLimit;
    }

    /**
     * Get the innerName property: Name of the resource provided by the resource provider. This property is already
     * included in the request URI, so it is a readonly property returned in the response.
     * 
     * @return the innerName value.
     */
    private GroupQuotaDetailsName innerName() {
        return this.innerName;
    }

    /**
     * Get the unit property: The usages units, such as Count and Bytes. When requesting quota, use the **unit** value
     * returned in the GET response in the request body of your PUT operation.
     * 
     * @return the unit value.
     */
    @Override
    public String unit() {
        return this.unit;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GroupQuotaLimitProperties withResourceName(String resourceName) {
        super.withResourceName(resourceName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GroupQuotaLimitProperties withLimit(Long limit) {
        super.withLimit(limit);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GroupQuotaLimitProperties withComment(String comment) {
        super.withComment(comment);
        return this;
    }

    /**
     * Get the value property: Resource name.
     * 
     * @return the value value.
     */
    public String value() {
        return this.innerName() == null ? null : this.innerName().value();
    }

    /**
     * Get the localizedValue property: Resource display name.
     * 
     * @return the localizedValue value.
     */
    public String localizedValue() {
        return this.innerName() == null ? null : this.innerName().localizedValue();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerName() != null) {
            innerName().validate();
        }
        if (allocatedToSubscriptions() != null) {
            allocatedToSubscriptions().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceName", resourceName());
        jsonWriter.writeNumberField("limit", limit());
        jsonWriter.writeStringField("comment", comment());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupQuotaLimitProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupQuotaLimitProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupQuotaLimitProperties.
     */
    public static GroupQuotaLimitProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupQuotaLimitProperties deserializedGroupQuotaLimitProperties = new GroupQuotaLimitProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceName".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.withResourceName(reader.getString());
                } else if ("limit".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.withLimit(reader.getNullable(JsonReader::getLong));
                } else if ("comment".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.withComment(reader.getString());
                } else if ("unit".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.unit = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.innerName = GroupQuotaDetailsName.fromJson(reader);
                } else if ("availableLimit".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.availableLimit = reader.getNullable(JsonReader::getLong);
                } else if ("allocatedToSubscriptions".equals(fieldName)) {
                    deserializedGroupQuotaLimitProperties.allocatedToSubscriptions
                        = AllocatedQuotaToSubscriptionList.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupQuotaLimitProperties;
        });
    }
}
