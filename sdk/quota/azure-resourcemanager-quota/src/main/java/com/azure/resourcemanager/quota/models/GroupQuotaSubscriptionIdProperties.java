// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The GroupQuotaSubscriptionIdProperties model.
 */
@Immutable
public final class GroupQuotaSubscriptionIdProperties implements JsonSerializable<GroupQuotaSubscriptionIdProperties> {
    /*
     * An Azure subscriptionId.
     */
    private String subscriptionId;

    /*
     * Status of this subscriptionId being associated with the GroupQuotasEntity.
     */
    private RequestState provisioningState;

    /**
     * Creates an instance of GroupQuotaSubscriptionIdProperties class.
     */
    public GroupQuotaSubscriptionIdProperties() {
    }

    /**
     * Get the subscriptionId property: An Azure subscriptionId.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the provisioningState property: Status of this subscriptionId being associated with the GroupQuotasEntity.
     * 
     * @return the provisioningState value.
     */
    public RequestState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupQuotaSubscriptionIdProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupQuotaSubscriptionIdProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupQuotaSubscriptionIdProperties.
     */
    public static GroupQuotaSubscriptionIdProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupQuotaSubscriptionIdProperties deserializedGroupQuotaSubscriptionIdProperties
                = new GroupQuotaSubscriptionIdProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedGroupQuotaSubscriptionIdProperties.subscriptionId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedGroupQuotaSubscriptionIdProperties.provisioningState
                        = RequestState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupQuotaSubscriptionIdProperties;
        });
    }
}
