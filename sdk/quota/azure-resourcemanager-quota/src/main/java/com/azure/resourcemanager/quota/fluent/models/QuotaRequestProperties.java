// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.quota.models.QuotaRequestState;
import com.azure.resourcemanager.quota.models.ServiceErrorDetail;
import com.azure.resourcemanager.quota.models.SubRequest;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Quota request properties.
 */
@Fluent
public final class QuotaRequestProperties implements JsonSerializable<QuotaRequestProperties> {
    /*
     * The quota request status.
     */
    private QuotaRequestState provisioningState;

    /*
     * User-friendly status message.
     */
    private String message;

    /*
     * Error details of the quota request.
     */
    private ServiceErrorDetail error;

    /*
     * The quota request submission time. The date conforms to the following format specified by the ISO 8601 standard:
     * yyyy-MM-ddTHH:mm:ssZ
     */
    private OffsetDateTime requestSubmitTime;

    /*
     * Quota request details.
     */
    private List<SubRequest> value;

    /**
     * Creates an instance of QuotaRequestProperties class.
     */
    public QuotaRequestProperties() {
    }

    /**
     * Get the provisioningState property: The quota request status.
     * 
     * @return the provisioningState value.
     */
    public QuotaRequestState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the message property: User-friendly status message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the error property: Error details of the quota request.
     * 
     * @return the error value.
     */
    public ServiceErrorDetail error() {
        return this.error;
    }

    /**
     * Set the error property: Error details of the quota request.
     * 
     * @param error the error value to set.
     * @return the QuotaRequestProperties object itself.
     */
    public QuotaRequestProperties withError(ServiceErrorDetail error) {
        this.error = error;
        return this;
    }

    /**
     * Get the requestSubmitTime property: The quota request submission time. The date conforms to the following format
     * specified by the ISO 8601 standard: yyyy-MM-ddTHH:mm:ssZ.
     * 
     * @return the requestSubmitTime value.
     */
    public OffsetDateTime requestSubmitTime() {
        return this.requestSubmitTime;
    }

    /**
     * Get the value property: Quota request details.
     * 
     * @return the value value.
     */
    public List<SubRequest> value() {
        return this.value;
    }

    /**
     * Set the value property: Quota request details.
     * 
     * @param value the value value to set.
     * @return the QuotaRequestProperties object itself.
     */
    public QuotaRequestProperties withValue(List<SubRequest> value) {
        this.value = value;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (error() != null) {
            error().validate();
        }
        if (value() != null) {
            value().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaRequestProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaRequestProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuotaRequestProperties.
     */
    public static QuotaRequestProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaRequestProperties deserializedQuotaRequestProperties = new QuotaRequestProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedQuotaRequestProperties.provisioningState
                        = QuotaRequestState.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedQuotaRequestProperties.message = reader.getString();
                } else if ("error".equals(fieldName)) {
                    deserializedQuotaRequestProperties.error = ServiceErrorDetail.fromJson(reader);
                } else if ("requestSubmitTime".equals(fieldName)) {
                    deserializedQuotaRequestProperties.requestSubmitTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("value".equals(fieldName)) {
                    List<SubRequest> value = reader.readArray(reader1 -> SubRequest.fromJson(reader1));
                    deserializedQuotaRequestProperties.value = value;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaRequestProperties;
        });
    }
}
