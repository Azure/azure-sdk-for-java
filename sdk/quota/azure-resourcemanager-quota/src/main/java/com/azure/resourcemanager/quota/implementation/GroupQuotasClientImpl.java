// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotasClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotasEntityInner;
import com.azure.resourcemanager.quota.implementation.models.GroupQuotaList;
import com.azure.resourcemanager.quota.models.GroupQuotasEntityPatch;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotasClient.
 */
public final class GroupQuotasClientImpl implements GroupQuotasClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotasService service;

    /**
     * The service client containing this operation class.
     */
    private final QuotaManagementClientImpl client;

    /**
     * Initializes an instance of GroupQuotasClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotasClientImpl(QuotaManagementClientImpl client) {
        this.service
            = RestProxy.create(GroupQuotasService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaManagementClientGroupQuotas to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "QuotaManagementClientGroupQuotas")
    public interface GroupQuotasService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotasEntityInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotasEntityInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEntityInner groupQuotaPutRequestBody, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEntityInner groupQuotaPutRequestBody, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEntityPatch groupQuotasPatchRequestBody, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEntityPatch groupQuotasPatchRequestBody, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotaList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaList>> listNext(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotaList> listNextSync(@PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("endpoint") String endpoint, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group
     * quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotasEntityInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group
     * quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> getAsync(String managementGroupId, String groupQuotaName) {
        return getWithResponseAsync(managementGroupId, groupQuotaName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group
     * quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotasEntityInner> getWithResponse(String managementGroupId, String groupQuotaName,
        Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, accept, context);
    }

    /**
     * Gets the GroupQuotas for the name passed. It will return the GroupQuotas properties only. The details on group
     * quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas for the name passed.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner get(String managementGroupId, String groupQuotaName) {
        return getWithResponse(managementGroupId, groupQuotaName, Context.NONE).getValue();
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, accept, groupQuotaPutRequestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityInner groupQuotaPutRequestBody) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, accept, groupQuotaPutRequestBody, Context.NONE);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, accept, groupQuotaPutRequestBody, context);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdateAsync(
        String managementGroupId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName, groupQuotaPutRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEntityInner.class, GroupQuotasEntityInner.class,
            this.client.getContext());
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner>
        beginCreateOrUpdateAsync(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName, groupQuotaPutRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEntityInner.class, GroupQuotasEntityInner.class,
            this.client.getContext());
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdate(
        String managementGroupId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(managementGroupId, groupQuotaName, groupQuotaPutRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(response,
            GroupQuotasEntityInner.class, GroupQuotasEntityInner.class, Context.NONE);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner>
        beginCreateOrUpdate(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        Response<BinaryData> response
            = createOrUpdateWithResponse(managementGroupId, groupQuotaName, groupQuotaPutRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(response,
            GroupQuotasEntityInner.class, GroupQuotasEntityInner.class, Context.NONE);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginCreateOrUpdate(
        String managementGroupId, String groupQuotaName, GroupQuotasEntityInner groupQuotaPutRequestBody,
        Context context) {
        Response<BinaryData> response
            = createOrUpdateWithResponse(managementGroupId, groupQuotaName, groupQuotaPutRequestBody, context);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(response,
            GroupQuotasEntityInner.class, GroupQuotasEntityInner.class, context);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityInner groupQuotaPutRequestBody) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, groupQuotaPutRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> createOrUpdateAsync(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, groupQuotaPutRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner createOrUpdate(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityInner groupQuotaPutRequestBody = null;
        return beginCreateOrUpdate(managementGroupId, groupQuotaName, groupQuotaPutRequestBody).getFinalResult();
    }

    /**
     * Creates a new GroupQuota for the name passed. A RequestId will be returned by the Service. The status can be
     * polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotaPutRequestBody The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner createOrUpdate(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityInner groupQuotaPutRequestBody, Context context) {
        return beginCreateOrUpdate(managementGroupId, groupQuotaName, groupQuotaPutRequestBody, context)
            .getFinalResult();
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityPatch groupQuotasPatchRequestBody) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, accept, groupQuotasPatchRequestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityPatch groupQuotasPatchRequestBody) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, accept, groupQuotasPatchRequestBody, Context.NONE);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityPatch groupQuotasPatchRequestBody, Context context) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, accept, groupQuotasPatchRequestBody, context);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdateAsync(
        String managementGroupId, String groupQuotaName, GroupQuotasEntityPatch groupQuotasPatchRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEntityInner.class, GroupQuotasEntityInner.class,
            this.client.getContext());
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityPatch groupQuotasPatchRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEntityInner.class, GroupQuotasEntityInner.class,
            this.client.getContext());
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdate(String managementGroupId,
        String groupQuotaName, GroupQuotasEntityPatch groupQuotasPatchRequestBody) {
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(response,
            GroupQuotasEntityInner.class, GroupQuotasEntityInner.class, Context.NONE);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdate(String managementGroupId,
        String groupQuotaName) {
        final GroupQuotasEntityPatch groupQuotasPatchRequestBody = null;
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(response,
            GroupQuotasEntityInner.class, GroupQuotasEntityInner.class, Context.NONE);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEntityInner>, GroupQuotasEntityInner> beginUpdate(String managementGroupId,
        String groupQuotaName, GroupQuotasEntityPatch groupQuotasPatchRequestBody, Context context) {
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody, context);
        return this.client.<GroupQuotasEntityInner, GroupQuotasEntityInner>getLroResult(response,
            GroupQuotasEntityInner.class, GroupQuotasEntityInner.class, context);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> updateAsync(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityPatch groupQuotasPatchRequestBody) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEntityInner> updateAsync(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityPatch groupQuotasPatchRequestBody = null;
        return beginUpdateAsync(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner update(String managementGroupId, String groupQuotaName) {
        final GroupQuotasEntityPatch groupQuotasPatchRequestBody = null;
        return beginUpdate(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody).getFinalResult();
    }

    /**
     * Updates the GroupQuotas for the name passed. A GroupQuotas RequestId will be returned by the Service. The status
     * can be polled periodically. The status Async polling is using standards defined at -
     * https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/async-api-reference.md#asynchronous-operations.
     * Use the OperationsStatus URI provided in Azure-AsyncOperation header, the duration will be specified in
     * retry-after header. Once the operation gets to terminal state - Succeeded | Failed, then the URI will change to
     * Get URI and full details can be checked.
     * Any change in the filters will be applicable to the future quota assignments, existing quota allocated to
     * subscriptions from the GroupQuotas remains unchanged.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param groupQuotasPatchRequestBody The GroupQuotas Patch Request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return properties and filters for ShareQuota.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEntityInner update(String managementGroupId, String groupQuotaName,
        GroupQuotasEntityPatch groupQuotasPatchRequestBody, Context context) {
        return beginUpdate(managementGroupId, groupQuotaName, groupQuotasPatchRequestBody, context).getFinalResult();
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String managementGroupId, String groupQuotaName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String managementGroupId, String groupQuotaName) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, Context.NONE);
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String managementGroupId, String groupQuotaName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, context);
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String managementGroupId, String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String groupQuotaName) {
        Response<BinaryData> response = deleteWithResponse(managementGroupId, groupQuotaName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String groupQuotaName,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(managementGroupId, groupQuotaName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String groupQuotaName) {
        return beginDeleteAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String groupQuotaName) {
        beginDelete(managementGroupId, groupQuotaName).getFinalResult();
    }

    /**
     * Deletes the GroupQuotas for the name passed. All the remaining shareQuota in the GroupQuotas will be lost.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String groupQuotaName, Context context) {
        beginDelete(managementGroupId, groupQuotaName, context).getFinalResult();
    }

    /**
     * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details on
     * group quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotasEntityInner>> listSinglePageAsync(String managementGroupId) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, accept, context))
            .<PagedResponse<GroupQuotasEntityInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details on
     * group quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotasEntityInner> listAsync(String managementGroupId) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details on
     * group quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotasEntityInner> listSinglePage(String managementGroupId) {
        final String accept = "application/json";
        Response<GroupQuotaList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            managementGroupId, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details on
     * group quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotasEntityInner> listSinglePage(String managementGroupId, Context context) {
        final String accept = "application/json";
        Response<GroupQuotaList> res = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(),
            managementGroupId, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details on
     * group quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotasEntityInner> list(String managementGroupId) {
        return new PagedIterable<>(() -> listSinglePage(managementGroupId), nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Lists GroupQuotas for the scope passed. It will return the GroupQuotas QuotaEntity properties only.The details on
     * group quota can be access from the group quota APIs.
     * 
     * @param managementGroupId The management group ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotasEntityInner> list(String managementGroupId, Context context) {
        return new PagedIterable<>(() -> listSinglePage(managementGroupId, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotasEntityInner>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotasEntityInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotasEntityInner> listNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<GroupQuotaList> res = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of Group Quotas at MG level along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotasEntityInner> listNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<GroupQuotaList> res = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
