// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The resource usages value.
 */
@Immutable
public final class UsagesObject implements JsonSerializable<UsagesObject> {
    /*
     * The usages value.
     */
    private int value;

    /*
     * The quota or usages limit types.
     */
    private UsagesTypes usagesType;

    /**
     * Creates an instance of UsagesObject class.
     */
    private UsagesObject() {
    }

    /**
     * Get the value property: The usages value.
     * 
     * @return the value value.
     */
    public int value() {
        return this.value;
    }

    /**
     * Get the usagesType property: The quota or usages limit types.
     * 
     * @return the usagesType value.
     */
    public UsagesTypes usagesType() {
        return this.usagesType;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("value", this.value);
        jsonWriter.writeStringField("usagesType", this.usagesType == null ? null : this.usagesType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UsagesObject from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UsagesObject if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UsagesObject.
     */
    public static UsagesObject fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UsagesObject deserializedUsagesObject = new UsagesObject();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    deserializedUsagesObject.value = reader.getInt();
                } else if ("usagesType".equals(fieldName)) {
                    deserializedUsagesObject.usagesType = UsagesTypes.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsagesObject;
        });
    }
}
