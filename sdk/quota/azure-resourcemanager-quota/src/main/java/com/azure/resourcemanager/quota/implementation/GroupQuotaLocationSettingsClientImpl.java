// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLocationSettingsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotasEnforcementStatusInner;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaLocationSettingsClient.
 */
public final class GroupQuotaLocationSettingsClientImpl implements GroupQuotaLocationSettingsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaLocationSettingsService service;

    /**
     * The service client containing this operation class.
     */
    private final QuotaManagementClientImpl client;

    /**
     * Initializes an instance of GroupQuotaLocationSettingsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaLocationSettingsClientImpl(QuotaManagementClientImpl client) {
        this.service = RestProxy.create(GroupQuotaLocationSettingsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaManagementClientGroupQuotaLocationSettings to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "QuotaManagementClientGroupQuotaLocationSettings")
    public interface GroupQuotaLocationSettingsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationSettings/{location}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotasEnforcementStatusInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationSettings/{location}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotasEnforcementStatusInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationSettings/{location}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEnforcementStatusInner locationSettings, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationSettings/{location}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEnforcementStatusInner locationSettings, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationSettings/{location}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEnforcementStatusInner locationSettings, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/locationSettings/{location}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") GroupQuotasEnforcementStatusInner locationSettings, Context context);
    }

    /**
     * Gets the GroupQuotas enforcement settings for the ResourceProvider/location. The locations, where GroupQuota
     * enforcement is not enabled will return Not Found.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas enforcement settings for the ResourceProvider/location along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotasEnforcementStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String location) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, resourceProviderName, location, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the GroupQuotas enforcement settings for the ResourceProvider/location. The locations, where GroupQuota
     * enforcement is not enabled will return Not Found.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas enforcement settings for the ResourceProvider/location on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEnforcementStatusInner> getAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, resourceProviderName, location)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the GroupQuotas enforcement settings for the ResourceProvider/location. The locations, where GroupQuota
     * enforcement is not enabled will return Not Found.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas enforcement settings for the ResourceProvider/location along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotasEnforcementStatusInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, context);
    }

    /**
     * Gets the GroupQuotas enforcement settings for the ResourceProvider/location. The locations, where GroupQuota
     * enforcement is not enabled will return Not Found.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuotas enforcement settings for the ResourceProvider/location.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEnforcementStatusInner get(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        return getWithResponse(managementGroupId, groupQuotaName, resourceProviderName, location, Context.NONE)
            .getValue();
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String location,
        GroupQuotasEnforcementStatusInner locationSettings) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, resourceProviderName, location, accept, locationSettings, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, locationSettings, Context.NONE);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings,
        Context context) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, locationSettings, context);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginCreateOrUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String location, GroupQuotasEnforcementStatusInner locationSettings) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEnforcementStatusInner.class,
            GroupQuotasEnforcementStatusInner.class, this.client.getContext());
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginCreateOrUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEnforcementStatusInner.class,
            GroupQuotasEnforcementStatusInner.class, this.client.getContext());
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginCreateOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String location, GroupQuotasEnforcementStatusInner locationSettings) {
        Response<BinaryData> response = createOrUpdateWithResponse(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(response,
            GroupQuotasEnforcementStatusInner.class, GroupQuotasEnforcementStatusInner.class, Context.NONE);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginCreateOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        Response<BinaryData> response = createOrUpdateWithResponse(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(response,
            GroupQuotasEnforcementStatusInner.class, GroupQuotasEnforcementStatusInner.class, Context.NONE);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginCreateOrUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String location, GroupQuotasEnforcementStatusInner locationSettings, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings, context);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(response,
            GroupQuotasEnforcementStatusInner.class, GroupQuotasEnforcementStatusInner.class, context);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEnforcementStatusInner> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location,
            locationSettings).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEnforcementStatusInner> createOrUpdateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location,
            locationSettings).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEnforcementStatusInner createOrUpdate(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        return beginCreateOrUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings)
            .getFinalResult();
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Then delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEnforcementStatusInner createOrUpdate(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings,
        Context context) {
        return beginCreateOrUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings,
            context).getFinalResult();
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, resourceProviderName, location, accept, locationSettings, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, locationSettings, Context.NONE);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings,
        Context context) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, resourceProviderName, location, accept, locationSettings, context);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
            GroupQuotasEnforcementStatusInner locationSettings) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEnforcementStatusInner.class,
            GroupQuotasEnforcementStatusInner.class, this.client.getContext());
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName,
            String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotasEnforcementStatusInner.class,
            GroupQuotasEnforcementStatusInner.class, this.client.getContext());
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
        GroupQuotasEnforcementStatusInner locationSettings) {
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(response,
            GroupQuotasEnforcementStatusInner.class, GroupQuotasEnforcementStatusInner.class, Context.NONE);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner>
        beginUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName, String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        Response<BinaryData> response
            = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(response,
            GroupQuotasEnforcementStatusInner.class, GroupQuotasEnforcementStatusInner.class, Context.NONE);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotasEnforcementStatusInner>, GroupQuotasEnforcementStatusInner> beginUpdate(
        String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
        GroupQuotasEnforcementStatusInner locationSettings, Context context) {
        Response<BinaryData> response = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName,
            location, locationSettings, context);
        return this.client.<GroupQuotasEnforcementStatusInner, GroupQuotasEnforcementStatusInner>getLroResult(response,
            GroupQuotasEnforcementStatusInner.class, GroupQuotasEnforcementStatusInner.class, context);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEnforcementStatusInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotasEnforcementStatusInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEnforcementStatusInner update(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location) {
        final GroupQuotasEnforcementStatusInner locationSettings = null;
        return beginUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings)
            .getFinalResult();
    }

    /**
     * Enables the GroupQuotas enforcement for the resource provider and the location specified. The resource provider
     * will start using the group quotas as the overall quota for the subscriptions included in the GroupQuota. The
     * subscriptions cannot request quota at subscription level since it is now part of an enforced group.
     * The subscriptions share the GroupQuotaLimits assigned to the GroupQuota. If the GroupQuotaLimits is used, then
     * submit a groupQuotaLimit request for the specific resource - provider/location/resource.
     * Once the GroupQuota Enforcement is enabled then, it cannot be deleted or reverted back. To disable GroupQuota
     * Enforcement -
     * 1. Remove all the subscriptions from the groupQuota using the delete API for Subscriptions (Check the example -
     * GroupQuotaSubscriptions_Delete).
     * 2. Ten delete the GroupQuota (Check the example - GroupQuotas_Delete).
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param locationSettings The GroupQuota body details for creation or update of a GroupQuota entity.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the GroupQuota Enforcement status for a Azure Location/Region.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotasEnforcementStatusInner update(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, GroupQuotasEnforcementStatusInner locationSettings,
        Context context) {
        return beginUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, locationSettings, context)
            .getFinalResult();
    }
}
