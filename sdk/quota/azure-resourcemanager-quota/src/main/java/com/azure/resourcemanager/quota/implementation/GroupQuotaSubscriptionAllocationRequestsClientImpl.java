// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionAllocationRequestsClient;
import com.azure.resourcemanager.quota.fluent.models.QuotaAllocationRequestStatusInner;
import com.azure.resourcemanager.quota.fluent.models.SubscriptionQuotaAllocationsListInner;
import com.azure.resourcemanager.quota.implementation.models.QuotaAllocationRequestStatusList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * GroupQuotaSubscriptionAllocationRequestsClient.
 */
public final class GroupQuotaSubscriptionAllocationRequestsClientImpl
    implements GroupQuotaSubscriptionAllocationRequestsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaSubscriptionAllocationRequestsService service;

    /**
     * The service client containing this operation class.
     */
    private final QuotaManagementClientImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionAllocationRequestsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionAllocationRequestsClientImpl(QuotaManagementClientImpl client) {
        this.service = RestProxy.create(GroupQuotaSubscriptionAllocationRequestsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaManagementClientGroupQuotaSubscriptionAllocationRequests to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "QuotaManagementClientGroupQuotaSubscriptionAllocationRequests")
    public interface GroupQuotaSubscriptionAllocationRequestsService {
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocations/{location}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SubscriptionQuotaAllocationsListInner allocateQuotaRequest, Context context);

        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocations/{location}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @PathParam("location") String location,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") SubscriptionQuotaAllocationsListInner allocateQuotaRequest, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests/{allocationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QuotaAllocationRequestStatusInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName,
            @PathParam("allocationId") String allocationId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests/{allocationId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<QuotaAllocationRequestStatusInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName,
            @PathParam("allocationId") String allocationId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QuotaAllocationRequestStatusList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/subscriptions/{subscriptionId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/resourceProviders/{resourceProviderName}/quotaAllocationRequests")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<QuotaAllocationRequestStatusList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("subscriptionId") String subscriptionId, @PathParam("groupQuotaName") String groupQuotaName,
            @PathParam("resourceProviderName") String resourceProviderName, @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<QuotaAllocationRequestStatusList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<QuotaAllocationRequestStatusList> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, SubscriptionQuotaAllocationsListInner allocateQuotaRequest) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, location,
                contentType, accept, allocateQuotaRequest, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, SubscriptionQuotaAllocationsListInner allocateQuotaRequest) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, location, contentType, accept,
            allocateQuotaRequest, Context.NONE);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, SubscriptionQuotaAllocationsListInner allocateQuotaRequest,
        Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, location, contentType, accept,
            allocateQuotaRequest, context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of subscription quota list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SubscriptionQuotaAllocationsListInner>, SubscriptionQuotaAllocationsListInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
            SubscriptionQuotaAllocationsListInner allocateQuotaRequest) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName,
            resourceProviderName, location, allocateQuotaRequest);
        return this.client.<SubscriptionQuotaAllocationsListInner, SubscriptionQuotaAllocationsListInner>getLroResult(
            mono, this.client.getHttpPipeline(), SubscriptionQuotaAllocationsListInner.class,
            SubscriptionQuotaAllocationsListInner.class, this.client.getContext());
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of subscription quota list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsListInner>, SubscriptionQuotaAllocationsListInner>
        beginUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
            SubscriptionQuotaAllocationsListInner allocateQuotaRequest) {
        Response<BinaryData> response = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName,
            location, allocateQuotaRequest);
        return this.client.<SubscriptionQuotaAllocationsListInner, SubscriptionQuotaAllocationsListInner>getLroResult(
            response, SubscriptionQuotaAllocationsListInner.class, SubscriptionQuotaAllocationsListInner.class,
            Context.NONE);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of subscription quota list.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SubscriptionQuotaAllocationsListInner>, SubscriptionQuotaAllocationsListInner>
        beginUpdate(String managementGroupId, String groupQuotaName, String resourceProviderName, String location,
            SubscriptionQuotaAllocationsListInner allocateQuotaRequest, Context context) {
        Response<BinaryData> response = updateWithResponse(managementGroupId, groupQuotaName, resourceProviderName,
            location, allocateQuotaRequest, context);
        return this.client.<SubscriptionQuotaAllocationsListInner, SubscriptionQuotaAllocationsListInner>getLroResult(
            response, SubscriptionQuotaAllocationsListInner.class, SubscriptionQuotaAllocationsListInner.class,
            context);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SubscriptionQuotaAllocationsListInner> updateAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, SubscriptionQuotaAllocationsListInner allocateQuotaRequest) {
        return beginUpdateAsync(managementGroupId, groupQuotaName, resourceProviderName, location, allocateQuotaRequest)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsListInner update(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, SubscriptionQuotaAllocationsListInner allocateQuotaRequest) {
        return beginUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, allocateQuotaRequest)
            .getFinalResult();
    }

    /**
     * Request to assign quota from group quota to a specific Subscription. The assign GroupQuota to subscriptions or
     * reduce the quota allocated to subscription to give back the unused quota ( quota &gt;= usages) to the groupQuota.
     * So, this API can be used to assign Quota to subscriptions and assign back unused quota to group quota, which can
     * be assigned to another subscriptions in the GroupQuota. User can collect unused quotas from multiple
     * subscriptions within the groupQuota and assign the groupQuota to the subscription, where it's needed.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param location The name of the Azure region.
     * @param allocateQuotaRequest Quota requests payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return subscription quota list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SubscriptionQuotaAllocationsListInner update(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String location, SubscriptionQuotaAllocationsListInner allocateQuotaRequest,
        Context context) {
        return beginUpdate(managementGroupId, groupQuotaName, resourceProviderName, location, allocateQuotaRequest,
            context).getFinalResult();
    }

    /**
     * Get the quota allocation request status for the subscriptionId by allocationId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param allocationId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<QuotaAllocationRequestStatusInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String allocationId) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, allocationId,
                accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the quota allocation request status for the subscriptionId by allocationId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param allocationId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<QuotaAllocationRequestStatusInner> getAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String allocationId) {
        return getWithResponseAsync(managementGroupId, groupQuotaName, resourceProviderName, allocationId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the quota allocation request status for the subscriptionId by allocationId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param allocationId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<QuotaAllocationRequestStatusInner> getWithResponse(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String allocationId, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, allocationId, accept, context);
    }

    /**
     * Get the quota allocation request status for the subscriptionId by allocationId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param allocationId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the quota allocation request status for the subscriptionId by allocationId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public QuotaAllocationRequestStatusInner get(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String allocationId) {
        return getWithResponse(managementGroupId, groupQuotaName, resourceProviderName, allocationId, Context.NONE)
            .getValue();
    }

    /**
     * Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is
     * required.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<QuotaAllocationRequestStatusInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
                    this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, filter, accept, context))
            .<PagedResponse<QuotaAllocationRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is
     * required.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<QuotaAllocationRequestStatusInner> listAsync(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(managementGroupId, groupQuotaName, resourceProviderName, filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is
     * required.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaAllocationRequestStatusInner> listSinglePage(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter) {
        final String accept = "application/json";
        Response<QuotaAllocationRequestStatusList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
                this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, filter, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is
     * required.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaAllocationRequestStatusInner> listSinglePage(String managementGroupId,
        String groupQuotaName, String resourceProviderName, String filter, Context context) {
        final String accept = "application/json";
        Response<QuotaAllocationRequestStatusList> res
            = service.listSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
                this.client.getSubscriptionId(), groupQuotaName, resourceProviderName, filter, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is
     * required.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<QuotaAllocationRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter) {
        return new PagedIterable<>(
            () -> listSinglePage(managementGroupId, groupQuotaName, resourceProviderName, filter),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Get all the quotaAllocationRequests for a resourceProvider/location. The filter paramter for location is
     * required.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param resourceProviderName The resource provider name, such as - Microsoft.Compute. Currently only
     * Microsoft.Compute resource provider supports this API.
     * @param filter | Field | Supported operators
     * |---------------------|------------------------
     * 
     * location eq {location}
     * Example: $filter=location eq eastus.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<QuotaAllocationRequestStatusInner> list(String managementGroupId, String groupQuotaName,
        String resourceProviderName, String filter, Context context) {
        return new PagedIterable<>(
            () -> listSinglePage(managementGroupId, groupQuotaName, resourceProviderName, filter, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<QuotaAllocationRequestStatusInner>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<QuotaAllocationRequestStatusInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaAllocationRequestStatusInner> listNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<QuotaAllocationRequestStatusList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the quotaAllocationRequests for a resourceProvider/location along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<QuotaAllocationRequestStatusInner> listNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<QuotaAllocationRequestStatusList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
