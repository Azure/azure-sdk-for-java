// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of GroupQuotaSubscriptionRequests.
 */
public interface GroupQuotaSubscriptionRequests {
    /**
     * Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId along with {@link Response}.
     */
    Response<GroupQuotaSubscriptionRequestStatus> getWithResponse(String managementGroupId, String groupQuotaName,
        String requestId, Context context);

    /**
     * Get API to check the status of a subscriptionIds request by requestId. Use the polling API - OperationsStatus URI
     * specified in Azure-AsyncOperation header field, with retry-after duration in seconds to check the intermediate
     * status. This API provides the finals status with the request details and status.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param requestId Request Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return aPI to check the status of a subscriptionIds request by requestId.
     */
    GroupQuotaSubscriptionRequestStatus get(String managementGroupId, String groupQuotaName, String requestId);

    /**
     * List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1 year.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionRequests Status as paginated response with {@link PagedIterable}.
     */
    PagedIterable<GroupQuotaSubscriptionRequestStatus> list(String managementGroupId, String groupQuotaName);

    /**
     * List API to check the status of a subscriptionId requests by requestId. Request history is maintained for 1 year.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionRequests Status as paginated response with {@link PagedIterable}.
     */
    PagedIterable<GroupQuotaSubscriptionRequestStatus> list(String managementGroupId, String groupQuotaName,
        Context context);
}
