// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.quota.fluent.AzureQuotaExtensionApi;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLimitsRequestsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaLocationSettingsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotasClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionAllocationRequestsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionAllocationsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionRequestsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionsClient;
import com.azure.resourcemanager.quota.fluent.GroupQuotaUsagesClient;
import com.azure.resourcemanager.quota.fluent.QuotaOperationsClient;
import com.azure.resourcemanager.quota.fluent.QuotaRequestStatusClient;
import com.azure.resourcemanager.quota.fluent.QuotasClient;
import com.azure.resourcemanager.quota.fluent.UsagesClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the AzureQuotaExtensionApiImpl type.
 */
@ServiceClient(builder = AzureQuotaExtensionApiBuilder.class)
public final class AzureQuotaExtensionApiImpl implements AzureQuotaExtensionApi {
    /**
     * The ID of the target subscription. The value must be an UUID.
     */
    private final String subscriptionId;

    /**
     * Gets The ID of the target subscription. The value must be an UUID.
     * 
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * server parameter.
     */
    private final String endpoint;

    /**
     * Gets server parameter.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The default poll interval for long-running operation.
     */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     * 
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /**
     * The GroupQuotasClient object to access its operations.
     */
    private final GroupQuotasClient groupQuotas;

    /**
     * Gets the GroupQuotasClient object to access its operations.
     * 
     * @return the GroupQuotasClient object.
     */
    public GroupQuotasClient getGroupQuotas() {
        return this.groupQuotas;
    }

    /**
     * The GroupQuotaSubscriptionsClient object to access its operations.
     */
    private final GroupQuotaSubscriptionsClient groupQuotaSubscriptions;

    /**
     * Gets the GroupQuotaSubscriptionsClient object to access its operations.
     * 
     * @return the GroupQuotaSubscriptionsClient object.
     */
    public GroupQuotaSubscriptionsClient getGroupQuotaSubscriptions() {
        return this.groupQuotaSubscriptions;
    }

    /**
     * The GroupQuotaSubscriptionRequestsClient object to access its operations.
     */
    private final GroupQuotaSubscriptionRequestsClient groupQuotaSubscriptionRequests;

    /**
     * Gets the GroupQuotaSubscriptionRequestsClient object to access its operations.
     * 
     * @return the GroupQuotaSubscriptionRequestsClient object.
     */
    public GroupQuotaSubscriptionRequestsClient getGroupQuotaSubscriptionRequests() {
        return this.groupQuotaSubscriptionRequests;
    }

    /**
     * The GroupQuotaLimitsClient object to access its operations.
     */
    private final GroupQuotaLimitsClient groupQuotaLimits;

    /**
     * Gets the GroupQuotaLimitsClient object to access its operations.
     * 
     * @return the GroupQuotaLimitsClient object.
     */
    public GroupQuotaLimitsClient getGroupQuotaLimits() {
        return this.groupQuotaLimits;
    }

    /**
     * The GroupQuotaLimitsRequestsClient object to access its operations.
     */
    private final GroupQuotaLimitsRequestsClient groupQuotaLimitsRequests;

    /**
     * Gets the GroupQuotaLimitsRequestsClient object to access its operations.
     * 
     * @return the GroupQuotaLimitsRequestsClient object.
     */
    public GroupQuotaLimitsRequestsClient getGroupQuotaLimitsRequests() {
        return this.groupQuotaLimitsRequests;
    }

    /**
     * The GroupQuotaSubscriptionAllocationsClient object to access its operations.
     */
    private final GroupQuotaSubscriptionAllocationsClient groupQuotaSubscriptionAllocations;

    /**
     * Gets the GroupQuotaSubscriptionAllocationsClient object to access its operations.
     * 
     * @return the GroupQuotaSubscriptionAllocationsClient object.
     */
    public GroupQuotaSubscriptionAllocationsClient getGroupQuotaSubscriptionAllocations() {
        return this.groupQuotaSubscriptionAllocations;
    }

    /**
     * The GroupQuotaSubscriptionAllocationRequestsClient object to access its operations.
     */
    private final GroupQuotaSubscriptionAllocationRequestsClient groupQuotaSubscriptionAllocationRequests;

    /**
     * Gets the GroupQuotaSubscriptionAllocationRequestsClient object to access its operations.
     * 
     * @return the GroupQuotaSubscriptionAllocationRequestsClient object.
     */
    public GroupQuotaSubscriptionAllocationRequestsClient getGroupQuotaSubscriptionAllocationRequests() {
        return this.groupQuotaSubscriptionAllocationRequests;
    }

    /**
     * The GroupQuotaUsagesClient object to access its operations.
     */
    private final GroupQuotaUsagesClient groupQuotaUsages;

    /**
     * Gets the GroupQuotaUsagesClient object to access its operations.
     * 
     * @return the GroupQuotaUsagesClient object.
     */
    public GroupQuotaUsagesClient getGroupQuotaUsages() {
        return this.groupQuotaUsages;
    }

    /**
     * The GroupQuotaLocationSettingsClient object to access its operations.
     */
    private final GroupQuotaLocationSettingsClient groupQuotaLocationSettings;

    /**
     * Gets the GroupQuotaLocationSettingsClient object to access its operations.
     * 
     * @return the GroupQuotaLocationSettingsClient object.
     */
    public GroupQuotaLocationSettingsClient getGroupQuotaLocationSettings() {
        return this.groupQuotaLocationSettings;
    }

    /**
     * The UsagesClient object to access its operations.
     */
    private final UsagesClient usages;

    /**
     * Gets the UsagesClient object to access its operations.
     * 
     * @return the UsagesClient object.
     */
    public UsagesClient getUsages() {
        return this.usages;
    }

    /**
     * The QuotasClient object to access its operations.
     */
    private final QuotasClient quotas;

    /**
     * Gets the QuotasClient object to access its operations.
     * 
     * @return the QuotasClient object.
     */
    public QuotasClient getQuotas() {
        return this.quotas;
    }

    /**
     * The QuotaRequestStatusClient object to access its operations.
     */
    private final QuotaRequestStatusClient quotaRequestStatus;

    /**
     * Gets the QuotaRequestStatusClient object to access its operations.
     * 
     * @return the QuotaRequestStatusClient object.
     */
    public QuotaRequestStatusClient getQuotaRequestStatus() {
        return this.quotaRequestStatus;
    }

    /**
     * The QuotaOperationsClient object to access its operations.
     */
    private final QuotaOperationsClient quotaOperations;

    /**
     * Gets the QuotaOperationsClient object to access its operations.
     * 
     * @return the QuotaOperationsClient object.
     */
    public QuotaOperationsClient getQuotaOperations() {
        return this.quotaOperations;
    }

    /**
     * Initializes an instance of AzureQuotaExtensionApi client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param endpoint server parameter.
     */
    AzureQuotaExtensionApiImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter,
        Duration defaultPollInterval, AzureEnvironment environment, String subscriptionId, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.apiVersion = "2023-06-01-preview";
        this.groupQuotas = new GroupQuotasClientImpl(this);
        this.groupQuotaSubscriptions = new GroupQuotaSubscriptionsClientImpl(this);
        this.groupQuotaSubscriptionRequests = new GroupQuotaSubscriptionRequestsClientImpl(this);
        this.groupQuotaLimits = new GroupQuotaLimitsClientImpl(this);
        this.groupQuotaLimitsRequests = new GroupQuotaLimitsRequestsClientImpl(this);
        this.groupQuotaSubscriptionAllocations = new GroupQuotaSubscriptionAllocationsClientImpl(this);
        this.groupQuotaSubscriptionAllocationRequests = new GroupQuotaSubscriptionAllocationRequestsClientImpl(this);
        this.groupQuotaUsages = new GroupQuotaUsagesClientImpl(this);
        this.groupQuotaLocationSettings = new GroupQuotaLocationSettingsClientImpl(this);
        this.usages = new UsagesClientImpl(this);
        this.quotas = new QuotasClientImpl(this);
        this.quotaRequestStatus = new QuotaRequestStatusClientImpl(this);
        this.quotaOperations = new QuotaOperationsClientImpl(this);
    }

    /**
     * Gets default client context.
     * 
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     * 
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        return CoreUtils.mergeContexts(this.getContext(), context);
    }

    /**
     * Gets long running operation result.
     * 
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline, Type pollResultType, Type finalResultType, Context context) {
        return PollerFactory.create(serializerAdapter, httpPipeline, pollResultType, finalResultType,
            defaultPollInterval, activationResponse, context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     * 
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse = new HttpResponseImpl(lroError.getResponseStatusCode(), lroError.getResponseHeaders(),
                    lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError = this.getSerializerAdapter()
                            .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        LOGGER.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(HttpHeaderName.fromString(s));
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AzureQuotaExtensionApiImpl.class);
}
