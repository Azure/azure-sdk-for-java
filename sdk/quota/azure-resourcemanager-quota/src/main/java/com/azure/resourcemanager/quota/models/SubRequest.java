// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.quota.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request property.
 */
@Fluent
public final class SubRequest implements JsonSerializable<SubRequest> {
    /*
     * Resource name.
     */
    private ResourceName name;

    /*
     * Resource type for which the quota properties were requested.
     */
    private String resourceType;

    /*
     * Quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET
     * response in the request body of your PUT operation.
     */
    private String unit;

    /*
     * The quota request status.
     */
    private QuotaRequestState provisioningState;

    /*
     * User-friendly status message.
     */
    private String message;

    /*
     * Quota request ID.
     */
    private String subRequestId;

    /*
     * Resource quota limit properties.
     */
    private LimitJsonObject limit;

    /**
     * Creates an instance of SubRequest class.
     */
    public SubRequest() {
    }

    /**
     * Get the name property: Resource name.
     * 
     * @return the name value.
     */
    public ResourceName name() {
        return this.name;
    }

    /**
     * Set the name property: Resource name.
     * 
     * @param name the name value to set.
     * @return the SubRequest object itself.
     */
    public SubRequest withName(ResourceName name) {
        this.name = name;
        return this;
    }

    /**
     * Get the resourceType property: Resource type for which the quota properties were requested.
     * 
     * @return the resourceType value.
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Get the unit property: Quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value
     * returned in the GET response in the request body of your PUT operation.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: Quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value
     * returned in the GET response in the request body of your PUT operation.
     * 
     * @param unit the unit value to set.
     * @return the SubRequest object itself.
     */
    public SubRequest withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the provisioningState property: The quota request status.
     * 
     * @return the provisioningState value.
     */
    public QuotaRequestState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the message property: User-friendly status message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the subRequestId property: Quota request ID.
     * 
     * @return the subRequestId value.
     */
    public String subRequestId() {
        return this.subRequestId;
    }

    /**
     * Get the limit property: Resource quota limit properties.
     * 
     * @return the limit value.
     */
    public LimitJsonObject limit() {
        return this.limit;
    }

    /**
     * Set the limit property: Resource quota limit properties.
     * 
     * @param limit the limit value to set.
     * @return the SubRequest object itself.
     */
    public SubRequest withLimit(LimitJsonObject limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
        if (limit() != null) {
            limit().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("name", this.name);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeJsonField("limit", this.limit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubRequest if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SubRequest.
     */
    public static SubRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubRequest deserializedSubRequest = new SubRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedSubRequest.name = ResourceName.fromJson(reader);
                } else if ("resourceType".equals(fieldName)) {
                    deserializedSubRequest.resourceType = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedSubRequest.unit = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSubRequest.provisioningState = QuotaRequestState.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedSubRequest.message = reader.getString();
                } else if ("subRequestId".equals(fieldName)) {
                    deserializedSubRequest.subRequestId = reader.getString();
                } else if ("limit".equals(fieldName)) {
                    deserializedSubRequest.limit = LimitJsonObject.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubRequest;
        });
    }
}
