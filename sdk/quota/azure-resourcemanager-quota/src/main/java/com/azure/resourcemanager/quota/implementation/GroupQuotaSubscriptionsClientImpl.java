// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.quota.implementation;

import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.quota.fluent.GroupQuotaSubscriptionsClient;
import com.azure.resourcemanager.quota.fluent.models.GroupQuotaSubscriptionIdInner;
import com.azure.resourcemanager.quota.implementation.models.GroupQuotaSubscriptionIdList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in GroupQuotaSubscriptionsClient.
 */
public final class GroupQuotaSubscriptionsClientImpl implements GroupQuotaSubscriptionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final GroupQuotaSubscriptionsService service;

    /**
     * The service client containing this operation class.
     */
    private final QuotaManagementClientImpl client;

    /**
     * Initializes an instance of GroupQuotaSubscriptionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    GroupQuotaSubscriptionsClientImpl(QuotaManagementClientImpl client) {
        this.service = RestProxy.create(GroupQuotaSubscriptionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for QuotaManagementClientGroupQuotaSubscriptions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "QuotaManagementClientGroupQuotaSubscriptions")
    public interface GroupQuotaSubscriptionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotaSubscriptionIdInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Put("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> updateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions/{subscriptionId}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @PathParam("subscriptionId") String subscriptionId,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdList>> list(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Quota/groupQuotas/{groupQuotaName}/subscriptions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotaSubscriptionIdList> listSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("managementGroupId") String managementGroupId,
            @PathParam("groupQuotaName") String groupQuotaName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GroupQuotaSubscriptionIdList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<GroupQuotaSubscriptionIdList> listNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GroupQuotaSubscriptionIdInner>> getWithResponseAsync(String managementGroupId,
        String groupQuotaName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> getAsync(String managementGroupId, String groupQuotaName) {
        return getWithResponseAsync(managementGroupId, groupQuotaName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GroupQuotaSubscriptionIdInner> getWithResponse(String managementGroupId, String groupQuotaName,
        Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Returns the subscriptionIds along with its provisioning state for being associated with the GroupQuota. If the
     * subscription is not a member of GroupQuota, it will return 404, else 200.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner get(String managementGroupId, String groupQuotaName) {
        return getWithResponse(managementGroupId, groupQuotaName, Context.NONE).getValue();
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String managementGroupId,
        String groupQuotaName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String managementGroupId, String groupQuotaName) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), accept, Context.NONE);
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String managementGroupId, String groupQuotaName,
        Context context) {
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginCreateOrUpdateAsync(String managementGroupId, String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class,
            this.client.getContext());
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginCreateOrUpdate(String managementGroupId, String groupQuotaName) {
        Response<BinaryData> response = createOrUpdateWithResponse(managementGroupId, groupQuotaName);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(response,
            GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class, Context.NONE);
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginCreateOrUpdate(String managementGroupId, String groupQuotaName, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(managementGroupId, groupQuotaName, context);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(response,
            GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class, context);
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> createOrUpdateAsync(String managementGroupId, String groupQuotaName) {
        return beginCreateOrUpdateAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner createOrUpdate(String managementGroupId, String groupQuotaName) {
        return beginCreateOrUpdate(managementGroupId, groupQuotaName).getFinalResult();
    }

    /**
     * Adds a subscription to GroupQuotas. The subscriptions will be validated based on the additionalAttributes defined
     * in the GroupQuota. The additionalAttributes works as filter for the subscriptions, which can be included in the
     * GroupQuotas. The request's TenantId is validated against the subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner createOrUpdate(String managementGroupId, String groupQuotaName,
        Context context) {
        return beginCreateOrUpdate(managementGroupId, groupQuotaName, context).getFinalResult();
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String managementGroupId, String groupQuotaName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, this.client.getSubscriptionId(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), accept, Context.NONE);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> updateWithResponse(String managementGroupId, String groupQuotaName, Context context) {
        final String accept = "application/json";
        return service.updateSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), accept, context);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdateAsync(String managementGroupId, String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = updateWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(mono,
            this.client.getHttpPipeline(), GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class,
            this.client.getContext());
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdate(String managementGroupId, String groupQuotaName) {
        Response<BinaryData> response = updateWithResponse(managementGroupId, groupQuotaName);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(response,
            GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class, Context.NONE);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of this represents a Azure subscriptionId that is associated with a
     * GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GroupQuotaSubscriptionIdInner>, GroupQuotaSubscriptionIdInner>
        beginUpdate(String managementGroupId, String groupQuotaName, Context context) {
        Response<BinaryData> response = updateWithResponse(managementGroupId, groupQuotaName, context);
        return this.client.<GroupQuotaSubscriptionIdInner, GroupQuotaSubscriptionIdInner>getLroResult(response,
            GroupQuotaSubscriptionIdInner.class, GroupQuotaSubscriptionIdInner.class, context);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GroupQuotaSubscriptionIdInner> updateAsync(String managementGroupId, String groupQuotaName) {
        return beginUpdateAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner update(String managementGroupId, String groupQuotaName) {
        return beginUpdate(managementGroupId, groupQuotaName).getFinalResult();
    }

    /**
     * Updates the GroupQuotas with the subscription to add to the subscriptions list. The subscriptions will be
     * validated if additionalAttributes are defined in the GroupQuota. The request's TenantId is validated against the
     * subscription's TenantId.
     * 
     * @param managementGroupId Management Group Id.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this represents a Azure subscriptionId that is associated with a GroupQuotasEntity.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GroupQuotaSubscriptionIdInner update(String managementGroupId, String groupQuotaName, Context context) {
        return beginUpdate(managementGroupId, groupQuotaName, context).getFinalResult();
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String managementGroupId, String groupQuotaName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, this.client.getSubscriptionId(), context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String managementGroupId, String groupQuotaName) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), Context.NONE);
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String managementGroupId, String groupQuotaName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(), managementGroupId,
            groupQuotaName, this.client.getSubscriptionId(), context);
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String managementGroupId, String groupQuotaName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(managementGroupId, groupQuotaName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String groupQuotaName) {
        Response<BinaryData> response = deleteWithResponse(managementGroupId, groupQuotaName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String managementGroupId, String groupQuotaName,
        Context context) {
        Response<BinaryData> response = deleteWithResponse(managementGroupId, groupQuotaName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String managementGroupId, String groupQuotaName) {
        return beginDeleteAsync(managementGroupId, groupQuotaName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String groupQuotaName) {
        beginDelete(managementGroupId, groupQuotaName).getFinalResult();
    }

    /**
     * Removes the subscription from GroupQuotas. The request's TenantId is validated against the subscription's
     * TenantId.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String managementGroupId, String groupQuotaName, Context context) {
        beginDelete(managementGroupId, groupQuotaName, context).getFinalResult();
    }

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listSinglePageAsync(String managementGroupId,
        String groupQuotaName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getApiVersion(),
                managementGroupId, groupQuotaName, accept, context))
            .<PagedResponse<GroupQuotaSubscriptionIdInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GroupQuotaSubscriptionIdInner> listAsync(String managementGroupId, String groupQuotaName) {
        return new PagedFlux<>(() -> listSinglePageAsync(managementGroupId, groupQuotaName),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotaSubscriptionIdInner> listSinglePage(String managementGroupId,
        String groupQuotaName) {
        final String accept = "application/json";
        Response<GroupQuotaSubscriptionIdList> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), managementGroupId, groupQuotaName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotaSubscriptionIdInner> listSinglePage(String managementGroupId, String groupQuotaName,
        Context context) {
        final String accept = "application/json";
        Response<GroupQuotaSubscriptionIdList> res = service.listSync(this.client.getEndpoint(),
            this.client.getApiVersion(), managementGroupId, groupQuotaName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaSubscriptionIdInner> list(String managementGroupId, String groupQuotaName) {
        return new PagedIterable<>(() -> listSinglePage(managementGroupId, groupQuotaName),
            nextLink -> listNextSinglePage(nextLink));
    }

    /**
     * Returns a list of the subscriptionIds associated with the GroupQuotas.
     * 
     * @param managementGroupId The management group ID.
     * @param groupQuotaName The GroupQuota name. The name should be unique for the provided context tenantId/MgId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GroupQuotaSubscriptionIdInner> list(String managementGroupId, String groupQuotaName,
        Context context) {
        return new PagedIterable<>(() -> listSinglePage(managementGroupId, groupQuotaName, context),
            nextLink -> listNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GroupQuotaSubscriptionIdInner>> listNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GroupQuotaSubscriptionIdInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotaSubscriptionIdInner> listNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<GroupQuotaSubscriptionIdList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GroupQuotaSubscriptionIds along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<GroupQuotaSubscriptionIdInner> listNextSinglePage(String nextLink, Context context) {
        final String accept = "application/json";
        Response<GroupQuotaSubscriptionIdList> res
            = service.listNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
